public -> public: Probability = 0.99, Count = 10201
public -> final: Probability = 0.01, Count = 63
public -> Object: Probability = 0.00, Count = 3
public -> extends: Probability = 0.00, Count = 3
public -> String: Probability = 0.00, Count = 3
public -> int: Probability = 0.00, Count = 1
public -> Status: Probability = 0.00, Count = 1
public -> @Override: Probability = 0.00, Count = 7
public -> boolean: Probability = 0.00, Count = 2
public -> static: Probability = 0.00, Count = 1
public -> create: Probability = 0.00, Count = 1
public -> synchronized: Probability = 0.00, Count = 1
ListSpeechSynthesisTasksResponse -> ListSpeechSynthesisTasksResult: Probability = 1.00, Count = 1
ListSpeechSynthesisTasks -> listSpeechSynthesisTasks: Probability = 1.00, Count = 1
( -> (: Probability = 0.90, Count = 31254
( -> x: Probability = 0.00, Count = 5
( -> !pendingDocs.isEmpty: Probability = 0.00, Count = 1
( -> args.length<1: Probability = 0.00, Count = 1
( -> System.err.println: Probability = 0.00, Count = 4
( -> "Usage:: Probability = 0.00, Count = 1
( -> java: Probability = 0.00, Count = 2
( -> System.exit: Probability = 0.00, Count = 3
( -> qqf: Probability = 0.00, Count = 1
( -> q[]: Probability = 0.00, Count = 1
( -> qqf.bestQueries: Probability = 0.00, Count = 1
( -> "body",20: Probability = 0.00, Count = 1
( -> InterruptedException: Probability = 0.00, Count = 2
( -> waitingGen: Probability = 0.00, Count = 1
( -> waitingGen,: Probability = 0.00, Count = 1
( -> ): Probability = 0.02, Count = 863
( -> for: Probability = 0.00, Count = 2
( -> CmpOp.EQ:return: Probability = 0.00, Count = 1
( -> testedValue: Probability = 0.00, Count = 2
( -> .getStringValue: Probability = 0.00, Count = 3
( -> testedValue.length: Probability = 0.00, Count = 1
( -> _pattern: Probability = 0.00, Count = 1
( -> _pattern.matcher: Probability = 0.00, Count = 1
( -> returnCellReference.convertNumToColString: Probability = 0.00, Count = 1
( -> +CellReference.convertNumToColString: Probability = 0.00, Count = 1
( -> _firstCell.formatAsString: Probability = 0.00, Count = 1
( -> _lastCell.getSheetName: Probability = 0.00, Count = 1
( -> updateImpl: Probability = 0.00, Count = 1
( -> Store: Probability = 0.00, Count = 1
( -> @OverrideResult: Probability = 0.00, Count = 1
( -> execute: Probability = 0.00, Count = 1
( -> if: Probability = 0.00, Count = 31
( -> ==: Probability = 0.00, Count = 10
( -> {: Probability = 0.00, Count = 36
( -> Double.compare: Probability = 0.00, Count = 4
( -> CharacterCodingException: Probability = 0.00, Count = 2
( -> term.field: Probability = 0.00, Count = 1
( -> _sewb.getEvaluationCell: Probability = 0.00, Count = 1
( -> FileEntry: Probability = 0.00, Count = 2
( -> IndexFileNames.stripSegmentName: Probability = 0.00, Count = 2
( -> lookContext,r,: Probability = 0.00, Count = 1
( -> >: Probability = 0.00, Count = 3
( -> 1: Probability = 0.00, Count = 4
( -> "[BOOKBOOL]\n": Probability = 0.00, Count = 1
( -> .savelinkvalues: Probability = 0.00, Count = 1
( -> getSaveLinkValues: Probability = 0.00, Count = 1
( -> sessionID,: Probability = 0.00, Count = 1
( -> SessionExpiredException: Probability = 0.00, Count = 1
( -> "session: Probability = 0.00, Count = 1
( -> URI: Probability = 0.00, Count = 1
( -> AUTHORITY_ENCODER.appendEncoded: Probability = 0.00, Count = 1
( -> count: Probability = 0.00, Count = 3
( -> "[UNITS]\n": Probability = 0.00, Count = 1
( -> .units: Probability = 0.00, Count = 1
( -> OldFormulaRecord: Probability = 0.00, Count = 1
( -> ris,: Probability = 0.00, Count = 1
( -> ris.getSid: Probability = 0.00, Count = 1
( -> FormulaSpecialCachedValue.create: Probability = 0.00, Count = 1
( -> java.net.HttpURLConnection: Probability = 0.00, Count = 1
( -> "<null>": Probability = 0.00, Count = 2
( -> url.getHost: Probability = 0.00, Count = 2
( -> isMultibyte: Probability = 0.00, Count = 1
( -> "m": Probability = 0.00, Count = 1
( -> LookupUtils.resolveRangeLookupArg: Probability = 0.00, Count = 1
( -> range_lookup,: Probability = 0.00, Count = 1
( -> Locale.ROOT: Probability = 0.00, Count = 9
( -> shortArray: Probability = 0.00, Count = 1
( -> "subInfos=: Probability = 0.00, Count = 1
( -> SubInfo: Probability = 0.00, Count = 1
( -> subInfos: Probability = 0.00, Count = 1
( -> si.toString: Probability = 0.00, Count = 1
( -> totalBoost: Probability = 0.00, Count = 1
( -> getWordSet: Probability = 0.00, Count = 2
( -> other.type: Probability = 0.00, Count = 1
( -> MissingObjectException,IOException: Probability = 0.00, Count = 1
( -> byte[8192]: Probability = 0.00, Count = 1
( -> removeNullKey: Probability = 0.00, Count = 1
( -> _list.get: Probability = 0.00, Count = 1
( -> :: Probability = 0.00, Count = 4
( -> 0: Probability = 0.00, Count = 9
( -> escherGroup.createPolygon: Probability = 0.00, Count = 2
( -> left,top,right,bottom: Probability = 0.00, Count = 2
( -> =: Probability = 0.00, Count = 14
( -> new: Probability = 0.00, Count = 24
( -> unrollRecursionContexts: Probability = 0.00, Count = 2
( -> _precedenceStack.pop: Probability = 0.00, Count = 1
( -> File: Probability = 0.00, Count = 1
( -> !inquote: Probability = 0.00, Count = 1
( -> 65535L: Probability = 0.00, Count = 2
( -> Integer.toBinaryString: Probability = 0.00, Count = 1
( -> search: Probability = 0.00, Count = 1
( -> .get: Probability = 0.00, Count = 9
( -> "config: Probability = 0.00, Count = 2
( -> .getElement: Probability = 0.00, Count = 1
( -> r: Probability = 0.00, Count = 1
( -> getResultSize: Probability = 0.00, Count = 1
( -> _isSingleCell: Probability = 0.00, Count = 1
( -> minRow: Probability = 0.00, Count = 1
( -> _firstCell.getRow: Probability = 0.00, Count = 3
( -> maxRow: Probability = 0.00, Count = 2
( -> minCol: Probability = 0.00, Count = 2
( -> refs.add: Probability = 0.00, Count = 2
( -> .toArray: Probability = 0.00, Count = 2
( -> in.seek: Probability = 0.00, Count = 2
( -> startPointer: Probability = 0.00, Count = 1
( -> in.readLong: Probability = 0.00, Count = 1
( -> workbook.getRecords: Probability = 0.00, Count = 1
( -> readData: Probability = 0.00, Count = 2
( -> sectionText.toString: Probability = 0.00, Count = 1
( -> default:if: Probability = 0.00, Count = 1
( -> sectionText.append: Probability = 0.00, Count = 1
( -> _definedNames.iterator: Probability = 0.00, Count = 1
( -> iterator.hasNext: Probability = 0.00, Count = 2
( -> fetchResult: Probability = 0.00, Count = 1
( -> fetchResult.toString: Probability = 0.00, Count = 1
( -> fetch: Probability = 0.00, Count = 2
( -> mergeResult: Probability = 0.00, Count = 1
( -> =Class.forName: Probability = 0.00, Count = 1
( -> "org.tartarus.snowball.ext.": Probability = 0.00, Count = 1
( -> "Stemmer": Probability = 0.00, Count = 1
( -> SnowballStemmer.class: Probability = 0.00, Count = 1
( -> NorwegianMinimalStemFilterFactory: Probability = 0.00, Count = 1
( -> variant:: Probability = 0.00, Count = 2
( -> Class.forName: Probability = 0.00, Count = 3
( -> cnstr.newInstance: Probability = 0.00, Count = 1
( -> Version.LATEST: Probability = 0.00, Count = 3
( -> "[DAT]\n": Probability = 0.00, Count = 1
( -> "[CATLAB]\n": Probability = 0.00, Count = 1
( -> .wOffset: Probability = 0.00, Count = 1
( -> .at: Probability = 0.00, Count = 1
( -> .grbit: Probability = 0.00, Count = 1
( -> "[PROT4REVPASSWORD]\n": Probability = 0.00, Count = 1
( -> label_2:while: Probability = 0.00, Count = 2
( -> OR: Probability = 0.00, Count = 2
( -> s0: Probability = 0.00, Count = 2
( -> DefaultRequest<GetPolicyRequest>: Probability = 0.00, Count = 1
( -> getPolicyRequest,: Probability = 0.00, Count = 1
( -> "AmazonIdentityManagement": Probability = 0.00, Count = 1
( -> "Action",: Probability = 0.00, Count = 1
( -> "GetPolicy": Probability = 0.00, Count = 1
( -> !scheme.equals: Probability = 0.00, Count = 1
( -> relativePath: Probability = 0.00, Count = 3
( -> relative.path,: Probability = 0.00, Count = 1
( -> !thisPath.equals: Probability = 0.00, Count = 1
( -> Reader: Probability = 0.00, Count = 1
( -> "already: Probability = 0.00, Count = 1
( -> frozen": Probability = 0.00, Count = 1
( -> clearPriorSnapshots: Probability = 0.00, Count = 1
( -> loadPriorSnapshots: Probability = 0.00, Count = 1
( -> "[STARTBLOCK]\n": Probability = 0.00, Count = 1
( -> terms.get: Probability = 0.00, Count = 1
( -> terms.size: Probability = 0.00, Count = 1
( -> readerIndex: Probability = 0.00, Count = 1
( -> ->: Probability = 0.00, Count = 6
( -> Mode.valueOf: Probability = 0.00, Count = 1
( -> MODE,: Probability = 0.00, Count = 1
( -> JapaneseTokenizer.DEFAULT_MODE.toString: Probability = 0.00, Count = 1
( -> .toUpperCase: Probability = 0.00, Count = 4
( -> field_3_unicode_len: Probability = 0.00, Count = 1
( -> !=null: Probability = 0.00, Count = 3
( -> passages[],: Probability = 0.00, Count = 1
( -> content: Probability = 0.00, Count = 1
( -> [i+1]: Probability = 0.00, Count = 1
( -> [++i]: Probability = 0.00, Count = 1
( -> String.valueOf: Probability = 0.00, Count = 12
( -> name1.length: Probability = 0.00, Count = 1
( -> name2.length: Probability = 0.00, Count = 1
( -> "bytes: Probability = 0.00, Count = 2
( -> anyExhaustibleTasks: Probability = 0.00, Count = 1
( -> updateExhausted: Probability = 0.00, Count = 1
( -> exhausted: Probability = 0.00, Count = 1
( -> externalRecord.isExternalReferences: Probability = 0.00, Count = 1
( -> externalRecord.getURL: Probability = 0.00, Count = 1
( -> word[],: Probability = 0.00, Count = 1
( -> dictionary.needsInputCleaning: Probability = 0.00, Count = 1
( -> scratchSegment.setLength: Probability = 0.00, Count = 1
( -> scratchSegment.append: Probability = 0.00, Count = 1
( -> cleaned: Probability = 0.00, Count = 1
( -> dictionary.cleanInput: Probability = 0.00, Count = 1
( -> scratchSegment,: Probability = 0.00, Count = 1
( -> segment: Probability = 0.00, Count = 1
( -> cleaned.length: Probability = 0.00, Count = 1
( -> segment.length: Probability = 0.00, Count = 1
( -> segment.getChars: Probability = 0.00, Count = 1
( -> TITLE_CASE: Probability = 0.00, Count = 1
( -> |: Probability = 0.00, Count = 3
( -> IllegalAccessException: Probability = 0.00, Count = 1
( -> getWriteProtect: Probability = 0.00, Count = 1
( -> frec.setReadOnly: Probability = 0.00, Count = 1
( -> frec.setPassword: Probability = 0.00, Count = 1
( -> Process: Probability = 0.00, Count = 1
( -> ssh: Probability = 0.00, Count = 2
( -> SystemReader.getInstance: Probability = 0.00, Count = 1
( -> .getenv: Probability = 0.00, Count = 1
( -> "GIT_SSH": Probability = 0.00, Count = 1
( -> putty: Probability = 0.00, Count = 2
( -> ssh.toLowerCase: Probability = 0.00, Count = 1
( -> .contains: Probability = 0.00, Count = 2
( -> "plink": Probability = 0.00, Count = 1
( -> putty&&: Probability = 0.00, Count = 1
( -> !ssh.toLowerCase: Probability = 0.00, Count = 1
( -> "tortoiseplink": Probability = 0.00, Count = 1
( -> "-batch": Probability = 0.00, Count = 1
( -> "-P": Probability = 0.00, Count = 1
( -> "-p": Probability = 0.00, Count = 1
( -> wantWrite: Probability = 0.00, Count = 1
( -> wantWrite": Probability = 0.00, Count = 1
( -> reuseAsIs": Probability = 0.00, Count = 1
( -> isDoNotDelta: Probability = 0.00, Count = 1
( -> doNotDelta": Probability = 0.00, Count = 1
( -> isEdge: Probability = 0.00, Count = 1
( -> edge": Probability = 0.00, Count = 1
( -> depth=": Probability = 0.00, Count = 1
( -> 0,: Probability = 0.00, Count = 8
( -> synonyms,: Probability = 0.00, Count = 1
( -> synonyms: Probability = 0.00, Count = 2
( -> ensureOpen: Probability = 0.00, Count = 2
( -> delegate.createOutput: Probability = 0.00, Count = 1
( -> NativeUnixIndexOutput: Probability = 0.00, Count = 1
( -> getDirectory: Probability = 0.00, Count = 2
( -> r/: Probability = 0.00, Count = 1
( -> BoostQuery: Probability = 0.00, Count = 1
( -> ds.length: Probability = 0.00, Count = 2
( -> 1d: Probability = 0.00, Count = 1
( -> d*: Probability = 0.00, Count = 1
( -> !terminal: Probability = 0.00, Count = 1
( -> eat: Probability = 0.00, Count = 1
( -> append: Probability = 0.00, Count = 2
( -> s,: Probability = 0.00, Count = 4
( -> getRefName: Probability = 0.00, Count = 2
( -> getResult: Probability = 0.00, Count = 1
( -> INJECT,: Probability = 0.00, Count = 1
( -> DEFAULT_MAX_CODE_LENGTH: Probability = 0.00, Count = 1
( -> "[PALETTE]\n": Probability = 0.00, Count = 2
( -> fieldNamesToString: Probability = 0.00, Count = 1
( -> stopTypesFiles: Probability = 0.00, Count = 1
( -> OldLabelRecord: Probability = 0.00, Count = 1
( -> field_5_bytes: Probability = 0.00, Count = 1
( -> field_4_string_len,: Probability = 0.00, Count = 1
( -> in.read: Probability = 0.00, Count = 4
( -> field_5_bytes,: Probability = 0.00, Count = 1
( -> POILogger.INFO,"LabelRecord: Probability = 0.00, Count = 2
( -> remains:: Probability = 0.00, Count = 2
( -> "[COLINFO]\n": Probability = 0.00, Count = 1
( -> colfirst: Probability = 0.00, Count = 1
( -> getColumnWidth: Probability = 0.00, Count = 1
( -> options: Probability = 0.00, Count = 2
( -> params.split: Probability = 0.00, Count = 1
( -> shortCellNum,: Probability = 0.00, Count = 1
( -> PhraseQuery: Probability = 0.00, Count = 1
( -> Term[]: Probability = 0.00, Count = 1
( -> terms,: Probability = 0.00, Count = 1
( -> source: Probability = 0.00, Count = 1
( -> -->: Probability = 0.00, Count = 1
( -> dest: Probability = 0.00, Count = 1
( -> char: Probability = 0.00, Count = 3
( -> _movedBuiltins: Probability = 0.00, Count = 1
( -> this,: Probability = 0.00, Count = 3
( -> .lookup: Probability = 0.00, Count = 1
( -> EscherPropertyTypes.FILL__PATTERNTEXTURE: Probability = 0.00, Count = 2
( -> bse: Probability = 0.00, Count = 2
( -> getPatriarch: Probability = 0.00, Count = 2
( -> .getSheet: Probability = 0.00, Count = 2
( -> &&file.startsWith: Probability = 0.00, Count = 1
( -> OLD_SEGMENTS_GEN: Probability = 0.00, Count = 1
( -> "mask: Probability = 0.00, Count = 1
( -> +f: Probability = 0.00, Count = 1
( -> .compareTo: Probability = 0.00, Count = 4
( -> Table: Probability = 0.00, Count = 1
( -> table]\n": Probability = 0.00, Count = 1
( -> hrow: Probability = 0.00, Count = 1
( -> row.getSheet: Probability = 0.00, Count = 1
( -> xcell.isPartOfArrayFormulaGroup: Probability = 0.00, Count = 1
( -> "Row[rownum=": Probability = 0.00, Count = 1
( -> row.getRowNum: Probability = 0.00, Count = 2
( -> multi-cell: Probability = 0.00, Count = 1
( -> formula.: Probability = 0.00, Count = 1
( -> array.": Probability = 0.00, Count = 1
( -> xcell.tryToDeleteArrayFormula: Probability = 0.00, Count = 1
( -> _rows.size: Probability = 0.00, Count = 2
( -> _rows.remove: Probability = 0.00, Count = 1
( -> hrow.getRowNum: Probability = 0.00, Count = 2
( -> getLastRowNum: Probability = 0.00, Count = 1
( -> findLastRow: Probability = 0.00, Count = 1
( -> getFirstRowNum: Probability = 0.00, Count = 1
( -> null: Probability = 0.00, Count = 11
( -> transitions,: Probability = 0.00, Count = 2
( -> prunePacked: Probability = 0.00, Count = 1
( -> ObjectDirectory: Probability = 0.00, Count = 1
( -> objdb: Probability = 0.00, Count = 1
( -> repo.getObjectDatabase: Probability = 0.00, Count = 1
( -> Collection<PackFile>: Probability = 0.00, Count = 1
( -> objdb.getPacks: Probability = 0.00, Count = 1
( -> repo.getObjectsDirectory: Probability = 0.00, Count = 1
( -> objects.list: Probability = 0.00, Count = 1
( -> fanout.length: Probability = 0.00, Count = 2
( -> .pruneLoosePackedObjects,: Probability = 0.00, Count = 1
( -> pm.update: Probability = 0.00, Count = 1
( -> objects,: Probability = 0.00, Count = 1
( -> .list: Probability = 0.00, Count = 1
( -> ObjectId.fromString: Probability = 0.00, Count = 1
( -> checkCancelled: Probability = 0.00, Count = 1
( -> "buffer: Probability = 0.00, Count = 2
( -> internalBuffer: Probability = 0.00, Count = 1
( -> int: Probability = 0.00, Count = 1
( -> length,: Probability = 0.00, Count = 2
( -> describeParams: Probability = 0.00, Count = 1
( -> DESERIALISE: Probability = 0.00, Count = 1
( -> alphabetSize: Probability = 0.00, Count = 2
( -> other.alphabetSize: Probability = 0.00, Count = 1
( -> other.size: Probability = 0.00, Count = 1
( -> points,: Probability = 0.00, Count = 1
( -> other.points: Probability = 0.00, Count = 1
( -> !accept.equals: Probability = 0.00, Count = 1
( -> quote: Probability = 0.00, Count = 1
( -> typeMatch: Probability = 0.00, Count = 1
( -> String: Probability = 0.00, Count = 3
( -> DictionaryCompoundWordTokenFilterFactory: Probability = 0.00, Count = 1
( -> "this: Probability = 0.00, Count = 1
( -> hex,: Probability = 0.00, Count = 1
( -> Collection<RevCommit>: Probability = 0.00, Count = 1
( -> GitAPIException,InvalidRefNameException: Probability = 0.00, Count = 2
( -> repo.exactRef: Probability = 0.00, Count = 4
( -> InvalidRefNameException: Probability = 0.00, Count = 2
( -> refLog: Probability = 0.00, Count = 1
( -> Constants.R_STASH: Probability = 0.00, Count = 1
( -> stashEntries: Probability = 0.00, Count = 2
( -> refLog.call: Probability = 0.00, Count = 1
( -> stashEntries.isEmpty: Probability = 0.00, Count = 1
( -> List<RevCommit>: Probability = 0.00, Count = 2
( -> stashEntries.size: Probability = 0.00, Count = 1
( -> ReflogEntry: Probability = 0.00, Count = 1
( -> stashCommits.add: Probability = 0.00, Count = 1
( -> label_3:while: Probability = 0.00, Count = 2
( -> AND: Probability = 0.00, Count = 3
( -> getAndQuery: Probability = 0.00, Count = 1
( -> p.getName: Probability = 0.00, Count = 1
( -> placesVE: Probability = 0.00, Count = 2
( -> strText1: Probability = 0.00, Count = 2
( -> OperandResolver.parseDouble: Probability = 0.00, Count = 3
( -> number.longValue: Probability = 0.00, Count = 2
( -> placesVE,: Probability = 0.00, Count = 1
( -> placesStr: Probability = 0.00, Count = 2
( -> placesNumberDouble: Probability = 0.00, Count = 2
( -> placesNumberDouble.intValue: Probability = 0.00, Count = 1
( -> number.intValue: Probability = 0.00, Count = 1
( -> in.readString: Probability = 0.00, Count = 1
( -> in.readInt: Probability = 0.00, Count = 2
( -> ,: Probability = 0.00, Count = 15
( -> getClass: Probability = 0.00, Count = 1
( -> .getName: Probability = 0.00, Count = 1
( -> "max: Probability = 0.00, Count = 2
( -> dfa.s0==null: Probability = 0.00, Count = 1
( -> dfa.getStates: Probability = 0.00, Count = 1
( -> s.edges!=null: Probability = 0.00, Count = 1
( -> s.edges[i]: Probability = 0.00, Count = 1
( -> "[SXDI]\n": Probability = 0.00, Count = 1
( -> .isxvdData: Probability = 0.00, Count = 1
( -> .iiftab: Probability = 0.00, Count = 1
( -> iiftab: Probability = 0.00, Count = 1
( -> .df: Probability = 0.00, Count = 1
( -> .isxvd: Probability = 0.00, Count = 1
( -> s.transition: Probability = 0.00, Count = 2
( -> .target,: Probability = 0.00, Count = 1
( -> PredictionContext.EMPTY,look[alt],: Probability = 0.00, Count = 1
( -> lookBusy,: Probability = 0.00, Count = 1
( -> 0x20: Probability = 0.00, Count = 1
( -> escapeWhitespace: Probability = 0.00, Count = 1
( -> escapeSpaces: Probability = 0.00, Count = 2
( -> s.toCharArray: Probability = 0.00, Count = 2
( -> tasks: Probability = 0.00, Count = 1
( -> task.toString: Probability = 0.00, Count = 1
( -> !letChildReport: Probability = 0.00, Count = 1
( -> be.getBooleanValue: Probability = 0.00, Count = 1
( -> TO: Probability = 0.00, Count = 1
( -> List<Cell>: Probability = 0.00, Count = 1
( -> hashes.length: Probability = 0.00, Count = 1
( -> cells.add: Probability = 0.00, Count = 1
( -> oldSource.open: Probability = 0.00, Count = 1
( -> newSource.open: Probability = 0.00, Count = 1
( -> p.reset: Probability = 0.00, Count = 1
( -> "Tree=: Probability = 0.00, Count = 1
( -> .checkTree: Probability = 0.00, Count = 1
( -> CorruptObjectException: Probability = 0.00, Count = 3
( -> "***: Probability = 0.00, Count = 1
( -> ERROR:: Probability = 0.00, Count = 2
( -> error.getMessage: Probability = 0.00, Count = 1
( -> mode.getObjectType: Probability = 0.00, Count = 2
( -> "[GUTS]\n": Probability = 0.00, Count = 1
( -> .leftgutter: Probability = 0.00, Count = 1
( -> getLeftRowGutter: Probability = 0.00, Count = 1
( -> .topgutter: Probability = 0.00, Count = 1
( -> getTopColGutter: Probability = 0.00, Count = 1
( -> .rowlevelmax: Probability = 0.00, Count = 1
( -> getRowLevelMax: Probability = 0.00, Count = 1
( -> legal: Probability = 0.00, Count = 1
( -> conflictingAlts: Probability = 0.00, Count = 1
( -> getConflictingAlts: Probability = 0.00, Count = 1
( -> ambigAlts,: Probability = 0.00, Count = 1
( -> recognizer.getTokenStream: Probability = 0.00, Count = 1
( -> float: Probability = 0.00, Count = 2
( -> "[WINDOWPROTECT]\n": Probability = 0.00, Count = 1
( -> _sxaxis: Probability = 0.00, Count = 2
( -> _cSub: Probability = 0.00, Count = 2
( -> _grbitSub: Probability = 0.00, Count = 2
( -> parserInterp: Probability = 0.00, Count = 1
( -> parser.getGrammarFileName: Probability = 0.00, Count = 1
( -> ,parser.getVocabulary: Probability = 0.00, Count = 1
( -> ,Arrays.asList: Probability = 0.00, Count = 1
( -> BailErrorStrategy: Probability = 0.00, Count = 1
( -> parserInterp.parse: Probability = 0.00, Count = 1
( -> short: Probability = 0.00, Count = 1
( -> runData.getIndexWriter: Probability = 0.00, Count = 1
( -> open: Probability = 0.00, Count = 2
( -> invoking: Probability = 0.00, Count = 2
( -> NearRealtimeReader": Probability = 0.00, Count = 2
( -> runData.getIndexReader: Probability = 0.00, Count = 1
( -> DirectoryReader.open: Probability = 0.00, Count = 3
( -> r.decRef: Probability = 0.00, Count = 1
( -> !stopNow: Probability = 0.00, Count = 1
( -> stopNow: Probability = 0.00, Count = 1
( -> SubmoduleWalk: Probability = 0.00, Count = 2
( -> generator: Probability = 0.00, Count = 3
( -> SubmoduleWalk.forIndex: Probability = 0.00, Count = 2
( -> !paths.isEmpty: Probability = 0.00, Count = 2
( -> generator.setFilter: Probability = 0.00, Count = 2
( -> statuses: Probability = 0.00, Count = 1
( -> SubmoduleStatus: Probability = 0.00, Count = 1
( -> "[VCENTER]\n": Probability = 0.00, Count = 1
( -> .vcenter: Probability = 0.00, Count = 1
( -> decompress: Probability = 0.00, Count = 1
( -> compressed: Probability = 0.00, Count = 1
( -> ArrayUtil.grow: Probability = 0.00, Count = 3
( -> in.readBytes: Probability = 0.00, Count = 2
( -> compressed[compressedLength]: Probability = 0.00, Count = 1
( -> Inflater: Probability = 0.00, Count = 2
( -> decompressor: Probability = 0.00, Count = 1
( -> decompressor.setInput: Probability = 0.00, Count = 1
( -> decompressor.inflate: Probability = 0.00, Count = 1
( -> decoder: Probability = 0.00, Count = 1
( -> state:: Probability = 0.00, Count = 2
( -> needsInput=": Probability = 0.00, Count = 1
( -> decompressor.needsDictionary: Probability = 0.00, Count = 1
( -> "[FRAME]\n": Probability = 0.00, Count = 1
( -> .borderType: Probability = 0.00, Count = 1
( -> "[SXVD]\n": Probability = 0.00, Count = 1
( -> .sxaxis: Probability = 0.00, Count = 1
( -> .cSub: Probability = 0.00, Count = 1
( -> .grbitSub: Probability = 0.00, Count = 1
( -> _cItm: Probability = 0.00, Count = 1
( -> "[NAMECMT]\n": Probability = 0.00, Count = 1
( -> .record: Probability = 0.00, Count = 1
( -> field_1_record_type: Probability = 0.00, Count = 2
( -> .frt: Probability = 0.00, Count = 1
( -> ref: Probability = 0.00, Count = 1
( -> field_2_frt_cell_ref_flag: Probability = 0.00, Count = 3
( -> field_3_reserved: Probability = 0.00, Count = 3
( -> field_6_name_text.length: Probability = 0.00, Count = 1
( -> field_7_comment_text.length: Probability = 0.00, Count = 1
( -> "[SST]\n": Probability = 0.00, Count = 1
( -> .numstrings: Probability = 0.00, Count = 1
( -> getNumStrings: Probability = 0.00, Count = 1
( -> .uniquestrings: Probability = 0.00, Count = 1
( -> getNumUniqueStrings: Probability = 0.00, Count = 1
( -> Iterator<QueryNode>: Probability = 0.00, Count = 1
( -> it: Probability = 0.00, Count = 5
( -> .iterator: Probability = 0.00, Count = 7
( -> it.hasNext: Probability = 0.00, Count = 3
( -> it.next: Probability = 0.00, Count = 2
( -> 0.5: Probability = 0.00, Count = 1
( -> queryShape.getCenter: Probability = 0.00, Count = 1
( -> logger.log: Probability = 0.00, Count = 1
( -> has: Probability = 0.00, Count = 1
( -> "[]": Probability = 0.00, Count = 2
( -> i<returnStates.length: Probability = 0.00, Count = 1
( -> .toLowerCase: Probability = 0.00, Count = 1
( -> SynonymFilterFactory: Probability = 0.00, Count = 1
( -> "synonyms": Probability = 0.00, Count = 1
( -> format: Probability = 0.00, Count = 1
( -> "format": Probability = 0.00, Count = 2
( -> expand: Probability = 0.00, Count = 1
( -> "expand",: Probability = 0.00, Count = 1
( -> analyzerName: Probability = 0.00, Count = 2
( -> "analyzer": Probability = 0.00, Count = 1
( -> "tokenizerFactory": Probability = 0.00, Count = 1
( -> "Analyzer: Probability = 0.00, Count = 1
( -> and: Probability = 0.00, Count = 2
( -> TokenizerFactory: Probability = 0.00, Count = 1
( -> can't: Probability = 0.00, Count = 1
( -> specified: Probability = 0.00, Count = 1
( -> both:: Probability = 0.00, Count = 1
( -> +analyzerName: Probability = 0.00, Count = 1
( -> Iterator<String>: Probability = 0.00, Count = 2
( -> StopFilterFactory: Probability = 0.00, Count = 1
( -> "format",: Probability = 0.00, Count = 1
( -> _input.index: Probability = 0.00, Count = 2
( -> null,: Probability = 0.00, Count = 4
( -> BlameResult: Probability = 0.00, Count = 1
( -> gen.setDiffAlgorithm: Probability = 0.00, Count = 1
( -> gen.setTextComparator: Probability = 0.00, Count = 1
( -> gen.setFollowFileRenames: Probability = 0.00, Count = 1
( -> followFileRenames.booleanValue: Probability = 0.00, Count = 1
( -> reverseEndCommits: Probability = 0.00, Count = 2
( -> gen.reverse: Probability = 0.00, Count = 1
( -> startCommit,: Probability = 0.00, Count = 1
( -> startCommit: Probability = 0.00, Count = 1
( -> dicts[]: Probability = 0.00, Count = 1
( -> dictionaryFiles.split: Probability = 0.00, Count = 1
( -> ",": Probability = 0.00, Count = 1
( -> List<InputStream>: Probability = 0.00, Count = 1
( -> dicts: Probability = 0.00, Count = 1
( -> dictionaries.add: Probability = 0.00, Count = 1
( -> Path: Probability = 0.00, Count = 1
( -> Files.createTempDirectory: Probability = 0.00, Count = 1
( -> Dictionary.getDefaultTempDir: Probability = 0.00, Count = 1
( -> Directory: Probability = 0.00, Count = 1
( -> tempDir: Probability = 0.00, Count = 1
( -> FSDirectory.open: Probability = 0.00, Count = 1
( -> this.dictionary: Probability = 0.00, Count = 1
( -> tempDir,: Probability = 0.00, Count = 3
( -> "hunspell",: Probability = 0.00, Count = 1
( -> dictionaries,: Probability = 0.00, Count = 1
( -> "[CHARTTITLEFORMAT]\n": Probability = 0.00, Count = 1
( -> .format_runs: Probability = 0.00, Count = 1
( -> inf.inflate: Probability = 0.00, Count = 1
( -> inf.finished: Probability = 0.00, Count = 1
( -> inf.needsInput: Probability = 0.00, Count = 1
( -> onObjectData: Probability = 0.00, Count = 1
( -> src,: Probability = 0.00, Count = 2
( -> buf,: Probability = 0.00, Count = 3
( -> use: Probability = 0.00, Count = 1
( -> fill: Probability = 0.00, Count = 2
( -> inf.setInput: Probability = 0.00, Count = 1
( -> DataFormatException: Probability = 0.00, Count = 1
( -> dfe: Probability = 0.00, Count = 1
( -> "0": Probability = 0.00, Count = 2
( -> NumberFormatException: Probability = 0.00, Count = 4
( -> "Expected: Probability = 0.00, Count = 3
( -> 'Add-In: Probability = 0.00, Count = 1
( -> Functions': Probability = 0.00, Count = 1
( -> backingMap.tailMap: Probability = 0.00, Count = 1
( -> rs.peekNextRecord: Probability = 0.00, Count = 1
( -> field_4_text.length: Probability = 0.00, Count = 2
( -> disableCounting: Probability = 0.00, Count = 1
( -> setConditionType: Probability = 0.00, Count = 1
( -> setComparisonOperation: Probability = 0.00, Count = 1
( -> field_3_formula1_len: Probability = 0.00, Count = 1
( -> field_4_formula2_len: Probability = 0.00, Count = 1
( -> readFormatOptions: Probability = 0.00, Count = 1
( -> filter: Probability = 0.00, Count = 1
( -> parent.toString: Probability = 0.00, Count = 1
( -> up.length: Probability = 0.00, Count = 1
( -> c1.hashCode: Probability = 0.00, Count = 1
( -> c2.hashCode: Probability = 0.00, Count = 1
( -> "[BottomMargin]\n": Probability = 0.00, Count = 1
( -> viableAlts.cardinality: Probability = 0.00, Count = 1
( -> stopTagFiles: Probability = 0.00, Count = 1
( -> assert: Probability = 0.00, Count = 1
( -> char[]: Probability = 0.00, Count = 1
( -> ReceivePack: Probability = 0.00, Count = 1
( -> rp: Probability = 0.00, Count = 1
( -> expTarget: Probability = 0.00, Count = 4
( -> getOldSymref: Probability = 0.00, Count = 1
( -> detach: Probability = 0.00, Count = 2
( -> getNewSymref: Probability = 0.00, Count = 3
( -> null||: Probability = 0.00, Count = 1
( -> type: Probability = 0.00, Count = 1
( -> RefUpdate: Probability = 0.00, Count = 2
( -> ru: Probability = 0.00, Count = 1
( -> rp.getRepository: Probability = 0.00, Count = 1
( -> .updateRef: Probability = 0.00, Count = 1
( -> !ru.getRef: Probability = 0.00, Count = 2
( -> .isSymbolic: Probability = 0.00, Count = 1
( -> .getTarget: Probability = 0.00, Count = 1
( -> .equals: Probability = 0.00, Count = 6
( -> ru.setRefLogIdent: Probability = 0.00, Count = 1
( -> refLogMessage,: Probability = 0.00, Count = 1
( -> DELETE:if: Probability = 0.00, Count = 1
( -> !ObjectId.zeroId: Probability = 0.00, Count = 1
( -> ru.delete: Probability = 0.00, Count = 1
( -> CREATE:case: Probability = 0.00, Count = 1
( -> UPDATE:case: Probability = 0.00, Count = 1
( -> UPDATE_NONFASTFORWARD:ru.setForceUpdate: Probability = 0.00, Count = 1
( -> ru.setRefLogMessage: Probability = 0.00, Count = 1
( -> .deserialize: Probability = 0.00, Count = 1
( -> cache.get: Probability = 0.00, Count = 1
( -> FooterLine: Probability = 0.00, Count = 2
( -> false: Probability = 0.00, Count = 1
( -> V: Probability = 0.00, Count = 2
( -> Impl.this.get: Probability = 0.00, Count = 1
( -> true: Probability = 0.00, Count = 3
( -> cells.length: Probability = 0.00, Count = 2
( -> "[INTERFACEHDR]\n": Probability = 0.00, Count = 1
( -> "Parser: Probability = 0.00, Count = 1
( -> configuration: Probability = 0.00, Count = 1
( -> error",: Probability = 0.00, Count = 1
( -> InputSource: Probability = 0.00, Count = 1
( -> IndexOptions.NONE: Probability = 0.00, Count = 2
( -> line.split: Probability = 0.00, Count = 2
( -> "\\t",: Probability = 0.00, Count = 1
( -> log: Probability = 0.00, Count = 1
( -> countMap.remove: Probability = 0.00, Count = 1
( -> element,: Probability = 0.00, Count = 1
( -> predicate,: Probability = 0.00, Count = 1
( -> HashSet<SemanticContext>: Probability = 0.00, Count = 1
( -> operands.addAll: Probability = 0.00, Count = 2
( -> credentialUrl.toString: Probability = 0.00, Count = 1
( -> CompatibleUrlConnClient.compatibleGetResponse: Probability = 0.00, Count = 1
( -> inumberVE: Probability = 0.00, Count = 1
( -> inumberVE,: Probability = 0.00, Count = 1
( -> iNumber: Probability = 0.00, Count = 2
( -> Imaginary.COMPLEX_NUMBER_PATTERN.matcher: Probability = 0.00, Count = 1
( -> m.matches: Probability = 0.00, Count = 1
( -> realGroup: Probability = 0.00, Count = 1
( -> hasRealPart: Probability = 0.00, Count = 2
( -> realGroup.length: Probability = 0.00, Count = 2
( -> m.group: Probability = 0.00, Count = 2
( -> Imaginary.GROUP1_REAL_SIGN: Probability = 0.00, Count = 1
( -> realSign.length: Probability = 0.00, Count = 1
( -> realSign.equals: Probability = 0.00, Count = 1
( -> "+": Probability = 0.00, Count = 2
( -> pref.getRow1: Probability = 0.00, Count = 1
( -> pref.getCol2: Probability = 0.00, Count = 1
( -> pref.getCol1: Probability = 0.00, Count = 1
( -> anchor.setCol2: Probability = 0.00, Count = 1
( -> CellFormatPart.parseFormat: Probability = 0.00, Count = 1
( -> pattern,CellFormatType.ELAPSED,: Probability = 0.00, Count = 1
( -> ElapsedPartHandler: Probability = 0.00, Count = 1
( -> ListIterator<TimeSpec>: Probability = 0.00, Count = 1
( -> specs.listIterator: Probability = 0.00, Count = 1
( -> StringHelper.startsWith: Probability = 0.00, Count = 3
( -> "EEE: Probability = 0.00, Count = 1
( -> MMM: Probability = 0.00, Count = 1
( -> HH:mm:ss: Probability = 0.00, Count = 1
( -> yyyy: Probability = 0.00, Count = 1
( -> Z",: Probability = 0.00, Count = 1
( -> dtfmt.setTimeZone: Probability = 0.00, Count = 1
( -> getTimeZone: Probability = 0.00, Count = 1
( -> repo.findRef: Probability = 0.00, Count = 4
( -> Iterator<Note>: Probability = 0.00, Count = 1
( -> map.iterator: Probability = 0.00, Count = 1
( -> i.hasNext: Probability = 0.00, Count = 1
( -> "[BOUNDSHEET]\n": Probability = 0.00, Count = 2
( -> .bof: Probability = 0.00, Count = 2
( -> .visibility: Probability = 0.00, Count = 1
( -> field_2_visibility: Probability = 0.00, Count = 1
( -> getYear: Probability = 0.00, Count = 1
( -> DefaultRequest<DeletePublicAccessBlockRequest>: Probability = 0.00, Count = 1
( -> deletePublicAccessBlockRequest,: Probability = 0.00, Count = 1
( -> "AWSS3Control": Probability = 0.00, Count = 2
( -> path[i]: Probability = 0.00, Count = 2
( -> table: Probability = 0.00, Count = 2
( -> untrackedFolders: Probability = 0.00, Count = 1
( -> !untrackedParentFolders.isEmpty: Probability = 0.00, Count = 1
( -> untrackedParentFolders.getLast: Probability = 0.00, Count = 1
( -> !ret.isEmpty: Probability = 0.00, Count = 1
( -> ret.getLast: Probability = 0.00, Count = 1
( -> "[SELECTION]\n": Probability = 0.00, Count = 1
( -> .pane: Probability = 0.00, Count = 1
( -> getPane: Probability = 0.00, Count = 1
( -> .activecellrow: Probability = 0.00, Count = 1
( -> getActiveCellRow: Probability = 0.00, Count = 1
( -> .activecellcol: Probability = 0.00, Count = 1
( -> getSegmentsFile: Probability = 0.00, Count = 1
( -> files.isEmpty: Probability = 0.00, Count = 1
( -> files.remove: Probability = 0.00, Count = 1
( -> files.size: Probability = 0.00, Count = 1
( -> !segmentsFile.startsWith: Probability = 0.00, Count = 1
( -> "last: Probability = 0.00, Count = 1
( -> copy+sync: Probability = 0.00, Count = 1
( -> !expression.sourceText.equals: Probability = 0.00, Count = 1
( -> _recs.isEmpty: Probability = 0.00, Count = 1
( -> _begin: Probability = 0.00, Count = 1
( -> formatDate: Probability = 0.00, Count = 1
( -> ident: Probability = 0.00, Count = 1
( -> RAW:int: Probability = 0.00, Count = 1
( -> ident.getTimeZoneOffset: Probability = 0.00, Count = 1
( -> "%d: Probability = 0.00, Count = 1
( -> %s%02d%02d",: Probability = 0.00, Count = 1
( -> .getTime: Probability = 0.00, Count = 1
( -> 1000,: Probability = 0.00, Count = 1
( -> sign,: Probability = 0.00, Count = 1
( -> hours,: Probability = 0.00, Count = 1
( -> RELATIVE:return: Probability = 0.00, Count = 1
( -> RelativeDateFormatter.format: Probability = 0.00, Count = 1
( -> LOCALELOCAL:case: Probability = 0.00, Count = 1
( -> LOCAL:dateTimeInstance.setTimeZone: Probability = 0.00, Count = 1
( -> .refNotResolved,: Probability = 0.00, Count = 2
( -> "line.separtor": Probability = 0.00, Count = 1
( -> getEscherRecords: Probability = 0.00, Count = 3
( -> System.getProperty: Probability = 0.00, Count = 1
( -> TextRecord: Probability = 0.00, Count = 1
( -> field_2_verticalAlignment: Probability = 0.00, Count = 2
( -> field_3_displayMode: Probability = 0.00, Count = 2
( -> field_4_rgbColor: Probability = 0.00, Count = 2
( -> field_5_x: Probability = 0.00, Count = 1
( -> field_6_y: Probability = 0.00, Count = 1
( -> field_7_width: Probability = 0.00, Count = 2
( -> DeleteImageRequest: Probability = 0.00, Count = 1
( -> Iterator<WeightedPhraseInfo>: Probability = 0.00, Count = 1
( -> ite: Probability = 0.00, Count = 1
( -> fieldPhraseList.phraseList.iterator: Probability = 0.00, Count = 1
( -> Arrays.asList: Probability = 0.00, Count = 2
( -> 40: Probability = 0.00, Count = 3
( -> encode: Probability = 0.00, Count = 1
( -> BM25FQuery: Probability = 0.00, Count = 2
( -> IndexSearcher.getMaxClauseCount: Probability = 0.00, Count = 2
( -> BytesRef[]: Probability = 0.00, Count = 1
( -> res: Probability = 0.00, Count = 2
( -> !characterDefinition.isGroup: Probability = 0.00, Count = 1
( -> postingsArray.bytesPerPosting: Probability = 0.00, Count = 1
( -> final: Probability = 0.00, Count = 6
( -> ListIterator<Head>: Probability = 0.00, Count = 1
( -> headIterator: Probability = 0.00, Count = 1
( -> heads.listIterator: Probability = 0.00, Count = 1
( -> StoredConfig: Probability = 0.00, Count = 1
( -> repo.getConfig: Probability = 0.00, Count = 1
( -> initialized: Probability = 0.00, Count = 1
( -> generator.next: Probability = 0.00, Count = 1
( -> generator.getPath: Probability = 0.00, Count = 1
( -> generator.getModuleName: Probability = 0.00, Count = 1
( -> generator.getRemoteUrl: Probability = 0.00, Count = 1
( -> generator.getModulesUpdate: Probability = 0.00, Count = 1
( -> ConfigConstants.CONFIG_KEY_URL,: Probability = 0.00, Count = 1
( -> config.setString: Probability = 0.00, Count = 1
( -> ConfigConstants.CONFIG_SUBMODULE_SECTION,name,: Probability = 0.00, Count = 1
( -> styleIndex=_record.getXFIndex: Probability = 0.00, Count = 2
( -> default:setCellType: Probability = 0.00, Count = 2
( -> CellType.BOOLEAN,: Probability = 0.00, Count = 2
( -> CJKBigramFilterFactory: Probability = 0.00, Count = 1
( -> "han",: Probability = 0.00, Count = 1
( -> clazz.getSuperclass: Probability = 0.00, Count = 1
( -> !clazz.isAnonymousClass: Probability = 0.00, Count = 1
( -> clazz.getSimpleName: Probability = 0.00, Count = 1
( -> List<?: Probability = 0.00, Count = 2
( -> IndexReader>: Probability = 0.00, Count = 1
( -> !subReaders.isEmpty: Probability = 0.00, Count = 1
( -> upgrade: Probability = 0.00, Count = 1
( -> !DirectoryReader.indexExists: Probability = 0.00, Count = 1
( -> IndexNotFoundException: Probability = 0.00, Count = 1
( -> dir.toString: Probability = 0.00, Count = 1
( -> !deletePriorCommits: Probability = 0.00, Count = 1
( -> commits.size: Probability = 0.00, Count = 1
( -> tool: Probability = 0.00, Count = 1
( -> invoked: Probability = 0.00, Count = 1
( -> were: Probability = 0.00, Count = 1
( -> found:: Probability = 0.00, Count = 1
( -> iwc.getInfoStream: Probability = 0.00, Count = 1
( -> "Upgrading: Probability = 0.00, Count = 1
( -> pre-": Probability = 0.00, Count = 1
( -> "...": Probability = 0.00, Count = 2
( -> w.forceMerge: Probability = 0.00, Count = 1
( -> getThumbnailAsWMF: Probability = 0.00, Count = 1
( -> !info.getDecryptor: Probability = 0.00, Count = 1
( -> .verifyPassword: Probability = 0.00, Count = 1
( -> Decryptor.DEFAULT_PASSWORD.equals: Probability = 0.00, Count = 1
( -> "Default": Probability = 0.00, Count = 1
( -> "Supplied": Probability = 0.00, Count = 1
( -> salt/verifier/verifierHash": Probability = 0.00, Count = 1
( -> "document: Probability = 0.00, Count = 1
( -> docid: Probability = 0.00, Count = 3
( -> tags.isEmpty: Probability = 0.00, Count = 1
( -> currentRef: Probability = 0.00, Count = 2
( -> .deleteTagUnexpectedResult,deleteResult.name: Probability = 0.00, Count = 1
( -> super.setMax: Probability = 0.00, Count = 1
( -> Math.round: Probability = 0.00, Count = 2
( -> stateNumber,: Probability = 0.00, Count = 1
( -> number.": Probability = 0.00, Count = 1
( -> !following.contains: Probability = 0.00, Count = 1
( -> ExtendedPivotTableViewFieldsRecord: Probability = 0.00, Count = 1
( -> first=null: Probability = 0.00, Count = 1
( -> label_1:while: Probability = 0.00, Count = 2
( -> MINUS:case: Probability = 0.00, Count = 1
( -> LPAREN:case: Probability = 0.00, Count = 1
( -> asList: Probability = 0.00, Count = 1
( -> createCFAggregate: Probability = 0.00, Count = 1
( -> &&rec.getSid: Probability = 0.00, Count = 1
( -> CFHeader12Record.sid: Probability = 0.00, Count = 1
( -> save: Probability = 0.00, Count = 1
( -> utf8Bom: Probability = 0.00, Count = 1
( -> bos: Probability = 0.00, Count = 1
( -> 0xEF: Probability = 0.00, Count = 1
( -> 0xBB: Probability = 0.00, Count = 1
( -> 0xBF: Probability = 0.00, Count = 1
( -> text.getBytes: Probability = 0.00, Count = 1
( -> formatString.length: Probability = 0.00, Count = 1
( -> +: Probability = 0.00, Count = 4
( -> !=: Probability = 0.00, Count = 8
( -> in.readByte: Probability = 0.00, Count = 1
( -> "Corrupted": Probability = 0.00, Count = 1
( -> segments.size: Probability = 0.00, Count = 1
( -> "segments: Probability = 0.00, Count = 1
( -> "[DELTA]\n": Probability = 0.00, Count = 1
( -> .maxchange: Probability = 0.00, Count = 1
( -> buf: Probability = 0.00, Count = 1
( -> LittleEndianConsts.SHORT_SIZE: Probability = 0.00, Count = 1
( -> LittleEndian.getUShort: Probability = 0.00, Count = 2
( -> final": Probability = 0.00, Count = 1
( -> BIT_LAST_ARC: Probability = 0.00, Count = 1
( -> last": Probability = 0.00, Count = 1
( -> BIT_TARGET_NEXT: Probability = 0.00, Count = 1
( -> targetNext": Probability = 0.00, Count = 1
( -> BIT_STOP_NODE: Probability = 0.00, Count = 1
( -> stop": Probability = 0.00, Count = 1
( -> BIT_ARC_HAS_OUTPUT: Probability = 0.00, Count = 1
( -> BIT_ARC_HAS_FINAL_OUTPUT: Probability = 0.00, Count = 1
( -> "[FORMAT]\n": Probability = 0.00, Count = 1
( -> .indexcode: Probability = 0.00, Count = 1
( -> .isUnicode: Probability = 0.00, Count = 1
( -> getFormatString: Probability = 0.00, Count = 1
( -> operation='or'>": Probability = 0.00, Count = 1
( -> &: Probability = 0.00, Count = 1
( -> NorwegianLightStemFilterFactory: Probability = 0.00, Count = 1
( -> "function: Probability = 0.00, Count = 1
( -> .getFunctionName: Probability = 0.00, Count = 1
( -> "First: Probability = 0.00, Count = 2
( -> NameEval,: Probability = 0.00, Count = 1
( -> nameArg.getClass: Probability = 0.00, Count = 1
( -> getOptions: Probability = 0.00, Count = 1
( -> isOptimizedChoose: Probability = 0.00, Count = 2
( -> this.hashCode: Probability = 0.00, Count = 2
( -> parent!=null: Probability = 0.00, Count = 1
( -> 127: Probability = 0.00, Count = 2
( -> booleanNode: Probability = 0.00, Count = 1
( -> booleanNode.getChildren: Probability = 0.00, Count = 1
( -> child.getTag: Probability = 0.00, Count = 1
( -> QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID: Probability = 0.00, Count = 1
( -> getModifierValue: Probability = 0.00, Count = 1
( -> TooManyClauses: Probability = 0.00, Count = 1
( -> QueryParserMessages.TOO_MANY_BOOLEAN_CLAUSES,: Probability = 0.00, Count = 1
( -> List<TerminalNode>: Probability = 0.00, Count = 2
( -> "extBook=": Probability = 0.00, Count = 1
( -> firstSheet=": Probability = 0.00, Count = 1
( -> revision.compareTo: Probability = 0.00, Count = 1
( -> currentRevision.revision: Probability = 0.00, Count = 2
( -> revision.release: Probability = 0.00, Count = 3
( -> older: Probability = 0.00, Count = 1
( -> revision:: Probability = 0.00, Count = 1
( -> rev=": Probability = 0.00, Count = 1
( -> !dfa.states.isEmpty: Probability = 0.00, Count = 1
( -> dfa.decision: Probability = 0.00, Count = 1
( -> GitAPIException,: Probability = 0.00, Count = 2
( -> NoWorkTreeException: Probability = 0.00, Count = 1
( -> elsediff.diff: Probability = 0.00, Count = 1
( -> Status: Probability = 0.00, Count = 1
( -> !ext.startsWith: Probability = 0.00, Count = 1
( -> segmentName.length: Probability = 0.00, Count = 1
( -> already: Probability = 0.00, Count = 1
( -> charsSpare: Probability = 0.00, Count = 2
( -> iterator.next: Probability = 0.00, Count = 2
( -> TYPE_SHIFT: Probability = 0.00, Count = 1
( -> "Wrong: Probability = 0.00, Count = 2
( -> key,: Probability = 0.00, Count = 2
( -> GitAPIException,NoFilepatternException: Probability = 0.00, Count = 1
( -> filepatterns.isEmpty: Probability = 0.00, Count = 1
( -> NoFilepatternException: Probability = 0.00, Count = 1
( -> .atLeastOnePatternIsRequired: Probability = 0.00, Count = 1
( -> List<String>: Probability = 0.00, Count = 3
( -> actuallyDeletedFiles: Probability = 0.00, Count = 1
( -> tw: Probability = 0.00, Count = 1
( -> repo.lockDirCache: Probability = 0.00, Count = 1
( -> dc.builder: Probability = 0.00, Count = 1
( -> tw.reset: Probability = 0.00, Count = 1
( -> tw.setRecursive: Probability = 0.00, Count = 1
( -> tw.setFilter: Probability = 0.00, Count = 1
( -> tw.addTree: Probability = 0.00, Count = 1
( -> tw.next: Probability = 0.00, Count = 1
( -> !cached: Probability = 0.00, Count = 1
( -> tw.getFileMode: Probability = 0.00, Count = 1
( -> tw.getPathString: Probability = 0.00, Count = 1
( -> repo.getWorkTree: Probability = 0.00, Count = 1
( -> ,relativePath: Probability = 0.00, Count = 1
( -> remainingBlocks: Probability = 0.00, Count = 1
( -> format.byteCount: Probability = 0.00, Count = 1
( -> remainingBlocks,: Probability = 0.00, Count = 1
( -> this.lastPosition: Probability = 0.00, Count = 1
( -> AbstractList.this.remove: Probability = 0.00, Count = 1
( -> .getKey: Probability = 0.00, Count = 1
( -> ref.getObjectId: Probability = 0.00, Count = 1
( -> DOMUtils.getAttributeWithInheritanceOrFail: Probability = 0.00, Count = 2
( -> "fieldName": Probability = 0.00, Count = 2
( -> DOMUtils.getNonBlankTextOrFail: Probability = 0.00, Count = 2
( -> bq.setMinimumNumberShouldMatch: Probability = 0.00, Count = 1
( -> "minimumNumberShouldMatch",: Probability = 0.00, Count = 1
( -> analyzer.tokenStream: Probability = 0.00, Count = 3
( -> TermToBytesRefAttribute: Probability = 0.00, Count = 2
( -> ts.addAttribute: Probability = 0.00, Count = 2
( -> TermToBytesRefAttribute.class: Probability = 0.00, Count = 2
( -> ts.reset: Probability = 0.00, Count = 2
( -> ts.incrementToken: Probability = 0.00, Count = 2
( -> termAtt.getBytesRef: Probability = 0.00, Count = 2
( -> bq.add: Probability = 0.00, Count = 2
( -> BooleanClause: Probability = 0.00, Count = 1
( -> "[STARTOBJECT]\n": Probability = 0.00, Count = 1
( -> getRuleNames: Probability = 0.00, Count = 1
( -> MissingObjectException,: Probability = 0.00, Count = 1
( -> IncorrectObjectTypeException,IOException: Probability = 0.00, Count = 1
( -> SideBandOutputStream: Probability = 0.00, Count = 1
( -> chan,: Probability = 0.00, Count = 1
( -> .channelMustBeInRange1_255,Integer.valueOf: Probability = 0.00, Count = 1
( -> .packetSizeMustBeAtLeast,Integer.valueOf: Probability = 0.00, Count = 1
( -> squashedCommits,: Probability = 0.00, Count = 1
( -> "Squashed: Probability = 0.00, Count = 1
( -> following:\n": Probability = 0.00, Count = 1
( -> c.getName: Probability = 0.00, Count = 1
( -> "[COUNTRY]\n": Probability = 0.00, Count = 1
( -> .defaultcountry: Probability = 0.00, Count = 1
( -> .currentcountry: Probability = 0.00, Count = 1
( -> backwards: Probability = 0.00, Count = 1
( -> pos=": Probability = 0.00, Count = 1
( -> count++,: Probability = 0.00, Count = 1
( -> Files.createDirectories: Probability = 0.00, Count = 1
( -> f,: Probability = 0.00, Count = 2
( -> "[WRITEACCESS]\n": Probability = 0.00, Count = 1
( -> reportError: Probability = 0.00, Count = 1
( -> recognizer,RecognitionException: Probability = 0.00, Count = 1
( -> beginErrorCondition: Probability = 0.00, Count = 1
( -> reportNoViableAlternative: Probability = 0.00, Count = 1
( -> FixedBitSet: Probability = 0.00, Count = 1
( -> buffer: Probability = 0.00, Count = 2
( -> spgrContainer.getChildContainers: Probability = 0.00, Count = 1
( -> EscherSpgrRecord: Probability = 0.00, Count = 1
( -> spContainer.getChild: Probability = 0.00, Count = 1
( -> SPGR:break: Probability = 0.00, Count = 1
( -> CLIENT_ANCHOR:anchor: Probability = 0.00, Count = 1
( -> map: Probability = 0.00, Count = 1
( -> following: Probability = 0.00, Count = 1
( -> Collection<V>: Probability = 0.00, Count = 1
( -> subAgg.updateFormulasAfterCellShift: Probability = 0.00, Count = 1
( -> _ctx.addChild: Probability = 0.00, Count = 2
( -> isMustExist: Probability = 0.00, Count = 1
( -> field_2_col: Probability = 0.00, Count = 1
( -> RawParseUtils.parseHexInt4: Probability = 0.00, Count = 2
( -> drawString: Probability = 0.00, Count = 1
( -> str.isEmpty: Probability = 0.00, Count = 1
( -> font: Probability = 0.00, Count = 1
( -> font.getName: Probability = 0.00, Count = 2
( -> "SansSerif": Probability = 0.00, Count = 1
( -> "Arial",: Probability = 0.00, Count = 1
( -> font.getStyle: Probability = 0.00, Count = 2
( -> luceneSubQueries.get: Probability = 0.00, Count = 1
( -> SrndBooleanQuery.addQueriesToBoolean: Probability = 0.00, Count = 1
( -> bq,luceneSubQueries.subList: Probability = 0.00, Count = 1
( -> luceneSubQueries.size: Probability = 0.00, Count = 1
( -> primaryDir.listAll: Probability = 0.00, Count = 1
( -> secondaryDir.listAll: Probability = 0.00, Count = 1
( -> request.setSysUriPattern: Probability = 0.00, Count = 1
( -> pathParameters.keySet: Probability = 0.00, Count = 1
( -> operation='default'>": Probability = 0.00, Count = 1
( -> getNumTransitions: Probability = 0.00, Count = 1
( -> t,: Probability = 0.00, Count = 1
( -> Character.getType: Probability = 0.00, Count = 1
( -> workbook.createBuiltInName: Probability = 0.00, Count = 1
( -> COMMA_PATTERN.split: Probability = 0.00, Count = 1
( -> parts.length: Probability = 0.00, Count = 2
( -> i>0: Probability = 0.00, Count = 1
( -> parts[i]: Probability = 0.00, Count = 2
( -> name.setNameDefinition: Probability = 0.00, Count = 1
( -> HSSFFormulaParser.parse: Probability = 0.00, Count = 1
( -> XLS: Probability = 0.00, Count = 1
( -> "PowerPoint: Probability = 0.00, Count = 1
( -> Document": Probability = 0.00, Count = 1
( -> "[ITERATION]\n": Probability = 0.00, Count = 1
( -> "<tokenizedtphrase>": Probability = 0.00, Count = 1
( -> field_1_option_flag: Probability = 0.00, Count = 2
( -> field_3_not_used: Probability = 0.00, Count = 1
( -> field_4_name: Probability = 0.00, Count = 2
( -> !isOLELink: Probability = 0.00, Count = 1
( -> !isStdDocumentNameIdentifier: Probability = 0.00, Count = 1
( -> proto.canHandle: Probability = 0.00, Count = 2
( -> proto.open: Probability = 0.00, Count = 2
( -> "[PASSWORD]\n": Probability = 0.00, Count = 1
( -> while: Probability = 0.00, Count = 1
( -> onPull: Probability = 0.00, Count = 1
( -> disjuncts.length: Probability = 0.00, Count = 1
( -> disjuncts[i]: Probability = 0.00, Count = 1
( -> BooleanQuery: Probability = 0.00, Count = 1
( -> containsMapping: Probability = 0.00, Count = 1
( -> size: Probability = 0.00, Count = 1
( -> ;: Probability = 0.00, Count = 4
( -> getType: Probability = 0.00, Count = 3
( -> "[EXTERNALNAME]\n": Probability = 0.00, Count = 1
( -> .ix: Probability = 0.00, Count = 1
( -> field_5_name_definition.getTokens: Probability = 0.00, Count = 1
( -> "SST: Probability = 0.00, Count = 1
( -> extSST.setNumStringsPerBucket: Probability = 0.00, Count = 1
( -> Float.intBitsToFloat: Probability = 0.00, Count = 1
( -> _bookEvaluator.getWorkbook: Probability = 0.00, Count = 1
( -> fields[i].toString: Probability = 0.00, Count = 1
( -> MorfologikFilterFactory: Probability = 0.00, Count = 1
( -> !dictionaryResource.isEmpty: Probability = 0.00, Count = 1
( -> "Validation: Probability = 0.00, Count = 1
( -> UTF_8.encode: Probability = 0.00, Count = 1
( -> bb.limit: Probability = 0.00, Count = 1
( -> bb.hasArray: Probability = 0.00, Count = 1
( -> !name.equals: Probability = 0.00, Count = 1
( -> value.getName: Probability = 0.00, Count = 1
( -> !resolved.isEmpty: Probability = 0.00, Count = 1
( -> loose.find: Probability = 0.00, Count = 2
( -> _malformedErrors.get: Probability = 0.00, Count = 1
( -> .valueFor: Probability = 0.00, Count = 1
( -> buffer.charAt: Probability = 0.00, Count = 1
( -> parseDate: Probability = 0.00, Count = 1
( -> Pattern.compile: Probability = 0.00, Count = 1
( -> .split: Probability = 0.00, Count = 1
( -> strVal: Probability = 0.00, Count = 1
( -> parts[2]: Probability = 0.00, Count = 1
( -> part2.indexOf: Probability = 0.00, Count = 1
( -> evaluateInternal: Probability = 0.00, Count = 1
( -> vvX,: Probability = 0.00, Count = 1
( -> vvY,: Probability = 0.00, Count = 1
( -> WFSTInputIterator: Probability = 0.00, Count = 1
( -> tempFileNamePrefix,: Probability = 0.00, Count = 2
( -> FSTCompiler<Long>: Probability = 0.00, Count = 1
( -> iter.next: Probability = 0.00, Count = 2
( -> fstCompiler.add: Probability = 0.00, Count = 2
( -> 10d,d1: Probability = 0.00, Count = 1
( -> "[FtPioGrbit: Probability = 0.00, Count = 1
( -> "[DIMENSIONS]\n": Probability = 0.00, Count = 1
( -> .firstrow: Probability = 0.00, Count = 2
( -> .lastrow: Probability = 0.00, Count = 1
( -> .firstcol: Probability = 0.00, Count = 1
( -> block[blkIdx]: Probability = 0.00, Count = 1
( -> ++blkIdx: Probability = 0.00, Count = 1
( -> label_5:while: Probability = 0.00, Count = 1
( -> N: Probability = 0.00, Count = 2
( -> prompt[i],: Probability = 0.00, Count = 1
( -> !echo[i]: Probability = 0.00, Count = 1
( -> instruction: Probability = 0.00, Count = 2
( -> instruction.length: Probability = 0.00, Count = 1
( -> items.add: Probability = 0.00, Count = 1
( -> items.addAll: Probability = 0.00, Count = 1
( -> "replacement.length: Probability = 0.00, Count = 1
( -> maxBytesPerChar:: Probability = 0.00, Count = 1
( -> "[SCL]\n": Probability = 0.00, Count = 1
( -> .numerator: Probability = 0.00, Count = 1
( -> TickRecord: Probability = 0.00, Count = 1
( -> field_1_majorTickType: Probability = 0.00, Count = 1
( -> field_2_minorTickType: Probability = 0.00, Count = 1
( -> field_3_labelPosition: Probability = 0.00, Count = 2
( -> field_4_background: Probability = 0.00, Count = 2
( -> field_5_labelColorRgb: Probability = 0.00, Count = 2
( -> field_6_zero1: Probability = 0.00, Count = 1
( -> 10,: Probability = 0.00, Count = 2
( -> cfRules: Probability = 0.00, Count = 2
( -> "regions: Probability = 0.00, Count = 1
( -> range.validate: Probability = 0.00, Count = 1
( -> objectType: Probability = 0.00, Count = 1
( -> luceneSubQueries.add: Probability = 0.00, Count = 1
( -> return: Probability = 0.00, Count = 4
( -> "*".equals: Probability = 0.00, Count = 1
( -> "empty: Probability = 0.00, Count = 1
( -> passed: Probability = 0.00, Count = 1
( -> to: Probability = 0.00, Count = 1
( -> label_6:while: Probability = 0.00, Count = 1
( -> super: Probability = 0.00, Count = 2
( -> _rowRecords.remove: Probability = 0.00, Count = 1
( -> key.intValue: Probability = 0.00, Count = 1
( -> hasNext: Probability = 0.00, Count = 1
( -> slice: Probability = 0.00, Count = 1
( -> Slice: Probability = 0.00, Count = 1
( -> "[REFMODE]\n": Probability = 0.00, Count = 1
( -> out: Probability = 0.00, Count = 1
( -> C: Probability = 0.00, Count = 1
( -> req,: Probability = 0.00, Count = 2
( -> RepositoryNotFoundException,: Probability = 0.00, Count = 1
( -> ServiceNotEnabledException: Probability = 0.00, Count = 3
( -> isUnreasonableName: Probability = 0.00, Count = 1
( -> exports.get: Probability = 0.00, Count = 1
( -> db.incrementOpen: Probability = 0.00, Count = 1
( -> exportBase: Probability = 0.00, Count = 1
( -> FileKey.resolve: Probability = 0.00, Count = 1
( -> FS.DETECTED: Probability = 0.00, Count = 1
( -> RepositoryCache.open: Probability = 0.00, Count = 1
( -> db.close: Probability = 0.00, Count = 1
( -> exportBase.iterator: Probability = 0.00, Count = 1
( -> Pattern: Probability = 0.00, Count = 1
( -> "[ENDBLOCK]\n": Probability = 0.00, Count = 1
( -> else: Probability = 0.00, Count = 2
( -> PackIndex: Probability = 0.00, Count = 1
( -> byte[8]: Probability = 0.00, Count = 1
( -> hdr,: Probability = 0.00, Count = 2
( -> hdr.length: Probability = 0.00, Count = 1
( -> isTOC: Probability = 0.00, Count = 1
( -> PackIndexV2: Probability = 0.00, Count = 1
( -> "Locale: Probability = 0.00, Count = 1
( -> NewLocale: Probability = 0.00, Count = 1
( -> task!": Probability = 0.00, Count = 1
( -> locale,: Probability = 0.00, Count = 1
( -> "Changed: Probability = 0.00, Count = 1
( -> to:: Probability = 0.00, Count = 1
( -> List<IndexableField>: Probability = 0.00, Count = 1
( -> getPassword: Probability = 0.00, Count = 1
( -> getUsername: Probability = 0.00, Count = 1
( -> Pair<TokenSource,: Probability = 0.00, Count = 1
( -> "Password:: Probability = 0.00, Count = 1
( -> 1:return: Probability = 0.00, Count = 1
( -> throws: Probability = 0.00, Count = 3
( -> wildcardquery: Probability = 0.00, Count = 1
( -> List<Automaton>: Probability = 0.00, Count = 1
( -> wildcardText: Probability = 0.00, Count = 1
( -> wildcardquery.text: Probability = 0.00, Count = 1
( -> WILDCARD_STRING:automata.add: Probability = 0.00, Count = 1
( -> Automata.makeAnyString: Probability = 0.00, Count = 1
( -> WILDCARD_CHAR:automata.add: Probability = 0.00, Count = 1
( -> WILDCARD_ESCAPE:if: Probability = 0.00, Count = 1
( -> se.getStringValue: Probability = 0.00, Count = 1
( -> val.doubleValue: Probability = 0.00, Count = 1
( -> readAsciiLine: Probability = 0.00, Count = 1
( -> 80: Probability = 0.00, Count = 1
( -> tries.get: Probability = 0.00, Count = 1
( -> .getLastOnPath: Probability = 0.00, Count = 1
( -> startRuleStartState: Probability = 0.00, Count = 1
( -> atn.ruleToStartState[startRuleIndex]: Probability = 0.00, Count = 1
( -> createInterpreterRuleContext: Probability = 0.00, Count = 1
( -> ATNState.INVALID_STATE_NUMBER,: Probability = 0.00, Count = 1
( -> startRuleStartState.isLeftRecursiveRule: Probability = 0.00, Count = 2
( -> startRuleIndex,: Probability = 0.00, Count = 1
( -> Pair<ParserRuleContext,: Probability = 0.00, Count = 1
( -> getErrorHandler: Probability = 0.00, Count = 2
( -> "release: Probability = 0.00, Count = 1
( -> start.isEmpty: Probability = 0.00, Count = 1
( -> serialization: Probability = 0.00, Count = 1
( -> "Incorrect: Probability = 0.00, Count = 1
( -> 3999: Probability = 0.00, Count = 1
( -> formVE,: Probability = 0.00, Count = 1
( -> ICUNormalizer2FilterFactory: Probability = 0.00, Count = 1
( -> form: Probability = 0.00, Count = 2
( -> "mode",: Probability = 0.00, Count = 2
( -> "compose",: Probability = 0.00, Count = 2
( -> "decompose": Probability = 0.00, Count = 2
( -> "compose": Probability = 0.00, Count = 2
( -> Normalizer2.getInstance: Probability = 0.00, Count = 2
( -> form,: Probability = 0.00, Count = 2
( -> "compose".equals: Probability = 0.00, Count = 2
( -> !set.isEmpty: Probability = 0.00, Count = 2
( -> onDiskFile: Probability = 0.00, Count = 2
( -> super.toByteArray: Probability = 0.00, Count = 1
( -> len]: Probability = 0.00, Count = 1
( -> queries: Probability = 0.00, Count = 1
( -> queries.length: Probability = 0.00, Count = 2
( -> EdgeNGramTokenFilter.DEFAULT_PRESERVE_ORIGINAL: Probability = 0.00, Count = 1
( -> in.readLine: Probability = 0.00, Count = 2
( -> "More: Probability = 0.00, Count = 1
( -> RefNotFoundException: Probability = 0.00, Count = 1
( -> reader.getReverseEntries: Probability = 0.00, Count = 1
( -> cbuf.length: Probability = 0.00, Count = 1
( -> cbuf.length": Probability = 0.00, Count = 1
( -> !inputFinished: Probability = 0.00, Count = 1
( -> inputBuffer.length: Probability = 0.00, Count = 1
( -> FORMAT_WORDSET.equalsIgnoreCase: Probability = 0.00, Count = 1
( -> FORMAT_SNOWBALL.equalsIgnoreCase: Probability = 0.00, Count = 1
( -> 'format': Probability = 0.00, Count = 1
( -> commonWordFiles: Probability = 0.00, Count = 1
( -> CopyOnWriteArrayList: Probability = 0.00, Count = 1
( -> .elements: Probability = 0.00, Count = 2
( -> "[CONTINUE: Probability = 0.00, Count = 1
( -> .data: Probability = 0.00, Count = 1
( -> RowRecordsAggregate: Probability = 0.00, Count = 1
( -> rs.hasNext: Probability = 0.00, Count = 1
( -> RowRecord.sid:insertRow: Probability = 0.00, Count = 1
( -> DConRefRecord.sid:addUnknownRecord: Probability = 0.00, Count = 1
( -> DBCellRecord.sid:continue: Probability = 0.00, Count = 1
( -> _valuesAgg.addMultipleBlanks: Probability = 0.00, Count = 1
( -> rec.getClass: Probability = 0.00, Count = 1
( -> "[FILEPASS]\n": Probability = 0.00, Count = 1
( -> encryptionType: Probability = 0.00, Count = 1
( -> prefix: Probability = 0.00, Count = 1
( -> ."+encryptionInfo.getEncryptionMode: Probability = 0.00, Count = 1
( -> prefix+".info: Probability = 0.00, Count = 1
( -> encryptionInfo.getVersionMajor: Probability = 0.00, Count = 1
( -> prefix+".ver: Probability = 0.00, Count = 1
( -> encryptionInfo.getVersionMinor: Probability = 0.00, Count = 1
( -> prefix+".salt: Probability = 0.00, Count = 1
( -> .getSalt: Probability = 0.00, Count = 1
( -> "replacement",: Probability = 0.00, Count = 1
( -> "<multiPhrase>": Probability = 0.00, Count = 1
( -> break: Probability = 0.00, Count = 2
( -> overflow: Probability = 0.00, Count = 1
( -> destroy: Probability = 0.00, Count = 1
( -> blocks.clear: Probability = 0.00, Count = 1
( -> fields.length: Probability = 0.00, Count = 1
( -> getSuppressDropDownArrow: Probability = 0.00, Count = 1
( -> add: Probability = 0.00, Count = 1
( -> Request<DeletePublicKeyRequest>: Probability = 0.00, Count = 2
( -> DefaultRequest<DeletePublicKeyRequest>: Probability = 0.00, Count = 1
( -> deletePublicKeyRequest,: Probability = 0.00, Count = 1
( -> "AmazonCloudFront": Probability = 0.00, Count = 1
( -> data[ptr++]: Probability = 0.00, Count = 1
( -> Integer.toString: Probability = 0.00, Count = 1
( -> "[SERIESTEXT]\n": Probability = 0.00, Count = 1
( -> .id: Probability = 0.00, Count = 1
( -> i=_rectangleGroups.size: Probability = 0.00, Count = 1
( -> bcrg: Probability = 0.00, Count = 1
( -> _rectangleGroups.get: Probability = 0.00, Count = 1
( -> semiVolatile.isSet: Probability = 0.00, Count = 1
( -> semiVolatile: Probability = 0.00, Count = 1
( -> !initCalled: Probability = 0.00, Count = 1
( -> sure: Probability = 0.00, Count = 1
( -> writer.getConfig: Probability = 0.00, Count = 1
( -> .getIndexDeletionPolicy: Probability = 0.00, Count = 1
( -> searcherMgrLock: Probability = 0.00, Count = 1
( -> iter.hasPayloads: Probability = 0.00, Count = 1
( -> commit: Probability = 0.00, Count = 1
( -> TermVectorsReader: Probability = 0.00, Count = 2
( -> col,: Probability = 0.00, Count = 1
( -> .setValue: Probability = 0.00, Count = 1
( -> "all".equals: Probability = 0.00, Count = 1
( -> result.add: Probability = 0.00, Count = 1
( -> field_7_parsed_expr.getTokens: Probability = 0.00, Count = 1
( -> max-min: Probability = 0.00, Count = 1
( -> 2.0f*: Probability = 0.00, Count = 1
( -> SpatialOperation.is: Probability = 0.00, Count = 1
( -> ,SpatialOperation.Intersects,SpatialOperation.IsWithin: Probability = 0.00, Count = 1
( -> UnsupportedSpatialOperation: Probability = 0.00, Count = 1
( -> args.getShape: Probability = 0.00, Count = 1
( -> ConstantScoreQuery: Probability = 0.00, Count = 1
( -> circle: Probability = 0.00, Count = 1
( -> circle.getBoundingBox: Probability = 0.00, Count = 1
( -> DistanceRangeQuery: Probability = 0.00, Count = 1
( -> makeDistanceValueSource: Probability = 0.00, Count = 1
( -> encoding: Probability = 0.00, Count = 2
( -> isClosed: Probability = 0.00, Count = 1
( -> "spanPosRange: Probability = 0.00, Count = 1
( -> match.toString: Probability = 0.00, Count = 1
( -> isBuiltin: Probability = 0.00, Count = 3
( -> deflater.setInput: Probability = 0.00, Count = 1
( -> deflater.deflate: Probability = 0.00, Count = 1
( -> zbuf,: Probability = 0.00, Count = 1
( -> ||: Probability = 0.00, Count = 2
( -> Entry: Probability = 0.00, Count = 1
( -> checkPath: Probability = 0.00, Count = 1
( -> .invalidStageForPath,stage,: Probability = 0.00, Count = 1
( -> MissingObjectException,IncorrectObjectTypeException,: Probability = 0.00, Count = 1
( -> getURIs: Probability = 0.00, Count = 1
( -> u.toPrivateString: Probability = 0.00, Count = 2
( -> KEY_URL,: Probability = 0.00, Count = 1
( -> getPushURIs: Probability = 0.00, Count = 1
( -> KEY_PUSHURL,: Probability = 0.00, Count = 1
( -> getFetchRefSpecs: Probability = 0.00, Count = 1
( -> u.toString: Probability = 0.00, Count = 2
( -> KEY_FETCH,: Probability = 0.00, Count = 1
( -> getReceivePack: Probability = 0.00, Count = 1
( -> this: Probability = 0.00, Count = 1
( -> subs:: Probability = 0.00, Count = 1
( -> svFunction: Probability = 0.00, Count = 1
( -> DocValuesTermsCollector.binaryDocValues: Probability = 0.00, Count = 1
( -> GenericTermsCollector.createCollectorSV: Probability = 0.00, Count = 1
( -> svFunction,: Probability = 0.00, Count = 1
( -> multipleValuesPerDocument,: Probability = 0.00, Count = 1
( -> list.size: Probability = 0.00, Count = 2
( -> p+: Probability = 0.00, Count = 1
( -> 1-Math.pow: Probability = 0.00, Count = 1
( -> get: Probability = 0.00, Count = 1
( -> .getClass: Probability = 0.00, Count = 1
( -> remove: Probability = 0.00, Count = 1
( -> MultiPhraseQuery: Probability = 0.00, Count = 1
( -> 16,: Probability = 0.00, Count = 1
( -> readLiveDocs: Probability = 0.00, Count = 1
( -> info.hasDeletions: Probability = 0.00, Count = 1
( -> info.info.name,: Probability = 0.00, Count = 1
( -> LIVEDOCS_EXTENSION,: Probability = 0.00, Count = 1
( -> info.getDelGen: Probability = 0.00, Count = 1
( -> ChecksumIndexInput: Probability = 0.00, Count = 2
( -> dir.openChecksumInput: Probability = 0.00, Count = 1
( -> fileName,: Probability = 0.00, Count = 1
( -> SIZE: Probability = 0.00, Count = 1
( -> SIZE.length,: Probability = 0.00, Count = 1
( -> BitSet: Probability = 0.00, Count = 2
( -> !scratch.get: Probability = 0.00, Count = 1
( -> parseIntAt: Probability = 0.00, Count = 1
( -> scratchUTF16: Probability = 0.00, Count = 1
( -> build: Probability = 0.00, Count = 1
( -> matcher: Probability = 0.00, Count = 1
( -> matcher.find: Probability = 0.00, Count = 1
( -> kx.alloc: Probability = 0.00, Count = 1
( -> compact: Probability = 0.00, Count = 2
( -> "[SAVERECALC]\n": Probability = 0.00, Count = 1
( -> .recalc: Probability = 0.00, Count = 1
( -> slice[upto]: Probability = 0.00, Count = 1
( -> validate: Probability = 0.00, Count = 2
( -> cloneFilter: Probability = 0.00, Count = 1
( -> filterDbNameIndex,: Probability = 0.00, Count = 1
( -> origNameRecord: Probability = 0.00, Count = 1
( -> filterDbNameIndex: Probability = 0.00, Count = 1
( -> i<: Probability = 0.00, Count = 1
( -> "[BOF: Probability = 0.00, Count = 1
( -> .version: Probability = 0.00, Count = 1
( -> getVersion: Probability = 0.00, Count = 2
( -> getTypeName: Probability = 0.00, Count = 1
( -> !_recStream.hasNextRecord: Probability = 0.00, Count = 1
( -> _lastRecordWasEOFLevelZero: Probability = 0.00, Count = 1
( -> BOFRecord.sid: Probability = 0.00, Count = 1
( -> perThread: Probability = 0.00, Count = 1
( -> !perThread.flushPending: Probability = 0.00, Count = 1
( -> lookupPrefix: Probability = 0.00, Count = 1
( -> decodeWeight: Probability = 0.00, Count = 1
( -> unpackedObjectCache.clear: Probability = 0.00, Count = 1
( -> PackList: Probability = 0.00, Count = 1
( -> packList.get: Probability = 0.00, Count = 1
( -> NO_PACKS: Probability = 0.00, Count = 2
( -> packList.compareAndSet: Probability = 0.00, Count = 1
( -> packs,: Probability = 0.00, Count = 1
( -> evaluateAreaSumProduct: Probability = 0.00, Count = 1
( -> SUMPRODUCT:: Probability = 0.00, Count = 1
( -> firstArg.getClass: Probability = 0.00, Count = 1
( -> Date: Probability = 0.00, Count = 2
( -> _sheets: Probability = 0.00, Count = 1
( -> repo.newObjectInserter: Probability = 0.00, Count = 2
( -> repo,: Probability = 0.00, Count = 2
( -> getCurrentToken: Probability = 0.00, Count = 1
( -> o.getType: Probability = 0.00, Count = 1
( -> EOF: Probability = 0.00, Count = 2
( -> hasListener: Probability = 0.00, Count = 2
( -> !_parseListeners.isEmpty: Probability = 0.00, Count = 1
( -> _errHandler.inErrorRecoveryMode: Probability = 0.00, Count = 1
( -> createErrorNode: Probability = 0.00, Count = 1
( -> listener.visitErrorNode: Probability = 0.00, Count = 2
( -> switch: Probability = 0.00, Count = 2
( -> state: Probability = 0.00, Count = 1
( -> LabelRecord: Probability = 0.00, Count = 1
( -> field_2_column: Probability = 0.00, Count = 1
( -> field_3_xf_index: Probability = 0.00, Count = 1
( -> field_5_unicode_flag: Probability = 0.00, Count = 2
( -> isUnCompressedUnicode: Probability = 0.00, Count = 1
( -> "[PROTECT]\n": Probability = 0.00, Count = 1
( -> ArrayList<String>: Probability = 0.00, Count = 1
( -> filter.accept: Probability = 0.00, Count = 2
( -> evaluateIntArg: Probability = 0.00, Count = 1
( -> _isLeft: Probability = 0.00, Count = 1
( -> newSerializer: Probability = 0.00, Count = 1
( -> serializerClasses: Probability = 0.00, Count = 1
( -> "Factory: Probability = 0.00, Count = 1
( -> initialization: Probability = 0.00, Count = 1
( -> incomplete: Probability = 0.00, Count = 1
( -> tried: Probability = 0.00, Count = 1
( -> serializerClasses.size: Probability = 0.00, Count = 2
( -> classes: Probability = 0.00, Count = 1
( -> issues: Probability = 0.00, Count = 1
( -> Class: Probability = 0.00, Count = 2
( -> ser: Probability = 0.00, Count = 2
( -> issues.append: Probability = 0.00, Count = 1
( -> count,: Probability = 0.00, Count = 1
( -> "[ArrayPtg]\n": Probability = 0.00, Count = 1
( -> "nRows: Probability = 0.00, Count = 1
( -> getRowCount: Probability = 0.00, Count = 1
( -> "nCols: Probability = 0.00, Count = 1
( -> getColumnCount: Probability = 0.00, Count = 1
( -> toFormulaString: Probability = 0.00, Count = 1
( -> destCell: Probability = 0.00, Count = 1
( -> "[RECALCID]\n": Probability = 0.00, Count = 1
( -> .engineId: Probability = 0.00, Count = 1
( -> countArg: Probability = 0.00, Count = 1
( -> "eval: Probability = 0.00, Count = 1
( -> countMatchingCellsInArea: Probability = 0.00, Count = 1
( -> "Count: Probability = 0.00, Count = 1
( -> liftUp: Probability = 0.00, Count = 2
( -> getTermInfo: Probability = 0.00, Count = 1
( -> isSemiVolatile: Probability = 0.00, Count = 1
( -> "volatile: Probability = 0.00, Count = 1
( -> isSpace: Probability = 0.00, Count = 1
( -> "space: Probability = 0.00, Count = 1
( -> List<Object>: Probability = 0.00, Count = 1
( -> ExternalNameRecord.class: Probability = 0.00, Count = 1
( -> ExternalNameRecord[temp.size: Probability = 0.00, Count = 1
( -> temp.clear: Probability = 0.00, Count = 1
( -> addBSERecord: Probability = 0.00, Count = 1
( -> createDrawingGroup: Probability = 0.00, Count = 1
( -> escherBSERecords.add: Probability = 0.00, Count = 1
( -> drawingGroup: Probability = 0.00, Count = 1
( -> getRecords: Probability = 0.00, Count = 1
( -> .getRecordId: Probability = 0.00, Count = 1
( -> bstoreContainer.setRecordId: Probability = 0.00, Count = 1
( -> List<EscherRecord>: Probability = 0.00, Count = 2
( -> childRecords.add: Probability = 0.00, Count = 1
( -> dggContainer.setChildRecords: Probability = 0.00, Count = 1
( -> bstoreContainer.setOptions: Probability = 0.00, Count = 1
( -> !invert: Probability = 0.00, Count = 2
( -> attributeImpls.get: Probability = 0.00, Count = 1
( -> state.attribute.getClass: Probability = 0.00, Count = 1
( -> "MergeSpec:\n": Probability = 0.00, Count = 1
( -> []: Probability = 0.00, Count = 1
( -> "[PROT4REV]\n": Probability = 0.00, Count = 1
( -> buffer[startPtr: Probability = 0.00, Count = 1
( -> DateTools.Resolution: Probability = 0.00, Count = 1
( -> p: Probability = 0.00, Count = 1
( -> getColumn: Probability = 0.00, Count = 1
( -> dumpDeadEndConfigs: Probability = 0.00, Count = 1
( -> nvae: Probability = 0.00, Count = 1
( -> "dead: Probability = 0.00, Count = 1
( -> configs:: Probability = 0.00, Count = 1
( -> edges": Probability = 0.00, Count = 1
( -> c.state.transition: Probability = 0.00, Count = 1
( -> "Atom: Probability = 0.00, Count = 1
( -> "+getTokenName: Probability = 0.00, Count = 1
( -> at.label: Probability = 0.00, Count = 1
( -> +"Set: Probability = 0.00, Count = 1
( -> "+st.set.toString: Probability = 0.00, Count = 1
( -> "[SUPBOOK: Probability = 0.00, Count = 1
( -> isExternalReferences: Probability = 0.00, Count = 2
( -> "External: Probability = 0.00, Count = 1
( -> References]\n": Probability = 0.00, Count = 1
( -> .url: Probability = 0.00, Count = 1
( -> getURL: Probability = 0.00, Count = 1
( -> .nSheets: Probability = 0.00, Count = 1
( -> 256: Probability = 0.00, Count = 1
( -> "[ftLbsData]\n": Probability = 0.00, Count = 1
( -> .unknownShort1: Probability = 0.00, Count = 1
( -> _cbFContinued: Probability = 0.00, Count = 2
( -> .formula: Probability = 0.00, Count = 1
( -> _linkPtg.getRVAType: Probability = 0.00, Count = 1
( -> .nEntryCount: Probability = 0.00, Count = 1
( -> _cLines: Probability = 0.00, Count = 2
( -> .selEntryIx: Probability = 0.00, Count = 1
( -> "[SeriesToChartGroup]\n": Probability = 0.00, Count = 1
( -> OpenNLPLemmatizerFilterFactory: Probability = 0.00, Count = 1
( -> Iterator<?>: Probability = 0.00, Count = 1
( -> ruleNames!=null: Probability = 0.00, Count = 1
( -> .getRuleContext: Probability = 0.00, Count = 1
( -> ruleNames.get: Probability = 0.00, Count = 1
( -> altNumber: Probability = 0.00, Count = 1
( -> "[CHARTFRTINFO]\n": Probability = 0.00, Count = 1
( -> .verOriginator=": Probability = 0.00, Count = 1
( -> CountUtils.countMatchingCellsInArea: Probability = 0.00, Count = 1
( -> arg0.getClass: Probability = 0.00, Count = 1
( -> charactersStrArray: Probability = 0.00, Count = 1
( -> charactersStr,: Probability = 0.00, Count = 1
( -> ",",: Probability = 0.00, Count = 2
( -> widthsStrArray: Probability = 0.00, Count = 1
( -> widthsStr,: Probability = 0.00, Count = 1
( -> charactersStrArray.length: Probability = 0.00, Count = 1
( -> widthsStrArray.length: Probability = 0.00, Count = 2
( -> "Number: Probability = 0.00, Count = 1
( -> FunctionMetadataRegistry.getFunctionByName: Probability = 0.00, Count = 1
( -> AnalysisToolPak.isATPFunction: Probability = 0.00, Count = 1
( -> "[TABID]\n": Probability = 0.00, Count = 1
( -> number1: Probability = 0.00, Count = 2
( -> number1.compareTo: Probability = 0.00, Count = 1
( -> LinkedList<>: Probability = 0.00, Count = 1
( -> _unmappableErrors.get: Probability = 0.00, Count = 1
( -> Double.doubleToLongBits: Probability = 0.00, Count = 1
( -> "[IFMT]\n": Probability = 0.00, Count = 1
( -> .formatIndex: Probability = 0.00, Count = 1
( -> CommonObjectDataSubRecord.sid: Probability = 0.00, Count = 1
( -> LittleEndianByteArrayInputStream: Probability = 0.00, Count = 2
( -> subRecStream: Probability = 0.00, Count = 1
( -> cmo: Probability = 0.00, Count = 2
( -> cmo.getObjectType: Probability = 0.00, Count = 1
( -> subRecord.isTerminating: Probability = 0.00, Count = 1
( -> subRecordData.length: Probability = 0.00, Count = 1
( -> NORMAL_PAD_ALIGNMENT: Probability = 0.00, Count = 1
( -> "[CALCMODE]\n": Probability = 0.00, Count = 1
( -> .calcmode: Probability = 0.00, Count = 1
( -> revWalk: Probability = 0.00, Count = 1
( -> refList: Probability = 0.00, Count = 2
( -> tags.add: Probability = 0.00, Count = 1
( -> o1.getName: Probability = 0.00, Count = 2
( -> EXTRA: Probability = 0.00, Count = 1
( -> "<span: Probability = 0.00, Count = 1
( -> style=\"": Probability = 0.00, Count = 1
( -> createWriterConfig: Probability = 0.00, Count = 1
( -> iwConf: Probability = 0.00, Count = 1
( -> getIndexDeletionPolicy: Probability = 0.00, Count = 2
( -> iwConf.setIndexCommit: Probability = 0.00, Count = 1
( -> mergeScheduler.equals: Probability = 0.00, Count = 1
( -> NoMergeScheduler.class.getName: Probability = 0.00, Count = 1
( -> NoMergeScheduler.INSTANCE: Probability = 0.00, Count = 1
( -> "[DATALABEXT]\n": Probability = 0.00, Count = 1
( -> hasAttributes: Probability = 0.00, Count = 1
( -> other.attributeImpls.size: Probability = 0.00, Count = 1
( -> other.getCurrentState: Probability = 0.00, Count = 1
( -> getScheme: Probability = 0.00, Count = 1
( -> b.getScheme: Probability = 0.00, Count = 1
( -> Double: Probability = 0.00, Count = 1
( -> dd.doubleValue: Probability = 0.00, Count = 1
( -> altsets.iterator: Probability = 0.00, Count = 1
( -> oldSource.size: Probability = 0.00, Count = 1
( -> newSource.size: Probability = 0.00, Count = 1
( -> in.cells.values: Probability = 0.00, Count = 1
( -> nodes.get: Probability = 0.00, Count = 1
( -> "SymbolicRef[": Probability = 0.00, Count = 1
( -> cur.isSymbolic: Probability = 0.00, Count = 1
( -> ParseException,: Probability = 0.00, Count = 1
( -> InvalidShapeException: Probability = 0.00, Count = 1
( -> v.indexOf: Probability = 0.00, Count = 1
( -> v.lastIndexOf: Probability = 0.00, Count = 1
( -> "missing: Probability = 0.00, Count = 2
( -> parens:: Probability = 0.00, Count = 1
( -> SpatialOperation.get: Probability = 0.00, Count = 1
( -> "[SXVS]\n": Probability = 0.00, Count = 1
( -> .vs: Probability = 0.00, Count = 1
( -> futureHeader.serialize: Probability = 0.00, Count = 1
( -> reserved1: Probability = 0.00, Count = 1
( -> cellRefs.length: Probability = 0.00, Count = 1
( -> !hasNext: Probability = 0.00, Count = 1
( -> cacheDirectory.listAll: Probability = 0.00, Count = 1
( -> !partition.equals: Probability = 0.00, Count = 1
( -> arn.partition: Probability = 0.00, Count = 1
( -> arn.service: Probability = 0.00, Count = 1
( -> "[HCENTER]\n": Probability = 0.00, Count = 1
( -> .hcenter: Probability = 0.00, Count = 1
( -> getHCenter: Probability = 0.00, Count = 1
( -> .removeChildRecord: Probability = 0.00, Count = 1
( -> Collection<: Probability = 0.00, Count = 1
( -> toMerge: Probability = 0.00, Count = 1
( -> Iterator<: Probability = 0.00, Count = 2
( -> toMergeItr: Probability = 0.00, Count = 1
( -> toMerge.iterator: Probability = 0.00, Count = 1
( -> !toMergeItr.hasNext: Probability = 0.00, Count = 1
( -> "toMerge: Probability = 0.00, Count = 1
( -> WeightedPhraseInfo.": Probability = 0.00, Count = 1
( -> toMergeItr.next: Probability = 0.00, Count = 2
( -> termsInfos: Probability = 0.00, Count = 1
( -> allToffs[: Probability = 0.00, Count = 2
( -> first.termsOffsets.iterator: Probability = 0.00, Count = 1
( -> toMergeItr.hasNext: Probability = 0.00, Count = 1
( -> info.boost: Probability = 0.00, Count = 1
( -> termsInfos.addAll: Probability = 0.00, Count = 1
( -> info.termsInfos: Probability = 0.00, Count = 1
( -> getOrQuery: Probability = 0.00, Count = 2
( -> getSet: Probability = 0.00, Count = 1
( -> !isRowGroupCollapsed: Probability = 0.00, Count = 2
( -> !isRowGroupHiddenByParent: Probability = 0.00, Count = 1
( -> "[STYLE]\n": Probability = 0.00, Count = 1
( -> .xf_index_raw: Probability = 0.00, Count = 1
( -> "built-in": Probability = 0.00, Count = 1
( -> "user-defined": Probability = 0.00, Count = 1
( -> .xf_index: Probability = 0.00, Count = 1
( -> .builtin_style=": Probability = 0.00, Count = 1
( -> Map: Probability = 0.00, Count = 1
( -> &&entrySet: Probability = 0.00, Count = 1
( -> Map<?,: Probability = 0.00, Count = 1
( -> overflowBuffer.length: Probability = 0.00, Count = 1
( -> overflowBuffer.openInputStream: Probability = 0.00, Count = 1
( -> "[SERTOCRT]\n": Probability = 0.00, Count = 1
( -> setMaxCodeLenMethod: Probability = 0.00, Count = 1
( -> clazz.getMethod: Probability = 0.00, Count = 1
( -> "setMaxCodeLen",: Probability = 0.00, Count = 1
( -> int.class: Probability = 0.00, Count = 1
( -> "[PRINTHEADERS]\n": Probability = 0.00, Count = 1
( -> .printheaders: Probability = 0.00, Count = 1
( -> label_7:while: Probability = 0.00, Count = 1
( -> ModifierQueryNode.Modifier.MOD_NONE: Probability = 0.00, Count = 1
( -> MINUS:switch: Probability = 0.00, Count = 1
( -> ?: Probability = 0.00, Count = 3
( -> CapitalizationFilterFactory: Probability = 0.00, Count = 1
( -> KEEP_IGNORE_CASE,: Probability = 0.00, Count = 1
( -> KEEP: Probability = 0.00, Count = 1
( -> keep: Probability = 0.00, Count = 1
( -> keep.addAll: Probability = 0.00, Count = 1
( -> OK_PREFIX: Probability = 0.00, Count = 1
( -> okPrefix: Probability = 0.00, Count = 1
( -> okPrefix.add: Probability = 0.00, Count = 1
( -> minWordLength: Probability = 0.00, Count = 1
( -> this.getFontAtIndex: Probability = 0.00, Count = 1
( -> cloneStringIfRequired: Probability = 0.00, Count = 1
( -> Iterator<FormatRun>: Probability = 0.00, Count = 1
( -> formatting: Probability = 0.00, Count = 2
( -> _string.formatIterator: Probability = 0.00, Count = 1
( -> formatting.hasNext: Probability = 0.00, Count = 1
( -> formatting.next: Probability = 0.00, Count = 1
( -> formatting.remove: Probability = 0.00, Count = 1
( -> Iterable<RevCommit>: Probability = 0.00, Count = 1
( -> NoHeadException: Probability = 0.00, Count = 2
( -> List<TreeFilter>: Probability = 0.00, Count = 1
( -> filters: Probability = 0.00, Count = 2
( -> !pathFilters.isEmpty: Probability = 0.00, Count = 1
( -> PathFilterGroup.create: Probability = 0.00, Count = 1
( -> pathFilters: Probability = 0.00, Count = 1
( -> !excludeTreeFilters.isEmpty: Probability = 0.00, Count = 1
( -> excludeTreeFilters: Probability = 0.00, Count = 1
( -> !filters.isEmpty: Probability = 0.00, Count = 1
( -> repo.resolve: Probability = 0.00, Count = 1
( -> HyphenationCompoundWordTokenFilterFactory: Probability = 0.00, Count = 1
( -> removeMapping: Probability = 0.00, Count = 1
( -> ensureInvariants: Probability = 0.00, Count = 1
( -> pushRunLen: Probability = 0.00, Count = 1
( -> nextRun: Probability = 0.00, Count = 1
( -> fieldNames.size: Probability = 0.00, Count = 1
( -> q.makeLuceneQueryFieldNoBoost: Probability = 0.00, Count = 1
( -> fieldNames.get: Probability = 0.00, Count = 1
( -> List<SrndQuery>: Probability = 0.00, Count = 1
( -> fni: Probability = 0.00, Count = 1
( -> getFieldNames: Probability = 0.00, Count = 1
( -> .listIterator: Probability = 0.00, Count = 1
( -> fni.hasNext: Probability = 0.00, Count = 1
( -> qc: Probability = 0.00, Count = 1
( -> q.clone: Probability = 0.00, Count = 1
( -> "[DVAL]\n": Probability = 0.00, Count = 1
( -> .horizPos: Probability = 0.00, Count = 1
( -> getHorizontalPos: Probability = 0.00, Count = 1
( -> .vertPos: Probability = 0.00, Count = 1
( -> getVerticalPos: Probability = 0.00, Count = 1
( -> .comboObjectID: Probability = 0.00, Count = 1
( -> getObjectID: Probability = 0.00, Count = 1
( -> back: Probability = 0.00, Count = 1
( -> lines: Probability = 0.00, Count = 2
( -> message.split: Probability = 0.00, Count = 1
( -> ChangeIdUtil.indexOfFirstFooterLine: Probability = 0.00, Count = 1
( -> agg.getRow: Probability = 0.00, Count = 1
( -> _firstCell.getCol: Probability = 0.00, Count = 1
( -> "shared: Probability = 0.00, Count = 1
( -> dictionaryLemmatizer.lemmatize: Probability = 0.00, Count = 1
( -> lemmas.length: Probability = 0.00, Count = 1
( -> lemmas[i].equals: Probability = 0.00, Count = 1
( -> "O": Probability = 0.00, Count = 1
( -> "[ENDOBJECT]\n": Probability = 0.00, Count = 1
( -> ErrorEval.DIV_ZERO: Probability = 0.00, Count = 1
( -> getContentHandler: Probability = 0.00, Count = 1
( -> "<font: Probability = 0.00, Count = 1
( -> TernaryTreeNode: Probability = 0.00, Count = 1
( -> SortedInputIterator: Probability = 0.00, Count = 1
( -> iterator,: Probability = 0.00, Count = 1
( -> utf8SortedAsUTF16SortOrder: Probability = 0.00, Count = 1
( -> ArrayList<Number>: Probability = 0.00, Count = 1
( -> group: Probability = 0.00, Count = 1
( -> -k: Probability = 0.00, Count = 1
( -> in.remaining: Probability = 0.00, Count = 2
( -> ByteBuffer.allocate: Probability = 0.00, Count = 2
( -> result.isMalformed: Probability = 0.00, Count = 1
( -> MalformedInputException: Probability = 0.00, Count = 1
( -> double[]: Probability = 0.00, Count = 1
( -> newLeaf.getPeeledObjectId: Probability = 0.00, Count = 1
( -> LooseNonTag: Probability = 0.00, Count = 1
( -> Ref: Probability = 0.00, Count = 3
( -> R_HEADS: Probability = 0.00, Count = 1
( -> ListMode.REMOTE: Probability = 0.00, Count = 1
( -> R_REMOTES: Probability = 0.00, Count = 1
( -> Collections.sort: Probability = 0.00, Count = 1
( -> o1,: Probability = 0.00, Count = 1
( -> sid: Probability = 0.00, Count = 1
( -> Utils.escapeWhitespace: Probability = 0.00, Count = 2
( -> t.getChildCount: Probability = 0.00, Count = 1
( -> isOperatorInfix: Probability = 0.00, Count = 1
( -> "isxvi=": Probability = 0.00, Count = 1
( -> isxvd=": Probability = 0.00, Count = 1
( -> match.length: Probability = 0.00, Count = 1
( -> arrays.isEmpty: Probability = 0.00, Count = 1
( -> arrays.size: Probability = 0.00, Count = 1
( -> List<BytesRef>: Probability = 0.00, Count = 1
( -> DOMUtils.getText: Probability = 0.00, Count = 1
( -> unSafeParser.parse: Probability = 0.00, Count = 1
( -> "fieldName",: Probability = 0.00, Count = 1
( -> Request<GetChangeRequest>: Probability = 0.00, Count = 2
( -> DefaultRequest<GetChangeRequest>: Probability = 0.00, Count = 1
( -> precedenceTransition: Probability = 0.00, Count = 1
( -> config,PrecedencePredicateTransition: Probability = 0.00, Count = 1
( -> pt,boolean: Probability = 0.00, Count = 1
( -> collectPredicates,boolean: Probability = 0.00, Count = 1
( -> inContext,boolean: Probability = 0.00, Count = 1
( -> debug: Probability = 0.00, Count = 2
( -> "PRED: Probability = 0.00, Count = 1
( -> collectPredicates="+collectPredicates+": Probability = 0.00, Count = 1
( -> "+pt.precedence+">=_p"+",: Probability = 0.00, Count = 1
( -> dependent=true": Probability = 0.00, Count = 1
( -> !lowerTerm.equals: Probability = 0.00, Count = 1
( -> decoder.onMalformedInput: Probability = 0.00, Count = 1
( -> ByteBuffer.wrap: Probability = 0.00, Count = 2
( -> CharBuffer.allocate: Probability = 0.00, Count = 1
( -> replacement.length: Probability = 0.00, Count = 1
( -> field,: Probability = 0.00, Count = 2
( -> -pow10: Probability = 0.00, Count = 1
( -> _optRecord: Probability = 0.00, Count = 1
( -> map.get: Probability = 0.00, Count = 1
( -> IndexFileNames.segmentFileName: Probability = 0.00, Count = 1
( -> "",: Probability = 0.00, Count = 1
( -> Lucene50CompoundFormat.DATA_EXTENSION: Probability = 0.00, Count = 1
( -> pos++: Probability = 0.00, Count = 2
( -> "[OLD: Probability = 0.00, Count = 1
( -> "Referenced: Probability = 0.00, Count = 1
( -> could: Probability = 0.00, Count = 1
( -> _externalBookBlocks[extBookIndex]: Probability = 0.00, Count = 1
( -> externalBook._externalNameRecords.length: Probability = 0.00, Count = 1
( -> workbook.getSheetName: Probability = 0.00, Count = 1
( -> "Ext: Probability = 0.00, Count = 1
( -> Book: Probability = 0.00, Count = 1
( -> Index: Probability = 0.00, Count = 1
( -> ModifierQueryNode: Probability = 0.00, Count = 1
( -> cell.getRow: Probability = 0.00, Count = 1
( -> clone.attribute: Probability = 0.00, Count = 1
( -> attribute.clone: Probability = 0.00, Count = 1
( -> StoredFieldsReader: Probability = 0.00, Count = 1
( -> total: Probability = 0.00, Count = 2
( -> DConRefRecord: Probability = 0.00, Count = 1
( -> queryScorer.getWeightedSpanTerm: Probability = 0.00, Count = 1
( -> wSpanTerm.getPositionSpans: Probability = 0.00, Count = 1
( -> "float": Probability = 0.00, Count = 1
( -> FloatEncoder: Probability = 0.00, Count = 1
( -> "integer": Probability = 0.00, Count = 1
( -> getAttributes: Probability = 0.00, Count = 1
( -> getBoldWeight: Probability = 0.00, Count = 1
( -> getSuperSubScript: Probability = 0.00, Count = 1
( -> credentials.isExpired: Probability = 0.00, Count = 1
( -> MAX_ECS_METADATA_FETCH_RETRY_TIMES: Probability = 0.00, Count = 1
( -> credentials.shouldRefresh: Probability = 0.00, Count = 1
( -> params: Probability = 0.00, Count = 1
( -> TERM: Probability = 0.00, Count = 1
( -> COLON: Probability = 0.00, Count = 1
( -> in.available: Probability = 0.00, Count = 1
( -> packed.find: Probability = 0.00, Count = 1
( -> packed.remove: Probability = 0.00, Count = 1
( -> "[CHARTFORMAT]\n": Probability = 0.00, Count = 1
( -> .xPosition: Probability = 0.00, Count = 1
( -> getXPosition: Probability = 0.00, Count = 1
( -> .yPosition: Probability = 0.00, Count = 1
( -> getYPosition: Probability = 0.00, Count = 1
( -> extBlock.getExternalBookRecord: Probability = 0.00, Count = 1
( -> -2,: Probability = 0.00, Count = 1
( -> extNameRecord.setText: Probability = 0.00, Count = 1
( -> extNameRecord.setParsedExpression: Probability = 0.00, Count = 1
( -> ErrPtg.REF_INVALID: Probability = 0.00, Count = 1
( -> extBlock.addExternalName: Probability = 0.00, Count = 1
( -> supLinkIndex: Probability = 0.00, Count = 1
( -> freqs!=null: Probability = 0.00, Count = 1
( -> position!=null: Probability = 0.00, Count = 1
( -> byte[][]: Probability = 0.00, Count = 2
( -> formats: Probability = 0.00, Count = 1
( -> "[SINDEX]\n": Probability = 0.00, Count = 1
( -> .index: Probability = 0.00, Count = 1
( -> getIndex: Probability = 0.00, Count = 2
( -> ArrayList<ParseTreeMatch>: Probability = 0.00, Count = 1
( -> hasSLLConflictTerminatingPrediction: Probability = 0.00, Count = 1
( -> PredictionMode: Probability = 0.00, Count = 1
( -> allConfigsInRuleStopStates: Probability = 0.00, Count = 1
( -> PredictionMode.SLL: Probability = 0.00, Count = 1
( -> configs.hasSemanticContext: Probability = 0.00, Count = 1
( -> multi: Probability = 0.00, Count = 1
( -> ICUTokenizerFactory: Probability = 0.00, Count = 1
( -> tailored: Probability = 0.00, Count = 1
( -> RULEFILES: Probability = 0.00, Count = 1
( -> splitFileNames: Probability = 0.00, Count = 1
( -> scriptAndResourcePath: Probability = 0.00, Count = 1
( -> scriptAndResourcePath.indexOf: Probability = 0.00, Count = 1
( -> colonPos+1: Probability = 0.00, Count = 1
( -> "cjkAsWords",: Probability = 0.00, Count = 1
( -> PrefixOperatorQuery: Probability = 0.00, Count = 1
( -> Iterator<EscherRecord>: Probability = 0.00, Count = 1
( -> recognizer.getState: Probability = 0.00, Count = 1
( -> TokenStream: Probability = 0.00, Count = 1
( -> la: Probability = 0.00, Count = 2
( -> .nextTokens: Probability = 0.00, Count = 1
( -> nextTokensState: Probability = 0.00, Count = 2
( -> nextTokens.contains: Probability = 0.00, Count = 1
( -> recognizer.getContext: Probability = 0.00, Count = 1
( -> "[GRIDSET]\n": Probability = 0.00, Count = 1
( -> .gridset: Probability = 0.00, Count = 1
( -> nextPosition: Probability = 0.00, Count = 1
( -> termFreq: Probability = 0.00, Count = 1
( -> "queries.length: Probability = 0.00, Count = 1
( -> fields.length": Probability = 0.00, Count = 1
( -> qp: Probability = 0.00, Count = 1
( -> qp.setAnalyzer: Probability = 0.00, Count = 1
( -> list: Probability = 0.00, Count = 1
( -> ?crB.getLastRow: Probability = 0.00, Count = 1
( -> List<SpanQuery>: Probability = 0.00, Count = 1
( -> clausesList: Probability = 0.00, Count = 1
( -> "[HYPERLINK: Probability = 0.00, Count = 1
( -> _range.formatAsString: Probability = 0.00, Count = 1
( -> .guid: Probability = 0.00, Count = 1
( -> _guid.toString: Probability = 0.00, Count = 1
( -> .linkOpts=: Probability = 0.00, Count = 1
( -> .label: Probability = 0.00, Count = 1
( -> getLabel: Probability = 0.00, Count = 1
( -> HLINK_TARGET_FRAME: Probability = 0.00, Count = 1
( -> .targetFrame=: Probability = 0.00, Count = 1
( -> HLINK_URL: Probability = 0.00, Count = 1
( -> '<': Probability = 0.00, Count = 1
( -> "[LABEL]\n": Probability = 0.00, Count = 1
( -> .column: Probability = 0.00, Count = 1
( -> .xfindex: Probability = 0.00, Count = 1
( -> outputList.size: Probability = 0.00, Count = 1
( -> addedList.add: Probability = 0.00, Count = 1
( -> _boundAggregate.findFirstWithId: Probability = 0.00, Count = 1
( -> optRecord.getEscherProperties: Probability = 0.00, Count = 1
( -> str.equals: Probability = 0.00, Count = 1
( -> "[TABLE]\n": Probability = 0.00, Count = 1
( -> field_5_flags: Probability = 0.00, Count = 1
( -> .alwaysClc=: Probability = 0.00, Count = 1
( -> isAlwaysCalc: Probability = 0.00, Count = 1
( -> field_9_rowInputCol,: Probability = 0.00, Count = 1
( -> Byte.parseByte: Probability = 0.00, Count = 1
( -> PREFIX_LENGTH_KEY,: Probability = 0.00, Count = 1
( -> "5": Probability = 0.00, Count = 1
( -> PREFIX_LENGTH_KEY: Probability = 0.00, Count = 1
( -> "impl": Probability = 0.00, Count = 1
( -> value.equalsIgnoreCase: Probability = 0.00, Count = 2
( -> "icu": Probability = 0.00, Count = 1
( -> Implementation.ICU: Probability = 0.00, Count = 1
( -> _isLarge: Probability = 0.00, Count = 1
( -> DEFAULT_NUMTERMS: Probability = 0.00, Count = 1
( -> Comparator<TermStats>: Probability = 0.00, Count = 1
( -> DocFreqComparator: Probability = 0.00, Count = 1
( -> args[i].equals: Probability = 0.00, Count = 1
( -> "-t": Probability = 0.00, Count = 1
( -> TotalTermFreqComparator: Probability = 0.00, Count = 1
( -> field=args[i]: Probability = 0.00, Count = 1
( -> "Document<": Probability = 0.00, Count = 1
( -> fields.get: Probability = 0.00, Count = 1
( -> DefaultRequest<GetPublicAccessBlockRequest>: Probability = 0.00, Count = 1
( -> getPublicAccessBlockRequest,: Probability = 0.00, Count = 1
( -> that.size: Probability = 0.00, Count = 1
( -> "[HEADER]\n": Probability = 0.00, Count = 1
( -> .header: Probability = 0.00, Count = 1
( -> src.isEmpty: Probability = 0.00, Count = 1
( -> src.size: Probability = 0.00, Count = 1
( -> tokens[mid],: Probability = 0.00, Count = 1
( -> sizeLimit,: Probability = 0.00, Count = 1
( -> sz]: Probability = 0.00, Count = 1
( -> Matcher: Probability = 0.00, Count = 1
( -> '[':if: Probability = 0.00, Count = 1
( -> delegateFieldsProducer!=null: Probability = 0.00, Count = 1
( -> delegateFieldsProducer.ramBytesUsed: Probability = 0.00, Count = 1
( -> indexEnum: Probability = 0.00, Count = 1
( -> "terms: Probability = 0.00, Count = 1
( -> loaded": Probability = 0.00, Count = 1
( -> DoubleRange: Probability = 0.00, Count = 1
( -> minIn,: Probability = 0.00, Count = 1
( -> Double.isNaN: Probability = 0.00, Count = 2
( -> "min: Probability = 0.00, Count = 1
( -> !minInclusive: Probability = 0.00, Count = 1
( -> lexerActions[i].isPositionDependent: Probability = 0.00, Count = 1
( -> "[TopMargin]\n": Probability = 0.00, Count = 1
( -> --index: Probability = 0.00, Count = 1
( -> toDirectoryIndex: Probability = 0.00, Count = 1
( -> path.endsWith: Probability = 0.00, Count = 1
( -> "[AREA]\n": Probability = 0.00, Count = 1
( -> .formatFlags: Probability = 0.00, Count = 1
( -> "[PRINTGRIDLINES]\n": Probability = 0.00, Count = 1
( -> .printgridlines: Probability = 0.00, Count = 1
( -> "[INDEX]\n": Probability = 0.00, Count = 1
( -> .lastrowadd1: Probability = 0.00, Count = 1
( -> getLastRowAdd1: Probability = 0.00, Count = 1
( -> .dbcell_": Probability = 0.00, Count = 1
( -> passedThroughNonGreedyDecision: Probability = 0.00, Count = 1
( -> lexerOther.passedThroughNonGreedyDecision: Probability = 0.00, Count = 1
( -> !ObjectEqualityComparator.INSTANCE.equals: Probability = 0.00, Count = 1
( -> [Pattern: Probability = 0.00, Count = 1
( -> .fillpattern=: Probability = 0.00, Count = 1
( -> getFillPattern: Probability = 0.00, Count = 1
( -> getFillForegroundColor: Probability = 0.00, Count = 1
( -> _validationList.isEmpty: Probability = 0.00, Count = 1
( -> nameOrSpec.indexOf: Probability = 0.00, Count = 1
( -> "object: Probability = 0.00, Count = 1
( -> checkFooter: Probability = 0.00, Count = 1
( -> validateFooter: Probability = 0.00, Count = 1
( -> in.getChecksum: Probability = 0.00, Count = 1
( -> "[CODEPAGE]\n": Probability = 0.00, Count = 1
( -> cbuf: Probability = 0.00, Count = 1
( -> cbuf.length,: Probability = 0.00, Count = 1
( -> u.getProtocol: Probability = 0.00, Count = 1
( -> u.getHost: Probability = 0.00, Count = 1
( -> u.getPort: Probability = 0.00, Count = 1
( -> ,null,: Probability = 0.00, Count = 1
( -> Iterator<RecordBase>: Probability = 0.00, Count = 1
( -> .getRecords: Probability = 0.00, Count = 1
( -> version.split: Probability = 0.00, Count = 1
( -> indexCommit.getGeneration: Probability = 0.00, Count = 1
( -> "[FNGROUPCOUNT]\n": Probability = 0.00, Count = 1
( -> getCount: Probability = 0.00, Count = 1
( -> posToF: Probability = 0.00, Count = 1
( -> FieldName[header.length]: Probability = 0.00, Count = 1
( -> header[i]: Probability = 0.00, Count = 1
( -> DocMaker.NAME_FIELD.equals: Probability = 0.00, Count = 1
( -> sfr,: Probability = 0.00, Count = 1
( -> !sfr.isInRange: Probability = 0.00, Count = 1
( -> firstCell.getRow: Probability = 0.00, Count = 1
( -> firstCell.getCol: Probability = 0.00, Count = 1
( -> ctf.setOffset: Probability = 0.00, Count = 1
( -> oldPos: Probability = 0.00, Count = 1
( -> _format.cloneStyleFrom: Probability = 0.00, Count = 1
( -> source._format: Probability = 0.00, Count = 1
( -> source._workbook: Probability = 0.00, Count = 1
( -> Short.MIN_VALUE: Probability = 0.00, Count = 1
( -> getDataFormatStringCache.remove: Probability = 0.00, Count = 1
( -> _workbook.createFormat: Probability = 0.00, Count = 1
( -> source.getDataFormatString: Probability = 0.00, Count = 1
( -> setDataFormat: Probability = 0.00, Count = 1
( -> _workbook.createNewFont: Probability = 0.00, Count = 1
( -> fr.cloneStyleFrom: Probability = 0.00, Count = 1
( -> source._workbook.getFontRecordAt: Probability = 0.00, Count = 1
( -> source.getFontIndexAsInt: Probability = 0.00, Count = 1
( -> inverse.delegate.remove: Probability = 0.00, Count = 1
( -> entry.getValue: Probability = 0.00, Count = 1
( -> "minMergeSize=": Probability = 0.00, Count = 1
( -> urlstr.append: Probability = 0.00, Count = 1
( -> URLEncoder.encode: Probability = 0.00, Count = 1
( -> UTF_8.name: Probability = 0.00, Count = 1
( -> mkdirs: Probability = 0.00, Count = 1
( -> readFirst512: Probability = 0.00, Count = 1
( -> "initial: Probability = 0.00, Count = 1
( -> 0\n": Probability = 0.00, Count = 1
( -> "state: Probability = 0.00, Count = 1
( -> [accept]:\n": Probability = 0.00, Count = 1
( -> [reject]:\n": Probability = 0.00, Count = 1
( -> "[1904]\n": Probability = 0.00, Count = 1
( -> .is1904: Probability = 0.00, Count = 1
( -> builder.add: Probability = 0.00, Count = 1
( -> a: Probability = 0.00, Count = 1
( -> HttpConnection: Probability = 0.00, Count = 1
( -> currentSubtree: Probability = 0.00, Count = 1
( -> 0xFFFF80: Probability = 0.00, Count = 1
( -> "[FtCf: Probability = 0.00, Count = 1
( -> fst: Probability = 0.00, Count = 1
( -> ChartSubstreamRecordAggregate: Probability = 0.00, Count = 1
( -> _bofRec: Probability = 0.00, Count = 1
( -> EOFRecord.class: Probability = 0.00, Count = 1
( -> HeaderFooterRecord.sid: Probability = 0.00, Count = 1
( -> _psBlock.addLateHeaderFooter: Probability = 0.00, Count = 1
( -> "Found: Probability = 0.00, Count = 1
( -> sid:: Probability = 0.00, Count = 1
( -> eof: Probability = 0.00, Count = 2
( -> "<sortedset": Probability = 0.00, Count = 1
( -> getReverse: Probability = 0.00, Count = 1
( -> ICUNormalizer2CharFilterFactory: Probability = 0.00, Count = 1
( -> double: Probability = 0.00, Count = 1
( -> .intValue: Probability = 0.00, Count = 1
( -> "MBD": Probability = 0.00, Count = 1
( -> _root.getEntry: Probability = 0.00, Count = 1
( -> FST<CharsRef>: Probability = 0.00, Count = 1
( -> FST.INPUT_TYPE.BYTE2,: Probability = 0.00, Count = 1
( -> Map.Entry<String,String>: Probability = 0.00, Count = 1
( -> pendingPairs.entrySet: Probability = 0.00, Count = 1
( -> Util.toUTF16: Probability = 0.00, Count = 1
( -> NoDeletionPolicy.class.getName: Probability = 0.00, Count = 1
( -> NoDeletionPolicy.INSTANCE: Probability = 0.00, Count = 1
( -> .numregions: Probability = 0.00, Count = 1
( -> getNumAreas: Probability = 0.00, Count = 1
( -> .rowfrom: Probability = 0.00, Count = 1
( -> "id": Probability = 0.00, Count = 1
( -> Transliterator.getInstance: Probability = 0.00, Count = 1
( -> blocks: Probability = 0.00, Count = 1
( -> base.length: Probability = 0.00, Count = 1
( -> Long.toString: Probability = 0.00, Count = 1
( -> ContinueRecord: Probability = 0.00, Count = 1
( -> "[STRING]\n": Probability = 0.00, Count = 1
( -> "[LeftMargin]\n": Probability = 0.00, Count = 1
( -> "grams: Probability = 0.00, Count = 1
( -> queue.size: Probability = 0.00, Count = 1
( -> .docID: Probability = 0.00, Count = 1
( -> newDoc=": Probability = 0.00, Count = 1
( -> !c.contains: Probability = 0.00, Count = 1
( -> backingMap.subMap: Probability = 0.00, Count = 1
( -> "[DEFAULTROWHEIGHT]\n": Probability = 0.00, Count = 1
( -> .optionflags: Probability = 0.00, Count = 1
( -> getOptionFlags: Probability = 0.00, Count = 1
( -> .rowheight: Probability = 0.00, Count = 1
( -> "[LbsDropData]\n": Probability = 0.00, Count = 1
( -> ._wStyle:: Probability = 0.00, Count = 1
( -> ._cLine:: Probability = 0.00, Count = 1
( -> replacement.isEmpty: Probability = 0.00, Count = 1
( -> "replacement.isEmpty: Probability = 0.00, Count = 1
( -> "[WSBOOL]\n": Probability = 0.00, Count = 1
( -> .wsbool1: Probability = 0.00, Count = 1
( -> .autobreaks: Probability = 0.00, Count = 1
( -> getAutobreaks: Probability = 0.00, Count = 1
( -> Set<String>>: Probability = 0.00, Count = 1
( -> stopWordsPerField.entrySet: Probability = 0.00, Count = 1
( -> allStopWords.add: Probability = 0.00, Count = 1
( -> stat2.countsByTimeStepMSec: Probability = 0.00, Count = 1
( -> toHadoopJarStepConfig: Probability = 0.00, Count = 1
( -> hadoopConfig.put: Probability = 0.00, Count = 1
( -> "mapred.reduce.tasks",: Probability = 0.00, Count = 1
( -> precedence,: Probability = 0.00, Count = 1
( -> boolean: Probability = 0.00, Count = 2
( -> isExternalFunction: Probability = 0.00, Count = 1
( -> _linkPtg: Probability = 0.00, Count = 1
( -> _linkPtg.getSize: Probability = 0.00, Count = 1
( -> linkSize++: Probability = 0.00, Count = 1
( -> _unknownPreFormulaInt: Probability = 0.00, Count = 1
( -> _linkPtg.write: Probability = 0.00, Count = 1
( -> _unknownPostFormulaByte.intValue: Probability = 0.00, Count = 1
( -> _iSel: Probability = 0.00, Count = 1
( -> _rgLines: Probability = 0.00, Count = 1
( -> "[HIDEOBJ]\n": Probability = 0.00, Count = 1
( -> .hideobj: Probability = 0.00, Count = 1
( -> addResult: Probability = 0.00, Count = 1
( -> isRelevant,: Probability = 0.00, Count = 1
( -> numPoints+1: Probability = 0.00, Count = 1
( -> RecallPoint: Probability = 0.00, Count = 1
( -> nr.setColumn: Probability = 0.00, Count = 1
( -> getEntityResolver: Probability = 0.00, Count = 1
( -> putValueForNullKey: Probability = 0.00, Count = 1
( -> .getTree: Probability = 0.00, Count = 1
( -> sorting.size: Probability = 0.00, Count = 1
( -> OptionalWeights: Probability = 0.00, Count = 1
( -> weight=null: Probability = 0.00, Count = 1
( -> label_8:while: Probability = 0.00, Count = 1
( -> floatExc: Probability = 0.00, Count = 2
( -> packFile.getName: Probability = 0.00, Count = 1
( -> .invalidGitType,: Probability = 0.00, Count = 1
( -> visitCellsForRow: Probability = 0.00, Count = 1
( -> "Row: Probability = 0.00, Count = 1
( -> rowCells[i]: Probability = 0.00, Count = 1
( -> "[FOOTER]\n": Probability = 0.00, Count = 1
( -> .footer: Probability = 0.00, Count = 1
( -> ':': Probability = 0.00, Count = 1
( -> container: Probability = 0.00, Count = 1
( -> weightedTerms.length: Probability = 0.00, Count = 1
( -> WeightedTerm: Probability = 0.00, Count = 1
( -> weightedTerms[i].term: Probability = 0.00, Count = 1
( -> "[OBJECTLINK]\n": Probability = 0.00, Count = 1
( -> .anchorId: Probability = 0.00, Count = 1
( -> weightedSpanTerm.positionSensitive: Probability = 0.00, Count = 1
( -> &&!weightedSpanTerm.checkPosition: Probability = 0.00, Count = 1
( -> "Asked: Probability = 0.00, Count = 2
( -> there's: Probability = 0.00, Count = 1
( -> move: Probability = 0.00, Count = 1
( -> +Integer.toHexString: Probability = 0.00, Count = 1
( -> walk: Probability = 0.00, Count = 2
( -> 2:_value: Probability = 0.00, Count = 1
( -> 3:_value: Probability = 0.00, Count = 1
( -> toHexString: Probability = 0.00, Count = 1
( -> i<s.length: Probability = 0.00, Count = 1
( -> "E:": Probability = 0.00, Count = 1
( -> "fieldName: Probability = 0.00, Count = 1
( -> "text: Probability = 0.00, Count = 1
( -> "analyzer: Probability = 0.00, Count = 1
( -> storeTerms: Probability = 0.00, Count = 1
( -> getInfo: Probability = 0.00, Count = 1
( -> stream,analyzer.getPositionIncrementGap: Probability = 0.00, Count = 1
( -> 2: Probability = 0.00, Count = 1
( -> "[USESELFS]\n": Probability = 0.00, Count = 1
( -> LfsText.get: Probability = 0.00, Count = 1
( -> !skipEofCheck: Probability = 0.00, Count = 1
( -> r.decode: Probability = 0.00, Count = 1
( -> r.getEscherRecords: Probability = 0.00, Count = 1
( -> PrintWriter: Probability = 0.00, Count = 2
( -> OutputStreamWriter: Probability = 0.00, Count = 1
( -> System.out.println: Probability = 0.00, Count = 1
( -> EOFException: Probability = 0.00, Count = 1
( -> numBufferedDocs: Probability = 0.00, Count = 1
( -> "[DEFAULTCOLWIDTH]\n": Probability = 0.00, Count = 1
( -> .colwidth: Probability = 0.00, Count = 1
( -> List<DVRecord>: Probability = 0.00, Count = 1
( -> DVRecord.class: Probability = 0.00, Count = 1
( -> isNewline: Probability = 0.00, Count = 1
( -> 0x0A: Probability = 0.00, Count = 1
( -> getDTDHandler: Probability = 0.00, Count = 1
( -> BytesRef": Probability = 0.00, Count = 1
( -> "[PRECISION]\n": Probability = 0.00, Count = 1
( -> .precision: Probability = 0.00, Count = 1
ListSpeechSynthesisTasksRequest -> ListSpeechSynthesisTasksRequest: Probability = 1.00, Count = 1
var -> request: Probability = 1.00, Count = 2707
var -> {: Probability = 0.00, Count = 4
var -> paths.entrySet: Probability = 0.00, Count = 1
options -> ): Probability = 1.00, Count = 2702
{ -> {: Probability = 0.95, Count = 14415
{ -> IOException: Probability = 0.00, Count = 32
{ -> ENCODED_TYPE_TAG: Probability = 0.00, Count = 1
{ -> throws: Probability = 0.00, Count = 46
{ -> (: Probability = 0.03, Count = 385
{ -> assert: Probability = 0.00, Count = 3
{ -> HashMapEntry[]: Probability = 0.00, Count = 1
{ -> ): Probability = 0.00, Count = 71
{ -> null: Probability = 0.00, Count = 10
{ -> new: Probability = 0.00, Count = 9
{ -> dumpArray: Probability = 0.00, Count = 1
{ -> o.equals: Probability = 0.00, Count = 1
{ -> Exception: Probability = 0.00, Count = 5
{ -> e.skip: Probability = 0.00, Count = 2
{ -> return: Probability = 0.00, Count = 39
{ -> super.write: Probability = 0.00, Count = 1
{ -> this: Probability = 0.00, Count = 4
{ -> final: Probability = 0.00, Count = 7
{ -> flush: Probability = 0.00, Count = 4
{ -> Object[]: Probability = 0.00, Count = 1
{ -> _m.invoke: Probability = 0.00, Count = 1
{ -> =: Probability = 0.00, Count = 11
{ -> 0: Probability = 0.00, Count = 7
{ -> int: Probability = 0.00, Count = 2
{ -> s: Probability = 0.00, Count = 4
{ -> out.flush: Probability = 0.00, Count = 1
{ -> for: Probability = 0.00, Count = 2
{ -> if: Probability = 0.00, Count = 17
{ -> long: Probability = 0.00, Count = 3
{ -> a: Probability = 0.00, Count = 4
{ -> ==: Probability = 0.00, Count = 11
{ -> !exact: Probability = 0.00, Count = 1
{ -> "reportAmbiguity: Probability = 0.00, Count = 1
{ -> d=%s:: Probability = 0.00, Count = 1
{ -> ambigAlts=%s,: Probability = 0.00, Count = 1
{ -> input='%s'": Probability = 0.00, Count = 1
{ -> Type.DELETE: Probability = 0.00, Count = 2
{ -> write: Probability = 0.00, Count = 1
{ -> legacyCredential.getAccessKeyId: Probability = 0.00, Count = 1
{ -> legacyCredential.getAccessSecret: Probability = 0.00, Count = 1
{ -> ||: Probability = 0.00, Count = 1
{ -> footerLineKeyChars[c]: Probability = 0.00, Count = 1
{ -> reader.close: Probability = 0.00, Count = 2
{ -> Iterator<Cell>: Probability = 0.00, Count = 2
{ -> mergeThreads: Probability = 0.00, Count = 1
{ -> t.isAlive: Probability = 0.00, Count = 1
{ -> Thread.currentThread: Probability = 0.00, Count = 2
{ -> TYPE_TAG: Probability = 0.00, Count = 1
{ -> id: Probability = 0.00, Count = 1
{ -> version=": Probability = 0.00, Count = 1
{ -> version: Probability = 0.00, Count = 1
{ -> switch: Probability = 0.00, Count = 2
{ -> path: Probability = 0.00, Count = 1
{ -> lock: Probability = 0.00, Count = 2
{ -> snapshot: Probability = 0.00, Count = 1
{ -> delegate: Probability = 0.00, Count = 3
{ -> index: Probability = 0.00, Count = 1
{ -> f: Probability = 0.00, Count = 2
{ -> link: Probability = 0.00, Count = 1
{ -> String.valueOf: Probability = 0.00, Count = 1
{ -> Type.REPLACE: Probability = 0.00, Count = 1
{ -> to.uniformCmd: Probability = 0.00, Count = 1
{ -> accountId: Probability = 0.00, Count = 1
{ -> true: Probability = 0.00, Count = 1
{ -> charWidths.put: Probability = 0.00, Count = 1
{ -> terms.length: Probability = 0.00, Count = 1
{ -> elementData[elementCount: Probability = 0.00, Count = 1
{ -> URI: Probability = 0.00, Count = 2
{ -> uri: Probability = 0.00, Count = 2
{ -> value.length: Probability = 0.00, Count = 1
{ -> text: Probability = 0.00, Count = 1
{ -> else: Probability = 0.00, Count = 1
{ -> Locale.ROOT,"time=%.2f: Probability = 0.00, Count = 1
{ -> sec.: Probability = 0.00, Count = 1
{ -> reading,: Probability = 0.00, Count = 1
{ -> sorting,: Probability = 0.00, Count = 1
{ -> merging: Probability = 0.00, Count = 1
{ -> lines=%d,: Probability = 0.00, Count = 1
{ -> sentenceSplitter: Probability = 0.00, Count = 1
{ -> sentenceSplitter.sentPosDetect: Probability = 0.00, Count = 1
{ -> <=: Probability = 0.00, Count = 1
InvokeOptions -> request: Probability = 1.00, Count = 2702
= -> =: Probability = 0.91, Count = 11769
= -> ): Probability = 0.02, Count = 311
= -> (: Probability = 0.03, Count = 363
= -> return: Probability = 0.00, Count = 18
= -> ;: Probability = 0.01, Count = 80
= -> sdp.snapshot: Probability = 0.00, Count = 1
= -> this.version: Probability = 0.00, Count = 3
= -> ris.readLong: Probability = 0.00, Count = 2
= -> Formula.read: Probability = 0.00, Count = 1
= -> lowerCaseStr: Probability = 0.00, Count = 2
= -> s.toLowerCase: Probability = 0.00, Count = 2
= -> entry.entityName: Probability = 0.00, Count = 1
= -> _height: Probability = 0.00, Count = 1
= -> field_1_blipTypeWin32: Probability = 0.00, Count = 1
= -> data[pos]: Probability = 0.00, Count = 1
= -> field_2_blipTypeMacOS: Probability = 0.00, Count = 1
= -> int[: Probability = 0.00, Count = 2
= -> blocks[index]: Probability = 0.00, Count = 2
= -> this.synonyms: Probability = 0.00, Count = 1
= -> synonyms.fst: Probability = 0.00, Count = 1
= -> "fst: Probability = 0.00, Count = 1
= -> other.channel: Probability = 0.00, Count = 1
= -> other.bufferSize: Probability = 0.00, Count = 1
= -> ByteBuffer.allocateDirect: Probability = 0.00, Count = 1
= -> -bufferSize: Probability = 0.00, Count = 1
= -> IOUtils.safelyAllocate: Probability = 0.00, Count = 3
= -> terms: Probability = 0.00, Count = 4
= -> Term[this.terms.size: Probability = 0.00, Count = 1
= -> positions: Probability = 0.00, Count = 1
= -> for: Probability = 0.00, Count = 1
= -> this.inserter: Probability = 0.00, Count = 1
= -> db.newObjectInserter: Probability = 0.00, Count = 1
= -> this.noteMerger: Probability = 0.00, Count = 1
= -> noteMerger: Probability = 0.00, Count = 1
= -> this.positions: Probability = 0.00, Count = 1
= -> 0: Probability = 0.00, Count = 3
= -> this.startOffset: Probability = 0.00, Count = 1
= -> this.endOffset: Probability = 0.00, Count = 1
= -> queryShape.getBoundingBox: Probability = 0.00, Count = 1
= -> other.nextWriteDocValuesGen: Probability = 0.00, Count = 1
= -> field_5_num_refs: Probability = 0.00, Count = 1
= -> SMALL_RECORD_SIZE: Probability = 0.00, Count = 1
= -> indexFileName: Probability = 0.00, Count = 1
= -> TERMS_INDEX_EXTENSION: Probability = 0.00, Count = 1
= -> indexFileName,: Probability = 0.00, Count = 1
= -> oldToken.getType: Probability = 0.00, Count = 1
= -> line: Probability = 0.00, Count = 3
= -> oldToken.getLine: Probability = 0.00, Count = 1
= -> oldToken.getTokenIndex: Probability = 0.00, Count = 1
= -> charPositionInLine: Probability = 0.00, Count = 1
= -> oldToken.getCharPositionInLine: Probability = 0.00, Count = 1
= -> channel: Probability = 0.00, Count = 1
= -> oldToken.getChannel: Probability = 0.00, Count = 1
= -> oldToken.getStartIndex: Probability = 0.00, Count = 1
= -> oldToken.getStopIndex: Probability = 0.00, Count = 1
= -> oldToken.getTokenSource: Probability = 0.00, Count = 1
= -> this.termsIndexWriter: Probability = 0.00, Count = 1
= -> termsIndexWriter: Probability = 0.00, Count = 1
= -> termsFileName,: Probability = 0.00, Count = 3
= -> this.context: Probability = 0.00, Count = 1
= -> docData.setID: Probability = 0.00, Count = 1
= -> docData.setName: Probability = 0.00, Count = 1
= -> latitude: Probability = 0.00, Count = 1
= -> this.predicate: Probability = 0.00, Count = 1
= -> rgchDefListStyle: Probability = 0.00, Count = 1
= -> cell.getCellStyle: Probability = 0.00, Count = 1
= -> startIndex: Probability = 0.00, Count = 1
= -> termsSet.size: Probability = 0.00, Count = 1
= -> this.field: Probability = 0.00, Count = 1
= -> this.termArrays: Probability = 0.00, Count = 2
= -> iwc: Probability = 0.00, Count = 1
= -> sheetName.getSheetIdentifier: Probability = 0.00, Count = 1
= -> _grbit1: Probability = 0.00, Count = 1
= -> _grbit2: Probability = 0.00, Count = 1
= -> _citmShow: Probability = 0.00, Count = 1
= -> _reserved2: Probability = 0.00, Count = 2
= -> _reserved1: Probability = 0.00, Count = 1
= -> this.end: Probability = 0.00, Count = 1
= -> pool.buffers[bufferUpto]: Probability = 0.00, Count = 3
= -> String[n]: Probability = 0.00, Count = 1
= -> target: Probability = 0.00, Count = 2
= -> _data]: Probability = 0.00, Count = 1
= -> setComplexData: Probability = 0.00, Count = 1
= -> setAllocatedStorage: Probability = 0.00, Count = 1
= -> allocatedStorage: Probability = 0.00, Count = 1
= -> setDBInstanceClass: Probability = 0.00, Count = 1
= -> dBInstanceClass: Probability = 0.00, Count = 1
= -> setEngine: Probability = 0.00, Count = 1
= -> setMasterUsername: Probability = 0.00, Count = 1
= -> masterUsername: Probability = 0.00, Count = 1
= -> ]: Probability = 0.00, Count = 2
= -> previous.parent: Probability = 0.00, Count = 1
= -> previous.invokingState: Probability = 0.00, Count = 1
= -> previous.stop: Probability = 0.00, Count = 1
= -> source.field_1_font_height: Probability = 0.00, Count = 1
= -> source.field_2_attributes: Probability = 0.00, Count = 1
= -> field_3_color_palette_index: Probability = 0.00, Count = 2
= -> source.field_3_color_palette_index: Probability = 0.00, Count = 1
= -> field_4_bold_weight: Probability = 0.00, Count = 2
= -> source.field_4_bold_weight: Probability = 0.00, Count = 1
= -> field_5_super_sub_script: Probability = 0.00, Count = 2
= -> source.field_5_super_sub_script: Probability = 0.00, Count = 1
= -> field_6_underline: Probability = 0.00, Count = 2
= -> source.field_6_underline: Probability = 0.00, Count = 1
= -> field_7_family: Probability = 0.00, Count = 2
= -> source.field_7_family: Probability = 0.00, Count = 1
= -> field_8_charset: Probability = 0.00, Count = 2
= -> source.field_8_charset: Probability = 0.00, Count = 1
= -> source.field_9_zero: Probability = 0.00, Count = 1
= -> _ddeValues: Probability = 0.00, Count = 1
= -> formulaLen: Probability = 0.00, Count = 1
= -> AnimationUtils.currentAnimationTimeMillis: Probability = 0.00, Count = 1
= -> PULL_GLOW_BEGIN: Probability = 0.00, Count = 1
= -> PULL_TIME: Probability = 0.00, Count = 1
= -> distance: Probability = 0.00, Count = 1
= -> Math.abs: Probability = 0.00, Count = 3
= -> mEdgeAlpha: Probability = 0.00, Count = 3
= -> mEdgeAlphaStart: Probability = 0.00, Count = 2
= -> PULL_EDGE_BEGIN,: Probability = 0.00, Count = 1
= -> distance,: Probability = 0.00, Count = 1
= -> MAX_ALPHA: Probability = 0.00, Count = 1
= -> mEdgeScaleY: Probability = 0.00, Count = 3
= -> mEdgeScaleYStart: Probability = 0.00, Count = 2
= -> HELD_EDGE_SCALE_Y,: Probability = 0.00, Count = 1
= -> PULL_DISTANCE_EDGE_FACTOR,: Probability = 0.00, Count = 1
= -> 1.f: Probability = 0.00, Count = 1
= -> mGlowAlphaStart: Probability = 0.00, Count = 2
= -> MAX_ALPHA,mGlowAlpha: Probability = 0.00, Count = 1
= -> PULL_DISTANCE_ALPHA_GLOW_FACTOR: Probability = 0.00, Count = 1
= -> -glowChange: Probability = 0.00, Count = 1
= -> mGlowScaleYStart: Probability = 0.00, Count = 2
= -> MAX_GLOW_HEIGHT,: Probability = 0.00, Count = 1
= -> PULL_DISTANCE_GLOW_FACTOR: Probability = 0.00, Count = 1
= -> mEdgeAlphaFinish: Probability = 0.00, Count = 2
= -> mEdgeScaleYFinish: Probability = 0.00, Count = 1
= -> mGlowAlphaFinish: Probability = 0.00, Count = 1
= -> mGlowScaleYFinish: Probability = 0.00, Count = 1
= -> subs: Probability = 0.00, Count = 1
= -> ArrayList<>: Probability = 0.00, Count = 3
= -> short[: Probability = 0.00, Count = 2
= -> maxScan: Probability = 0.00, Count = 1
= -> scratchInts: Probability = 0.00, Count = 1
= -> PositiveIntOutputs: Probability = 0.00, Count = 1
= -> PositiveIntOutputs.getSingleton: Probability = 0.00, Count = 3
= -> fstCompiler: Probability = 0.00, Count = 3
= -> FSTCompiler<>: Probability = 0.00, Count = 2
= -> FST.INPUT_TYPE.BYTE1,: Probability = 0.00, Count = 1
= -> term.bytes: Probability = 0.00, Count = 1
= -> buffers[textStart: Probability = 0.00, Count = 1
= -> fields.put: Probability = 0.00, Count = 2
= -> CharStream>: Probability = 0.00, Count = 1
= -> source.a: Probability = 0.00, Count = 1
= -> this.line: Probability = 0.00, Count = 1
= -> source.a.getLine: Probability = 0.00, Count = 1
= -> this.escape: Probability = 0.00, Count = 2
= -> other.target: Probability = 0.00, Count = 1
= -> other.flags: Probability = 0.00, Count = 1
= -> other.output: Probability = 0.00, Count = 1
= -> other.nextFinalOutput: Probability = 0.00, Count = 1
= -> nextArc: Probability = 0.00, Count = 1
= -> other.nextArc: Probability = 0.00, Count = 1
= -> nodeFlags: Probability = 0.00, Count = 2
= -> other.nodeFlags: Probability = 0.00, Count = 1
= -> other.bytesPerArc: Probability = 0.00, Count = 1
= -> posArcsStart: Probability = 0.00, Count = 1
= -> other.posArcsStart: Probability = 0.00, Count = 1
= -> other.arcIdx: Probability = 0.00, Count = 1
= -> other.numArcs: Probability = 0.00, Count = 1
= -> ARCS_FOR_DIRECT_ADDRESSING: Probability = 0.00, Count = 1
= -> bitTable: Probability = 0.00, Count = 1
= -> other.bitTable: Probability = 0.00, Count = 2
= -> .copy: Probability = 0.00, Count = 3
= -> frac.bitLength: Probability = 0.00, Count = 1
= -> frac.shiftLeft: Probability = 0.00, Count = 1
= -> id: Probability = 0.00, Count = 1
= -> utf32.getNumStates: Probability = 0.00, Count = 1
= -> List<Integer>: Probability = 0.00, Count = 1
= -> Object[]: Probability = 0.00, Count = 2
= -> byteOrder1: Probability = 0.00, Count = 1
= -> classID1: Probability = 0.00, Count = 1
= -> ps.getClassID: Probability = 0.00, Count = 1
= -> classID2: Probability = 0.00, Count = 2
= -> format1: Probability = 0.00, Count = 1
= -> ps.getFormat: Probability = 0.00, Count = 1
= -> osVersion1: Probability = 0.00, Count = 1
= -> ps.getOSVersion: Probability = 0.00, Count = 1
= -> source.field_2_format_index: Probability = 0.00, Count = 1
= -> source.field_3_cell_options: Probability = 0.00, Count = 1
= -> source.field_4_alignment_options: Probability = 0.00, Count = 1
= -> source.field_5_indention_options: Probability = 0.00, Count = 1
= -> source.field_6_border_options: Probability = 0.00, Count = 1
= -> source.field_7_palette_options: Probability = 0.00, Count = 1
= -> key[1]: Probability = 0.00, Count = 1
= -> this.in: Probability = 0.00, Count = 1
= -> {: Probability = 0.00, Count = 1
= -> runData.getConfig: Probability = 0.00, Count = 1
= -> this.maxDepthLogStart: Probability = 0.00, Count = 1
= -> "task.max.depth.log",0: Probability = 0.00, Count = 1
= -> "log.step": Probability = 0.00, Count = 1
= -> "log.step.": Probability = 0.00, Count = 1
= -> as: Probability = 0.00, Count = 1
= -> this.reuseFields: Probability = 0.00, Count = 1
= -> numericFields: Probability = 0.00, Count = 2
= -> LongPoint: Probability = 0.00, Count = 1
= -> IntPoint: Probability = 0.00, Count = 1
= -> this.channel: Probability = 0.00, Count = 1
= -> IOException,: Probability = 0.00, Count = 1
= -> LineNumberReader: Probability = 0.00, Count = 2
= -> synset[]: Probability = 0.00, Count = 1
= -> CharsRef[8]: Probability = 0.00, Count = 1
= -> _startIndex: Probability = 0.00, Count = 1
= -> createSpContainer: Probability = 0.00, Count = 1
= -> zzEOFDone: Probability = 0.00, Count = 2
= -> zzEndRead: Probability = 0.00, Count = 2
= -> zzStartRead: Probability = 0.00, Count = 2
= -> zzCurrentPos: Probability = 0.00, Count = 2
= -> zzFinalHighSurrogate: Probability = 0.00, Count = 2
= -> yyline: Probability = 0.00, Count = 2
= -> yychar: Probability = 0.00, Count = 2
= -> yycolumn: Probability = 0.00, Count = 2
= -> this.getName: Probability = 0.00, Count = 1
= -> textSize: Probability = 0.00, Count = 2
= -> this: Probability = 0.00, Count = 2
= -> docFreq: Probability = 0.00, Count = 1
= -> mValues[pos]: Probability = 0.00, Count = 2
= -> this.topRow: Probability = 0.00, Count = 1
= -> shouldProtectScenarios: Probability = 0.00, Count = 2
= -> prec: Probability = 0.00, Count = 1
= -> getProtect: Probability = 0.00, Count = 1
= -> prec.setProtect: Probability = 0.00, Count = 1
= -> pass.setPassword: Probability = 0.00, Count = 1
= -> shouldProtectObjects: Probability = 0.00, Count = 1
= -> createObjectProtect: Probability = 0.00, Count = 1
= -> rec.setProtect: Probability = 0.00, Count = 1
= -> createScenarioProtect: Probability = 0.00, Count = 1
= -> srec.setProtect: Probability = 0.00, Count = 1
= -> this.dedup: Probability = 0.00, Count = 1
= -> Stemmer: Probability = 0.00, Count = 1
= -> MultiTerms: Probability = 0.00, Count = 1
= -> true: Probability = 0.00, Count = 1
= -> this.storeTermVectors: Probability = 0.00, Count = 1
= -> ref.storeTermVectors: Probability = 0.00, Count = 1
= -> this.storeTermVectorOffsets: Probability = 0.00, Count = 1
= -> ref.storeTermVectorOffsets: Probability = 0.00, Count = 1
= -> this.storeTermVectorPositions: Probability = 0.00, Count = 1
= -> ref.storeTermVectorPositions: Probability = 0.00, Count = 1
= -> this.storeTermVectorPayloads: Probability = 0.00, Count = 1
= -> ref.storeTermVectorPayloads: Probability = 0.00, Count = 1
= -> this.omitNorms: Probability = 0.00, Count = 1
= -> ref.omitNorms: Probability = 0.00, Count = 1
= -> this.indexOptions: Probability = 0.00, Count = 1
= -> ref.indexOptions: Probability = 0.00, Count = 1
= -> this.docValuesType: Probability = 0.00, Count = 1
= -> ref.docValuesType: Probability = 0.00, Count = 1
= -> this.dimensionCount: Probability = 0.00, Count = 1
= -> ref.pointDimensionCount: Probability = 0.00, Count = 1
= -> this.indexDimensionCount: Probability = 0.00, Count = 1
= -> ref.pointIndexDimensionCount: Probability = 0.00, Count = 1
= -> this.dimensionNumBytes: Probability = 0.00, Count = 1
= -> ref.pointNumBytes: Probability = 0.00, Count = 1
= -> this.attributes: Probability = 0.00, Count = 1
= -> HashMap<>: Probability = 0.00, Count = 2
= -> pos: Probability = 0.00, Count = 1
= -> sfr.getLastColumn: Probability = 0.00, Count = 1
= -> sfr.getFirstColumn: Probability = 0.00, Count = 1
= -> sfr.getLastRow: Probability = 0.00, Count = 1
= -> sfr.getFirstRow: Probability = 0.00, Count = 1
= -> this.indexWriter: Probability = 0.00, Count = 1
= -> indexWriter: Probability = 0.00, Count = 1
= -> this.taxoWriter: Probability = 0.00, Count = 1
= -> this.indexSDP: Probability = 0.00, Count = 1
= -> this.taxoSDP: Probability = 0.00, Count = 1
= -> taxoWriter.getDeletionPolicy: Probability = 0.00, Count = 1
= -> this.indexCommit: Probability = 0.00, Count = 1
= -> indexSDP.snapshot: Probability = 0.00, Count = 1
= -> this.taxoCommit: Probability = 0.00, Count = 1
= -> taxoSDP.snapshot: Probability = 0.00, Count = 1
= -> _string.getFormatRunCount: Probability = 0.00, Count = 1
= -> posIncAtt: Probability = 0.00, Count = 1
= -> formulaTokenLen: Probability = 0.00, Count = 1
= -> ClassID: Probability = 0.00, Count = 1
= -> subDocs: Probability = 0.00, Count = 1
= -> Objects.requireNonNull: Probability = 0.00, Count = 1
= -> ExtSSTRecord.getNumberOfInfoRecsForStrings: Probability = 0.00, Count = 1
= -> IntsRefBuilder: Probability = 0.00, Count = 2
= -> this.fieldInfos: Probability = 0.00, Count = 1
= -> this.out: Probability = 0.00, Count = 1
= -> this.mainThread: Probability = 0.00, Count = 1
= -> QuadPrefixTree: Probability = 0.00, Count = 1
= -> this.xmin: Probability = 0.00, Count = 1
= -> this.xmax: Probability = 0.00, Count = 1
= -> bounds.getMaxX: Probability = 0.00, Count = 1
= -> this.ymin: Probability = 0.00, Count = 1
= -> bounds.getMinY: Probability = 0.00, Count = 1
= -> this.ymax: Probability = 0.00, Count = 1
= -> bounds.getMaxY: Probability = 0.00, Count = 1
= -> levelW: Probability = 0.00, Count = 1
= -> levelH: Probability = 0.00, Count = 1
= -> gridW: Probability = 0.00, Count = 1
= -> xmax: Probability = 0.00, Count = 1
= -> levelW[0]: Probability = 0.00, Count = 1
= -> levelH[0]: Probability = 0.00, Count = 1
= -> _channel: Probability = 0.00, Count = 1
= -> Token.DEFAULT_CHANNEL: Probability = 0.00, Count = 1
= -> _tokenStartCharIndex: Probability = 0.00, Count = 1
= -> _tokenStartLine: Probability = 0.00, Count = 1
= -> precedenceState.edges: Probability = 0.00, Count = 1
= -> DFAState[0]: Probability = 0.00, Count = 1
= -> precedenceState.isAcceptState: Probability = 0.00, Count = 1
= -> precedenceState.requiresFullContext: Probability = 0.00, Count = 1
= -> this.s0: Probability = 0.00, Count = 1
= -> this.precedenceDfa: Probability = 0.00, Count = 1
= -> nCRNs: Probability = 0.00, Count = 1
= -> _countRecord.getNumberOfCRNs: Probability = 0.00, Count = 1
= -> ArrayList<Integer>: Probability = 0.00, Count = 1
options.RequestMarshaller -> beforeClientExecution: Probability = 0.50, Count = 2702
options.RequestMarshaller -> request: Probability = 0.50, Count = 2686
; -> ): Probability = 0.10, Count = 3252
; -> ;: Probability = 0.86, Count = 28707
; -> return: Probability = 0.00, Count = 68
; -> byte[resultLength]: Probability = 0.00, Count = 1
; -> this.transpositions: Probability = 0.00, Count = 1
; -> this.maxExpansions: Probability = 0.00, Count = 1
; -> codePoints: Probability = 0.00, Count = 1
; -> FuzzyTermsEnum.stringToUTF32: Probability = 0.00, Count = 1
; -> term.text: Probability = 0.00, Count = 2
; -> this.termLength: Probability = 0.00, Count = 1
; -> codePoints.length: Probability = 0.00, Count = 1
; -> FuzzyTermsEnum.buildAutomata: Probability = 0.00, Count = 1
; -> codePoints,: Probability = 0.00, Count = 1
; -> transpositions,: Probability = 0.00, Count = 1
; -> setRewriteMethod: Probability = 0.00, Count = 1
; -> cell.getNumericCellValue: Probability = 0.00, Count = 2
; -> }: Probability = 0.00, Count = 97
; -> rowCells[col]!=null: Probability = 0.00, Count = 1
; -> this.writer: Probability = 0.00, Count = 1
; -> this.sdp: Probability = 0.00, Count = 1
; -> this.commit: Probability = 0.00, Count = 1
; -> Collections.addAll: Probability = 0.00, Count = 2
; -> ebr: Probability = 0.00, Count = 3
; -> _externalBookBlocks[i].getExternalBookRecord: Probability = 0.00, Count = 2
; -> ebr.isInternalReferences: Probability = 0.00, Count = 1
; -> 'internal: Probability = 0.00, Count = 1
; -> references': Probability = 0.00, Count = 1
; -> EXTERNALBOOK": Probability = 0.00, Count = 1
; -> 'é':case: Probability = 0.00, Count = 1
; -> 'ê':: Probability = 0.00, Count = 1
; -> 'í':: Probability = 0.00, Count = 1
; -> 'ó':: Probability = 0.00, Count = 1
; -> 'ú':: Probability = 0.00, Count = 1
; -> 1: Probability = 0.00, Count = 4
; -> name.length: Probability = 0.00, Count = 1
; -> =: Probability = 0.00, Count = 19
; -> this.shareMaxTailLength: Probability = 0.00, Count = 1
; -> .getString: Probability = 0.00, Count = 2
; -> unicodeMappings: Probability = 0.00, Count = 2
; -> lowerCaseStr.contains: Probability = 0.00, Count = 2
; -> s.replaceAll: Probability = 0.00, Count = 2
; -> si++: Probability = 0.00, Count = 1
; -> longArray.length: Probability = 0.00, Count = 1
; -> HashtableEntry[]: Probability = 0.00, Count = 1
; -> HashtableEntry: Probability = 0.00, Count = 1
; -> size--: Probability = 0.00, Count = 3
; -> postRemove: Probability = 0.00, Count = 1
; -> inquote: Probability = 0.00, Count = 2
; -> byte[ie: Probability = 0.00, Count = 1
; -> ip]: Probability = 0.00, Count = 1
; -> rPtr: Probability = 0.00, Count = 2
; -> ip: Probability = 0.00, Count = 2
; -> '\\':if: Probability = 0.00, Count = 1
; -> r[rPtr++]: Probability = 0.00, Count = 1
; -> elser[rPtr++]: Probability = 0.00, Count = 1
; -> default:r[rPtr++]: Probability = 0.00, Count = 1
; -> field_3_uid,: Probability = 0.00, Count = 1
; -> r: Probability = 0.00, Count = 3
; -> allocator.getIntBlock: Probability = 0.00, Count = 1
; -> _firstCell.getSheetName: Probability = 0.00, Count = 1
; -> List<CellReference>: Probability = 0.00, Count = 1
; -> row=minRow: Probability = 0.00, Count = 1
; -> row<=maxRow: Probability = 0.00, Count = 1
; -> row++: Probability = 0.00, Count = 2
; -> col=minCol: Probability = 0.00, Count = 1
; -> col<=maxCol: Probability = 0.00, Count = 1
; -> res.length: Probability = 0.00, Count = 1
; -> segmentName: Probability = 0.00, Count = 3
; -> _nRows: Probability = 0.00, Count = 3
; -> y++: Probability = 0.00, Count = 1
; -> _nColumns: Probability = 0.00, Count = 3
; -> _arrayValues[getValueIndex: Probability = 0.00, Count = 2
; -> inSection: Probability = 0.00, Count = 2
; -> stream.read: Probability = 0.00, Count = 2
; -> '[':inSection: Probability = 0.00, Count = 1
; -> '\n':case: Probability = 0.00, Count = 1
; -> '\r':inSection: Probability = 0.00, Count = 1
; -> ']':inSection: Probability = 0.00, Count = 1
; -> stream.close: Probability = 0.00, Count = 1
; -> "Section: Probability = 0.00, Count = 1
; -> byte[length]: Probability = 0.00, Count = 1
; -> pos--: Probability = 0.00, Count = 1
; -> OR:: Probability = 0.00, Count = 2
; -> default:jj_la1[3]: Probability = 0.00, Count = 2
; -> label_2: Probability = 0.00, Count = 2
; -> 34: Probability = 0.00, Count = 4
; -> "PolicyArn",: Probability = 0.00, Count = 1
; -> result.fragment: Probability = 0.00, Count = 1
; -> relative.fragment: Probability = 0.00, Count = 1
; -> result.query: Probability = 0.00, Count = 1
; -> relative.query: Probability = 0.00, Count = 1
; -> relativePath.substring: Probability = 0.00, Count = 1
; -> thisPath.length: Probability = 0.00, Count = 1
; -> k: Probability = 0.00, Count = 1
; -> result: Probability = 0.00, Count = 3
; -> int[delta: Probability = 0.00, Count = 1
; -> trace[delta]: Probability = 0.00, Count = 1
; -> trace[0]: Probability = 0.00, Count = 1
; -> false: Probability = 0.00, Count = 5
; -> setTrace: Probability = 0.00, Count = 1
; -> _precedenceStack.clear: Probability = 0.00, Count = 1
; -> getInterpreter: Probability = 0.00, Count = 2
; -> active.size: Probability = 0.00, Count = 1
; -> active.get: Probability = 0.00, Count = 1
; -> active.remove: Probability = 0.00, Count = 1
; -> ellipsis: Probability = 0.00, Count = 1
; -> preTag: Probability = 0.00, Count = 1
; -> postTag: Probability = 0.00, Count = 1
; -> text.charAt: Probability = 0.00, Count = 2
; -> this.fieldsData: Probability = 0.00, Count = 2
; -> freeByteBlocks.length: Probability = 0.00, Count = 1
; -> newBlocks: Probability = 0.00, Count = 2
; -> size,RamUsageEstimator.NUM_BYTES_OBJECT_REF: Probability = 0.00, Count = 1
; -> freeByteBlocks,: Probability = 0.00, Count = 1
; -> newBlocks,: Probability = 0.00, Count = 1
; -> freeByteBlocks[freeBlocks++]: Probability = 0.00, Count = 1
; -> bytesUsed.get: Probability = 0.00, Count = 2
; -> a.returnState,: Probability = 0.00, Count = 1
; -> caseOf: Probability = 0.00, Count = 1
; -> UPPER_CASE: Probability = 0.00, Count = 1
; -> caseFoldTitle: Probability = 0.00, Count = 1
; -> titleBuffer,: Probability = 0.00, Count = 2
; -> ++i,: Probability = 0.00, Count = 2
; -> ++o: Probability = 0.00, Count = 2
; -> boolean[resultLength]: Probability = 0.00, Count = 1
; -> sorter.add: Probability = 0.00, Count = 1
; -> Short.BYTES: Probability = 0.00, Count = 1
; -> non-null": Probability = 0.00, Count = 1
; -> this.fstReader: Probability = 0.00, Count = 1
; -> rollBufferSize: Probability = 0.00, Count = 1
; -> 1+synonyms.maxHorizontalContext: Probability = 0.00, Count = 1
; -> futureInputs: Probability = 0.00, Count = 1
; -> PendingInput[rollBufferSize]: Probability = 0.00, Count = 1
; -> futureOutputs: Probability = 0.00, Count = 1
; -> PendingOutputs[rollBufferSize]: Probability = 0.00, Count = 1
; -> pos=0: Probability = 0.00, Count = 2
; -> pos<rollBufferSize: Probability = 0.00, Count = 1
; -> futureInputs[pos]: Probability = 0.00, Count = 1
; -> PendingInput: Probability = 0.00, Count = 1
; -> futureOutputs[pos]: Probability = 0.00, Count = 1
; -> scratchArc: Probability = 0.00, Count = 1
; -> FST.Arc<>: Probability = 0.00, Count = 1
; -> ]: Probability = 0.00, Count = 7
; -> e1: Probability = 0.00, Count = 2
; -> ds: Probability = 0.00, Count = 2
; -> ValueCollector.collectValues: Probability = 0.00, Count = 2
; -> shardHits[second.shardIndex][second.hitIndex]: Probability = 0.00, Count = 2
; -> compIDX=0: Probability = 0.00, Count = 1
; -> compIDX<comparators.length: Probability = 0.00, Count = 1
; -> compIDX++: Probability = 0.00, Count = 1
; -> FieldComparator: Probability = 0.00, Count = 1
; -> comp: Probability = 0.00, Count = 1
; -> comparators[compIDX]: Probability = 0.00, Count = 1
; -> reverseMul[compIDX]: Probability = 0.00, Count = 1
; -> comp.compareValues: Probability = 0.00, Count = 1
; -> firstFD.fields[compIDX],: Probability = 0.00, Count = 1
; -> secondFD.fields[compIDX]: Probability = 0.00, Count = 1
; -> j--: Probability = 0.00, Count = 3
; -> orows.get: Probability = 0.00, Count = 3
; -> remap[j]: Probability = 0.00, Count = 3
; -> this.fis: Probability = 0.00, Count = 1
; -> isClone: Probability = 0.00, Count = 1
; -> other.getFilePointer: Probability = 0.00, Count = 1
; -> MAX_RECORD_LENGTH: Probability = 0.00, Count = 4
; -> positions.length: Probability = 0.00, Count = 1
; -> positions[i]: Probability = 0.00, Count = 1
; -> this.positions.get: Probability = 0.00, Count = 2
; -> positions: Probability = 0.00, Count = 1
; -> ~i: Probability = 0.00, Count = 2
; -> line.charAt: Probability = 0.00, Count = 2
; -> QUOTE: Probability = 0.00, Count = 2
; -> quoteCount++: Probability = 0.00, Count = 2
; -> sb.setLength: Probability = 0.00, Count = 3
; -> included: Probability = 0.00, Count = 2
; -> continue: Probability = 0.00, Count = 1
; -> next: Probability = 0.00, Count = 1
; -> 3: Probability = 0.00, Count = 1
; -> -count*blockSize: Probability = 0.00, Count = 1
; -> plainText.length: Probability = 0.00, Count = 2
; -> index=0: Probability = 0.00, Count = 1
; -> index<plainText.length: Probability = 0.00, Count = 1
; -> index++: Probability = 0.00, Count = 5
; -> plainText.charAt: Probability = 0.00, Count = 1
; -> '"':result.append: Probability = 0.00, Count = 1
; -> "&quot: Probability = 0.00, Count = 1
; -> '&':result.append: Probability = 0.00, Count = 1
; -> "&amp: Probability = 0.00, Count = 1
; -> '<':result.append: Probability = 0.00, Count = 1
; -> "&lt: Probability = 0.00, Count = 1
; -> '>':result.append: Probability = 0.00, Count = 1
; -> "&gt: Probability = 0.00, Count = 1
; -> '\'':result.append: Probability = 0.00, Count = 1
; -> "&#x27: Probability = 0.00, Count = 1
; -> '/':result.append: Probability = 0.00, Count = 1
; -> "&#x2F: Probability = 0.00, Count = 1
; -> default:result.append: Probability = 0.00, Count = 1
; -> boolean[24]: Probability = 0.00, Count = 3
; -> s.serialize: Probability = 0.00, Count = 1
; -> byte[LittleEndian.INT_SIZE]: Probability = 0.00, Count = 1
; -> i<block._values.length: Probability = 0.00, Count = 1
; -> data.get: Probability = 0.00, Count = 1
; -> block._values[i]: Probability = 0.00, Count = 1
; -> block.recomputeFree: Probability = 0.00, Count = 1
; -> DateUtil.getJavaDate: Probability = 0.00, Count = 2
; -> Calendar.MILLISECOND: Probability = 0.00, Count = 3
; -> '\'':case: Probability = 0.00, Count = 1
; -> '!':r.append: Probability = 0.00, Count = 1
; -> null: Probability = 0.00, Count = 1
; -> FontFormatting: Probability = 0.00, Count = 1
; -> setFontHeight: Probability = 0.00, Count = 1
; -> setItalic: Probability = 0.00, Count = 1
; -> setFontWieghtModified: Probability = 0.00, Count = 1
; -> setOutline: Probability = 0.00, Count = 1
; -> setShadow: Probability = 0.00, Count = 1
; -> setStrikeout: Probability = 0.00, Count = 1
; -> setEscapementType: Probability = 0.00, Count = 1
; -> setUnderlineType: Probability = 0.00, Count = 1
; -> setFontColorIndex: Probability = 0.00, Count = 1
; -> setFontStyleModified: Probability = 0.00, Count = 1
; -> setFontOutlineModified: Probability = 0.00, Count = 1
; -> setFontShadowModified: Probability = 0.00, Count = 1
; -> setFontCancellationModified: Probability = 0.00, Count = 1
; -> setEscapementTypeModified: Probability = 0.00, Count = 1
; -> setUnderlineTypeModified: Probability = 0.00, Count = 1
; -> OFFSET_FONT_FORMATING_END,: Probability = 0.00, Count = 1
; -> 0x0001: Probability = 0.00, Count = 2
; -> values: Probability = 0.00, Count = 1
; -> AND:: Probability = 0.00, Count = 2
; -> default:jj_la1[1]: Probability = 0.00, Count = 2
; -> label_3: Probability = 0.00, Count = 2
; -> MAX_VALUE: Probability = 0.00, Count = 1
; -> Integer.MAX_VALUE,: Probability = 0.00, Count = 2
; -> true: Probability = 0.00, Count = 2
; -> byte[blockSize]: Probability = 0.00, Count = 4
; -> doClose: Probability = 0.00, Count = 1
; -> 0: Probability = 0.00, Count = 4
; -> r_endings: Probability = 0.00, Count = 1
; -> r_respell: Probability = 0.00, Count = 1
; -> IntervalSet[s.getNumberOfTransitions: Probability = 0.00, Count = 1
; -> s.getNumberOfTransitions: Probability = 0.00, Count = 1
; -> alt++: Probability = 0.00, Count = 1
; -> Set<ATNConfig>: Probability = 0.00, Count = 1
; -> lookBusy: Probability = 0.00, Count = 1
; -> "\\t": Probability = 0.00, Count = 3
; -> "\\n": Probability = 0.00, Count = 3
; -> values[0]: Probability = 0.00, Count = 1
; -> values[k]: Probability = 0.00, Count = 1
; -> *=: Probability = 0.00, Count = 1
; -> Character.codePointAt: Probability = 0.00, Count = 1
; -> scratch.setLength: Probability = 0.00, Count = 2
; -> this.maxTokenPosition: Probability = 0.00, Count = 1
; -> result.setFirstCol: Probability = 0.00, Count = 1
; -> short: Probability = 0.00, Count = 1
; -> newReader.decRef: Probability = 0.00, Count = 1
; -> in.readVInt: Probability = 0.00, Count = 4
; -> extra: Probability = 0.00, Count = 1
; -> spec.charAt: Probability = 0.00, Count = 1
; -> nextWriteDocValuesGen: Probability = 0.00, Count = 1
; -> dvUpdatesFiles.entrySet: Probability = 0.00, Count = 1
; -> boolean[33]: Probability = 0.00, Count = 3
; -> 33: Probability = 0.00, Count = 3
; -> CellRangeAddress8Bit[field_5_num_refs]: Probability = 0.00, Count = 1
; -> field_6_refs[i]: Probability = 0.00, Count = 1
; -> _read: Probability = 0.00, Count = 1
; -> i<_formats.length: Probability = 0.00, Count = 1
; -> number.substring: Probability = 0.00, Count = 1
; -> number.startsWith: Probability = 0.00, Count = 1
; -> inverted: Probability = 0.00, Count = 2
; -> toggleBits: Probability = 0.00, Count = 1
; -> sum++: Probability = 0.00, Count = 1
; -> String[field_1_number_of_sheets]: Probability = 0.00, Count = 1
; -> sheetNames[i]: Probability = 0.00, Count = 1
; -> TAG_INTERNAL_REFERENCES: Probability = 0.00, Count = 1
; -> 4:w5: Probability = 0.00, Count = 1
; -> fieldInfos: Probability = 0.00, Count = 4
; -> this.policy: Probability = 0.00, Count = 1
; -> dg.setOptions: Probability = 0.00, Count = 1
; -> dg.setNumShapes: Probability = 0.00, Count = 1
; -> dg.setLastMSOSPID: Probability = 0.00, Count = 1
; -> drawingGroups.add: Probability = 0.00, Count = 1
; -> dgg.addCluster: Probability = 0.00, Count = 1
; -> dgg.setDrawingsSaved: Probability = 0.00, Count = 1
; -> dgg.getDrawingsSaved: Probability = 0.00, Count = 1
; -> oldToken.getInputStream: Probability = 0.00, Count = 1
; -> (: Probability = 0.00, Count = 14
; -> state.segmentInfo.maxDoc: Probability = 0.00, Count = 2
; -> currentField: Probability = 0.00, Count = 1
; -> -=: Probability = 0.00, Count = 2
; -> refLogIncludeResult: Probability = 0.00, Count = 1
; -> int[resultLength]: Probability = 0.00, Count = 1
; -> fromBlock,: Probability = 0.00, Count = 1
; -> toBlock,: Probability = 0.00, Count = 1
; -> ArrayList<FooterLine>: Probability = 0.00, Count = 1
; -> RawParseUtils.prevLF: Probability = 0.00, Count = 1
; -> raw[keyStart]: Probability = 0.00, Count = 1
; -> RawParseUtils.endOfFooterLineKey: Probability = 0.00, Count = 1
; -> raw[valStart]: Probability = 0.00, Count = 1
; -> valStart++: Probability = 0.00, Count = 1
; -> raw[valEnd: Probability = 0.00, Count = 1
; -> valEnd--: Probability = 0.00, Count = 1
; -> keyStart,: Probability = 0.00, Count = 1
; -> keyEnd,: Probability = 0.00, Count = 1
; -> previous.next: Probability = 0.00, Count = 1
; -> next.previous: Probability = 0.00, Count = 1
; -> currentCell: Probability = 0.00, Count = 2
; -> ++rowIndex: Probability = 0.00, Count = 1
; -> rowArray: Probability = 0.00, Count = 1
; -> cells[rowIndex]: Probability = 0.00, Count = 1
; -> rowArray.length: Probability = 0.00, Count = 1
; -> ++cellIndex: Probability = 0.00, Count = 1
; -> parts[0]: Probability = 0.00, Count = 2
; -> parts[1]: Probability = 0.00, Count = 2
; -> ALEF_MADDA:case: Probability = 0.00, Count = 1
; -> ALEF_HAMZA_ABOVE:case: Probability = 0.00, Count = 1
; -> ALEF_HAMZA_BELOW:s[i]: Probability = 0.00, Count = 1
; -> ALEF: Probability = 0.00, Count = 1
; -> DOTLESS_YEH:s[i]: Probability = 0.00, Count = 1
; -> YEH: Probability = 0.00, Count = 1
; -> TEH_MARBUTA:s[i]: Probability = 0.00, Count = 1
; -> HEH: Probability = 0.00, Count = 1
; -> TATWEEL:case: Probability = 0.00, Count = 1
; -> KASRATAN:case: Probability = 0.00, Count = 1
; -> DAMMATAN:case: Probability = 0.00, Count = 1
; -> FATHATAN:case: Probability = 0.00, Count = 1
; -> FATHA:case: Probability = 0.00, Count = 1
; -> DAMMA:case: Probability = 0.00, Count = 1
; -> KASRA:case: Probability = 0.00, Count = 1
; -> SHADDA:case: Probability = 0.00, Count = 1
; -> SUKUN:len: Probability = 0.00, Count = 1
; -> records.get: Probability = 0.00, Count = 1
; -> formats.size: Probability = 0.00, Count = 1
; -> formats.add: Probability = 0.00, Count = 1
; -> request.setSysMethod: Probability = 0.00, Count = 1
; -> request.setSysConnectTimeout: Probability = 0.00, Count = 1
; -> specs.size: Probability = 0.00, Count = 2
; -> it.hasPrevious: Probability = 0.00, Count = 1
; -> it.previous: Probability = 0.00, Count = 1
; -> default:jj_la1[4]: Probability = 0.00, Count = 2
; -> deletePublicAccessBlockRequest.getAccountId: Probability = 0.00, Count = 2
; -> request.addHeader: Probability = 0.00, Count = 3
; -> "x-amz-account-id",: Probability = 0.00, Count = 2
; -> kRaw: Probability = 0.00, Count = 1
; -> key.raw: Probability = 0.00, Count = 1
; -> i<length: Probability = 0.00, Count = 3
; -> "each: Probability = 0.00, Count = 1
; -> \"\": Probability = 0.00, Count = 1
; -> j=0: Probability = 0.00, Count = 1
; -> j<numChars: Probability = 0.00, Count = 1
; -> sb.length: Probability = 0.00, Count = 5
; -> DateUtil.isValidExcelDate: Probability = 0.00, Count = 1
; -> value.toCharArray: Probability = 0.00, Count = 1
; -> _recs.size: Probability = 0.00, Count = 1
; -> nWritableChars--: Probability = 0.00, Count = 1
; -> b[offset: Probability = 0.00, Count = 1
; -> i++]: Probability = 0.00, Count = 1
; -> -2: Probability = 0.00, Count = 1
; -> RkRec[nItems]: Probability = 0.00, Count = 1
; -> i<nItems: Probability = 0.00, Count = 1
; -> arr[i]: Probability = 0.00, Count = 1
; -> field_8_height: Probability = 0.00, Count = 2
; -> field_9_options1: Probability = 0.00, Count = 2
; -> field_10_indexOfColorValue: Probability = 0.00, Count = 2
; -> MethodType.DELETE: Probability = 0.00, Count = 1
; -> int[hashSize]: Probability = 0.00, Count = 1
; -> ids,: Probability = 0.00, Count = 1
; -> this.bytesStartArray: Probability = 0.00, Count = 1
; -> bytesStartArray.init: Probability = 0.00, Count = 1
; -> sc[p]: Probability = 0.00, Count = 2
; -> kv.getArray: Probability = 0.00, Count = 1
; -> lo[p]: Probability = 0.00, Count = 2
; -> key[i]: Probability = 0.00, Count = 1
; -> getRow2: Probability = 0.00, Count = 1
; -> "row2": Probability = 0.00, Count = 1
; -> setCol1: Probability = 0.00, Count = 1
; -> col1: Probability = 0.00, Count = 1
; -> setRow1: Probability = 0.00, Count = 1
; -> row1: Probability = 0.00, Count = 1
; -> setCol2: Probability = 0.00, Count = 1
; -> setRow2: Probability = 0.00, Count = 1
; -> IndexSearcher.TooManyClauses: Probability = 0.00, Count = 1
; -> termsSet.toArray: Probability = 0.00, Count = 1
; -> BytesRef[0]: Probability = 0.00, Count = 1
; -> terms: Probability = 0.00, Count = 1
; -> !path.components[: Probability = 0.00, Count = 1
; -> this.components[: Probability = 0.00, Count = 1
; -> this.getS3Object: Probability = 0.00, Count = 2
; -> q.headIndex: Probability = 0.00, Count = 1
; -> q.tailIndex: Probability = 0.00, Count = 1
; -> q.commits[i]: Probability = 0.00, Count = 1
; -> entry.entityName: Probability = 0.00, Count = 1
; -> text[offset+i]: Probability = 0.00, Count = 1
; -> length++: Probability = 0.00, Count = 1
; -> suffixes.length: Probability = 0.00, Count = 1
; -> !found: Probability = 0.00, Count = 1
; -> rules.length: Probability = 0.00, Count = 2
; -> float[resultLength]: Probability = 0.00, Count = 1
; -> CF_METAFILEPICT.": Probability = 0.00, Count = 1
; -> thumbnail: Probability = 0.00, Count = 1
; -> wmfImageLength: Probability = 0.00, Count = 1
; -> thumbnail.length: Probability = 0.00, Count = 1
; -> iw.updateDocument: Probability = 0.00, Count = 1
; -> repo.updateRef: Probability = 0.00, Count = 1
; -> update.setForceUpdate: Probability = 0.00, Count = 1
; -> deleteResult: Probability = 0.00, Count = 2
; -> update.delete: Probability = 0.00, Count = 1
; -> IO_FAILURE:: Probability = 0.00, Count = 1
; -> LOCK_FAILURE:: Probability = 0.00, Count = 1
; -> REJECTED:: Probability = 0.00, Count = 1
; -> _isxdiSort: Probability = 0.00, Count = 1
; -> _isxdiShow: Probability = 0.00, Count = 1
; -> 0:_reserved1: Probability = 0.00, Count = 1
; -> 10:break: Probability = 0.00, Count = 1
; -> normMap.map: Probability = 0.00, Count = 1
; -> cachedRootArcs: Probability = 0.00, Count = 1
; -> normMap.cachedRootArcs: Probability = 0.00, Count = 1
; -> t.getText: Probability = 0.00, Count = 2
; -> i,: Probability = 0.00, Count = 2
; -> m: Probability = 0.00, Count = 2
; -> ModifierQueryNode.Modifier.MOD_NOT: Probability = 0.00, Count = 3
; -> +CFHeader12Record.sid: Probability = 0.00, Count = 1
; -> expected": Probability = 0.00, Count = 1
; -> header.getNumberOfConditionalFormats: Probability = 0.00, Count = 1
; -> CFRuleBase[]: Probability = 0.00, Count = 2
; -> CFRuleBase[nRules]: Probability = 0.00, Count = 1
; -> rules[i]: Probability = 0.00, Count = 2
; -> header,: Probability = 0.00, Count = 1
; -> totalMaxDoc: Probability = 0.00, Count = 2
; -> iter.hasMoreElements: Probability = 0.00, Count = 1
; -> v[i]: Probability = 0.00, Count = 2
; -> iter.getValue: Probability = 0.00, Count = 1
; -> k[i++]: Probability = 0.00, Count = 1
; -> iter.nextElement: Probability = 0.00, Count = 1
; -> insertBalanced: Probability = 0.00, Count = 1
; -> k,: Probability = 0.00, Count = 1
; -> nextFinalOutput: Probability = 0.00, Count = 2
; -> lastReturned.getKey: Probability = 0.00, Count = 1
; -> outGoingArgs: Probability = 0.00, Count = 1
; -> ValueEval[nOutGoingArgs]: Probability = 0.00, Count = 1
; -> targetFunc.evaluate: Probability = 0.00, Count = 1
; -> short[resultLength]: Probability = 0.00, Count = 1
; -> jumpTable.length: Probability = 0.00, Count = 1
; -> jumpTable[i]: Probability = 0.00, Count = 1
; -> EMPTY_INT_ARRAY: Probability = 0.00, Count = 1
; -> int[count]: Probability = 0.00, Count = 1
; -> breakItem: Probability = 0.00, Count = 1
; -> _breaks.get: Probability = 0.00, Count = 1
; -> result[i]: Probability = 0.00, Count = 2
; -> byte[s.length: Probability = 0.00, Count = 1
; -> k--: Probability = 0.00, Count = 1
; -> 6,: Probability = 0.00, Count = 1
; -> !reference.isColumn: Probability = 0.00, Count = 1
; -> !reference.isRow: Probability = 0.00, Count = 1
; -> ri++: Probability = 0.00, Count = 1
; -> trie.setMatchAlmostDiff: Probability = 0.00, Count = 1
; -> editDistance: Probability = 0.00, Count = 1
; -> count++: Probability = 0.00, Count = 2
; -> nextValues.longs,: Probability = 0.00, Count = 1
; -> nextValues.offset,: Probability = 0.00, Count = 1
; -> nextValues: Probability = 0.00, Count = 1
; -> q: Probability = 0.00, Count = 1
; -> default:: Probability = 0.00, Count = 1
; -> Remap: Probability = 0.00, Count = 1
; -> rows.size: Probability = 0.00, Count = 2
; -> now,: Probability = 0.00, Count = 1
; -> rows.get: Probability = 0.00, Count = 1
; -> rows.set: Probability = 0.00, Count = 1
; -> remap[orig.root]: Probability = 0.00, Count = 1
; -> root,: Probability = 0.00, Count = 1
; -> remap[root],: Probability = 0.00, Count = 1
; -> cells.values: Probability = 0.00, Count = 1
; -> uniformCnt: Probability = 0.00, Count = 1
; -> tailBlkIdx--: Probability = 0.00, Count = 1
; -> elseresetTailBlock: Probability = 0.00, Count = 1
; -> resetTailBlock: Probability = 0.00, Count = 1
; -> byte[SKIP_BUFFER_SIZE]: Probability = 0.00, Count = 1
; -> skipBuffer.length: Probability = 0.00, Count = 1
; -> newData,: Probability = 0.00, Count = 1
; -> i++,: Probability = 0.00, Count = 1
; -> r.setOutputUnigramsIfNoShingles: Probability = 0.00, Count = 1
; -> previous.start: Probability = 0.00, Count = 1
; -> --elementCount: Probability = 0.00, Count = 1
; -> pathParamKey: Probability = 0.00, Count = 2
; -> request.putPathParameter: Probability = 0.00, Count = 1
; -> pathParamKey,: Probability = 0.00, Count = 1
; -> pathParameters.get: Probability = 0.00, Count = 1
; -> this: Probability = 0.00, Count = 3
; -> jt.length: Probability = 0.00, Count = 1
; -> Token.EOF: Probability = 0.00, Count = 2
; -> '\n': Probability = 0.00, Count = 2
; -> '\t': Probability = 0.00, Count = 1
; -> numTransitions: Probability = 0.00, Count = 2
; -> t=0: Probability = 0.00, Count = 1
; -> t<numTransitions: Probability = 0.00, Count = 1
; -> t++: Probability = 0.00, Count = 1
; -> scratch: Probability = 0.00, Count = 5
; -> formulaLen,: Probability = 0.00, Count = 1
; -> getCharPositionInLine: Probability = 0.00, Count = 1
; -> LocaleUtil.getUserTimeZone: Probability = 0.00, Count = 2
; -> getNumericCellValue: Probability = 0.00, Count = 1
; -> getStringCellValue: Probability = 0.00, Count = 1
; -> Type:: Probability = 0.00, Count = 1
; -> getCellType: Probability = 0.00, Count = 1
; -> ++written: Probability = 0.00, Count = 1
; -> fieldNames.add: Probability = 0.00, Count = 3
; -> pos: Probability = 0.00, Count = 1
; -> absoluteOffsets.length: Probability = 0.00, Count = 1
; -> absoluteOffsets[i]: Probability = 0.00, Count = 1
; -> extSST.setBucketOffsets: Probability = 0.00, Count = 1
; -> absoluteOffsets,: Probability = 0.00, Count = 1
; -> .doubleValue: Probability = 0.00, Count = 1
; -> toAppendTo.append: Probability = 0.00, Count = 1
; -> -elapsed: Probability = 0.00, Count = 1
; -> Long[specs.size: Probability = 0.00, Count = 1
; -> i<field_2_cell_offsets.length: Probability = 0.00, Count = 1
; -> boundaryChars.contains: Probability = 0.00, Count = 1
; -> part2.substring: Probability = 0.00, Count = 1
; -> scratchInts: Probability = 0.00, Count = 1
; -> Files.size: Probability = 0.00, Count = 1
; -> chars.charAt: Probability = 0.00, Count = 1
; -> byte[len: Probability = 0.00, Count = 1
; -> areaEval,: Probability = 0.00, Count = 2
; -> areaEval.getLastSheetIndex: Probability = 0.00, Count = 1
; -> areaEval.getHeight: Probability = 0.00, Count = 1
; -> areaEval.getWidth: Probability = 0.00, Count = 1
; -> NQuery: Probability = 0.00, Count = 1
; -> N:: Probability = 0.00, Count = 1
; -> label_5: Probability = 0.00, Count = 1
; -> prompt.length: Probability = 0.00, Count = 1
; -> String[v.length]: Probability = 0.00, Count = 1
; -> v[i].getValue: Probability = 0.00, Count = 1
; -> byte[newSize]: Probability = 0.00, Count = 1
; -> field_11_tickColor: Probability = 0.00, Count = 2
; -> exceed: Probability = 0.00, Count = 1
; -> 3": Probability = 0.00, Count = 1
; -> CFRuleBase[cfRules.length]: Probability = 0.00, Count = 1
; -> _xfs.length: Probability = 0.00, Count = 1
; -> xf: Probability = 0.00, Count = 2
; -> _xfs: Probability = 0.00, Count = 1
; -> inBounds: Probability = 0.00, Count = 2
; -> i<terms.length: Probability = 0.00, Count = 1
; -> W:: Probability = 0.00, Count = 1
; -> label_6: Probability = 0.00, Count = 1
; -> W: Probability = 0.00, Count = 2
; -> slice.from: Probability = 0.00, Count = 1
; -> slice.to: Probability = 0.00, Count = 1
; -> other.intervals.get: Probability = 0.00, Count = 1
; -> this.add: Probability = 0.00, Count = 1
; -> I.a,I.b: Probability = 0.00, Count = 1
; -> FSTTermsWriter.TERMS_EXTENSION: Probability = 0.00, Count = 1
; -> this.postingsReader: Probability = 0.00, Count = 1
; -> state.directory.openInput: Probability = 0.00, Count = 1
; -> CodecUtil.checkIndexHeader: Probability = 0.00, Count = 1
; -> FSTTermsWriter.TERMS_CODEC_NAME,FSTTermsWriter.TERMS_VERSION_START,FSTTermsWriter.TERMS_VERSION_CURRENT,state.segmentInfo.getId: Probability = 0.00, Count = 1
; -> CodecUtil.checksumEntireFile: Probability = 0.00, Count = 1
; -> this.postingsReader.init: Probability = 0.00, Count = 1
; -> seekDir: Probability = 0.00, Count = 1
; -> numFields: Probability = 0.00, Count = 2
; -> fieldInfos.fieldInfo: Probability = 0.00, Count = 1
; -> sumTotalTermFreq: Probability = 0.00, Count = 2
; -> sumDocFreq: Probability = 0.00, Count = 1
; -> numTerms,: Probability = 0.00, Count = 2
; -> sumTotalTermFreq,: Probability = 0.00, Count = 1
; -> sumDocFreq,: Probability = 0.00, Count = 1
; -> checkFieldSummary: Probability = 0.00, Count = 1
; -> state.segmentInfo,: Probability = 0.00, Count = 1
; -> field_4_zero: Probability = 0.00, Count = 1
; -> [shIx1]: Probability = 0.00, Count = 1
; -> [shIx2]: Probability = 0.00, Count = 1
; -> -INT_BLOCK_SIZE: Probability = 0.00, Count = 1
; -> blocks.get: Probability = 0.00, Count = 1
; -> automata: Probability = 0.00, Count = 2
; -> automata.add: Probability = 0.00, Count = 1
; -> default:automata.add: Probability = 0.00, Count = 1
; -> Operations.concatenate: Probability = 0.00, Count = 1
; -> CmpOp.NONE:break: Probability = 0.00, Count = 1
; -> result.charAt: Probability = 0.00, Count = 2
; -> rootContext: Probability = 0.00, Count = 2
; -> parentContext: Probability = 0.00, Count = 1
; -> _parentContextStack.pop: Probability = 0.00, Count = 1
; -> parentContext.a: Probability = 0.00, Count = 1
; -> visitRuleStopState: Probability = 0.00, Count = 1
; -> :try: Probability = 0.00, Count = 1
; -> visitState: Probability = 0.00, Count = 1
; -> atn.ruleToStopState[p.ruleIndex].stateNumber: Probability = 0.00, Count = 1
; -> getContext: Probability = 0.00, Count = 1
; -> .exception: Probability = 0.00, Count = 1
; -> .reportError: Probability = 0.00, Count = 1
; -> numMarkers--: Probability = 0.00, Count = 1
; -> =new: Probability = 0.00, Count = 1
; -> i<nArgs: Probability = 0.00, Count = 1
; -> done: Probability = 0.00, Count = 4
; -> spare.get: Probability = 0.00, Count = 3
; -> functionNames[i].toUpperCase: Probability = 0.00, Count = 1
; -> functionImpls[i]: Probability = 0.00, Count = 1
; -> _functionsByName: Probability = 0.00, Count = 1
; -> flags: Probability = 0.00, Count = 1
; -> firstLabel: Probability = 0.00, Count = 1
; -> other.firstLabel: Probability = 0.00, Count = 1
; -> _childRecords: Probability = 0.00, Count = 2
; -> serialNumCalendar: Probability = 0.00, Count = 1
; -> serialNumCalendar.setTime: Probability = 0.00, Count = 1
; -> serialNum,: Probability = 0.00, Count = 1
; -> ?: Probability = 0.00, Count = 1
; -> ExternSheetRecord: Probability = 0.00, Count = 1
; -> _recordCount: Probability = 0.00, Count = 1
; -> _externalBookBlocks[0].getExternalBookRecord: Probability = 0.00, Count = 1
; -> records[i]: Probability = 0.00, Count = 1
; -> rowCells.length: Probability = 0.00, Count = 2
; -> rowCells[j]: Probability = 0.00, Count = 1
; -> cellRanges: Probability = 0.00, Count = 2
; -> header.getCellRanges: Probability = 0.00, Count = 1
; -> List<CellRangeAddress>: Probability = 0.00, Count = 1
; -> BaseRowColShifter.shiftRange: Probability = 0.00, Count = 1
; -> craOld,: Probability = 0.00, Count = 1
; -> temp.size: Probability = 0.00, Count = 1
; -> CellRangeAddress[nRanges]: Probability = 0.00, Count = 1
; -> header.setCellRanges: Probability = 0.00, Count = 1
; -> rules: Probability = 0.00, Count = 2
; -> rule.getParsedExpression1: Probability = 0.00, Count = 1
; -> rule.setParsedExpression1: Probability = 0.00, Count = 1
; -> rule.getParsedExpression2: Probability = 0.00, Count = 1
; -> rule12: Probability = 0.00, Count = 1
; -> rehash: Probability = 0.00, Count = 2
; -> int[utf32.getNumStates: Probability = 0.00, Count = 1
; -> pending.add: Probability = 0.00, Count = 2
; -> utf8.createState: Probability = 0.00, Count = 2
; -> utf8.setAccept: Probability = 0.00, Count = 2
; -> utf8State,: Probability = 0.00, Count = 2
; -> utf32.isAccept: Probability = 0.00, Count = 2
; -> map[utf32State]: Probability = 0.00, Count = 2
; -> pending.size: Probability = 0.00, Count = 2
; -> pending.remove: Probability = 0.00, Count = 1
; -> utf32.getNumTransitions: Probability = 0.00, Count = 1
; -> utf32.initTransition: Probability = 0.00, Count = 1
; -> utf32State,: Probability = 0.00, Count = 1
; -> i<numTransitions: Probability = 0.00, Count = 1
; -> utf32.getNextTransition: Probability = 0.00, Count = 1
; -> scratch.dest: Probability = 0.00, Count = 1
; -> convertOneEdge: Probability = 0.00, Count = 1
; -> scratch.min,: Probability = 0.00, Count = 1
; -> scratch.max: Probability = 0.00, Count = 1
; -> utf8.finish: Probability = 0.00, Count = 1
; -> yet": Probability = 0.00, Count = 1
; -> Object[_nRows][_nColumns]: Probability = 0.00, Count = 1
; -> r++: Probability = 0.00, Count = 1
; -> rowData: Probability = 0.00, Count = 1
; -> result[r]: Probability = 0.00, Count = 1
; -> c++: Probability = 0.00, Count = 1
; -> rowData[c]: Probability = 0.00, Count = 1
; -> writer.close: Probability = 0.00, Count = 2
; -> dir,getIndexWriterConfig: Probability = 0.00, Count = 1
; -> getGramAnalyzer: Probability = 0.00, Count = 1
; -> IndexWriterConfig.OpenMode.CREATE: Probability = 0.00, Count = 1
; -> iter.contexts: Probability = 0.00, Count = 1
; -> commitOnBuild: Probability = 0.00, Count = 1
; -> SearcherManager: Probability = 0.00, Count = 1
; -> writer,: Probability = 0.00, Count = 1
; -> result.addCellRangeAddress: Probability = 0.00, Count = 1
; -> ~binarySearch: Probability = 0.00, Count = 1
; -> Object[n]: Probability = 0.00, Count = 2
; -> -1: Probability = 0.00, Count = 5
; -> this.endIndex: Probability = 0.00, Count = 1
; -> cras[i]: Probability = 0.00, Count = 1
; -> double[resultLength]: Probability = 0.00, Count = 1
; -> i<ptgs.length: Probability = 0.00, Count = 1
; -> byte[2]: Probability = 0.00, Count = 1
; -> buffer[0]: Probability = 0.00, Count = 1
; -> buffer[1]: Probability = 0.00, Count = 1
; -> "GB2312": Probability = 0.00, Count = 1
; -> byteOrder2: Probability = 0.00, Count = 2
; -> getByteOrder: Probability = 0.00, Count = 1
; -> getOSVersion: Probability = 0.00, Count = 1
; -> sectionCount1: Probability = 0.00, Count = 1
; -> ps.getSectionCount: Probability = 0.00, Count = 1
; -> byteOrder1: Probability = 0.00, Count = 1
; -> ||!classID1.equals: Probability = 0.00, Count = 1
; -> ps.getSections: Probability = 0.00, Count = 1
; -> boolean[34]: Probability = 0.00, Count = 3
; -> :: Probability = 0.00, Count = 1
; -> "[OBJ]\n": Probability = 0.00, Count = 1
; -> subrecords: Probability = 0.00, Count = 1
; -> "SUBRECORD:: Probability = 0.00, Count = 1
; -> subs.length: Probability = 0.00, Count = 2
; -> i<subs.length: Probability = 0.00, Count = 2
; -> -terms.length-1: Probability = 0.00, Count = 1
; -> -ord: Probability = 0.00, Count = 1
; -> list.toArray: Probability = 0.00, Count = 3
; -> args[ix],: Probability = 0.00, Count = 1
; -> bufferStartIndex+n-1: Probability = 0.00, Count = 1
; -> char[2]: Probability = 0.00, Count = 1
; -> key[0]: Probability = 0.00, Count = 1
; -> classmap.insert: Probability = 0.00, Count = 1
; -> this.positions.size: Probability = 0.00, Count = 1
; -> positionsArray[i]: Probability = 0.00, Count = 1
; -> Term[][]: Probability = 0.00, Count = 1
; -> termArraysArray: Probability = 0.00, Count = 1
; -> termArrays.toArray: Probability = 0.00, Count = 1
; -> Term[termArrays.size: Probability = 0.00, Count = 1
; -> ][]: Probability = 0.00, Count = 1
; -> values.length: Probability = 0.00, Count = 1
; -> pack: Probability = 0.00, Count = 1
; -> pending[pendingOff++]: Probability = 0.00, Count = 1
; -> kx,: Probability = 0.00, Count = 1
; -> slice[upto++]: Probability = 0.00, Count = 1
; -> offsetAttribute.setOffset: Probability = 0.00, Count = 1
; -> origNameRecord.getNameDefinition: Probability = 0.00, Count = 1
; -> NameRecord.BUILTIN_FILTER_DB,: Probability = 0.00, Count = 1
; -> newSheetIndex+1: Probability = 0.00, Count = 1
; -> newNameRecord.setNameDefinition: Probability = 0.00, Count = 1
; -> newNameRecord.setHidden: Probability = 0.00, Count = 1
; -> _remainingLength: Probability = 0.00, Count = 2
; -> offset+8: Probability = 0.00, Count = 1
; -> 'à':case: Probability = 0.00, Count = 1
; -> 'á':case: Probability = 0.00, Count = 1
; -> 'â':: Probability = 0.00, Count = 1
; -> 'ö':case: Probability = 0.00, Count = 1
; -> 'ò':case: Probability = 0.00, Count = 1
; -> 'ó':case: Probability = 0.00, Count = 1
; -> 'ô':: Probability = 0.00, Count = 1
; -> 'ï':case: Probability = 0.00, Count = 1
; -> 'ì':case: Probability = 0.00, Count = 1
; -> 'í':case: Probability = 0.00, Count = 1
; -> 'î':: Probability = 0.00, Count = 1
; -> 'ü':case: Probability = 0.00, Count = 1
; -> 'ù':case: Probability = 0.00, Count = 1
; -> 'ú':case: Probability = 0.00, Count = 1
; -> 'û':: Probability = 0.00, Count = 1
; -> perThread.flushPending: Probability = 0.00, Count = 1
; -> assertMemory: Probability = 0.00, Count = 1
; -> 0x16:case: Probability = 0.00, Count = 1
; -> 0x2d:case: Probability = 0.00, Count = 1
; -> 0x2e:case: Probability = 0.00, Count = 1
; -> link.data: Probability = 0.00, Count = 1
; -> sessions.put: Probability = 0.00, Count = 1
; -> srcCellRow: Probability = 0.00, Count = 1
; -> ErrorEval.NAME_INVALID: Probability = 0.00, Count = 1
; -> holidaysCell: Probability = 0.00, Count = 1
; -> this.evaluator.evaluateDatesArg: Probability = 0.00, Count = 1
; -> holidaysCell,: Probability = 0.00, Count = 1
; -> WorkdayCalculator.instance.calculateWorkdays: Probability = 0.00, Count = 1
; -> value: Probability = 0.00, Count = 1
; -> 0,: Probability = 0.00, Count = 2
; -> _mergedRegions.toArray: Probability = 0.00, Count = 1
; -> r_attached_pronoun: Probability = 0.00, Count = 1
; -> lab0:: Probability = 0.00, Count = 1
; -> lab1:: Probability = 0.00, Count = 1
; -> lab2:: Probability = 0.00, Count = 1
; -> !r_standard_suffix: Probability = 0.00, Count = 1
; -> lab2: Probability = 0.00, Count = 1
; -> lab1: Probability = 0.00, Count = 1
; -> !r_verb_suffix: Probability = 0.00, Count = 1
; -> lab0: Probability = 0.00, Count = 1
; -> r_residual_suffix: Probability = 0.00, Count = 1
; -> v_6: Probability = 0.00, Count = 2
; -> r_cleaning: Probability = 0.00, Count = 1
; -> this.image: Probability = 0.00, Count = 1
; -> _stringValue: Probability = 0.00, Count = 1
; -> destCell.setCellErrorValue: Probability = 0.00, Count = 1
; -> _errorValue: Probability = 0.00, Count = 1
; -> usage: Probability = 0.00, Count = 2
; -> original.getClass: Probability = 0.00, Count = 1
; -> .getComponentType: Probability = 0.00, Count = 1
; -> shardHits[first.shardIndex][first.hitIndex]: Probability = 0.00, Count = 1
; -> date.getNano: Probability = 0.00, Count = 1
; -> /1_000_000: Probability = 0.00, Count = 1
; -> dggContainer.getChildRecords: Probability = 0.00, Count = 1
; -> merges.size: Probability = 0.00, Count = 1
; -> char[exceptions.length][]: Probability = 0.00, Count = 1
; -> this.exceptions[i]: Probability = 0.00, Count = 1
; -> exceptions[i].toCharArray: Probability = 0.00, Count = 1
; -> 0,0: Probability = 0.00, Count = 1
; -> stats.length==0: Probability = 0.00, Count = 1
; -> i<stats.length: Probability = 0.00, Count = 1
; -> stats[i].searchTime: Probability = 0.00, Count = 1
; -> stats[i].docNamesExtractTime: Probability = 0.00, Count = 1
; -> stats[i].maxGoodPoints>0: Probability = 0.00, Count = 1
; -> m++: Probability = 0.00, Count = 1
; -> stats[i].getMRR: Probability = 0.00, Count = 1
; -> stats[i].maxGoodPoints: Probability = 0.00, Count = 1
; -> stats[i].getPrecisionAt: Probability = 0.00, Count = 1
; -> m>0: Probability = 0.00, Count = 1
; -> reader.ramBytesUsed: Probability = 0.00, Count = 1
; -> facetEntries: Probability = 0.00, Count = 1
; -> skipped++: Probability = 0.00, Count = 1
; -> included++: Probability = 0.00, Count = 1
; -> entries.add: Probability = 0.00, Count = 1
; -> _uninterpretedData: Probability = 0.00, Count = 2
; -> !r_more_than_one_syllable_word: Probability = 0.00, Count = 1
; -> r_stem_nominal_verb_suffixes: Probability = 0.00, Count = 1
; -> B_continue_stemming_noun_suffixes: Probability = 0.00, Count = 1
; -> r_stem_noun_suffixes: Probability = 0.00, Count = 1
; -> !r_postlude: Probability = 0.00, Count = 1
; -> positions[nextWrite].count: Probability = 0.00, Count = 1
; -> positions[nextWrite++].pos: Probability = 0.00, Count = 1
; -> nextPos++: Probability = 0.00, Count = 1
; -> positions[index].pos: Probability = 0.00, Count = 1
; -> positions[index]: Probability = 0.00, Count = 1
; -> stv: Probability = 0.00, Count = 2
; -> getRowBlockCount: Probability = 0.00, Count = 1
; -> blockIndex++: Probability = 0.00, Count = 1
; -> visitRowRecordsForBlock: Probability = 0.00, Count = 1
; -> blockIndex,: Probability = 0.00, Count = 1
; -> startRowNumber: Probability = 0.00, Count = 2
; -> getStartRowNumberForBlock: Probability = 0.00, Count = 1
; -> endRowNumber: Probability = 0.00, Count = 2
; -> getEndRowNumberForBlock: Probability = 0.00, Count = 1
; -> List<Short>: Probability = 0.00, Count = 1
; -> cellOffsets: Probability = 0.00, Count = 2
; -> cellRefOffset: Probability = 0.00, Count = 3
; -> RowRecord.ENCODED_SIZE: Probability = 0.00, Count = 1
; -> _valuesAgg.rowHasCells: Probability = 0.00, Count = 1
; -> stv.setPosition: Probability = 0.00, Count = 1
; -> _valuesAgg.visitCellsForRow: Probability = 0.00, Count = 1
; -> stv.getPosition: Probability = 0.00, Count = 1
; -> cellOffsets.add: Probability = 0.00, Count = 1
; -> shortListToArray: Probability = 0.00, Count = 1
; -> _unknownRecords.forEach: Probability = 0.00, Count = 1
; -> this.len: Probability = 0.00, Count = 1
; -> reserved3: Probability = 0.00, Count = 1
; -> i<cellRefs.length: Probability = 0.00, Count = 1
; -> cellRefs[i].serialize: Probability = 0.00, Count = 1
; -> sharedFeature.serialize: Probability = 0.00, Count = 1
; -> .setBadFontHeight: Probability = 0.00, Count = 1
; -> propToStringArray: Probability = 0.00, Count = 1
; -> >[]: Probability = 0.00, Count = 1
; -> Iterator[: Probability = 0.00, Count = 1
; -> toMerge.size: Probability = 0.00, Count = 1
; -> seqnum: Probability = 0.00, Count = 1
; -> first.seqnum: Probability = 0.00, Count = 1
; -> first.boost: Probability = 0.00, Count = 1
; -> default:jj_la1[0]: Probability = 0.00, Count = 2
; -> boundsheets.size: Probability = 0.00, Count = 2
; -> sentenceStarts[0]: Probability = 0.00, Count = 1
; -> moveToSentenceAt: Probability = 0.00, Count = 1
; -> COMMA:: Probability = 0.00, Count = 1
; -> default:jj_la1[7]: Probability = 0.00, Count = 1
; -> label_7: Probability = 0.00, Count = 1
; -> RPAREN: Probability = 0.00, Count = 1
; -> PLUS: Probability = 0.00, Count = 1
; -> ModifierQueryNode.Modifier.MOD_REQ: Probability = 0.00, Count = 1
; -> MINUS:jj_consume_token: Probability = 0.00, Count = 1
; -> MINUS: Probability = 0.00, Count = 2
; -> NOT:jj_consume_token: Probability = 0.00, Count = 1
; -> NOT: Probability = 0.00, Count = 1
; -> char[suffixes.length][]: Probability = 0.00, Count = 1
; -> this.suffixes[i]: Probability = 0.00, Count = 1
; -> stringToPath: Probability = 0.00, Count = 1
; -> !lastEscape: Probability = 0.00, Count = 1
; -> parts.toArray: Probability = 0.00, Count = 1
; -> String[parts.size: Probability = 0.00, Count = 1
; -> byte[b.length]: Probability = 0.00, Count = 1
; -> needle[i]: Probability = 0.00, Count = 1
; -> NO_FONT: Probability = 0.00, Count = 2
; -> keys.length: Probability = 0.00, Count = 1
; -> keys[next]: Probability = 0.00, Count = 1
; -> getModuloHash: Probability = 0.00, Count = 1
; -> !hashedOk: Probability = 0.00, Count = 1
; -> values[next]: Probability = 0.00, Count = 1
; -> overflowBuffer.toByteArray: Probability = 0.00, Count = 1
; -> i<toFree: Probability = 0.00, Count = 1
; -> positions[index].reset: Probability = 0.00, Count = 1
; -> spans: Probability = 0.00, Count = 1
; -> sentenceOp.splitSentences: Probability = 0.00, Count = 1
; -> characterIteratorToString: Probability = 0.00, Count = 1
; -> sentenceStarts: Probability = 0.00, Count = 1
; -> int[spans.length]: Probability = 0.00, Count = 1
; -> spans.length: Probability = 0.00, Count = 1
; -> sentenceStarts[i]: Probability = 0.00, Count = 1
; -> spans[i].getStart: Probability = 0.00, Count = 1
; -> utf8.offset: Probability = 0.00, Count = 1
; -> utf8.bytes: Probability = 0.00, Count = 1
; -> codePointCount++: Probability = 0.00, Count = 1
; -> 0xe0: Probability = 0.00, Count = 1
; -> 0xf0: Probability = 0.00, Count = 1
; -> 0xf8: Probability = 0.00, Count = 1
; -> byte[3: Probability = 0.00, Count = 1
; -> LittleEndian.putUShort: Probability = 0.00, Count = 1
; -> LittleEndian.putByte: Probability = 0.00, Count = 1
; -> data.length-3: Probability = 0.00, Count = 1
; -> rawValue: Probability = 0.00, Count = 1
; -> StringUtil.UTF8: Probability = 0.00, Count = 1
; -> setUsername: Probability = 0.00, Count = 1
; -> rawValue.trim: Probability = 0.00, Count = 1
; -> rawText.trim: Probability = 0.00, Count = 1
; -> padSize: Probability = 0.00, Count = 2
; -> padSize--: Probability = 0.00, Count = 1
; -> else: Probability = 0.00, Count = 1
; -> br.readLine: Probability = 0.00, Count = 1
; -> 11: Probability = 0.00, Count = 1
; -> !synSetID.equals: Probability = 0.00, Count = 1
; -> parseSynonym: Probability = 0.00, Count = 1
; -> line,: Probability = 0.00, Count = 1
; -> CharsRefBuilder: Probability = 0.00, Count = 1
; -> synsetSize++: Probability = 0.00, Count = 1
; -> synonym: Probability = 0.00, Count = 1
; -> br.getLineNumber: Probability = 0.00, Count = 1
; -> size++: Probability = 0.00, Count = 2
; -> doubleCapacity: Probability = 0.00, Count = 2
; -> finished: Probability = 0.00, Count = 1
; -> out.bytes: Probability = 0.00, Count = 1
; -> out.offset: Probability = 0.00, Count = 1
; -> other.docFreq: Probability = 0.00, Count = 1
; -> other.totalTermFreq: Probability = 0.00, Count = 1
; -> other.termBlockOrd: Probability = 0.00, Count = 1
; -> byte[totalLength]: Probability = 0.00, Count = 1
; -> concatenated,: Probability = 0.00, Count = 1
; -> destPos,: Probability = 0.00, Count = 1
; -> arrays.get: Probability = 0.00, Count = 1
; -> C_2_POW_19: Probability = 0.00, Count = 1
; -> cc.get64BitNormalisedExponent: Probability = 0.00, Count = 2
; -> 46:if: Probability = 0.00, Count = 1
; -> cc.isAboveMinRep: Probability = 0.00, Count = 1
; -> 44:case: Probability = 0.00, Count = 1
; -> 45:cc.multiplyByPowerOfTen: Probability = 0.00, Count = 1
; -> pow10--: Probability = 0.00, Count = 1
; -> 47:case: Probability = 0.00, Count = 1
; -> 48:break: Probability = 0.00, Count = 1
; -> 49:if: Probability = 0.00, Count = 1
; -> cc.isBelowMaxRep: Probability = 0.00, Count = 1
; -> 50:cc.multiplyByPowerOfTen: Probability = 0.00, Count = 1
; -> pow10++: Probability = 0.00, Count = 1
; -> cc.createNormalisedDecimal: Probability = 0.00, Count = 1
; -> '/':case: Probability = 0.00, Count = 2
; -> '\\':case: Probability = 0.00, Count = 2
; -> off: Probability = 0.00, Count = 1
; -> break: Probability = 0.00, Count = 3
; -> ValueEval[args.length-1]: Probability = 0.00, Count = 1
; -> vargs,: Probability = 0.00, Count = 1
; -> vargs.length: Probability = 0.00, Count = 1
; -> AggregateFunction.ValueCollector.collectValues: Probability = 0.00, Count = 1
; -> FinanceLib.npv: Probability = 0.00, Count = 1
; -> byteLength: Probability = 0.00, Count = 1
; -> byteLength,: Probability = 0.00, Count = 1
; -> inStream.readFully: Probability = 0.00, Count = 1
; -> path[0]: Probability = 0.00, Count = 1
; -> positionSpan: Probability = 0.00, Count = 1
; -> csq.charAt: Probability = 0.00, Count = 1
; -> data[p]: Probability = 0.00, Count = 1
; -> n-1: Probability = 0.00, Count = 1
; -> p++: Probability = 0.00, Count = 1
; -> currentCharIndex++: Probability = 0.00, Count = 1
; -> *: Probability = 0.00, Count = 2
; -> addNameXPtg: Probability = 0.00, Count = 1
; -> ebr.isAddInFunctions: Probability = 0.00, Count = 1
; -> _externalBookBlocks[i]: Probability = 0.00, Count = 1
; -> extendExternalBookBlocks: Probability = 0.00, Count = 1
; -> _externSheetRecord.addRef: Probability = 0.00, Count = 1
; -> extNameRecord: Probability = 0.00, Count = 3
; -> fakeSheetIdx: Probability = 0.00, Count = 2
; -> _externSheetRecord.getRefIxForSheet: Probability = 0.00, Count = 1
; -> extBlockIndex,: Probability = 0.00, Count = 1
; -> fakeSheetIdx,: Probability = 0.00, Count = 1
; -> ix,: Probability = 0.00, Count = 1
; -> stored": Probability = 0.00, Count = 1
; -> 10]: Probability = 0.00, Count = 1
; -> byte[getRawDataSize: Probability = 0.00, Count = 1
; -> reader: Probability = 0.00, Count = 1
; -> getErrorRecoverySet: Probability = 0.00, Count = 1
; -> consumeUntil: Probability = 0.00, Count = 1
; -> getNumIdClusters: Probability = 0.00, Count = 1
; -> FileIdCluster: Probability = 0.00, Count = 1
; -> field_5_fileIdClusters: Probability = 0.00, Count = 1
; -> fic.getDrawingGroupId: Probability = 0.00, Count = 1
; -> fic.getNumShapeIdsUsed: Probability = 0.00, Count = 1
; -> List<ValueEval>: Probability = 0.00, Count = 1
; -> .subList: Probability = 0.00, Count = 1
; -> Iterator<ValueEval>: Probability = 0.00, Count = 1
; -> list.iterator: Probability = 0.00, Count = 1
; -> LazyRefEval: Probability = 0.00, Count = 2
; -> lazyRefEval: Probability = 0.00, Count = 1
; -> lazyRefEval.isSubTotal: Probability = 0.00, Count = 1
; -> 100: Probability = 0.00, Count = 1
; -> isContainerRecord: Probability = 0.00, Count = 1
; -> byteUpto,: Probability = 0.00, Count = 1
; -> allocator.recycleByteBlocks: Probability = 0.00, Count = 1
; -> 1+bufferUpto,: Probability = 0.00, Count = 1
; -> -BYTE_BLOCK_SIZE: Probability = 0.00, Count = 1
; -> a[--size]: Probability = 0.00, Count = 1
; -> mKeys[pos]: Probability = 0.00, Count = 2
; -> getPublicAccessBlockRequest.getAccountId: Probability = 0.00, Count = 2
; -> RandomAccess: Probability = 0.00, Count = 1
; -> that.get: Probability = 0.00, Count = 1
; -> !eThis.equals: Probability = 0.00, Count = 2
; -> that.iterator: Probability = 0.00, Count = 1
; -> "empty": Probability = 0.00, Count = 1
; -> 31,: Probability = 0.00, Count = 1
; -> shortenname: Probability = 0.00, Count = 2
; -> nameProposal.substring: Probability = 0.00, Count = 1
; -> '\u0000':case: Probability = 0.00, Count = 1
; -> '\u0003':case: Probability = 0.00, Count = 1
; -> ':':case: Probability = 0.00, Count = 1
; -> '[':result.setCharAt: Probability = 0.00, Count = 1
; -> '\'':if: Probability = 0.00, Count = 1
; -> i==0: Probability = 0.00, Count = 1
; -> i==length-1: Probability = 0.00, Count = 1
; -> result.setCharAt: Probability = 0.00, Count = 1
; -> allocator.getByteBlock: Probability = 0.00, Count = 1
; -> topmost: Probability = 0.00, Count = 2
; -> format": Probability = 0.00, Count = 1
; -> part.toLowerCase: Probability = 0.00, Count = 2
; -> 'h':case: Probability = 0.00, Count = 1
; -> 'm':case: Probability = 0.00, Count = 1
; -> 's':case: Probability = 0.00, Count = 1
; -> '0':part: Probability = 0.00, Count = 1
; -> '\n':return: Probability = 0.00, Count = 1
; -> "%n": Probability = 0.00, Count = 1
; -> '\"':part: Probability = 0.00, Count = 1
; -> '\\':part: Probability = 0.00, Count = 1
; -> '*':if: Probability = 0.00, Count = 1
; -> CellFormatPart.expandChar: Probability = 0.00, Count = 1
; -> indexEnum.seek: Probability = 0.00, Count = 1
; -> didIndexNext: Probability = 0.00, Count = 1
; -> indexEnum.ord: Probability = 0.00, Count = 1
; -> _next: Probability = 0.00, Count = 1
; -> left--: Probability = 0.00, Count = 1
; -> this.min: Probability = 0.00, Count = 1
; -> getPassword: Probability = 0.00, Count = 1
; -> FieldInfo[nItems]: Probability = 0.00, Count = 1
; -> fis.length: Probability = 0.00, Count = 1
; -> fis[i]: Probability = 0.00, Count = 1
; -> EMPTY: Probability = 0.00, Count = 2
; -> Terms[]: Probability = 0.00, Count = 1
; -> "inefficient:: Probability = 0.00, Count = 1
; -> MultiTerms: Probability = 0.00, Count = 1
; -> over: Probability = 0.00, Count = 1
; -> sub": Probability = 0.00, Count = 1
; -> subs[i].hasFreqs: Probability = 0.00, Count = 1
; -> subs[i].hasOffsets: Probability = 0.00, Count = 1
; -> subs[i].hasPositions: Probability = 0.00, Count = 1
; -> subs[i].hasPayloads: Probability = 0.00, Count = 1
; -> hasFreqs: Probability = 0.00, Count = 1
; -> hasOffsets: Probability = 0.00, Count = 1
; -> getFully: Probability = 0.00, Count = 1
; -> now.at: Probability = 0.00, Count = 1
; -> skip--: Probability = 0.00, Count = 1
; -> i<header.length: Probability = 0.00, Count = 1
; -> _frAggs: Probability = 0.00, Count = 1
; -> FormulaRecordAggregate[width: Probability = 0.00, Count = 1
; -> height]: Probability = 0.00, Count = 1
; -> lastFormats.remove: Probability = 0.00, Count = 1
; -> ByteBlockPool.LEVEL_SIZE_ARRAY[level]: Probability = 0.00, Count = 1
; -> upto+newSize-4: Probability = 0.00, Count = 1
; -> IOUtils.safelyAllocate: Probability = 0.00, Count = 1
; -> i<size: Probability = 0.00, Count = 1
; -> t2.bytes: Probability = 0.00, Count = 1
; -> t2.docFreq: Probability = 0.00, Count = 1
; -> accept.get: Probability = 0.00, Count = 1
; -> transitions[i: Probability = 0.00, Count = 1
; -> j]: Probability = 0.00, Count = 1
; -> points[j]: Probability = 0.00, Count = 1
; -> points[j: Probability = 0.00, Count = 1
; -> 16: Probability = 0.00, Count = 1
; -> subset.add: Probability = 0.00, Count = 1
; -> packedIntsVersion: Probability = 0.00, Count = 1
; -> List<Ptg>: Probability = 0.00, Count = 1
; -> ptg.write: Probability = 0.00, Count = 1
; -> p.writeTokenValueBytes: Probability = 0.00, Count = 1
; -> out.getWriteIndex: Probability = 0.00, Count = 1
; -> enough: Probability = 0.00, Count = 1
; -> PAGE:title: Probability = 0.00, Count = 1
; -> BODY:case: Probability = 0.00, Count = 1
; -> DATE:case: Probability = 0.00, Count = 1
; -> TITLE:case: Probability = 0.00, Count = 1
; -> ID:contents.setLength: Probability = 0.00, Count = 1
; -> nColumns++: Probability = 0.00, Count = 1
; -> nRows++: Probability = 0.00, Count = 1
; -> getPtgClass: Probability = 0.00, Count = 1
; -> _plsContinues: Probability = 0.00, Count = 1
; -> MultiPostingsEnum.EnumWithSlice[slices.length]: Probability = 0.00, Count = 1
; -> i<slices.length: Probability = 0.00, Count = 1
; -> count": Probability = 0.00, Count = 1
; -> i<stat2.countsByTime.length: Probability = 0.00, Count = 1
; -> s.length: Probability = 0.00, Count = 1
; -> StringUtil.hasMultibyte: Probability = 0.00, Count = 2
; -> 0x04: Probability = 0.00, Count = 1
; -> mbk.getFirstColumn: Probability = 0.00, Count = 1
; -> br.setRow: Probability = 0.00, Count = 1
; -> mbk.getRow: Probability = 0.00, Count = 1
; -> br.setXFIndex: Probability = 0.00, Count = 1
; -> mbk.getXFAt: Probability = 0.00, Count = 1
; -> .getValue: Probability = 0.00, Count = 1
; -> lastEndOffset: Probability = 0.00, Count = 1
; -> lastPosLength: Probability = 0.00, Count = 1
; -> posLengths[upto]: Probability = 0.00, Count = 1
; -> outputs[upto++]: Probability = 0.00, Count = 1
; -> result.get: Probability = 0.00, Count = 1
; -> numGoodPoints: Probability = 0.00, Count = 1
; -> pReleventSum: Probability = 0.00, Count = 1
; -> docNamesExtractTime: Probability = 0.00, Count = 1
; -> totalSize: Probability = 0.00, Count = 1
; -> byte[totalSize]: Probability = 0.00, Count = 1
; -> Ptg.serializePtgs: Probability = 0.00, Count = 1
; -> preModify: Probability = 0.00, Count = 1
; -> addNewEntry: Probability = 0.00, Count = 1
; -> default:jj_la1[9]: Probability = 0.00, Count = 1
; -> label_8: Probability = 0.00, Count = 1
; -> CARAT: Probability = 0.00, Count = 1
; -> NUMBER: Probability = 0.00, Count = 1
; -> addBlock: Probability = 0.00, Count = 2
; -> Constants.OBJ_TAG:r: Probability = 0.00, Count = 1
; -> field_pictureData: Probability = 0.00, Count = 1
; -> levelW[i]: Probability = 0.00, Count = 1
; -> levelH[i]: Probability = 0.00, Count = 1
; -> _token: Probability = 0.00, Count = 1
; -> _hitEOF: Probability = 0.00, Count = 1
; -> Lexer.DEFAULT_MODE: Probability = 0.00, Count = 1
; -> _modeStack.clear: Probability = 0.00, Count = 1
; -> .reset: Probability = 0.00, Count = 1
; -> r.getChildCount: Probability = 0.00, Count = 1
; -> 0:_isError: Probability = 0.00, Count = 1
; -> 1:_isError: Probability = 0.00, Count = 1
; -> 4:w: Probability = 0.00, Count = 1
; -> expectedModCount++: Probability = 0.00, Count = 1
; -> list.size++: Probability = 0.00, Count = 1
; -> list.modCount++: Probability = 0.00, Count = 1
; -> "<error: Probability = 0.00, Count = 1
; -> usedCells.length-1: Probability = 0.00, Count = 1
; -> usedCells[i].clearConsumingCell: Probability = 0.00, Count = 1
; -> lastCount: Probability = 0.00, Count = 1
; -> PathFilter[length]: Probability = 0.00, Count = 1
; -> p[i]: Probability = 0.00, Count = 1
; -> paths[i]: Probability = 0.00, Count = 1
; -> CRNRecord[nCRNs]: Probability = 0.00, Count = 1
; -> crns.length: Probability = 0.00, Count = 1
; -> crns[i]: Probability = 0.00, Count = 1
; -> offset+2: Probability = 0.00, Count = 1
; -> i=maxnk: Probability = 0.00, Count = 1
return -> return: Probability = 0.99, Count = 8458
return -> CmpOp.EQ:: Probability = 0.00, Count = 1
return -> CmpOp.NE:: Probability = 0.00, Count = 1
return -> ;: Probability = 0.00, Count = 17
return -> escherSimpleProperty.getId: Probability = 0.00, Count = 1
return -> (: Probability = 0.00, Count = 31
return -> other.numDocs: Probability = 0.00, Count = 1
return -> ATN.INVALID_ALT_NUMBER: Probability = 0.00, Count = 1
return -> false: Probability = 0.00, Count = 3
return -> }: Probability = 0.00, Count = 3
return -> EMOJI_SEQUENCE_STATUS:return: Probability = 0.00, Count = 1
return -> resource.equals: Probability = 0.00, Count = 1
return -> ?: Probability = 0.00, Count = 1
return -> copy: Probability = 0.00, Count = 2
return -> properties.get: Probability = 0.00, Count = 1
return -> Arrays.equals: Probability = 0.00, Count = 1
return -> escherComplexProperty.complexData: Probability = 0.00, Count = 1
Invoke<ListSpeechSynthesisTasksResponse> -> executeListSpeechSynthesisTasks: Probability = 1.00, Count = 1
request, -> request: Probability = 1.00, Count = 2702
) -> ): Probability = 0.90, Count = 24746
) -> ;: Probability = 0.01, Count = 254
) -> cbHdrData: Probability = 0.00, Count = 1
) -> +_value: Probability = 0.00, Count = 1
) -> vectorsStream.getFilePointer: Probability = 0.00, Count = 1
) -> i<q.length: Probability = 0.00, Count = 1
) -> newline+formatQueryAsTrecTopic: Probability = 0.00, Count = 1
) -> i,q[i],null,null: Probability = 0.00, Count = 1
) -> reopenCond.signal: Probability = 0.00, Count = 1
) -> finally: Probability = 0.00, Count = 2
) -> reopenLock.unlock: Probability = 0.00, Count = 1
) -> startMS: Probability = 0.00, Count = 2
) -> /1000000: Probability = 0.00, Count = 2
) -> wait: Probability = 0.00, Count = 3
) -> :: Probability = 0.00, Count = 8
) -> {: Probability = 0.00, Count = 41
) -> CmpOp.NONE:: Probability = 0.00, Count = 1
) -> .matches: Probability = 0.00, Count = 1
) -> testedValue.compareToIgnoreCase: Probability = 0.00, Count = 1
) -> !_isSingleCell: Probability = 0.00, Count = 1
) -> CELL_DELIMITER: Probability = 0.00, Count = 1
) -> _lastCell.formatAsString: Probability = 0.00, Count = 1
) -> _lastCell.appendCellReference: Probability = 0.00, Count = 1
) -> Result.NO_CHANGE: Probability = 0.00, Count = 1
) -> doUpdate: Probability = 0.00, Count = 1
) -> new: Probability = 0.00, Count = 12
) -> (: Probability = 0.01, Count = 398
) -> ,: Probability = 0.00, Count = 25
) -> "prefixLength: Probability = 0.00, Count = 1
) -> negative.": Probability = 0.00, Count = 1
) -> r: Probability = 0.00, Count = 2
) -> =: Probability = 0.00, Count = 17
) -> +: Probability = 0.00, Count = 9
) -> "[/BOOKBOOL]\n": Probability = 0.00, Count = 1
) -> expired: Probability = 0.00, Count = 1
) -> obtaining: Probability = 0.00, Count = 1
) -> MatchNoDocsQuery: Probability = 0.00, Count = 2
) -> "Relative: Probability = 0.00, Count = 1
) -> path": Probability = 0.00, Count = 1
) -> PATH_ENCODER.appendEncoded: Probability = 0.00, Count = 1
) -> '?': Probability = 0.00, Count = 1
) -> '#': Probability = 0.00, Count = 1
) -> parseURI: Probability = 0.00, Count = 1
) -> "[/UNITS]\n": Probability = 0.00, Count = 1
) -> ris.readDouble: Probability = 0.00, Count = 1
) -> ris.readUByte: Probability = 0.00, Count = 1
) -> expression_len: Probability = 0.00, Count = 1
) -> ris.available: Probability = 0.00, Count = 1
) -> field_6_parsed_expr: Probability = 0.00, Count = 1
) -> ris,: Probability = 0.00, Count = 1
) -> exceptions[i]: Probability = 0.00, Count = 1
) -> field_5_sheetname: Probability = 0.00, Count = 2
) -> field_4_isMultibyteUnicode: Probability = 0.00, Count = 2
) -> "h": Probability = 0.00, Count = 1
) -> time,: Probability = 0.00, Count = 2
) -> LookupUtils.lookupIndexOfValue: Probability = 0.00, Count = 1
) -> lookupValue,: Probability = 0.00, Count = 1
) -> LookupUtils.createColumnVector: Probability = 0.00, Count = 1
) -> LookupUtils.resolveRowOrColIndexArg: Probability = 0.00, Count = 1
) -> resultCol: Probability = 0.00, Count = 1
) -> createResultColumnVector: Probability = 0.00, Count = 1
) -> resultCol.getItem: Probability = 0.00, Count = 1
) -> ",: Probability = 0.00, Count = 2
) -> Arrays.hashCode: Probability = 0.00, Count = 1
) -> entry.resolvedValue: Probability = 0.00, Count = 2
) -> ILLEGAL_STATE_READER: Probability = 0.00, Count = 1
) -> contract: Probability = 0.00, Count = 1
) -> violation:: Probability = 0.00, Count = 1
) -> missing": Probability = 0.00, Count = 2
) -> this.inputPending: Probability = 0.00, Count = 1
) -> setReaderTestPoint: Probability = 0.00, Count = 1
) -> /": Probability = 0.00, Count = 1
) -> hyphenator: Probability = 0.00, Count = 1
) -> AUTOMATON_TYPE.NORMAL: Probability = 0.00, Count = 1
) -> !runAutomaton.equals: Probability = 0.00, Count = 1
) -> other.runAutomaton: Probability = 0.00, Count = 1
) -> 0L: Probability = 0.00, Count = 2
) -> in.read: Probability = 0.00, Count = 5
) -> !=: Probability = 0.00, Count = 3
) -> e.value: Probability = 0.00, Count = 1
) -> NGramTokenFilter.DEFAULT_PRESERVE_ORIGINAL: Probability = 0.00, Count = 1
) -> post: Probability = 0.00, Count = 1
) -> throws: Probability = 0.00, Count = 2
) -> '\'':inquote: Probability = 0.00, Count = 1
) -> bytes[i].value: Probability = 0.00, Count = 1
) -> ADDINDEXES_INPUT_DIR: Probability = 0.00, Count = 1
) -> configuration": Probability = 0.00, Count = 1
) -> inputDir: Probability = 0.00, Count = 1
) -> 0x7f: Probability = 0.00, Count = 3
) -> maxCol: Probability = 0.00, Count = 1
) -> col,: Probability = 0.00, Count = 2
) -> _firstCell.isRowAbsolute: Probability = 0.00, Count = 1
) -> _firstCell.isColAbsolute: Probability = 0.00, Count = 1
) -> refs.toArray: Probability = 0.00, Count = 1
) -> CellReference[0]: Probability = 0.00, Count = 1
) -> entries.keySet: Probability = 0.00, Count = 2
) -> x++: Probability = 0.00, Count = 3
) -> getConstantText: Probability = 0.00, Count = 1
) -> "outputUnigramsIfNoShingles",: Probability = 0.00, Count = 1
) -> "tokenSeparator",: Probability = 0.00, Count = 1
) -> ShingleFilter.DEFAULT_TOKEN_SEPARATOR: Probability = 0.00, Count = 1
) -> "fillerToken",: Probability = 0.00, Count = 1
) -> ShingleFilter.DEFAULT_FILLER_TOKEN: Probability = 0.00, Count = 1
) -> "failed",: Probability = 0.00, Count = 1
) -> writeMonitor.isCancelled: Probability = 0.00, Count = 1
) -> .packingCancelledDuringObjectsWriting: Probability = 0.00, Count = 1
) -> List<EscherRecord>: Probability = 0.00, Count = 1
) -> searchForPictures: Probability = 0.00, Count = 1
) -> escherRecords,: Probability = 0.00, Count = 1
) -> Collections.unmodifiableList: Probability = 0.00, Count = 1
) -> iterator.next: Probability = 0.00, Count = 2
) -> mergeResult.toString: Probability = 0.00, Count = 1
) -> rebaseResult: Probability = 0.00, Count = 1
) -> rebaseResult.toString: Probability = 0.00, Count = 1
) -> SnowballStemmer>: Probability = 0.00, Count = 1
) -> stemClass: Probability = 0.00, Count = 1
) -> Version.class: Probability = 0.00, Count = 1
) -> NoSuchMethodException: Probability = 0.00, Count = 1
) -> .horizontalBorder: Probability = 0.00, Count = 1
) -> .verticalBorder: Probability = 0.00, Count = 1
) -> .border: Probability = 0.00, Count = 1
) -> .showSeriesKey: Probability = 0.00, Count = 1
) -> "[/DAT]\n": Probability = 0.00, Count = 1
) -> "maxThreadCount=": Probability = 0.00, Count = 1
) -> "ioThrottle=": Probability = 0.00, Count = 1
) -> doAutoIOThrottle: Probability = 0.00, Count = 1
) -> "[/CATLAB]\n": Probability = 0.00, Count = 1
) -> "[/PROT4REVPASSWORD]\n": Probability = 0.00, Count = 1
) -> BoolEval.valueOf: Probability = 0.00, Count = 1
) -> s0.equals: Probability = 0.00, Count = 1
) -> blockShift: Probability = 0.00, Count = 2
) -> minValues: Probability = 0.00, Count = 1
) -> minValues[block]: Probability = 0.00, Count = 1
) -> "Version",: Probability = 0.00, Count = 1
) -> "2010-05-08": Probability = 0.00, Count = 1
) -> HttpMethodName.POST: Probability = 0.00, Count = 1
) -> !authority.equals: Probability = 0.00, Count = 1
) -> thisPath.substring: Probability = 0.00, Count = 1
) -> thisPath.lastIndexOf: Probability = 0.00, Count = 1
) -> !relativePath.startsWith: Probability = 0.00, Count = 1
) -> BytesRef,: Probability = 0.00, Count = 1
) -> used": Probability = 0.00, Count = 1
) -> "[/STARTBLOCK]\n": Probability = 0.00, Count = 1
) -> terms.size: Probability = 0.00, Count = 1
) -> this: Probability = 0.00, Count = 7
) -> @SuppressWarnings: Probability = 0.00, Count = 2
) -> "unchecked": Probability = 0.00, Count = 2
) -> taxonomyWriter.commit: Probability = 0.00, Count = 1
) -> userDictionaryPath: Probability = 0.00, Count = 1
) -> USER_DICT_PATH: Probability = 0.00, Count = 1
) -> userDictionaryEncoding: Probability = 0.00, Count = 1
) -> USER_DICT_ENCODING: Probability = 0.00, Count = 1
) -> nbestExamples: Probability = 0.00, Count = 1
) -> NBEST_EXAMPLES: Probability = 0.00, Count = 1
) -> 0: Probability = 0.00, Count = 16
) -> Long.valueOf: Probability = 0.00, Count = 5
) -> e: Probability = 0.00, Count = 2
) -> .seek: Probability = 0.00, Count = 1
) -> _errHandler.reset: Probability = 0.00, Count = 1
) -> _syntaxErrors: Probability = 0.00, Count = 1
) -> matchedEOF: Probability = 0.00, Count = 2
) -> .mask: Probability = 0.00, Count = 1
) -> o2.getName: Probability = 0.00, Count = 3
) -> tme: Probability = 0.00, Count = 1
) -> Math.min: Probability = 0.00, Count = 3
) -> NoMoreDataException: Probability = 0.00, Count = 1
) -> order_value: Probability = 0.00, Count = 1
) -> order_value==0: Probability = 0.00, Count = 1
) -> order_value==1: Probability = 0.00, Count = 1
) -> externalRecord: Probability = 0.00, Count = 1
) -> .equals: Probability = 0.00, Count = 5
) -> oldUrl: Probability = 0.00, Count = 1
) -> externalRecord.setURL: Probability = 0.00, Count = 1
) -> InvocationTargetException: Probability = 0.00, Count = 1
) -> d: Probability = 0.00, Count = 3
) -> CryptoFunctions.createXorVerifier1: Probability = 0.00, Count = 2
) -> Locale.ROOT: Probability = 0.00, Count = 7
) -> .getHost: Probability = 0.00, Count = 2
) -> elseargs.add: Probability = 0.00, Count = 1
) -> pb: Probability = 0.00, Count = 1
) -> createProcess: Probability = 0.00, Count = 1
) -> pb.start: Probability = 0.00, Count = 1
) -> err.getMessage: Probability = 0.00, Count = 1
) -> isDeltaRepresentation: Probability = 0.00, Count = 1
) -> base=inpack:": Probability = 0.00, Count = 1
) -> elsebuf.append: Probability = 0.00, Count = 1
) -> base=edge:": Probability = 0.00, Count = 1
) -> scratch.clear: Probability = 0.00, Count = 1
) -> true: Probability = 0.00, Count = 2
) -> other.estimatedSegmentSize: Probability = 0.00, Count = 1
) -> null: Probability = 0.00, Count = 15
) -> NORMAL:return: Probability = 0.00, Count = 1
) -> terms.intersect: Probability = 0.00, Count = 1
) -> "unhandled: Probability = 0.00, Count = 1
) -> Boolean.valueOf: Probability = 0.00, Count = 4
) -> slop: Probability = 0.00, Count = 2
) -> s.toString: Probability = 0.00, Count = 1
) -> PColor: Probability = 0.00, Count = 1
) -> _colors.get: Probability = 0.00, Count = 1
) -> "": Probability = 0.00, Count = 3
) -> ++pos: Probability = 0.00, Count = 1
) -> "[/COLINFO]\n": Probability = 0.00, Count = 1
) -> ",": Probability = 0.00, Count = 1
) -> 0xffff: Probability = 0.00, Count = 3
) -> PhraseQuery: Probability = 0.00, Count = 1
) -> slop,: Probability = 0.00, Count = 2
) -> property.getPropertyValue: Probability = 0.00, Count = 1
) -> .removeEscherProperty: Probability = 0.00, Count = 1
) -> !=Token.EOF: Probability = 0.00, Count = 2
) -> >1: Probability = 0.00, Count = 2
) -> COMMA: Probability = 0.00, Count = 4
) -> String[result.size: Probability = 0.00, Count = 2
) -> /Math.pow: Probability = 0.00, Count = 1
) -> xcell: Probability = 0.00, Count = 1
) -> findFirstRow: Probability = 0.00, Count = 1
) -> _sheet.removeRow: Probability = 0.00, Count = 1
) -> hrow.getRowRecord: Probability = 0.00, Count = 1
) -> checkCancelled: Probability = 0.00, Count = 2
) -> d.length: Probability = 0.00, Count = 1
) -> notAnObject: Probability = 0.00, Count = 1
) -> p.hasObject: Probability = 0.00, Count = 1
) -> fieldNames: Probability = 0.00, Count = 1
) -> boost: Probability = 0.00, Count = 1
) -> other.accept: Probability = 0.00, Count = 1
) -> other.transitions: Probability = 0.00, Count = 1
) -> .lengthExceedsMaximumArraySize: Probability = 0.00, Count = 2
) -> len]: Probability = 0.00, Count = 1
) -> .xfindex=: Probability = 0.00, Count = 1
) -> appendValueText: Probability = 0.00, Count = 1
) -> ": Probability = 0.00, Count = 7
) -> ==: Probability = 0.00, Count = 4
) -> ?: Probability = 0.00, Count = 2
) -> ignoreCase: Probability = 0.00, Count = 1
) -> Float.floatToIntBits: Probability = 0.00, Count = 1
) -> TermsReader: Probability = 0.00, Count = 1
) -> HEXADECIMAL_BASE,: Probability = 0.00, Count = 1
) -> Constants.R_STASH: Probability = 0.00, Count = 2
) -> Collections.emptyList: Probability = 0.00, Count = 7
) -> .cannotRead,: Probability = 0.00, Count = 2
) -> refLog.setRef: Probability = 0.00, Count = 1
) -> stashCommits: Probability = 0.00, Count = 2
) -> entry.getNewId: Probability = 0.00, Count = 2
) -> .cannotReadCommit,: Probability = 0.00, Count = 1
) -> ,e: Probability = 0.00, Count = 1
) -> byte: Probability = 0.00, Count = 3
) -> p.getEmailAddress: Probability = 0.00, Count = 1
) -> null,: Probability = 0.00, Count = 1
) -> reader,: Probability = 0.00, Count = 2
) -> Integer.toBinaryString: Probability = 0.00, Count = 1
) -> binary.substring: Probability = 0.00, Count = 1
) -> b[0]: Probability = 0.00, Count = 2
) -> b[1]: Probability = 0.00, Count = 2
) -> CustomColor: Probability = 0.00, Count = 1
) -> Term: Probability = 0.00, Count = 1
) -> toAutomaton: Probability = 0.00, Count = 2
) -> been: Probability = 0.00, Count = 1
) -> store: Probability = 0.00, Count = 1
) -> bytes": Probability = 0.00, Count = 1
) -> s.edges.length: Probability = 0.00, Count = 1
) -> t.stateNumber: Probability = 0.00, Count = 1
) -> getEdgeLabel: Probability = 0.00, Count = 1
) -> isxvd: Probability = 0.00, Count = 1
) -> .isxvi: Probability = 0.00, Count = 1
) -> isxvi: Probability = 0.00, Count = 1
) -> .ifmt: Probability = 0.00, Count = 1
) -> ifmt: Probability = 0.00, Count = 1
) -> "[/SXDI]\n": Probability = 0.00, Count = 1
) -> 0,: Probability = 0.00, Count = 4
) -> look[alt].size: Probability = 0.00, Count = 1
) -> look[alt].contains: Probability = 0.00, Count = 1
) -> HIT_PRED: Probability = 0.00, Count = 1
) -> createBasePtg: Probability = 0.00, Count = 1
) -> createClassifiedPtg: Probability = 0.00, Count = 1
) -> 0x60: Probability = 0.00, Count = 1
) -> this.ord: Probability = 0.00, Count = 1
) -> c==': Probability = 0.00, Count = 1
) -> '\u00B7': Probability = 0.00, Count = 1
) -> c=='\t': Probability = 0.00, Count = 1
) -> c=='\n': Probability = 0.00, Count = 1
) -> NumberFormat.getNumberInstance: Probability = 0.00, Count = 1
) -> .format: Probability = 0.00, Count = 1
) -> runTimeSec: Probability = 0.00, Count = 1
) -> 's': Probability = 0.00, Count = 1
) -> repetitions>1: Probability = 0.00, Count = 1
) -> EXHAUST": Probability = 0.00, Count = 1
) -> rate>0: Probability = 0.00, Count = 1
) -> rate:: Probability = 0.00, Count = 1
) -> '/': Probability = 0.00, Count = 1
) -> "min": Probability = 0.00, Count = 1
) -> "sec": Probability = 0.00, Count = 1
) -> getRunInBackground: Probability = 0.00, Count = 2
) -> &": Probability = 0.00, Count = 2
) -> +cr.formatAsString: Probability = 0.00, Count = 1
) -> GhCell: Probability = 0.00, Count = 1
) -> Double.valueOf: Probability = 0.00, Count = 2
) -> false: Probability = 0.00, Count = 1
) -> .collevelmax: Probability = 0.00, Count = 1
) -> getColLevelMax: Probability = 0.00, Count = 1
) -> "[/GUTS]\n": Probability = 0.00, Count = 1
) -> createBlockIfNeeded: Probability = 0.00, Count = 1
) -> buffer.put: Probability = 0.00, Count = 2
) -> readCompressedUnicode: Probability = 0.00, Count = 1
) -> .getText: Probability = 0.00, Count = 2
) -> decision,: Probability = 0.00, Count = 1
) -> conflictingAlts,: Probability = 0.00, Count = 1
) -> recognizer.notifyErrorListeners: Probability = 0.00, Count = 2
) -> _cItm: Probability = 0.00, Count = 1
) -> STRING_NOT_PRESENT_LEN: Probability = 0.00, Count = 2
) -> parser.getRuleNames: Probability = 0.00, Count = 1
) -> ,parser.getATNWithBypassAlts: Probability = 0.00, Count = 1
) -> ,tokens: Probability = 0.00, Count = 1
) -> parserInterp.setErrorHandler: Probability = 0.00, Count = 1
) -> e.getCause: Probability = 0.00, Count = 1
) -> CannotInvokeStartRule: Probability = 0.00, Count = 1
) -> tokens.LA: Probability = 0.00, Count = 2
) -> StartRuleDoesNotConsumeFullPattern: Probability = 0.00, Count = 1
) -> runData.setIndexReader: Probability = 0.00, Count = 2
) -> Thread.sleep: Probability = 0.00, Count = 1
) -> DirectoryReader.openIfChanged: Probability = 0.00, Count = 1
) -> delay: Probability = 0.00, Count = 2
) -> -t: Probability = 0.00, Count = 1
) -> reopenTimes.length: Probability = 0.00, Count = 1
) -> reopenTimes: Probability = 0.00, Count = 1
) -> reopenTimes,: Probability = 0.00, Count = 1
) -> 1+reopenCount: Probability = 0.00, Count = 1
) -> reopenTimes[reopenCount++]: Probability = 0.00, Count = 1
) -> PathFilterGroup.createFromStrings: Probability = 0.00, Count = 4
) -> generator.next: Probability = 0.00, Count = 1
) -> statuses.put: Probability = 0.00, Count = 1
) -> status.getPath: Probability = 0.00, Count = 1
) -> statuses: Probability = 0.00, Count = 1
) -> |: Probability = 0.00, Count = 2
) -> getVCenter: Probability = 0.00, Count = 1
) -> bytes.length,: Probability = 0.00, Count = 1
) -> DataFormatException: Probability = 0.00, Count = 1
) -> !decompressor.finished: Probability = 0.00, Count = 1
) -> decompressor.needsInput: Probability = 0.00, Count = 1
) -> needsDict=": Probability = 0.00, Count = 1
) -> isAutoSize: Probability = 0.00, Count = 1
) -> .autoPosition: Probability = 0.00, Count = 1
) -> isAutoPosition: Probability = 0.00, Count = 1
) -> "[/FRAME]\n": Probability = 0.00, Count = 1
) -> .cItm: Probability = 0.00, Count = 1
) -> "[/SXVD]\n": Probability = 0.00, Count = 1
) -> field_6_name_text: Probability = 0.00, Count = 1
) -> field_7_comment_text: Probability = 0.00, Count = 1
) -> "[/NAMECMT]\n": Probability = 0.00, Count = 1
) -> .string_": Probability = 0.00, Count = 1
) -> s.getDebugInfo: Probability = 0.00, Count = 1
) -> "[/SST]\n": Probability = 0.00, Count = 1
) -> field_5_zero: Probability = 0.00, Count = 2
) -> 2: Probability = 0.00, Count = 3
) -> !isValidSchemeChar: Probability = 0.00, Count = 1
) -> Locale.US: Probability = 0.00, Count = 2
) -> tokArgs.put: Probability = 0.00, Count = 2
) -> "luceneMatchVersion",: Probability = 0.00, Count = 1
) -> getLuceneMatchVersion: Probability = 0.00, Count = 1
) -> .toString: Probability = 0.00, Count = 3
) -> itr: Probability = 0.00, Count = 2
) -> args.keySet: Probability = 0.00, Count = 1
) -> itr.hasNext: Probability = 0.00, Count = 2
) -> itr.next: Probability = 0.00, Count = 3
) -> key.replaceAll: Probability = 0.00, Count = 1
) -> "^tokenizerFactory\\.","": Probability = 0.00, Count = 1
) -> args.get: Probability = 0.00, Count = 1
) -> itr.remove: Probability = 0.00, Count = 1
) -> e.getValue: Probability = 0.00, Count = 1
) -> FORMAT_WORDSET: Probability = 0.00, Count = 1
) -> gen.push: Probability = 0.00, Count = 1
) -> startCommit: Probability = 0.00, Count = 1
) -> gen.prepareHead: Probability = 0.00, Count = 1
) -> gen.computeBlameResult: Probability = 0.00, Count = 1
) -> buf[pos++]: Probability = 0.00, Count = 1
) -> field_6_refs.length: Probability = 0.00, Count = 2
) -> affixFile: Probability = 0.00, Count = 3
) -> "Hunspell": Probability = 0.00, Count = 1
) -> affix,: Probability = 0.00, Count = 1
) -> IOUtils.rm: Probability = 0.00, Count = 1
) -> "]",: Probability = 0.00, Count = 1
) -> .char_offset=: Probability = 0.00, Count = 1
) -> ",.fontidx=: Probability = 0.00, Count = 1
) -> ctf.getFontIndex: Probability = 0.00, Count = 1
) -> "[/CHARTTITLEFORMAT]\n": Probability = 0.00, Count = 1
) -> ==1: Probability = 0.00, Count = 2
) -> name: Probability = 0.00, Count = 2
) -> .packfileCorruptionDetected,JGitText.get: Probability = 0.00, Count = 1
) -> .unknownZlibError: Probability = 0.00, Count = 1
) -> actualSize: Probability = 0.00, Count = 1
) -> .packfileCorruptionDetected,: Probability = 0.00, Count = 1
) -> dfe.getMessage: Probability = 0.00, Count = 1
) -> elseprotocols.remove: Probability = 0.00, Count = 1
) -> EXTERNALBOOK: Probability = 0.00, Count = 1
) -> lexerAction.isPositionDependent: Probability = 0.00, Count = 1
) -> instanceof: Probability = 0.00, Count = 1
) -> _cfHeaders.add: Probability = 0.00, Count = 1
) -> .text: Probability = 0.00, Count = 2
) -> SizeOf.INT: Probability = 0.00, Count = 1
) -> setFormula1: Probability = 0.00, Count = 1
) -> field_3_formula1_len,: Probability = 0.00, Count = 1
) -> count+1: Probability = 0.00, Count = 1
) -> parent!=null: Probability = 0.00, Count = 1
) -> "[/BottomMargin]\n": Probability = 0.00, Count = 1
) -> b,0,b.length: Probability = 0.00, Count = 1
) -> rp.getRefLogIdent: Probability = 0.00, Count = 1
) -> ru.setRefLogMessage: Probability = 0.00, Count = 1
) -> ru.setExpectedOldObjectId: Probability = 0.00, Count = 2
) -> ru.setForceUpdate: Probability = 0.00, Count = 1
) -> rp.getRevWalk: Probability = 0.00, Count = 2
) -> rp.isAllowNonFastForwards: Probability = 0.00, Count = 1
) -> "push",: Probability = 0.00, Count = 1
) -> ru.link: Probability = 0.00, Count = 1
) -> ru.setNewObjectId: Probability = 0.00, Count = 1
) -> ru.update: Probability = 0.00, Count = 1
) -> reject: Probability = 0.00, Count = 1
) -> bypass: Probability = 0.00, Count = 1
) -> alternatives.": Probability = 0.00, Count = 1
) -> bypassAltsAtnCache: Probability = 0.00, Count = 1
) -> bypassAltsAtnCache.get: Probability = 0.00, Count = 1
) -> deserializationOptions.setGenerateRuleBypassTransitions: Probability = 0.00, Count = 1
) -> serializedAtn.toCharArray: Probability = 0.00, Count = 1
) -> cache.put: Probability = 0.00, Count = 1
) -> r.add: Probability = 0.00, Count = 2
) -> Collections.reverse: Probability = 0.00, Count = 2
) -> strategy.equalValues: Probability = 0.00, Count = 1
) -> v,: Probability = 0.00, Count = 1
) -> buffer: Probability = 0.00, Count = 2
) -> "[/INTERFACEHDR]\n": Probability = 0.00, Count = 1
) -> value=": Probability = 0.00, Count = 1
) -> childCount=": Probability = 0.00, Count = 1
) -> childCount: Probability = 0.00, Count = 1
) -> labelValues: Probability = 0.00, Count = 1
) -> type.indexOptions: Probability = 0.00, Count = 3
) -> Arrays.asList: Probability = 0.00, Count = 3
) -> .nextDoc: Probability = 0.00, Count = 3
) -> queue.pop: Probability = 0.00, Count = 2
) -> queue.updateTop: Probability = 0.00, Count = 2
) -> [len=": Probability = 0.00, Count = 1
) -> recognizer.getInterpreter: Probability = 0.00, Count = 2
) -> .atn.states.get: Probability = 0.00, Count = 2
) -> recognizer.getState: Probability = 0.00, Count = 2
) -> .opnds: Probability = 0.00, Count = 2
) -> List<PrecedencePredicate>: Probability = 0.00, Count = 1
) -> precedencePredicates: Probability = 0.00, Count = 2
) -> filterPrecedencePredicates: Probability = 0.00, Count = 1
) -> !precedencePredicates.isEmpty: Probability = 0.00, Count = 1
) -> Collections.min: Probability = 0.00, Count = 1
) -> operands.toArray: Probability = 0.00, Count = 1
) -> SemanticContext[operands.size: Probability = 0.00, Count = 1
) -> .getSid: Probability = 0.00, Count = 1
) -> e.toString: Probability = 0.00, Count = 1
) -> m.group: Probability = 0.00, Count = 1
) -> realSign: Probability = 0.00, Count = 2
) -> Imaginary.GROUP2_IMAGINARY_INTEGER_OR_DOUBLE: Probability = 0.00, Count = 1
) -> groupRealNumber.length: Probability = 0.00, Count = 1
) -> anchor.getCol1: Probability = 0.00, Count = 2
) -> anchor.setDx2: Probability = 0.00, Count = 1
) -> pref.getDx2: Probability = 0.00, Count = 1
) -> anchor.setRow2: Probability = 0.00, Count = 1
) -> anchor.setDy2: Probability = 0.00, Count = 1
) -> pref.getDy2: Probability = 0.00, Count = 1
) -> cts: Probability = 0.00, Count = 1
) -> Constants.R_HEADS: Probability = 0.00, Count = 1
) -> notes.add: Probability = 0.00, Count = 1
) -> i.next: Probability = 0.00, Count = 2
) -> field_3_type: Probability = 0.00, Count = 1
) -> getSheetname: Probability = 0.00, Count = 1
) -> 1: Probability = 0.00, Count = 5
) -> HttpMethodName.DELETE: Probability = 0.00, Count = 2
) -> kRaw[kPtr++]: Probability = 0.00, Count = 1
) -> addContextToParseTree: Probability = 0.00, Count = 1
) -> RawParseUtils.decode: Probability = 0.00, Count = 2
) -> ']': Probability = 0.00, Count = 2
) -> getActiveCellCol: Probability = 0.00, Count = 1
) -> .activecellref: Probability = 0.00, Count = 1
) -> getActiveCellRef: Probability = 0.00, Count = 1
) -> .numrefs: Probability = 0.00, Count = 1
) -> +"[/SELECTION]\n": Probability = 0.00, Count = 1
) -> segments_N: Probability = 0.00, Count = 1
) -> check: Probability = 0.00, Count = 1
) -> Revision: Probability = 0.00, Count = 1
) -> other.expression: Probability = 0.00, Count = 1
) -> other.expression.sourceText: Probability = 0.00, Count = 1
) -> 1+mid: Probability = 0.00, Count = 1
) -> target.compareTo: Probability = 0.00, Count = 1
) -> LOCALE:TimeZone: Probability = 0.00, Count = 1
) -> dateTimeInstance2.setTimeZone: Probability = 0.00, Count = 1
) -> dateTimeInstance2.format: Probability = 0.00, Count = 1
) -> default:tz: Probability = 0.00, Count = 1
) -> .atn,parser.getInterpreter: Probability = 0.00, Count = 1
) -> else: Probability = 0.00, Count = 4
) -> setUriPattern: Probability = 0.00, Count = 1
) -> setMethod: Probability = 0.00, Count = 1
) -> ffl.add: Probability = 0.00, Count = 1
) -> "useless: Probability = 0.00, Count = 1
) -> similarity,: Probability = 0.00, Count = 1
) -> TreeMap<>: Probability = 0.00, Count = 2
) -> fieldAndWeights: Probability = 0.00, Count = 1
) -> 0x00FFFF: Probability = 0.00, Count = 1
) -> n: Probability = 0.00, Count = 2
) -> path.components.length: Probability = 0.00, Count = 1
) -> ].equals: Probability = 0.00, Count = 2
) -> ^: Probability = 0.00, Count = 2
) -> cache.get: Probability = 0.00, Count = 1
) -> *: Probability = 0.00, Count = 1
) -> generator.getConfigUrl: Probability = 0.00, Count = 1
) -> config.setString: Probability = 0.00, Count = 1
) -> ConfigConstants.CONFIG_SUBMODULE_SECTION,name,: Probability = 0.00, Count = 1
) -> ConfigConstants.CONFIG_KEY_UPDATE,: Probability = 0.00, Count = 1
) -> initialized.add: Probability = 0.00, Count = 1
) -> !initialized.isEmpty: Probability = 0.00, Count = 1
) -> config.save: Probability = 0.00, Count = 1
) -> initialized: Probability = 0.00, Count = 1
) -> +_functionName: Probability = 0.00, Count = 1
) -> subReaders.get: Probability = 0.00, Count = 2
) -> subReaders.size: Probability = 0.00, Count = 1
) -> iwc.setMergePolicy: Probability = 0.00, Count = 1
) -> UpgradeIndexMergePolicy: Probability = 0.00, Count = 1
) -> iwc.getMergePolicy: Probability = 0.00, Count = 1
) -> iwc.setIndexDeletionPolicy: Probability = 0.00, Count = 1
) -> KeepOnlyLastCommitDeletionPolicy: Probability = 0.00, Count = 1
) -> Version.LATEST: Probability = 0.00, Count = 1
) -> rewrite: Probability = 0.00, Count = 1
) -> metadata...": Probability = 0.00, Count = 1
) -> w.setLiveCommitData: Probability = 0.00, Count = 1
) -> w.getLiveCommitData: Probability = 0.00, Count = 1
) -> w.hasUncommittedChanges: Probability = 0.00, Count = 1
) -> w.commit: Probability = 0.00, Count = 1
) -> "Committed: Probability = 0.00, Count = 1
) -> metadata: Probability = 0.00, Count = 1
) -> index.": Probability = 0.00, Count = 2
) -> CF_METAFILEPICT: Probability = 0.00, Count = 1
) -> info: Probability = 0.00, Count = 1
) -> EncryptedDocumentException: Probability = 0.00, Count = 2
) -> GeneralSecurityException: Probability = 0.00, Count = 1
) -> info,: Probability = 0.00, Count = 1
) -> _initialRecordsSize: Probability = 0.00, Count = 1
) -> field": Probability = 0.00, Count = 1
) -> currentRef.getName: Probability = 0.00, Count = 1
) -> result.add: Probability = 0.00, Count = 3
) -> invokingState: Probability = 0.00, Count = 1
) -> invokingState.transition: Probability = 0.00, Count = 1
) -> rt.followState: Probability = 0.00, Count = 1
) -> ctx.parent: Probability = 0.00, Count = 1
) -> expected.add: Probability = 0.00, Count = 1
) -> .getName: Probability = 0.00, Count = 1
) -> QUOTED:case: Probability = 0.00, Count = 1
) -> TERM:case: Probability = 0.00, Count = 1
) -> REGEXPTERM:case: Probability = 0.00, Count = 1
) -> RANGEIN_START:case: Probability = 0.00, Count = 1
) -> RANGEEX_START:case: Probability = 0.00, Count = 1
) -> NUMBER:: Probability = 0.00, Count = 1
) -> default:jj_la1[2]: Probability = 0.00, Count = 1
) -> label_1: Probability = 0.00, Count = 2
) -> m.getModifier: Probability = 0.00, Count = 1
) -> Arrays.<QueryNode>: Probability = 0.00, Count = 1
) -> UTF_8: Probability = 0.00, Count = 1
) -> bos.toByteArray: Probability = 0.00, Count = 1
) -> LockFile: Probability = 0.00, Count = 2
) -> lf: Probability = 0.00, Count = 1
) -> !lf.lock: Probability = 0.00, Count = 1
) -> lf.setNeedSnapshot: Probability = 0.00, Count = 1
) -> lf.write: Probability = 0.00, Count = 1
) -> !lf.commit: Probability = 0.00, Count = 1
) -> .cannotCommitWriteTo,: Probability = 0.00, Count = 1
) -> lf.unlock: Probability = 0.00, Count = 1
) -> lf.getCommitSnapshot: Probability = 0.00, Count = 1
) -> fireConfigChangedEvent: Probability = 0.00, Count = 1
) -> if: Probability = 0.00, Count = 2
) -> EOFException: Probability = 0.00, Count = 4
) -> BPV_SHIFT: Probability = 0.00, Count = 1
) -> MIN_VALUE_EQUALS_0: Probability = 0.00, Count = 1
) -> readVLong: Probability = 0.00, Count = 1
) -> blockBytes: Probability = 0.00, Count = 2
) -> PackedInts.Format.PACKED.byteCount: Probability = 0.00, Count = 1
) -> refill: Probability = 0.00, Count = 1
) -> this.segments: Probability = 0.00, Count = 1
) -> buf.length: Probability = 0.00, Count = 2
) -> c: Probability = 0.00, Count = 1
) -> !contains: Probability = 0.00, Count = 2
) -> output: Probability = 0.00, Count = 3
) -> nextFinalOutput=": Probability = 0.00, Count = 1
) -> .formatstring: Probability = 0.00, Count = 1
) -> "[/FORMAT]\n": Probability = 0.00, Count = 1
) -> Impl.this.remove: Probability = 0.00, Count = 2
) -> operation='or'/>": Probability = 0.00, Count = 1
) -> 0xFF: Probability = 0.00, Count = 2
) -> format.substring: Probability = 0.00, Count = 1
) -> subStart,pos: Probability = 0.00, Count = 1
) -> size: Probability = 0.00, Count = 1
) -> ec.findUserDefinedFunction: Probability = 0.00, Count = 1
) -> FileMode.SYMLINK.equals: Probability = 0.00, Count = 1
) -> }: Probability = 0.00, Count = 4
) -> .notASCIIString,: Probability = 0.00, Count = 1
) -> r[k]: Probability = 0.00, Count = 1
) -> bQuery.add: Probability = 0.00, Count = 2
) -> Integer.parseInt: Probability = 0.00, Count = 2
) -> lastSheet=": Probability = 0.00, Count = 1
) -> current="+: Probability = 0.00, Count = 1
) -> oldRevision.decRef: Probability = 0.00, Count = 1
) -> checkExpiredSessions: Probability = 0.00, Count = 1
) -> System.out.print: Probability = 0.00, Count = 1
) -> progressMonitor: Probability = 0.00, Count = 1
) -> diff.diff: Probability = 0.00, Count = 1
) -> progressMonitor,: Probability = 0.00, Count = 1
) -> ProgressMonitor.UNKNOWN,ProgressMonitor.UNKNOWN,: Probability = 0.00, Count = 1
) -> '_': Probability = 0.00, Count = 2
) -> segmentSuffix: Probability = 0.00, Count = 1
) -> exists: Probability = 0.00, Count = 1
) -> sheet: Probability = 0.00, Count = 1
) -> contexts": Probability = 0.00, Count = 3
) -> JaspellTernarySearchTrie: Probability = 0.00, Count = 1
) -> iterator.weight: Probability = 0.00, Count = 2
) -> spare.length: Probability = 0.00, Count = 1
) -> charsSpare.copyUTF8Bytes: Probability = 0.00, Count = 2
) -> trie.put: Probability = 0.00, Count = 1
) -> charsSpare.toString: Probability = 0.00, Count = 2
) -> frame.getCCE: Probability = 0.00, Count = 1
) -> specified.: Probability = 0.00, Count = 1
) -> _evaluationFrames.remove: Probability = 0.00, Count = 1
) -> _currentlyEvaluatingCells.remove: Probability = 0.00, Count = 1
) -> Constants.OBJ_BLOB: Probability = 0.00, Count = 1
) -> actuallyDeletedFiles.add: Probability = 0.00, Count = 1
) -> relativePath: Probability = 0.00, Count = 1
) -> builder.commit: Probability = 0.00, Count = 1
) -> .exceptionCaughtDuringExecutionOfRmCommand,: Probability = 0.00, Count = 1
) -> dc.unlock: Probability = 0.00, Count = 1
) -> !actuallyDeletedFiles.isEmpty: Probability = 0.00, Count = 1
) -> repo.fireEvent: Probability = 0.00, Count = 1
) -> WorkingTreeModifiedEvent: Probability = 0.00, Count = 1
) -> null,actuallyDeletedFiles: Probability = 0.00, Count = 1
) -> blocksToRead,: Probability = 0.00, Count = 1
) -> nextBlocks.length,: Probability = 0.00, Count = 1
) -> bulkOperation.decode: Probability = 0.00, Count = 1
) -> .getValue: Probability = 0.00, Count = 1
) -> ref.getName: Probability = 0.00, Count = 1
) -> AnyObjectId.isEqual: Probability = 0.00, Count = 1
) -> ts.end: Probability = 0.00, Count = 2
) -> constructing: Probability = 0.00, Count = 1
) -> index:": Probability = 0.00, Count = 1
) -> bq.build: Probability = 0.00, Count = 2
) -> "boost",: Probability = 0.00, Count = 3
) -> 1.0f: Probability = 0.00, Count = 3
) -> BoostQuery: Probability = 0.00, Count = 2
) -> q,: Probability = 0.00, Count = 1
) -> path.getComponent: Probability = 0.00, Count = 1
) -> "[/STARTOBJECT]\n": Probability = 0.00, Count = 1
) -> .packetSizeMustBeAtMost,: Probability = 0.00, Count = 1
) -> ,Integer.valueOf: Probability = 0.00, Count = 1
) -> byte[sz]: Probability = 0.00, Count = 1
) -> buffer[4]: Probability = 0.00, Count = 1
) -> "[/COUNTRY]\n": Probability = 0.00, Count = 1
) -> Files.newBufferedWriter: Probability = 0.00, Count = 1
) -> contents.toString: Probability = 0.00, Count = 1
) -> field_1_username: Probability = 0.00, Count = 2
) -> "unknown: Probability = 0.00, Count = 1
) -> "+e.getClass: Probability = 0.00, Count = 1
) -> e.getOffendingToken: Probability = 0.00, Count = 1
) -> spContainer.getChildRecords: Probability = 0.00, Count = 1
) -> ch.getRecordId: Probability = 0.00, Count = 1
) -> CHILD_ANCHOR:anchor: Probability = 0.00, Count = 1
) -> collection.size: Probability = 0.00, Count = 1
) -> shouldKeep: Probability = 0.00, Count = 1
) -> !shouldKeep: Probability = 0.00, Count = 1
) -> !repo.getObjectDatabase: Probability = 0.00, Count = 1
) -> getGitDir: Probability = 0.00, Count = 1
) -> field_4_shapeid: Probability = 0.00, Count = 1
) -> ||gt: Probability = 0.00, Count = 1
) -> crA.getLastColumn: Probability = 0.00, Count = 1
) -> NO_INTERSECTION: Probability = 0.00, Count = 1
) -> INSIDE: Probability = 0.00, Count = 1
) -> crB,: Probability = 0.00, Count = 1
) -> crA: Probability = 0.00, Count = 1
) -> StaticFontMetrics.getFontDetails: Probability = 0.00, Count = 1
) -> d.getStringWidth: Probability = 0.00, Count = 1
) -> textbox: Probability = 0.00, Count = 1
) -> escherGroup.createTextbox: Probability = 0.00, Count = 1
) -> textbox.setNoFill: Probability = 0.00, Count = 1
) -> textbox.setLineStyle: Probability = 0.00, Count = 1
) -> matchFont: Probability = 0.00, Count = 1
) -> s.applyFont: Probability = 0.00, Count = 1
) -> textbox.setString: Probability = 0.00, Count = 1
) -> ,BooleanClause.Occur.MUST_NOT: Probability = 0.00, Count = 1
) -> Arrays.sort: Probability = 0.00, Count = 1
) -> &: Probability = 0.00, Count = 3
) -> field_3_build: Probability = 0.00, Count = 1
) -> field_6_rversion: Probability = 0.00, Count = 1
) -> cardinality: Probability = 0.00, Count = 2
) -> operation='default'/>": Probability = 0.00, Count = 1
) -> Transition[numTransitions]: Probability = 0.00, Count = 1
) -> .set: Probability = 0.00, Count = 1
) -> FormulaType.NAMEDRANGE,: Probability = 0.00, Count = 1
) -> "[/ITERATION]\n": Probability = 0.00, Count = 1
) -> "<tokenizedphrase/>": Probability = 0.00, Count = 1
) -> "\n</tokenizedphrase>": Probability = 0.00, Count = 1
) -> isAutomaticLink: Probability = 0.00, Count = 1
) -> other.selector: Probability = 0.00, Count = 1
) -> field_1_password: Probability = 0.00, Count = 1
) -> "[/PASSWORD]\n": Probability = 0.00, Count = 1
) -> !walker.idEqual: Probability = 0.00, Count = 1
) -> field_1_record_type: Probability = 0.00, Count = 1
) -> distance: Probability = 0.00, Count = 1
) -> disjuncts.length-1: Probability = 0.00, Count = 1
) -> !finished: Probability = 0.00, Count = 1
) -> nextValues[off++]: Probability = 0.00, Count = 1
) -> sizeIsValid: Probability = 0.00, Count = 1
) -> this.hashCode: Probability = 0.00, Count = 1
) -> .namedef: Probability = 0.00, Count = 1
) -> ptg.getRVAType: Probability = 0.00, Count = 2
) -> "[/EXTERNALNAME]\n": Probability = 0.00, Count = 1
) -> "[MTP[": Probability = 0.00, Count = 1
) -> CellType.FORMULA: Probability = 0.00, Count = 1
) -> wb.getFormulaTokens: Probability = 0.00, Count = 1
) -> LUCENE-6833: Probability = 0.00, Count = 1
) -> method": Probability = 0.00, Count = 1
) -> bb.arrayOffset: Probability = 0.00, Count = 1
) -> bb.array: Probability = 0.00, Count = 1
) -> loose.put: Probability = 0.00, Count = 1
) -> loose.set: Probability = 0.00, Count = 1
) -> _malformedErrors: Probability = 0.00, Count = 1
) -> specs.get: Probability = 0.00, Count = 1
) -> formatter: Probability = 0.00, Count = 1
) -> formatter.format: Probability = 0.00, Count = 1
) -> printfFmt,: Probability = 0.00, Count = 1
) -> _reserved: Probability = 0.00, Count = 1
) -> strVal: Probability = 0.00, Count = 2
) -> "/": Probability = 0.00, Count = 1
) -> 1900: Probability = 0.00, Count = 1
) -> 9999: Probability = 0.00, Count = 1
) -> makeDate: Probability = 0.00, Count = 1
) -> f0,: Probability = 0.00, Count = 1
) -> f1,: Probability = 0.00, Count = 1
) -> HSSFSimpleShape.OBJECT_TYPE_RECTANGLE: Probability = 0.00, Count = 1
) -> iter.weight: Probability = 0.00, Count = 2
) -> scratch.equals: Probability = 0.00, Count = 1
) -> previous.get: Probability = 0.00, Count = 1
) -> Util.toIntsRef: Probability = 0.00, Count = 1
) -> scratch,: Probability = 0.00, Count = 1
) -> scratchInts.get: Probability = 0.00, Count = 1
) -> previous.copyBytes: Probability = 0.00, Count = 1
) -> fstCompiler.compile: Probability = 0.00, Count = 2
) -> -Math.floor: Probability = 0.00, Count = 1
) -> -d0: Probability = 0.00, Count = 1
) -> Math.floor: Probability = 0.00, Count = 1
) -> NoSuchFileException: Probability = 0.00, Count = 1
) -> "\": Probability = 0.00, Count = 1
) -> pending: Probability = 0.00, Count = 3
) -> <<7: Probability = 0.00, Count = 1
) -> "[/FtPioGrbit: Probability = 0.00, Count = 1
) -> .lastcol: Probability = 0.00, Count = 1
) -> .zero: Probability = 0.00, Count = 1
) -> "[/DIMENSIONS]\n": Probability = 0.00, Count = 1
) -> BLOCK_SIZE: Probability = 0.00, Count = 1
) -> !areaPredicate.matches: Probability = 0.00, Count = 1
) -> map.getNote: Probability = 0.00, Count = 3
) -> !provider.get: Probability = 0.00, Count = 1
) -> !isLegalReplacement: Probability = 0.00, Count = 1
) -> "bad: Probability = 0.00, Count = 1
) -> replacement:: Probability = 0.00, Count = 1
) -> +d: Probability = 0.00, Count = 1
) -> "[/SCL]\n": Probability = 0.00, Count = 1
) -> buffer.length: Probability = 0.00, Count = 1
) -> field_7_zero2: Probability = 0.00, Count = 1
) -> field_8_zero3: Probability = 0.00, Count = 1
) -> field_9_zero4: Probability = 0.00, Count = 2
) -> field_10_options: Probability = 0.00, Count = 2
) -> field_5_flags: Probability = 0.00, Count = 1
) -> field_6_res: Probability = 0.00, Count = 2
) -> field_8_colInputRow: Probability = 0.00, Count = 2
) -> streamClosed: Probability = 0.00, Count = 1
) -> SpreadsheetVersion.EXCEL97: Probability = 0.00, Count = 1
) -> "Number: Probability = 0.00, Count = 1
) -> cfRules[i].getCfRuleRecord: Probability = 0.00, Count = 1
) -> .cast: Probability = 0.00, Count = 1
) -> [XCT": Probability = 0.00, Count = 1
) -> nCRNs=": Probability = 0.00, Count = 1
) -> sheetIx=": Probability = 0.00, Count = 1
) -> .unexpectedEndOfInput: Probability = 0.00, Count = 1
) -> md.toObjectId: Probability = 0.00, Count = 2
) -> .makeLuceneQueryField: Probability = 0.00, Count = 1
) -> MatchAllDocsQuery: Probability = 0.00, Count = 2
) -> string: Probability = 0.00, Count = 1
) -> sets,: Probability = 0.00, Count = 1
) -> inStream: Probability = 0.00, Count = 2
) -> dateFormat,: Probability = 0.00, Count = 1
) -> LocaleUtil.getUserLocale: Probability = 0.00, Count = 1
) -> df.setTimeZone: Probability = 0.00, Count = 1
) -> lookupName: Probability = 0.00, Count = 1
) -> _functionIndex: Probability = 0.00, Count = 1
) -> nArgs=": Probability = 0.00, Count = 1
) -> _numberOfArgs: Probability = 0.00, Count = 1
) -> p.getValue: Probability = 0.00, Count = 1
) -> set.toList: Probability = 0.00, Count = 1
) -> "[/REFMODE]\n": Probability = 0.00, Count = 1
) -> %: Probability = 0.00, Count = 2
) -> out,: Probability = 0.00, Count = 1
) -> out.toString: Probability = 0.00, Count = 1
) -> FS.DETECTED: Probability = 0.00, Count = 1
) -> isExportOk: Probability = 0.00, Count = 1
) -> db.close: Probability = 0.00, Count = 1
) -> exportBase.size: Probability = 0.00, Count = 1
) -> .next: Probability = 0.00, Count = 2
) -> name,new: Probability = 0.00, Count = 1
) -> "[/ENDBLOCK]\n": Probability = 0.00, Count = 1
) -> isVowel: Probability = 0.00, Count = 1
) -> text[i]: Probability = 0.00, Count = 1
) -> 8: Probability = 0.00, Count = 2
) -> [CRN": Probability = 0.00, Count = 1
) -> rowIx=": Probability = 0.00, Count = 1
) -> firstColIx=": Probability = 0.00, Count = 1
) -> lastColIx=": Probability = 0.00, Count = 1
) -> fd: Probability = 0.00, Count = 3
) -> IO.readFully: Probability = 0.00, Count = 3
) -> UnsupportedPackIndexVersionException: Probability = 0.00, Count = 1
) -> impl: Probability = 0.00, Count = 3
) -> impl=": Probability = 0.00, Count = 1
) -> impl,: Probability = 0.00, Count = 1
) -> retVal.toString: Probability = 0.00, Count = 2
) -> i.getPromptText: Probability = 0.00, Count = 2
) -> i.getClass: Probability = 0.00, Count = 1
) -> args[0]: Probability = 0.00, Count = 1
) -> 0:return: Probability = 0.00, Count = 1
) -> .unicodeflag=: Probability = 0.00, Count = 1
) -> lst.remove: Probability = 0.00, Count = 1
) -> wildcardText.length: Probability = 0.00, Count = 2
) -> wildcardText.codePointAt: Probability = 0.00, Count = 2
) -> Automata.makeAnyChar: Probability = 0.00, Count = 1
) -> ne.getNumberValue: Probability = 0.00, Count = 2
) -> testValue,: Probability = 0.00, Count = 1
) -> result.setLength: Probability = 0.00, Count = 1
) -> rawData,: Probability = 0.00, Count = 1
) -> r.charAt: Probability = 0.00, Count = 1
) -> EOM: Probability = 0.00, Count = 1
) -> result: Probability = 0.00, Count = 2
) -> ebrTarget: Probability = 0.00, Count = 1
) -> _externalBookBlocks[externalBookIndex].getExternalBookRecord: Probability = 0.00, Count = 1
) -> getATNState: Probability = 0.00, Count = 1
) -> p.getStateType: Probability = 0.00, Count = 1
) -> ATNState.RULE_STOP: Probability = 0.00, Count = 1
) -> :if: Probability = 0.00, Count = 1
) -> _ctx.isEmpty: Probability = 0.00, Count = 1
) -> marker.": Probability = 0.00, Count = 1
) -> stop.isEmpty: Probability = 0.00, Count = 1
) -> "stop: Probability = 0.00, Count = 1
) -> Normalizer2.Mode.COMPOSE: Probability = 0.00, Count = 2
) -> Normalizer2.Mode.DECOMPOSE: Probability = 0.00, Count = 2
) -> set.freeze: Probability = 0.00, Count = 2
) -> FilteredNormalizer2: Probability = 0.00, Count = 2
) -> normalizer,: Probability = 0.00, Count = 2
) -> queries[i].toString: Probability = 0.00, Count = 1
) -> fieldDelimiter: Probability = 0.00, Count = 1
) -> line": Probability = 0.00, Count = 1
) -> fields[0]: Probability = 0.00, Count = 3
) -> readWeight: Probability = 0.00, Count = 2
) -> fields[1]: Probability = 0.00, Count = 2
) -> curPayload.copyChars: Probability = 0.00, Count = 1
) -> fields[2]: Probability = 0.00, Count = 1
) -> curPayload: Probability = 0.00, Count = 2
) -> curWeight: Probability = 0.00, Count = 1
) -> 0xFFFF: Probability = 0.00, Count = 1
) -> "line.separator": Probability = 0.00, Count = 1
) -> region: Probability = 0.00, Count = 2
) -> getSnowballWordSet: Probability = 0.00, Count = 1
) -> List: Probability = 0.00, Count = 1
) -> !Objects.equal: Probability = 0.00, Count = 1
) -> _data: Probability = 0.00, Count = 1
) -> "[/CONTINUE: Probability = 0.00, Count = 1
) -> rs,: Probability = 0.00, Count = 2
) -> _valuesAgg.construct: Probability = 0.00, Count = 1
) -> rec,: Probability = 0.00, Count = 1
) -> field_7_parsed_expr.getTokens: Probability = 0.00, Count = 1
) -> "Formula[": Probability = 0.00, Count = 1
) -> ptgs[k]: Probability = 0.00, Count = 1
) -> FORMULA]\n": Probability = 0.00, Count = 1
) -> .distanceSubQueryNotAllowed: Probability = 0.00, Count = 1
) -> BI_FRAC_MASK: Probability = 0.00, Count = 1
) -> prefix+".verifier: Probability = 0.00, Count = 1
) -> .getEncryptedVerifier: Probability = 0.00, Count = 1
) -> prefix+".verifierHash: Probability = 0.00, Count = 1
) -> .getEncryptedVerifierHash: Probability = 0.00, Count = 1
) -> "[/FILEPASS]\n": Probability = 0.00, Count = 1
) -> "<multiPhrase/>": Probability = 0.00, Count = 1
) -> "\n</multiPhrase>": Probability = 0.00, Count = 1
) -> ,rewriteMethod: Probability = 0.00, Count = 1
) -> .getParsedExpression: Probability = 0.00, Count = 1
) -> fra.setParsedExpression: Probability = 0.00, Count = 1
) -> "b[": Probability = 0.00, Count = 1
) -> "]=": Probability = 0.00, Count = 1
) -> minValues[block],: Probability = 0.00, Count = 1
) -> averages[block],: Probability = 0.00, Count = 1
) -> "[/SERIESTEXT]\n": Probability = 0.00, Count = 1
) -> ++size: Probability = 0.00, Count = 1
) -> bcrg.containsCell: Probability = 0.00, Count = 1
) -> convert: Probability = 0.00, Count = 3
) -> map,: Probability = 0.00, Count = 4
) -> "UNKNOWN: Probability = 0.00, Count = 1
) -> ATTRIBUTE": Probability = 0.00, Count = 1
) -> d.isDirectory: Probability = 0.00, Count = 1
) -> .mkDirsFailed,: Probability = 0.00, Count = 1
) -> +_sfr.getRange: Probability = 0.00, Count = 1
) -> bos.write: Probability = 0.00, Count = 1
) -> checkStatus: Probability = 0.00, Count = 1
) -> iter.payload: Probability = 0.00, Count = 1
) -> defaultValue: Probability = 0.00, Count = 1
) -> bits.get: Probability = 0.00, Count = 1
) -> points[i].point: Probability = 0.00, Count = 1
) -> "all",: Probability = 0.00, Count = 1
) -> "first": Probability = 0.00, Count = 1
) -> "all": Probability = 0.00, Count = 1
) -> "Shared: Probability = 0.00, Count = 1
) -> text: Probability = 0.00, Count = 1
) -> Float.isNaN: Probability = 0.00, Count = 1
) -> v.equals: Probability = 0.00, Count = 1
) -> circle.getCenter: Probability = 0.00, Count = 1
) -> circle.getRadius: Probability = 0.00, Count = 1
) -> Rectangles: Probability = 0.00, Count = 1
) -> Circles: Probability = 0.00, Count = 1
) -> supported,: Probability = 0.00, Count = 1
) -> +"found: Probability = 0.00, Count = 1
) -> shape.getClass: Probability = 0.00, Count = 1
) -> BooleanClause[0]: Probability = 0.00, Count = 1
) -> end: Probability = 0.00, Count = 1
) -> UnsupportedEncodingException: Probability = 0.00, Count = 2
) -> deflater.needsInput: Probability = 0.00, Count = 1
) -> empty": Probability = 0.00, Count = 1
) -> 4: Probability = 0.00, Count = 2
) -> getSections: Probability = 0.00, Count = 1
) -> byte[INFO_LEN]: Probability = 0.00, Count = 1
) -> this.path: Probability = 0.00, Count = 1
) -> 0x3: Probability = 0.00, Count = 1
) -> _childRecords.stream: Probability = 0.00, Count = 1
) -> getPushRefSpecs: Probability = 0.00, Count = 1
) -> KEY_PUSH,: Probability = 0.00, Count = 1
) -> KEY_UPLOADPACK,: Probability = 0.00, Count = 1
) -> getUploadPack: Probability = 0.00, Count = 1
) -> DEFAULT_UPLOAD_PACK: Probability = 0.00, Count = 1
) -> KEY_RECEIVEPACK,: Probability = 0.00, Count = 1
) -> DEFAULT_RECEIVE_PACK: Probability = 0.00, Count = 1
) -> KEY_TAGOPT,: Probability = 0.00, Count = 1
) -> getTagOpt: Probability = 0.00, Count = 1
) -> .option: Probability = 0.00, Count = 1
) -> TagOpt.AUTO_FOLLOW.option: Probability = 0.00, Count = 1
) -> KEY_MIRROR,: Probability = 0.00, Count = 1
) -> mirror,: Probability = 0.00, Count = 1
) -> DEFAULT_MIRROR: Probability = 0.00, Count = 1
) -> KEY_TIMEOUT,: Probability = 0.00, Count = 1
) -> timeout,: Probability = 0.00, Count = 1
) -> "[/OBJ]\n": Probability = 0.00, Count = 1
) -> toField,: Probability = 0.00, Count = 1
) -> fromQuery,: Probability = 0.00, Count = 1
) -> fromField,: Probability = 0.00, Count = 1
) -> fromSearcher,: Probability = 0.00, Count = 1
) -> scoreMode,: Probability = 0.00, Count = 1
) -> "\"",: Probability = 0.00, Count = 1
) -> ESCAPED_QUOTE: Probability = 0.00, Count = 1
) -> BooleanQuery2ModifierNodeProcessor.class: Probability = 0.00, Count = 1
) -> BooleanModifiersQueryNodeProcessor: Probability = 0.00, Count = 1
) -> MultiPhraseQuery: Probability = 0.00, Count = 1
) -> termArraysArray,: Probability = 0.00, Count = 1
) -> positionsArray,: Probability = 0.00, Count = 1
) -> scratchUTF16: Probability = 0.00, Count = 2
) -> parseIntAt: Probability = 0.00, Count = 1
) -> DOC: Probability = 0.00, Count = 1
) -> DOC.length,: Probability = 0.00, Count = 1
) -> bits.set: Probability = 0.00, Count = 1
) -> SimpleTextUtil.checkFooter: Probability = 0.00, Count = 1
) -> SimpleTextBits: Probability = 0.00, Count = 1
) -> bits,: Probability = 0.00, Count = 1
) -> ext: Probability = 0.00, Count = 2
) -> matcher.group: Probability = 0.00, Count = 1
) -> getRecalc: Probability = 0.00, Count = 1
) -> +"[/SAVERECALC]\n": Probability = 0.00, Count = 1
) -> "[TP[": Probability = 0.00, Count = 1
) -> separators: Probability = 0.00, Count = 1
) -> a3p.setExternSheetIndex: Probability = 0.00, Count = 1
) -> r3p.setExternSheetIndex: Probability = 0.00, Count = 1
) -> .build: Probability = 0.00, Count = 1
) -> getBuild: Probability = 0.00, Count = 2
) -> .buildyear=: Probability = 0.00, Count = 1
) -> getBuildYear: Probability = 0.00, Count = 2
) -> .history: Probability = 0.00, Count = 1
) -> getHistoryBitMask: Probability = 0.00, Count = 2
) -> .reqver: Probability = 0.00, Count = 1
) -> "[/BOF: Probability = 0.00, Count = 1
) -> _recStream.getNextSid: Probability = 0.00, Count = 1
) -> perThread.dwpt.getNumDocsInRAM: Probability = 0.00, Count = 1
) -> !arc.isFinal: Probability = 0.00, Count = 1
) -> arc.nextFinalOutput: Probability = 0.00, Count = 1
) -> packs.packs: Probability = 0.00, Count = 1
) -> p.close: Probability = 0.00, Count = 1
) -> alt,: Probability = 0.00, Count = 1
) -> result.opnds.length: Probability = 0.00, Count = 1
) -> result.opnds[0]: Probability = 0.00, Count = 1
) -> System.currentTimeMillis: Probability = 0.00, Count = 1
) -> newLength: Probability = 0.00, Count = 1
) -> map.set: Probability = 0.00, Count = 2
) -> commitNoteMap: Probability = 0.00, Count = 1
) -> notesRef,: Probability = 0.00, Count = 2
) -> notesCommit,: Probability = 0.00, Count = 1
) -> inserter,"Notes: Probability = 0.00, Count = 1
) -> 'git: Probability = 0.00, Count = 2
) -> add'": Probability = 0.00, Count = 1
) -> .consume: Probability = 0.00, Count = 1
) -> _ctx.addErrorNode: Probability = 0.00, Count = 1
) -> createTerminalNode: Probability = 0.00, Count = 1
) -> listener.visitTerminal: Probability = 0.00, Count = 2
) -> element": Probability = 0.00, Count = 2
) -> currentRevision.incRef: Probability = 0.00, Count = 1
) -> sessionID: Probability = 0.00, Count = 1
) -> Integer.toString: Probability = 0.00, Count = 1
) -> sessionToken.incrementAndGet: Probability = 0.00, Count = 1
) -> "[/PROTECT]\n": Probability = 0.00, Count = 1
) -> -index: Probability = 0.00, Count = 1
) -> String: Probability = 0.00, Count = 1
) -> "+classNamesLocation: Probability = 0.00, Count = 2
) -> ppClass: Probability = 0.00, Count = 1
) -> serializerClasses.get: Probability = 0.00, Count = 1
) -> ppClass.newInstance: Probability = 0.00, Count = 1
) -> ppClass.getName: Probability = 0.00, Count = 1
) -> ex.toString: Probability = 0.00, Count = 1
) -> "could: Probability = 0.00, Count = 1
) -> serializer:: Probability = 0.00, Count = 1
) -> "+issues: Probability = 0.00, Count = 1
) -> _arrayValues: Probability = 0.00, Count = 1
) -> #values#uninitialised#\n": Probability = 0.00, Count = 1
) -> "[/RECALCID]\n": Probability = 0.00, Count = 1
) -> 3D: Probability = 0.00, Count = 1
) -> Evals,: Probability = 0.00, Count = 1
) -> 2D: Probability = 0.00, Count = 1
) -> ones: Probability = 0.00, Count = 1
) -> aren't: Probability = 0.00, Count = 1
) -> .theFactoryMustNotBeNull: Probability = 0.00, Count = 1
) -> type=": Probability = 0.00, Count = 1
) -> isOptimizedIf: Probability = 0.00, Count = 1
) -> "if: Probability = 0.00, Count = 1
) -> dist=": Probability = 0.00, Count = 2
) -> "choose: Probability = 0.00, Count = 1
) -> nCases=": Probability = 0.00, Count = 1
) -> isSkip: Probability = 0.00, Count = 1
) -> "skip: Probability = 0.00, Count = 1
) -> isSum: Probability = 0.00, Count = 1
) -> "sum: Probability = 0.00, Count = 1
) -> isBaxcel: Probability = 0.00, Count = 1
) -> "assign: Probability = 0.00, Count = 1
) -> CRNCountRecord.class: Probability = 0.00, Count = 1
) -> CRNBlock[temp.size: Probability = 0.00, Count = 1
) -> 0xF: Probability = 0.00, Count = 1
) -> bstoreContainer.addChildRecord: Probability = 0.00, Count = 1
) -> +state.attribute.getClass: Probability = 0.00, Count = 1
) -> AttributeSource": Probability = 0.00, Count = 1
) -> state.attribute.copyTo: Probability = 0.00, Count = 1
) -> merges.get: Probability = 0.00, Count = 1
) -> .segString: Probability = 0.00, Count = 1
) -> p[i++]: Probability = 0.00, Count = 1
) -> SizeOf.LONG: Probability = 0.00, Count = 1
) -> nvae.getDeadEndConfigs: Probability = 0.00, Count = 1
) -> c.state.getNumberOfTransitions: Probability = 0.00, Count = 1
) -> NotSetTransition: Probability = 0.00, Count = 1
) -> not?"~":"": Probability = 0.00, Count = 1
) -> "[/SUPBOOK": Probability = 0.00, Count = 1
) -> "Add-In: Probability = 0.00, Count = 1
) -> Functions": Probability = 0.00, Count = 1
) -> "Internal: Probability = 0.00, Count = 1
) -> References": Probability = 0.00, Count = 1
) -> nSheets=": Probability = 0.00, Count = 1
) -> _iSel: Probability = 0.00, Count = 1
) -> .style: Probability = 0.00, Count = 1
) -> .unknownShort10=": Probability = 0.00, Count = 1
) -> _idEdit: Probability = 0.00, Count = 2
) -> _dropData: Probability = 0.00, Count = 3
) -> "[/ftLbsData]\n": Probability = 0.00, Count = 1
) -> nNames-1: Probability = 0.00, Count = 1
) -> "[/SeriesToChartGroup]\n": Probability = 0.00, Count = 1
) -> .getRuleIndex: Probability = 0.00, Count = 1
) -> .getAltNumber: Probability = 0.00, Count = 1
) -> altNumber!=ATN.INVALID_ALT_NUMBER: Probability = 0.00, Count = 1
) -> ruleName+":"+altNumber: Probability = 0.00, Count = 1
) -> t.toString: Probability = 0.00, Count = 1
) -> .getSymbol: Probability = 0.00, Count = 1
) -> .verWriter: Probability = 0.00, Count = 1
) -> .nCFRTIDs: Probability = 0.00, Count = 1
) -> rgCFRTID.length: Probability = 0.00, Count = 1
) -> "[/CHARTFRTINFO]\n": Probability = 0.00, Count = 1
) -> charactersStrArray[i].length: Probability = 0.00, Count = 1
) -> d.addChar: Probability = 0.00, Count = 1
) -> charactersStrArray[i].charAt: Probability = 0.00, Count = 1
) -> widthsStrArray[i]: Probability = 0.00, Count = 1
) -> .element_": Probability = 0.00, Count = 1
) -> "[/TABID]\n": Probability = 0.00, Count = 1
) -> reader: Probability = 0.00, Count = 1
) -> evaluateValue: Probability = 0.00, Count = 2
) -> ONE: Probability = 0.00, Count = 1
) -> ZERO: Probability = 0.00, Count = 1
) -> _unmappableErrors: Probability = 0.00, Count = 1
) -> Math.max: Probability = 0.00, Count = 1
) -> "[/IFMT]\n": Probability = 0.00, Count = 1
) -> !queryString.equals: Probability = 0.00, Count = 1
) -> subRecordData,: Probability = 0.00, Count = 2
) -> SubRecord.createSubRecord: Probability = 0.00, Count = 2
) -> subRecStream,: Probability = 0.00, Count = 2
) -> subRecordData.length-subRecStream.getReadIndex: Probability = 0.00, Count = 1
) -> !canPaddingBeDiscarded: Probability = 0.00, Count = 1
) -> "Leftover: Probability = 0.00, Count = 1
) -> nRemainingBytes+: Probability = 0.00, Count = 1
) -> subrecord: Probability = 0.00, Count = 1
) -> "[/CALCMODE]\n": Probability = 0.00, Count = 1
) -> Collections.sort: Probability = 0.00, Count = 2
) -> tags,: Probability = 0.00, Count = 1
) -> "\">": Probability = 0.00, Count = 2
) -> getCol1: Probability = 0.00, Count = 1
) -> getCol2: Probability = 0.00, Count = 1
) -> runData.getAnalyzer: Probability = 0.00, Count = 1
) -> iwConf.setOpenMode: Probability = 0.00, Count = 1
) -> indexDeletionPolicy: Probability = 0.00, Count = 2
) -> iwConf.setIndexDeletionPolicy: Probability = 0.00, Count = 1
) -> "merge.scheduler","org.apache.lucene.index.ConcurrentMergeScheduler": Probability = 0.00, Count = 1
) -> .asSubclass: Probability = 0.00, Count = 2
) -> MergeScheduler.class: Probability = 0.00, Count = 1
) -> .getConstructor: Probability = 0.00, Count = 2
) -> "[/DATALABEXT]\n": Probability = 0.00, Count = 1
) -> this.attributeImpls.size: Probability = 0.00, Count = 1
) -> otherState.attribute.getClass: Probability = 0.00, Count = 1
) -> thisState.attribute.getClass: Probability = 0.00, Count = 1
) -> !otherState.attribute.equals: Probability = 0.00, Count = 1
) -> thisState.attribute: Probability = 0.00, Count = 1
) -> b.getUser: Probability = 0.00, Count = 1
) -> b.getPass: Probability = 0.00, Count = 1
) -> b.getHost: Probability = 0.00, Count = 1
) -> b.getPort: Probability = 0.00, Count = 1
) -> b.getPath: Probability = 0.00, Count = 1
) -> parseDateTime: Probability = 0.00, Count = 1
) -> EvaluationException.invalidValue: Probability = 0.00, Count = 1
) -> ev.getClass: Probability = 0.00, Count = 1
) -> getPropertiesSize: Probability = 0.00, Count = 1
) -> !next.equals: Probability = 0.00, Count = 1
) -> 14: Probability = 0.00, Count = 1
) -> field_7_reserved: Probability = 0.00, Count = 1
) -> Paths.get: Probability = 0.00, Count = 1
) -> body.length: Probability = 0.00, Count = 2
) -> parseShape: Probability = 0.00, Count = 1
) -> body,: Probability = 0.00, Count = 1
) -> newSpatialArgs: Probability = 0.00, Count = 1
) -> op,: Probability = 0.00, Count = 1
) -> parseMap: Probability = 0.00, Count = 1
) -> readNameValuePairs: Probability = 0.00, Count = 1
) -> !aa.isEmpty: Probability = 0.00, Count = 1
) -> "unused: Probability = 0.00, Count = 1
) -> args.validate: Probability = 0.00, Count = 1
) -> "[/SXVS]\n": Probability = 0.00, Count = 1
) -> "true": Probability = 0.00, Count = 1
) -> Boolean.TRUE: Probability = 0.00, Count = 1
) -> "false": Probability = 0.00, Count = 1
) -> Boolean.FALSE: Probability = 0.00, Count = 1
) -> ve.getClass: Probability = 0.00, Count = 1
) -> reserved2: Probability = 0.00, Count = 1
) -> cbFeatData: Probability = 0.00, Count = 1
) -> last: Probability = 0.00, Count = 1
) -> !service.equals: Probability = 0.00, Count = 1
) -> +"[/HCENTER]\n": Probability = 0.00, Count = 1
) -> escherRecords: Probability = 0.00, Count = 1
) -> "rawtypes",: Probability = 0.00, Count = 1
) -> allToffs: Probability = 0.00, Count = 2
) -> info.termsOffsets.iterator: Probability = 0.00, Count = 1
) -> MergedIterator<: Probability = 0.00, Count = 1
) -> MergedIterator<>: Probability = 0.00, Count = 1
) -> !itr.hasNext: Probability = 0.00, Count = 1
) -> current.startOffset: Probability = 0.00, Count = 1
) -> OR: Probability = 0.00, Count = 1
) -> Collections.emptySet: Probability = 0.00, Count = 1
) -> getDataInput": Probability = 0.00, Count = 1
) -> otherRow: Probability = 0.00, Count = 1
) -> row.getOutlineLevel: Probability = 0.00, Count = 1
) -> otherRow.getOutlineLevel: Probability = 0.00, Count = 1
) -> otherRow.setZeroHeight: Probability = 0.00, Count = 1
) -> .setColapsed: Probability = 0.00, Count = 1
) -> other.estimatedMergeBytes: Probability = 0.00, Count = 1
) -> .outline_level=": Probability = 0.00, Count = 1
) -> field_3_outline_style_level: Probability = 0.00, Count = 1
) -> "[/STYLE]\n": Probability = 0.00, Count = 1
) -> '>': Probability = 0.00, Count = 1
) -> clause: Probability = 0.00, Count = 1
) -> clause.toString: Probability = 0.00, Count = 1
) -> "\n</any>": Probability = 0.00, Count = 1
) -> "[/SERTOCRT]\n": Probability = 0.00, Count = 1
) -> name.toUpperCase: Probability = 0.00, Count = 1
) -> getPrintHeaders: Probability = 0.00, Count = 1
) -> +"[/PRINTHEADERS]\n": Probability = 0.00, Count = 1
) -> PLUS:jj_consume_token: Probability = 0.00, Count = 1
) -> getUsername: Probability = 0.00, Count = 1
) -> item.toCharArray: Probability = 0.00, Count = 1
) -> MIN_WORD_LENGTH,: Probability = 0.00, Count = 1
) -> maxWordCount: Probability = 0.00, Count = 1
) -> endIndex,: Probability = 0.00, Count = 2
) -> range.": Probability = 0.00, Count = 1
) -> _string.addFormatRun: Probability = 0.00, Count = 2
) -> addToSSTIfRequired: Probability = 0.00, Count = 1
) -> filters.size: Probability = 0.00, Count = 1
) -> walk.setTreeFilter: Probability = 0.00, Count = 1
) -> AndRevFilter.create: Probability = 0.00, Count = 1
) -> SkipRevFilter.create: Probability = 0.00, Count = 2
) -> ,MaxCountRevFilter.create: Probability = 0.00, Count = 1
) -> MaxCountRevFilter.create: Probability = 0.00, Count = 1
) -> !startSpecified: Probability = 0.00, Count = 1
) -> .noHEADExistsAndNoExplicitStartingRevisionWasSpecified: Probability = 0.00, Count = 1
) -> .anExceptionOccurredWhileTryingToAddTheIdOfHEAD,e: Probability = 0.00, Count = 1
) -> this.revFilter: Probability = 0.00, Count = 2
) -> exhaustStack: Probability = 0.00, Count = 1
) -> qc: Probability = 0.00, Count = 1
) -> qc,: Probability = 0.00, Count = 1
) -> fni.next: Probability = 0.00, Count = 1
) -> queries,true: Probability = 0.00, Count = 1
) -> ,OR_OPERATOR_NAME: Probability = 0.00, Count = 1
) -> oq.makeLuceneQueryField: Probability = 0.00, Count = 1
) -> .DVRecordsNumber: Probability = 0.00, Count = 1
) -> getDVRecNo: Probability = 0.00, Count = 1
) -> "[/DVAL]\n": Probability = 0.00, Count = 1
) -> EmptyStackException: Probability = 0.00, Count = 1
) -> LexerATNSimulator.debug: Probability = 0.00, Count = 1
) -> System.out.println: Probability = 0.00, Count = 1
) -> lines[i]: Probability = 0.00, Count = 2
) -> message.length: Probability = 0.00, Count = 1
) -> addConflictsMessage: Probability = 0.00, Count = 1
) -> conflictingPaths,: Probability = 0.00, Count = 1
) -> agg.getColumn: Probability = 0.00, Count = 1
) -> +": Probability = 0.00, Count = 1
) -> lemmatizerME: Probability = 0.00, Count = 1
) -> Integer.valueOf: Probability = 0.00, Count = 2
) -> 0xFE: Probability = 0.00, Count = 1
) -> ex: Probability = 0.00, Count = 2
) -> ex.initCause: Probability = 0.00, Count = 1
) -> br.close: Probability = 0.00, Count = 1
) -> "[/ENDOBJECT]\n": Probability = 0.00, Count = 1
) -> vals.add: Probability = 0.00, Count = 1
) -> autocomplete.balancedTree: Probability = 0.00, Count = 1
) -> tokens.toArray: Probability = 0.00, Count = 1
) -> vals.toArray: Probability = 0.00, Count = 1
) -> it.hasNext: Probability = 0.00, Count = 2
) -> it.next: Probability = 0.00, Count = 2
) -> LB: Probability = 0.00, Count = 1
) -> output.flip: Probability = 0.00, Count = 2
) -> result.length: Probability = 0.00, Count = 2
) -> result.isUnmappable: Probability = 0.00, Count = 1
) -> UnmappableCharacterException: Probability = 0.00, Count = 1
) -> Double.parseDouble: Probability = 0.00, Count = 1
) -> objectId: Probability = 0.00, Count = 2
) -> LoosePeeledTag: Probability = 0.00, Count = 1
) -> ,objectId,: Probability = 0.00, Count = 1
) -> resultRefs: Probability = 0.00, Count = 3
) -> R_HEADS,R_REMOTES: Probability = 0.00, Count = 1
) -> filterRefs: Probability = 0.00, Count = 1
) -> resultRefs,: Probability = 0.00, Count = 1
) -> o2: Probability = 0.00, Count = 1
) -> i<t.getChildCount: Probability = 0.00, Count = 1
) -> t.getChild: Probability = 0.00, Count = 1
) -> idObj=": Probability = 0.00, Count = 1
) -> returnStates,: Probability = 0.00, Count = 1
) -> a.returnStates: Probability = 0.00, Count = 1
) -> distanceSquared=": Probability = 0.00, Count = 1
) -> distanceSquared: Probability = 0.00, Count = 1
) -> createQueryParser: Probability = 0.00, Count = 1
) -> parser.parse: Probability = 0.00, Count = 1
) -> e1.getMessage: Probability = 0.00, Count = 1
) -> HttpMethodName.GET: Probability = 0.00, Count = 2
) -> "context: Probability = 0.00, Count = 1
) -> surrounding: Probability = 0.00, Count = 1
) -> "+parser.getRuleInvocationStack: Probability = 0.00, Count = 1
) -> collectPredicates: Probability = 0.00, Count = 1
) -> currentPosition: Probability = 0.00, Count = 2
) -> _input.seek: Probability = 0.00, Count = 3
) -> predSucceeds: Probability = 0.00, Count = 2
) -> evalSemanticContext: Probability = 0.00, Count = 1
) -> pt.getPredicate: Probability = 0.00, Count = 2
) -> _outerContext,: Probability = 0.00, Count = 1
) -> config.alt,: Probability = 0.00, Count = 1
) -> pt.target: Probability = 0.00, Count = 2
) -> =SemanticContext.and: Probability = 0.00, Count = 1
) -> config.semanticContext,: Probability = 0.00, Count = 1
) -> pt.target,: Probability = 0.00, Count = 1
) -> other.includeLower: Probability = 0.00, Count = 1
) -> other.includeUpper: Probability = 0.00, Count = 1
) -> decoder.maxCharsPerByte: Probability = 0.00, Count = 1
) -> decoder.decode: Probability = 0.00, Count = 1
) -> !result.isError: Probability = 0.00, Count = 1
) -> maxMultiTermExpansions,: Probability = 0.00, Count = 1
) -> "[/OLD: Probability = 0.00, Count = 1
) -> c.getName: Probability = 0.00, Count = 1
) -> externalBook: Probability = 0.00, Count = 1
) -> _externalBookBlocks[extBookIndex].getNameText: Probability = 0.00, Count = 1
) -> nr.getNameText: Probability = 0.00, Count = 2
) -> clone.next: Probability = 0.00, Count = 1
) -> FieldsReader: Probability = 0.00, Count = 1
) -> monitor.isCancelled: Probability = 0.00, Count = 1
) -> 18: Probability = 0.00, Count = 1
) -> sid:: Probability = 0.00, Count = 1
) -> inStream.readRemainder: Probability = 0.00, Count = 1
) -> positionSpan.start: Probability = 0.00, Count = 1
) -> positionSpan.end: Probability = 0.00, Count = 1
) -> loader.newInstance: Probability = 0.00, Count = 1
) -> float[oversize: Probability = 0.00, Count = 1
) -> getUnderline: Probability = 0.00, Count = 1
) -> credentials.setLastFailedRefreshTime: Probability = 0.00, Count = 1
) -> jj_2_1: Probability = 0.00, Count = 1
) -> fieldName.image: Probability = 0.00, Count = 1
) -> mcr.getAreaAt: Probability = 0.00, Count = 1
) -> /: Probability = 0.00, Count = 1
) -> loose.remove: Probability = 0.00, Count = 1
) -> resolved.find: Probability = 0.00, Count = 1
) -> resolved.remove: Probability = 0.00, Count = 1
) -> s: Probability = 0.00, Count = 1
) -> .grBit: Probability = 0.00, Count = 1
) -> "[/CHARTFORMAT]\n": Probability = 0.00, Count = 1
) -> released": Probability = 0.00, Count = 1
) -> supLinkIndex: Probability = 0.00, Count = 1
) -> _workbookRecordList.getRecords: Probability = 0.00, Count = 1
) -> .isAddInFunctions: Probability = 0.00, Count = 1
) -> supLinkIndex++: Probability = 0.00, Count = 1
) -> numberOfNames: Probability = 0.00, Count = 1
) -> extBlock.getNumberOfNames: Probability = 0.00, Count = 1
) -> numberOfNames,: Probability = 0.00, Count = 1
) -> "tokenStream: Probability = 0.00, Count = 1
) -> type.stored: Probability = 0.00, Count = 1
) -> r.getFormatString: Probability = 0.00, Count = 1
) -> r.getIndexCode: Probability = 0.00, Count = 1
) -> records[rowIx]: Probability = 0.00, Count = 1
) -> "[/SINDEX]\n": Probability = 0.00, Count = 1
) -> match.succeeded: Probability = 0.00, Count = 1
) -> c,SemanticContext.NONE: Probability = 0.00, Count = 1
) -> dup.add: Probability = 0.00, Count = 1
) -> maxShingleSize: Probability = 0.00, Count = 1
) -> resourcePath: Probability = 0.00, Count = 2
) -> tailored.put: Probability = 0.00, Count = 1
) -> UCharacter.getPropertyValueEnum: Probability = 0.00, Count = 1
) -> UProperty.SCRIPT,: Probability = 0.00, Count = 1
) -> "myanmarAsWords",: Probability = 0.00, Count = 1
) -> OR:oprt: Probability = 0.00, Count = 1
) -> AND:oprt: Probability = 0.00, Count = 1
) -> getAndQuery: Probability = 0.00, Count = 1
) -> N:oprt: Probability = 0.00, Count = 1
) -> oprt,: Probability = 0.00, Count = 2
) -> W:oprt: Probability = 0.00, Count = 1
) -> default:jj_la1[6]: Probability = 0.00, Count = 1
) -> recognizer.getATN: Probability = 0.00, Count = 1
) -> nextTokens.contains: Probability = 0.00, Count = 1
) -> ATNState.INVALID_STATE_NUMBER: Probability = 0.00, Count = 1
) -> s.getStateType: Probability = 0.00, Count = 1
) -> ATNState.BLOCK_START:case: Probability = 0.00, Count = 1
) -> ATNState.STAR_BLOCK_START:case: Probability = 0.00, Count = 1
) -> ATNState.PLUS_BLOCK_START:case: Probability = 0.00, Count = 1
) -> ATNState.STAR_LOOP_ENTRY:if: Probability = 0.00, Count = 1
) -> ATNState.PLUS_LOOP_BACK:case: Probability = 0.00, Count = 1
) -> ATNState.STAR_LOOP_BACK:reportUnwantedToken: Probability = 0.00, Count = 1
) -> expecting: Probability = 0.00, Count = 1
) -> recognizer.getExpectedTokens: Probability = 0.00, Count = 1
) -> =expecting.or: Probability = 0.00, Count = 1
) -> enc.trim: Probability = 0.00, Count = 1
) -> getGridset: Probability = 0.00, Count = 1
) -> +"[/GRIDSET]\n": Probability = 0.00, Count = 1
) -> _rawData.length: Probability = 0.00, Count = 1
) -> LazyRefEval: Probability = 0.00, Count = 1
) -> it.remove: Probability = 0.00, Count = 1
) -> position,: Probability = 0.00, Count = 2
) -> stq: Probability = 0.00, Count = 2
) -> clausesList.add: Probability = 0.00, Count = 1
) -> SpanOrQuery: Probability = 0.00, Count = 2
) -> soq: Probability = 0.00, Count = 1
) -> clausesList.toArray: Probability = 0.00, Count = 1
) -> SpanQuery[clausesList.size: Probability = 0.00, Count = 1
) -> SpanBoostQuery: Probability = 0.00, Count = 1
) -> soq,: Probability = 0.00, Count = 1
) -> parsing: Probability = 0.00, Count = 1
) -> value:": Probability = 0.00, Count = 1
) -> getTargetFrame: Probability = 0.00, Count = 1
) -> _moniker: Probability = 0.00, Count = 1
) -> .moniker: Probability = 0.00, Count = 1
) -> _moniker.toString: Probability = 0.00, Count = 1
) -> HLINK_PLACE: Probability = 0.00, Count = 1
) -> .textMark=: Probability = 0.00, Count = 1
) -> getTextMark: Probability = 0.00, Count = 1
) -> .address: Probability = 0.00, Count = 1
) -> getAddress: Probability = 0.00, Count = 1
) -> "[/HYPERLINK: Probability = 0.00, Count = 1
) -> .string_len=: Probability = 0.00, Count = 1
) -> .unicode_flag=: Probability = 0.00, Count = 1
) -> "[/LABEL]\n": Probability = 0.00, Count = 1
) -> prop.getPropertyNumber: Probability = 0.00, Count = 1
) -> 896: Probability = 0.00, Count = 1
) -> prop.isComplex: Probability = 0.00, Count = 1
) -> StringUtil.getFromUnicodeLE: Probability = 0.00, Count = 1
) -> cp.getComplexData: Probability = 0.00, Count = 1
) -> "Chart: Probability = 0.00, Count = 1
) -> 1\0": Probability = 0.00, Count = 1
) -> crRowInput: Probability = 0.00, Count = 1
) -> field_7_rowInputRow,: Probability = 0.00, Count = 1
) -> crColInput: Probability = 0.00, Count = 1
) -> .rowInput: Probability = 0.00, Count = 1
) -> crRowInput.formatAsString: Probability = 0.00, Count = 1
) -> .colInput: Probability = 0.00, Count = 1
) -> crColInput.formatAsString: Probability = 0.00, Count = 1
) -> "[/TABLE]\n": Probability = 0.00, Count = 1
) -> "jdk": Probability = 0.00, Count = 1
) -> Implementation.JDK: Probability = 0.00, Count = 1
) -> args[i]: Probability = 0.00, Count = 1
) -> TermStats[]: Probability = 0.00, Count = 1
) -> getHighFreqTerms: Probability = 0.00, Count = 1
) -> ]: Probability = 0.00, Count = 1
) -> OperandResolver.coerceValueToBoolean: Probability = 0.00, Count = 1
) -> method.booleanValue: Probability = 0.00, Count = 1
) -> queryString.equals: Probability = 0.00, Count = 1
) -> f.matches: Probability = 0.00, Count = 1
) -> f.getValue: Probability = 0.00, Count = 1
) -> vals[mid],: Probability = 0.00, Count = 1
) -> !isLarge: Probability = 0.00, Count = 1
) -> LargeObjectException.ExceedsLimit: Probability = 0.00, Count = 1
) -> LargeObjectException.ExceedsByteArrayLimit: Probability = 0.00, Count = 1
) -> "Duplicate: Probability = 0.00, Count = 1
) -> Map.Entry<String,FuzzySet>: Probability = 0.00, Count = 1
) -> bloomsByFieldName.entrySet: Probability = 0.00, Count = 1
) -> numTerms: Probability = 0.00, Count = 1
) -> -1:: Probability = 0.00, Count = 1
) -> Integer.toHexString: Probability = 0.00, Count = 2
) -> bytes[i]&0xff: Probability = 0.00, Count = 1
) -> maxInclusive: Probability = 0.00, Count = 1
) -> Math.nextUp: Probability = 0.00, Count = 1
) -> ITEM_PATTERN.matcher: Probability = 0.00, Count = 1
) -> "[/TopMargin]\n": Probability = 0.00, Count = 1
) -> AddNoteCommand.commitNoteMap: Probability = 0.00, Count = 1
) -> notesCommit,inserter,"Notes: Probability = 0.00, Count = 1
) -> remove'": Probability = 0.00, Count = 1
) -> "ен": Probability = 0.00, Count = 1
) -> 'н': Probability = 0.00, Count = 1
) -> BlockList.this.remove: Probability = 0.00, Count = 1
) -> "Unsupported: Probability = 0.00, Count = 1
) -> passed: Probability = 0.00, Count = 1
) -> HSSFSimpleShape.OBJECT_TYPE_LINE: Probability = 0.00, Count = 1
) -> .displayAsPercentage: Probability = 0.00, Count = 1
) -> .shadow: Probability = 0.00, Count = 1
) -> isShadow: Probability = 0.00, Count = 1
) -> "[/AREA]\n": Probability = 0.00, Count = 1
) -> getPrintGridlines: Probability = 0.00, Count = 1
) -> +"[/PRINTGRIDLINES]\n": Probability = 0.00, Count = 1
) -> "[/INDEX]\n": Probability = 0.00, Count = 1
) -> lexerActionExecutor,: Probability = 0.00, Count = 1
) -> lexerOther.lexerActionExecutor: Probability = 0.00, Count = 1
) -> .fgcoloridx=: Probability = 0.00, Count = 1
) -> .bgcoloridx=: Probability = 0.00, Count = 1
) -> getFillBackgroundColor: Probability = 0.00, Count = 1
) -> [/Pattern: Probability = 0.00, Count = 1
) -> .exceptionCaughtDuringExecutionOfPushCommand,e: Probability = 0.00, Count = 1
) -> os.toByteArray: Probability = 0.00, Count = 1
) -> "[/CODEPAGE]\n": Probability = 0.00, Count = 1
) -> contexts,: Probability = 0.00, Count = 1
) -> "InputStreamReader: Probability = 0.00, Count = 1
) -> return: Probability = 0.00, Count = 2
) -> .cannotDetermineProxyFor,: Probability = 0.00, Count = 1
) -> >>>: Probability = 0.00, Count = 1
) -> .getChild: Probability = 0.00, Count = 1
) -> .count: Probability = 0.00, Count = 1
) -> ID: Probability = 0.00, Count = 1
) -> pair: Probability = 0.00, Count = 1
) -> nextCTF: Probability = 0.00, Count = 1
) -> _formats[i: Probability = 0.00, Count = 1
) -> nextCTF.getOffset: Probability = 0.00, Count = 1
) -> super.equals: Probability = 0.00, Count = 1
) -> "noCFSRatio=": Probability = 0.00, Count = 1
) -> noCFSRatio: Probability = 0.00, Count = 1
) -> alphabetSize: Probability = 0.00, Count = 1
) -> Automaton.appendCharString: Probability = 0.00, Count = 2
) -> SubtractEvalClass: Probability = 0.00, Count = 1
) -> "[/1904]\n": Probability = 0.00, Count = 1
) -> a,builder.complete: Probability = 0.00, Count = 1
) -> ,new: Probability = 0.00, Count = 2
) -> IdentityHashMap<State,Integer>: Probability = 0.00, Count = 1
) -> a.finish: Probability = 0.00, Count = 1
) -> existing.cells.keySet: Probability = 0.00, Count = 1
) -> master.at: Probability = 0.00, Count = 1
) -> AttributeReflector: Probability = 0.00, Count = 1
) -> "[/FtCf: Probability = 0.00, Count = 1
) -> PageSettingsBlock: Probability = 0.00, Count = 2
) -> chart: Probability = 0.00, Count = 2
) -> sub-stream,: Probability = 0.00, Count = 1
) -> had: Probability = 0.00, Count = 1
) -> _recs: Probability = 0.00, Count = 1
) -> arrayPtgs.add: Probability = 0.00, Count = 1
) -> SlopQueryNode.class,: Probability = 0.00, Count = 1
) -> SlopQueryNodeBuilder: Probability = 0.00, Count = 1
) -> SynonymQueryNode.class,new: Probability = 0.00, Count = 1
) -> SynonymQueryNodeBuilder: Probability = 0.00, Count = 1
) -> MultiPhraseQueryNode.class,: Probability = 0.00, Count = 1
) -> MultiPhraseQueryNodeBuilder: Probability = 0.00, Count = 1
) -> MatchAllDocsQueryNode.class,: Probability = 0.00, Count = 1
) -> MatchAllDocsQueryNodeBuilder: Probability = 0.00, Count = 1
) -> ent.getKey: Probability = 0.00, Count = 1
) -> ent.getValue: Probability = 0.00, Count = 1
) -> pendingPairs.clear: Probability = 0.00, Count = 1
) -> IndexDeletionPolicy.class: Probability = 0.00, Count = 1
) -> stream": Probability = 0.00, Count = 1
) -> k]: Probability = 0.00, Count = 1
) -> r.getLastRow: Probability = 0.00, Count = 1
) -> retval.toString: Probability = 0.00, Count = 1
) -> File[result.size: Probability = 0.00, Count = 1
) -> "forward".equals: Probability = 0.00, Count = 1
) -> Transliterator.FORWARD: Probability = 0.00, Count = 1
) -> Transliterator.REVERSE: Probability = 0.00, Count = 1
) -> gen,: Probability = 0.00, Count = 1
) -> Character.MAX_RADIX: Probability = 0.00, Count = 1
) -> SupBookRecord.createInternalReferences: Probability = 0.00, Count = 1
) -> externs.length: Probability = 0.00, Count = 1
) -> name.equalsIgnoreCase: Probability = 0.00, Count = 1
) -> nr,: Probability = 0.00, Count = 1
) -> this.field: Probability = 0.00, Count = 1
) -> "[/LeftMargin]\n": Probability = 0.00, Count = 1
) -> "separator: Probability = 0.00, Count = 1
) -> ascii: Probability = 0.00, Count = 1
) -> doc:: Probability = 0.00, Count = 1
) -> "doc=": Probability = 0.00, Count = 1
) -> end,endInclusive: Probability = 0.00, Count = 1
) -> b.getRow: Probability = 0.00, Count = 1
) -> a.getCol: Probability = 0.00, Count = 1
) -> b.getCol: Probability = 0.00, Count = 1
) -> getRowHeight: Probability = 0.00, Count = 1
) -> "[/DEFAULTROWHEIGHT]\n": Probability = 0.00, Count = 1
) -> "[/LbsDropData]\n": Probability = 0.00, Count = 1
) -> maxCharsPerByte:: Probability = 0.00, Count = 1
) -> getWSBool2: Probability = 0.00, Count = 1
) -> getAlternateFormula: Probability = 0.00, Count = 1
) -> +"[/WSBOOL]\n": Probability = 0.00, Count = 1
) -> tn.prePush: Probability = 0.00, Count = 1
) -> Hooks.prePush: Probability = 0.00, Count = 1
) -> tn.hookOutRedirect: Probability = 0.00, Count = 1
) -> tn.prePush.setRemoteLocation: Probability = 0.00, Count = 1
) -> tn.prePush.setRemoteName: Probability = 0.00, Count = 1
) -> "=": Probability = 0.00, Count = 1
) -> field_6_name_text.length: Probability = 0.00, Count = 1
) -> field_7_comment_text.length: Probability = 0.00, Count = 1
) -> baos.size: Probability = 0.00, Count = 1
) -> mismatch": Probability = 0.00, Count = 1
) -> _dropData.serialize: Probability = 0.00, Count = 1
) -> _rgLines: Probability = 0.00, Count = 1
) -> _bsels: Probability = 0.00, Count = 2
) -> out: Probability = 0.00, Count = 1
) -> "[/HIDEOBJ]\n": Probability = 0.00, Count = 1
) -> ==null: Probability = 0.00, Count = 1
) -> numGoodPoints+=1: Probability = 0.00, Count = 1
) -> recallPoints.add: Probability = 0.00, Count = 1
) -> mrk.getFirstColumn: Probability = 0.00, Count = 1
) -> nr.setRow: Probability = 0.00, Count = 1
) -> mrk.getRow: Probability = 0.00, Count = 1
) -> nr.setXFIndex: Probability = 0.00, Count = 1
) -> mrk.getXFAt: Probability = 0.00, Count = 1
) -> nr.setValue: Probability = 0.00, Count = 1
) -> mrk.getRKNumberAt: Probability = 0.00, Count = 1
) -> v: Probability = 0.00, Count = 2
) -> CARAT:: Probability = 0.00, Count = 1
) -> to.toString: Probability = 0.00, Count = 1
) -> '*': Probability = 0.00, Count = 1
) -> ++bufferPos: Probability = 0.00, Count = 1
) -> weightedTerms[i].weight: Probability = 0.00, Count = 1
) -> ,Constants.TYPE_COMMIT: Probability = 0.00, Count = 1
) -> "[/OBJECTLINK]\n": Probability = 0.00, Count = 1
) -> move: Probability = 0.00, Count = 1
) -> there": Probability = 0.00, Count = 1
) -> cells[cell.getColumnIndex: Probability = 0.00, Count = 1
) -> didn't: Probability = 0.00, Count = 1
) -> our: Probability = 0.00, Count = 1
) -> row": Probability = 0.00, Count = 1
) -> cell.updateCellNum: Probability = 0.00, Count = 1
) -> +"[/": Probability = 0.00, Count = 1
) -> elements.add: Probability = 0.00, Count = 1
) -> emptyComplexPart: Probability = 0.00, Count = 1
) -> "F:": Probability = 0.00, Count = 1
) -> LOG_10_TO_BASE_e: Probability = 0.00, Count = 1
) -> &&: Probability = 0.00, Count = 1
) -> defaultFieldType: Probability = 0.00, Count = 1
) -> analyzer.getOffsetGap: Probability = 0.00, Count = 1
) -> .toUpperCase: Probability = 0.00, Count = 1
) -> "[/USESELFS]\n": Probability = 0.00, Count = 1
) -> .toLowerCase: Probability = 0.00, Count = 1
) -> w: Probability = 0.00, Count = 1
) -> System.out,: Probability = 0.00, Count = 1
) -> Charset.defaultCharset: Probability = 0.00, Count = 1
) -> escherRecord.display: Probability = 0.00, Count = 1
) -> w,: Probability = 0.00, Count = 1
) -> w.flush: Probability = 0.00, Count = 1
) -> fieldsStream.getFilePointer: Probability = 0.00, Count = 1
) -> fieldsStream.writeVLong: Probability = 0.00, Count = 2
) -> fieldsStream: Probability = 0.00, Count = 1
) -> "[/DEFAULTCOLWIDTH]\n": Probability = 0.00, Count = 1
) -> 0x15: Probability = 0.00, Count = 1
) -> isNewline: Probability = 0.00, Count = 1
) -> block[1+offset]: Probability = 0.00, Count = 1
) -> matches++: Probability = 0.00, Count = 1
) -> IndexOptions.NONE: Probability = 0.00, Count = 1
) -> getFullPrecision: Probability = 0.00, Count = 1
) -> +"[/PRECISION]\n": Probability = 0.00, Count = 1
} -> }: Probability = 0.99, Count = 15058
} -> source=": Probability = 0.00, Count = 1
} -> source+: Probability = 0.00, Count = 1
} -> .markAccessed: Probability = 0.00, Count = 1
} -> session.revision.revision.open: Probability = 0.00, Count = 1
} -> entryForNullKey.value: Probability = 0.00, Count = 2
} -> "you: Probability = 0.00, Count = 1
} -> specify: Probability = 0.00, Count = 1
} -> eg:: Probability = 0.00, Count = 1
} -> 10.0s,: Probability = 0.00, Count = 1
} -> 4.5m,: Probability = 0.00, Count = 1
} -> 2h": Probability = 0.00, Count = 1
} -> had:: Probability = 0.00, Count = 2
} -> ft.requireDimCount: Probability = 0.00, Count = 1
} -> n.cnt: Probability = 0.00, Count = 1
} -> m.cnt: Probability = 0.00, Count = 1
} -> e.cnt: Probability = 0.00, Count = 1
} -> n.skip: Probability = 0.00, Count = 1
} -> FileUtils.delete: Probability = 0.00, Count = 1
} -> objdb.fileFor: Probability = 0.00, Count = 1
} -> FileUtils.RETRY|: Probability = 0.00, Count = 1
} -> FileUtils.SKIP_MISSING|: Probability = 0.00, Count = 1
} -> FileUtils.IGNORE_ERRORS: Probability = 0.00, Count = 1
} -> thisSheetRefIndex,: Probability = 0.00, Count = 1
} -> "\\r": Probability = 0.00, Count = 3
} -> spec.substring: Probability = 0.00, Count = 1
} -> invalid": Probability = 0.00, Count = 1
} -> lexerAction.execute: Probability = 0.00, Count = 1
} -> needsScores: Probability = 0.00, Count = 1
} -> other.needsScores: Probability = 0.00, Count = 1
} -> variables,: Probability = 0.00, Count = 1
} -> other.variables: Probability = 0.00, Count = 1
} -> a[i]: Probability = 0.00, Count = 2
} -> hi[p]: Probability = 0.00, Count = 1
} -> null": Probability = 0.00, Count = 3
} -> bQuery.build: Probability = 0.00, Count = 2
} -> buffer[offset: Probability = 0.00, Count = 1
} -> toSync.join: Probability = 0.00, Count = 1
} -> .interrupt: Probability = 0.00, Count = 1
} -> ENCLOSES: Probability = 0.00, Count = 1
} -> OVERLAP: Probability = 0.00, Count = 1
} -> files.toArray: Probability = 0.00, Count = 2
} -> String[files.size: Probability = 0.00, Count = 2
} -> '\r': Probability = 0.00, Count = 4
} -> "VisioDocument": Probability = 0.00, Count = 1
} -> directory.resolve: Probability = 0.00, Count = 1
} -> creating: Probability = 0.00, Count = 2
} -> Analyzer:: Probability = 0.00, Count = 2
} -> ,firstSheetName: Probability = 0.00, Count = 1
} -> ,firstSheetName,lastSheetName: Probability = 0.00, Count = 1
} -> PackIndexV1: Probability = 0.00, Count = 1
} -> IndexableField[result.size: Probability = 0.00, Count = 1
} -> EnglishAnalyzer.ENGLISH_STOP_WORDS_SET,: Probability = 0.00, Count = 1
} -> buffer[i]: Probability = 0.00, Count = 1
} -> "subquery: Probability = 0.00, Count = 1
} -> allowed:: Probability = 0.00, Count = 1
} -> writer.rollback: Probability = 0.00, Count = 1
} -> "\r\n": Probability = 0.00, Count = 1
} -> gen,: Probability = 0.00, Count = 1
} -> ;: Probability = 0.00, Count = 1
} -> result.toArray: Probability = 0.00, Count = 2
} -> record,: Probability = 0.00, Count = 1
} -> "Operator: Probability = 0.00, Count = 1
} -> symbol.getText: Probability = 0.00, Count = 1
} -> POI's: Probability = 0.00, Count = 1
} -> implementations: Probability = 0.00, Count = 1
} -> functions": Probability = 0.00, Count = 1
} -> !other.hasAttributes: Probability = 0.00, Count = 2
} -> thisState.next: Probability = 0.00, Count = 1
} -> otherState.next: Probability = 0.00, Count = 1
} -> Type.INSERT: Probability = 0.00, Count = 1
} -> Type.EMPTY: Probability = 0.00, Count = 1
} -> Arrays.sort: Probability = 0.00, Count = 1
} -> arn.resource: Probability = 0.00, Count = 1
} -> work.endOffset,: Probability = 0.00, Count = 1
} -> current.endOffset: Probability = 0.00, Count = 1
} -> suffixes[i].toCharArray: Probability = 0.00, Count = 1
} -> maxEntLemmas.length: Probability = 0.00, Count = 1
} -> font!": Probability = 0.00, Count = 1
} -> ft.hierarchical: Probability = 0.00, Count = 1
} -> BytesRef[result.size: Probability = 0.00, Count = 1
} -> element.equals: Probability = 0.00, Count = 1
} -> !upperTerm.equals: Probability = 0.00, Count = 1
} -> "index: Probability = 0.00, Count = 1
} -> userData:: Probability = 0.00, Count = 1
} -> OP_LT: Probability = 0.00, Count = 1
} -> it.remove: Probability = 0.00, Count = 2
} -> System.out.printf: Probability = 0.00, Count = 1
} -> "%s:%s: Probability = 0.00, Count = 1
} -> totalTF: Probability = 0.00, Count = 1
} -> %,d: Probability = 0.00, Count = 2
} -> \n",terms[i].field,: Probability = 0.00, Count = 1
} -> terms[i].termtext.utf8ToString: Probability = 0.00, Count = 1
} -> terms[i].totalTermFreq,: Probability = 0.00, Count = 1
} -> terms[i].docFreq: Probability = 0.00, Count = 1
} -> suffix[i]: Probability = 0.00, Count = 1
} -> data[p-1]: Probability = 0.00, Count = 1
} -> rest,: Probability = 0.00, Count = 1
} -> default:throw: Probability = 0.00, Count = 1
} -> allStopWords.toArray: Probability = 0.00, Count = 1
} -> countsByTime[i]: Probability = 0.00, Count = 1
} -> stat2.countsByTime[i]: Probability = 0.00, Count = 1
} -> .withArgs: Probability = 0.00, Count = 1
} -> q.setWeight: Probability = 0.00, Count = 1
} -> DEFAULT_PATH_TYPE: Probability = 0.00, Count = 1
UpdateJourneyStateResponse -> UpdateJourneyStateResult: Probability = 1.00, Count = 1
UpdateJourneyState -> updateJourneyState: Probability = 1.00, Count = 1
UpdateJourneyStateRequest -> UpdateJourneyStateRequest: Probability = 1.00, Count = 1
Invoke<UpdateJourneyStateResponse> -> executeUpdateJourneyState: Probability = 1.00, Count = 1
void -> void: Probability = 0.95, Count = 1339
void -> throws: Probability = 0.01, Count = 18
void -> final: Probability = 0.02, Count = 33
void -> synchronized: Probability = 0.00, Count = 5
void -> IOException: Probability = 0.00, Count = 5
void -> writeInt: Probability = 0.00, Count = 1
void -> writeShort: Probability = 0.00, Count = 1
void -> writeLong: Probability = 0.00, Count = 1
RemovePresentationFormat -> removePresentationFormat: Probability = 1.00, Count = 1
MutableSection -> (: Probability = 0.50, Count = 33
MutableSection -> {: Probability = 0.50, Count = 33
FirstSection -> remove1stProperty: Probability = 0.50, Count = 33
FirstSection -> (: Probability = 0.50, Count = 33
PropertyIDMap.PID_PRESFORMAT -> PropertyIDMap.PID_PRESFORMAT: Probability = 1.00, Count = 1
CellRangeAddressList -> CellRangeAddressList: Probability = 1.00, Count = 7
int -> int: Probability = 0.93, Count = 4454
int -> lastIndexOf: Probability = 0.00, Count = 1
int -> final: Probability = 0.05, Count = 229
int -> maxEdits,: Probability = 0.00, Count = 1
int -> maxExpansions,: Probability = 0.00, Count = 1
int -> compareArrayByPrefix: Probability = 0.00, Count = 1
int -> shortArray,: Probability = 0.00, Count = 1
int -> shortIndex,char[]: Probability = 0.00, Count = 1
int -> longArray,: Probability = 0.00, Count = 1
int -> byte[]: Probability = 0.00, Count = 9
int -> freeBlocks,: Probability = 0.00, Count = 1
int -> fillOval: Probability = 0.00, Count = 1
int -> 0xCC9E2D51: Probability = 0.00, Count = 1
int -> 0x1B873593: Probability = 0.00, Count = 1
int -> 0xE6546B64: Probability = 0.00, Count = 1
int -> indexOf: Probability = 0.00, Count = 1
int -> while: Probability = 0.00, Count = 2
int -> short: Probability = 0.00, Count = 4
int -> >: Probability = 0.00, Count = 1
int -> 0: Probability = 0.00, Count = 2
int -> Integer: Probability = 0.00, Count = 7
int -> toChars: Probability = 0.00, Count = 1
int -> srcOff,: Probability = 0.00, Count = 2
int -> srcLen,: Probability = 0.00, Count = 2
int -> "srcLen: Probability = 0.00, Count = 2
int -> values,int: Probability = 0.00, Count = 2
int -> le: Probability = 0.00, Count = 1
int -> {: Probability = 0.00, Count = 3
int -> -: Probability = 0.00, Count = 1
int -> 2: Probability = 0.00, Count = 1
int -> cells.keySet: Probability = 0.00, Count = 1
int -> areaEval.getFirstSheetIndex: Probability = 0.00, Count = 1
int -> for: Probability = 0.00, Count = 1
int -> channel,: Probability = 0.00, Count = 1
int -> blockIndex: Probability = 0.00, Count = 1
int -> throws: Probability = 0.00, Count = 1
int -> checkHeader: Probability = 0.00, Count = 1
int -> depth: Probability = 0.00, Count = 1
int -> =: Probability = 0.00, Count = 3
int -> format2: Probability = 0.00, Count = 2
int -> getFormat: Probability = 0.00, Count = 1
int -> osVersion2: Probability = 0.00, Count = 2
int -> setSize: Probability = 0.00, Count = 1
int -> endOfParagraph: Probability = 0.00, Count = 1
int -> long: Probability = 0.00, Count = 1
int -> getBaseSize: Probability = 0.00, Count = 1
int -> c,: Probability = 0.00, Count = 1
int -> 6: Probability = 0.00, Count = 1
int -> subIndex: Probability = 0.00, Count = 1
int -> docStarts: Probability = 0.00, Count = 1
int -> docStarts.length: Probability = 0.00, Count = 1
int -> toCodePoints: Probability = 0.00, Count = 1
int -> CharSequence: Probability = 0.00, Count = 1
int -> formatBase10: Probability = 0.00, Count = 1
int -> args.length-1: Probability = 0.00, Count = 1
int -> version,int: Probability = 0.00, Count = 1
int -> y2,: Probability = 0.00, Count = 1
int -> height,: Probability = 0.00, Count = 1
int -> dx,: Probability = 0.00, Count = 1
int -> serializePtgs: Probability = 0.00, Count = 1
int -> pOffset,: Probability = 0.00, Count = 1
int -> writeString: Probability = 0.00, Count = 1
int -> numberOfRichTextRuns,: Probability = 0.00, Count = 1
int -> %: Probability = 0.00, Count = 1
int -> 10: Probability = 0.00, Count = 1
int -> checkStartAndEnd: Probability = 0.00, Count = 1
int -> addBreak: Probability = 0.00, Count = 1
int -> offset,: Probability = 0.00, Count = 1
firstRow, -> firstRow,: Probability = 1.00, Count = 7
lastRow, -> lastRow,: Probability = 0.86, Count = 6
lastRow, -> lastCol: Probability = 0.14, Count = 1
firstCol, -> firstCol,: Probability = 1.00, Count = 8
lastCol -> lastCol: Probability = 0.65, Count = 11
lastCol -> lastRow: Probability = 0.12, Count = 2
lastCol -> range,: Probability = 0.06, Count = 1
lastCol -> having: Probability = 0.06, Count = 1
lastCol -> +"had: Probability = 0.06, Count = 1
lastCol -> cells: Probability = 0.06, Count = 1
: -> {: Probability = 0.74, Count = 450
: -> :: Probability = 0.23, Count = 138
: -> (: Probability = 0.01, Count = 6
: -> scratchUTF16.chars: Probability = 0.00, Count = 2
: -> this: Probability = 0.01, Count = 7
: -> ?: Probability = 0.00, Count = 2
: -> ): Probability = 0.00, Count = 2
: -> null: Probability = 0.00, Count = 2
this -> this: Probability = 0.99, Count = 468
this -> CachedOrds: Probability = 0.00, Count = 1
this -> ;: Probability = 0.00, Count = 2
this -> }: Probability = 0.00, Count = 1
AddCellRangeAddress -> addCellRangeAddress: Probability = 1.00, Count = 4
delete -> delete: Probability = 1.00, Count = 6
key -> key: Probability = 0.85, Count = 147
key -> TreeMap.this.remove: Probability = 0.01, Count = 1
key -> Integer: Probability = 0.03, Count = 5
key -> Integer.valueOf: Probability = 0.02, Count = 4
key -> other.getBytes: Probability = 0.01, Count = 2
key -> _filePassRec.getEncryptionInfo: Probability = 0.01, Count = 1
key -> TreeMap.this.get: Probability = 0.01, Count = 1
key -> CharSequence: Probability = 0.05, Count = 8
key -> key,: Probability = 0.01, Count = 2
key -> dictionary.containsKey: Probability = 0.01, Count = 1
key -> ||: Probability = 0.01, Count = 1
i -> i: Probability = 0.89, Count = 953
i -> exceptions.length: Probability = 0.00, Count = 1
i -> i=0: Probability = 0.04, Count = 41
i -> i<len: Probability = 0.00, Count = 3
i -> :: Probability = 0.01, Count = 11
i -> ++i: Probability = 0.00, Count = 2
i -> i++: Probability = 0.00, Count = 2
i -> s: Probability = 0.00, Count = 2
i -> continue: Probability = 0.00, Count = 2
i -> DecisionInfo[numDecisions]: Probability = 0.00, Count = 1
i -> i>=0: Probability = 0.00, Count = 3
i -> i<children.size: Probability = 0.00, Count = 1
i -> children.get: Probability = 0.00, Count = 1
i -> i=offset: Probability = 0.00, Count = 2
i -> i<end: Probability = 0.00, Count = 3
i -> STANDARD_PALETTE_SIZE: Probability = 0.00, Count = 1
i -> i<count: Probability = 0.00, Count = 3
i -> i,: Probability = 0.00, Count = 5
i -> m.put: Probability = 0.00, Count = 2
i -> i==-1: Probability = 0.00, Count = 1
i -> 0: Probability = 0.00, Count = 2
i -> for: Probability = 0.00, Count = 1
i -> name.substring: Probability = 0.00, Count = 2
i -> ext.equals: Probability = 0.00, Count = 1
i -> "tmp": Probability = 0.00, Count = 1
i -> EXT_PATTERN.matcher: Probability = 0.00, Count = 1
i -> i<maxDims: Probability = 0.00, Count = 1
i -> i<4: Probability = 0.00, Count = 1
i -> Iterator<IndexableField>: Probability = 0.00, Count = 2
i -> nextTokenOnChannel: Probability = 0.00, Count = 1
i -> i+1: Probability = 0.00, Count = 2
i -> stringToMatch.length: Probability = 0.00, Count = 1
i -> -n: Probability = 0.00, Count = 1
i -> decompose: Probability = 0.00, Count = 1
i -> part[]: Probability = 0.00, Count = 1
i -> CharSequence[parts]: Probability = 0.00, Count = 1
i -> i<keys.length: Probability = 0.00, Count = 1
i -> i=1: Probability = 0.00, Count = 1
i -> i<=n: Probability = 0.00, Count = 1
i -> _iBook.getNumNames: Probability = 0.00, Count = 1
i -> getNumNames: Probability = 0.00, Count = 1
i -> !properties.containsKey: Probability = 0.00, Count = 1
i -> i<positions.length: Probability = 0.00, Count = 1
binarySearch -> binarySearch: Probability = 1.00, Count = 7
mKeys, -> mKeys,: Probability = 1.00, Count = 18
0, -> 0,: Probability = 0.89, Count = 336
0, -> size: Probability = 0.01, Count = 3
0, -> ][]: Probability = 0.01, Count = 2
0, -> nkeys,: Probability = 0.01, Count = 4
0, -> nvalues,: Probability = 0.01, Count = 4
0, -> mValues.length: Probability = 0.01, Count = 4
0, -> transitions[next]: Probability = 0.00, Count = 1
0, -> transitions[next+1]: Probability = 0.00, Count = 1
0, -> newParents,: Probability = 0.00, Count = 1
0, -> ,: Probability = 0.02, Count = 6
0, -> value,: Probability = 0.00, Count = 1
0, -> newLength: Probability = 0.01, Count = 4
0, -> length: Probability = 0.00, Count = 1
0, -> char[len--]: Probability = 0.00, Count = 1
0, -> -: Probability = 0.01, Count = 2
0, -> ]: Probability = 0.01, Count = 3
0, -> copy,: Probability = 0.00, Count = 1
0, -> input.length: Probability = 0.00, Count = 1
mSize, -> mSize,: Probability = 1.00, Count = 8
if -> if: Probability = 0.96, Count = 3535
if -> 0: Probability = 0.00, Count = 5
if -> !: Probability = 0.00, Count = 5
if -> ==: Probability = 0.01, Count = 40
if -> null: Probability = 0.01, Count = 21
if -> cell: Probability = 0.00, Count = 1
if -> >: Probability = 0.00, Count = 6
if -> !=: Probability = 0.00, Count = 17
if -> result: Probability = 0.00, Count = 1
if -> &&: Probability = 0.00, Count = 12
if -> throws: Probability = 0.00, Count = 2
if -> true: Probability = 0.00, Count = 3
if -> ||: Probability = 0.00, Count = 9
if -> symbol.getType: Probability = 0.00, Count = 3
if -> else: Probability = 0.00, Count = 14
if -> <: Probability = 0.00, Count = 6
if -> instanceof: Probability = 0.00, Count = 3
if -> >=: Probability = 0.00, Count = 3
if -> other.field_1_font_index: Probability = 0.00, Count = 1
if -> to: Probability = 0.00, Count = 2
if -> other.term: Probability = 0.00, Count = 1
if -> maxEdits: Probability = 0.00, Count = 2
if -> {: Probability = 0.00, Count = 3
>= -> >=: Probability = 0.97, Count = 292
>= -> 1: Probability = 0.01, Count = 3
>= -> 0: Probability = 0.01, Count = 4
>= -> index: Probability = 0.01, Count = 3
0 -> 0: Probability = 0.97, Count = 1671
0 -> <=: Probability = 0.00, Count = 2
0 -> i: Probability = 0.00, Count = 8
0 -> -1: Probability = 0.00, Count = 3
0 -> if: Probability = 0.00, Count = 2
0 -> Arrays.fill: Probability = 0.00, Count = 3
0 -> for: Probability = 0.00, Count = 5
0 -> <: Probability = 0.00, Count = 4
0 -> i++: Probability = 0.00, Count = 2
0 -> :: Probability = 0.00, Count = 6
0 -> n>0: Probability = 0.00, Count = 1
0 -> s<0: Probability = 0.00, Count = 1
0 -> this.slop: Probability = 0.00, Count = 1
0 -> int: Probability = 0.00, Count = 1
0 -> 1: Probability = 0.00, Count = 1
0 -> while: Probability = 0.00, Count = 4
0 -> +: Probability = 0.00, Count = 2
0 -> size: Probability = 0.00, Count = 4
0 -> +=: Probability = 0.00, Count = 1
0 -> =: Probability = 0.00, Count = 1
0 -> ;: Probability = 0.00, Count = 1
0 -> >: Probability = 0.00, Count = 1
0 -> tailDirIdx: Probability = 0.00, Count = 1
0 -> new: Probability = 0.00, Count = 1
mValues[i] -> mValues[i]: Probability = 1.00, Count = 12
!= -> !=: Probability = 0.96, Count = 821
!= -> if: Probability = 0.01, Count = 6
!= -> 0: Probability = 0.00, Count = 3
!= -> false: Probability = 0.00, Count = 4
!= -> null: Probability = 0.01, Count = 10
!= -> true: Probability = 0.00, Count = 3
!= -> &&: Probability = 0.00, Count = 2
!= -> ||format1: Probability = 0.00, Count = 1
!= -> ||osVersion1: Probability = 0.00, Count = 1
!= -> ||sectionCount1: Probability = 0.00, Count = 1
!= -> .containsAll: Probability = 0.00, Count = 1
!= -> stat2.round: Probability = 0.00, Count = 1
!= -> stat2.countsByTime: Probability = 0.00, Count = 1
DELETED -> DELETED: Probability = 1.00, Count = 4
mGarbage -> mGarbage: Probability = 1.00, Count = 9
true -> true: Probability = 0.99, Count = 473
true -> o: Probability = 0.00, Count = 1
true -> false: Probability = 0.00, Count = 2
NGit.Api.CreateBranchCommand -> CreateBranchCommand: Probability = 1.00, Count = 5
SetStartPoint -> setStartPoint: Probability = 0.75, Count = 3
SetStartPoint -> RevCommit: Probability = 0.25, Count = 1
RevCommit -> RevCommit: Probability = 0.94, Count = 33
RevCommit -> lookupCommit: Probability = 0.03, Count = 1
RevCommit -> RevObject: Probability = 0.03, Count = 1
startPoint -> startPoint: Probability = 1.00, Count = 6
CheckCallable -> checkCallable: Probability = 1.00, Count = 49
this.startCommit -> this.startCommit: Probability = 1.00, Count = 4
this.startPoint -> this.startPoint: Probability = 1.00, Count = 3
null -> null: Probability = 0.97, Count = 1309
null -> group.sortValues: Probability = 0.00, Count = 1
null -> ?: Probability = 0.00, Count = 5
null -> ==: Probability = 0.01, Count = 7
null -> !=: Probability = 0.01, Count = 12
null -> Integer.valueOf: Probability = 0.00, Count = 3
null -> :: Probability = 0.00, Count = 2
null -> else: Probability = 0.00, Count = 1
null -> if: Probability = 0.00, Count = 2
null -> name==null: Probability = 0.00, Count = 1
null -> value==null: Probability = 0.00, Count = 1
null -> ?null: Probability = 0.00, Count = 1
null -> searcherMgr.close: Probability = 0.00, Count = 1
null -> ||: Probability = 0.00, Count = 1
null -> last: Probability = 0.00, Count = 1
null -> DocValuesType.SORTED: Probability = 0.00, Count = 1
null -> fmt: Probability = 0.00, Count = 1
null -> FSDirectory: Probability = 0.00, Count = 1
null -> DocValuesType.BINARY: Probability = 0.00, Count = 1
null -> protectSheet: Probability = 0.00, Count = 1
null -> shouldProtectObjects,boolean: Probability = 0.00, Count = 1
null -> _protectRecord: Probability = 0.00, Count = 1
centerX -> centerX: Probability = 1.00, Count = 1
+ -> +: Probability = 0.85, Count = 1972
+ -> System.out.println: Probability = 0.00, Count = 5
+ -> .getSimpleName: Probability = 0.00, Count = 2
+ -> "+: Probability = 0.01, Count = 15
+ -> "DeltaIndex[": Probability = 0.00, Count = 1
+ -> units[u]: Probability = 0.00, Count = 1
+ -> System.identityHashCode: Probability = 0.00, Count = 1
+ -> failed: Probability = 0.00, Count = 2
+ -> field_4_tag: Probability = 0.00, Count = 1
+ -> field_5_size: Probability = 0.00, Count = 1
+ -> field_6_ref: Probability = 0.00, Count = 1
+ -> field_7_offset: Probability = 0.00, Count = 1
+ -> 28: Probability = 0.00, Count = 1
+ -> field_8_usage: Probability = 0.00, Count = 1
+ -> 32]: Probability = 0.00, Count = 1
+ -> field_9_name: Probability = 0.00, Count = 1
+ -> 33]: Probability = 0.00, Count = 1
+ -> field_10_unused2: Probability = 0.00, Count = 1
+ -> 34]: Probability = 0.00, Count = 1
+ -> field_11_unused3: Probability = 0.00, Count = 1
+ -> 35]: Probability = 0.00, Count = 1
+ -> field_12_blipRecord: Probability = 0.00, Count = 2
+ -> field_12_blipRecord.fillFields: Probability = 0.00, Count = 1
+ -> 36,: Probability = 0.00, Count = 1
+ -> _remainingData: Probability = 0.00, Count = 1
+ -> _remainingData,: Probability = 0.00, Count = 1
+ -> field_12_blipRecord.getRecordSize: Probability = 0.00, Count = 1
+ -> ": Probability = 0.00, Count = 10
+ -> supports: Probability = 0.00, Count = 2
+ -> offset=": Probability = 0.00, Count = 1
+ -> [0,: Probability = 0.00, Count = 1
+ -> .getName: Probability = 0.00, Count = 2
+ -> [1,"+MAX_POINTS+"]: Probability = 0.00, Count = 1
+ -> range!": Probability = 0.00, Count = 1
+ -> 1]: Probability = 0.00, Count = 1
+ -> 2]: Probability = 0.00, Count = 1
+ -> "RemoteRefUpdate[remoteName="+: Probability = 0.00, Count = 1
+ -> remoteName+: Probability = 0.00, Count = 1
+ -> status+: Probability = 0.00, Count = 1
+ -> expectedOldObjectId: Probability = 0.00, Count = 1
+ -> expectedOldObjectId.name: Probability = 0.00, Count = 1
+ -> "..."+: Probability = 0.00, Count = 1
+ -> newObjectId.name: Probability = 0.00, Count = 1
+ -> fastForward": Probability = 0.00, Count = 1
+ -> srcRef=": Probability = 0.00, Count = 1
+ -> srcRef+: Probability = 0.00, Count = 1
+ -> forceUpdate": Probability = 0.00, Count = 1
+ -> message="+: Probability = 0.00, Count = 1
+ -> hashCode: Probability = 0.00, Count = 1
+ -> POILogger.ERROR,: Probability = 0.00, Count = 2
+ -> actualCodec: Probability = 0.00, Count = 2
+ -> !actualCodec.equals: Probability = 0.00, Count = 1
+ -> CorruptIndexException: Probability = 0.00, Count = 5
+ -> "codec: Probability = 0.00, Count = 3
+ -> mismatch:: Probability = 0.00, Count = 3
+ -> actual: Probability = 0.00, Count = 2
+ -> IndexFormatTooOldException: Probability = 0.00, Count = 2
+ -> IndexFormatTooNewException: Probability = 0.00, Count = 1
+ -> "block: Probability = 0.00, Count = 1
+ -> small: Probability = 0.00, Count = 1
+ -> RamUsageEstimator.NUM_BYTES_OBJECT_REF+: Probability = 0.00, Count = 1
+ -> values.bytes: Probability = 0.00, Count = 2
+ -> .length: Probability = 0.00, Count = 3
+ -> ",: Probability = 0.00, Count = 3
+ -> decompressor.end: Probability = 0.00, Count = 1
+ -> "+i+": Probability = 0.00, Count = 1
+ -> char.: Probability = 0.00, Count = 1
+ -> load: Probability = 0.00, Count = 1
+ -> hunspell: Probability = 0.00, Count = 1
+ -> data!: Probability = 0.00, Count = 1
+ -> [dictionary=": Probability = 0.00, Count = 1
+ -> ",affix=": Probability = 0.00, Count = 1
+ -> Escher: Probability = 0.00, Count = 2
+ -> docData.setBody: Probability = 0.00, Count = 2
+ -> n: Probability = 0.00, Count = 3
+ -> "n,: Probability = 0.00, Count = 1
+ -> "N,: Probability = 0.00, Count = 1
+ -> pre-increment: Probability = 0.00, Count = 1
+ -> text.begin: Probability = 0.00, Count = 1
+ -> getPathString: Probability = 0.00, Count = 2
+ -> this.exceptions: Probability = 0.00, Count = 2
+ -> doc: Probability = 0.00, Count = 1
+ -> length=": Probability = 0.00, Count = 2
+ -> 0.5: Probability = 0.00, Count = 1
+ -> infoStream.isEnabled: Probability = 0.00, Count = 3
+ -> "All: Probability = 0.00, Count = 1
+ -> upgraded: Probability = 0.00, Count = 2
+ -> "Enforcing: Probability = 0.00, Count = 1
+ -> Allowable: Probability = 0.00, Count = 2
+ -> absRowIx: Probability = 0.00, Count = 1
+ -> instead: Probability = 0.00, Count = 4
+ -> output=": Probability = 0.00, Count = 1
+ -> LittleEndian.getInt: Probability = 0.00, Count = 1
+ -> +",: Probability = 0.00, Count = 2
+ -> field='": Probability = 0.00, Count = 1
+ -> field: Probability = 0.00, Count = 1
+ -> +': Probability = 0.00, Count = 2
+ -> field_1_UID,: Probability = 0.00, Count = 1
+ -> 16]: Probability = 0.00, Count = 1
+ -> field_2_marker: Probability = 0.00, Count = 1
+ -> pd: Probability = 0.00, Count = 1
+ -> getPicturedata: Probability = 0.00, Count = 1
+ -> pd,: Probability = 0.00, Count = 1
+ -> 17,: Probability = 0.00, Count = 1
+ -> pd.length: Probability = 0.00, Count = 2
+ -> ".": Probability = 0.00, Count = 1
+ -> number: Probability = 0.00, Count = 1
+ -> docCount: Probability = 0.00, Count = 1
+ -> file=": Probability = 0.00, Count = 2
+ -> out.toString: Probability = 0.00, Count = 2
+ -> undefined: Probability = 0.00, Count = 1
+ -> name="+name+": Probability = 0.00, Count = 1
+ -> value="+value: Probability = 0.00, Count = 1
+ -> .getConfig: Probability = 0.00, Count = 1
+ -> PPT: Probability = 0.00, Count = 1
+ -> VSD: Probability = 0.00, Count = 1
+ -> such: Probability = 0.00, Count = 1
+ -> name+: Probability = 0.00, Count = 1
+ -> "\",: Probability = 0.00, Count = 1
+ -> _byname.keySet: Probability = 0.00, Count = 1
+ -> ",": Probability = 0.00, Count = 1
+ -> .toString: Probability = 0.00, Count = 3
+ -> sum: Probability = 0.00, Count = 2
+ -> subs: Probability = 0.00, Count = 1
+ -> "longer: Probability = 0.00, Count = 1
+ -> supported.: Probability = 0.00, Count = 1
+ -> Use: Probability = 0.00, Count = 1
+ -> bytes[pos]&0x7f: Probability = 0.00, Count = 1
+ -> bytes[pos+1]&0xff: Probability = 0.00, Count = 1
+ -> .append: Probability = 0.00, Count = 2
+ -> +">": Probability = 0.00, Count = 2
+ -> path=": Probability = 0.00, Count = 1
+ -> queries[i].getClass: Probability = 0.00, Count = 1
+ -> maxTokenCount=": Probability = 0.00, Count = 1
+ -> expected: Probability = 0.00, Count = 1
+ -> n>=header.length: Probability = 0.00, Count = 1
+ -> format:: Probability = 0.00, Count = 2
+ -> n+1: Probability = 0.00, Count = 2
+ -> "+header.length+": Probability = 0.00, Count = 2
+ -> ::: Probability = 0.00, Count = 2
+ -> setDocDataField: Probability = 0.00, Count = 2
+ -> ++n: Probability = 0.00, Count = 1
+ -> n!=header.length-1: Probability = 0.00, Count = 1
+ -> +"["+inv+nodeName+"]": Probability = 0.00, Count = 1
+ -> l=null": Probability = 0.00, Count = 1
+ -> l=": Probability = 0.00, Count = 1
+ -> subs[i].length: Probability = 0.00, Count = 1
+ -> b=": Probability = 0.00, Count = 1
+ -> end=": Probability = 0.00, Count = 3
+ -> starts[subs.length]: Probability = 0.00, Count = 1
+ -> "the: Probability = 0.00, Count = 1
+ -> buffer:: Probability = 0.00, Count = 2
+ -> super.toString: Probability = 0.00, Count = 1
+ -> "Cell: Probability = 0.00, Count = 3
+ -> readerIndex=": Probability = 0.00, Count = 1
+ -> readerIndex: Probability = 0.00, Count = 1
+ -> nodeID=": Probability = 0.00, Count = 2
+ -> index.getNodeID: Probability = 0.00, Count = 2
+ -> isLeaf=": Probability = 0.00, Count = 2
+ -> index.isLeafNode: Probability = 0.00, Count = 1
+ -> "-": Probability = 0.00, Count = 1
+ -> UNSPECIFIED:return: Probability = 0.00, Count = 1
+ -> "!": Probability = 0.00, Count = 1
+ -> "=": Probability = 0.00, Count = 1
+ -> ",Explanation.match: Probability = 0.00, Count = 1
+ -> "docFreq,: Probability = 0.00, Count = 1
+ -> "docCount,: Probability = 0.00, Count = 1
+ -> "State: Probability = 0.00, Count = 1
+ -> absColIx: Probability = 0.00, Count = 1
+ -> blockSize=": Probability = 0.00, Count = 1
+ -> blockSize: Probability = 0.00, Count = 1
+ -> "ParserRuleContext"+rules+": Probability = 0.00, Count = 1
+ -> +"start=": Probability = 0.00, Count = 1
+ -> start: Probability = 0.00, Count = 1
+ -> stop=": Probability = 0.00, Count = 1
+ -> stop: Probability = 0.00, Count = 1
+ -> useless: Probability = 0.00, Count = 1
+ -> +":"+trans: Probability = 0.00, Count = 1
+ -> provided.": Probability = 0.00, Count = 1
+ -> we: Probability = 0.00, Count = 2
+ -> ":/": Probability = 0.00, Count = 1
+ -> in: Probability = 0.00, Count = 3
+ -> matchelements="+: Probability = 0.00, Count = 1
+ -> this.minimumMatchingmElements: Probability = 0.00, Count = 2
+ -> "/>": Probability = 0.00, Count = 1
+ -> matchelements=": Probability = 0.00, Count = 1
+ -> :: Probability = 0.00, Count = 1
+ -> Long.BYTES+: Probability = 0.00, Count = 1
+ -> size: Probability = 0.00, Count = 1
+ -> label: Probability = 0.00, Count = 1
+ -> ":: Probability = 0.00, Count = 1
+ -> bitsPerValue+: Probability = 0.00, Count = 1
+ -> ",size=": Probability = 0.00, Count = 1
+ -> ",blocks=": Probability = 0.00, Count = 1
+ -> sheetName.charAt: Probability = 0.00, Count = 3
+ -> file: Probability = 0.00, Count = 1
+ -> "\": Probability = 0.00, Count = 1
+ -> cell.getColumn: Probability = 0.00, Count = 1
+ -> uses: Probability = 0.00, Count = 1
+ -> XF: Probability = 0.00, Count = 1
+ -> that": Probability = 0.00, Count = 1
+ -> hexToInt: Probability = 0.00, Count = 2
+ -> sequence:: Probability = 0.00, Count = 1
+ -> payloadIndex: Probability = 0.00, Count = 1
+ -> into: Probability = 0.00, Count = 2
+ -> "Point: Probability = 0.00, Count = 1
+ -> [%dx%d]",: Probability = 0.00, Count = 1
+ -> "<ReplaceOp@"+tokens.get: Probability = 0.00, Count = 1
+ -> "seek: Probability = 0.00, Count = 1
+ -> "+index+": Probability = 0.00, Count = 1
+ -> "+getBufferStartIndex: Probability = 0.00, Count = 1
+ -> +".."+: Probability = 0.00, Count = 1
+ -> +n: Probability = 0.00, Count = 1
+ -> "+pred+",: Probability = 0.00, Count = 1
+ -> "+alt+: Probability = 0.00, Count = 1
+ -> "[NOTE]\n": Probability = 0.00, Count = 1
+ -> field_2_col: Probability = 0.00, Count = 1
+ -> .shapeid=: Probability = 0.00, Count = 1
+ -> field_4_shapeid: Probability = 0.00, Count = 1
+ -> .author: Probability = 0.00, Count = 1
+ -> "[/NOTE]\n": Probability = 0.00, Count = 1
+ -> expectedChecksum: Probability = 0.00, Count = 3
+ -> readCRC: Probability = 0.00, Count = 1
+ -> "checksum: Probability = 0.00, Count = 1
+ -> hardware: Probability = 0.00, Count = 1
+ -> problem?: Probability = 0.00, Count = 1
+ -> maxDocsPerChunk=": Probability = 0.00, Count = 1
+ -> maxDocsPerChunk: Probability = 0.00, Count = 1
+ -> blockShift: Probability = 0.00, Count = 1
+ -> firstCell.formatAsString: Probability = 0.00, Count = 1
+ -> sfr.getRange: Probability = 0.00, Count = 1
+ -> _sfr: Probability = 0.00, Count = 1
+ -> sfr: Probability = 0.00, Count = 1
+ -> _firstCell: Probability = 0.00, Count = 1
+ -> <<24: Probability = 0.00, Count = 1
+ -> buffer[2+limit]&0xff: Probability = 0.00, Count = 1
+ -> <<8: Probability = 0.00, Count = 1
+ -> buffer[3+limit]&0xff: Probability = 0.00, Count = 1
+ -> ByteBlockPool.NEXT_LEVEL_ARRAY[level]: Probability = 0.00, Count = 1
+ -> 1E-6: Probability = 0.00, Count = 1
+ -> "point: Probability = 0.00, Count = 1
+ -> "+n+": Probability = 0.00, Count = 1
+ -> illegal: Probability = 0.00, Count = 1
+ -> "+numPoints+": Probability = 0.00, Count = 1
+ -> points!": Probability = 0.00, Count = 1
+ -> len."+: Probability = 0.00, Count = 1
+ -> len=": Probability = 0.00, Count = 1
+ -> end:: Probability = 0.00, Count = 1
+ -> opName.substring: Probability = 0.00, Count = 1
+ -> index+1,: Probability = 0.00, Count = 1
+ -> opName.length: Probability = 0.00, Count = 1
+ -> "<"+opName+"@"+tokens.get: Probability = 0.00, Count = 1
+ -> "o:"+offset+": Probability = 0.00, Count = 1
+ -> p:"+position+": Probability = 0.00, Count = 1
+ -> c:"+count: Probability = 0.00, Count = 1
+ -> rptGroup: Probability = 0.00, Count = 1
+ -> >=0: Probability = 0.00, Count = 1
+ -> field": Probability = 0.00, Count = 1
right -> w: Probability = 0.10, Count = 1
right -> &&x: Probability = 0.20, Count = 2
right -> this.x: Probability = 0.30, Count = 3
right -> &&y: Probability = 0.20, Count = 2
right -> this.w: Probability = 0.20, Count = 2
1 -> /: Probability = 0.00, Count = 2
1 -> 1: Probability = 0.94, Count = 484
1 -> -1: Probability = 0.02, Count = 10
1 -> ArrayUtil.grow: Probability = 0.00, Count = 2
1 -> +: Probability = 0.01, Count = 5
1 -> ?: Probability = 0.00, Count = 2
1 -> -: Probability = 0.01, Count = 3
1 -> 1,: Probability = 0.00, Count = 2
1 -> i+1: Probability = 0.00, Count = 1
1 -> grow: Probability = 0.00, Count = 1
1 -> >: Probability = 0.00, Count = 1
1 -> else: Probability = 0.00, Count = 1
1 -> _input.LT: Probability = 0.00, Count = 1
>> -> 2: Probability = 0.03, Count = 2
>> -> >>>: Probability = 0.34, Count = 27
>> -> >>: Probability = 0.54, Count = 43
>> -> final: Probability = 0.10, Count = 8
ListPresetsResponse -> ListPresetsResult: Probability = 1.00, Count = 2
ListPresets -> listPresets: Probability = 1.00, Count = 3
new -> new: Probability = 0.94, Count = 3047
new -> {: Probability = 0.01, Count = 46
new -> (: Probability = 0.01, Count = 18
new -> ArrayList<>: Probability = 0.01, Count = 33
new -> =: Probability = 0.01, Count = 29
new -> TreeSet<>: Probability = 0.00, Count = 2
new -> HashMap<>: Probability = 0.00, Count = 4
new -> return: Probability = 0.00, Count = 10
new -> request: Probability = 0.00, Count = 4
new -> ]: Probability = 0.00, Count = 12
new -> ): Probability = 0.01, Count = 29
new -> byte[: Probability = 0.00, Count = 4
new -> throw: Probability = 0.00, Count = 1
new -> ExternalBookBlock[]: Probability = 0.00, Count = 1
new -> ,: Probability = 0.00, Count = 2
new -> RuntimeException: Probability = 0.00, Count = 1
new -> HashSet<>: Probability = 0.00, Count = 1
new -> toByteArray: Probability = 0.00, Count = 1
new -> char[0]: Probability = 0.00, Count = 1
new -> MultiTermsEnum: Probability = 0.00, Count = 1
new -> slices: Probability = 0.00, Count = 1
new -> TermMergeQueue: Probability = 0.00, Count = 1
new -> slices.length: Probability = 0.00, Count = 1
new -> must: Probability = 0.00, Count = 1
new -> not: Probability = 0.00, Count = 1
new -> be: Probability = 0.00, Count = 1
ListPresetsRequest -> ListPresetsRequest: Probability = 1.00, Count = 2
DeleteFolderContentsResponse -> DeleteFolderContentsResult: Probability = 1.00, Count = 1
DeleteFolderContents -> deleteFolderContents: Probability = 1.00, Count = 1
DeleteFolderContentsRequest -> DeleteFolderContentsRequest: Probability = 1.00, Count = 1
Invoke<DeleteFolderContentsResponse> -> executeDeleteFolderContents: Probability = 1.00, Count = 1
GetConsoleOutputResponse -> GetConsoleOutputResult: Probability = 1.00, Count = 1
GetConsoleOutput -> getConsoleOutput: Probability = 1.00, Count = 1
GetConsoleOutputRequest -> GetConsoleOutputRequest: Probability = 1.00, Count = 2
Invoke<GetConsoleOutputResponse> -> executeGetConsoleOutput: Probability = 1.00, Count = 1
PutMailboxPermissionsResponse -> PutMailboxPermissionsResult: Probability = 1.00, Count = 1
PutMailboxPermissions -> putMailboxPermissions: Probability = 1.00, Count = 1
PutMailboxPermissionsRequest -> PutMailboxPermissionsRequest: Probability = 1.00, Count = 1
Invoke<PutMailboxPermissionsResponse> -> executePutMailboxPermissions: Probability = 1.00, Count = 1
DisableSnapshotCopyResponse -> Cluster: Probability = 1.00, Count = 1
DisableSnapshotCopy -> disableSnapshotCopy: Probability = 1.00, Count = 1
DisableSnapshotCopyRequest -> DisableSnapshotCopyRequest: Probability = 1.00, Count = 1
Invoke<DisableSnapshotCopyResponse> -> executeDisableSnapshotCopy: Probability = 1.00, Count = 1
static -> static: Probability = 0.98, Count = 658
static -> int: Probability = 0.00, Count = 3
static -> final: Probability = 0.00, Count = 2
static -> String: Probability = 0.01, Count = 5
static -> byte[]: Probability = 0.00, Count = 1
string -> String: Probability = 0.98, Count = 1903
string -> obtainFile: Probability = 0.00, Count = 1
string -> query,String: Probability = 0.00, Count = 1
string -> userId,: Probability = 0.00, Count = 1
string -> name: Probability = 0.00, Count = 1
string -> segmentFileName: Probability = 0.00, Count = 2
string -> segmentName,: Probability = 0.00, Count = 2
string -> segmentSuffix,: Probability = 0.00, Count = 1
string -> allocatedStorage,: Probability = 0.00, Count = 1
string -> dBInstanceClass,: Probability = 0.00, Count = 1
string -> masterUsername,String: Probability = 0.00, Count = 1
string -> (: Probability = 0.00, Count = 2
string -> archiveId,: Probability = 0.00, Count = 1
string -> setFormat: Probability = 0.00, Count = 1
string -> getExtension: Probability = 0.00, Count = 2
string -> promptKeyboardInteractive: Probability = 0.00, Count = 1
string -> name,String: Probability = 0.00, Count = 1
string -> instruction,: Probability = 0.00, Count = 1
string -> prompt,: Probability = 0.00, Count = 1
string -> setDelimiters: Probability = 0.00, Count = 1
string -> serverCertificateId,: Probability = 0.00, Count = 1
string -> SupportsCreating<Experiment.DefinitionStages.Blank>,: Probability = 0.00, Count = 1
string -> HasInner<ExperimentsInner>: Probability = 0.00, Count = 1
string -> name.lastIndexOf: Probability = 0.00, Count = 1
string -> sessionToken,: Probability = 0.00, Count = 1
string -> toString: Probability = 0.00, Count = 2
string -> {: Probability = 0.00, Count = 1
string -> groupId,: Probability = 0.00, Count = 1
string -> formatWithConflicts: Probability = 0.00, Count = 1
string -> message,List<String>: Probability = 0.00, Count = 1
string -> suffix,: Probability = 0.00, Count = 1
string -> CharSequence: Probability = 0.00, Count = 2
string -> namespace,: Probability = 0.00, Count = 1
string -> simple,: Probability = 0.00, Count = 1
string -> qualified,Attributes: Probability = 0.00, Count = 1
string -> field: Probability = 0.00, Count = 1
string -> Integer: Probability = 0.00, Count = 2
string -> postTag,: Probability = 0.00, Count = 1
StripExtension -> stripExtension: Probability = 1.00, Count = 1
filename -> filename: Probability = 1.00, Count = 16
idx -> idx: Probability = 0.69, Count = 74
idx -> filename.length: Probability = 0.01, Count = 1
idx -> 1+idx: Probability = 0.02, Count = 2
idx -> queue.size: Probability = 0.02, Count = 2
idx -> queue.top: Probability = 0.04, Count = 4
idx -> .docID: Probability = 0.02, Count = 2
idx -> doc:: Probability = 0.02, Count = 2
idx -> "doc=": Probability = 0.02, Count = 2
idx -> +: Probability = 0.05, Count = 5
idx -> newDoc=": Probability = 0.02, Count = 2
idx -> CountryRecord.sid: Probability = 0.02, Count = 2
idx -> "CountryRecord: Probability = 0.01, Count = 1
idx -> v.substring: Probability = 0.02, Count = 2
idx -> expandRow: Probability = 0.01, Count = 1
idx -> ExternSheetRecord.sid: Probability = 0.02, Count = 2
idx -> SupBookRecord.sid: Probability = 0.01, Count = 1
idx -> countNames: Probability = 0.01, Count = 1
idx -> _definedNames.size: Probability = 0.01, Count = 1
idx -> countNames,: Probability = 0.01, Count = 1
filename.IndexOf -> filename.indexOf: Probability = 1.00, Count = 2
'.' -> '.': Probability = 1.00, Count = 8
-1 -> -1: Probability = 0.91, Count = 241
-1 -> 1: Probability = 0.02, Count = 5
-1 -> this.positions: Probability = 0.01, Count = 2
-1 -> positions: Probability = 0.01, Count = 2
-1 -> =: Probability = 0.00, Count = 1
-1 -> 0: Probability = 0.00, Count = 1
-1 -> BM25Similarity: Probability = 0.00, Count = 1
-1 -> else: Probability = 0.00, Count = 1
-1 -> outputs: Probability = 0.02, Count = 4
-1 -> FSTCompiler<>: Probability = 0.01, Count = 2
-1 -> FST.INPUT_TYPE.BYTE1,: Probability = 0.01, Count = 2
-1 -> scratchInts: Probability = 0.01, Count = 2
filename.Substring -> filename.substring: Probability = 1.00, Count = 4
java.nio.ByteBuffer -> ByteBuffer: Probability = 1.00, Count = 73
putInt -> putInt: Probability = 1.00, Count = 7
value -> value: Probability = 0.92, Count = 469
value -> args.get: Probability = 0.00, Count = 1
value -> =: Probability = 0.01, Count = 5
value -> unQuoteUnEscape: Probability = 0.00, Count = 2
value -> long: Probability = 0.00, Count = 1
value -> oldValue: Probability = 0.00, Count = 2
value -> containsValue: Probability = 0.00, Count = 1
value -> props.containsValue: Probability = 0.00, Count = 1
value -> this.value: Probability = 0.00, Count = 1
value -> String": Probability = 0.00, Count = 1
value -> "value: Probability = 0.00, Count = 2
value -> name,value: Probability = 0.00, Count = 1
value -> Number: Probability = 0.00, Count = 1
value -> sb: Probability = 0.01, Count = 4
value -> _value: Probability = 0.00, Count = 1
value -> _value,: Probability = 0.00, Count = 1
value -> a.section,: Probability = 0.00, Count = 1
value -> a.subsection,: Probability = 0.00, Count = 1
value -> a.name,b.section,: Probability = 0.00, Count = 1
value -> b.subsection,: Probability = 0.00, Count = 1
value -> -value: Probability = 0.00, Count = 1
value -> base10byte[value: Probability = 0.00, Count = 1
value -> float: Probability = 0.00, Count = 2
value -> input.ints[i+input.offset]: Probability = 0.00, Count = 1
value -> Byte.MIN_VALUE: Probability = 0.00, Count = 1
value -> 255:: Probability = 0.00, Count = 1
value -> fit: Probability = 0.00, Count = 1
value -> byte": Probability = 0.00, Count = 1
value -> scratch.setByteAt: Probability = 0.00, Count = 1
value -> elements.size: Probability = 0.00, Count = 1
throw -> throw: Probability = 0.80, Count = 1097
throw -> throws: Probability = 0.06, Count = 84
throw -> IOException: Probability = 0.07, Count = 91
throw -> Error: Probability = 0.00, Count = 1
throw -> out.write: Probability = 0.00, Count = 6
throw -> RuntimeException: Probability = 0.01, Count = 9
throw -> "Invalid: Probability = 0.00, Count = 2
throw -> new: Probability = 0.01, Count = 10
throw -> in: Probability = 0.00, Count = 1
throw -> UnsupportedOperationException: Probability = 0.00, Count = 4
throw -> IllegalArgumentException: Probability = 0.00, Count = 6
throw -> IllegalStateException: Probability = 0.01, Count = 8
throw -> catch: Probability = 0.00, Count = 3
throw -> e: Probability = 0.00, Count = 4
throw -> NullPointerException: Probability = 0.00, Count = 6
throw -> null: Probability = 0.01, Count = 7
throw -> is: Probability = 0.00, Count = 2
throw -> to: Probability = 0.00, Count = 4
throw -> ==: Probability = 0.00, Count = 5
throw -> JGitText.get: Probability = 0.00, Count = 1
throw -> InterruptedException,: Probability = 0.00, Count = 1
throw -> ExecutionException: Probability = 0.00, Count = 1
throw -> >: Probability = 0.00, Count = 1
throw -> super.reset: Probability = 0.00, Count = 1
throw -> "Cannot: Probability = 0.00, Count = 1
throw -> checkReadPrimitiveTypes: Probability = 0.00, Count = 2
throw -> NoSuchElementException: Probability = 0.00, Count = 1
throw -> +: Probability = 0.00, Count = 1
throw -> drain: Probability = 0.00, Count = 2
throw -> output.writeByte: Probability = 0.00, Count = 1
System.NotImplementedException -> ReadOnlyBufferException: Probability = 0.06, Count = 10
System.NotImplementedException -> buf,: Probability = 0.01, Count = 2
System.NotImplementedException -> 0,: Probability = 0.06, Count = 10
System.NotImplementedException -> written++: Probability = 0.01, Count = 2
System.NotImplementedException -> connect: Probability = 0.04, Count = 6
System.NotImplementedException -> readLong: Probability = 0.01, Count = 1
System.NotImplementedException -> throws: Probability = 0.03, Count = 4
System.NotImplementedException -> IOException: Probability = 0.03, Count = 4
System.NotImplementedException -> buffer,: Probability = 0.05, Count = 8
System.NotImplementedException -> ClosedInputStream: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.readByte: Probability = 0.01, Count = 1
System.NotImplementedException -> output.close: Probability = 0.01, Count = 1
System.NotImplementedException -> checkWritePrimitiveTypes: Probability = 0.08, Count = 13
System.NotImplementedException -> primitiveTypes.writeChar: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.writeByte: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.readFully: Probability = 0.01, Count = 2
System.NotImplementedException -> input.close: Probability = 0.01, Count = 1
System.NotImplementedException -> Streams.skipByReading: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.readBoolean: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.writeFloat: Probability = 0.01, Count = 1
System.NotImplementedException -> buffer.length: Probability = 0.01, Count = 2
System.NotImplementedException -> write: Probability = 0.04, Count = 6
System.NotImplementedException -> ByteOrder.BIG_ENDIAN: Probability = 0.01, Count = 2
System.NotImplementedException -> scratch,: Probability = 0.01, Count = 2
System.NotImplementedException -> ModifiedUtf8.encode: Probability = 0.01, Count = 1
System.NotImplementedException -> isClosed: Probability = 0.01, Count = 1
System.NotImplementedException -> notifyAll: Probability = 0.01, Count = 2
System.NotImplementedException -> primitiveTypes.writeUTF: Probability = 0.01, Count = 1
System.NotImplementedException -> NotActiveException: Probability = 0.01, Count = 1
System.NotImplementedException -> writeFieldValues: Probability = 0.01, Count = 1
System.NotImplementedException -> str.getBytes: Probability = 0.01, Count = 1
System.NotImplementedException -> "UTF-16BE": Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.write: Probability = 0.01, Count = 2
System.NotImplementedException -> fd,: Probability = 0.02, Count = 3
System.NotImplementedException -> dst,: Probability = 0.01, Count = 1
System.NotImplementedException -> super.read: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.writeBoolean: Probability = 0.01, Count = 1
System.NotImplementedException -> readInt: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.writeLong: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.readFloat: Probability = 0.01, Count = 1
System.NotImplementedException -> out: Probability = 0.01, Count = 2
System.NotImplementedException -> AssertionError: Probability = 0.01, Count = 1
System.NotImplementedException -> readShort: Probability = 0.01, Count = 2
System.NotImplementedException -> NullPointerException: Probability = 0.01, Count = 1
System.NotImplementedException -> sync.innerGet: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.readLong: Probability = 0.01, Count = 1
System.NotImplementedException -> parser.setContentHandler: Probability = 0.01, Count = 1
System.NotImplementedException -> AbstractContentHandler: Probability = 0.01, Count = 1
System.NotImplementedException -> Streams.readSingleByte: Probability = 0.01, Count = 1
System.NotImplementedException -> this: Probability = 0.02, Count = 3
System.NotImplementedException -> super.close: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.writeBytes: Probability = 0.01, Count = 1
System.NotImplementedException -> lineNumber: Probability = 0.02, Count = 3
System.NotImplementedException -> markedLineNumber: Probability = 0.02, Count = 3
System.NotImplementedException -> lastWasCR: Probability = 0.01, Count = 2
System.NotImplementedException -> markedLastWasCR: Probability = 0.01, Count = 2
System.NotImplementedException -> RemoteException: Probability = 0.01, Count = 1
System.NotImplementedException -> close: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.readDouble: Probability = 0.01, Count = 1
System.NotImplementedException -> decodeUTF: Probability = 0.01, Count = 2
System.NotImplementedException -> in.readUnsignedShort: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.writeShort: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveData.read: Probability = 0.01, Count = 1
System.NotImplementedException -> localPatternChars: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.writeDouble: Probability = 0.01, Count = 1
System.NotImplementedException -> src.connect: Probability = 0.01, Count = 2
System.NotImplementedException -> readUnsignedShort: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.readChar: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.readInt: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveData.available: Probability = 0.01, Count = 1
System.NotImplementedException -> lastChar: Probability = 0.01, Count = 2
System.NotImplementedException -> markedLastChar: Probability = 0.01, Count = 1
System.NotImplementedException -> output.flush: Probability = 0.01, Count = 1
System.NotImplementedException -> TC_RESET: Probability = 0.01, Count = 1
System.NotImplementedException -> resetState: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.readLine: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.writeInt: Probability = 0.01, Count = 1
System.NotImplementedException -> primitiveTypes.writeChars: Probability = 0.01, Count = 1
o -> o: Probability = 0.89, Count = 278
o -> sameClassAs: Probability = 0.01, Count = 2
o -> Object...: Probability = 0.00, Count = 1
o -> Multiset.Entry: Probability = 0.01, Count = 3
o -> contains: Probability = 0.00, Count = 1
o -> final: Probability = 0.02, Count = 7
o -> object: Probability = 0.01, Count = 4
o -> Entry<?>: Probability = 0.01, Count = 2
o -> ==: Probability = 0.00, Count = 1
o -> value: Probability = 0.01, Count = 2
o -> false: Probability = 0.01, Count = 2
o -> containsKey: Probability = 0.00, Count = 1
o -> o.getClass: Probability = 0.00, Count = 1
o -> ConcurrentHashMap.this.remove: Probability = 0.00, Count = 1
o -> instanceof: Probability = 0.00, Count = 1
o -> Name&&: Probability = 0.00, Count = 1
o -> o,: Probability = 0.00, Count = 1
o -> Object: Probability = 0.01, Count = 2
o -> !esDelegate.remove: Probability = 0.00, Count = 1
rval -> rval: Probability = 0.68, Count = 39
rval -> _array[: Probability = 0.07, Count = 4
rval -> ]: Probability = 0.16, Count = 9
rval -> rval++: Probability = 0.02, Count = 1
rval -> this.path.equals: Probability = 0.02, Count = 1
rval -> descriptor.path: Probability = 0.02, Count = 1
rval -> this.name.equals: Probability = 0.02, Count = 1
rval -> descriptor.name: Probability = 0.02, Count = 1
_limit -> _limit: Probability = 0.15, Count = 19
_limit -> limit: Probability = 0.83, Count = 104
_limit -> _array[: Probability = 0.02, Count = 2
- -> -: Probability = 0.94, Count = 497
- -> >=: Probability = 0.00, Count = 1
- -> -1: Probability = 0.02, Count = 9
- -> >: Probability = 0.01, Count = 3
- -> v[v.length-index-1]: Probability = 0.00, Count = 1
- -> -1,: Probability = 0.00, Count = 1
- -> 1: Probability = 0.01, Count = 4
- -> *: Probability = 0.01, Count = 4
- -> int: Probability = 0.00, Count = 1
- -> _nColumns-1: Probability = 0.00, Count = 1
- -> end-start: Probability = 0.00, Count = 2
- -> 2: Probability = 0.00, Count = 2
- -> C_64-_binaryExponent-1: Probability = 0.00, Count = 1
for -> for: Probability = 0.95, Count = 586
for -> i: Probability = 0.01, Count = 8
for -> ]: Probability = 0.02, Count = 13
for -> 0: Probability = 0.00, Count = 2
for -> i=0: Probability = 0.00, Count = 2
for -> j: Probability = 0.01, Count = 4
for -> int: Probability = 0.00, Count = 3
rval-- -> rval--: Probability = 1.00, Count = 1
== -> ==: Probability = 0.93, Count = 1407
== -> returnfield_1_font_height: Probability = 0.00, Count = 1
== -> other.field_1_font_height: Probability = 0.00, Count = 1
== -> &&field_2_attributes: Probability = 0.00, Count = 1
== -> other.field_2_attributes: Probability = 0.00, Count = 1
== -> &&field_3_color_palette_index: Probability = 0.00, Count = 1
== -> other.field_3_color_palette_index: Probability = 0.00, Count = 1
== -> &&field_4_bold_weight: Probability = 0.00, Count = 1
== -> other.field_4_bold_weight: Probability = 0.00, Count = 1
== -> &&field_5_super_sub_script: Probability = 0.00, Count = 1
== -> other.field_5_super_sub_script: Probability = 0.00, Count = 1
== -> &&field_6_underline: Probability = 0.00, Count = 1
== -> other.field_6_underline: Probability = 0.00, Count = 1
== -> &&field_7_family: Probability = 0.00, Count = 1
== -> other.field_7_family: Probability = 0.00, Count = 1
== -> &&field_8_charset: Probability = 0.00, Count = 1
== -> other.field_8_charset: Probability = 0.00, Count = 1
== -> &&field_9_zero: Probability = 0.00, Count = 1
== -> other.field_9_zero: Probability = 0.00, Count = 1
== -> &&Objects.equals: Probability = 0.00, Count = 1
== -> a==null: Probability = 0.00, Count = 2
== -> b==null: Probability = 0.00, Count = 2
== -> OpenMode.APPEND: Probability = 0.00, Count = 1
== -> nextWriteGen: Probability = 0.00, Count = 1
== -> if: Probability = 0.00, Count = 4
== -> ==0: Probability = 0.00, Count = 6
== -> ||: Probability = 0.00, Count = 4
== -> this.state.stateNumber==other.state.stateNumber&&: Probability = 0.00, Count = 1
== -> this.alt==other.alt&&: Probability = 0.00, Count = 1
== -> this.context==other.context: Probability = 0.00, Count = 1
== -> &&: Probability = 0.01, Count = 8
== -> sameProperties: Probability = 0.00, Count = 1
== -> rhs.y: Probability = 0.00, Count = 2
== -> nibbles: Probability = 0.00, Count = 1
== -> null: Probability = 0.00, Count = 4
== -> p.ruleIndex: Probability = 0.00, Count = 1
== -> &&this.predIndex: Probability = 0.00, Count = 1
== -> p.predIndex: Probability = 0.00, Count = 1
== -> &&this.isCtxDependent: Probability = 0.00, Count = 1
== -> fieldInfo.getIndexOptions: Probability = 0.00, Count = 1
== -> anchor.getDx1: Probability = 0.00, Count = 2
== -> getDx1: Probability = 0.00, Count = 2
== -> anchor.getDx2: Probability = 0.00, Count = 2
== -> getDx2: Probability = 0.00, Count = 2
== -> anchor.getDy1: Probability = 0.00, Count = 2
== -> getDy1: Probability = 0.00, Count = 2
== -> anchor.getDy2: Probability = 0.00, Count = 2
== -> getDy2: Probability = 0.00, Count = 2
== -> 0: Probability = 0.00, Count = 1
== -> anchor.getCol2: Probability = 0.00, Count = 1
== -> getRow1: Probability = 0.00, Count = 1
== -> anchor.getRow2: Probability = 0.00, Count = 1
== -> getRow2: Probability = 0.00, Count = 1
== -> anchor.getAnchorType: Probability = 0.00, Count = 1
== -> getAnchorType: Probability = 0.00, Count = 1
== -> c.getValue: Probability = 0.00, Count = 1
== -> this.getValue: Probability = 0.00, Count = 1
== -> "closer: Probability = 0.00, Count = 1
== -> .size: Probability = 0.00, Count = 1
== -> ||oFirstRow: Probability = 0.00, Count = 1
== -> oFirstRow-1: Probability = 0.00, Count = 1
== -> >0: Probability = 0.00, Count = 1
== -> ||oFirstCol>0: Probability = 0.00, Count = 1
== -> escape: Probability = 0.00, Count = 1
== -> e.beginA: Probability = 0.00, Count = 1
== -> this.endA: Probability = 0.00, Count = 1
== -> e.endA&&: Probability = 0.00, Count = 1
== -> this.beginB: Probability = 0.00, Count = 1
== -> e.beginB: Probability = 0.00, Count = 1
== -> this.endB: Probability = 0.00, Count = 1
== -> !isValid: Probability = 0.00, Count = 1
== -> !rhs.isValid: Probability = 0.00, Count = 1
== -> rhs.x: Probability = 0.00, Count = 1
== -> rhs.h: Probability = 0.00, Count = 1
_array[rval] -> rval: Probability = 1.00, Count = 2
break -> break: Probability = 0.93, Count = 169
break -> 'o': Probability = 0.02, Count = 4
break -> default:break: Probability = 0.03, Count = 5
break -> default:setResult: Probability = 0.01, Count = 1
break -> Result.REJECTED_OTHER_REASON,: Probability = 0.01, Count = 1
break -> r.name: Probability = 0.01, Count = 1
break -> default:_pattern: Probability = 0.01, Count = 1
SetCountsByTime -> setCountsByTime: Probability = 1.00, Count = 1
int[] -> int[]: Probability = 0.82, Count = 104
int[] -> fillPolygon: Probability = 0.01, Count = 1
int[] -> <T>: Probability = 0.03, Count = 4
int[] -> T[]: Probability = 0.07, Count = 9
int[] -> static: Probability = 0.02, Count = 2
int[] -> int: Probability = 0.02, Count = 3
int[] -> absoluteOffsets: Probability = 0.01, Count = 1
int[] -> bucketAbsoluteOffsets.clone: Probability = 0.01, Count = 1
int[] -> bucketRelativeOffsets.clone: Probability = 0.01, Count = 1
int[] -> drawPolygon: Probability = 0.01, Count = 1
counts, -> counts,: Probability = 1.00, Count = 1
long -> long: Probability = 0.83, Count = 439
long -> Long: Probability = 0.01, Count = 4
long -> throws: Probability = 0.00, Count = 2
long -> IOException: Probability = 0.00, Count = 2
long -> final: Probability = 0.12, Count = 62
long -> getFilePointer: Probability = 0.00, Count = 1
long -> &: Probability = 0.01, Count = 5
long -> 56: Probability = 0.00, Count = 2
long -> readLong: Probability = 0.00, Count = 1
long -> for: Probability = 0.01, Count = 3
long -> docCount: Probability = 0.00, Count = 2
long -> 0xFF,: Probability = 0.00, Count = 1
long -> ?: Probability = 0.00, Count = 1
long -> parts[0],: Probability = 0.00, Count = 1
long -> parts[1],: Probability = 0.00, Count = 1
long -> fields.size: Probability = 0.00, Count = 1
long -> 3: Probability = 0.00, Count = 1
msecStep -> msecStep: Probability = 1.00, Count = 2
countsByTime -> countsByTime: Probability = 1.00, Count = 2
counts -> counts: Probability = 1.00, Count = 1
countsByTimeStepMSec -> countsByTimeStepMSec: Probability = 1.00, Count = 2
FeatHdrRecord -> FeatHdrRecord: Probability = 1.00, Count = 1
RecordInputStream -> RecordInputStream: Probability = 1.00, Count = 123
in1 -> in: Probability = 0.97, Count = 166
in1 -> Formula.read: Probability = 0.02, Count = 3
in1 -> setFormula2: Probability = 0.01, Count = 1
in1 -> field_4_formula2_len,: Probability = 0.01, Count = 1
in1 -> in.remaining: Probability = 0.01, Count = 1
futureHeader -> futureHeader: Probability = 1.00, Count = 1
FtrHeader -> FtrHeader: Probability = 1.00, Count = 3
isf_sharedFeatureType -> isf_sharedFeatureType: Probability = 1.00, Count = 2
in1.ReadShort -> in.readShort: Probability = 0.84, Count = 178
in1.ReadShort -> in.readUShort: Probability = 0.03, Count = 7
in1.ReadShort -> ViewFieldsRecord: Probability = 0.00, Count = 1
in1.ReadShort -> in.available: Probability = 0.00, Count = 1
in1.ReadShort -> POILogger.INFO,: Probability = 0.00, Count = 1
in1.ReadShort -> "DimensionsRecord: Probability = 0.00, Count = 1
in1.ReadShort -> bytes.": Probability = 0.00, Count = 1
in1.ReadShort -> field_1_version: Probability = 0.00, Count = 1
in1.ReadShort -> field_2_type: Probability = 0.00, Count = 1
in1.ReadShort -> field_7_rowInputRow: Probability = 0.00, Count = 1
in1.ReadShort -> field_9_rowInputCol: Probability = 0.00, Count = 1
in1.ReadShort -> PrintSetupRecord: Probability = 0.00, Count = 1
in1.ReadShort -> field_1_paper_size: Probability = 0.00, Count = 1
in1.ReadShort -> field_2_scale: Probability = 0.00, Count = 1
in1.ReadShort -> field_3_page_start: Probability = 0.00, Count = 1
in1.ReadShort -> field_4_fit_width: Probability = 0.00, Count = 1
in1.ReadShort -> field_5_fit_height: Probability = 0.00, Count = 1
in1.ReadShort -> field_7_hresolution: Probability = 0.00, Count = 1
in1.ReadShort -> field_8_vresolution: Probability = 0.00, Count = 1
in1.ReadShort -> field_9_headermargin: Probability = 0.00, Count = 1
in1.ReadShort -> field_10_footermargin: Probability = 0.00, Count = 1
in1.ReadShort -> field_11_copies: Probability = 0.00, Count = 1
in1.ReadShort -> field_2_top_row: Probability = 0.00, Count = 1
in1.ReadShort -> field_3_left_col: Probability = 0.00, Count = 1
in1.ReadShort -> field_4_header_color: Probability = 0.00, Count = 1
in1.ReadShort -> field_5_page_break_zoom: Probability = 0.00, Count = 1
in1.ReadShort -> field_6_normal_zoom: Probability = 0.00, Count = 1
in1.ReadShort -> field_1_options: Probability = 0.00, Count = 1
in1.ReadShort -> field_1_readonly: Probability = 0.00, Count = 1
in1.ReadShort -> field_2_password: Probability = 0.00, Count = 1
reserved -> reserved: Probability = 0.64, Count = 7
reserved -> associatedRange: Probability = 0.18, Count = 2
reserved -> CellRangeAddress: Probability = 0.18, Count = 2
in1.ReadByte -> in.readByte: Probability = 0.71, Count = 35
in1.ReadByte -> checkEOF: Probability = 0.08, Count = 4
in1.ReadByte -> read: Probability = 0.06, Count = 3
in1.ReadByte -> buf: Probability = 0.02, Count = 1
in1.ReadByte -> byte[LittleEndianConsts.INT_SIZE]: Probability = 0.02, Count = 1
in1.ReadByte -> field_1_addMenuCount: Probability = 0.02, Count = 1
in1.ReadByte -> Byte.valueOf: Probability = 0.04, Count = 2
in1.ReadByte -> in.readUByte: Probability = 0.04, Count = 2
in1.ReadInt -> in.readInt: Probability = 0.87, Count = 67
in1.ReadInt -> field_2_last_row: Probability = 0.01, Count = 1
in1.ReadInt -> field_3_first_col: Probability = 0.01, Count = 1
in1.ReadInt -> field_2_first_row: Probability = 0.01, Count = 1
in1.ReadInt -> field_3_last_row_add1: Probability = 0.01, Count = 1
in1.ReadInt -> field2_y_position: Probability = 0.01, Count = 1
in1.ReadInt -> field3_width: Probability = 0.01, Count = 1
in1.ReadInt -> field4_height: Probability = 0.01, Count = 1
in1.ReadInt -> field_3_vert_pos: Probability = 0.01, Count = 1
in1.ReadInt -> field_cbo_id: Probability = 0.01, Count = 1
in1.ReadInt -> field_5_dv_no: Probability = 0.01, Count = 1
rgbHdrData -> rgbHdrData: Probability = 1.00, Count = 1
in1.ReadRemainder -> in.readRemainder: Probability = 1.00, Count = 12
CopyOnWriteArrayList -> CopyOnWriteArrayList: Probability = 1.00, Count = 1
elements -> elements: Probability = 0.59, Count = 19
elements -> slice.from,: Probability = 0.12, Count = 4
elements -> Slice: Probability = 0.12, Count = 4
elements -> CopyOnWriteArrayList.indexOf: Probability = 0.03, Count = 1
elements -> slice.to: Probability = 0.09, Count = 3
elements -> CopyOnWriteArrayList.lastIndexOf: Probability = 0.03, Count = 1
libcore.util.EmptyArray.OBJECT -> EmptyArray.OBJECT: Probability = 1.00, Count = 3
WriteRequest -> WriteRequest: Probability = 1.00, Count = 2
DeleteRequest -> DeleteRequest: Probability = 1.00, Count = 1
deleteRequest -> deleteRequest: Probability = 1.00, Count = 2
_deleteRequest -> setDeleteRequest: Probability = 1.00, Count = 1
ReadFully -> readFully: Probability = 0.77, Count = 10
ReadFully -> checkPosition: Probability = 0.08, Count = 1
ReadFully -> buffer.length: Probability = 0.15, Count = 2
byte[] -> byte[]: Probability = 0.88, Count = 329
byte[] -> final: Probability = 0.07, Count = 28
byte[] -> byte: Probability = 0.01, Count = 2
byte[] -> throws: Probability = 0.02, Count = 8
byte[] -> int: Probability = 0.01, Count = 2
byte[] -> array2,: Probability = 0.00, Count = 1
byte[] -> buffer: Probability = 0.01, Count = 2
byte[] -> buffer,: Probability = 0.00, Count = 1
byte[] -> b: Probability = 0.01, Count = 2
byte[] -> n: Probability = 0.00, Count = 1
buf -> buf: Probability = 0.98, Count = 90
buf -> text!=null: Probability = 0.01, Count = 1
buf -> buf.append: Probability = 0.01, Count = 1
_in.ReadFully -> _in.readFully: Probability = 1.00, Count = 2
ICell -> Cell: Probability = 0.55, Count = 22
ICell -> translateUnicodeValues: Probability = 0.05, Count = 2
ICell -> cell.getRichStringCellValue: Probability = 0.05, Count = 2
ICell -> HSSFCell: Probability = 0.30, Count = 12
ICell -> cell: Probability = 0.05, Count = 2
GetCell -> getCell: Probability = 1.00, Count = 8
IRow -> Row: Probability = 1.00, Count = 10
row, -> row,: Probability = 1.00, Count = 26
row.GetCell -> columnIndex: Probability = 0.40, Count = 2
row.GetCell -> row.getCell: Probability = 0.60, Count = 3
cell -> cell: Probability = 0.85, Count = 88
cell -> sheet.getSheet: Probability = 0.01, Count = 1
cell -> .addValueRecord: Probability = 0.01, Count = 1
cell -> Parent: Probability = 0.01, Count = 1
cell -> interior: Probability = 0.01, Count = 1
cell -> .getCell: Probability = 0.01, Count = 1
cell -> formatNumberDateCell: Probability = 0.01, Count = 1
cell -> .getValue: Probability = 0.02, Count = 2
cell -> case: Probability = 0.03, Count = 3
cell -> RETURN_NULL_AND_BLANK:return: Probability = 0.01, Count = 1
cell -> RETURN_BLANK_AS_NULL:boolean: Probability = 0.01, Count = 1
cell -> isBlank: Probability = 0.01, Count = 1
cell -> CREATE_NULL_AS_BLANK:return: Probability = 0.01, Count = 1
row.CreateCell -> row.createCell: Probability = 1.00, Count = 2
column -> columnIndex: Probability = 0.07, Count = 1
column -> column: Probability = 0.93, Count = 14
SetPackConfig -> setPackConfig: Probability = 1.00, Count = 1
PackConfig -> PackConfig: Probability = 1.00, Count = 4
pc -> pc: Probability = 1.00, Count = 2
this.packConfig -> this.packConfig: Probability = 1.00, Count = 1
GetSignerName -> getSignerName: Probability = 1.00, Count = 2
"HMAC-SHA1" -> "HMAC-SHA1": Probability = 1.00, Count = 1
Antlr4.Runtime.Misc.IntervalSet -> IntervalSet: Probability = 0.90, Count = 28
Antlr4.Runtime.Misc.IntervalSet -> a.isNil: Probability = 0.03, Count = 1
Antlr4.Runtime.Misc.IntervalSet -> other.addAll: Probability = 0.03, Count = 1
Antlr4.Runtime.Misc.IntervalSet -> other.intervals.size: Probability = 0.03, Count = 1
Or -> or: Probability = 1.00, Count = 1
IIntSet -> IntSet: Probability = 1.00, Count = 4
a -> a: Probability = 0.88, Count = 144
a -> s: Probability = 0.02, Count = 3
a -> gcd: Probability = 0.01, Count = 1
a -> Math.abs: Probability = 0.01, Count = 2
a -> commonTrailingZeros: Probability = 0.01, Count = 2
a -> Long.numberOfTrailingZeros: Probability = 0.02, Count = 3
a -> >>>=: Probability = 0.01, Count = 2
a -> Long.MIN_VALUE: Probability = 0.01, Count = 1
a -> cos: Probability = 0.01, Count = 1
a -> -a: Probability = 0.01, Count = 1
a -> SIN_COS_MAX_VALUE_FOR_INT_MODULO: Probability = 0.01, Count = 1
a -> Math.cos: Probability = 0.01, Count = 1
a -> SIN_COS_INDEXER: Probability = 0.01, Count = 1
a -> ==: Probability = 0.01, Count = 1
o.AddAll -> o.addAll: Probability = 1.00, Count = 2
String -> String: Probability = 0.99, Count = 480
String -> createTimeConstraint: Probability = 0.00, Count = 1
String -> getFormatString: Probability = 0.00, Count = 1
String -> expr2,: Probability = 0.00, Count = 2
ToString -> toString: Probability = 0.98, Count = 475
ToString -> getClass: Probability = 0.00, Count = 2
ToString -> "input=": Probability = 0.00, Count = 1
ToString -> StringBuilder: Probability = 0.00, Count = 2
ToString -> "MultiDocsAndPositionsEnum: Probability = 0.00, Count = 2
ToString -> "SimpleFSLock: Probability = 0.00, Count = 1
ToString -> "RandomAccessInput: Probability = 0.00, Count = 1
GetType -> getClass: Probability = 0.82, Count = 45
GetType -> getType: Probability = 0.16, Count = 9
GetType -> .getName: Probability = 0.02, Count = 1
.Name -> .getName: Probability = 0.68, Count = 50
.Name -> .getSimpleName: Probability = 0.31, Count = 23
.Name -> +: Probability = 0.01, Count = 1
"]" -> +: Probability = 0.20, Count = 13
"]" -> "]": Probability = 0.80, Count = 52
" -> ": Probability = 0.87, Count = 1715
" -> locale:: Probability = 0.00, Count = 1
" -> locale+: Probability = 0.00, Count = 1
" -> found.": Probability = 0.00, Count = 1
" -> +: Probability = 0.02, Count = 47
" -> getLowFreqMinimumNumberShouldMatch: Probability = 0.00, Count = 3
" -> getHighFreqMinimumNumberShouldMatch: Probability = 0.00, Count = 2
" -> .append: Probability = 0.01, Count = 22
" -> .name: Probability = 0.00, Count = 2
" -> FORMULA: Probability = 0.00, Count = 3
" -> ERRORS]\n": Probability = 0.00, Count = 2
" -> checkCalculationErrors: Probability = 0.00, Count = 1
" -> checkEmptyCellRef: Probability = 0.00, Count = 1
" -> checkNumbersAsText: Probability = 0.00, Count = 1
" -> checkInconsistentRanges: Probability = 0.00, Count = 1
" -> checkInconsistentFormulas: Probability = 0.00, Count = 1
" -> checkDateTimeFormats: Probability = 0.00, Count = 1
" -> checkUnprotectedFormulas: Probability = 0.00, Count = 1
" -> performDataValidation: Probability = 0.00, Count = 1
" -> numcolors: Probability = 0.00, Count = 2
" -> +": Probability = 0.02, Count = 37
" -> Integer.toHexString: Probability = 0.00, Count = 2
" -> as: Probability = 0.00, Count = 3
" -> .row: Probability = 0.00, Count = 3
" -> .col: Probability = 0.00, Count = 2
" -> OR: Probability = 0.00, Count = 3
" -> minVersion: Probability = 0.00, Count = 1
" -> "Lengths: Probability = 0.00, Count = 1
" -> .autoSize: Probability = 0.00, Count = 1
" -> records,: Probability = 0.00, Count = 1
" -> but: Probability = 0.00, Count = 1
" -> asked: Probability = 0.00, Count = 1
" -> "POINT: Probability = 0.00, Count = 1
" -> "+longitude+": Probability = 0.00, Count = 1
" -> "+latitude+": Probability = 0.00, Count = 1
" -> sb.toString: Probability = 0.00, Count = 2
" -> "next: Probability = 0.00, Count = 1
" -> arcArray: Probability = 0.00, Count = 1
" -> idx=": Probability = 0.00, Count = 1
" -> be: Probability = 0.00, Count = 1
" -> ': Probability = 0.00, Count = 1
" -> =": Probability = 0.00, Count = 1
" -> fields=": Probability = 0.00, Count = 1
" -> numDocs+: Probability = 0.00, Count = 1
" -> saw: Probability = 0.00, Count = 1
" -> resource: Probability = 0.00, Count = 2
" -> +version: Probability = 0.00, Count = 1
" -> needs: Probability = 0.00, Count = 2
" -> .: Probability = 0.00, Count = 1
" -> This: Probability = 0.00, Count = 1
" -> Lucene: Probability = 0.00, Count = 1
" -> indexes: Probability = 0.00, Count = 1
" -> 8.0: Probability = 0.00, Count = 1
" -> later.": Probability = 0.00, Count = 1
" -> this.resourceDescription: Probability = 0.00, Count = 2
" -> this.version: Probability = 0.00, Count = 2
" -> this.minVersion: Probability = 0.00, Count = 2
" -> .flags: Probability = 0.00, Count = 3
" -> Type: Probability = 0.00, Count = 2
" -> .denominator: Probability = 0.00, Count = 1
" -> "calculated: Probability = 0.00, Count = 1
" -> _endIndex+: Probability = 0.00, Count = 1
" -> analyzer.getClass: Probability = 0.00, Count = 1
" -> CODEC_MAGIC,: Probability = 0.00, Count = 1
" -> MINIMUM_LENGTH_PARAM: Probability = 0.00, Count = 1
" -> .textLen=": Probability = 0.00, Count = 1
" -> .is16bit=": Probability = 0.00, Count = 1
" -> "]": Probability = 0.00, Count = 1
" -> distanceSquared=": Probability = 0.00, Count = 1
" -> distanceSquared: Probability = 0.00, Count = 1
" -> .chartGroupIndex: Probability = 0.00, Count = 2
" -> getOperatorName: Probability = 0.00, Count = 1
" -> getFileMode: Probability = 0.00, Count = 1
" -> getLength: Probability = 0.00, Count = 1
" -> getLastModifiedInstant: Probability = 0.00, Count = 1
" -> getStage: Probability = 0.00, Count = 1
" -> new,: Probability = 0.00, Count = 1
" -> most: Probability = 0.00, Count = 1
" -> ANY_DIFF.toString: Probability = 0.00, Count = 1
" -> "Encoder: Probability = 0.00, Count = 1
" -> Outside: Probability = 0.00, Count = 1
" -> datFileName: Probability = 0.00, Count = 2
" -> sub-file: Probability = 0.00, Count = 1
" -> compound: Probability = 0.00, Count = 1
" -> fileName=": Probability = 0.00, Count = 1
" -> files:: Probability = 0.00, Count = 1
" -> handle.slice: Probability = 0.00, Count = 1
" -> entry.offset,: Probability = 0.00, Count = 1
" -> entry.length: Probability = 0.00, Count = 1
" -> +MAX_ROW_INDEX: Probability = 0.00, Count = 1
" -> +position: Probability = 0.00, Count = 1
" -> String.format: Probability = 0.00, Count = 1
" -> Locale.ROOT,: Probability = 0.00, Count = 1
" -> row+: Probability = 0.00, Count = 1
" -> col+: Probability = 0.00, Count = 1
" -> rowOffsetIx,: Probability = 0.00, Count = 1
" -> +"BAT: Probability = 0.00, Count = 1
" -> PROTECTION]\n": Probability = 0.00, Count = 2
" -> Self: Probability = 0.00, Count = 1
" -> Relative: Probability = 0.00, Count = 1
" -> Password: Probability = 0.00, Count = 1
" -> Verifier: Probability = 0.00, Count = 1
" -> Title: Probability = 0.00, Count = 1
" -> Security: Probability = 0.00, Count = 1
" -> Descriptor: Probability = 0.00, Count = 1
" -> Size: Probability = 0.00, Count = 1
" -> securityDescriptor.length: Probability = 0.00, Count = 1
" -> .stacked: Probability = 0.00, Count = 1
" -> isStacked: Probability = 0.00, Count = 1
" -> Formatting]\n": Probability = 0.00, Count = 2
" -> expected=": Probability = 0.00, Count = 1
" -> Long.toHexString: Probability = 0.00, Count = 2
" -> actual=": Probability = 0.00, Count = 1
" -> .link1: Probability = 0.00, Count = 1
" -> .link2: Probability = 0.00, Count = 1
" -> [FUTURE: Probability = 0.00, Count = 1
" -> Flags: Probability = 0.00, Count = 1
" -> [/FUTURE: Probability = 0.00, Count = 1
[" -> [": Probability = 1.00, Count = 37
sb.ToString -> +"]": Probability = 0.12, Count = 11
sb.ToString -> sb.toString: Probability = 0.87, Count = 82
sb.ToString -> "]": Probability = 0.01, Count = 1
DescribeVpcEndpointServicePermissionsResponse -> DescribeVpcEndpointServicePermissionsResult: Probability = 1.00, Count = 1
DescribeVpcEndpointServicePermissions -> describeVpcEndpointServicePermissions: Probability = 1.00, Count = 1
DescribeVpcEndpointServicePermissionsRequest -> DescribeVpcEndpointServicePermissionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpcEndpointServicePermissionsResponse> -> executeDescribeVpcEndpointServicePermissions: Probability = 1.00, Count = 1
copyOfRange -> copyOfRange: Probability = 1.00, Count = 14
original, -> original,: Probability = 1.00, Count = 29
start, -> start,: Probability = 0.99, Count = 139
start, -> start: Probability = 0.01, Count = 1
end -> end: Probability = 0.95, Count = 207
end -> end,: Probability = 0.00, Count = 1
end -> start,: Probability = 0.00, Count = 1
end -> this.end: Probability = 0.00, Count = 1
end -> Character.codePointCount: Probability = 0.00, Count = 1
end -> offset: Probability = 0.00, Count = 1
end -> kind,: Probability = 0.00, Count = 1
end -> this.kind: Probability = 0.00, Count = 1
end -> "str.length: Probability = 0.00, Count = 1
end -> start=": Probability = 0.01, Count = 2
start -> start: Probability = 0.96, Count = 203
start -> buf.replaceAll: Probability = 0.00, Count = 1
start -> "<[^>]*>",: Probability = 0.00, Count = 1
start -> bi.setText: Probability = 0.00, Count = 1
start -> buffer.substring: Probability = 0.00, Count = 1
start -> ||: Probability = 0.00, Count = 1
start -> >: Probability = 0.01, Count = 2
start -> Array.newInstance: Probability = 0.00, Count = 1
> -> >: Probability = 0.99, Count = 410
> -> 1: Probability = 0.01, Count = 3
> -> <: Probability = 0.00, Count = 1
> -> IllegalArgumentException: Probability = 0.00, Count = 2
System.ArgumentException -> IllegalArgumentException: Probability = 0.94, Count = 187
System.ArgumentException -> ": Probability = 0.03, Count = 5
System.ArgumentException -> "Unknown: Probability = 0.01, Count = 1
System.ArgumentException -> parameters:: Probability = 0.01, Count = 1
System.ArgumentException -> indexed: Probability = 0.02, Count = 3
System.ArgumentException -> must: Probability = 0.01, Count = 1
System.ArgumentException -> be: Probability = 0.01, Count = 1
originalLength -> originalLength: Probability = 0.78, Count = 25
originalLength -> ArrayIndexOutOfBoundsException: Probability = 0.22, Count = 7
original.Length -> original.length: Probability = 1.00, Count = 7
< -> <: Probability = 0.95, Count = 880
< -> i++: Probability = 0.01, Count = 8
< -> >=: Probability = 0.00, Count = 4
< -> :: Probability = 0.02, Count = 17
< -> 0: Probability = 0.01, Count = 5
< -> if: Probability = 0.00, Count = 2
< -> j++: Probability = 0.00, Count = 1
< -> i: Probability = 0.01, Count = 7
< -> >: Probability = 0.00, Count = 1
|| -> ||: Probability = 0.99, Count = 298
|| -> end||: Probability = 0.00, Count = 1
|| -> ==: Probability = 0.00, Count = 1
|| -> <: Probability = 0.00, Count = 1
resultLength -> resultLength: Probability = 1.00, Count = 8
copyLength -> copyLength: Probability = 1.00, Count = 14
System.Math.Min -> Math.min: Probability = 1.00, Count = 12
resultLength, -> resultLength,: Probability = 1.00, Count = 7
result -> result: Probability = 0.88, Count = 366
result -> checkValue: Probability = 0.01, Count = 3
result -> ptg.getSize: Probability = 0.00, Count = 2
result -> o.reserved: Probability = 0.00, Count = 1
result -> formattingFontIndex: Probability = 0.00, Count = 1
result -> o.formattingFontIndex: Probability = 0.00, Count = 1
result -> formattingOptions: Probability = 0.00, Count = 1
result -> o.formattingOptions: Probability = 0.00, Count = 1
result -> numberOfRuns: Probability = 0.00, Count = 1
result -> o.numberOfRuns: Probability = 0.00, Count = 1
result -> phoneticText.compareTo: Probability = 0.00, Count = 1
result -> o.phoneticText: Probability = 0.00, Count = 1
result -> phRuns.length: Probability = 0.00, Count = 1
result -> o.phRuns.length: Probability = 0.00, Count = 1
result -> i<phRuns.length: Probability = 0.00, Count = 1
result -> phRuns[i].phoneticTextFirstCharacterOffset: Probability = 0.00, Count = 1
result -> o.phRuns[i].phoneticTextFirstCharacterOffset: Probability = 0.00, Count = 1
result -> phRuns[i].realTextFirstCharacterOffset: Probability = 0.00, Count = 1
result -> o.phRuns[i].realTextFirstCharacterOffset: Probability = 0.00, Count = 1
result -> phRuns[i].realTextLength: Probability = 0.00, Count = 1
result -> o.phRuns[i].realTextLength: Probability = 0.00, Count = 1
result -> Arrays.hashCode: Probability = 0.00, Count = 1
result -> extraData: Probability = 0.00, Count = 1
result -> -Arrays.hashCode: Probability = 0.00, Count = 1
result -> o.extraData: Probability = 0.00, Count = 1
result -> bypassAltsAtnCache.put: Probability = 0.00, Count = 1
result -> serializedAtn,: Probability = 0.00, Count = 1
result -> res.intValue: Probability = 0.00, Count = 1
result -> posTranslations.get: Probability = 0.00, Count = 1
result -> CoderResult.UNDERFLOW: Probability = 0.00, Count = 1
result -> result==CoderResult.UNDERFLOW: Probability = 0.00, Count = 2
result -> result==CoderResult.OVERFLOW: Probability = 0.00, Count = 2
result -> allocateMore: Probability = 0.00, Count = 2
result -> checkCoderResult: Probability = 0.01, Count = 3
result -> status: Probability = 0.00, Count = 1
result -> result,: Probability = 0.00, Count = 1
result -> nPlaces: Probability = 0.00, Count = 2
result -> BlankEval: Probability = 0.00, Count = 2
result -> inflTypeTranslations.get: Probability = 0.00, Count = 1
result -> _ptgs[i].getSize: Probability = 0.00, Count = 1
result -> inflFormTranslations.get: Probability = 0.00, Count = 1
System.Array.Copy -> System.arraycopy: Probability = 1.00, Count = 90
result, -> result,: Probability = 0.78, Count = 21
result, -> 0,: Probability = 0.04, Count = 1
result, -> bos: Probability = 0.04, Count = 1
result, -> result,0: Probability = 0.04, Count = 1
result, -> bos.writeInt: Probability = 0.07, Count = 2
result, -> LittleEndianConsts.INT_SIZE: Probability = 0.04, Count = 1
ListTopicsRequest -> ListTopicsRequest: Probability = 1.00, Count = 1
nextToken -> nextToken: Probability = 1.00, Count = 4
_nextToken -> setNextToken: Probability = 1.00, Count = 2
Finish -> finish: Probability = 1.00, Count = 9
FieldInfos -> FieldInfos: Probability = 0.78, Count = 7
FieldInfos -> PrefixCodedTerms: Probability = 0.22, Count = 2
fis, -> fis,: Probability = 1.00, Count = 4
numDocs -> numDocs: Probability = 0.44, Count = 15
numDocs -> numDirtyChunks++: Probability = 0.06, Count = 2
numDocs -> this.numDocs: Probability = 0.06, Count = 2
numDocs -> "Wrote: Probability = 0.06, Count = 2
numDocs -> numDocs=": Probability = 0.06, Count = 2
numDocs -> indexWriter.finish: Probability = 0.06, Count = 2
numDocs -> "mergeFields: Probability = 0.03, Count = 1
numDocs -> produced: Probability = 0.06, Count = 2
numDocs -> result:: Probability = 0.06, Count = 2
numDocs -> numDocsWritten: Probability = 0.03, Count = 1
numDocs -> "mergeVectors: Probability = 0.03, Count = 1
numDocs -> mergedDocs: Probability = 0.03, Count = 1
numDocs -> vec: Probability = 0.03, Count = 1
Flush -> flush: Probability = 1.00, Count = 7
Exception -> RuntimeException: Probability = 0.71, Count = 57
Exception -> Exception: Probability = 0.26, Count = 21
Exception -> Error: Probability = 0.01, Count = 1
Exception -> org.w3c.dom.Document: Probability = 0.01, Count = 1
docs, -> docs,: Probability = 1.00, Count = 4
finish -> finish: Probability = 1.00, Count = 3
called -> called: Probability = 1.00, Count = 5
with -> with: Probability = 1.00, Count = 19
numDocs, -> numDocs,: Probability = 0.60, Count = 3
numDocs, -> numChunks: Probability = 0.40, Count = 2
vectorsStream.GetFilePointer -> vectorsStream.writeVLong: Probability = 1.00, Count = 2
CodecUtil.WriteFooter -> numDirtyChunks: Probability = 0.50, Count = 2
CodecUtil.WriteFooter -> CodecUtil.writeFooter: Probability = 0.50, Count = 2
vectorsStream -> vectorsStream: Probability = 1.00, Count = 1
bool -> boolean: Probability = 0.97, Count = 919
bool -> final: Probability = 0.02, Count = 22
bool -> Object: Probability = 0.00, Count = 1
bool -> Boolean: Probability = 0.00, Count = 1
bool -> inContext: Probability = 0.00, Count = 1
bool -> writeFreqs,: Probability = 0.00, Count = 1
bool -> writeProx,: Probability = 0.00, Count = 1
IsIndexTerm -> isIndexTerm: Probability = 1.00, Count = 2
BytesRef -> BytesRef: Probability = 0.85, Count = 115
BytesRef -> upper: Probability = 0.01, Count = 1
BytesRef -> throws: Probability = 0.04, Count = 5
BytesRef -> IOException: Probability = 0.03, Count = 4
BytesRef -> BytesRefBuilder: Probability = 0.04, Count = 6
BytesRef -> field,: Probability = 0.01, Count = 1
BytesRef -> ArrayUtil.copyOfSubArray: Probability = 0.01, Count = 1
BytesRef -> other.bytes,: Probability = 0.01, Count = 1
BytesRef -> toBytesRef: Probability = 0.01, Count = 1
BytesRef -> ref.length: Probability = 0.01, Count = 1
term, -> term,: Probability = 1.00, Count = 14
TermStats -> TermStats: Probability = 1.00, Count = 3
stats -> stats: Probability = 1.00, Count = 8
count -> count: Probability = 0.95, Count = 168
count -> +=: Probability = 0.01, Count = 1
count -> chars.length,: Probability = 0.01, Count = 1
count -> refCount.compareAndSet: Probability = 0.01, Count = 1
count -> mergeProgress: Probability = 0.01, Count = 1
count -> OneMergeProgress: Probability = 0.01, Count = 1
count -> getNumBreaks: Probability = 0.01, Count = 1
count -> "str: Probability = 0.01, Count = 2
count -> str.getChars: Probability = 0.01, Count = 1
interval -> interval: Probability = 1.00, Count = 12
else -> else: Probability = 1.00, Count = 576
else -> if: Probability = 0.00, Count = 1
count++ -> count++: Probability = 0.75, Count = 6
count++ -> MissingObjectException,IncorrectObjectTypeException,: Probability = 0.25, Count = 2
false -> false: Probability = 0.91, Count = 582
false -> !term.equals: Probability = 0.00, Count = 3
false -> other.term: Probability = 0.01, Count = 4
false -> o: Probability = 0.00, Count = 1
false -> other.getBytes: Probability = 0.00, Count = 1
false -> this.getBytes: Probability = 0.00, Count = 2
false -> return: Probability = 0.00, Count = 2
false -> getClass: Probability = 0.00, Count = 2
false -> other.field_2_format_index: Probability = 0.00, Count = 1
false -> other.field_3_cell_options: Probability = 0.00, Count = 1
false -> other.field_4_alignment_options: Probability = 0.00, Count = 1
false -> other.field_5_indention_options: Probability = 0.00, Count = 1
false -> other.field_6_border_options: Probability = 0.00, Count = 1
false -> other.field_7_palette_options: Probability = 0.00, Count = 1
false -> other.field_8_adtl_palette_options: Probability = 0.00, Count = 1
false -> other.field_9_fill_palette_options: Probability = 0.00, Count = 1
false -> !fieldName.equals: Probability = 0.00, Count = 2
false -> other.maxEdits: Probability = 0.00, Count = 3
false -> other.prefixLength: Probability = 0.00, Count = 3
false -> queryString: Probability = 0.00, Count = 2
false -> other.queryString: Probability = 0.01, Count = 4
false -> !region.equals: Probability = 0.00, Count = 1
false -> arn.region: Probability = 0.00, Count = 2
false -> !accountId.equals: Probability = 0.00, Count = 1
false -> arn.accountId: Probability = 0.00, Count = 2
false -> other.isExternal: Probability = 0.00, Count = 1
false -> other.mergeMaxNumSegments: Probability = 0.00, Count = 1
false -> other.totalMaxDoc: Probability = 0.00, Count = 1
false -> !=: Probability = 0.00, Count = 2
false -> other.lowerTerm: Probability = 0.00, Count = 2
false -> !: Probability = 0.00, Count = 1
false -> true: Probability = 0.00, Count = 2
false -> boolean: Probability = 0.00, Count = 1
false -> other.maxExpansions: Probability = 0.00, Count = 1
false -> other.transpositions: Probability = 0.00, Count = 1
AssociateDhcpOptionsResponse -> AssociateDhcpOptionsResult: Probability = 1.00, Count = 1
AssociateDhcpOptions -> associateDhcpOptions: Probability = 1.00, Count = 1
AssociateDhcpOptionsRequest -> AssociateDhcpOptionsRequest: Probability = 1.00, Count = 2
Invoke<AssociateDhcpOptionsResponse> -> executeAssociateDhcpOptions: Probability = 1.00, Count = 1
ValueEval -> ValueEval: Probability = 0.93, Count = 267
ValueEval -> lookup_value,: Probability = 0.01, Count = 2
ValueEval -> table_array,ValueEval: Probability = 0.00, Count = 1
ValueEval -> col_index,: Probability = 0.01, Count = 2
ValueEval -> range_lookup: Probability = 0.00, Count = 1
ValueEval -> lookupValue: Probability = 0.00, Count = 1
ValueEval -> tableArray: Probability = 0.00, Count = 1
ValueEval -> LookupUtils.resolveTableArrayArg: Probability = 0.00, Count = 1
ValueEval -> table_array: Probability = 0.00, Count = 1
ValueEval -> textArg: Probability = 0.00, Count = 1
ValueEval -> EvaluationException: Probability = 0.01, Count = 3
ValueEval -> getSingleValue: Probability = 0.00, Count = 1
ValueEval -> srcCellCol,: Probability = 0.00, Count = 1
ValueEval -> formVE: Probability = 0.00, Count = 1
ValueEval -> returnTypeVE: Probability = 0.00, Count = 1
ValueEval -> dereferenceResult: Probability = 0.00, Count = 1
ValueEval -> venumerator,: Probability = 0.00, Count = 1
ValueEval -> arg0,ValueEval: Probability = 0.00, Count = 1
Evaluate -> evaluate: Probability = 0.95, Count = 145
Evaluate -> ValueEval[]: Probability = 0.01, Count = 1
Evaluate -> args,: Probability = 0.01, Count = 1
Evaluate -> args.length: Probability = 0.01, Count = 1
Evaluate -> int: Probability = 0.02, Count = 3
Evaluate -> ValueEval: Probability = 0.01, Count = 2
srcRowIndex, -> srcRowIndex,: Probability = 0.98, Count = 174
srcRowIndex, -> srcColumnIndex: Probability = 0.01, Count = 1
srcRowIndex, -> MissingArgEval.instance: Probability = 0.01, Count = 1
srcRowIndex, -> DEFAULT_ARG3,: Probability = 0.01, Count = 1
srcColumnIndex, -> srcColumnIndex,: Probability = 0.97, Count = 84
srcColumnIndex, -> DEFAULT_ARG3: Probability = 0.02, Count = 2
srcColumnIndex, -> ValueEval: Probability = 0.01, Count = 1
arg0, -> arg0,: Probability = 1.00, Count = 62
arg1,ValueEval -> arg1,ValueEval: Probability = 1.00, Count = 9
arg2 -> arg2: Probability = 0.92, Count = 11
arg2 -> arg1,ValueEval: Probability = 0.08, Count = 1
arg1, -> arg1,: Probability = 1.00, Count = 30
arg2, -> arg2,: Probability = 1.00, Count = 14
DEFAULT_ARG3 -> DEFAULT_ARG3: Probability = 1.00, Count = 2
Disconnect -> disconnect: Probability = 1.00, Count = 1
sock.IsConnected -> sock.isConnected: Probability = 1.00, Count = 1
sock.Disconnect -> sock.disconnect: Probability = 1.00, Count = 1
PredictionContext -> PredictionContext: Probability = 0.94, Count = 15
PredictionContext -> SingletonPredictionContext: Probability = 0.06, Count = 1
Add -> add: Probability = 0.94, Count = 83
Add -> char[]: Probability = 0.03, Count = 3
Add -> text: Probability = 0.02, Count = 2
ctx -> ctx: Probability = 0.87, Count = 26
ctx -> ctx==PredictionContext.EMPTY: Probability = 0.03, Count = 1
ctx -> lookContext: Probability = 0.03, Count = 1
ctx -> PredictionContext.fromRuleContext: Probability = 0.03, Count = 1
ctx -> s.atn,: Probability = 0.03, Count = 1
PredictionContext.EMPTY -> PredictionContext.EMPTY: Probability = 0.11, Count = 1
PredictionContext.EMPTY -> mergeRoot: Probability = 0.11, Count = 1
PredictionContext.EMPTY -> a,SingletonPredictionContext: Probability = 0.11, Count = 1
PredictionContext.EMPTY -> b,boolean: Probability = 0.11, Count = 1
PredictionContext.EMPTY -> EMPTY: Probability = 0.56, Count = 5
existing -> existing: Probability = 0.80, Count = 4
existing -> existing!=null: Probability = 0.20, Count = 1
cache.Get -> cache.get: Probability = 1.00, Count = 2
cache.Put -> cache.put: Probability = 1.00, Count = 2
ctx, -> ctx,: Probability = 0.88, Count = 7
ctx, -> GeohashPrefixTree: Probability = 0.12, Count = 1
UploadLayerPartResponse -> UploadLayerPartResult: Probability = 1.00, Count = 1
UploadLayerPart -> uploadLayerPart: Probability = 1.00, Count = 1
UploadLayerPartRequest -> UploadLayerPartRequest: Probability = 1.00, Count = 1
Invoke<UploadLayerPartResponse> -> executeUploadLayerPart: Probability = 1.00, Count = 1
GetScriptText -> getScriptText: Probability = 1.00, Count = 2
null, -> null,: Probability = 0.93, Count = 41
null, -> new: Probability = 0.05, Count = 2
null, -> null: Probability = 0.02, Count = 1
DescribeClusterSubnetGroupsResponse -> DescribeClusterSubnetGroupsResult: Probability = 1.00, Count = 2
DescribeClusterSubnetGroups -> describeClusterSubnetGroups: Probability = 1.00, Count = 3
DescribeClusterSubnetGroupsRequest -> DescribeClusterSubnetGroupsRequest: Probability = 1.00, Count = 2
char -> char: Probability = 0.93, Count = 140
char -> final: Probability = 0.04, Count = 6
char -> setIndex: Probability = 0.01, Count = 1
char -> Character: Probability = 0.01, Count = 2
char -> c: Probability = 0.01, Count = 1
char -> int: Probability = 0.01, Count = 1
SetIndex -> setIndex: Probability = 1.00, Count = 2
position -> position: Probability = 0.73, Count = 41
position -> getBeginIndex: Probability = 0.04, Count = 2
position -> getEndIndex: Probability = 0.04, Count = 2
position -> Iterator<PositionSpan>: Probability = 0.02, Count = 1
position -> positionSpanIt: Probability = 0.02, Count = 1
position -> positionSpans.iterator: Probability = 0.02, Count = 1
position -> PositionSpan: Probability = 0.04, Count = 2
position -> posSpan: Probability = 0.02, Count = 1
position -> positionSpanIt.next: Probability = 0.02, Count = 1
position -> posSpan.start: Probability = 0.02, Count = 1
position -> posSpan.end: Probability = 0.02, Count = 1
position -> posIncAtt.getPositionIncrement: Probability = 0.04, Count = 2
ArgumentException -> IllegalArgumentException: Probability = 0.98, Count = 186
ArgumentException -> or: Probability = 0.01, Count = 1
ArgumentException -> must: Probability = 0.01, Count = 1
ArgumentException -> range: Probability = 0.01, Count = 1
ArgumentException -> null: Probability = 0.01, Count = 1
"Illegal -> "Illegal: Probability = 1.00, Count = 9
Position: -> Position:: Probability = 1.00, Count = 2
index -> index: Probability = 0.93, Count = 446
index -> evaluateStringArg: Probability = 0.01, Count = 3
index -> IndexOutOfBoundsException: Probability = 0.00, Count = 2
index -> 0:w1: Probability = 0.00, Count = 1
index -> getFontRecordAt: Probability = 0.00, Count = 1
index -> prevAccept.reset: Probability = 0.00, Count = 1
index -> "index=": Probability = 0.00, Count = 1
index -> builtInName,: Probability = 0.00, Count = 2
index -> sheetNumber+1: Probability = 0.00, Count = 1
index -> Short.MAX_VALUE: Probability = 0.00, Count = 1
index -> "Sheet: Probability = 0.00, Count = 1
index -> ["+sheetNumber+"]is: Probability = 0.00, Count = 1
index -> linkTable.nameAlreadyExists: Probability = 0.00, Count = 1
index -> parser!=null: Probability = 0.00, Count = 1
index -> index>=0: Probability = 0.00, Count = 1
index -> blockRef: Probability = 0.00, Count = 2
index -> toBlockIndex: Probability = 0.00, Count = 2
index -> get: Probability = 0.01, Count = 3
index -> this.index: Probability = 0.00, Count = 1
index -> elements,: Probability = 0.00, Count = 1
index -> fmt: Probability = 0.00, Count = 1
index -> "@": Probability = 0.00, Count = 1
index -> index,: Probability = 0.00, Count = 1
index -> negative: Probability = 0.00, Count = 1
index -> lastIndex+1: Probability = 0.00, Count = 1
index -> HSSFName: Probability = 0.00, Count = 1
index -> valueKeyMap.put: Probability = 0.00, Count = 1
Current -> current: Probability = 1.00, Count = 17
GetPhoneNumberOrderResponse -> GetPhoneNumberOrderResult: Probability = 1.00, Count = 1
GetPhoneNumberOrder -> getPhoneNumberOrder: Probability = 1.00, Count = 1
GetPhoneNumberOrderRequest -> GetPhoneNumberOrderRequest: Probability = 1.00, Count = 1
Invoke<GetPhoneNumberOrderResponse> -> executeGetPhoneNumberOrder: Probability = 1.00, Count = 1
EpsilonTransition -> EpsilonTransition: Probability = 1.00, Count = 1
ATNState -> ATNState: Probability = 0.97, Count = 28
ATNState -> stateNumber==: Probability = 0.03, Count = 1
target, -> target,: Probability = 1.00, Count = 13
outermostPrecedenceReturn -> outermostPrecedenceReturn: Probability = 1.00, Count = 2
base -> super: Probability = 0.96, Count = 465
base -> {: Probability = 0.03, Count = 14
base -> "cr",: Probability = 0.00, Count = 1
base -> "2016-06-07",: Probability = 0.00, Count = 1
base -> "cr": Probability = 0.00, Count = 1
base -> this.termBytes: Probability = 0.00, Count = 1
target -> target: Probability = 1.00, Count = 22
this.outermostPrecedenceReturn -> this.outermostPrecedenceReturn: Probability = 1.00, Count = 1
NGit.Api.DiffCommand -> DiffCommand: Probability = 1.00, Count = 9
SetContextLines -> setContextLines: Probability = 1.00, Count = 1
contextLines -> contextLines: Probability = 1.00, Count = 2
this.contextLines -> this.contextLines: Probability = 1.00, Count = 1
RejectVpcPeeringConnectionResponse -> RejectVpcPeeringConnectionResult: Probability = 1.00, Count = 1
RejectVpcPeeringConnection -> rejectVpcPeeringConnection: Probability = 1.00, Count = 1
RejectVpcPeeringConnectionRequest -> RejectVpcPeeringConnectionRequest: Probability = 1.00, Count = 1
Invoke<RejectVpcPeeringConnectionResponse> -> executeRejectVpcPeeringConnection: Probability = 1.00, Count = 1
equals -> equals: Probability = 1.00, Count = 10
array1, -> array1,: Probability = 1.00, Count = 10
array2 -> array2: Probability = 1.00, Count = 29
array1 -> array1: Probability = 1.00, Count = 20
array1.Length -> array1.length: Probability = 1.00, Count = 19
array2.Length -> array2.length: Probability = 1.00, Count = 10
i++ -> i++: Probability = 0.96, Count = 299
i++ -> i=0: Probability = 0.02, Count = 5
i++ -> :: Probability = 0.02, Count = 6
i++ -> i: Probability = 0.01, Count = 2
array1[i] -> array1[i]: Probability = 1.00, Count = 9
array2[i] -> array2[i]: Probability = 1.00, Count = 10
Main -> main: Probability = 1.00, Count = 4
string[] -> String[]: Probability = 0.83, Count = 69
string[] -> String: Probability = 0.02, Count = 2
string[] -> CharSequence[]: Probability = 0.02, Count = 2
string[] -> units: Probability = 0.01, Count = 1
string[] -> "bytes",: Probability = 0.01, Count = 1
string[] -> "KiB",: Probability = 0.01, Count = 1
string[] -> "MiB",: Probability = 0.01, Count = 1
string[] -> "GiB": Probability = 0.01, Count = 1
string[] -> lemmatize: Probability = 0.01, Count = 1
string[] -> dictionaryLemmatizer: Probability = 0.01, Count = 1
string[] -> components: Probability = 0.01, Count = 1
string[] -> getChunks: Probability = 0.01, Count = 1
string[] -> tags,: Probability = 0.01, Count = 1
args -> args: Probability = 0.95, Count = 332
args -> IllegalArgumentException: Probability = 0.00, Count = 1
args -> ignoreCase: Probability = 0.00, Count = 1
args -> getBoolean: Probability = 0.01, Count = 2
args -> "ignoreCase",: Probability = 0.00, Count = 1
args -> require: Probability = 0.00, Count = 1
args -> tokenOutput: Probability = 0.00, Count = 1
args -> getInt: Probability = 0.00, Count = 1
args -> args,: Probability = 0.01, Count = 2
args -> TOKEN_OUTPUT,: Probability = 0.00, Count = 1
args -> WikipediaTokenizer.TOKENS_ONLY: Probability = 0.00, Count = 1
args -> untokenizedTypes: Probability = 0.01, Count = 3
args -> UNTOKENIZED_TYPES: Probability = 0.00, Count = 1
QualityQueriesFinder -> QualityQueriesFinder: Probability = 0.75, Count = 3
QualityQueriesFinder -> <index-dir>": Probability = 0.25, Count = 1
FSDirectory.Open -> FSDirectory.open: Probability = 1.00, Count = 4
DirectoryInfo -> Paths.get: Probability = 1.00, Count = 4
args[0] -> args[0]: Probability = 1.00, Count = 10
CharsRef -> CharsRef: Probability = 0.63, Count = 26
CharsRef -> char[]: Probability = 0.07, Count = 3
CharsRef -> char[length]: Probability = 0.02, Count = 1
CharsRef -> this.charsEquals: Probability = 0.02, Count = 1
CharsRef -> CharsRefBuilder: Probability = 0.17, Count = 7
CharsRef -> ref: Probability = 0.05, Count = 2
CharsRef -> chars,: Probability = 0.02, Count = 1
char[] -> char[]: Probability = 0.65, Count = 97
char[] -> char: Probability = 0.28, Count = 42
char[] -> CharSequence: Probability = 0.02, Count = 3
char[] -> s: Probability = 0.01, Count = 1
char[] -> toCharArray: Probability = 0.01, Count = 1
char[] -> data[]: Probability = 0.01, Count = 1
char[] -> queryText.toCharArray: Probability = 0.01, Count = 1
char[] -> buffer[]: Probability = 0.01, Count = 1
char[] -> StringBuilder: Probability = 0.01, Count = 1
char[] -> off,: Probability = 0.01, Count = 2
chars, -> chars,: Probability = 1.00, Count = 17
offset, -> offset,: Probability = 0.98, Count = 218
offset, -> offset+0,: Probability = 0.00, Count = 1
offset, -> data,EscherSerializationListener: Probability = 0.00, Count = 1
offset, -> len: Probability = 0.01, Count = 2
length -> length: Probability = 0.89, Count = 192
length -> fillSlice: Probability = 0.00, Count = 1
length -> blockSize+1:: Probability = 0.00, Count = 1
length -> scratchBuffer: Probability = 0.01, Count = 2
length -> scratchBuffer,: Probability = 0.01, Count = 2
length -> internalBuffer.length: Probability = 0.01, Count = 2
length -> internalBuffer,: Probability = 0.00, Count = 1
length -> posStart,: Probability = 0.00, Count = 1
length -> numSyllables++: Probability = 0.00, Count = 1
length -> removeParticle: Probability = 0.00, Count = 1
length -> removePossessivePronoun: Probability = 0.00, Count = 1
length -> start,: Probability = 0.01, Count = 3
length -> start: Probability = 0.02, Count = 4
length -> this.length: Probability = 0.01, Count = 2
length -> length,: Probability = 0.00, Count = 1
this.chars -> this.chars: Probability = 1.00, Count = 4
chars -> chars: Probability = 0.75, Count = 18
chars -> CharSequence: Probability = 0.08, Count = 2
chars -> s: Probability = 0.17, Count = 4
this.Offset -> this.offset: Probability = 1.00, Count = 3
offset -> offset: Probability = 0.89, Count = 243
offset -> offset+4,: Probability = 0.01, Count = 4
offset -> field_2_rectY1: Probability = 0.00, Count = 1
offset -> 16,: Probability = 0.01, Count = 2
offset -> field_3_rectX2: Probability = 0.00, Count = 1
offset -> 20,: Probability = 0.01, Count = 2
offset -> field_4_rectY2: Probability = 0.00, Count = 1
offset -> field_2_flags: Probability = 0.00, Count = 1
offset -> offset--: Probability = 0.00, Count = 1
offset -> shortRecord: Probability = 0.01, Count = 3
offset -> 18,: Probability = 0.00, Count = 1
offset -> field_6_col2: Probability = 0.00, Count = 1
offset -> field_7_dx2: Probability = 0.00, Count = 1
offset -> 22,: Probability = 0.00, Count = 1
offset -> field_8_row2: Probability = 0.00, Count = 1
offset -> 24,: Probability = 0.00, Count = 1
offset -> field_9_dy2: Probability = 0.00, Count = 1
offset -> 26: Probability = 0.00, Count = 1
offset -> data,: Probability = 0.00, Count = 1
offset -> pOffset: Probability = 0.01, Count = 2
offset -> +: Probability = 0.01, Count = 2
offset -> this.markedPos: Probability = 0.00, Count = 1
this.Length -> this.length: Probability = 1.00, Count = 7
Debug.Assert -> assert: Probability = 0.88, Count = 168
Debug.Assert -> :: Probability = 0.06, Count = 12
Debug.Assert -> 0:: Probability = 0.02, Count = 4
Debug.Assert -> valueCount: Probability = 0.01, Count = 2
Debug.Assert -> final: Probability = 0.02, Count = 3
Debug.Assert -> ord: Probability = 0.01, Count = 1
IsValid -> isValid: Probability = 1.00, Count = 3
UpdateIPSetResponse -> UpdateIPSetResult: Probability = 1.00, Count = 1
UpdateIPSet -> updateIPSet: Probability = 1.00, Count = 1
UpdateIPSetRequest -> UpdateIPSetRequest: Probability = 1.00, Count = 1
Invoke<UpdateIPSetResponse> -> executeUpdateIPSet: Probability = 1.00, Count = 1
print -> print: Probability = 0.78, Count = 38
print -> String.valueOf: Probability = 0.22, Count = 11
object -> Object: Probability = 0.93, Count = 255
object -> object: Probability = 0.02, Count = 6
object -> boolean: Probability = 0.02, Count = 6
object -> o: Probability = 0.01, Count = 4
object -> if: Probability = 0.00, Count = 1
object -> {: Probability = 0.00, Count = 1
object -> AbstractEscherHolderRecord: Probability = 0.00, Count = 1
obj -> obj: Probability = 0.88, Count = 197
obj -> List<HSSFListener>: Probability = 0.00, Count = 1
obj -> _records.computeIfAbsent: Probability = 0.00, Count = 1
obj -> Short.valueOf: Probability = 0.00, Count = 1
obj -> this==obj: Probability = 0.01, Count = 2
obj -> if: Probability = 0.02, Count = 4
obj -> !: Probability = 0.02, Count = 4
obj -> ==: Probability = 0.00, Count = 1
obj -> instanceof: Probability = 0.01, Count = 2
obj -> FontRecord: Probability = 0.01, Count = 2
obj -> this: Probability = 0.00, Count = 1
obj -> true: Probability = 0.00, Count = 1
obj -> other: Probability = 0.00, Count = 1
obj -> !super.equals: Probability = 0.02, Count = 4
obj -> obj==null: Probability = 0.00, Count = 1
obj -> getClass: Probability = 0.00, Count = 1
obj -> false: Probability = 0.00, Count = 1
Sharpen.StringHelper.GetValueOf -> String.valueOf: Probability = 1.00, Count = 4
"IndexFileDeleter.CommitPoint -> "IndexFileDeleter.CommitPoint: Probability = 1.00, Count = 1
segmentsFileName -> segmentsFileName: Probability = 0.50, Count = 2
segmentsFileName -> files=": Probability = 0.25, Count = 1
segmentsFileName -> files: Probability = 0.25, Count = 1
lock -> synchronized: Probability = 0.93, Count = 155
lock -> throws: Probability = 0.07, Count = 11
lock -> Collection<V>: Probability = 0.01, Count = 1
curGen -> waitForGeneration: Probability = 0.50, Count = 1
curGen -> targetGen,: Probability = 0.50, Count = 1
targetGen -> maxMS: Probability = 0.33, Count = 3
targetGen -> targetGen: Probability = 0.33, Count = 3
targetGen -> searchingGen: Probability = 0.22, Count = 2
targetGen -> reopenLock.lock: Probability = 0.11, Count = 1
Math.Max -> Math.max: Probability = 0.95, Count = 18
Math.Max -> Math.min: Probability = 0.05, Count = 1
Time.NanoTime -> System.nanoTime: Probability = 1.00, Count = 3
while -> while: Probability = 0.98, Count = 167
while -> 0: Probability = 0.01, Count = 2
while -> it.hasNext: Probability = 0.01, Count = 1
msLeft -> msLeft: Probability = 1.00, Count = 3
<= -> <=: Probability = 0.99, Count = 132
<= -> if: Probability = 0.01, Count = 1
java.lang.StringBuffer -> StringBuffer: Probability = 0.68, Count = 34
java.lang.StringBuffer -> synchronized: Probability = 0.32, Count = 16
append -> append: Probability = 0.80, Count = 37
append -> float: Probability = 0.04, Count = 2
append -> f: Probability = 0.09, Count = 4
append -> RealToString.getInstance: Probability = 0.02, Count = 1
append -> .appendFloat: Probability = 0.02, Count = 1
append -> IntegralToString.appendInt: Probability = 0.02, Count = 1
b -> b: Probability = 0.81, Count = 228
b -> a==b: Probability = 0.01, Count = 2
b -> final: Probability = 0.08, Count = 24
b -> ,buf,: Probability = 0.00, Count = 1
b -> +=s.length: Probability = 0.00, Count = 1
b -> long: Probability = 0.00, Count = 1
b -> l: Probability = 0.01, Count = 2
b -> IntegralToString.appendLong: Probability = 0.00, Count = 1
b -> buffer[bPtr++]: Probability = 0.00, Count = 1
b -> ||: Probability = 0.02, Count = 7
b -> ==: Probability = 0.02, Count = 5
b -> Block: Probability = 0.00, Count = 1
b -> b.length: Probability = 0.01, Count = 2
b -> a,: Probability = 0.00, Count = 1
b -> !b.canUnpop: Probability = 0.00, Count = 1
b -> free.newBlock: Probability = 0.00, Count = 1
b -> References.isSameObject: Probability = 0.00, Count = 1
b -> int: Probability = 0.00, Count = 1
b -> i: Probability = 0.01, Count = 2
? -> ?: Probability = 0.62, Count = 238
? -> :: Probability = 0.34, Count = 132
? -> +=: Probability = 0.01, Count = 4
? -> RamUsageEstimator.sizeOf: Probability = 0.01, Count = 2
? -> fields.values: Probability = 0.01, Count = 2
? -> gt: Probability = 0.01, Count = 2
? -> :crA.getLastRow: Probability = 0.00, Count = 1
? -> ,crA.getFirstColumn: Probability = 0.00, Count = 1
? -> ?crB.getFirstColumn: Probability = 0.00, Count = 1
? -> :crA.getFirstColumn: Probability = 0.00, Count = 1
? -> entry: Probability = 0.00, Count = 1
? -> bytesUsedPerBlock: Probability = 0.00, Count = 1
"true" -> "true": Probability = 0.44, Count = 4
"true" -> this,: Probability = 0.44, Count = 4
"true" -> .appendDouble: Probability = 0.11, Count = 1
"false" -> "false": Probability = 0.67, Count = 4
"false" -> this: Probability = 0.33, Count = 2
put -> put: Probability = 0.90, Count = 98
put -> final: Probability = 0.07, Count = 8
put -> buf: Probability = 0.02, Count = 2
put -> src: Probability = 0.01, Count = 1
index, -> index,: Probability = 1.00, Count = 133
byte -> byte: Probability = 0.91, Count = 96
byte -> findColor: Probability = 0.01, Count = 1
byte -> byteIndex,: Probability = 0.01, Count = 1
byte -> short: Probability = 0.06, Count = 6
byte -> addColor: Probability = 0.01, Count = 1
java.nio.ReadOnlyBufferException -> ReadOnlyBufferException: Probability = 1.00, Count = 44
GetLineCount -> getLineCount: Probability = 1.00, Count = 1
lineCount -> lineCount: Probability = 1.00, Count = 4
Equals -> equals: Probability = 0.95, Count = 141
Equals -> Object: Probability = 0.03, Count = 4
Equals -> o: Probability = 0.03, Count = 4
is -> instanceof: Probability = 0.80, Count = 248
is -> is: Probability = 0.18, Count = 56
is -> else: Probability = 0.01, Count = 3
is -> if: Probability = 0.00, Count = 1
is -> Object: Probability = 0.00, Count = 1
is -> ": Probability = 0.00, Count = 1
DutchStemmer -> DutchStemmer: Probability = 1.00, Count = 1
CreateNotificationSubscriptionResponse -> CreateNotificationSubscriptionResult: Probability = 1.00, Count = 1
CreateNotificationSubscription -> createNotificationSubscription: Probability = 1.00, Count = 1
CreateNotificationSubscriptionRequest -> CreateNotificationSubscriptionRequest: Probability = 1.00, Count = 1
Invoke<CreateNotificationSubscriptionResponse> -> executeCreateNotificationSubscription: Probability = 1.00, Count = 1
IsOutdated -> isOutdated: Probability = 1.00, Count = 1
snapshot.IsModified -> snapshot.isModified: Probability = 1.00, Count = 1
GetFile -> getFile: Probability = 1.00, Count = 8
DescribeVirtualInterfacesResponse -> DescribeVirtualInterfacesResult: Probability = 1.00, Count = 2
DescribeVirtualInterfaces -> describeVirtualInterfaces: Probability = 1.00, Count = 3
DescribeVirtualInterfacesRequest -> DescribeVirtualInterfacesRequest: Probability = 1.00, Count = 2
onChanged -> onChanged: Probability = 0.67, Count = 2
onChanged -> buildMap: Probability = 0.33, Count = 1
this._enclosing.refreshExpGroupMetadataList -> DataSetObserver: Probability = 0.50, Count = 1
this._enclosing.refreshExpGroupMetadataList -> Log.d: Probability = 0.50, Count = 1
this._enclosing.notifyDataSetChanged -> mObservers: Probability = 0.50, Count = 1
this._enclosing.notifyDataSetChanged -> o.onChanged: Probability = 0.50, Count = 1
DeleteEventTrackerResponse -> DeleteEventTrackerResult: Probability = 1.00, Count = 1
DeleteEventTracker -> deleteEventTracker: Probability = 1.00, Count = 1
DeleteEventTrackerRequest -> DeleteEventTrackerRequest: Probability = 1.00, Count = 1
Invoke<DeleteEventTrackerResponse> -> executeDeleteEventTracker: Probability = 1.00, Count = 1
Matches -> matches: Probability = 0.76, Count = 26
Matches -> final: Probability = 0.24, Count = 8
x -> x: Probability = 0.81, Count = 50
x -> BlankEval: Probability = 0.05, Count = 3
x -> getCode: Probability = 0.10, Count = 6
x -> getBackgroundDeltaPriority: Probability = 0.03, Count = 2
x -> .getErrorCode: Probability = 0.02, Count = 1
switch -> switch: Probability = 1.00, Count = 95
case -> case: Probability = 0.67, Count = 282
case -> OBJ_COMMIT:return: Probability = 0.00, Count = 2
case -> ENCODED_TYPE_COMMIT: Probability = 0.00, Count = 1
case -> OBJ_TREE:return: Probability = 0.00, Count = 2
case -> ENCODED_TYPE_TREE: Probability = 0.00, Count = 1
case -> OBJ_BLOB:return: Probability = 0.00, Count = 2
case -> ENCODED_TYPE_BLOB: Probability = 0.00, Count = 1
case -> OBJ_TAG:return: Probability = 0.00, Count = 2
case -> BOOLEAN:return: Probability = 0.01, Count = 3
case -> cell.getBooleanCellValue: Probability = 0.00, Count = 1
case -> ERROR:return: Probability = 0.01, Count = 3
case -> ErrorEval.valueOf: Probability = 0.00, Count = 1
case -> cell.getErrorCellValue: Probability = 0.00, Count = 1
case -> FORMULA:return: Probability = 0.00, Count = 2
case -> _evaluator.evaluate: Probability = 0.00, Count = 1
case -> NUMERIC:return: Probability = 0.00, Count = 2
case -> cell.getStringCellValue: Probability = 0.00, Count = 1
case -> BLANK:return: Probability = 0.00, Count = 2
case -> default:throw: Probability = 0.00, Count = 2
case -> ff.nativeId: Probability = 0.00, Count = 1
case -> _cellType: Probability = 0.00, Count = 2
case -> BOOLEAN:: Probability = 0.01, Count = 3
case -> EscherRecordTypes.forTypeID: Probability = 0.00, Count = 2
case -> TYPE_COMMIT: Probability = 0.00, Count = 1
case -> TYPE_TREE: Probability = 0.00, Count = 1
case -> TYPE_BLOB: Probability = 0.00, Count = 1
case -> Character.UPPERCASE_LETTER:: Probability = 0.00, Count = 1
case -> UPPER: Probability = 0.00, Count = 1
case -> Character.LOWERCASE_LETTER:: Probability = 0.00, Count = 1
case -> LOWER: Probability = 0.00, Count = 1
case -> Character.TITLECASE_LETTER:case: Probability = 0.00, Count = 1
case -> Character.MODIFIER_LETTER:case: Probability = 0.00, Count = 1
case -> Character.OTHER_LETTER:case: Probability = 0.00, Count = 1
case -> Character.NON_SPACING_MARK:case: Probability = 0.00, Count = 1
case -> Character.ENCLOSING_MARK:: Probability = 0.00, Count = 1
case -> Character.COMBINING_SPACING_MARK:return: Probability = 0.00, Count = 1
case -> ALPHA: Probability = 0.00, Count = 1
case -> Character.DECIMAL_DIGIT_NUMBER:case: Probability = 0.00, Count = 1
case -> Character.LETTER_NUMBER:case: Probability = 0.00, Count = 1
case -> Character.OTHER_NUMBER:return: Probability = 0.00, Count = 1
case -> default:: Probability = 0.01, Count = 5
case -> getCellTypeEnum: Probability = 0.00, Count = 1
case -> getBooleanCellValue: Probability = 0.00, Count = 1
case -> ?"TRUE":"FALSE": Probability = 0.00, Count = 1
case -> ErrorEval.getText: Probability = 0.00, Count = 2
case -> .getErrorValue: Probability = 0.00, Count = 1
case -> getCellFormula: Probability = 0.00, Count = 1
case -> NUMERIC:if: Probability = 0.00, Count = 1
case -> DateUtil.isCellDateFormatted: Probability = 0.00, Count = 1
case -> SimpleDateFormat: Probability = 0.00, Count = 2
case -> sdf: Probability = 0.00, Count = 1
case -> "dd-MMM-yyyy",: Probability = 0.00, Count = 1
case -> sdf.setTimeZone: Probability = 0.00, Count = 1
case -> 2:return: Probability = 0.00, Count = 1
case -> BLANK:: Probability = 0.00, Count = 1
case -> destCell.setBlank: Probability = 0.00, Count = 1
case -> _numberValue: Probability = 0.00, Count = 2
case -> _booleanValue: Probability = 0.00, Count = 2
case -> WORD_IDEO: Probability = 0.00, Count = 1
case -> RuleBasedBreakIterator.WORD_KANA:return: Probability = 0.00, Count = 1
case -> WORD_NUMBER: Probability = 0.00, Count = 1
case -> ViewDefinitionRecord.sid:case: Probability = 0.00, Count = 1
case -> DrawingRecord.sid:case: Probability = 0.00, Count = 1
case -> DrawingSelectionRecord.sid:case: Probability = 0.00, Count = 1
case -> ObjRecord.sid:case: Probability = 0.00, Count = 1
case -> TextObjectRecord.sid:case: Probability = 0.00, Count = 1
case -> ColumnInfoRecord.sid:: Probability = 0.00, Count = 1
case -> GutsRecord.sid:: Probability = 0.00, Count = 1
case -> WindowOneRecord.sid:case: Probability = 0.00, Count = 1
case -> WindowTwoRecord.sid:return: Probability = 0.00, Count = 1
case -> DVALRecord.sid:return: Probability = 0.00, Count = 1
case -> EOFRecord.sid:throw: Probability = 0.00, Count = 1
case -> "Found: Probability = 0.00, Count = 1
case -> 4:: Probability = 0.00, Count = 1
case -> default:return: Probability = 0.00, Count = 2
case -> OP_EQ: Probability = 0.00, Count = 1
case -> '>':if: Probability = 0.00, Count = 1
case -> OP_GE: Probability = 0.00, Count = 1
case -> OP_GT: Probability = 0.00, Count = 1
case -> '<':if: Probability = 0.00, Count = 1
case -> OP_LE: Probability = 0.00, Count = 1
case -> '>':return: Probability = 0.00, Count = 1
case -> OP_NE: Probability = 0.00, Count = 1
case -> blip.getRecordId: Probability = 0.00, Count = 1
case -> BLIP_WMF:return: Probability = 0.00, Count = 1
case -> "wmf": Probability = 0.00, Count = 1
case -> BLIP_EMF:return: Probability = 0.00, Count = 1
case -> "emf": Probability = 0.00, Count = 1
case -> BLIP_PICT:return: Probability = 0.00, Count = 1
case -> "pict": Probability = 0.00, Count = 1
case -> BLIP_PNG:return: Probability = 0.00, Count = 1
case -> "png": Probability = 0.00, Count = 1
case -> BLIP_JPEG:return: Probability = 0.00, Count = 1
case -> "jpeg": Probability = 0.00, Count = 1
case -> BLIP_DIB:return: Probability = 0.00, Count = 1
case -> "dib": Probability = 0.00, Count = 1
case -> DIV0:: Probability = 0.00, Count = 1
case -> DIV_ZERO: Probability = 0.00, Count = 1
case -> NA:: Probability = 0.00, Count = 1
case -> N_A: Probability = 0.00, Count = 1
case -> NAME:: Probability = 0.00, Count = 1
case -> NAME_INVALID: Probability = 0.00, Count = 1
case -> NULL:: Probability = 0.00, Count = 1
case -> NULL_INTERSECTION: Probability = 0.00, Count = 1
case -> NUM:: Probability = 0.00, Count = 1
case -> NUM_ERROR: Probability = 0.00, Count = 1
case -> REF:: Probability = 0.00, Count = 1
case -> REF_INVALID: Probability = 0.00, Count = 1
case -> VALUE:: Probability = 0.00, Count = 1
case -> VALUE_INVALID: Probability = 0.00, Count = 1
case -> BoolErrRecord: Probability = 0.00, Count = 1
case -> _errorCode: Probability = 0.00, Count = 1
CmpOp.NONE:case -> CmpOp.NONE:case: Probability = 1.00, Count = 2
_value.Length -> _value.length: Probability = 0.80, Count = 4
_value.Length -> bos: Probability = 0.20, Count = 1
CmpOp.NE:return -> CmpOp.NE:return: Probability = 1.00, Count = 5
! -> !: Probability = 1.00, Count = 79
StringEval -> StringEval: Probability = 1.00, Count = 24
&& -> &&: Probability = 0.91, Count = 349
&& -> ==: Probability = 0.01, Count = 2
&& -> !=: Probability = 0.01, Count = 4
&& -> this.isPrecedenceFilterSuppressed: Probability = 0.00, Count = 1
&& -> other.isPrecedenceFilterSuppressed: Probability = 0.00, Count = 1
&& -> null&&: Probability = 0.01, Count = 3
&& -> rhs.x: Probability = 0.00, Count = 1
&& -> crA.getLastRow: Probability = 0.00, Count = 1
&& -> crA.getFirstColumn: Probability = 0.00, Count = 1
&& -> crA.getLastColumn: Probability = 0.00, Count = 1
&& -> b.nibbles: Probability = 0.00, Count = 1
&& -> b.w1: Probability = 0.00, Count = 1
&& -> b.w2&&: Probability = 0.00, Count = 1
&& -> b.w3: Probability = 0.00, Count = 1
&& -> b.w4: Probability = 0.00, Count = 1
&& -> b.w5: Probability = 0.00, Count = 1
&& -> &&childCount: Probability = 0.00, Count = 1
&& -> this.h: Probability = 0.01, Count = 2
&& -> it.start: Probability = 0.00, Count = 1
&& -> it.end&&: Probability = 0.00, Count = 1
&& -> .equals: Probability = 0.01, Count = 3
&& -> !include.getField: Probability = 0.00, Count = 1
&& -> other.end: Probability = 0.00, Count = 1
&& -> other.start: Probability = 0.00, Count = 1
&& -> preBreak.equals: Probability = 0.00, Count = 1
_value, -> _value: Probability = 1.00, Count = 2
ListWebsiteAuthorizationProvidersResponse -> ListWebsiteAuthorizationProvidersResult: Probability = 1.00, Count = 1
ListWebsiteAuthorizationProviders -> listWebsiteAuthorizationProviders: Probability = 1.00, Count = 1
ListWebsiteAuthorizationProvidersRequest -> ListWebsiteAuthorizationProvidersRequest: Probability = 1.00, Count = 1
Invoke<ListWebsiteAuthorizationProvidersResponse> -> executeListWebsiteAuthorizationProviders: Probability = 1.00, Count = 1
write -> write: Probability = 1.00, Count = 32
buf, -> buf,: Probability = 0.88, Count = 45
buf, -> buffer,: Probability = 0.06, Count = 3
buf, -> read: Probability = 0.04, Count = 2
buf, -> buf.length: Probability = 0.02, Count = 1
doWrite -> doWrite: Probability = 1.00, Count = 1
FormatAsString -> formatAsString: Probability = 1.00, Count = 4
IsWholeColumnReference -> isWholeColumnReference: Probability = 1.00, Count = 3
_lastCell.Col -> _firstCell.getCol: Probability = 0.50, Count = 3
_lastCell.Col -> _lastCell.getCol: Probability = 0.50, Count = 3
":" -> ":": Probability = 0.92, Count = 23
":" -> +":"+: Probability = 0.08, Count = 2
StringBuilder -> StringBuilder: Probability = 0.95, Count = 528
StringBuilder -> 64: Probability = 0.01, Count = 3
StringBuilder -> sb: Probability = 0.01, Count = 7
StringBuilder -> "[Data: Probability = 0.00, Count = 1
StringBuilder -> StringBuffer: Probability = 0.01, Count = 5
StringBuilder -> '[': Probability = 0.01, Count = 4
StringBuilder -> returnBuffer: Probability = 0.00, Count = 1
StringBuilder -> preTag.length: Probability = 0.00, Count = 1
StringBuilder -> "[UNCALCED]\n": Probability = 0.00, Count = 1
StringBuilder -> retVal: Probability = 0.00, Count = 2
StringBuilder -> String: Probability = 0.00, Count = 2
StringBuilder -> String[]: Probability = 0.00, Count = 1
StringBuilder -> prependAttClass: Probability = 0.00, Count = 1
sb -> sb: Probability = 1.00, Count = 83
32 -> 32: Probability = 1.00, Count = 22
sb.Append -> sb.append: Probability = 0.76, Count = 348
sb.Append -> elsesb.append: Probability = 0.00, Count = 2
sb.Append -> result": Probability = 0.00, Count = 2
sb.Append -> +getStringValue: Probability = 0.00, Count = 2
sb.Append -> sb,: Probability = 0.00, Count = 1
sb.Append -> FormulaError.REF.getString: Probability = 0.00, Count = 2
sb.Append -> oldRef,: Probability = 0.00, Count = 1
sb.Append -> "CREATE": Probability = 0.00, Count = 1
sb.Append -> s.append: Probability = 0.01, Count = 4
sb.Append -> ': Probability = 0.03, Count = 12
sb.Append -> newRef,: Probability = 0.00, Count = 1
sb.Append -> "DELETE": Probability = 0.00, Count = 1
sb.Append -> .append: Probability = 0.01, Count = 6
sb.Append -> getMessage: Probability = 0.00, Count = 2
sb.Append -> NEW_LINE: Probability = 0.00, Count = 2
sb.Append -> +_evaluator.getSheetNameRange: Probability = 0.00, Count = 2
sb.Append -> +'!': Probability = 0.00, Count = 2
sb.Append -> ws: Probability = 0.00, Count = 1
sb.Append -> ws.charAt: Probability = 0.00, Count = 1
sb.Append -> ws.substring: Probability = 0.00, Count = 1
sb.Append -> getFractionalDigits: Probability = 0.00, Count = 1
sb.Append -> "E": Probability = 0.00, Count = 1
sb.Append -> "dim=": Probability = 0.00, Count = 1
sb.Append -> labelValue: Probability = 0.00, Count = 2
sb.Append -> "sheetIx=": Probability = 0.00, Count = 2
sb.Append -> +crA.formatAsString: Probability = 0.00, Count = 1
sb.Append -> +':': Probability = 0.00, Count = 1
sb.Append -> +crB.formatAsString: Probability = 0.00, Count = 1
sb.Append -> "workbook=": Probability = 0.01, Count = 4
sb.Append -> getExternalWorkbookNumber: Probability = 0.01, Count = 4
sb.Append -> getSheetName: Probability = 0.01, Count = 3
sb.Append -> "name=": Probability = 0.00, Count = 1
sb.Append -> squashedCommits: Probability = 0.00, Count = 1
sb.Append -> "\ncommit: Probability = 0.00, Count = 1
sb.Append -> c.getAuthorIdent: Probability = 0.00, Count = 1
sb.Append -> "\n\t": Probability = 0.00, Count = 1
sb.Append -> c.getShortMessage: Probability = 0.00, Count = 1
sb.Append -> SheetNameFormatter.appendFormat: Probability = 0.00, Count = 1
sb.Append -> +_firstMovedIndex: Probability = 0.00, Count = 1
sb.Append -> +_lastMovedIndex: Probability = 0.00, Count = 1
sb.Append -> +_name.getNameText: Probability = 0.00, Count = 1
sb.Append -> formatReferenceAsString: Probability = 0.00, Count = 1
sb.Append -> sb.toString: Probability = 0.00, Count = 1
sb.Append -> "arn:": Probability = 0.00, Count = 1
sb.Append -> this.partition: Probability = 0.00, Count = 1
sb.Append -> this.service: Probability = 0.00, Count = 1
sb.Append -> this.accountId: Probability = 0.00, Count = 1
sb.Append -> this.resource: Probability = 0.00, Count = 1
sb.Append -> "sheet=": Probability = 0.00, Count = 1
sb.Append -> +formatAsString: Probability = 0.00, Count = 2
sb.Append -> "TrackingRefUpdate[": Probability = 0.00, Count = 1
sb.Append -> forced: Probability = 0.00, Count = 1
sb.Append -> oldObjectId.abbreviate: Probability = 0.00, Count = 1
sb.Append -> .name: Probability = 0.00, Count = 2
sb.Append -> newObjectId.abbreviate: Probability = 0.00, Count = 1
sb.Append -> highlightForeground: Probability = 0.00, Count = 2
sb.Append -> "color:: Probability = 0.00, Count = 1
sb.Append -> getForegroundColorString: Probability = 0.00, Count = 2
sb.Append -> highlightBackground: Probability = 0.00, Count = 2
sb.Append -> "background:: Probability = 0.00, Count = 1
sb.Append -> getBackgroundColorString: Probability = 0.00, Count = 2
sb.Append -> "</span>": Probability = 0.00, Count = 1
sb.Append -> "color=\"": Probability = 0.00, Count = 1
sb.Append -> "bgcolor=\"": Probability = 0.00, Count = 1
sb.Append -> "</font>": Probability = 0.00, Count = 1
sb.Append -> _operator.getRepresentation: Probability = 0.00, Count = 1
sb.Append -> getValueText: Probability = 0.00, Count = 1
EscherGraphics -> Graphics: Probability = 0.50, Count = 1
EscherGraphics -> EscherGraphics: Probability = 0.50, Count = 1
Create -> create: Probability = 1.00, Count = 140
workbook,foreground, -> escherGroup,: Probability = 1.00, Count = 1
font, -> workbook,foreground,: Probability = 1.00, Count = 1
verticalPointsPerPixel -> font,: Probability = 1.00, Count = 1
g -> verticalPointsPerPixel: Probability = 1.00, Count = 1
DoubleDocValues -> DoubleDocValues: Probability = 1.00, Count = 1
ValueSource -> ValueSource: Probability = 0.73, Count = 8
ValueSource -> DoubleValuesSource: Probability = 0.09, Count = 1
ValueSource -> ifSource,: Probability = 0.09, Count = 1
ValueSource -> trueSource,: Probability = 0.09, Count = 1
vs -> vs: Probability = 1.00, Count = 21
this.m_vs -> this.vs: Probability = 1.00, Count = 3
CharArraySet -> CharArraySet: Probability = 0.89, Count = 8
CharArraySet -> unmodifiableSet: Probability = 0.11, Count = 1
GetDefaultStopSet -> getDefaultStopSet: Probability = 1.00, Count = 1
DefaultSetHolder.DEFAULT_STOP_SET -> DefaultSetHolder.DEFAULT_STOP_SET: Probability = 1.00, Count = 1
DeleteLoadBalancerPolicyResponse -> DeleteLoadBalancerPolicyResult: Probability = 1.00, Count = 1
DeleteLoadBalancerPolicy -> deleteLoadBalancerPolicy: Probability = 1.00, Count = 1
DeleteLoadBalancerPolicyRequest -> DeleteLoadBalancerPolicyRequest: Probability = 1.00, Count = 1
Invoke<DeleteLoadBalancerPolicyResponse> -> executeDeleteLoadBalancerPolicy: Probability = 1.00, Count = 1
DecreaseReplicaCountResponse -> ReplicationGroup: Probability = 1.00, Count = 1
DecreaseReplicaCount -> decreaseReplicaCount: Probability = 1.00, Count = 1
DecreaseReplicaCountRequest -> DecreaseReplicaCountRequest: Probability = 1.00, Count = 1
Invoke<DecreaseReplicaCountResponse> -> executeDecreaseReplicaCount: Probability = 1.00, Count = 1
RefUpdate.Result -> Result: Probability = 0.67, Count = 6
RefUpdate.Result -> RefUpdate.Result: Probability = 0.33, Count = 3
Update -> update: Probability = 1.00, Count = 8
RevWalk -> RevWalk: Probability = 0.69, Count = 22
RevWalk -> throws: Probability = 0.06, Count = 2
RevWalk -> NoteMap: Probability = 0.12, Count = 4
RevWalk -> NoteMap.newEmptyMap: Probability = 0.12, Count = 4
walk -> walk: Probability = 0.89, Count = 8
walk -> requireCanDoUpdate: Probability = 0.11, Count = 1
try -> IOException: Probability = 0.10, Count = 28
try -> try: Probability = 0.81, Count = 224
try -> throws: Probability = 0.09, Count = 26
walk, -> walk,: Probability = 1.00, Count = 4
UpdateImpl -> status: Probability = 1.00, Count = 1
IOException -> IOException: Probability = 0.93, Count = 81
IOException -> throw: Probability = 0.03, Count = 3
IOException -> new: Probability = 0.01, Count = 1
IOException -> UncheckedIOException: Probability = 0.01, Count = 1
IOException -> ,: Probability = 0.01, Count = 1
_Store_484 -> status: Probability = 1.00, Count = 3
catch -> catch: Probability = 0.81, Count = 200
catch -> e: Probability = 0.17, Count = 41
catch -> Exception: Probability = 0.01, Count = 2
catch -> IOException: Probability = 0.00, Count = 1
catch -> try: Probability = 0.01, Count = 2
RefUpdate.Result.IO_FAILURE -> Result.IO_FAILURE: Probability = 1.00, Count = 2
ICollection<string> -> Set<String>: Probability = 0.79, Count = 11
ICollection<string> -> Collection<String>: Probability = 0.21, Count = 3
GetChanged -> getChanged: Probability = 1.00, Count = 1
Sharpen.Collections.UnmodifiableSet -> Collections.unmodifiableSet: Probability = 1.00, Count = 6
diff.GetChanged -> diff.getChanged: Probability = 1.00, Count = 1
ToHex -> toHex: Probability = 0.23, Count = 19
ToHex -> StringBuilder: Probability = 0.17, Count = 14
ToHex -> sb: Probability = 0.08, Count = 7
ToHex -> writeHex: Probability = 0.08, Count = 7
ToHex -> sb,: Probability = 0.08, Count = 7
ToHex -> value: Probability = 0.06, Count = 5
ToHex -> ==: Probability = 0.10, Count = 8
ToHex -> ||: Probability = 0.05, Count = 4
ToHex -> value.length: Probability = 0.05, Count = 4
ToHex -> ?: Probability = 0.05, Count = 4
ToHex -> 0xFFFF,: Probability = 0.02, Count = 2
ToHex -> 16: Probability = 0.01, Count = 1
ToHex -> 8: Probability = 0.01, Count = 1
16 -> 16: Probability = 1.00, Count = 35
value, -> value,: Probability = 0.48, Count = 43
value, -> 16,: Probability = 0.03, Count = 3
value, -> "": Probability = 0.08, Count = 7
value, -> sb.toString: Probability = 0.12, Count = 11
value, -> 0xFFFFFFFFL,: Probability = 0.03, Count = 3
value, -> 8,: Probability = 0.03, Count = 3
value, -> "[]":: Probability = 0.04, Count = 4
value, -> value.getBytes: Probability = 0.04, Count = 4
value, -> LocaleUtil.CHARSET_1252: Probability = 0.04, Count = 4
value, -> 4,: Probability = 0.03, Count = 3
value, -> 2,: Probability = 0.02, Count = 2
value, -> value: Probability = 0.02, Count = 2
CreatePlaceholder -> createPlaceholder: Probability = 1.00, Count = 1
_offset++ -> _offset++: Probability = 1.00, Count = 2
override -> @Override: Probability = 0.35, Count = 63
override -> final: Probability = 0.19, Count = 34
override -> (: Probability = 0.16, Count = 29
override -> public: Probability = 0.23, Count = 41
override -> throws: Probability = 0.02, Count = 4
override -> synchronized: Probability = 0.01, Count = 1
override -> iterator: Probability = 0.02, Count = 3
override -> int: Probability = 0.01, Count = 1
override -> Object: Probability = 0.01, Count = 1
override -> String: Probability = 0.01, Count = 2
override -> TreeFilter: Probability = 0.01, Count = 1
java.util.MapClass.Entry<K, -> Map.Entry: Probability = 0.14, Count = 5
java.util.MapClass.Entry<K, -> Entry<K,: Probability = 0.43, Count = 15
java.util.MapClass.Entry<K, -> Map.Entry<K,: Probability = 0.06, Count = 2
java.util.MapClass.Entry<K, -> Map.Entry<K,V>: Probability = 0.03, Count = 1
java.util.MapClass.Entry<K, -> entry: Probability = 0.14, Count = 5
java.util.MapClass.Entry<K, -> Entry: Probability = 0.20, Count = 7
other -> other: Probability = 0.82, Count = 162
other -> _other: Probability = 0.04, Count = 7
other -> &&func.equals: Probability = 0.01, Count = 1
other -> instanceof: Probability = 0.02, Count = 4
other -> false: Probability = 0.03, Count = 5
other -> assert: Probability = 0.02, Count = 4
other -> isEqual: Probability = 0.01, Count = 1
other -> o: Probability = 0.01, Count = 2
other -> other||: Probability = 0.01, Count = 1
other -> Arrays.equals: Probability = 0.01, Count = 1
other -> CopyOnWriteArrayList<?>: Probability = 0.01, Count = 1
other -> other.offset,: Probability = 0.01, Count = 1
other -> other.offset: Probability = 0.01, Count = 2
other -> _other.getClass: Probability = 0.01, Count = 1
other -> super.copyFrom: Probability = 0.01, Count = 1
other -> !: Probability = 0.01, Count = 1
other -> assertNotFinished: Probability = 0.01, Count = 1
other -> Arrays.compareUnsigned: Probability = 0.01, Count = 1
other -> other.length: Probability = 0.01, Count = 1
other.getKey -> other.getKey: Probability = 1.00, Count = 2
key.Equals -> key.equals: Probability = 1.00, Count = 11
other.getValue -> other.getValue: Probability = 1.00, Count = 2
value.Equals -> value.equals: Probability = 1.00, Count = 5
arg0,ValueEval -> arg0,ValueEval: Probability = 1.00, Count = 5
arg1 -> arg1: Probability = 1.00, Count = 31
double -> double: Probability = 0.95, Count = 329
double -> mod: Probability = 0.00, Count = 1
double -> pmt,: Probability = 0.00, Count = 1
double -> Double.longBitsToDouble: Probability = 0.00, Count = 1
double -> d: Probability = 0.00, Count = 1
double -> f+p: Probability = 0.00, Count = 1
double -> irr: Probability = 0.00, Count = 1
double -> guess: Probability = 0.01, Count = 2
double -> MAX_ITERATION_COUNT: Probability = 0.00, Count = 1
double -> factor: Probability = 0.01, Count = 3
double -> ceiling: Probability = 0.00, Count = 1
double -> tanh: Probability = 0.00, Count = 1
double -> Math.pow: Probability = 0.00, Count = 1
double -> val: Probability = 0.01, Count = 3
double -> cfs: Probability = 0.00, Count = 1
d0 -> d0: Probability = 0.76, Count = 13
d0 -> d: Probability = 0.24, Count = 4
NumericFunction.SingleOperandEvaluate -> NumericFunction.singleOperandEvaluate: Probability = 0.67, Count = 14
NumericFunction.SingleOperandEvaluate -> singleOperandEvaluate: Probability = 0.33, Count = 7
srcColumnIndex -> srcColumnIndex: Probability = 1.00, Count = 88
d1 -> d1: Probability = 0.62, Count = 16
d1 -> d1,: Probability = 0.12, Count = 3
d1 -> multi: Probability = 0.19, Count = 5
d1 -> singleOperandEvaluate: Probability = 0.08, Count = 2
logE -> logE: Probability = 1.00, Count = 3
Math.Log -> Math.log: Probability = 0.95, Count = 20
Math.Log -> /: Probability = 0.05, Count = 1
base1 -> Math.E: Probability = 1.00, Count = 1
/ -> /: Probability = 0.95, Count = 124
/ -> 2: Probability = 0.02, Count = 2
/ -> maxCacheMB=": Probability = 0.01, Count = 1
/ -> maxMergeSizeMB=": Probability = 0.01, Count = 1
/ -> maxMergeSizeBytes/1024/1024.: Probability = 0.01, Count = 1
/ -> sortTimeMS.get: Probability = 0.01, Count = 1
NumericFunction.CheckValue -> NumericFunction.checkValue: Probability = 1.00, Count = 6
EvaluationException -> EvaluationException: Probability = 0.90, Count = 79
EvaluationException -> RefListEval: Probability = 0.05, Count = 4
EvaluationException -> eval: Probability = 0.05, Count = 4
EvaluationException -> ErrorEval.VALUE_INVALID: Probability = 0.01, Count = 1
e -> e: Probability = 0.93, Count = 291
e -> HashMapEntry: Probability = 0.01, Count = 2
e -> tab[i]: Probability = 0.01, Count = 3
e -> ,: Probability = 0.03, Count = 8
e -> ConfigInvalidException: Probability = 0.01, Count = 2
e -> e.getKey: Probability = 0.00, Count = 1
e -> i.getDirCacheEntry: Probability = 0.00, Count = 1
e -> null: Probability = 0.01, Count = 2
e -> reportInputMismatch: Probability = 0.00, Count = 1
e -> reportFailedPredicate: Probability = 0.00, Count = 1
e -> new: Probability = 0.00, Count = 1
e -> e.getMessage: Probability = 0.00, Count = 1
e.GetErrorEval -> e.getErrorEval: Probability = 1.00, Count = 47
NumberEval -> NumberEval: Probability = 0.94, Count = 45
NumberEval -> srcColumnIndex+1: Probability = 0.06, Count = 3
DeleteFilterResponse -> DeleteFilterResult: Probability = 1.00, Count = 1
DeleteFilter -> deleteFilter: Probability = 1.00, Count = 1
DeleteFilterRequest -> DeleteFilterRequest: Probability = 1.00, Count = 1
Invoke<DeleteFilterResponse> -> executeDeleteFilter: Probability = 1.00, Count = 1
CreateInstanceSnapshotResponse -> CreateInstanceSnapshotResult: Probability = 1.00, Count = 1
CreateInstanceSnapshot -> createInstanceSnapshot: Probability = 1.00, Count = 1
CreateInstanceSnapshotRequest -> CreateInstanceSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CreateInstanceSnapshotResponse> -> executeCreateInstanceSnapshot: Probability = 1.00, Count = 1
IList<IToken> -> List<Token>: Probability = 0.56, Count = 9
IList<IToken> -> List<?: Probability = 0.12, Count = 2
IList<IToken> -> extends: Probability = 0.12, Count = 2
IList<IToken> -> Token>: Probability = 0.12, Count = 2
IList<IToken> -> getAllTokens: Probability = 0.06, Count = 1
GetTokens -> getTokens: Probability = 1.00, Count = 7
stop -> stop: Probability = 0.74, Count = 23
stop -> start<0: Probability = 0.06, Count = 2
stop -> stop<0: Probability = 0.06, Count = 2
stop -> stop>=tokens.size: Probability = 0.06, Count = 2
stop -> start!=null: Probability = 0.03, Count = 1
stop -> stop!=null: Probability = 0.03, Count = 1
stop, -> stop,: Probability = 0.80, Count = 4
stop, -> start,stop,: Probability = 0.20, Count = 1
TermGroupFacetCollector -> TermGroupFacetCollector: Probability = 1.00, Count = 1
CreateTermGroupFacetCollector -> createTermGroupFacetCollector: Probability = 1.00, Count = 1
groupField,string -> groupField,String: Probability = 1.00, Count = 1
facetField,bool -> facetField,boolean: Probability = 1.00, Count = 1
facetFieldMultivalued,BytesRef -> facetFieldMultivalued,BytesRef: Probability = 1.00, Count = 1
facetPrefix,int -> facetPrefix,int: Probability = 1.00, Count = 1
initialSize -> initialSize: Probability = 1.00, Count = 8
facetFieldMultivalued -> facetFieldMultivalued: Probability = 1.00, Count = 1
MV -> MV: Probability = 1.00, Count = 1
groupField, -> groupField,: Probability = 0.67, Count = 2
groupField, -> SV: Probability = 0.33, Count = 1
facetField, -> facetField,: Probability = 1.00, Count = 2
facetPrefix, -> facetPrefix,: Probability = 1.00, Count = 2
RenameAlbumRequest -> RenameAlbumRequest: Probability = 1.00, Count = 1
"CloudPhoto", -> "CloudPhoto",: Probability = 1.00, Count = 51
"2017-07-11", -> "2017-07-11",: Probability = 1.00, Count = 51
"RenameAlbum", -> "RenameAlbum",: Probability = 1.00, Count = 1
"cloudphoto", -> "cloudphoto": Probability = 1.00, Count = 51
"openAPI" -> ): Probability = 0.50, Count = 134
"openAPI" -> ;: Probability = 0.50, Count = 134
"openAPI" -> setMethod: Probability = 0.00, Count = 1
Protocol -> setProtocol: Probability = 0.56, Count = 85
Protocol -> (: Probability = 0.38, Count = 58
Protocol -> ProtocolType.HTTPS: Probability = 0.07, Count = 10
ProtocolType.HTTPS -> ProtocolType.HTTPS: Probability = 0.46, Count = 75
ProtocolType.HTTPS -> ): Probability = 0.53, Count = 86
ProtocolType.HTTPS -> MethodType.POST: Probability = 0.01, Count = 1
contains -> @Override: Probability = 0.21, Count = 8
contains -> contains: Probability = 0.79, Count = 31
virtual -> public: Probability = 0.54, Count = 39
virtual -> (: Probability = 0.17, Count = 12
virtual -> Cluster: Probability = 0.03, Count = 2
virtual -> boolean: Probability = 0.01, Count = 1
virtual -> void: Probability = 0.22, Count = 16
virtual -> synchronized: Probability = 0.01, Count = 1
virtual -> String: Probability = 0.01, Count = 1
@object -> object: Probability = 0.94, Count = 121
@object -> Object[]: Probability = 0.02, Count = 2
@object -> array: Probability = 0.02, Count = 2
@object -> size: Probability = 0.02, Count = 3
@object -> object,: Probability = 0.01, Count = 1
mutex -> mutex: Probability = 0.69, Count = 27
mutex -> delegate: Probability = 0.31, Count = 12
c.contains -> c.contains: Probability = 0.67, Count = 2
c.contains -> .contains: Probability = 0.33, Count = 1
java.nio.CharBuffer -> CharBuffer: Probability = 1.00, Count = 51
src, -> src,: Probability = 1.00, Count = 53
srcOffset, -> srcOffset,: Probability = 1.00, Count = 44
charCount -> charCount: Probability = 1.00, Count = 30
remaining -> remaining: Probability = 1.00, Count = 81
java.nio.BufferOverflowException -> BufferOverflowException: Probability = 1.00, Count = 28
backingArray, -> backingArray,: Probability = 0.92, Count = 48
backingArray, -> offset: Probability = 0.02, Count = 1
backingArray, -> +: Probability = 0.02, Count = 1
backingArray, -> position,: Probability = 0.02, Count = 1
backingArray, -> order: Probability = 0.02, Count = 1
_position, -> position,: Probability = 0.95, Count = 19
_position, -> this.buffer,: Probability = 0.05, Count = 1
_position -> position: Probability = 1.00, Count = 144
+= -> +=: Probability = 0.94, Count = 271
+= -> -=: Probability = 0.00, Count = 1
+= -> stats[i].numGoodPoints: Probability = 0.00, Count = 1
+= -> stats[i].numPoints: Probability = 0.00, Count = 1
+= -> stats[i].getAvp: Probability = 0.00, Count = 1
+= -> stats[i].recall: Probability = 0.00, Count = 1
+= -> size: Probability = 0.00, Count = 1
+= -> ;: Probability = 0.00, Count = 1
+= -> TaskStats: Probability = 0.00, Count = 1
+= -> stat2: Probability = 0.00, Count = 1
+= -> numRuns: Probability = 0.00, Count = 1
+= -> stat2.getNumRuns: Probability = 0.00, Count = 1
+= -> stat2.getElapsed: Probability = 0.00, Count = 1
+= -> maxTotMem: Probability = 0.00, Count = 1
+= -> stat2.getMaxTotMem: Probability = 0.00, Count = 1
+= -> maxUsedMem: Probability = 0.00, Count = 1
+= -> stat2.getMaxUsedMem: Probability = 0.00, Count = 1
+= -> stat2.getCount: Probability = 0.00, Count = 1
LegendRecord -> LegendRecord: Probability = 1.00, Count = 1
field_1_xAxisUpperLeft -> field_1_xAxisUpperLeft: Probability = 1.00, Count = 2
field_2_yAxisUpperLeft -> field_2_yAxisUpperLeft: Probability = 1.00, Count = 2
field_3_xSize -> field_3_xSize: Probability = 1.00, Count = 2
field_4_ySize -> field_4_ySize: Probability = 1.00, Count = 2
field_5_type -> field_5_type: Probability = 1.00, Count = 2
field_6_spacing -> field_6_spacing: Probability = 1.00, Count = 2
field_7_options -> field_7_options: Probability = 1.00, Count = 2
typeCode -> encodedTypeString: Probability = 0.12, Count = 1
typeCode -> typeCode: Probability = 0.75, Count = 6
typeCode -> typeString: Probability = 0.12, Count = 1
default: -> default:throw: Probability = 0.73, Count = 8
default: -> default: Probability = 0.27, Count = 3
MessageFormat.Format -> MessageFormat.format: Probability = 1.00, Count = 39
JGitText.Get -> JGitText.get: Probability = 0.99, Count = 80
JGitText.Get -> NotSupportedException: Probability = 0.01, Count = 1
.badObjectType, -> .badObjectType,: Probability = 1.00, Count = 2
Sharpen.Extensions.ValueOf -> Integer.valueOf: Probability = 0.78, Count = 7
Sharpen.Extensions.ValueOf -> MAX_BUF: Probability = 0.22, Count = 2
ObjectId -> ObjectId: Probability = 0.98, Count = 49
ObjectId -> ObjectId.class: Probability = 0.02, Count = 1
GetCalulatedPatchId -> getCalulatedPatchId: Probability = 1.00, Count = 1
ObjectId.FromRaw -> ObjectId.fromRaw: Probability = 1.00, Count = 2
digest.Digest -> digest.digest: Probability = 1.00, Count = 1
DefaultRowHeightRecord -> DefaultRowHeightRecord: Probability = 1.00, Count = 2
field_1_option_flags -> field_1_option_flags: Probability = 1.00, Count = 2
0x0000 -> 0x0000: Probability = 1.00, Count = 1
field_2_row_height -> field_2_row_height: Probability = 1.00, Count = 2
DEFAULT_ROW_HEIGHT -> DEFAULT_ROW_HEIGHT: Probability = 1.00, Count = 1
encode -> encode: Probability = 1.00, Count = 4
buffer -> buffer: Probability = 0.98, Count = 166
buffer -> new: Probability = 0.01, Count = 2
buffer -> =: Probability = 0.01, Count = 1
newEncoder -> newEncoder: Probability = 1.00, Count = 1
java.nio.charset.CodingErrorAction.REPLACE -> .onMalformedInput: Probability = 0.20, Count = 1
java.nio.charset.CodingErrorAction.REPLACE -> CodingErrorAction.REPLACE: Probability = 0.40, Count = 2
java.nio.charset.CodingErrorAction.REPLACE -> .onUnmappableCharacter: Probability = 0.20, Count = 1
java.nio.charset.CodingErrorAction.REPLACE -> .encode: Probability = 0.20, Count = 1
ex -> ex: Probability = 0.60, Count = 6
ex -> ex.getMessage: Probability = 0.10, Count = 1
ex -> tmp: Probability = 0.20, Count = 2
ex -> IOUtils.readFully: Probability = 0.10, Count = 1
sealed -> final: Probability = 1.00, Count = 67
java.nio.FloatBuffer -> FloatBuffer: Probability = 1.00, Count = 32
get -> get: Probability = 1.00, Count = 97
float[] -> float[]: Probability = 0.82, Count = 23
float[] -> double[]: Probability = 0.14, Count = 4
float[] -> byte[]: Probability = 0.04, Count = 1
dst, -> dst,: Probability = 1.00, Count = 47
dstOffset, -> dstOffset,: Probability = 1.00, Count = 38
floatCount -> floatCount: Probability = 1.00, Count = 27
java.nio.BufferUnderflowException -> BufferUnderflowException: Probability = 1.00, Count = 28
hasNext -> hasNext: Probability = 0.91, Count = 10
hasNext -> "At: Probability = 0.09, Count = 1
this._nextEntry -> nextEntry: Probability = 0.50, Count = 1
this._nextEntry -> nextExternal: Probability = 0.50, Count = 1
DeleteNatGatewayResponse -> DeleteNatGatewayResult: Probability = 1.00, Count = 1
DeleteNatGateway -> deleteNatGateway: Probability = 1.00, Count = 1
DeleteNatGatewayRequest -> DeleteNatGatewayRequest: Probability = 1.00, Count = 1
Invoke<DeleteNatGatewayResponse> -> executeDeleteNatGateway: Probability = 1.00, Count = 1
ResolveNameXText -> resolveNameXText: Probability = 1.00, Count = 3
reFindex, -> refIndex,: Probability = 1.00, Count = 2
definedNameIndex -> definedNameIndex: Probability = 0.92, Count = 11
definedNameIndex -> _externalBookBlocks[i].getIndexOfName: Probability = 0.08, Count = 1
linkTable.ResolveNameXText -> linkTable.resolveNameXText: Probability = 1.00, Count = 2
definedNameIndex, -> definedNameIndex,: Probability = 1.00, Count = 2
SetMultiFields -> setMultiFields: Probability = 1.00, Count = 1
fields -> fields: Probability = 0.96, Count = 25
fields -> CharSequence[0]: Probability = 0.04, Count = 1
QueryConfigHandler.Set -> getQueryConfigHandler: Probability = 0.50, Count = 2
QueryConfigHandler.Set -> .set: Probability = 0.50, Count = 2
ConfigurationKeys.MULTI_FIELDS, -> ConfigurationKeys.MULTI_FIELDS,: Probability = 1.00, Count = 1
IsCancelled -> isCancelled: Probability = 1.00, Count = 2
Lock.Lock -> lock.lock: Probability = 1.00, Count = 1
pm.IsCancelled -> pm.isCancelled: Probability = 1.00, Count = 1
finally -> finally: Probability = 1.00, Count = 35
Lock.Unlock -> lock.unlock: Probability = 1.00, Count = 1
RemoveTargetsResponse -> RemoveTargetsResult: Probability = 1.00, Count = 1
RemoveTargets -> removeTargets: Probability = 1.00, Count = 1
RemoveTargetsRequest -> RemoveTargetsRequest: Probability = 1.00, Count = 1
Invoke<RemoveTargetsResponse> -> executeRemoveTargets: Probability = 1.00, Count = 1
FuzzyQuery -> FuzzyQuery: Probability = 1.00, Count = 3
Term -> Term: Probability = 0.95, Count = 21
Term -> term: Probability = 0.05, Count = 1
maxEdits -> maxEdits: Probability = 0.75, Count = 6
maxEdits -> LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE: Probability = 0.25, Count = 2
must -> must: Probability = 0.97, Count = 98
must -> be: Probability = 0.01, Count = 1
must -> IllegalArgumentException: Probability = 0.02, Count = 2
be -> be: Probability = 0.90, Count = 128
be -> must: Probability = 0.06, Count = 9
be -> IllegalArgumentException: Probability = 0.01, Count = 1
be -> !type.tokenized: Probability = 0.01, Count = 2
be -> and: Probability = 0.01, Count = 2
between -> between: Probability = 0.50, Count = 5
between -> ": Probability = 0.20, Count = 2
between -> +: Probability = 0.30, Count = 3
and -> and: Probability = 1.00, Count = 19
prefixLength -> prefixLength: Probability = 1.00, Count = 9
cannot -> cannot: Probability = 0.79, Count = 15
cannot -> IllegalArgumentException: Probability = 0.11, Count = 2
cannot -> "name: Probability = 0.11, Count = 2
maxExpansions -> maxExpansions: Probability = 0.44, Count = 4
maxExpansions -> this.automata: Probability = 0.22, Count = 2
maxExpansions -> MultiTermQuery.TopTermsBlendedFreqScoringRewrite: Probability = 0.11, Count = 1
maxExpansions -> this.ramBytesUsed: Probability = 0.11, Count = 1
maxExpansions -> calculateRamBytesUsed: Probability = 0.11, Count = 1
term -> this.term: Probability = 0.05, Count = 2
term -> term: Probability = 0.80, Count = 33
term -> Objects.requireNonNull: Probability = 0.02, Count = 1
term -> never: Probability = 0.02, Count = 1
term -> throws: Probability = 0.10, Count = 4
CheckoutCommand -> CheckoutCommand: Probability = 1.00, Count = 2
Checkout -> checkout: Probability = 1.00, Count = 1
repo -> repo: Probability = 0.93, Count = 74
repo -> paths: Probability = 0.03, Count = 2
repo -> Repository: Probability = 0.01, Count = 1
repo -> this.repo: Probability = 0.01, Count = 1
repo -> new: Probability = 0.01, Count = 1
repo -> PackConfig: Probability = 0.01, Count = 1
sheetName, -> sheetName,: Probability = 1.00, Count = 11
rowIndex, -> rowIndex,: Probability = 0.97, Count = 29
rowIndex, -> getSheet: Probability = 0.03, Count = 1
columnIndex -> columnIndex: Probability = 0.89, Count = 50
columnIndex -> 0x7FFF: Probability = 0.02, Count = 1
columnIndex -> _lastDefinedRow: Probability = 0.04, Count = 2
columnIndex -> rowIndex: Probability = 0.02, Count = 1
columnIndex -> _currentRectangleGroup.containsCell: Probability = 0.02, Count = 1
columnIndex -> columnIndex+: Probability = 0.02, Count = 1
IEvaluationCell -> EvaluationCell: Probability = 1.00, Count = 8
cell.CellType -> cell.getCellType: Probability = 1.00, Count = 4
BoolEval.ValueOf -> BoolEval.valueOf: Probability = 1.00, Count = 4
CellType.String:return -> STRING:return: Probability = 1.00, Count = 3
InvalidOperationException -> IllegalStateException: Probability = 1.00, Count = 68
"Bad -> "Bad: Probability = 1.00, Count = 5
type -> type: Probability = 0.95, Count = 79
type -> this.type: Probability = 0.02, Count = 2
type -> imap.get: Probability = 0.01, Count = 1
type -> .getType: Probability = 0.01, Count = 1
PutFileSystemPolicyResponse -> PutFileSystemPolicyResult: Probability = 1.00, Count = 1
PutFileSystemPolicy -> putFileSystemPolicy: Probability = 1.00, Count = 1
PutFileSystemPolicyRequest -> PutFileSystemPolicyRequest: Probability = 1.00, Count = 1
Invoke<PutFileSystemPolicyResponse> -> executePutFileSystemPolicy: Probability = 1.00, Count = 1
FileLength -> fileLength: Probability = 1.00, Count = 2
name -> name: Probability = 0.89, Count = 188
name -> entries.get: Probability = 0.01, Count = 2
name -> property.getName: Probability = 0.00, Count = 1
name -> _children_names.contains: Probability = 0.00, Count = 1
name -> "Duplicate: Probability = 0.00, Count = 1
name -> _children_names.add: Probability = 0.00, Count = 1
name -> this.name: Probability = 0.01, Count = 3
name -> _byname.containsKey: Probability = 0.01, Count = 3
name -> loose.get: Probability = 0.01, Count = 3
name -> \"": Probability = 0.01, Count = 2
name -> fileLength: Probability = 0.00, Count = 1
name -> _funcMap.put: Probability = 0.00, Count = 1
name -> idx,: Probability = 0.00, Count = 1
name -> packed.get: Probability = 0.00, Count = 1
name -> resolved.get: Probability = 0.01, Count = 2
name -> _definedNames.add: Probability = 0.00, Count = 1
EnsureOpen -> throws: Probability = 0.29, Count = 8
EnsureOpen -> IOException: Probability = 0.29, Count = 8
EnsureOpen -> ensureOpen: Probability = 0.43, Count = 12
FileNotFoundException -> FileNotFoundException: Probability = 1.00, Count = 4
e.Length -> e.length: Probability = 1.00, Count = 2
DescribeCacheClustersResponse -> DescribeCacheClustersResult: Probability = 1.00, Count = 1
DescribeCacheClusters -> describeCacheClusters: Probability = 1.00, Count = 2
DescribeCacheClustersRequest -> DescribeCacheClustersRequest: Probability = 1.00, Count = 1
SetObjectId -> setObjectId: Probability = 1.00, Count = 9
RevObject -> RevObject: Probability = 0.93, Count = 13
RevObject -> lookupAny: Probability = 0.07, Count = 1
obj, -> obj,: Probability = 1.00, Count = 2
obj.Type -> obj.getType: Probability = 1.00, Count = 1
RowHasCells -> rowHasCells: Probability = 1.00, Count = 1
row -> row: Probability = 0.79, Count = 46
row -> removeRow: Probability = 0.03, Count = 2
row -> sheet": Probability = 0.05, Count = 3
row -> _rowRecords.put: Probability = 0.03, Count = 2
row -> rowIx=startRow: Probability = 0.02, Count = 1
row -> rowIx<=endRow: Probability = 0.02, Count = 1
row -> rowIx<records.length: Probability = 0.02, Count = 1
row -> rowIx++: Probability = 0.02, Count = 1
row -> getRowSerializedSize: Probability = 0.02, Count = 1
records.Length -> records.length: Probability = 1.00, Count = 3
rowCells -> CellValueRecordInterface[]: Probability = 0.33, Count = 3
rowCells -> rowCells=records[row]: Probability = 0.11, Count = 1
rowCells -> rowCells==null: Probability = 0.11, Count = 1
rowCells -> rowCells: Probability = 0.44, Count = 4
col -> col=0: Probability = 0.05, Count = 1
col -> col<rowCells.length: Probability = 0.05, Count = 1
col -> col++: Probability = 0.10, Count = 2
col -> col: Probability = 0.70, Count = 14
col -> .setActiveCellRow: Probability = 0.05, Count = 1
col -> .setActiveCellCol: Probability = 0.05, Count = 1
TokenStream -> TokenStream: Probability = 0.96, Count = 177
TokenStream -> TokenFilter: Probability = 0.04, Count = 7
TokenStream -> map.fst: Probability = 0.01, Count = 1
input -> input: Probability = 0.88, Count = 174
input -> in: Probability = 0.07, Count = 14
input -> SynonymFilter: Probability = 0.01, Count = 1
input -> new: Probability = 0.01, Count = 1
input -> input,: Probability = 0.02, Count = 4
input -> Reader: Probability = 0.01, Count = 1
input -> TokenStream: Probability = 0.01, Count = 1
input -> super: Probability = 0.01, Count = 1
input -> normalizer: Probability = 0.01, Count = 1
SpanishLightStemFilter -> SpanishLightStemFilter: Probability = 1.00, Count = 1
StoredField -> StoredField: Probability = 1.00, Count = 10
name, -> name,: Probability = 0.92, Count = 116
name, -> double: Probability = 0.03, Count = 4
name, -> defaultValue: Probability = 0.02, Count = 2
name, -> name: Probability = 0.02, Count = 3
name, -> getOrCreateLinkTable: Probability = 0.01, Count = 1
FieldsData -> TYPE: Probability = 0.44, Count = 11
FieldsData -> fieldsData: Probability = 0.56, Count = 14
Int32 -> fieldsData: Probability = 1.00, Count = 4
DescribePublicIpv4PoolsResponse -> DescribePublicIpv4PoolsResult: Probability = 1.00, Count = 1
DescribePublicIpv4Pools -> describePublicIpv4Pools: Probability = 1.00, Count = 1
DescribePublicIpv4PoolsRequest -> DescribePublicIpv4PoolsRequest: Probability = 1.00, Count = 1
Invoke<DescribePublicIpv4PoolsResponse> -> executeDescribePublicIpv4Pools: Probability = 1.00, Count = 1
IndexRevision -> IndexRevision: Probability = 0.60, Count = 3
IndexRevision -> o: Probability = 0.40, Count = 2
IndexWriter -> IndexWriter: Probability = 1.00, Count = 9
writer -> writer: Probability = 1.00, Count = 14
sdp -> IndexDeletionPolicy: Probability = 0.25, Count = 1
sdp -> delPolicy: Probability = 0.50, Count = 2
sdp -> writer.getConfig: Probability = 0.25, Count = 1
as -> (: Probability = 0.33, Count = 4
as -> ): Probability = 0.17, Count = 2
as -> instanceof: Probability = 0.50, Count = 6
SnapshotDeletionPolicy -> .getIndexDeletionPolicy: Probability = 0.50, Count = 2
SnapshotDeletionPolicy -> delPolicy: Probability = 0.50, Count = 2
"IndexWriter -> SnapshotDeletionPolicy: Probability = 0.67, Count = 4
"IndexWriter -> delPolicy: Probability = 0.33, Count = 2
created -> "IndexWriter: Probability = 0.40, Count = 2
created -> created: Probability = 0.60, Count = 3
SnapshotDeletionPolicy", -> SnapshotDeletionPolicy": Probability = 1.00, Count = 2
RevisionVersion -> revisionVersion: Probability = 1.00, Count = 4
commit -> commit: Probability = 0.93, Count = 27
commit -> AnyObjectId: Probability = 0.03, Count = 1
commit -> commit.getName: Probability = 0.03, Count = 1
RevisionFiles -> this.sourceFiles: Probability = 0.50, Count = 2
RevisionFiles -> revisionFiles: Probability = 0.50, Count = 2
SetTabIdArray -> setTabIdArray: Probability = 1.00, Count = 1
short[] -> short[]: Probability = 0.81, Count = 29
short[] -> long[]: Probability = 0.06, Count = 2
short[] -> int[]: Probability = 0.08, Count = 3
short[] -> float[]: Probability = 0.06, Count = 2
array -> array: Probability = 0.92, Count = 79
array -> byte[]: Probability = 0.01, Count = 1
array -> float[]: Probability = 0.01, Count = 1
array -> int[]: Probability = 0.01, Count = 1
array -> oversize: Probability = 0.01, Count = 1
array -> char[]: Probability = 0.01, Count = 1
array -> short[]: Probability = 0.01, Count = 1
array -> long[]: Probability = 0.01, Count = 1
_tabids -> _tabids: Probability = 0.67, Count = 4
_tabids -> array.clone: Probability = 0.17, Count = 1
_tabids -> nTabs: Probability = 0.17, Count = 1
UpdateObjectAttributesResponse -> UpdateObjectAttributesResult: Probability = 1.00, Count = 1
UpdateObjectAttributes -> updateObjectAttributes: Probability = 1.00, Count = 1
UpdateObjectAttributesRequest -> UpdateObjectAttributesRequest: Probability = 1.00, Count = 1
Invoke<UpdateObjectAttributesResponse> -> executeUpdateObjectAttributes: Probability = 1.00, Count = 1
GetGameSessionLogUrlResponse -> GetGameSessionLogUrlResult: Probability = 1.00, Count = 1
GetGameSessionLogUrl -> getGameSessionLogUrl: Probability = 1.00, Count = 1
GetGameSessionLogUrlRequest -> GetGameSessionLogUrlRequest: Probability = 1.00, Count = 1
Invoke<GetGameSessionLogUrlResponse> -> executeGetGameSessionLogUrl: Probability = 1.00, Count = 1
RefCount -> RefCount: Probability = 1.00, Count = 3
T -> T: Probability = 0.84, Count = 43
T -> final: Probability = 0.10, Count = 5
T -> insertWithOverflow: Probability = 0.02, Count = 1
T -> outputs.add: Probability = 0.04, Count = 2
this.m_object -> this.object: Probability = 1.00, Count = 1
checkIndex -> checkIndex: Probability = 1.00, Count = 27
backingArray[offset -> backingArray[offset: Probability = 1.00, Count = 26
index] -> index]: Probability = 1.00, Count = 14
IntervalSet -> IntervalSet: Probability = 0.83, Count = 19
IntervalSet -> LOOK: Probability = 0.04, Count = 1
IntervalSet -> seeThruPreds: Probability = 0.09, Count = 2
IntervalSet -> nextTokens: Probability = 0.04, Count = 1
s, -> s,: Probability = 0.75, Count = 91
s, -> s[],: Probability = 0.20, Count = 24
s, -> suffixes[i]: Probability = 0.02, Count = 2
s, -> char: Probability = 0.02, Count = 2
s, -> endsWithCheckLength: Probability = 0.01, Count = 1
s, -> startsWithCheckLength: Probability = 0.01, Count = 1
s, -> "я": Probability = 0.01, Count = 1
stopState, -> stopState,: Probability = 1.00, Count = 2
RuleContext -> RuleContext: Probability = 1.00, Count = 12
r -> r: Probability = 0.83, Count = 154
r -> r,: Probability = 0.01, Count = 1
r -> final: Probability = 0.07, Count = 13
r -> r.length: Probability = 0.01, Count = 2
r -> TYPE_MALFORMED_INPUT,: Probability = 0.01, Count = 1
r -> _malformedErrors.put: Probability = 0.01, Count = 1
r -> "Length: Probability = 0.01, Count = 2
r -> nextRecord: Probability = 0.01, Count = 1
r -> getNextUnreadRecord: Probability = 0.01, Count = 1
r -> _recStream.nextRecord: Probability = 0.01, Count = 1
r -> readNextRecord: Probability = 0.01, Count = 1
r -> TYPE_UNMAPPABLE_CHAR,: Probability = 0.01, Count = 1
r -> _unmappableErrors.put: Probability = 0.01, Count = 1
r -> infixToString: Probability = 0.01, Count = 1
r -> prefixToString: Probability = 0.01, Count = 1
r -> weightToString: Probability = 0.01, Count = 1
r -> Constants.OBJ_COMMIT:r: Probability = 0.01, Count = 1
r -> Constants.OBJ_TREE:r: Probability = 0.01, Count = 1
r -> Constants.OBJ_BLOB:r: Probability = 0.01, Count = 1
Look -> _LOOK: Probability = 1.00, Count = 2
HashSet<ATNConfig> -> HashSet<ATNConfig>: Probability = 1.00, Count = 2
, -> ,: Probability = 0.96, Count = 176
, -> ,0: Probability = 0.01, Count = 1
, -> files=%d,: Probability = 0.01, Count = 1
, -> merges=%d,: Probability = 0.01, Count = 1
, -> soft: Probability = 0.01, Count = 1
, -> ram: Probability = 0.01, Count = 1
, -> limit=%.2f: Probability = 0.01, Count = 1
, -> MB",totalTimeMS: Probability = 0.01, Count = 1
, -> readTimeMS: Probability = 0.01, Count = 1
BitSet -> BitSet: Probability = 0.88, Count = 14
BitSet -> viableAlts: Probability = 0.06, Count = 1
BitSet -> getAlts: Probability = 0.06, Count = 1
seeThruPreds, -> seeThruPreds,: Probability = 1.00, Count = 2
GetValidationType -> getValidationType: Probability = 1.00, Count = 1
_validationType -> _validationType: Probability = 1.00, Count = 1
DeleteTagCommand -> DeleteTagCommand: Probability = 1.00, Count = 2
TagDelete -> tagDelete: Probability = 1.00, Count = 1
SortRescorer -> SortRescorer: Probability = 1.00, Count = 1
Sort -> Sort: Probability = 0.53, Count = 10
Sort -> sort: Probability = 0.47, Count = 9
sort -> sort: Probability = 1.00, Count = 4
this.sort -> this.sort: Probability = 1.00, Count = 1
VerifyBelongsToWorkbook -> verifyBelongsToWorkbook: Probability = 1.00, Count = 1
HSSFWorkbook -> HSSFWorkbook: Probability = 0.80, Count = 4
HSSFWorkbook -> _sheet,: Probability = 0.20, Count = 1
wb -> wb: Probability = 1.00, Count = 4
wb.Workbook -> wb.getWorkbook: Probability = 1.00, Count = 1
_workbook -> _workbook: Probability = 1.00, Count = 3
"This -> "This: Probability = 1.00, Count = 2
to -> Style: Probability = 0.01, Count = 1
to -> to: Probability = 0.89, Count = 94
to -> Workbook.: Probability = 0.01, Count = 1
to -> Are: Probability = 0.01, Count = 1
to -> trying: Probability = 0.01, Count = 1
to -> assign: Probability = 0.01, Count = 1
to -> not: Probability = 0.02, Count = 2
to -> "from=": Probability = 0.02, Count = 2
to -> to=": Probability = 0.02, Count = 2
to -> slice.expectedElements,: Probability = 0.01, Count = 1
does -> does: Probability = 1.00, Count = 19
not -> not: Probability = 0.96, Count = 103
not -> to: Probability = 0.01, Count = 1
not -> should: Probability = 0.01, Count = 1
not -> be: Probability = 0.01, Count = 1
not -> called": Probability = 0.01, Count = 1
belong -> belong: Probability = 1.00, Count = 5
the -> the: Probability = 1.00, Count = 36
supplied -> supplied: Probability = 1.00, Count = 3
you -> you: Probability = 1.00, Count = 4
style -> style: Probability = 0.62, Count = 8
style -> CellStyle: Probability = 0.08, Count = 1
style -> .createRichTextString: Probability = 0.15, Count = 2
style -> cell.setCellStyle: Probability = 0.15, Count = 2
from -> from: Probability = 1.00, Count = 34
one -> one: Probability = 1.00, Count = 12
workbook -> workbook: Probability = 1.00, Count = 10
of -> of: Probability = 0.78, Count = 46
of -> ": Probability = 0.03, Count = 2
of -> +: Probability = 0.03, Count = 2
of -> out: Probability = 0.15, Count = 9
differnt -> differnt: Probability = 1.00, Count = 1
workbook?" -> workbook?": Probability = 1.00, Count = 1
insert -> insert: Probability = 1.00, Count = 23
"null" -> "null": Probability = 1.00, Count = 14
obj.ToString -> obj.toString: Probability = 1.00, Count = 6
ContainsKey -> containsKey: Probability = 1.00, Count = 7
ICharSequence -> CharSequence: Probability = 1.00, Count = 12
text -> cs: Probability = 0.10, Count = 6
text -> text: Probability = 0.83, Count = 52
text -> o: Probability = 0.08, Count = 5
"text" -> NullPointerException: Probability = 1.00, Count = 7
CompareTo -> compareTo: Probability = 0.85, Count = 34
CompareTo -> other: Probability = 0.07, Count = 3
CompareTo -> Revision: Probability = 0.03, Count = 1
CompareTo -> o: Probability = 0.05, Count = 2
HSSFRichTextString -> HSSFRichTextString: Probability = 1.00, Count = 8
_string.CompareTo -> _string.compareTo: Probability = 1.00, Count = 1
other._string -> r._string: Probability = 1.00, Count = 1
RequestSpotInstancesRequest -> RequestSpotInstancesRequest: Probability = 1.00, Count = 1
spotPrice -> spotPrice: Probability = 1.00, Count = 2
_spotPrice -> setSpotPrice: Probability = 1.00, Count = 1
GetNewObjectId -> getNewObjectId: Probability = 1.00, Count = 2
newObjectId -> newObjectId: Probability = 1.00, Count = 4
SetDeltaBaseAsOffset -> setDeltaBaseAsOffset: Probability = 1.00, Count = 1
deltaBaseAsOffset -> deltaBaseAsOffset: Probability = 1.00, Count = 2
this.deltaBaseAsOffset -> this.deltaBaseAsOffset: Probability = 1.00, Count = 1
LengthFilterFactory -> LengthFilterFactory: Probability = 1.00, Count = 1
IDictionary<string, -> Map<String,: Probability = 0.21, Count = 25
IDictionary<string, -> Map<String,String>: Probability = 0.79, Count = 93
string> -> String>: Probability = 0.78, Count = 21
string> -> get: Probability = 0.11, Count = 3
string> -> !args.isEmpty: Probability = 0.04, Count = 1
string> -> args: Probability = 0.04, Count = 1
string> -> super: Probability = 0.04, Count = 1
min -> min: Probability = 0.85, Count = 23
min -> suffixes[]: Probability = 0.04, Count = 1
min -> this.rules: Probability = 0.04, Count = 1
min -> r.min: Probability = 0.04, Count = 1
min -> r.suffix.length: Probability = 0.04, Count = 1
RequireInt32 -> requireInt: Probability = 0.75, Count = 6
RequireInt32 -> MIN_KEY: Probability = 0.25, Count = 2
args, -> args,: Probability = 0.71, Count = 158
args, -> getBoolean: Probability = 0.01, Count = 2
args, -> "preserveOriginal",: Probability = 0.01, Count = 2
args, -> "outputUnigrams",: Probability = 0.01, Count = 2
args, -> args.remove: Probability = 0.03, Count = 6
args, -> discardPunctuation: Probability = 0.00, Count = 1
args, -> DISCARD_PUNCTUATION,: Probability = 0.00, Count = 1
args, -> discardCompoundToken: Probability = 0.00, Count = 1
args, -> DISCARD_COMPOUND_TOKEN,: Probability = 0.00, Count = 1
args, -> nbestCost: Probability = 0.00, Count = 1
args, -> getInt: Probability = 0.00, Count = 1
args, -> NBEST_COST,: Probability = 0.00, Count = 1
args, -> "types": Probability = 0.00, Count = 1
args, -> "useWhitelist",: Probability = 0.00, Count = 1
args, -> "articles": Probability = 0.00, Count = 1
args, -> minWordSize: Probability = 0.01, Count = 2
args, -> "minWordSize",: Probability = 0.01, Count = 2
args, -> CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE: Probability = 0.01, Count = 2
args, -> minSubwordSize: Probability = 0.01, Count = 2
args, -> CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE: Probability = 0.01, Count = 2
args, -> maxSubwordSize: Probability = 0.01, Count = 2
args, -> "maxSubwordSize",: Probability = 0.01, Count = 2
args, -> CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE: Probability = 0.01, Count = 2
args, -> "onlyLongestMatch",: Probability = 0.01, Count = 2
args, -> "tags": Probability = 0.00, Count = 1
args, -> "replace",: Probability = 0.01, Count = 2
args, -> "reverse",: Probability = 0.00, Count = 1
args, -> "skip",: Probability = 0.00, Count = 1
args, -> PathHierarchyTokenizer.DEFAULT_SKIP: Probability = 0.00, Count = 1
args, -> MAX_TOKEN_POSITION_KEY: Probability = 0.00, Count = 1
args, -> PARAM_DICTIONARY: Probability = 0.00, Count = 1
args, -> PARAM_AFFIX: Probability = 0.00, Count = 1
args, -> PARAM_IGNORE_CASE,: Probability = 0.00, Count = 1
args, -> PARAM_LONGEST_ONLY,: Probability = 0.00, Count = 1
args, -> "strictAffixParsing",: Probability = 0.00, Count = 1
args, -> "recursionCap",: Probability = 0.00, Count = 1
args, -> "replacement": Probability = 0.00, Count = 1
args, -> MAX_WORD_COUNT,: Probability = 0.00, Count = 1
args, -> CapitalizationFilter.DEFAULT_MAX_WORD_COUNT: Probability = 0.00, Count = 1
args, -> MAX_TOKEN_LENGTH,: Probability = 0.00, Count = 1
args, -> CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH: Probability = 0.00, Count = 1
args, -> onlyFirstWord: Probability = 0.00, Count = 1
args, -> ONLY_FIRST_WORD,: Probability = 0.00, Count = 1
args, -> forceFirstLetter: Probability = 0.00, Count = 1
args, -> FORCE_FIRST_LETTER,: Probability = 0.00, Count = 1
args, -> "encoding": Probability = 0.00, Count = 1
args, -> "hyphenator": Probability = 0.00, Count = 1
args, -> args: Probability = 0.00, Count = 1
args, -> stringPattern: Probability = 0.00, Count = 1
max -> max: Probability = 0.50, Count = 30
max -> collectionStats.docCount: Probability = 0.03, Count = 2
max -> df,: Probability = 0.07, Count = 4
max -> idf,: Probability = 0.07, Count = 4
max -> "idf,: Probability = 0.03, Count = 2
max -> 0.5: Probability = 0.03, Count = 2
max -> docCount,: Probability = 0.03, Count = 2
max -> stat: Probability = 0.07, Count = 4
max -> subs.add: Probability = 0.02, Count = 1
max -> "idf: Probability = 0.03, Count = 2
max -> of:",: Probability = 0.03, Count = 2
max -> details: Probability = 0.03, Count = 2
max -> details.add: Probability = 0.02, Count = 1
max -> R.id.progress,: Probability = 0.02, Count = 1
max -> mProgress,: Probability = 0.02, Count = 1
MAX_KEY -> MAX_KEY: Probability = 1.00, Count = 2
args.Count -> !args.isEmpty: Probability = 1.00, Count = 94
"Unknown -> "Unknown: Probability = 1.00, Count = 107
parameters: -> parameters:: Probability = 1.00, Count = 99
TruncateTokenFilter -> TruncateTokenFilter: Probability = 1.00, Count = 2
input, -> input,: Probability = 0.92, Count = 73
input, -> in,: Probability = 0.08, Count = 6
"length -> "length: Probability = 1.00, Count = 4
parameter -> parameter: Probability = 1.00, Count = 8
positive -> positive: Probability = 0.57, Count = 17
positive -> 0:: Probability = 0.43, Count = 13
number: -> number:: Probability = 1.00, Count = 3
this.length -> this.length: Probability = 0.75, Count = 6
this.length -> length: Probability = 0.25, Count = 2
ListDomainsResponse -> ListDomainsResult: Probability = 0.67, Count = 2
ListDomainsResponse -> DomainInfos: Probability = 0.33, Count = 1
ListDomains -> listDomains: Probability = 1.00, Count = 4
ListDomainsRequest -> ListDomainsRequest: Probability = 1.00, Count = 3
ArabicStemFilter -> ArabicStemFilter: Probability = 1.00, Count = 2
NGit.Api.PushCommand -> PushCommand: Probability = 1.00, Count = 12
SetRefSpecs -> setRefSpecs: Probability = 0.75, Count = 3
SetRefSpecs -> List<RefSpec>: Probability = 0.25, Count = 1
IList<RefSpec> -> RefSpec...: Probability = 0.33, Count = 1
IList<RefSpec> -> List<RefSpec>: Probability = 0.67, Count = 2
specs -> specs: Probability = 1.00, Count = 7
this.refSpecs.Clear -> this.refSpecs.clear: Probability = 1.00, Count = 3
this.refSpecs, -> refSpecs,: Probability = 1.00, Count = 1
NGit.Blame.BlameGenerator -> BlameGenerator: Probability = 1.00, Count = 3
SetDiffAlgorithm -> setDiffAlgorithm: Probability = 1.00, Count = 3
DiffAlgorithm -> DiffAlgorithm: Probability = 1.00, Count = 5
algorithm -> algorithm: Probability = 1.00, Count = 2
diffAlgorithm -> diffAlgorithm: Probability = 1.00, Count = 6
GroupingSearch -> GroupingSearch: Probability = 1.00, Count = 8
SetIncludeMaxScore -> setIncludeMaxScore: Probability = 1.00, Count = 1
includeMaxScore -> includeMaxScore: Probability = 1.00, Count = 2
this.includeMaxScore -> this.includeMaxScore: Probability = 1.00, Count = 1
Field[] -> Field[]: Probability = 1.00, Count = 2
CreateIndexableFields -> createIndexableFields: Probability = 1.00, Count = 4
IShape -> Shape: Probability = 1.00, Count = 5
shape -> shape: Probability = 0.93, Count = 62
shape -> shape.setPictureIndex: Probability = 0.03, Count = 2
shape -> args.getOperation: Probability = 0.03, Count = 2
shape -> Shape: Probability = 0.01, Count = 1
distErr -> distErr: Probability = 1.00, Count = 2
SpatialArgs.CalcDistanceFromErrPct -> SpatialArgs.calcDistanceFromErrPct: Probability = 1.00, Count = 1
shape, -> shape,: Probability = 0.67, Count = 2
shape, -> distErrPct,: Probability = 0.33, Count = 1
m_ctx -> ctx: Probability = 1.00, Count = 2
PutMethodResponseResponse -> PutMethodResponseResult: Probability = 1.00, Count = 1
PutMethodResponse -> putMethodResponse: Probability = 0.50, Count = 1
PutMethodResponse -> PutMethodResult: Probability = 0.50, Count = 1
PutMethodResponseRequest -> PutMethodResponseRequest: Probability = 1.00, Count = 1
Invoke<PutMethodResponseResponse> -> executePutMethodResponse: Probability = 1.00, Count = 1
LegacyCredentials -> LegacyCredentials: Probability = 1.00, Count = 2
Credential -> Credential: Probability = 1.00, Count = 9
legacyCredential -> legacyCrendential: Probability = 0.40, Count = 2
legacyCredential -> Credential: Probability = 0.20, Count = 1
legacyCredential -> legacyCredential: Probability = 0.40, Count = 2
this.legacyCredential -> this.legacyCredential: Probability = 1.00, Count = 1
DescribeFeatureTransformationResponse -> DescribeFeatureTransformationResult: Probability = 1.00, Count = 1
DescribeFeatureTransformation -> describeFeatureTransformation: Probability = 1.00, Count = 1
DescribeFeatureTransformationRequest -> DescribeFeatureTransformationRequest: Probability = 1.00, Count = 1
Invoke<DescribeFeatureTransformationResponse> -> executeDescribeFeatureTransformation: Probability = 1.00, Count = 1
DeleteRouteResponse -> DeleteRouteResult: Probability = 1.00, Count = 1
DeleteRoute -> deleteRoute: Probability = 1.00, Count = 1
DeleteRouteRequest -> DeleteRouteRequest: Probability = 1.00, Count = 1
Invoke<DeleteRouteResponse> -> executeDeleteRoute: Probability = 1.00, Count = 1
AssociatePhoneNumbersWithVoiceConnectorResponse -> AssociatePhoneNumbersWithVoiceConnectorResult: Probability = 1.00, Count = 1
AssociatePhoneNumbersWithVoiceConnector -> associatePhoneNumbersWithVoiceConnector: Probability = 1.00, Count = 1
AssociatePhoneNumbersWithVoiceConnectorRequest -> AssociatePhoneNumbersWithVoiceConnectorRequest: Probability = 1.00, Count = 1
Invoke<AssociatePhoneNumbersWithVoiceConnectorResponse> -> executeAssociatePhoneNumbersWithVoiceConnector: Probability = 1.00, Count = 1
RamBytesUsed -> ramBytesUsed: Probability = 0.69, Count = 44
RamBytesUsed -> size: Probability = 0.06, Count = 4
RamBytesUsed -> BASE_RAM_BYTES_USED: Probability = 0.12, Count = 8
RamBytesUsed -> RamUsageEstimator.shallowSizeOf: Probability = 0.05, Count = 3
RamBytesUsed -> TERMS_BASE_RAM_BYTES_USED: Probability = 0.03, Count = 2
RamBytesUsed -> +: Probability = 0.02, Count = 1
RamBytesUsed -> fst!=null: Probability = 0.02, Count = 1
RamBytesUsed -> sizeInBytes: Probability = 0.02, Count = 1
blocks -> blocks: Probability = 0.67, Count = 6
blocks -> Block: Probability = 0.33, Count = 3
blocks.Length -> blocks.length: Probability = 0.43, Count = 3
blocks.Length -> size: Probability = 0.43, Count = 3
blocks.Length -> blocks[blocks.length: Probability = 0.14, Count = 1
* -> -: Probability = 0.01, Count = 3
* -> *: Probability = 0.88, Count = 229
* -> 1]: Probability = 0.01, Count = 2
* -> 1+r*type: Probability = 0.00, Count = 1
* -> n*y: Probability = 0.01, Count = 2
* -> long: Probability = 0.02, Count = 4
* -> SIN_COS_DELTA_HI: Probability = 0.00, Count = 1
* -> SIN_COS_DELTA_LO: Probability = 0.00, Count = 1
* -> SIN_COS_TABS_SIZE-2: Probability = 0.00, Count = 1
* -> cosTab[index]: Probability = 0.00, Count = 1
* -> indexSin: Probability = 0.01, Count = 2
* -> sinTab[index]: Probability = 0.00, Count = 1
* -> -indexSin: Probability = 0.00, Count = 1
* -> -indexCos: Probability = 0.00, Count = 1
* -> ONE_DIV_F2: Probability = 0.00, Count = 1
* -> ONE_DIV_F3: Probability = 0.00, Count = 1
* -> ONE_DIV_F4: Probability = 0.00, Count = 1
* -> /: Probability = 0.00, Count = 1
* -> double: Probability = 0.01, Count = 2
* -> r-p*Math.pow: Probability = 0.00, Count = 1
* -> +: Probability = 0.00, Count = 1
* -> blocks[blocks.length: Probability = 0.00, Count = 1
blockSize -> bytesUsedPerBlock: Probability = 0.04, Count = 2
blockSize -> blockSize: Probability = 0.73, Count = 35
blockSize -> blocks[index],: Probability = 0.02, Count = 1
blockSize -> b.bytes,: Probability = 0.04, Count = 2
blockSize -> blockSize-offset: Probability = 0.04, Count = 2
blockSize -> blocks[1+index],: Probability = 0.02, Count = 1
blockSize -> blockSize-offset,: Probability = 0.02, Count = 1
blockSize -> length-: Probability = 0.02, Count = 1
blockSize -> RamUsageEstimator.alignObjectSize: Probability = 0.02, Count = 1
blockSize -> numBlocks: Probability = 0.04, Count = 2
short -> short: Probability = 0.94, Count = 151
short -> CellType: Probability = 0.01, Count = 1
short -> int: Probability = 0.01, Count = 2
short -> this.field_1_first_row: Probability = 0.01, Count = 1
short -> top,: Probability = 0.01, Count = 1
short -> active,: Probability = 0.01, Count = 1
short -> modifyFormatRun: Probability = 0.01, Count = 1
short -> oldPos,: Probability = 0.01, Count = 1
short -> newLen: Probability = 0.01, Count = 2
ReadShort -> readShort: Probability = 0.75, Count = 3
ReadShort -> shouldSkipEncryptionOnCurrentRecord: Probability = 0.25, Count = 1
_in.ReadShort -> _in.readShort: Probability = 1.00, Count = 1
UpdatePipelineNotificationsResponse -> UpdatePipelineNotificationsResult: Probability = 1.00, Count = 1
UpdatePipelineNotifications -> updatePipelineNotifications: Probability = 1.00, Count = 1
UpdatePipelineNotificationsRequest -> UpdatePipelineNotificationsRequest: Probability = 1.00, Count = 1
Invoke<UpdatePipelineNotificationsResponse> -> executeUpdatePipelineNotifications: Probability = 1.00, Count = 1
java.io.Writer -> StringWriter: Probability = 0.33, Count = 2
java.io.Writer -> CharArrayWriter: Probability = 0.33, Count = 2
java.io.Writer -> PrintWriter: Probability = 0.33, Count = 2
c -> c: Probability = 0.93, Count = 321
c -> c1.getCanonicalName: Probability = 0.00, Count = 1
c -> .compareTo: Probability = 0.01, Count = 2
c -> c2.getCanonicalName: Probability = 0.00, Count = 1
c -> b[ptr--]: Probability = 0.00, Count = 1
c -> s.charAt: Probability = 0.01, Count = 2
c -> char: Probability = 0.00, Count = 1
c -> Trees.getChildren: Probability = 0.01, Count = 2
c -> i: Probability = 0.01, Count = 3
c -> transition="+c: Probability = 0.00, Count = 1
c -> stringToMatch.charAt: Probability = 0.00, Count = 1
c -> '+': Probability = 0.00, Count = 1
c -> '||: Probability = 0.00, Count = 1
c -> '^': Probability = 0.00, Count = 1
c -> '\"'||: Probability = 0.00, Count = 1
c -> '~': Probability = 0.00, Count = 1
c -> '*': Probability = 0.00, Count = 1
c -> '?'||: Probability = 0.00, Count = 1
c -> '&': Probability = 0.00, Count = 1
java.util.Iterator<V> -> Iterator<V>: Probability = 1.00, Count = 3
iterator -> iterator: Probability = 0.68, Count = 34
iterator -> final: Probability = 0.12, Count = 6
iterator -> Integer>>: Probability = 0.02, Count = 1
iterator -> backingIterator=: Probability = 0.02, Count = 1
iterator -> @Override: Probability = 0.04, Count = 2
iterator -> Iterator<Entry<K,: Probability = 0.04, Count = 2
iterator -> Iterator<E>: Probability = 0.02, Count = 1
iterator -> Iterator<K>: Probability = 0.02, Count = 1
iterator -> AtomicInteger>>: Probability = 0.02, Count = 1
iterator -> backingEntries=: Probability = 0.02, Count = 1
java.util.Hashtable<K, -> new: Probability = 0.43, Count = 9
java.util.Hashtable<K, -> countMap.entrySet: Probability = 0.05, Count = 1
java.util.Hashtable<K, -> .iterator: Probability = 0.14, Count = 3
java.util.Hashtable<K, -> V>>: Probability = 0.10, Count = 2
java.util.Hashtable<K, -> delegate.entrySet: Probability = 0.05, Count = 1
java.util.Hashtable<K, -> filteredEntrySet.iterator: Probability = 0.10, Count = 2
java.util.Hashtable<K, -> esDelegate.iterator: Probability = 0.05, Count = 1
java.util.Hashtable<K, -> Iterator<Entry<K,: Probability = 0.05, Count = 1
java.util.Hashtable<K, -> backingMap.entrySet: Probability = 0.05, Count = 1
V>.ValueIterator -> ValueIterator: Probability = 0.67, Count = 2
V>.ValueIterator -> newValueIterator: Probability = 0.33, Count = 1
UnitsRecord -> UnitsRecord: Probability = 1.00, Count = 2
field_1_units -> field_1_units: Probability = 1.00, Count = 2
IsEmpty -> isEmpty: Probability = 1.00, Count = 5
first -> first: Probability = 1.00, Count = 27
"ANY_DIFF" -> "ANY_DIFF": Probability = 1.00, Count = 1
UpdateDomainNameResponse -> UpdateDomainNameResult: Probability = 1.00, Count = 1
UpdateDomainName -> updateDomainName: Probability = 1.00, Count = 1
UpdateDomainNameRequest -> UpdateDomainNameRequest: Probability = 1.00, Count = 1
Invoke<UpdateDomainNameResponse> -> executeUpdateDomainName: Probability = 1.00, Count = 1
DeleteSnapshotRequest -> DeleteSnapshotRequest: Probability = 1.00, Count = 3
snapshotId -> snapshotId: Probability = 0.40, Count = 2
snapshotId -> ): Probability = 0.40, Count = 2
snapshotId -> setSnapshotId: Probability = 0.20, Count = 1
_snapshotId -> setSnapshotId: Probability = 0.50, Count = 3
_snapshotId -> snapshotId: Probability = 0.50, Count = 3
buf.Length -> buf.length: Probability = 0.94, Count = 15
buf.Length -> buf: Probability = 0.06, Count = 1
SliceReader -> SliceReader: Probability = 1.00, Count = 1
Int32BlockPool -> IntBlockPool: Probability = 1.00, Count = 2
pool -> pool: Probability = 1.00, Count = 8
this.pool -> this.pool: Probability = 1.00, Count = 6
SetDeltaSearchMemoryLimit -> setDeltaSearchMemoryLimit: Probability = 1.00, Count = 1
memoryLimit -> memoryLimit: Probability = 1.00, Count = 2
deltaSearchMemoryLimit -> deltaSearchMemoryLimit: Probability = 1.00, Count = 1
buffer.Append -> buffer.append: Probability = 0.92, Count = 528
buffer.Append -> ">=": Probability = 0.00, Count = 1
buffer.Append -> '~': Probability = 0.00, Count = 2
buffer.Append -> !term.field: Probability = 0.01, Count = 3
buffer.Append -> term.field: Probability = 0.01, Count = 3
buffer.Append -> automaton.toString: Probability = 0.00, Count = 1
buffer.Append -> maskedQuery.toString: Probability = 0.00, Count = 1
buffer.Append -> getField: Probability = 0.01, Count = 4
buffer.Append -> .options: Probability = 0.01, Count = 3
buffer.Append -> "^": Probability = 0.00, Count = 1
buffer.Append -> GREATERTHAN: Probability = 0.00, Count = 1
buffer.Append -> subquery.toString: Probability = 0.00, Count = 2
buffer.Append -> tieBreakerMultiplier: Probability = 0.00, Count = 2
buffer.Append -> ": Probability = 0.00, Count = 2
buffer.Append -> _reserved:: Probability = 0.00, Count = 1
buffer.Append -> .append: Probability = 0.00, Count = 2
buffer.Append -> '\n': Probability = 0.00, Count = 2
buffer.Append -> ADD: Probability = 0.00, Count = 2
buffer.Append -> x>0: Probability = 0.00, Count = 2
buffer.Append -> value[x]: Probability = 0.00, Count = 2
buffer.Append -> CONCAT: Probability = 0.00, Count = 1
buffer.Append -> LESSTHAN: Probability = 0.00, Count = 1
buffer.Append -> "spanNot: Probability = 0.00, Count = 1
buffer.Append -> include.toString: Probability = 0.00, Count = 1
buffer.Append -> exclude.toString: Probability = 0.00, Count = 1
buffer.Append -> Integer.toString: Probability = 0.00, Count = 2
buffer.Append -> missingValue=": Probability = 0.00, Count = 1
buffer.Append -> selector=": Probability = 0.00, Count = 1
.Append -> .append: Probability = 0.79, Count = 710
.Append -> "maxMergeCount=": Probability = 0.00, Count = 1
.Append -> .grbitFrt=": Probability = 0.00, Count = 2
.Append -> .unused: Probability = 0.00, Count = 3
.Append -> .iObjectKind: Probability = 0.00, Count = 2
.Append -> .iObjectContext: Probability = 0.00, Count = 2
.Append -> .iObjectInstance1=": Probability = 0.00, Count = 2
.Append -> .iObjectInstance2=": Probability = 0.00, Count = 2
.Append -> _colors.size: Probability = 0.00, Count = 2
.Append -> "*: Probability = 0.00, Count = 2
.Append -> colornum: Probability = 0.00, Count = 2
.Append -> sb.append: Probability = 0.02, Count = 16
.Append -> collast: Probability = 0.00, Count = 1
.Append -> colwidth: Probability = 0.00, Count = 1
.Append -> xfindex: Probability = 0.00, Count = 1
.Append -> HexDump.shortToHex: Probability = 0.00, Count = 4
.Append -> _options: Probability = 0.00, Count = 3
.Append -> getHidden: Probability = 0.00, Count = 1
.Append -> olevel: Probability = 0.00, Count = 1
.Append -> getOutlineLevel: Probability = 0.00, Count = 1
.Append -> collapsed=: Probability = 0.00, Count = 1
.Append -> getCollapsed: Probability = 0.00, Count = 1
.Append -> sb.toString: Probability = 0.01, Count = 5
.Append -> "maxQueryTerms: Probability = 0.00, Count = 1
.Append -> maxQueryTerms: Probability = 0.00, Count = 1
.Append -> "minWordLen: Probability = 0.00, Count = 1
.Append -> minWordLen: Probability = 0.00, Count = 1
.Append -> "maxWordLen: Probability = 0.00, Count = 1
.Append -> maxWordLen: Probability = 0.00, Count = 1
.Append -> "fieldNames: Probability = 0.00, Count = 1
.Append -> "boost: Probability = 0.00, Count = 1
.Append -> "minTermFreq: Probability = 0.00, Count = 1
.Append -> minTermFreq: Probability = 0.00, Count = 1
.Append -> "minDocFreq: Probability = 0.00, Count = 1
.Append -> minDocFreq: Probability = 0.00, Count = 1
.Append -> getBorderType: Probability = 0.00, Count = 2
.Append -> .reserved: Probability = 0.01, Count = 5
.Append -> .comment: Probability = 0.00, Count = 2
.Append -> +: Probability = 0.00, Count = 1
.Append -> HexDump.intToHex: Probability = 0.01, Count = 9
.Append -> .sheetname: Probability = 0.00, Count = 2
.Append -> "[/BOUNDSHEET]\n": Probability = 0.00, Count = 2
.Append -> HexDump.byteToHex: Probability = 0.00, Count = 2
.Append -> getText: Probability = 0.00, Count = 4
.Append -> ": Probability = 0.00, Count = 2
.Append -> getNumerator: Probability = 0.00, Count = 2
.Append -> getDenominator: Probability = 0.00, Count = 2
.Append -> .iObjectKind=": Probability = 0.00, Count = 2
.Append -> HexDump.toHex: Probability = 0.00, Count = 1
.Append -> .range: Probability = 0.00, Count = 3
.Append -> getRange: Probability = 0.00, Count = 2
.Append -> encryptionInfo.getVerifier: Probability = 0.00, Count = 3
.Append -> '\n': Probability = 0.01, Count = 6
.Append -> =": Probability = 0.00, Count = 3
.Append -> points[i].starts.next/3: Probability = 0.00, Count = 1
.Append -> points[i].ends.next/3: Probability = 0.00, Count = 1
.Append -> _linkPtg: Probability = 0.00, Count = 2
.Append -> getOptions: Probability = 0.00, Count = 1
.Append -> .width: Probability = 0.00, Count = 1
.Append -> .height: Probability = 0.00, Count = 1
.Append -> 0x": Probability = 0.00, Count = 3
.Append -> rawData=": Probability = 0.00, Count = 3
.Append -> _linkOpts: Probability = 0.00, Count = 4
.Append -> getFormatFlags: Probability = 0.00, Count = 2
.Append -> isDisplayAsPercentage: Probability = 0.00, Count = 1
.Append -> "mergeFactor=": Probability = 0.00, Count = 1
.Append -> mergeFactor: Probability = 0.00, Count = 1
.Append -> "maxMergeSize=": Probability = 0.00, Count = 1
.Append -> "maxMergeSizeForForcedMerge=": Probability = 0.00, Count = 1
.Append -> "calibrateSizeByDeletes=": Probability = 0.00, Count = 1
.Append -> calibrateSizeByDeletes: Probability = 0.00, Count = 1
.Append -> "maxMergeDocs=": Probability = 0.00, Count = 1
.Append -> maxMergeDocs: Probability = 0.00, Count = 1
.Append -> "maxCFSSegmentSizeMB=": Probability = 0.00, Count = 1
.Append -> getMaxCFSSegmentSizeMB: Probability = 0.00, Count = 1
.Append -> .rowto: Probability = 0.00, Count = 1
.Append -> .colfrom: Probability = 0.00, Count = 1
.Append -> .colto: Probability = 0.00, Count = 1
.Append -> r.getLastColumn: Probability = 0.00, Count = 1
.Append -> ._dxMin:: Probability = 0.00, Count = 1
.Append -> ._str:: Probability = 0.00, Count = 1
.Append -> ._unused:: Probability = 0.00, Count = 1
.Append -> .dialog: Probability = 0.00, Count = 1
.Append -> getDialog: Probability = 0.00, Count = 1
.Append -> .rowsumsbelw=: Probability = 0.00, Count = 1
.Append -> getRowSumsBelow: Probability = 0.00, Count = 1
.Append -> .rowsumsrigt=: Probability = 0.00, Count = 1
.Append -> getRowSumsRight: Probability = 0.00, Count = 1
.Append -> .wsbool2: Probability = 0.00, Count = 1
.Append -> .fittopage: Probability = 0.00, Count = 1
.Append -> getFitToPage: Probability = 0.00, Count = 1
.Append -> .displayguts=: Probability = 0.00, Count = 1
.Append -> getDisplayGuts: Probability = 0.00, Count = 1
.Append -> .alternateex=: Probability = 0.00, Count = 1
.Append -> getAlternateExpression: Probability = 0.00, Count = 1
.Append -> .alternatefo=: Probability = 0.00, Count = 1
.Append -> "USERSVIEWBEGIN": Probability = 0.00, Count = 2
.Append -> getAnchorId: Probability = 0.00, Count = 2
.Append -> getLink1: Probability = 0.00, Count = 2
.Append -> getLink2: Probability = 0.00, Count = 2
.Append -> "HEADERFOOTER": Probability = 0.00, Count = 2
StringUtil.ToHexString -> Integer.toHexString: Probability = 0.69, Count = 35
StringUtil.ToHexString -> HexDump.shortToHex: Probability = 0.27, Count = 14
StringUtil.ToHexString -> .append: Probability = 0.04, Count = 2
"\n" -> "\n": Probability = 0.86, Count = 211
"\n" -> sb.append: Probability = 0.08, Count = 20
"\n" -> .append: Probability = 0.05, Count = 13
buffer.ToString -> buffer.toString: Probability = 0.94, Count = 117
buffer.ToString -> buffer.append: Probability = 0.01, Count = 1
buffer.ToString -> +"\n": Probability = 0.05, Count = 6
DescribeTransitGatewayAttachmentsResponse -> DescribeTransitGatewayAttachmentsResult: Probability = 1.00, Count = 1
DescribeTransitGatewayAttachments -> describeTransitGatewayAttachments: Probability = 1.00, Count = 1
DescribeTransitGatewayAttachmentsRequest -> DescribeTransitGatewayAttachmentsRequest: Probability = 1.00, Count = 1
Invoke<DescribeTransitGatewayAttachmentsResponse> -> executeDescribeTransitGatewayAttachments: Probability = 1.00, Count = 1
CreateVpcResponse -> CreateVpcResult: Probability = 1.00, Count = 1
CreateVpc -> createVpc: Probability = 1.00, Count = 1
CreateVpcRequest -> CreateVpcRequest: Probability = 1.00, Count = 2
Invoke<CreateVpcResponse> -> executeCreateVpc: Probability = 1.00, Count = 1
DescribeElasticGpusResponse -> DescribeElasticGpusResult: Probability = 1.00, Count = 1
DescribeElasticGpus -> describeElasticGpus: Probability = 1.00, Count = 1
DescribeElasticGpusRequest -> DescribeElasticGpusRequest: Probability = 1.00, Count = 1
Invoke<DescribeElasticGpusResponse> -> executeDescribeElasticGpus: Probability = 1.00, Count = 1
java.nio.IntBuffer -> IntBuffer: Probability = 1.00, Count = 35
byteBuffer.putInt -> byteBuffer.putInt: Probability = 1.00, Count = 1
_position++ -> position++: Probability = 1.00, Count = 12
libcore.io.SizeOf.INT, -> SizeOf.INT,: Probability = 1.00, Count = 1
UpdateEndpointsBatchResponse -> UpdateEndpointsBatchResult: Probability = 1.00, Count = 1
UpdateEndpointsBatch -> updateEndpointsBatch: Probability = 1.00, Count = 1
UpdateEndpointsBatchRequest -> UpdateEndpointsBatchRequest: Probability = 1.00, Count = 1
Invoke<UpdateEndpointsBatchResponse> -> executeUpdateEndpointsBatch: Probability = 1.00, Count = 1
FromRaw -> fromRaw: Probability = 0.73, Count = 16
FromRaw -> int[]: Probability = 0.09, Count = 2
FromRaw -> ints: Probability = 0.05, Count = 1
FromRaw -> ints,: Probability = 0.05, Count = 1
FromRaw -> is: Probability = 0.05, Count = 1
FromRaw -> is,: Probability = 0.05, Count = 1
bs, -> bs,: Probability = 1.00, Count = 30
p -> p: Probability = 0.91, Count = 122
p -> p!=null: Probability = 0.02, Count = 3
p -> paths.toArray: Probability = 0.01, Count = 1
p -> p.parent: Probability = 0.02, Count = 3
p -> n<pAt.length: Probability = 0.01, Count = 1
p -> recall: Probability = 0.01, Count = 1
p -> maxGoodPoints<=0: Probability = 0.01, Count = 1
p -> numGoodPoints/maxGoodPoints: Probability = 0.01, Count = 1
p -> fetchedEOF: Probability = 0.01, Count = 1
w1 -> w1: Probability = 1.00, Count = 9
NB.DecodeInt32 -> NB.decodeInt32: Probability = 1.00, Count = 21
w2 -> w2: Probability = 0.90, Count = 9
w2 -> =: Probability = 0.10, Count = 1
4 -> 4: Probability = 0.98, Count = 113
4 -> rawData.length: Probability = 0.02, Count = 2
w3 -> w3: Probability = 0.90, Count = 9
w3 -> =: Probability = 0.10, Count = 1
8 -> 8: Probability = 1.00, Count = 93
w4 -> w4: Probability = 0.82, Count = 9
w4 -> 3]: Probability = 0.09, Count = 1
w4 -> =: Probability = 0.09, Count = 1
12 -> 12: Probability = 1.00, Count = 25
w5 -> w5: Probability = 0.91, Count = 10
w5 -> 4]: Probability = 0.09, Count = 1
NGit.Transport.OpenSshConfig -> OpenSshConfig: Probability = 0.50, Count = 2
NGit.Transport.OpenSshConfig -> SshConstants.SSH_DIR: Probability = 0.25, Count = 1
NGit.Transport.OpenSshConfig -> ,SshConstants.CONFIG: Probability = 0.25, Count = 1
Get -> get: Probability = 0.95, Count = 106
Get -> int: Probability = 0.01, Count = 1
Get -> "form",: Probability = 0.02, Count = 2
Get -> "nfkc_cf": Probability = 0.02, Count = 2
Get -> "language",: Probability = 0.01, Count = 1
FS -> FS: Probability = 1.00, Count = 7
fs -> fs: Probability = 0.95, Count = 18
fs -> fs.getRoot: Probability = 0.05, Count = 1
FilePath -> File: Probability = 0.75, Count = 44
FilePath -> .getAbsoluteFile: Probability = 0.02, Count = 1
FilePath -> final: Probability = 0.17, Count = 10
FilePath -> packFile.getParentFile: Probability = 0.02, Count = 1
FilePath -> keepFile: Probability = 0.02, Count = 1
FilePath -> directory.getName: Probability = 0.02, Count = 1
FilePath -> directory.getParentFile: Probability = 0.02, Count = 1
home -> home: Probability = 0.75, Count = 3
home -> fs.userHome: Probability = 0.25, Count = 1
"." -> ".": Probability = 1.00, Count = 10
config -> config: Probability = 0.95, Count = 18
config -> keepImages: Probability = 0.05, Count = 1
osc -> home,: Probability = 1.00, Count = 2
VCenterRecord -> VCenterRecord: Probability = 1.00, Count = 2
field_1_vcenter -> field_1_vcenter: Probability = 1.00, Count = 1
Stream -> InputStream: Probability = 0.83, Count = 10
Stream -> OutputStream: Probability = 0.17, Count = 2
source, -> source,: Probability = 1.00, Count = 5
fileName -> fileName: Probability = 0.86, Count = 12
fileName -> "docs.file",: Probability = 0.07, Count = 1
fileName -> .toAbsolutePath: Probability = 0.07, Count = 1
ReplicationSession -> ReplicationSession: Probability = 1.00, Count = 3
session -> session: Probability = 0.62, Count = 8
session -> sessions.get: Probability = 0.15, Count = 2
session -> sessionID: Probability = 0.08, Count = 1
session -> session.isExpired: Probability = 0.08, Count = 1
session -> expirationThresholdMilllis: Probability = 0.08, Count = 1
ReleaseSession -> releaseSession: Probability = 1.00, Count = 2
sessionId -> sessionID: Probability = 0.71, Count = 5
sessionId -> sessionID.isEmpty: Probability = 0.14, Count = 1
sessionId -> IOUtils.rm: Probability = 0.14, Count = 1
", -> ": Probability = 0.07, Count = 7
", -> +: Probability = 0.13, Count = 13
", -> ",: Probability = 0.71, Count = 70
", -> isExternal="+: Probability = 0.01, Count = 1
", -> +",: Probability = 0.05, Count = 5
", -> size=": Probability = 0.03, Count = 3
string.Format -> +: Probability = 0.22, Count = 4
string.Format -> String.format: Probability = 0.44, Count = 8
string.Format -> %d: Probability = 0.28, Count = 5
string.Format -> indexCommit.getGeneration: Probability = 0.06, Count = 1
file: -> file:: Probability = 1.00, Count = 3
DownloadDefaultKeyPairResponse -> DownloadDefaultKeyPairResult: Probability = 1.00, Count = 1
DownloadDefaultKeyPair -> downloadDefaultKeyPair: Probability = 1.00, Count = 1
DownloadDefaultKeyPairRequest -> DownloadDefaultKeyPairRequest: Probability = 1.00, Count = 1
Invoke<DownloadDefaultKeyPairResponse> -> executeDownloadDefaultKeyPair: Probability = 1.00, Count = 1
DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse -> DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult: Probability = 1.00, Count = 1
DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations -> describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations: Probability = 1.00, Count = 1
DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest -> DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse> -> executeDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations: Probability = 1.00, Count = 1
ResetEbsDefaultKmsKeyIdResponse -> ResetEbsDefaultKmsKeyIdResult: Probability = 1.00, Count = 1
ResetEbsDefaultKmsKeyId -> resetEbsDefaultKmsKeyId: Probability = 1.00, Count = 1
ResetEbsDefaultKmsKeyIdRequest -> ResetEbsDefaultKmsKeyIdRequest: Probability = 1.00, Count = 1
Invoke<ResetEbsDefaultKmsKeyIdResponse> -> executeResetEbsDefaultKmsKeyId: Probability = 1.00, Count = 1
GetPropertiesPerBlock -> getPropertiesPerBlock: Probability = 1.00, Count = 1
bigBlockSize -> bigBlockSize: Probability = 1.00, Count = 6
POIFSConstants.PROPERTY_SIZE -> POIFSConstants.PROPERTY_SIZE: Probability = 1.00, Count = 1
numberVE -> numberVE: Probability = 0.93, Count = 13
numberVE -> octal: Probability = 0.07, Count = 1
this.Evaluate -> this.evaluate: Probability = 1.00, Count = 3
numberVE, -> numberVE,: Probability = 1.00, Count = 5
GetFindingsStatisticsResponse -> GetFindingsStatisticsResult: Probability = 1.00, Count = 1
GetFindingsStatistics -> getFindingsStatistics: Probability = 1.00, Count = 1
GetFindingsStatisticsRequest -> GetFindingsStatisticsRequest: Probability = 1.00, Count = 1
Invoke<GetFindingsStatisticsResponse> -> executeGetFindingsStatistics: Probability = 1.00, Count = 1
ModifyDBClusterResponse -> DBCluster: Probability = 1.00, Count = 1
ModifyDBCluster -> modifyDBCluster: Probability = 1.00, Count = 1
ModifyDBClusterRequest -> ModifyDBClusterRequest: Probability = 1.00, Count = 1
Invoke<ModifyDBClusterResponse> -> executeModifyDBCluster: Probability = 1.00, Count = 1
LimitTokenCountFilterFactory -> LimitTokenCountFilterFactory: Probability = 1.00, Count = 1
maxTokenCount -> maxTokenCount: Probability = 1.00, Count = 4
MAX_TOKEN_COUNT_KEY -> MAX_TOKEN_COUNT_KEY: Probability = 1.00, Count = 1
consumeAllTokens -> consumeAllTokens: Probability = 1.00, Count = 9
GetBoolean -> getBoolean: Probability = 0.95, Count = 35
GetBoolean -> NORMALIZE_KANJI_PARAM,: Probability = 0.03, Count = 1
GetBoolean -> JapaneseIterationMarkCharFilter.NORMALIZE_KANJI_DEFAULT: Probability = 0.03, Count = 1
CONSUME_ALL_TOKENS_KEY, -> CONSUME_ALL_TOKENS_KEY,: Probability = 1.00, Count = 2
queryNode -> MatchNoDocsQuery: Probability = 0.08, Count = 1
queryNode -> queryNode: Probability = 0.46, Count = 6
queryNode -> QueryNodeException: Probability = 0.23, Count = 3
queryNode -> MatchNoDocsQueryNode: Probability = 0.08, Count = 1
queryNode -> MatchAllDocsQuery: Probability = 0.08, Count = 1
queryNode -> MatchAllDocsQueryNode: Probability = 0.08, Count = 1
Build -> build: Probability = 0.43, Count = 30
Build -> new: Probability = 0.12, Count = 8
Build -> CompositeReaderContext: Probability = 0.03, Count = 2
Build -> BooleanQuery: Probability = 0.06, Count = 4
Build -> RoaringDocIdSet: Probability = 0.06, Count = 4
Build -> BlendedTermQuery: Probability = 0.06, Count = 4
Build -> ArrayUtil.copyOfSubArray: Probability = 0.03, Count = 2
Build -> ,ArrayUtil.copyOfSubArray: Probability = 0.03, Count = 2
Build -> boosts,: Probability = 0.03, Count = 2
Build -> minimumNumberShouldMatch,: Probability = 0.03, Count = 2
Build -> clauses.toArray: Probability = 0.03, Count = 2
Build -> PhraseWildcardQuery: Probability = 0.04, Count = 3
Build -> phraseTerms,: Probability = 0.03, Count = 2
Build -> SpanQuery[clauses.size: Probability = 0.01, Count = 1
Build -> terms,: Probability = 0.01, Count = 1
IQueryNode -> QueryNode: Probability = 0.58, Count = 31
IQueryNode -> throws: Probability = 0.19, Count = 10
IQueryNode -> CharSequence: Probability = 0.09, Count = 5
IQueryNode -> ParseException: Probability = 0.09, Count = 5
IQueryNode -> QueryNodeException: Probability = 0.04, Count = 2
QueryNodeException -> QueryNodeException: Probability = 1.00, Count = 4
Message -> MessageImpl: Probability = 0.78, Count = 7
Message -> Message: Probability = 0.22, Count = 2
QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, -> QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR,: Probability = 1.00, Count = 2
queryNode.ToQueryString -> queryNode.toQueryString: Probability = 1.00, Count = 3
EscapeQuerySyntax -> EscapeQuerySyntaxImpl: Probability = 1.00, Count = 3
queryNode.GetType -> queryNode.getClass: Probability = 1.00, Count = 2
GetUserPolicyRequest -> GetUserPolicyRequest: Probability = 1.00, Count = 1
userName, -> userName,: Probability = 1.00, Count = 9
policyName -> policyName: Probability = 0.58, Count = 11
policyName -> ): Probability = 0.42, Count = 8
_userName -> setUserName: Probability = 0.62, Count = 18
_userName -> (: Probability = 0.38, Count = 11
userName -> userName: Probability = 0.63, Count = 27
userName -> ): Probability = 0.37, Count = 16
_policyName -> setPolicyName: Probability = 1.00, Count = 8
RotateEncryptionKeyResponse -> Cluster: Probability = 1.00, Count = 1
RotateEncryptionKey -> rotateEncryptionKey: Probability = 1.00, Count = 1
RotateEncryptionKeyRequest -> RotateEncryptionKeyRequest: Probability = 1.00, Count = 1
Invoke<RotateEncryptionKeyResponse> -> executeRotateEncryptionKey: Probability = 1.00, Count = 1
GetLinesAdded -> getLinesAdded: Probability = 1.00, Count = 1
nAdded -> nAdded: Probability = 1.00, Count = 1
tokenIndex -> getHiddenTokensToLeft: Probability = 0.05, Count = 1
tokenIndex -> tokenIndex<0: Probability = 0.10, Count = 2
tokenIndex -> tokenIndex>=tokens.size: Probability = 0.10, Count = 2
tokenIndex -> IndexOutOfBoundsException: Probability = 0.10, Count = 2
tokenIndex -> tokenIndex+": Probability = 0.10, Count = 2
tokenIndex -> tokenIndex: Probability = 0.24, Count = 5
tokenIndex -> =previousTokenOnChannel: Probability = 0.05, Count = 1
tokenIndex -> Lexer.DEFAULT_TOKEN_CHANNEL: Probability = 0.10, Count = 2
tokenIndex -> prevOnChannel+1: Probability = 0.05, Count = 1
tokenIndex -> tokenIndex-1: Probability = 0.05, Count = 1
tokenIndex -> =nextTokenOnChannel: Probability = 0.05, Count = 1
tokenIndex -> tokenIndex+1: Probability = 0.05, Count = 1
tokenIndex, -> tokenIndex,: Probability = 1.00, Count = 3
channel -> channel: Probability = 1.00, Count = 12
LazyInit -> lazyInit: Probability = 1.00, Count = 6
in -> in: Probability = 0.18, Count = 35
in -> :: Probability = 0.76, Count = 146
in -> i: Probability = 0.02, Count = 4
in -> entry.getValue: Probability = 0.02, Count = 4
in -> for: Probability = 0.01, Count = 2
in -> entry.getKey: Probability = 0.01, Count = 1
tokens.Count -> 0.."+: Probability = 0.14, Count = 3
tokens.Count -> tokens.size: Probability = 0.59, Count = 13
tokens.Count -> -1: Probability = 0.23, Count = 5
tokens.Count -> tokens.get: Probability = 0.05, Count = 1
prevOnChannel -> prevOnChannel: Probability = 1.00, Count = 2
1, -> 1,: Probability = 0.96, Count = 55
1, -> +: Probability = 0.04, Count = 2
FilterForChannel -> filterForChannel: Probability = 1.00, Count = 2
from, -> from,: Probability = 0.96, Count = 24
from, -> quicksort: Probability = 0.04, Count = 1
to, -> to,: Probability = 1.00, Count = 7
DescribeValidDBInstanceModificationsResponse -> ValidDBInstanceModificationsMessage: Probability = 1.00, Count = 1
DescribeValidDBInstanceModifications -> describeValidDBInstanceModifications: Probability = 1.00, Count = 1
DescribeValidDBInstanceModificationsRequest -> DescribeValidDBInstanceModificationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeValidDBInstanceModificationsResponse> -> executeDescribeValidDBInstanceModifications: Probability = 1.00, Count = 1
RevFlag -> RevFlag: Probability = 0.62, Count = 13
RevFlag -> final: Probability = 0.29, Count = 6
RevFlag -> RevFlagSet: Probability = 0.10, Count = 2
flag -> flag: Probability = 0.56, Count = 14
flag -> rval: Probability = 0.20, Count = 5
flag -> set: Probability = 0.08, Count = 2
flag -> BOOLERR: Probability = 0.08, Count = 2
flag -> record.": Probability = 0.08, Count = 2
flags -> flags: Probability = 0.82, Count = 45
flags -> CJKBigramFilter.HAN: Probability = 0.02, Count = 1
flags -> "hiragana",: Probability = 0.02, Count = 1
flags -> CJKBigramFilter.HIRAGANA: Probability = 0.02, Count = 1
flags -> "katakana",: Probability = 0.02, Count = 1
flags -> CJKBigramFilter.KATAKANA: Probability = 0.02, Count = 1
flags -> "hangul",: Probability = 0.02, Count = 1
flags -> CJKBigramFilter.HANGUL: Probability = 0.02, Count = 1
flags -> elseflags: Probability = 0.02, Count = 1
flags -> NB.encodeInt16: Probability = 0.02, Count = 1
flags -> P_FLAGS,: Probability = 0.02, Count = 1
|= -> |=: Probability = 1.00, Count = 35
flag.mask -> flag.mask: Probability = 0.83, Count = 5
flag.mask -> set.mask: Probability = 0.17, Count = 1
clear -> clear: Probability = 0.79, Count = 19
clear -> @Override: Probability = 0.21, Count = 5
java.util.Iterator<E> -> Iterator<E>: Probability = 0.71, Count = 12
java.util.Iterator<E> -> Iterator<?>: Probability = 0.29, Count = 5
it -> it: Probability = 0.89, Count = 17
it -> !it.hasNext: Probability = 0.11, Count = 2
it.hasNext -> it.hasNext: Probability = 1.00, Count = 8
it.next -> it.next: Probability = 1.00, Count = 11
it.remove -> it.remove: Probability = 1.00, Count = 4
RegisterImageResponse -> RegisterImageResult: Probability = 1.00, Count = 1
RegisterImage -> registerImage: Probability = 1.00, Count = 1
RegisterImageRequest -> RegisterImageRequest: Probability = 1.00, Count = 2
Invoke<RegisterImageResponse> -> executeRegisterImage: Probability = 1.00, Count = 1
TermQuery -> &&term.equals: Probability = 0.17, Count = 1
TermQuery -> TermQuery: Probability = 0.83, Count = 5
this.term.Equals -> .term: Probability = 1.00, Count = 1
scheme, -> scheme,: Probability = 1.00, Count = 2
authority, -> authority,: Probability = 1.00, Count = 2
path, -> path,: Probability = 0.87, Count = 20
path, -> FileNotFoundException: Probability = 0.04, Count = 1
path, -> path.substring: Probability = 0.04, Count = 1
path, -> DEFAULT_MERGE_BUFFER_SIZE,: Probability = 0.04, Count = 1
fragment -> fragment: Probability = 1.00, Count = 8
java.net.URISyntaxException -> URISyntaxException: Probability = 1.00, Count = 8
scheme -> scheme: Probability = 1.00, Count = 7
path -> path: Probability = 0.97, Count = 59
path -> String: Probability = 0.02, Count = 1
path -> !path.startsWith: Probability = 0.02, Count = 1
!string.IsNullOrEmpty -> !path.isEmpty: Probability = 0.50, Count = 2
!string.IsNullOrEmpty -> &&: Probability = 0.25, Count = 1
!string.IsNullOrEmpty -> !authority.isEmpty: Probability = 0.25, Count = 1
path[0] -> path.charAt: Probability = 1.00, Count = 2
'/' -> '/': Probability = 1.00, Count = 5
java.lang.StringBuilder -> StringBuilder: Probability = 1.00, Count = 37
uri -> uri: Probability = 1.00, Count = 14
uri.append -> uri.append: Probability = 0.71, Count = 5
uri.append -> ALL_LEGAL_ENCODER.appendEncoded: Probability = 0.29, Count = 2
':' -> ':': Probability = 0.38, Count = 9
':' -> ":": Probability = 0.62, Count = 15
authority -> authority: Probability = 1.00, Count = 8
"" -> "": Probability = 1.00, Count = 53
uri, -> uri,: Probability = 0.77, Count = 23
uri, -> uri.toString: Probability = 0.07, Count = 2
uri, -> UnsupportedCredentialItem: Probability = 0.10, Count = 3
uri, -> uri.substring: Probability = 0.07, Count = 2
query -> query: Probability = 1.00, Count = 22
BlameGenerator -> BlameGenerator: Probability = 1.00, Count = 3
Repository -> Repository: Probability = 1.00, Count = 30
repository, -> repository,: Probability = 1.00, Count = 1
this.repository -> this.repository: Probability = 1.00, Count = 1
repository -> repository: Probability = 1.00, Count = 3
this.resultPath -> this.resultPath: Probability = 1.00, Count = 1
PathFilter.Create -> PathFilter.create: Probability = 1.00, Count = 4
idBuf -> idBuf: Probability = 1.00, Count = 1
MutableObjectId -> MutableObjectId: Probability = 0.80, Count = 4
MutableObjectId -> out.fromRaw: Probability = 0.20, Count = 1
SetFollowFileRenames -> setFollowFileRenames: Probability = 1.00, Count = 3
InitRevPool -> initRevPool: Probability = 1.00, Count = 1
writeTo -> writeTo: Probability = 1.00, Count = 1
java.io.OutputStream -> OutputStream: Probability = 1.00, Count = 4
@out -> out: Probability = 0.92, Count = 57
@out -> LF: Probability = 0.02, Count = 1
@out -> AccessController.doPrivileged: Probability = 0.02, Count = 1
@out -> Writer: Probability = 0.02, Count = 1
@out -> this.out: Probability = 0.02, Count = 1
@out -> out,: Probability = 0.02, Count = 1
DeletableItem -> DeletableItem: Probability = 1.00, Count = 1
List<Attribute> -> java.util.List<Attribute>: Probability = 1.00, Count = 3
attributes -> attributes: Probability = 0.88, Count = 14
attributes -> newMap: Probability = 0.06, Count = 1
attributes -> newMap.put: Probability = 0.06, Count = 1
_name -> setName: Probability = 0.68, Count = 15
_name -> _name: Probability = 0.32, Count = 7
_attributes -> setAttributes: Probability = 1.00, Count = 6
DescribeGroupResponse -> DescribeGroupResult: Probability = 1.00, Count = 1
DescribeGroup -> describeGroup: Probability = 1.00, Count = 1
DescribeGroupRequest -> DescribeGroupRequest: Probability = 1.00, Count = 1
Invoke<DescribeGroupResponse> -> executeDescribeGroup: Probability = 1.00, Count = 1
EnableVpcClassicLinkResponse -> EnableVpcClassicLinkResult: Probability = 1.00, Count = 1
EnableVpcClassicLink -> enableVpcClassicLink: Probability = 1.00, Count = 1
EnableVpcClassicLinkRequest -> EnableVpcClassicLinkRequest: Probability = 1.00, Count = 1
Invoke<EnableVpcClassicLinkResponse> -> executeEnableVpcClassicLink: Probability = 1.00, Count = 1
DescribeStacksResponse -> DescribeStacksResult: Probability = 1.00, Count = 2
DescribeStacks -> describeStacks: Probability = 1.00, Count = 3
DescribeStacksRequest -> DescribeStacksRequest: Probability = 1.00, Count = 2
duplicate -> duplicate: Probability = 1.00, Count = 20
copy -> copy: Probability = 0.88, Count = 15
copy -> shape:: Probability = 0.12, Count = 2
n, -> n,: Probability = 1.00, Count = 14
d -> d: Probability = 0.95, Count = 86
d -> a.charAt: Probability = 0.01, Count = 1
d -> _interp.decisionToDFA: Probability = 0.01, Count = 1
d -> d*d: Probability = 0.01, Count = 1
d -> minnk: Probability = 0.02, Count = 2
double.NaN -> Double.NaN: Probability = 1.00, Count = 7
Sign -> sign: Probability = 1.00, Count = 3
n -> n: Probability = 0.83, Count = 180
n -> BYTES_TO_WRITE_BEFORE_CANCEL_CHECK: Probability = 0.01, Count = 2
n -> checkCancelAt: Probability = 0.01, Count = 2
n -> /n: Probability = 0.01, Count = 2
n -> getPrecisionAt: Probability = 0.00, Count = 1
n -> n<1: Probability = 0.00, Count = 1
n -> n>MAX_POINTS: Probability = 0.00, Count = 1
n -> "n="+n+": Probability = 0.00, Count = 1
n -> n>numPoints: Probability = 0.00, Count = 1
n -> n,: Probability = 0.00, Count = 1
n -> i<n: Probability = 0.01, Count = 3
n -> p,: Probability = 0.01, Count = 2
n -> p: Probability = 0.00, Count = 1
n -> BigInteger.ONE: Probability = 0.00, Count = 1
n -> cache.containsKey: Probability = 0.00, Count = 1
n -> .multiply: Probability = 0.00, Count = 1
n -> r: Probability = 0.01, Count = 3
n -> Constants.OBJECT_ID_LENGTH: Probability = 0.00, Count = 1
n -> walker.getTreeCount: Probability = 0.00, Count = 1
n -> srcCnt,: Probability = 0.00, Count = 1
n -> src[srcIdx++]: Probability = 0.00, Count = 1
n -> srcCnt--: Probability = 0.00, Count = 1
n -> tailBlock,: Probability = 0.00, Count = 1
n -> srcIdx: Probability = 0.00, Count = 1
n -> factorial: Probability = 0.01, Count = 2
n -> 170: Probability = 0.00, Count = 1
n -> mrr: Probability = 0.00, Count = 1
n -> maxnk: Probability = 0.00, Count = 1
% -> %: Probability = 0.84, Count = 51
% -> final: Probability = 0.16, Count = 10
GetLocalizedMessage -> getLocalizedMessage: Probability = 0.73, Count = 8
GetLocalizedMessage -> Locale.getDefault: Probability = 0.27, Count = 3
key, -> key,: Probability = 0.95, Count = 61
key, -> key: Probability = 0.05, Count = 3
CultureInfo -> Locale: Probability = 1.00, Count = 5
locale -> locale: Probability = 0.80, Count = 8
locale -> getResourceBundleObject: Probability = 0.10, Count = 1
locale -> .getLocale: Probability = 0.10, Count = 1
message -> message: Probability = 1.00, Count = 46
"Message -> "Message: Probability = 0.50, Count = 1
"Message -> key:": Probability = 0.50, Count = 1
found." -> message.toString: Probability = 1.00, Count = 1
ToQueryString -> CharSequence: Probability = 0.50, Count = 16
ToQueryString -> toQueryString: Probability = 0.50, Count = 16
IEscapeQuerySyntax -> EscapeQuerySyntax: Probability = 1.00, Count = 16
escapeSyntaxParser -> escapeSyntaxParser: Probability = 0.83, Count = 19
escapeSyntaxParser -> getChild: Probability = 0.09, Count = 2
escapeSyntaxParser -> .toQueryString: Probability = 0.09, Count = 2
"^"+ -> "^"+: Probability = 1.00, Count = 1
GetValueString -> getValueString: Probability = 1.00, Count = 4
GetChild -> getChild: Probability = 1.00, Count = 9
.ToQueryString -> .toQueryString: Probability = 1.00, Count = 2
GetInvalidationResponse -> GetInvalidationResult: Probability = 1.00, Count = 1
GetInvalidation -> getInvalidation: Probability = 1.00, Count = 1
GetInvalidationRequest -> GetInvalidationRequest: Probability = 1.00, Count = 2
Invoke<GetInvalidationResponse> -> executeGetInvalidation: Probability = 1.00, Count = 1
cmp -> prefixCompare: Probability = 0.03, Count = 3
cmp -> cmp: Probability = 0.83, Count = 85
cmp -> other._relativeDecimalExponent: Probability = 0.01, Count = 1
cmp -> components[i].compareTo: Probability = 0.01, Count = 1
cmp -> other.components[j]: Probability = 0.01, Count = 1
cmp -> other.w1: Probability = 0.02, Count = 2
cmp -> other.w2: Probability = 0.02, Count = 2
cmp -> other.w3: Probability = 0.02, Count = 2
cmp -> other.w4: Probability = 0.02, Count = 2
cmp -> other.w5: Probability = 0.02, Count = 2
cmp -> bs[p]: Probability = 0.01, Count = 1
NB.CompareUInt32 -> NB.compareUInt32: Probability = 1.00, Count = 25
w1, -> w1,: Probability = 1.00, Count = 7
Mask -> mask: Probability = 1.00, Count = 16
w2, -> w2,: Probability = 1.00, Count = 7
2, -> 2,: Probability = 1.00, Count = 18
w3, -> w3,: Probability = 1.00, Count = 7
3, -> 3,: Probability = 0.77, Count = 10
3, -> 1:w2: Probability = 0.08, Count = 1
3, -> 2:w3: Probability = 0.08, Count = 1
3, -> 3:w4: Probability = 0.08, Count = 1
w4, -> w4,: Probability = 1.00, Count = 7
4, -> 4,: Probability = 1.00, Count = 13
w5, -> w5,: Probability = 1.00, Count = 6
5, -> 5,: Probability = 1.00, Count = 4
AddApplicationInputProcessingConfigurationResponse -> AddApplicationInputProcessingConfigurationResult: Probability = 1.00, Count = 1
AddApplicationInputProcessingConfiguration -> addApplicationInputProcessingConfiguration: Probability = 1.00, Count = 1
AddApplicationInputProcessingConfigurationRequest -> AddApplicationInputProcessingConfigurationRequest: Probability = 1.00, Count = 1
Invoke<AddApplicationInputProcessingConfigurationResponse> -> executeAddApplicationInputProcessingConfiguration: Probability = 1.00, Count = 1
TermRangeQuery -> TermRangeQuery: Probability = 1.00, Count = 5
NewStringRange -> newStringRange: Probability = 1.00, Count = 1
field, -> field,: Probability = 1.00, Count = 26
lowerTerm, -> lowerTerm,: Probability = 1.00, Count = 3
upperTerm, -> upperTerm,: Probability = 1.00, Count = 3
includeLower, -> includeLower,: Probability = 1.00, Count = 4
includeUpper -> includeUpper: Probability = 1.00, Count = 7
lower -> lower: Probability = 1.00, Count = 2
lowerTerm -> lowerTerm: Probability = 1.00, Count = 8
upperTerm -> upperTerm: Probability = 1.00, Count = 7
lower, -> lower,: Probability = 1.00, Count = 3
upper, -> upper,: Probability = 1.00, Count = 2
FV -> fv: Probability = 1.00, Count = 4
r, -> r,: Probability = 0.94, Count = 32
r, -> pmt: Probability = 0.06, Count = 2
nper, -> nper,: Probability = 1.00, Count = 22
pv, -> pv,: Probability = 1.00, Count = 17
pv -> pv: Probability = 1.00, Count = 8
Math.Pow -> Math.pow: Probability = 0.94, Count = 16
Math.Pow -> double: Probability = 0.06, Count = 1
nper -> nper: Probability = 1.00, Count = 3
CheckExternSheet -> checkExternSheet: Probability = 1.00, Count = 4
firstSheetIndex, -> firstSheetIndex,: Probability = 1.00, Count = 7
lastSheetIndex -> lastSheetIndex: Probability = 0.73, Count = 11
lastSheetIndex -> _externSheetRecord.getRefIxForSheet: Probability = 0.13, Count = 2
lastSheetIndex -> _externSheetRecord.addRef: Probability = 0.13, Count = 2
thisWbIndex -> thisWbIndex: Probability = 1.00, Count = 3
_externalBookBlocks.Length -> _externalBookBlocks.length: Probability = 1.00, Count = 5
SupBookRecord -> SupBookRecord: Probability = 1.00, Count = 18
"Could -> "Could: Probability = 1.00, Count = 3
find -> find: Probability = 1.00, Count = 6
thisWbIndex, -> thisWbIndex,: Probability = 1.00, Count = 2
DescribeSentimentDetectionJobResponse -> DescribeSentimentDetectionJobResult: Probability = 1.00, Count = 1
DescribeSentimentDetectionJob -> describeSentimentDetectionJob: Probability = 1.00, Count = 1
DescribeSentimentDetectionJobRequest -> DescribeSentimentDetectionJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeSentimentDetectionJobResponse> -> executeDescribeSentimentDetectionJob: Probability = 1.00, Count = 1
"0x" -> "0x": Probability = 0.94, Count = 15
"0x" -> .append: Probability = 0.06, Count = 1
HexDump.ToHex -> HexDump.toHex: Probability = 1.00, Count = 29
Units -> getUnits: Probability = 1.00, Count = 2
Environment.NewLine -> System.getProperty: Probability = 0.51, Count = 18
Environment.NewLine -> "line.separator": Probability = 0.49, Count = 17
java.util.NavigableMap<K, -> NavigableMap<K,: Probability = 1.00, Count = 7
V> -> V>: Probability = 0.90, Count = 37
V> -> {: Probability = 0.02, Count = 1
V> -> HashEntry<K,V>: Probability = 0.02, Count = 1
V> -> e: Probability = 0.05, Count = 2
tailMap -> tailMap: Probability = 1.00, Count = 2
K -> K: Probability = 0.90, Count = 38
K -> null,: Probability = 0.10, Count = 4
inclusive -> inclusive: Probability = 1.00, Count = 4
java.util.TreeMap.Bound -> Bound: Probability = 0.67, Count = 4
java.util.TreeMap.Bound -> toInclusive: Probability = 0.17, Count = 1
java.util.TreeMap.Bound -> INCLUSIVE: Probability = 0.17, Count = 1
fromBound -> fromBound: Probability = 1.00, Count = 2
java.util.TreeMap.Bound.INCLUSIVE: -> INCLUSIVE: Probability = 0.75, Count = 3
java.util.TreeMap.Bound.INCLUSIVE: -> toInclusive: Probability = 0.25, Count = 1
java.util.TreeMap.Bound.EXCLUSIVE -> EXCLUSIVE: Probability = 1.00, Count = 4
this.subMap -> subMap: Probability = 0.86, Count = 6
this.subMap -> EXCLUSIVE: Probability = 0.14, Count = 1
fromBound, -> fromBound,: Probability = 1.00, Count = 2
java.util.TreeMap.Bound.NO_BOUND -> NO_BOUND: Probability = 1.00, Count = 1
Ref -> Ref: Probability = 0.90, Count = 43
Ref -> put: Probability = 0.02, Count = 1
Ref -> final: Probability = 0.04, Count = 2
Ref -> o1,: Probability = 0.02, Count = 1
Ref -> o2: Probability = 0.02, Count = 1
o1, -> o1,: Probability = 1.00, Count = 7
o2 -> o2: Probability = 0.90, Count = 9
o2 -> o1.getName: Probability = 0.10, Count = 1
Sharpen.Runtime.CompareOrdinal -> o1.getName: Probability = 1.00, Count = 2
o1.GetName -> .compareTo: Probability = 1.00, Count = 2
o2.GetName -> o2.getName: Probability = 1.00, Count = 1
PutEventsConfigurationResponse -> PutEventsConfigurationResult: Probability = 1.00, Count = 1
PutEventsConfiguration -> putEventsConfiguration: Probability = 1.00, Count = 1
PutEventsConfigurationRequest -> PutEventsConfigurationRequest: Probability = 1.00, Count = 1
Invoke<PutEventsConfigurationResponse> -> executePutEventsConfiguration: Probability = 1.00, Count = 1
DetachFromIndexResponse -> DetachFromIndexResult: Probability = 1.00, Count = 1
DetachFromIndex -> detachFromIndex: Probability = 1.00, Count = 1
DetachFromIndexRequest -> DetachFromIndexRequest: Probability = 1.00, Count = 1
Invoke<DetachFromIndexResponse> -> executeDetachFromIndex: Probability = 1.00, Count = 1
RebaseCommand -> RebaseCommand: Probability = 1.00, Count = 2
Rebase -> rebase: Probability = 1.00, Count = 1
ISearchGroup<T> -> SearchGroup<T>: Probability = 0.67, Count = 2
ISearchGroup<T> -> iter.hasNext: Probability = 0.33, Count = 1
Next -> next: Probability = 0.96, Count = 27
Next -> objItr.hasNext: Probability = 0.04, Count = 1
group -> group: Probability = 1.00, Count = 9
iter.Current -> iter.next: Probability = 1.00, Count = 2
pass -> "group.sortValues: Probability = 0.14, Count = 1
pass -> pass: Probability = 0.57, Count = 4
pass -> fillFields=true: Probability = 0.14, Count = 1
pass -> collector": Probability = 0.14, Count = 1
UpdateMLModelResponse -> UpdateMLModelResult: Probability = 1.00, Count = 1
UpdateMLModel -> updateMLModel: Probability = 1.00, Count = 1
UpdateMLModelRequest -> UpdateMLModelRequest: Probability = 1.00, Count = 1
Invoke<UpdateMLModelResponse> -> executeUpdateMLModel: Probability = 1.00, Count = 1
CreateIPSetResponse -> CreateIPSetResult: Probability = 1.00, Count = 1
CreateIPSet -> createIPSet: Probability = 1.00, Count = 1
CreateIPSetRequest -> CreateIPSetRequest: Probability = 1.00, Count = 1
Invoke<CreateIPSetResponse> -> executeCreateIPSet: Probability = 1.00, Count = 1
FieldDateResolutionFCListener -> FieldDateResolutionFCListener: Probability = 1.00, Count = 1
QueryConfigHandler -> QueryConfigHandler: Probability = 1.00, Count = 6
this.config -> this.config: Probability = 1.00, Count = 1
containsValue -> containsValue: Probability = 1.00, Count = 3
tab -> tab: Probability = 1.00, Count = 16
table -> table: Probability = 1.00, Count = 18
len -> len: Probability = 0.82, Count = 353
len -> oversized: Probability = 0.00, Count = 1
len -> plural.apply: Probability = 0.00, Count = 1
len -> unification.apply: Probability = 0.00, Count = 1
len -> adverb.apply: Probability = 0.00, Count = 1
len -> augmentative.apply: Probability = 0.00, Count = 1
len -> noun.apply: Probability = 0.00, Count = 1
len -> verb.apply: Probability = 0.00, Count = 1
len -> vowel.apply: Probability = 0.00, Count = 1
len -> 'á':: Probability = 0.00, Count = 1
len -> 'i': Probability = 0.00, Count = 2
len -> 'u': Probability = 0.01, Count = 3
len -> "len: Probability = 0.01, Count = 3
len -> rules[i].matches: Probability = 0.00, Count = 1
len -> rules[i].replace: Probability = 0.00, Count = 1
len -> removePossessives: Probability = 0.00, Count = 1
len -> len,: Probability = 0.00, Count = 2
len -> this.len: Probability = 0.00, Count = 1
len -> "file: Probability = 0.00, Count = 1
len -> delete": Probability = 0.00, Count = 1
len -> in.update: Probability = 0.00, Count = 1
len -> suffixes[i].length,: Probability = 0.00, Count = 1
len -> suffixes[i].length: Probability = 0.00, Count = 1
len -> 'ä':case: Probability = 0.00, Count = 2
len -> step1: Probability = 0.00, Count = 2
len -> step2: Probability = 0.00, Count = 2
len -> origLen: Probability = 0.00, Count = 2
len -> rule0: Probability = 0.00, Count = 1
len -> rule1: Probability = 0.00, Count = 1
len -> rule2: Probability = 0.00, Count = 1
len -> rule3: Probability = 0.00, Count = 1
len -> rule4: Probability = 0.00, Count = 1
len -> rule5: Probability = 0.00, Count = 1
len -> rule6: Probability = 0.00, Count = 1
len -> rule7: Probability = 0.00, Count = 1
len -> rule8: Probability = 0.00, Count = 1
len -> rule9: Probability = 0.00, Count = 1
len -> rule10: Probability = 0.00, Count = 1
len -> rule11: Probability = 0.00, Count = 1
len -> rule12: Probability = 0.00, Count = 1
len -> rule13: Probability = 0.00, Count = 1
len -> rule14: Probability = 0.00, Count = 1
len -> rule15: Probability = 0.00, Count = 1
len -> rule16: Probability = 0.00, Count = 1
len -> rule17: Probability = 0.00, Count = 1
len -> rule18: Probability = 0.00, Count = 1
len -> rule19: Probability = 0.00, Count = 1
len -> rule20: Probability = 0.00, Count = 1
len -> rule21: Probability = 0.00, Count = 1
len -> rule22: Probability = 0.00, Count = 1
len -> left: Probability = 0.01, Count = 3
len -> upto,: Probability = 0.00, Count = 2
len -> off: Probability = 0.00, Count = 2
len -> upto: Probability = 0.00, Count = 2
len -> int: Probability = 0.00, Count = 1
len -> 'å':: Probability = 0.00, Count = 1
len -> 'ö':: Probability = 0.00, Count = 1
len -> step3: Probability = 0.00, Count = 1
len -> norm1: Probability = 0.00, Count = 1
len -> norm2: Probability = 0.00, Count = 1
len -> "ища": Probability = 0.00, Count = 1
len -> removeArticle: Probability = 0.00, Count = 1
len -> removePlural: Probability = 0.00, Count = 1
tab.Length -> tab.length: Probability = 1.00, Count = 12
e.next -> e.next: Probability = 0.61, Count = 14
e.next -> e.key: Probability = 0.30, Count = 7
e.next -> prev.next: Probability = 0.09, Count = 2
e.value -> e.value: Probability = 1.00, Count = 12
entryForNullKey -> entryForNullKey: Probability = 1.00, Count = 5
DescribeWorkspaceBundlesResponse -> DescribeWorkspaceBundlesResult: Probability = 1.00, Count = 2
DescribeWorkspaceBundles -> describeWorkspaceBundles: Probability = 1.00, Count = 2
DescribeWorkspaceBundlesRequest -> DescribeWorkspaceBundlesRequest: Probability = 0.67, Count = 2
DescribeWorkspaceBundlesRequest -> describeWorkspaceBundles: Probability = 0.33, Count = 1
Invoke<DescribeWorkspaceBundlesResponse> -> executeDescribeWorkspaceBundles: Probability = 1.00, Count = 1
DocsEnum -> PostingsEnum: Probability = 0.75, Count = 3
DocsEnum -> postingsEnum: Probability = 0.25, Count = 1
Reset -> reset: Probability = 1.00, Count = 62
postings -> postings: Probability = 0.86, Count = 6
postings -> postings!=null: Probability = 0.14, Count = 1
this.postings -> this.postings: Probability = 1.00, Count = 3
upto -> upto: Probability = 0.93, Count = 43
upto -> bufferOffset: Probability = 0.02, Count = 1
upto -> pool.allocSlice: Probability = 0.02, Count = 1
upto -> slice,: Probability = 0.02, Count = 1
Serialize -> serialize: Probability = 1.00, Count = 135
ILittleEndianOutput -> LittleEndianOutput: Probability = 0.92, Count = 136
ILittleEndianOutput -> out: Probability = 0.07, Count = 10
ILittleEndianOutput -> out.writeShort: Probability = 0.01, Count = 2
out1 -> out: Probability = 0.95, Count = 172
out1 -> getSid: Probability = 0.01, Count = 1
out1 -> ): Probability = 0.01, Count = 1
out1 -> _formula1.getEncodedTokenSize: Probability = 0.01, Count = 1
out1 -> _not_used_1: Probability = 0.01, Count = 1
out1 -> _formula1.serializeTokens: Probability = 0.01, Count = 1
out1 -> _formula2.getEncodedTokenSize: Probability = 0.01, Count = 1
out1 -> _not_used_2: Probability = 0.01, Count = 1
out1 -> _formula2.serializeTokens: Probability = 0.01, Count = 1
out1 -> _regions.serialize: Probability = 0.01, Count = 1
out1 -> {: Probability = 0.01, Count = 1
out1.WriteShort -> out.writeShort: Probability = 0.88, Count = 236
out1.WriteShort -> getHorizontalHold: Probability = 0.00, Count = 1
out1.WriteShort -> getVerticalHold: Probability = 0.00, Count = 1
out1.WriteShort -> getActiveSheetIndex: Probability = 0.00, Count = 1
out1.WriteShort -> getFirstVisibleTab: Probability = 0.00, Count = 1
out1.WriteShort -> getNumSelectedTabs: Probability = 0.00, Count = 1
out1.WriteShort -> getTabWidthRatio: Probability = 0.00, Count = 1
out1.WriteShort -> jt[i]: Probability = 0.00, Count = 1
out1.WriteShort -> field_1_objectType: Probability = 0.00, Count = 1
out1.WriteShort -> field_2_objectId: Probability = 0.00, Count = 1
out1.WriteShort -> field_3_option: Probability = 0.00, Count = 1
out1.WriteShort -> getReadOnly: Probability = 0.00, Count = 1
out1.WriteShort -> getTopRow: Probability = 0.00, Count = 1
out1.WriteShort -> getLeftCol: Probability = 0.00, Count = 1
out1.WriteShort -> getHeaderColor: Probability = 0.00, Count = 1
out1.WriteShort -> getPageBreakZoom: Probability = 0.00, Count = 1
out1.WriteShort -> getNormalZoom: Probability = 0.00, Count = 1
out1.WriteShort -> getFontHeight: Probability = 0.00, Count = 1
out1.WriteShort -> getColorPaletteIndex: Probability = 0.00, Count = 1
out1.WriteShort -> getRowNumber: Probability = 0.00, Count = 1
out1.WriteShort -> getOptimize: Probability = 0.00, Count = 1
out1.WriteShort -> getOptionFlags: Probability = 0.00, Count = 1
out1.WriteShort -> getOptionFlags2: Probability = 0.00, Count = 1
out1.WriteShort -> out.writeLong: Probability = 0.00, Count = 1
out1.WriteShort -> isNameMultiByte: Probability = 0.01, Count = 3
out1.WriteShort -> field_6_name_text,: Probability = 0.01, Count = 2
out1.WriteShort -> linkSize: Probability = 0.01, Count = 2
out1.WriteShort -> _unknownPostFormulaByte: Probability = 0.01, Count = 2
out1.WriteShort -> getColumnWidth: Probability = 0.00, Count = 1
sid -> sid: Probability = 0.98, Count = 49
sid -> isNeverEncryptedRecord: Probability = 0.02, Count = 1
_reserved0 -> _reserved0: Probability = 1.00, Count = 5
out1.WriteInt -> out.writeInt: Probability = 0.80, Count = 72
out1.WriteInt -> field_5_x: Probability = 0.01, Count = 1
out1.WriteInt -> field_6_y: Probability = 0.01, Count = 1
out1.WriteInt -> field_2_reserved1: Probability = 0.01, Count = 1
out1.WriteInt -> field_3_reserved2: Probability = 0.01, Count = 1
out1.WriteInt -> field_4_reserved3: Probability = 0.01, Count = 1
out1.WriteInt -> field_4_reserved1: Probability = 0.01, Count = 1
out1.WriteInt -> field_5_reserved2: Probability = 0.01, Count = 1
out1.WriteInt -> getLastRowAdd1: Probability = 0.01, Count = 1
out1.WriteInt -> field_4_zero: Probability = 0.01, Count = 1
out1.WriteInt -> getXPosition: Probability = 0.01, Count = 1
out1.WriteInt -> getYPosition: Probability = 0.01, Count = 1
out1.WriteInt -> getHorizontalPos: Probability = 0.01, Count = 1
out1.WriteInt -> getVerticalPos: Probability = 0.01, Count = 1
out1.WriteInt -> getObjectID: Probability = 0.01, Count = 1
out1.WriteInt -> getDVRecNo: Probability = 0.01, Count = 1
out1.WriteInt -> field_6_zero1: Probability = 0.01, Count = 1
out1.WriteInt -> field_7_zero2: Probability = 0.01, Count = 1
out1.WriteInt -> field_8_zero3: Probability = 0.01, Count = 1
_engineId -> _engineId: Probability = 1.00, Count = 4
allocate -> allocate: Probability = 1.00, Count = 5
capacity_1 -> capacity: Probability = 1.00, Count = 20
java.nio.ReadWriteCharArrayBuffer -> ReadWriteCharArrayBuffer: Probability = 1.00, Count = 2
ToFormulaString -> toFormulaString: Probability = 1.00, Count = 49
String[] -> String[]: Probability = 0.95, Count = 36
String[] -> ebr.getURL: Probability = 0.05, Count = 2
operands -> operands: Probability = 1.00, Count = 24
operands[0] -> operands[: Probability = 0.31, Count = 14
operands[0] -> 0: Probability = 0.27, Count = 12
operands[0] -> ]: Probability = 0.27, Count = 12
operands[0] -> operands[0]: Probability = 0.11, Count = 5
operands[0] -> 0]: Probability = 0.04, Count = 2
operands[1] -> operands[: Probability = 0.31, Count = 11
operands[1] -> 1: Probability = 0.31, Count = 11
operands[1] -> ]: Probability = 0.31, Count = 11
operands[1] -> operands[1]: Probability = 0.08, Count = 3
DeletePipelineResponse -> DeletePipelineResult: Probability = 1.00, Count = 1
DeletePipeline -> deletePipeline: Probability = 1.00, Count = 1
DeletePipelineRequest -> DeletePipelineRequest: Probability = 1.00, Count = 1
Invoke<DeletePipelineResponse> -> executeDeletePipeline: Probability = 1.00, Count = 1
InterfaceHdrRecord -> InterfaceHdrRecord: Probability = 1.00, Count = 3
codePage -> codePage: Probability = 1.00, Count = 2
_codepage -> _codepage: Probability = 1.00, Count = 4
DescribeScalingParametersResponse -> DescribeScalingParametersResult: Probability = 1.00, Count = 1
DescribeScalingParameters -> describeScalingParameters: Probability = 1.00, Count = 1
DescribeScalingParametersRequest -> DescribeScalingParametersRequest: Probability = 1.00, Count = 1
Invoke<DescribeScalingParametersResponse> -> executeDescribeScalingParameters: Probability = 1.00, Count = 1
higherEntry -> higherEntry: Probability = 1.00, Count = 1
this._enclosing.immutableCopy -> immutableCopy: Probability = 1.00, Count = 7
this.findBounded -> findBounded: Probability = 1.00, Count = 8
java.util.TreeMap.Relation.HIGHER -> HIGHER: Probability = 1.00, Count = 2
CreateSpotDatafeedSubscriptionRequest -> CreateSpotDatafeedSubscriptionRequest: Probability = 1.00, Count = 2
bucket -> bucket: Probability = 0.71, Count = 10
bucket -> utf8,: Probability = 0.07, Count = 1
bucket -> "Bucket: Probability = 0.07, Count = 1
bucket -> scratch.append: Probability = 0.14, Count = 2
_bucket -> setBucket: Probability = 1.00, Count = 2
CultureInfo.InvariantCulture -> ): Probability = 0.89, Count = 8
CultureInfo.InvariantCulture -> Integer.parseInt: Probability = 0.11, Count = 1
UDFFinder -> UDFFinder: Probability = 1.00, Count = 6
GetUDFFinder -> getUDFFinder: Probability = 1.00, Count = 1
_uBook.GetUDFFinder -> _uBook.getUDFFinder: Probability = 1.00, Count = 2
ExternalName -> ExternalName: Probability = 1.00, Count = 4
GetExternalName -> getExternalName: Probability = 1.00, Count = 3
nameName, -> nameName,: Probability = 1.00, Count = 2
externalWorkbookNumber -> externalWorkbookNumber: Probability = 1.00, Count = 13
"XSSF-style -> "XSSF-style: Probability = 1.00, Count = 2
external -> external: Probability = 1.00, Count = 3
names -> names: Probability = 1.00, Count = 7
are -> are: Probability = 1.00, Count = 9
supported -> supported: Probability = 0.89, Count = 8
supported -> READ: Probability = 0.11, Count = 1
HSSF" -> HSSF": Probability = 1.00, Count = 2
ris -> ris: Probability = 0.25, Count = 2
ris -> ris.readShort: Probability = 0.75, Count = 6
:base -> super: Probability = 0.62, Count = 10
:base -> {: Probability = 0.38, Count = 6
biff2_sid -> biff2_sid: Probability = 1.00, Count = 3
IsBiff2 -> isBiff2: Probability = 1.00, Count = 3
field_4_value -> field_4_value: Probability = 1.00, Count = 3
valueLongBits -> valueLongBits: Probability = 1.00, Count = 5
specialCachedValue -> specialCachedValue: Probability = 1.00, Count = 7
BitConverter.Int64BitsToDouble -> Double.longBitsToDouble: Probability = 1.00, Count = 4
field_5_options -> field_5_options: Probability = 1.00, Count = 2
nBytesAvailable -> nBytesAvailable: Probability = 0.67, Count = 2
nBytesAvailable -> expression_len,: Probability = 0.33, Count = 1
Stem -> stem: Probability = 0.95, Count = 20
Stem -> List<CharsRef>: Probability = 0.05, Count = 1
s.Length -> s.length: Probability = 1.00, Count = 19
"this -> "this: Probability = 0.86, Count = 12
"this -> "This: Probability = 0.14, Count = 2
stemmer -> stemmer: Probability = 1.00, Count = 7
requires -> requires: Probability = 1.00, Count = 3
an -> an: Probability = 1.00, Count = 15
at -> at: Probability = 1.00, Count = 25
least -> least: Probability = 1.00, Count = 12
1" -> 1": Probability = 1.00, Count = 5
oldlen -> oldlen: Probability = 1.00, Count = 5
do -> do: Probability = 0.39, Count = 7
do -> int: Probability = 0.56, Count = 10
do -> =: Probability = 0.06, Count = 1
s[i] -> s[i]: Probability = 1.00, Count = 18
'a' -> 'a': Probability = 1.00, Count = 9
'e' -> 'e': Probability = 1.00, Count = 5
'o' -> s[i]: Probability = 1.00, Count = 7
SameProperties -> sameProperties: Probability = 1.00, Count = 1
FontRecord -> FontRecord: Probability = 0.75, Count = 12
FontRecord -> createNewFont: Probability = 0.06, Count = 1
FontRecord -> createFont: Probability = 0.06, Count = 1
FontRecord -> getFontIndex: Probability = 0.06, Count = 1
FontRecord -> i<=numfonts: Probability = 0.06, Count = 1
other.field_11_font_name -> this.field_11_font_name,: Probability = 0.50, Count = 1
other.field_11_font_name -> other.field_11_font_name: Probability = 0.50, Count = 1
HSSFErrorConstants.ERROR_REF -> FormulaError.REF.getString: Probability = 1.00, Count = 2
StartTextDetectionResponse -> StartTextDetectionResult: Probability = 1.00, Count = 1
StartTextDetection -> startTextDetection: Probability = 1.00, Count = 1
StartTextDetectionRequest -> StartTextDetectionRequest: Probability = 1.00, Count = 1
Invoke<StartTextDetectionResponse> -> executeStartTextDetection: Probability = 1.00, Count = 1
DeleteMessageBatchRequestEntry -> DeleteMessageBatchRequestEntry: Probability = 1.00, Count = 1
id, -> id,: Probability = 0.97, Count = 30
id, -> safeSize: Probability = 0.03, Count = 1
receiptHandle -> receiptHandle: Probability = 0.71, Count = 10
receiptHandle -> ): Probability = 0.29, Count = 4
_id -> setId: Probability = 0.55, Count = 17
_id -> (: Probability = 0.45, Count = 14
id -> id: Probability = 0.95, Count = 111
id -> this.id: Probability = 0.01, Count = 1
id -> setId: Probability = 0.01, Count = 1
id -> MissingObjectException,: Probability = 0.02, Count = 2
id -> IncorrectObjectTypeException,IOException: Probability = 0.02, Count = 2
_receiptHandle -> setReceiptHandle: Probability = 1.00, Count = 4
PatternCaptureGroupTokenFilter -> PatternCaptureGroupTokenFilter: Probability = 1.00, Count = 2
preserveOriginal, -> preserveOriginal,: Probability = 1.00, Count = 1
pattern -> pattern: Probability = 0.86, Count = 31
pattern -> SubStringSearch: Probability = 0.08, Count = 3
pattern -> CellElapsedFormatter: Probability = 0.03, Count = 1
pattern -> PatternSearch: Probability = 0.03, Count = 1
SigningCertificate -> SigningCertificate: Probability = 1.00, Count = 1
certificateId, -> certificateId,: Probability = 1.00, Count = 2
certificateBody, -> certificateBody,: Probability = 1.00, Count = 2
StatusType -> StatusType: Probability = 1.00, Count = 4
status -> status: Probability = 0.83, Count = 20
status -> result: Probability = 0.04, Count = 1
status -> myStatus: Probability = 0.04, Count = 1
status -> READY: Probability = 0.08, Count = 2
_certificateId -> setCertificateId: Probability = 1.00, Count = 3
certificateId -> certificateId: Probability = 1.00, Count = 4
_certificateBody -> setCertificateBody: Probability = 1.00, Count = 4
certificateBody -> certificateBody: Probability = 0.67, Count = 6
certificateBody -> ): Probability = 0.33, Count = 3
_status -> setStatus: Probability = 0.50, Count = 5
_status -> status.toString: Probability = 0.50, Count = 5
DistributionConfig -> DistributionConfig: Probability = 1.00, Count = 3
callerReference, -> callerReference,: Probability = 0.50, Count = 1
callerReference, -> Boolean: Probability = 0.50, Count = 1
enabled -> enabled: Probability = 0.86, Count = 6
enabled -> bitmask,: Probability = 0.14, Count = 1
_callerReference -> setCallerReference: Probability = 1.00, Count = 5
callerReference -> callerReference: Probability = 0.64, Count = 9
callerReference -> ): Probability = 0.36, Count = 5
_enabled -> setEnabled: Probability = 1.00, Count = 1
FastCharStream -> FastCharStream: Probability = 1.00, Count = 2
TextReader -> Reader: Probability = 0.82, Count = 18
TextReader -> java.io.Reader: Probability = 0.18, Count = 4
group_1 -> group: Probability = 1.00, Count = 4
ensureMatch -> ensureMatch: Probability = 1.00, Count = 3
matchOffsets[ -> matchOffsets[: Probability = 1.00, Count = 2
2 -> 2: Probability = 0.99, Count = 168
2 -> <: Probability = 0.01, Count = 1
2 -> /: Probability = 0.01, Count = 1
1] -> 1]: Probability = 0.94, Count = 32
1] -> &&: Probability = 0.03, Count = 1
1] -> levelH[i: Probability = 0.03, Count = 1
next -> next: Probability = 0.77, Count = 49
next -> next,: Probability = 0.03, Count = 2
next -> Node<K,V>: Probability = 0.02, Count = 1
next -> reader.next: Probability = 0.02, Count = 1
next -> !valueIterator.hasNext: Probability = 0.02, Count = 1
next -> findValueIteratorAndKey: Probability = 0.02, Count = 1
next -> cmd.length: Probability = 0.05, Count = 3
next -> dashEven: Probability = 0.03, Count = 2
next -> parts++: Probability = 0.03, Count = 2
next -> part[x++]: Probability = 0.03, Count = 2
this.nextEntry -> nextEntry: Probability = 0.33, Count = 6
this.nextEntry -> super.nextEntry: Probability = 0.22, Count = 4
this.nextEntry -> WriteThroughEntry: Probability = 0.06, Count = 1
this.nextEntry -> e.key,: Probability = 0.06, Count = 1
this.nextEntry -> advance: Probability = 0.11, Count = 2
this.nextEntry -> Maps.immutableEntry: Probability = 0.06, Count = 1
this.nextEntry -> valueIterator.next: Probability = 0.06, Count = 1
this.nextEntry -> nextValue: Probability = 0.06, Count = 1
this.nextEntry -> entryIterator.next: Probability = 0.06, Count = 1
NGit.Api.BlameCommand -> BlameCommand: Probability = 1.00, Count = 5
SetTextComparator -> setTextComparator: Probability = 1.00, Count = 2
RawTextComparator -> RawTextComparator: Probability = 1.00, Count = 3
textComparator -> textComparator: Probability = 1.00, Count = 5
this.textComparator -> this.textComparator: Probability = 1.00, Count = 1
Pop -> pop: Probability = 1.00, Count = 2
size -> size: Probability = 0.90, Count = 181
size -> field_1_numShapes: Probability = 0.00, Count = 1
size -> field_2_lastMSOSPID: Probability = 0.00, Count = 1
size -> field_5_fileIdClusters.clear: Probability = 0.00, Count = 1
size -> numIdClusters: Probability = 0.01, Count = 2
size -> bytesRemaining-size: Probability = 0.00, Count = 1
size -> drawingGroupId: Probability = 0.01, Count = 2
size -> numShapeIdsUsed: Probability = 0.01, Count = 2
size -> fic: Probability = 0.01, Count = 2
size -> field_5_fileIdClusters.add: Probability = 0.00, Count = 1
size -> maxDgId: Probability = 0.00, Count = 1
size -> maxDgId,: Probability = 0.00, Count = 1
size -> vvX.getSize: Probability = 0.00, Count = 1
size -> vvY.getSize: Probability = 0.00, Count = 1
size -> int: Probability = 0.00, Count = 1
size -> .getSize: Probability = 0.00, Count = 1
size -> "write: Probability = 0.00, Count = 1
heap[1] -> heap[1]: Probability = 0.88, Count = 7
heap[1] -> !lessThan: Probability = 0.12, Count = 1
heap[size] -> heap[size]: Probability = 1.00, Count = 3
default -> null: Probability = 1.00, Count = 35
size-- -> size--: Probability = 1.00, Count = 4
DownHeap -> downHeap: Probability = 1.00, Count = 2
"arc=" -> fields=": Probability = 0.29, Count = 2
"arc=" -> "arc=": Probability = 0.29, Count = 2
"arc=" -> fstArc: Probability = 0.29, Count = 2
"arc=" -> fields.size: Probability = 0.14, Count = 1
fstArc -> fields.size: Probability = 1.00, Count = 1
state=" -> ",delegate=": Probability = 0.29, Count = 2
state=" -> postingsReader: Probability = 0.29, Count = 2
state=" -> state=": Probability = 0.29, Count = 2
state=" -> fsaState: Probability = 0.14, Count = 1
fsaState -> ": Probability = 0.67, Count = 2
fsaState -> fsaState: Probability = 0.33, Count = 1
ShortenRefName -> shortenRefName: Probability = 1.00, Count = 1
noteRefName -> noteRefName: Probability = 1.00, Count = 2
noteRefName.StartsWith -> noteRefName.startsWith: Probability = 1.00, Count = 1
Constants.R_NOTES -> Constants.R_NOTES: Probability = 1.00, Count = 1
Sharpen.Runtime.Substring -> noteRefName.substring: Probability = 0.33, Count = 1
Sharpen.Runtime.Substring -> n.substring: Probability = 0.67, Count = 2
noteRefName, -> Constants.R_NOTES.length: Probability = 1.00, Count = 1
DescribeDomainsResponse -> DescribeDomainsResult: Probability = 1.00, Count = 2
DescribeDomains -> describeDomains: Probability = 1.00, Count = 3
DescribeDomainsRequest -> DescribeDomainsRequest: Probability = 1.00, Count = 2
Available -> available: Probability = 1.00, Count = 7
_le.Available -> ccis.available: Probability = 1.00, Count = 1
GetContentModerationResponse -> GetContentModerationResult: Probability = 1.00, Count = 1
GetContentModeration -> getContentModeration: Probability = 1.00, Count = 1
GetContentModerationRequest -> GetContentModerationRequest: Probability = 1.00, Count = 1
Invoke<GetContentModerationResponse> -> executeGetContentModeration: Probability = 1.00, Count = 1
PrintStream -> PrintStream: Probability = 1.00, Count = 2
System.ArgumentNullException -> NullPointerException: Probability = 1.00, Count = 23
ramBytesUsed -> ramBytesUsed: Probability = 0.55, Count = 6
ramBytesUsed -> postingsReader.ramBytesUsed: Probability = 0.18, Count = 2
ramBytesUsed -> r.ramBytesUsed: Probability = 0.18, Count = 2
ramBytesUsed -> fields.values: Probability = 0.09, Count = 1
foreach -> for: Probability = 0.87, Count = 171
foreach -> :: Probability = 0.05, Count = 9
foreach -> ArrayList<>: Probability = 0.06, Count = 12
foreach -> Map.Entry<String,: Probability = 0.02, Count = 3
foreach -> entry: Probability = 0.01, Count = 1
TermsReader -> TermsReader: Probability = 1.00, Count = 5
fields.Values -> fields.values: Probability = 1.00, Count = 4
GetIntegrationResponse -> GetIntegrationResult: Probability = 0.50, Count = 1
GetIntegrationResponse -> getIntegrationResponse: Probability = 0.50, Count = 1
GetIntegration -> getIntegration: Probability = 1.00, Count = 1
GetIntegrationRequest -> GetIntegrationRequest: Probability = 1.00, Count = 1
Invoke<GetIntegrationResponse> -> executeGetIntegration: Probability = 1.00, Count = 1
setVisibility -> setVisibility: Probability = 1.00, Count = 1
v -> v: Probability = 0.82, Count = 136
v -> getVisibility: Probability = 0.01, Count = 1
v -> super.setVisibility: Probability = 0.01, Count = 1
v -> GONE: Probability = 0.01, Count = 1
v -> INVISIBLE: Probability = 0.01, Count = 1
v -> v.trim: Probability = 0.01, Count = 1
v -> v--: Probability = 0.02, Count = 3
v -> 32: Probability = 0.01, Count = 1
v -> writeContinueIfRequired: Probability = 0.03, Count = 5
v -> _ulrOutput.writeLong: Probability = 0.01, Count = 1
v -> _ulrOutput.writeShort: Probability = 0.01, Count = 1
v -> v=a: Probability = 0.02, Count = 3
v -> v<=b: Probability = 0.02, Count = 3
v -> _ulrOutput.writeDouble: Probability = 0.01, Count = 1
v -> _ulrOutput.writeInt: Probability = 0.01, Count = 1
v -> 0xc0: Probability = 0.01, Count = 1
v -> _ulrOutput.writeByte: Probability = 0.01, Count = 1
v -> smaller.intSet.keys: Probability = 0.01, Count = 1
v -> smaller.intSet.emptyVal: Probability = 0.01, Count = 1
v -> bigger.set: Probability = 0.01, Count = 1
mIndeterminate -> mIndeterminate: Probability = 1.00, Count = 7
stopAnimation -> stopAnimation: Probability = 1.00, Count = 2
startAnimation -> startAnimation: Probability = 1.00, Count = 2
!base.Matches -> !super.matches: Probability = 1.00, Count = 2
StemmerUtil.EndsWith -> endsWith: Probability = 0.58, Count = 7
StemmerUtil.EndsWith -> "а": Probability = 0.08, Count = 1
StemmerUtil.EndsWith -> ||endsWith: Probability = 0.17, Count = 2
StemmerUtil.EndsWith -> "о": Probability = 0.08, Count = 1
StemmerUtil.EndsWith -> "е": Probability = 0.08, Count = 1
len, -> len,: Probability = 0.89, Count = 33
len, -> endsWith: Probability = 0.05, Count = 2
len, -> prefixes[i]: Probability = 0.03, Count = 1
len, -> deleteN: Probability = 0.03, Count = 1
DescribeFleetCapacityResponse -> DescribeFleetCapacityResult: Probability = 1.00, Count = 1
DescribeFleetCapacity -> describeFleetCapacity: Probability = 1.00, Count = 1
DescribeFleetCapacityRequest -> DescribeFleetCapacityRequest: Probability = 1.00, Count = 1
Invoke<DescribeFleetCapacityResponse> -> executeDescribeFleetCapacity: Probability = 1.00, Count = 1
UploadPackInternalServerErrorException -> UploadPackInternalServerErrorException: Probability = 1.00, Count = 1
why -> Throwable: Probability = 0.20, Count = 2
why -> why: Probability = 0.70, Count = 7
why -> .unpackException: Probability = 0.10, Count = 1
Sharpen.Extensions.InitCause -> initCause: Probability = 1.00, Count = 2
GetNetworkResponse -> GetNetworkResult: Probability = 1.00, Count = 1
GetNetwork -> getNetwork: Probability = 1.00, Count = 1
GetNetworkRequest -> GetNetworkRequest: Probability = 1.00, Count = 1
Invoke<GetNetworkResponse> -> executeGetNetwork: Probability = 1.00, Count = 1
AllocatePrivateVirtualInterfaceResponse -> AllocatePrivateVirtualInterfaceResult: Probability = 1.00, Count = 1
AllocatePrivateVirtualInterface -> allocatePrivateVirtualInterface: Probability = 1.00, Count = 1
AllocatePrivateVirtualInterfaceRequest -> AllocatePrivateVirtualInterfaceRequest: Probability = 1.00, Count = 1
Invoke<AllocatePrivateVirtualInterfaceResponse> -> executeAllocatePrivateVirtualInterface: Probability = 1.00, Count = 1
GetDeploymentResponse -> GetDeploymentResult: Probability = 1.00, Count = 1
GetDeployment -> getDeployment: Probability = 1.00, Count = 1
GetDeploymentRequest -> GetDeploymentRequest: Probability = 1.00, Count = 1
Invoke<GetDeploymentResponse> -> executeGetDeployment: Probability = 1.00, Count = 1
UpdateRepoAuthorizationRequest -> UpdateRepoAuthorizationRequest: Probability = 1.00, Count = 1
"cr", -> "cr",: Probability = 0.50, Count = 50
"cr", -> "cr": Probability = 0.50, Count = 50
"2016-06-07", -> "2016-06-07",: Probability = 1.00, Count = 50
"UpdateRepoAuthorization", -> "UpdateRepoAuthorization",: Probability = 1.00, Count = 1
UriPattern -> setUriPattern: Probability = 0.93, Count = 54
UriPattern -> (: Probability = 0.03, Count = 2
UriPattern -> uriPattern: Probability = 0.03, Count = 2
"/repos/[RepoNamespace]/[RepoName]/authorizations/[AuthorizeId]" -> "/repos/[RepoNamespace]/[RepoName]/authorizations/[AuthorizeId]": Probability = 1.00, Count = 2
Method -> setMethod: Probability = 0.50, Count = 114
Method -> (: Probability = 0.50, Count = 114
MethodType.POST -> MethodType.POST: Probability = 0.50, Count = 70
MethodType.POST -> ): Probability = 0.50, Count = 70
FoldToASCII -> foldToASCII: Probability = 1.00, Count = 2
maxSizeNeeded -> maxSizeNeeded: Probability = 0.40, Count = 2
maxSizeNeeded -> char[ArrayUtil.oversize: Probability = 0.20, Count = 1
maxSizeNeeded -> maxSizeNeeded,: Probability = 0.20, Count = 1
maxSizeNeeded -> outputPos: Probability = 0.20, Count = 1
output.Length -> output.length: Probability = 0.70, Count = 14
output.Length -> output.chars,: Probability = 0.10, Count = 2
output.Length -> prefix.length,: Probability = 0.10, Count = 2
output.Length -> output.bytes,: Probability = 0.10, Count = 2
output -> output: Probability = 0.90, Count = 36
output -> result: Probability = 0.05, Count = 2
output -> List: Probability = 0.05, Count = 2
RamUsageEstimator.NUM_BYTES_CHAR -> Character.BYTES: Probability = 1.00, Count = 5
] -> ]: Probability = 0.90, Count = 27
] -> RamUsageEstimator.NUM_BYTES_OBJECT_REF: Probability = 0.07, Count = 2
] -> Integer.BYTES: Probability = 0.03, Count = 1
output, -> output,: Probability = 1.00, Count = 12
preserveOriginal -> preserveOriginal: Probability = 1.00, Count = 6
outputPos -> needToPreserve: Probability = 1.00, Count = 1
state -> state: Probability = 0.91, Count = 59
state -> delegatePostingsFormat.fieldsConsumer: Probability = 0.02, Count = 1
state -> BloomFilteredFieldsConsumer: Probability = 0.02, Count = 1
state -> fieldsConsumer,: Probability = 0.02, Count = 1
state -> state,: Probability = 0.02, Count = 1
state -> parser": Probability = 0.02, Count = 1
state -> this.state: Probability = 0.02, Count = 1
CaptureState -> captureState: Probability = 1.00, Count = 2
HasEntry -> hasEntry: Probability = 1.00, Count = 2
excludes.Contains -> excludes.contains: Probability = 1.00, Count = 1
directory.HasEntry -> directory.hasEntry: Probability = 1.00, Count = 1
SetLockMessage -> setLockMessage: Probability = 1.00, Count = 1
msg -> msg: Probability = 1.00, Count = 25
lockMessage -> lockMessage: Probability = 1.00, Count = 2
ReflogCommand -> ReflogCommand: Probability = 1.00, Count = 4
Reflog -> reflog: Probability = 1.00, Count = 1
FirstRow -> getFirstRow: Probability = 1.00, Count = 9
LastRow -> getLastRow: Probability = 1.00, Count = 4
FirstColumn -> getFirstColumn: Probability = 1.00, Count = 8
LastColumn -> getLastColumn: Probability = 1.00, Count = 7
Response -> response: Probability = 1.00, Count = 2
c.GetResponseCode -> c.getResponseCode: Probability = 1.00, Count = 2
ConnectException -> ConnectException: Probability = 0.35, Count = 9
ConnectException -> ce: Probability = 0.08, Count = 2
ConnectException -> URL: Probability = 0.12, Count = 3
ConnectException -> url: Probability = 0.15, Count = 4
ConnectException -> c.getURL: Probability = 0.08, Count = 2
ConnectException -> out:: Probability = 0.08, Count = 2
ConnectException -> connect".equals: Probability = 0.08, Count = 2
ConnectException -> .connectionTimeOut,: Probability = 0.08, Count = 2
host -> host: Probability = 1.00, Count = 8
ce.Message -> "Connection: Probability = 0.25, Count = 2
ce.Message -> timed: Probability = 0.25, Count = 2
ce.Message -> ce.getMessage: Probability = 0.50, Count = 4
fill -> fill: Probability = 1.00, Count = 14
long[] -> long[]: Probability = 1.00, Count = 66
array, -> array,: Probability = 1.00, Count = 72
array.Length -> array.length: Probability = 1.00, Count = 46
array[i] -> array[i]: Probability = 1.00, Count = 18
PositionOfBof -> getPositionOfBof: Probability = 1.00, Count = 3
field_2_option_flags -> field_2_option_flags: Probability = 1.00, Count = 3
out1.WriteByte -> out.writeByte: Probability = 0.88, Count = 68
out1.WriteByte -> out.write: Probability = 0.01, Count = 1
out1.WriteByte -> getAddMenuCount: Probability = 0.01, Count = 1
out1.WriteByte -> getWSBool2: Probability = 0.01, Count = 1
out1.WriteByte -> getNumberOfOperands: Probability = 0.01, Count = 1
out1.WriteByte -> field_1_majorTickType: Probability = 0.01, Count = 1
out1.WriteByte -> field_2_minorTickType: Probability = 0.01, Count = 1
out1.WriteByte -> getFamily: Probability = 0.01, Count = 1
out1.WriteByte -> getCharset: Probability = 0.01, Count = 1
out1.WriteByte -> field_11_font_name.length: Probability = 0.01, Count = 1
StringUtil.PutUnicodeLE -> StringUtil.putUnicodeLE: Probability = 1.00, Count = 7
StringUtil.PutCompressedUnicode -> StringUtil.putCompressedUnicode: Probability = 0.48, Count = 10
StringUtil.PutCompressedUnicode -> out: Probability = 0.19, Count = 4
StringUtil.PutCompressedUnicode -> StringUtil.putUnicodeLE: Probability = 0.10, Count = 2
StringUtil.PutCompressedUnicode -> else: Probability = 0.10, Count = 2
StringUtil.PutCompressedUnicode -> isCommentMultiByte: Probability = 0.14, Count = 3
GetNonBlankTextOrFail -> getNonBlankTextOrFail: Probability = 1.00, Count = 1
XmlElement -> Element: Probability = 0.41, Count = 12
XmlElement -> throws: Probability = 0.24, Count = 7
XmlElement -> ParserException: Probability = 0.24, Count = 7
XmlElement -> getFirstChildOrFail: Probability = 0.03, Count = 1
XmlElement -> getFirstChildElement: Probability = 0.07, Count = 2
GetText -> getText: Probability = 0.95, Count = 18
GetText -> start.getTokenIndex: Probability = 0.05, Count = 1
v.Length -> v.length: Probability = 0.73, Count = 8
v.Length -> v!=null: Probability = 0.27, Count = 3
ParserException -> ParserException: Probability = 1.00, Count = 6
e.ToString -> e.getTagName: Probability = 1.00, Count = 2
has -> has: Probability = 1.00, Count = 7
no -> no: Probability = 1.00, Count = 8
text" -> text": Probability = 1.00, Count = 3
BuildFieldConfig -> buildFieldConfig: Probability = 1.00, Count = 2
FieldConfig -> FieldConfig: Probability = 0.75, Count = 6
FieldConfig -> getFieldConfig: Probability = 0.12, Count = 1
FieldConfig -> StringUtils.toString: Probability = 0.12, Count = 1
fieldConfig -> fieldConfig: Probability = 0.83, Count = 5
fieldConfig -> listener.buildFieldConfig: Probability = 0.17, Count = 1
fieldBoostMap -> Float>: Probability = 0.25, Count = 1
fieldBoostMap -> fieldBoostMap: Probability = 0.50, Count = 2
fieldBoostMap -> ConfigurationKeys.FIELD_BOOST_MAP: Probability = 0.25, Count = 1
this.config.Get -> this.config.get: Probability = 1.00, Count = 3
float? -> Float: Probability = 0.83, Count = 5
float? -> getAndIncrement: Probability = 0.17, Count = 1
boost -> boost: Probability = 0.75, Count = 9
boost -> fieldBoostMap.get: Probability = 0.08, Count = 1
boost -> fieldConfig.getField: Probability = 0.08, Count = 1
boost -> ConfigurationKeys.BOOST,: Probability = 0.08, Count = 1
fieldConfig.Set -> fieldConfig.set: Probability = 1.00, Count = 2
PutLifecyclePolicyResponse -> PutLifecyclePolicyResult: Probability = 1.00, Count = 1
PutLifecyclePolicy -> putLifecyclePolicy: Probability = 1.00, Count = 1
PutLifecyclePolicyRequest -> PutLifecyclePolicyRequest: Probability = 1.00, Count = 1
Invoke<PutLifecyclePolicyResponse> -> executePutLifecyclePolicy: Probability = 1.00, Count = 1
java.util.SortedSet<E> -> SortedSet<E>: Probability = 1.00, Count = 4
subSet -> subSet: Probability = 1.00, Count = 3
E -> E: Probability = 0.82, Count = 127
E -> @SuppressWarnings: Probability = 0.03, Count = 4
E -> "unchecked": Probability = 0.03, Count = 4
E -> e: Probability = 0.01, Count = 1
E -> get: Probability = 0.01, Count = 2
E -> CopyOnWriteArrayList.this: Probability = 0.01, Count = 1
E -> slice.checkElementIndex: Probability = 0.01, Count = 2
E -> slice.checkConcurrentModification: Probability = 0.01, Count = 1
E -> elements: Probability = 0.01, Count = 1
E -> CopyOnWriteArrayList.this.remove: Probability = 0.01, Count = 1
E -> slice.from,: Probability = 0.01, Count = 1
E -> @Override: Probability = 0.03, Count = 4
E -> object: Probability = 0.01, Count = 2
E -> index: Probability = 0.01, Count = 2
E -> CopyOnWriteArrayList.this.set: Probability = 0.01, Count = 1
E -> end,boolean: Probability = 0.01, Count = 1
true, -> true,: Probability = 0.69, Count = 9
true, -> true: Probability = 0.23, Count = 3
true, -> TAG,: Probability = 0.08, Count = 1
end, -> end,: Probability = 0.89, Count = 33
end, -> pathMode: Probability = 0.03, Count = 1
end, -> backingMap.headMap: Probability = 0.03, Count = 1
end, -> Calendar.SATURDAY: Probability = 0.03, Count = 1
end, -> this.calculateNonWeekendHolidays: Probability = 0.03, Count = 1
SetParams -> setParams: Probability = 1.00, Count = 13
@params -> params: Probability = 0.88, Count = 36
@params -> "s": Probability = 0.02, Count = 1
@params -> doWait: Probability = 0.02, Count = 1
@params -> .booleanValue: Probability = 0.02, Count = 1
@params -> this.params: Probability = 0.02, Count = 1
@params -> fieldsToLoad: Probability = 0.02, Count = 1
base.SetParams -> super.setParams: Probability = 0.92, Count = 12
base.SetParams -> params: Probability = 0.08, Count = 1
multiplier -> multiplier: Probability = 0.58, Count = 11
multiplier -> params.substring: Probability = 0.16, Count = 3
multiplier -> params.length: Probability = 0.16, Count = 3
multiplier -> waitTimeSec: Probability = 0.05, Count = 1
multiplier -> this.strategy: Probability = 0.05, Count = 1
@params.EndsWith -> params.endsWith: Probability = 1.00, Count = 3
60 -> 60: Probability = 1.00, Count = 5
3600 -> 3600: Probability = 1.00, Count = 2
double.Parse -> Double.parseDouble: Probability = 1.00, Count = 3
@params, -> params: Probability = 1.00, Count = 5
PutAttributesRequest -> PutAttributesRequest: Probability = 1.00, Count = 3
domainName, -> domainName,: Probability = 1.00, Count = 8
itemName, -> itemName,: Probability = 1.00, Count = 3
List<ReplaceableAttribute> -> java.util.List<ReplaceableAttribute>: Probability = 1.00, Count = 3
attributes, -> attributes,: Probability = 1.00, Count = 1
UpdateCondition -> UpdateCondition: Probability = 1.00, Count = 2
expected -> expected: Probability = 1.00, Count = 9
_domainName -> setDomainName: Probability = 1.00, Count = 11
domainName -> domainName: Probability = 0.56, Count = 14
domainName -> ): Probability = 0.44, Count = 11
_itemName -> setItemName: Probability = 1.00, Count = 5
itemName -> itemName: Probability = 0.64, Count = 7
itemName -> ): Probability = 0.36, Count = 4
_expected -> setExpected: Probability = 1.00, Count = 1
DescribeStreamConsumerResponse -> DescribeStreamConsumerResult: Probability = 1.00, Count = 1
DescribeStreamConsumer -> describeStreamConsumer: Probability = 1.00, Count = 1
DescribeStreamConsumerRequest -> DescribeStreamConsumerRequest: Probability = 1.00, Count = 1
Invoke<DescribeStreamConsumerResponse> -> executeDescribeStreamConsumer: Probability = 1.00, Count = 1
Freeze -> freeze: Probability = 0.83, Count = 5
Freeze -> "must: Probability = 0.17, Count = 1
this.frozen -> this.frozen: Probability = 1.00, Count = 2
FuzzyLikeThisQueryBuilder -> FuzzyLikeThisQueryBuilder: Probability = 1.00, Count = 1
Analyzer -> Analyzer: Probability = 0.74, Count = 25
Analyzer -> Analyzer>: Probability = 0.09, Count = 3
Analyzer -> Constructor<?: Probability = 0.03, Count = 1
Analyzer -> nsme: Probability = 0.03, Count = 1
Analyzer -> FreeTextSuggester: Probability = 0.03, Count = 1
Analyzer -> indexAnalyzer,: Probability = 0.03, Count = 1
Analyzer -> queryAnalyzer,: Probability = 0.03, Count = 1
Analyzer -> grams,: Probability = 0.03, Count = 1
analyzer -> analyzer: Probability = 0.91, Count = 31
analyzer -> .setAnalyzer: Probability = 0.06, Count = 2
analyzer -> this.analyzer: Probability = 0.03, Count = 1
this.analyzer -> this.analyzer: Probability = 1.00, Count = 6
CopyDBClusterSnapshotResponse -> DBClusterSnapshot: Probability = 1.00, Count = 1
CopyDBClusterSnapshot -> copyDBClusterSnapshot: Probability = 1.00, Count = 1
CopyDBClusterSnapshotRequest -> CopyDBClusterSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CopyDBClusterSnapshotResponse> -> executeCopyDBClusterSnapshot: Probability = 1.00, Count = 1
OutputStreamDataOutput -> OutputStreamDataOutput: Probability = 1.00, Count = 1
this._writer -> os: Probability = 1.00, Count = 1
BinaryWriter -> this.os: Probability = 1.00, Count = 1
os -> os: Probability = 0.67, Count = 4
os -> out: Probability = 0.33, Count = 2
FindPattern -> findPattern: Probability = 1.00, Count = 1
pat -> pat: Probability = 0.67, Count = 2
pat -> super.find: Probability = 0.33, Count = 1
k -> k: Probability = 0.78, Count = 135
k -> r2: Probability = 0.01, Count = 1
k -> pList: Probability = 0.01, Count = 2
k -> Property: Probability = 0.01, Count = 2
k -> p: Probability = 0.02, Count = 4
k -> _properties: Probability = 0.01, Count = 1
k -> p.setIndex: Probability = 0.01, Count = 1
k -> pList.add: Probability = 0.01, Count = 1
k -> p.preWrite: Probability = 0.01, Count = 1
k -> ExtSSTRecord.DEFAULT_BUCKET_SIZE: Probability = 0.01, Count = 1
k -> out.getTotalSize: Probability = 0.01, Count = 1
k -> fValue: Probability = 0.01, Count = 2
k -> short: Probability = 0.02, Count = 3
k -> k-1: Probability = 0.01, Count = 1
k -> packValues: Probability = 0.01, Count = 1
k -> ivalues.insert: Probability = 0.01, Count = 1
k -> ivalue,: Probability = 0.01, Count = 1
k -> getNumDbcells: Probability = 0.01, Count = 2
k -> sheet.equalsIgnoreCase: Probability = 0.01, Count = 1
k -> n<k: Probability = 0.01, Count = 2
k -> short[nTabs]: Probability = 0.01, Count = 1
k -> getNameName: Probability = 0.01, Count = 1
k -> nameName.equalsIgnoreCase: Probability = 0.01, Count = 1
k -> mbk.getNumColumns: Probability = 0.01, Count = 1
k -> mrk.getNumColumns: Probability = 0.01, Count = 1
k -> nChooseK: Probability = 0.01, Count = 1
k -> n<0: Probability = 0.01, Count = 1
k -> k<0: Probability = 0.01, Count = 1
k -> d=: Probability = 0.01, Count = 1
UnpackValues -> unpackValues: Probability = 1.00, Count = 1
Murmurhash3_x86_32 -> murmurhash3_x86_32: Probability = 1.00, Count = 2
bytes, -> bytes,: Probability = 0.89, Count = 17
bytes, -> len: Probability = 0.11, Count = 2
seed -> seed: Probability = 1.00, Count = 7
bytes.Bytes, -> bytes.bytes,: Probability = 1.00, Count = 5
bytes.Offset, -> bytes.offset,: Probability = 1.00, Count = 3
bytes.Length, -> bytes.length,: Probability = 1.00, Count = 1
IsOverridable -> isOverridable: Probability = 1.00, Count = 1
overridable -> overridable: Probability = 1.00, Count = 1
UpdateMemberResponse -> UpdateMemberResult: Probability = 1.00, Count = 1
UpdateMember -> updateMember: Probability = 1.00, Count = 1
UpdateMemberRequest -> UpdateMemberRequest: Probability = 1.00, Count = 1
Invoke<UpdateMemberResponse> -> executeUpdateMember: Probability = 1.00, Count = 1
CopyFpgaImageResponse -> CopyFpgaImageResult: Probability = 1.00, Count = 1
CopyFpgaImage -> copyFpgaImage: Probability = 1.00, Count = 1
CopyFpgaImageRequest -> CopyFpgaImageRequest: Probability = 1.00, Count = 1
Invoke<CopyFpgaImageResponse> -> executeCopyFpgaImage: Probability = 1.00, Count = 1
Inform -> inform: Probability = 1.00, Count = 6
IResourceLoader -> ResourceLoader: Probability = 1.00, Count = 6
loader -> loader: Probability = 0.89, Count = 8
loader -> posTaggerModelFile,: Probability = 0.11, Count = 1
OpenNLPOpsFactory.GetPOSTaggerModel -> OpenNLPOpsFactory.getPOSTaggerModel: Probability = 1.00, Count = 1
CellRangeAddress -> CellRangeAddress: Probability = 0.59, Count = 30
CellRangeAddress -> _list.get: Probability = 0.04, Count = 2
CellRangeAddress -> crA.getFirstRow: Probability = 0.04, Count = 2
CellRangeAddress -> crB.getLastRow: Probability = 0.08, Count = 4
CellRangeAddress -> ,: Probability = 0.12, Count = 6
CellRangeAddress -> createEnclosingCellRange: Probability = 0.02, Count = 1
CellRangeAddress -> crA.copy: Probability = 0.02, Count = 1
CellRangeAddress -> minRow: Probability = 0.02, Count = 1
CellRangeAddress -> ?crB.getFirstRow: Probability = 0.02, Count = 1
CellRangeAddress -> :crA.getFirstRow: Probability = 0.02, Count = 1
CellRangeAddress -> int: Probability = 0.02, Count = 1
CellRangeAddress -> hasExactSharedBorder: Probability = 0.02, Count = 1
firstRow -> firstRow: Probability = 1.00, Count = 7
firstCol -> firstCol: Probability = 1.00, Count = 9
lastRow -> lastRow: Probability = 0.40, Count = 4
lastRow -> ,: Probability = 0.50, Count = 5
lastRow -> crB.getFirstColumn: Probability = 0.10, Count = 1
"lastRow -> ": Probability = 0.55, Count = 6
"lastRow -> +: Probability = 0.45, Count = 5
firstCol" -> +: Probability = 0.50, Count = 2
firstCol" -> ": Probability = 0.50, Count = 2
ATNConfig -> ATNConfig: Probability = 0.81, Count = 22
ATNConfig -> fullCtx: Probability = 0.11, Count = 3
ATNConfig -> newSemCtx: Probability = 0.07, Count = 2
a, -> a,: Probability = 0.90, Count = 45
a, -> --s: Probability = 0.06, Count = 3
a, -> a,b: Probability = 0.02, Count = 1
a, -> removalIdx,: Probability = 0.02, Count = 1
a.state.stateNumber -> a.state.stateNumber==b.state.stateNumber&&: Probability = 1.00, Count = 2
b.state.stateNumber -> a.context.equals: Probability = 1.00, Count = 1
a.context.Equals -> b.context: Probability = 1.00, Count = 1
SetPushTags -> setPushTags: Probability = 1.00, Count = 1
refSpecs.AddItem -> refSpecs.add: Probability = 1.00, Count = 4
NGit.Transport.Transport.REFSPEC_TAGS -> Transport.REFSPEC_TAGS: Probability = 1.00, Count = 1
CreateEvaluationResponse -> CreateEvaluationResult: Probability = 1.00, Count = 1
CreateEvaluation -> createEvaluation: Probability = 1.00, Count = 1
CreateEvaluationRequest -> CreateEvaluationRequest: Probability = 1.00, Count = 1
Invoke<CreateEvaluationResponse> -> executeCreateEvaluation: Probability = 1.00, Count = 1
DescribeOrderableDBInstanceOptionsResponse -> DescribeOrderableDBInstanceOptionsResult: Probability = 1.00, Count = 1
DescribeOrderableDBInstanceOptions -> describeOrderableDBInstanceOptions: Probability = 1.00, Count = 1
DescribeOrderableDBInstanceOptionsRequest -> DescribeOrderableDBInstanceOptionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeOrderableDBInstanceOptionsResponse> -> executeDescribeOrderableDBInstanceOptions: Probability = 1.00, Count = 1
GetPosition -> getPosition: Probability = 1.00, Count = 4
currentBlockIndex -> currentBlockIndex: Probability = 1.00, Count = 1
outerInstance.blockSize -> blockSize: Probability = 1.00, Count = 5
currentBlockUpto -> currentBlockUpto: Probability = 1.00, Count = 4
FrenchLightStemFilter -> FrenchLightStemFilter: Probability = 1.00, Count = 1
AssignPrivateIpAddressesResponse -> AssignPrivateIpAddressesResult: Probability = 1.00, Count = 1
AssignPrivateIpAddresses -> assignPrivateIpAddresses: Probability = 1.00, Count = 1
AssignPrivateIpAddressesRequest -> AssignPrivateIpAddressesRequest: Probability = 1.00, Count = 1
Invoke<AssignPrivateIpAddressesResponse> -> executeAssignPrivateIpAddresses: Probability = 1.00, Count = 1
SetExecute -> setExecute: Probability = 1.00, Count = 1
f, -> f,: Probability = 0.62, Count = 5
f, -> f: Probability = 0.38, Count = 3
canExec -> canExec: Probability = 1.00, Count = 1
OperandResolver.GetSingleValue -> OperandResolver.getSingleValue: Probability = 1.00, Count = 24
TwoDEval -> TwoDEval: Probability = 1.00, Count = 11
isRangeLookup -> isRangeLookup: Probability = 1.00, Count = 4
rowIndex -> rowIndex: Probability = 0.79, Count = 37
rowIndex -> maxrow: Probability = 0.06, Count = 3
rowIndex -> SpreadsheetVersion.EXCEL97.getLastRowIndex: Probability = 0.02, Count = 1
rowIndex -> rowIndex+: Probability = 0.04, Count = 2
rowIndex -> _valuesAgg.removeAllCellsValuesForRow: Probability = 0.02, Count = 1
rowIndex -> removeAllCellsValuesForRow: Probability = 0.02, Count = 1
rowIndex -> MAX_ROW_INDEX: Probability = 0.02, Count = 1
rowIndex -> _rows.get: Probability = 0.02, Count = 1
tableArray, -> tableArray,: Probability = 1.00, Count = 6
colIndex -> colIndex: Probability = 1.00, Count = 2
ValueVector -> ValueVector: Probability = 0.88, Count = 7
ValueVector -> vvY: Probability = 0.12, Count = 1
CreateGameSessionResponse -> CreateGameSessionResult: Probability = 1.00, Count = 1
CreateGameSession -> createGameSession: Probability = 1.00, Count = 1
CreateGameSessionRequest -> CreateGameSessionRequest: Probability = 1.00, Count = 1
Invoke<CreateGameSessionResponse> -> executeCreateGameSession: Probability = 1.00, Count = 1
RowRecord -> RowRecord: Probability = 0.67, Count = 10
RowRecord -> rowIndex: Probability = 0.13, Count = 2
RowRecord -> Integer.valueOf: Probability = 0.20, Count = 3
GetRow -> getRow: Probability = 1.00, Count = 13
"The -> "The: Probability = 1.00, Count = 4
number -> number: Probability = 1.00, Count = 33
_rowRecords[rowIndex] -> _rowRecords.get: Probability = 1.00, Count = 1
DescribeClientPropertiesResponse -> DescribeClientPropertiesResult: Probability = 1.00, Count = 1
DescribeClientProperties -> describeClientProperties: Probability = 1.00, Count = 1
DescribeClientPropertiesRequest -> DescribeClientPropertiesRequest: Probability = 1.00, Count = 1
Invoke<DescribeClientPropertiesResponse> -> executeDescribeClientProperties: Probability = 1.00, Count = 1
Builder -> Builder: Probability = 0.81, Count = 17
Builder -> slop: Probability = 0.10, Count = 2
Builder -> PositiveIntOutputs: Probability = 0.10, Count = 2
CompositeReader -> CompositeReader: Probability = 1.00, Count = 1
reader -> reader: Probability = 0.91, Count = 32
reader -> ReaderUtil.subIndex: Probability = 0.03, Count = 1
reader -> starts: Probability = 0.03, Count = 1
reader -> this.reader: Probability = 0.03, Count = 1
this.reader -> this.reader: Probability = 1.00, Count = 7
mark -> synchronized: Probability = 0.16, Count = 3
mark -> mark: Probability = 0.63, Count = 12
mark -> throws: Probability = 0.16, Count = 3
mark -> IOException: Probability = 0.05, Count = 1
readlimit -> readlimit: Probability = 0.75, Count = 9
readlimit -> in.mark: Probability = 0.08, Count = 1
readlimit -> lock: Probability = 0.08, Count = 1
readlimit -> super.mark: Probability = 0.08, Count = 1
inum -> inum: Probability = 1.00, Count = 1
inum.ToString -> inum: Probability = 1.00, Count = 1
NGit.ObjectId -> final: Probability = 0.45, Count = 9
NGit.ObjectId -> ObjectId: Probability = 0.55, Count = 11
@is -> is: Probability = 1.00, Count = 6
@is, -> is,: Probability = 1.00, Count = 2
Slice.ToString -> slice.toString: Probability = 0.20, Count = 2
Slice.ToString -> "MultiDocsAndPositionsEnum: Probability = 0.20, Count = 2
Slice.ToString -> ": Probability = 0.20, Count = 2
Slice.ToString -> Arrays.toString: Probability = 0.20, Count = 2
Slice.ToString -> getSubs: Probability = 0.20, Count = 2
Mode -> getMode: Probability = 0.67, Count = 2
Mode -> mode: Probability = 0.33, Count = 1
this._enclosing.size -> Impl.this.size: Probability = 0.14, Count = 1
this._enclosing.size -> BoundedMap.this.size: Probability = 0.14, Count = 1
this._enclosing.size -> ConcurrentHashMap.this.size: Probability = 0.14, Count = 1
this._enclosing.size -> size: Probability = 0.43, Count = 3
this._enclosing.size -> Hashtable.this.size: Probability = 0.14, Count = 1
hashCode -> hashCode: Probability = 1.00, Count = 3
o.GetHashCode -> objects: Probability = 0.40, Count = 2
o.GetHashCode -> o.hashCode: Probability = 0.60, Count = 3
putFloat -> putFloat: Probability = 1.00, Count = 5
float -> float: Probability = 0.81, Count = 118
float -> final: Probability = 0.08, Count = 12
float -> double: Probability = 0.03, Count = 5
float -> long: Probability = 0.02, Count = 3
float -> k1,: Probability = 0.01, Count = 1
float -> hyperbolicTf: Probability = 0.01, Count = 1
float -> tf_hyper_min: Probability = 0.01, Count = 2
float -> norm: Probability = 0.01, Count = 1
float -> /: Probability = 0.01, Count = 1
float -> max,double: Probability = 0.01, Count = 1
ListJournalS3ExportsForLedgerResponse -> ListJournalS3ExportsForLedgerResult: Probability = 1.00, Count = 1
ListJournalS3ExportsForLedger -> listJournalS3ExportsForLedger: Probability = 1.00, Count = 1
ListJournalS3ExportsForLedgerRequest -> ListJournalS3ExportsForLedgerRequest: Probability = 1.00, Count = 1
Invoke<ListJournalS3ExportsForLedgerResponse> -> executeListJournalS3ExportsForLedger: Probability = 1.00, Count = 1
DeleteMessageBatchResponse -> DeleteMessageBatchResult: Probability = 1.00, Count = 2
DeleteMessageBatch -> deleteMessageBatch: Probability = 1.00, Count = 3
DeleteMessageBatchRequest -> DeleteMessageBatchRequest: Probability = 1.00, Count = 3
Invoke<DeleteMessageBatchResponse> -> executeDeleteMessageBatch: Probability = 1.00, Count = 1
Write -> write: Probability = 0.83, Count = 49
Write -> s: Probability = 0.03, Count = 2
Write -> reserve: Probability = 0.03, Count = 2
Write -> s.length: Probability = 0.03, Count = 2
Write -> s.getChars: Probability = 0.02, Count = 1
Write -> 0,s.length: Probability = 0.02, Count = 1
Write -> len: Probability = 0.03, Count = 2
Sid -> getSid: Probability = 1.00, Count = 6
PtgClass -> getPtgClass: Probability = 0.95, Count = 21
PtgClass -> ): Probability = 0.05, Count = 1
WriteCoordinates -> writeCoordinates: Probability = 1.00, Count = 4
FSTCompletionBuilder -> FSTCompletionBuilder: Probability = 1.00, Count = 1
buckets -> buckets,: Probability = 0.10, Count = 1
buckets -> BytesRefSorter: Probability = 0.10, Count = 1
buckets -> sorter,: Probability = 0.10, Count = 1
buckets -> buckets: Probability = 0.60, Count = 6
buckets -> "Buckets: Probability = 0.10, Count = 1
shareMaxTailLength -> shareMaxTailLength: Probability = 1.00, Count = 2
255 -> 255: Probability = 0.86, Count = 6
255 -> formulas: Probability = 0.14, Count = 1
sorter -> sorter: Probability = 0.40, Count = 2
sorter -> "BytesRefSorter: Probability = 0.20, Count = 1
sorter -> this.sorter: Probability = 0.20, Count = 1
sorter -> this.buckets: Probability = 0.20, Count = 1
null." -> null.": Probability = 1.00, Count = 3
IncRef -> incRef: Probability = 0.75, Count = 3
IncRef -> IncRef: Probability = 0.25, Count = 1
refCount.IncrementAndGet -> refCount.incrementAndGet: Probability = 1.00, Count = 5
Supports -> supports: Probability = 1.00, Count = 1
CredentialItem[] -> CredentialItem...: Probability = 1.00, Count = 2
items -> items: Probability = 1.00, Count = 13
CredentialItem -> CredentialItem: Probability = 1.00, Count = 3
CredentialItem.Username -> CredentialItem.Username: Probability = 1.00, Count = 3
continue -> continue: Probability = 1.00, Count = 48
CredentialItem.Password -> CredentialItem.Password: Probability = 1.00, Count = 5
DeleteVpnConnectionRequest -> DeleteVpnConnectionRequest: Probability = 1.00, Count = 2
vpnConnectionId -> vpnConnectionId: Probability = 1.00, Count = 2
_vpnConnectionId -> setVpnConnectionId: Probability = 1.00, Count = 1
ValueEval[] -> final: Probability = 0.26, Count = 10
ValueEval[] -> ValueEval[]: Probability = 0.74, Count = 29
args.Length -> args.length: Probability = 0.97, Count = 35
args.Length -> ec.getRowIndex: Probability = 0.03, Count = 1
ErrorEval.VALUE_INVALID -> ErrorEval.VALUE_INVALID: Probability = 1.00, Count = 53
args[0], -> args[0],: Probability = 0.96, Count = 26
args[0], -> ec.getColumnIndex: Probability = 0.04, Count = 1
args[1], -> args[1],: Probability = 1.00, Count = 14
args[2], -> args[2],: Probability = 0.50, Count = 7
args[2], -> args[3]: Probability = 0.14, Count = 2
args[2], -> MissingArgEval.instance: Probability = 0.21, Count = 3
args[2], -> 5:: Probability = 0.07, Count = 1
args[2], -> args[4]: Probability = 0.07, Count = 1
args[3] -> args[3]: Probability = 1.00, Count = 3
d.ToString -> d: Probability = 1.00, Count = 2
UpdateUserProfileResponse -> UpdateUserProfileResult: Probability = 1.00, Count = 1
UpdateUserProfile -> updateUserProfile: Probability = 1.00, Count = 1
UpdateUserProfileRequest -> UpdateUserProfileRequest: Probability = 1.00, Count = 1
Invoke<UpdateUserProfileResponse> -> executeUpdateUserProfile: Probability = 1.00, Count = 1
TreeFilter -> RevFilter: Probability = 0.11, Count = 4
TreeFilter -> TreeFilter: Probability = 0.86, Count = 31
TreeFilter -> PathFilter: Probability = 0.03, Count = 1
Clone -> clone: Probability = 0.87, Count = 94
Clone -> copy: Probability = 0.11, Count = 12
Clone -> IndexInput: Probability = 0.02, Count = 2
TreeFilter[] -> final: Probability = 0.44, Count = 8
TreeFilter[] -> RevFilter[]: Probability = 0.11, Count = 2
TreeFilter[] -> TreeFilter[]: Probability = 0.44, Count = 8
s -> s: Probability = 0.81, Count = 181
s -> s.add: Probability = 0.01, Count = 2
s -> s==null: Probability = 0.01, Count = 2
s -> newArray: Probability = 0.02, Count = 4
s -> Object[s: Probability = 0.00, Count = 1
s -> MIN_CAPACITY_INCREMENT: Probability = 0.00, Count = 1
s -> ?MIN_CAPACITY_INCREMENT: Probability = 0.00, Count = 1
s -> newArray,: Probability = 0.01, Count = 3
s -> n/s: Probability = 0.00, Count = 1
s -> :s: Probability = 0.02, Count = 4
s -> tokenizer.nextToken: Probability = 0.00, Count = 1
s -> t==null: Probability = 0.00, Count = 1
s -> "<no: Probability = 0.00, Count = 1
s -> token>": Probability = 0.00, Count = 1
s -> "<"+t.getType: Probability = 0.00, Count = 1
s -> "\n","\\n": Probability = 0.00, Count = 1
s -> "\t","\\t": Probability = 0.00, Count = 1
s -> Object[newCapacity: Probability = 0.00, Count = 1
s -> s.length: Probability = 0.00, Count = 1
s -> "<EOF>": Probability = 0.00, Count = 1
s -> List: Probability = 0.00, Count = 1
s -> getDictionary: Probability = 0.00, Count = 1
s -> !dic.containsKey: Probability = 0.00, Count = 1
s -> fmt: Probability = 0.01, Count = 3
s -> getFormatID: Probability = 0.00, Count = 1
s -> SummaryInformation.FORMAT_ID.equals: Probability = 0.00, Count = 1
s -> PropertyIDMap.getSummaryInformationProperties: Probability = 0.00, Count = 1
s -> DocumentSummaryInformation.FORMAT_ID[0].equals: Probability = 0.00, Count = 1
s -> PropertyIDMap.getDocumentSummaryInformationProperties: Probability = 0.00, Count = 1
s -> dic.containsKey: Probability = 0.00, Count = 1
s -> dic.get: Probability = 0.00, Count = 1
s -> PropertyIDMap.UNDEFINED: Probability = 0.00, Count = 1
TreeFilter[subfilters.Length] -> RevFilter[subfilters.length]: Probability = 0.50, Count = 2
TreeFilter[subfilters.Length] -> TreeFilter[subfilters.length]: Probability = 0.50, Count = 2
subfilters[i].Clone -> subfilters[i].clone: Probability = 1.00, Count = 8
AndTreeFilter.List -> List: Probability = 1.00, Count = 4
GetFederationTokenRequest -> GetFederationTokenRequest: Probability = 1.00, Count = 2
foundUnicode -> foundUnicode: Probability = 0.86, Count = 6
foundUnicode -> cell.setCellValue: Probability = 0.14, Count = 1
UnicodeMapping -> UnicodeMapping: Probability = 1.00, Count = 3
entry -> entry: Probability = 0.82, Count = 33
entry -> entry.getKey: Probability = 0.17, Count = 7
cell.SetCellValue -> cell.getRow: Probability = 0.19, Count = 4
cell.SetCellValue -> .getSheet: Probability = 0.19, Count = 4
cell.SetCellValue -> .getWorkbook: Probability = 0.19, Count = 4
cell.SetCellValue -> .getCreationHelper: Probability = 0.19, Count = 4
cell.SetCellValue -> .createRichTextString: Probability = 0.10, Count = 2
cell.SetCellValue -> cell.setCellValue: Probability = 0.14, Count = 3
CreateChangeSetResponse -> CreateChangeSetResult: Probability = 1.00, Count = 1
CreateChangeSet -> createChangeSet: Probability = 1.00, Count = 1
CreateChangeSetRequest -> CreateChangeSetRequest: Probability = 1.00, Count = 1
Invoke<CreateChangeSetResponse> -> executeCreateChangeSet: Probability = 1.00, Count = 1
protected -> public: Probability = 1.00, Count = 14
SubmoduleStatusCommand -> SubmoduleStatusCommand: Probability = 0.75, Count = 3
SubmoduleStatusCommand -> submoduleStatus: Probability = 0.25, Count = 1
paths -> paths: Probability = 1.00, Count = 13
AList<string> -> ArrayList<>: Probability = 1.00, Count = 9
GetResultStart -> getResultStart: Probability = 1.00, Count = 1
currentSource.regionList.resultStart -> outRegion.resultStart: Probability = 1.00, Count = 1
BigInteger -> BigInteger: Probability = 0.80, Count = 8
BigInteger -> BigInteger.valueOf: Probability = 0.20, Count = 2
Round -> round: Probability = 1.00, Count = 3
bi, -> bi,: Probability = 1.00, Count = 1
nBits -> nBits: Probability = 1.00, Count = 2
bi -> bi: Probability = 1.00, Count = 3
bi+ -> bi.add: Probability = 1.00, Count = 1
HALF_BITS[nBits] -> HALF_BITS[nBits]: Probability = 1.00, Count = 1
DateTime -> Date: Probability = 0.42, Count = 18
DateTime -> java.util.Date: Probability = 0.19, Count = 8
DateTime -> Calendar: Probability = 0.21, Count = 9
DateTime -> cal: Probability = 0.02, Count = 1
DateTime -> LocaleUtil.getLocaleCalendar: Probability = 0.07, Count = 3
DateTime -> Calendar.MINUTE: Probability = 0.07, Count = 3
DateTime -> Calendar.SECOND: Probability = 0.02, Count = 1
date, -> date,: Probability = 1.00, Count = 16
Resolution -> Resolution: Probability = 1.00, Count = 2
resolution -> resolution: Probability = 1.00, Count = 4
date.Ticks -> date.getTime: Probability = 1.00, Count = 2
TimeSpan.TicksPerMillisecond, -> ,: Probability = 1.00, Count = 2
longIndex -> longIndex: Probability = 1.00, Count = 2
shortArray.Length -> shortArray.length: Probability = 1.00, Count = 3
si -> si: Probability = 0.67, Count = 4
si -> shortIndex,: Probability = 0.17, Count = 1
si -> longArray.length&&: Probability = 0.17, Count = 1
li -> li: Probability = 0.75, Count = 6
li -> li++: Probability = 0.25, Count = 2
shortArray[si] -> shortArray[si]: Probability = 1.00, Count = 2
longArray[li] -> longArray[li]: Probability = 1.00, Count = 2
AttachInternetGatewayResponse -> AttachInternetGatewayResult: Probability = 1.00, Count = 1
AttachInternetGateway -> attachInternetGateway: Probability = 1.00, Count = 1
AttachInternetGatewayRequest -> AttachInternetGatewayRequest: Probability = 1.00, Count = 1
Invoke<AttachInternetGatewayResponse> -> executeAttachInternetGateway: Probability = 1.00, Count = 1
"<=" -> "<=": Probability = 1.00, Count = 1
str -> str: Probability = 0.85, Count = 56
str -> str,: Probability = 0.02, Count = 1
str -> string: Probability = 0.14, Count = 9
str.ToCharArray -> str.toCharArray: Probability = 1.00, Count = 1
SortField -> SortField...: Probability = 0.20, Count = 1
SortField -> SortField: Probability = 0.80, Count = 4
field -> fields: Probability = 0.02, Count = 2
field -> this.field: Probability = 0.01, Count = 1
field -> field: Probability = 0.88, Count = 85
field -> DisjQuery: Probability = 0.03, Count = 3
field -> String: Probability = 0.02, Count = 2
field -> field,: Probability = 0.02, Count = 2
field -> getSortedDocValues: Probability = 0.01, Count = 1
field -> this.field=field: Probability = 0.01, Count = 1
SetSort -> setSort: Probability = 1.00, Count = 3
DescribeEventCategoriesResponse -> DescribeEventCategoriesResult: Probability = 1.00, Count = 2
DescribeEventCategories -> describeEventCategories: Probability = 1.00, Count = 3
DescribeEventCategoriesRequest -> DescribeEventCategoriesRequest: Probability = 1.00, Count = 2
Invoke<DescribeEventCategoriesResponse> -> executeDescribeEventCategories: Probability = 1.00, Count = 1
UpdateDeviceResponse -> UpdateDeviceResult: Probability = 1.00, Count = 1
UpdateDevice -> updateDevice: Probability = 1.00, Count = 1
UpdateDeviceRequest -> UpdateDeviceRequest: Probability = 1.00, Count = 1
Invoke<UpdateDeviceResponse> -> executeUpdateDevice: Probability = 1.00, Count = 1
CreateWorkerBlockResponse -> CreateWorkerBlockResult: Probability = 1.00, Count = 1
CreateWorkerBlock -> createWorkerBlock: Probability = 1.00, Count = 1
CreateWorkerBlockRequest -> CreateWorkerBlockRequest: Probability = 1.00, Count = 1
Invoke<CreateWorkerBlockResponse> -> executeCreateWorkerBlock: Probability = 1.00, Count = 1
reset -> reset: Probability = 0.59, Count = 20
reset -> throws: Probability = 0.26, Count = 9
reset -> IOException: Probability = 0.09, Count = 3
reset -> synchronized: Probability = 0.03, Count = 1
reset -> in.reset: Probability = 0.03, Count = 1
System.IO.IOException -> IOException: Probability = 1.00, Count = 45
SetReader -> setReader: Probability = 1.00, Count = 1
"input -> "input: Probability = 1.00, Count = 3
null" -> null": Probability = 0.86, Count = 31
null" -> not: Probability = 0.14, Count = 5
this.m_input -> this.input: Probability = 1.00, Count = 2
"TokenStream -> "TokenStream: Probability = 1.00, Count = 4
Close -> close: Probability = 0.89, Count = 8
Close -> @NonNull: Probability = 0.11, Count = 1
call -> call: Probability = 1.00, Count = 7
GetUsagePlanKeysResponse -> GetUsagePlanKeysResult: Probability = 1.00, Count = 1
GetUsagePlanKeys -> getUsagePlanKeys: Probability = 1.00, Count = 1
GetUsagePlanKeysRequest -> GetUsagePlanKeysRequest: Probability = 1.00, Count = 1
Invoke<GetUsagePlanKeysResponse> -> executeGetUsagePlanKeys: Probability = 1.00, Count = 1
' -> ': Probability = 0.98, Count = 96
' -> appendCoreFlags: Probability = 0.01, Count = 1
' -> characters[i]: Probability = 0.01, Count = 1
startOffset -> startOffset: Probability = 0.76, Count = 16
startOffset -> maxWriteLen: Probability = 0.10, Count = 2
startOffset -> startOffset+: Probability = 0.05, Count = 1
startOffset -> _buf: Probability = 0.05, Count = 1
startOffset -> kind: Probability = 0.05, Count = 1
',' -> ',': Probability = 0.54, Count = 7
',' -> +: Probability = 0.46, Count = 6
endOffset -> endOffset: Probability = 0.91, Count = 10
endOffset -> startOffset+firstSize: Probability = 0.09, Count = 1
LimitTokenPositionFilter -> LimitTokenPositionFilter: Probability = 1.00, Count = 2
maxTokenPosition, -> maxTokenPosition,: Probability = 1.00, Count = 2
DescribeFleetUtilizationResponse -> DescribeFleetUtilizationResult: Probability = 1.00, Count = 1
DescribeFleetUtilization -> describeFleetUtilization: Probability = 1.00, Count = 1
DescribeFleetUtilizationRequest -> DescribeFleetUtilizationRequest: Probability = 1.00, Count = 1
Invoke<DescribeFleetUtilizationResponse> -> executeDescribeFleetUtilization: Probability = 1.00, Count = 1
stream -> stream: Probability = 0.97, Count = 37
stream -> termID,: Probability = 0.03, Count = 1
dictFile -> dictFile: Probability = 1.00, Count = 4
dictionary -> dictionary: Probability = 1.00, Count = 5
loader, -> loader,: Probability = 1.00, Count = 3
dictFile, -> dictFile,: Probability = 1.00, Count = 4
loader.OpenResource -> loader.openResource: Probability = 0.50, Count = 3
loader.OpenResource -> tempPath: Probability = 0.50, Count = 3
encoding -> hypFile: Probability = 0.25, Count = 3
encoding -> is.setEncoding: Probability = 0.08, Count = 1
encoding -> encoding: Probability = 0.58, Count = 7
encoding -> is.setSystemId: Probability = 0.08, Count = 1
xmlEncoding -> InputSource: Probability = 0.67, Count = 2
xmlEncoding -> HyphenationCompoundWordTokenFilter.getHyphenationTree: Probability = 0.33, Count = 1
IOUtils.DisposeWhileHandlingException -> IOUtils.closeWhileHandlingException: Probability = 1.00, Count = 13
DeclineInvitationsResponse -> DeclineInvitationsResult: Probability = 1.00, Count = 1
DeclineInvitations -> declineInvitations: Probability = 1.00, Count = 1
DeclineInvitationsRequest -> DeclineInvitationsRequest: Probability = 1.00, Count = 1
Invoke<DeclineInvitationsResponse> -> executeDeclineInvitations: Probability = 1.00, Count = 1
DescribeAutoScalingGroupsResponse -> DescribeAutoScalingGroupsResult: Probability = 1.00, Count = 2
DescribeAutoScalingGroups -> describeAutoScalingGroups: Probability = 1.00, Count = 3
DescribeAutoScalingGroupsRequest -> DescribeAutoScalingGroupsRequest: Probability = 1.00, Count = 2
"pushMode -> "pushMode: Probability = 1.00, Count = 1
mode -> mode: Probability = 0.88, Count = 29
mode -> primary: Probability = 0.03, Count = 1
mode -> OpenMode.CREATE: Probability = 0.03, Count = 1
mode -> "popMode: Probability = 0.03, Count = 1
mode -> _modeStack.pop: Probability = 0.03, Count = 1
StopDBInstanceResponse -> DBInstance: Probability = 1.00, Count = 1
StopDBInstance -> stopDBInstance: Probability = 1.00, Count = 1
StopDBInstanceRequest -> StopDBInstanceRequest: Probability = 1.00, Count = 1
Invoke<StopDBInstanceResponse> -> executeStopDBInstance: Probability = 1.00, Count = 1
SuggestWordQueue -> SuggestWordQueue: Probability = 1.00, Count = 1
size, -> size,: Probability = 1.00, Count = 7
IComparer<SuggestWord> -> Comparator<SuggestWord>: Probability = 1.00, Count = 1
comparer -> comparator: Probability = 1.00, Count = 7
this.comparer -> this.comparator: Probability = 1.00, Count = 2
LBCookieStickinessPolicy -> LBCookieStickinessPolicy: Probability = 1.00, Count = 1
policyName, -> policyName,: Probability = 1.00, Count = 5
cookieExpirationPeriod -> cookieExpirationPeriod: Probability = 1.00, Count = 2
_cookieExpirationPeriod -> setCookieExpirationPeriod: Probability = 1.00, Count = 1
SheetRangeEvaluator -> SheetRangeEvaluator: Probability = 0.85, Count = 11
SheetRangeEvaluator -> aptg.getExternSheetIndex: Probability = 0.08, Count = 1
SheetRangeEvaluator -> createExternSheetRefEvaluator: Probability = 0.08, Count = 1
firstSheetIndex -> lastSheetIndex,: Probability = 0.07, Count = 1
firstSheetIndex -> sheetEvaluators: Probability = 0.07, Count = 1
firstSheetIndex -> firstSheetIndex: Probability = 0.50, Count = 7
firstSheetIndex -> firstSheetIndex:: Probability = 0.14, Count = 2
firstSheetIndex -> lastSheetIndex:: Probability = 0.07, Count = 1
firstSheetIndex -> _sheetEvaluators: Probability = 0.07, Count = 1
firstSheetIndex -> sheetEvaluators.clone: Probability = 0.07, Count = 1
SheetRefEvaluator[] -> SheetRefEvaluator[]: Probability = 1.00, Count = 2
"Invalid -> "Invalid: Probability = 1.00, Count = 20
_firstSheetIndex -> _firstSheetIndex: Probability = 1.00, Count = 6
_lastSheetIndex -> _lastSheetIndex: Probability = 1.00, Count = 6
RevokeTokenRequest -> RevokeTokenRequest: Probability = 1.00, Count = 1
"OnsMqtt", -> "OnsMqtt",: Probability = 1.00, Count = 4
"2019-12-11", -> "2019-12-11",: Probability = 1.00, Count = 4
"RevokeToken", -> "RevokeToken",: Probability = 1.00, Count = 1
"onsmqtt", -> "onsmqtt": Probability = 1.00, Count = 4
ve -> ve: Probability = 0.77, Count = 47
ve -> instanceof: Probability = 0.05, Count = 3
ve -> BlankEval.instance: Probability = 0.02, Count = 1
ve -> coerceValueToBoolean: Probability = 0.02, Count = 1
ve -> ve,: Probability = 0.03, Count = 2
ve -> stringsAreBlanks: Probability = 0.03, Count = 2
ve -> EvaluationException: Probability = 0.03, Count = 2
ve -> .getBooleanValue: Probability = 0.02, Count = 1
ve -> str.equalsIgnoreCase: Probability = 0.03, Count = 2
OperandResolver.CoerceValueToDouble -> OperandResolver.coerceValueToDouble: Probability = 1.00, Count = 10
Double.IsNaN -> Double.isNaN: Probability = 1.00, Count = 7
Double.IsInfinity -> Double.isInfinite: Probability = 1.00, Count = 5
ErrorEval.NUM_ERROR -> ErrorEval.NUM_ERROR: Probability = 1.00, Count = 26
aeRange -> AreaEval: Probability = 0.14, Count = 2
aeRange -> aeRange: Probability = 0.57, Count = 8
aeRange -> convertRangeArg: Probability = 0.29, Count = 4
eval -> eval: Probability = 0.88, Count = 14
eval -> instanceof: Probability = 0.12, Count = 2
aeRange, -> aeRange,: Probability = 1.00, Count = 4
sbyte -> byte: Probability = 1.00, Count = 2
readByte -> readByte: Probability = 1.00, Count = 2
throws -> throws: Probability = 1.00, Count = 9
bufferPos -> bufferPos: Probability = 0.80, Count = 8
bufferPos -> refill: Probability = 0.20, Count = 2
bufferSize -> bufferSize: Probability = 0.91, Count = 21
bufferSize -> filePos: Probability = 0.09, Count = 2
buffer.position -> buffer.position: Probability = 0.70, Count = 7
buffer.position -> "bufferPos=": Probability = 0.20, Count = 2
buffer.position -> bufferPos++: Probability = 0.10, Count = 1
=" -> =": Probability = 0.89, Count = 39
=" -> .grbitFrt: Probability = 0.11, Count = 5
buffer.get -> buffer.get: Probability = 1.00, Count = 1
ListTargetsByRuleResponse -> ListTargetsByRuleResult: Probability = 1.00, Count = 1
ListTargetsByRule -> listTargetsByRule: Probability = 1.00, Count = 1
ListTargetsByRuleRequest -> ListTargetsByRuleRequest: Probability = 1.00, Count = 1
Invoke<ListTargetsByRuleResponse> -> executeListTargetsByRule: Probability = 1.00, Count = 1
DisassociateQualificationFromWorkerResponse -> DisassociateQualificationFromWorkerResult: Probability = 1.00, Count = 1
DisassociateQualificationFromWorker -> disassociateQualificationFromWorker: Probability = 1.00, Count = 1
DisassociateQualificationFromWorkerRequest -> DisassociateQualificationFromWorkerRequest: Probability = 1.00, Count = 1
Invoke<DisassociateQualificationFromWorkerResponse> -> executeDisassociateQualificationFromWorker: Probability = 1.00, Count = 1
this.GetType -> getClass: Probability = 0.80, Count = 35
this.GetType -> this.getClass: Probability = 0.18, Count = 8
this.GetType -> .getSimpleName: Probability = 0.02, Count = 1
obj.GetType -> obj.getClass: Probability = 0.95, Count = 19
obj.GetType -> getClass: Probability = 0.05, Count = 1
CompiledAutomaton -> CompiledAutomaton: Probability = 1.00, Count = 3
Type -> type: Probability = 0.19, Count = 5
Type -> AUTOMATON_TYPE.SINGLE: Probability = 0.04, Count = 1
Type -> Class<?: Probability = 0.35, Count = 9
Type -> extends: Probability = 0.42, Count = 11
CharFilterFactory -> CharFilterFactory: Probability = 1.00, Count = 1
ForName -> forName: Probability = 1.00, Count = 2
loader.NewInstance -> loader.newInstance: Probability = 1.00, Count = 2
sz -> sz: Probability = 0.89, Count = 40
sz -> units.length: Probability = 0.02, Count = 1
sz -> sz++: Probability = 0.02, Count = 1
sz -> u++: Probability = 0.02, Count = 1
sz -> in.getSize: Probability = 0.04, Count = 2
GetIndexSize -> getIndexSize: Probability = 1.00, Count = 2
u -> u: Probability = 1.00, Count = 7
1024 -> 1024: Probability = 0.56, Count = 9
1024 -> maxMergeSizeMB: Probability = 0.06, Count = 1
1024 -> maxCachedBytes: Probability = 0.06, Count = 1
1024 -> DEFAULT_MIN_MERGE_MB*1024*1024: Probability = 0.06, Count = 1
1024 -> DEFAULT_MAX_MERGE_MB*1024*1024: Probability = 0.06, Count = 1
1024 -> long: Probability = 0.12, Count = 2
1024 -> DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE*1024*1024: Probability = 0.06, Count = 1
rem -> rem: Probability = 1.00, Count = 2
/= -> /=: Probability = 0.34, Count = 15
/= -> avg.searchTime: Probability = 0.05, Count = 2
/= -> avg.docNamesExtractTime: Probability = 0.05, Count = 2
/= -> avg.numGoodPoints: Probability = 0.05, Count = 2
/= -> avg.numPoints: Probability = 0.05, Count = 2
/= -> avg.pReleventSum: Probability = 0.07, Count = 3
/= -> avg.recall: Probability = 0.05, Count = 2
/= -> avg.mrr: Probability = 0.05, Count = 2
/= -> avg.maxGoodPoints: Probability = 0.07, Count = 3
/= -> j=1: Probability = 0.05, Count = 2
/= -> j<avg.pAt.length: Probability = 0.05, Count = 2
/= -> avg.pAt[j]: Probability = 0.05, Count = 2
/= -> "Fishy:: Probability = 0.02, Count = 1
/= -> \"good\": Probability = 0.02, Count = 1
/= -> queries!": Probability = 0.02, Count = 1
/= -> stats.length: Probability = 0.05, Count = 2
CompositeReaderContext -> SimilarityConfig: Probability = 0.07, Count = 2
CompositeReaderContext -> MLTConfig: Probability = 0.07, Count = 2
CompositeReaderContext -> SynonymQuery: Probability = 0.07, Count = 2
CompositeReaderContext -> Collections.sort: Probability = 0.04, Count = 1
CompositeReaderContext -> terms,: Probability = 0.07, Count = 2
CompositeReaderContext -> Comparator.comparing: Probability = 0.04, Count = 1
CompositeReaderContext -> a.term: Probability = 0.04, Count = 1
CompositeReaderContext -> numTerms: Probability = 0.04, Count = 1
CompositeReaderContext -> CompositeReaderContext: Probability = 0.07, Count = 2
CompositeReaderContext -> SpanNearQuery: Probability = 0.07, Count = 2
CompositeReaderContext -> new: Probability = 0.15, Count = 4
CompositeReaderContext -> clauses.toArray: Probability = 0.04, Count = 1
CompositeReaderContext -> CustomAnalyzerConfig: Probability = 0.07, Count = 2
CompositeReaderContext -> PhraseWildcardQuery: Probability = 0.04, Count = 1
CompositeReaderContext -> QueryParserConfig: Probability = 0.07, Count = 2
CompositeReaderContext -> BooleanQuery: Probability = 0.04, Count = 1
reader, -> this: Probability = 0.12, Count = 4
reader, -> reader,: Probability = 0.45, Count = 15
reader, -> terms.toArray: Probability = 0.03, Count = 1
reader, -> TermAndBoost[0]: Probability = 0.03, Count = 1
reader, -> field: Probability = 0.03, Count = 1
reader, -> sets,: Probability = 0.03, Count = 1
reader, -> numTerms: Probability = 0.06, Count = 2
reader, -> contexts,: Probability = 0.03, Count = 1
reader, -> slop,: Probability = 0.06, Count = 2
reader, -> ordered: Probability = 0.03, Count = 1
reader, -> field,: Probability = 0.03, Count = 1
reader, -> maxMultiTermExpansions,: Probability = 0.03, Count = 1
reader, -> segmentOptimizationEnabled: Probability = 0.03, Count = 1
reader, -> BooleanClause[0]: Probability = 0.03, Count = 1
readLimit -> readLimit: Probability = 0.50, Count = 3
readLimit -> throws: Probability = 0.33, Count = 2
readLimit -> IOException: Probability = 0.17, Count = 1
Collect -> collect: Probability = 1.00, Count = 2
doc -> doc: Probability = 0.76, Count = 26
doc -> greedy: Probability = 0.03, Count = 1
doc -> NO_MORE_DOCS: Probability = 0.12, Count = 4
doc -> checkLength: Probability = 0.03, Count = 1
doc -> l: Probability = 0.06, Count = 2
time -> time: Probability = 1.00, Count = 4
clock.Get -> clock.get: Probability = 1.00, Count = 2
timeout -> timeout: Probability = 0.89, Count = 8
timeout -> Thread.interrupted: Probability = 0.11, Count = 1
collector.Collect -> in.collect: Probability = 1.00, Count = 2
t0, -> TimeExceededException: Probability = 0.33, Count = 1
t0, -> timeout-t0,: Probability = 0.33, Count = 1
t0, -> time-t0,: Probability = 0.33, Count = 1
docBase -> docBase: Probability = 1.00, Count = 3
LocalFile -> LocalFile: Probability = 1.00, Count = 1
directory, -> directory,: Probability = 0.71, Count = 10
directory, -> resolve: Probability = 0.14, Count = 2
directory, -> Constants.DOT_GIT: Probability = 0.14, Count = 2
inCoreLimit -> inCoreLimit: Probability = 0.40, Count = 2
inCoreLimit -> elseblocks: Probability = 0.20, Count = 1
inCoreLimit -> initialBlocks: Probability = 0.20, Count = 1
inCoreLimit -> blocks.add: Probability = 0.20, Count = 1
this.directory -> this.directory: Probability = 1.00, Count = 1
directory -> directory: Probability = 1.00, Count = 8
remove -> @Override: Probability = 0.24, Count = 13
remove -> remove: Probability = 0.75, Count = 41
remove -> key: Probability = 0.02, Count = 1
object[] -> Object[]: Probability = 0.76, Count = 41
object[] -> snapshot: Probability = 0.02, Count = 1
object[] -> slice: Probability = 0.06, Count = 3
object[] -> slice.checkConcurrentModification: Probability = 0.07, Count = 4
object[] -> @Override: Probability = 0.06, Count = 3
object[] -> array: Probability = 0.02, Count = 1
object[] -> hi,TernaryTreeNode: Probability = 0.02, Count = 1
_size -> size: Probability = 0.78, Count = 36
_size -> _size: Probability = 0.13, Count = 6
_size -> _size-1: Probability = 0.07, Count = 3
_size -> _ulrOutput.write: Probability = 0.02, Count = 1
throwIndexOutOfBoundsException -> throwIndexOutOfBoundsException: Probability = 1.00, Count = 3
a[index] -> a[index]: Probability = 1.00, Count = 4
a[s] -> a[s]: Probability = 1.00, Count = 4
modCount++ -> modCount++: Probability = 1.00, Count = 16
RequestUploadCredentialsResponse -> RequestUploadCredentialsResult: Probability = 1.00, Count = 1
RequestUploadCredentials -> requestUploadCredentials: Probability = 1.00, Count = 1
RequestUploadCredentialsRequest -> RequestUploadCredentialsRequest: Probability = 1.00, Count = 1
Invoke<RequestUploadCredentialsResponse> -> executeRequestUploadCredentials: Probability = 1.00, Count = 1
CopyTo -> copyTo: Probability = 1.00, Count = 4
OutputStream -> OutputStream: Probability = 1.00, Count = 11
@in -> throws: Probability = 0.11, Count = 10
@in -> in: Probability = 0.83, Count = 72
@in -> in,: Probability = 0.03, Count = 3
@in -> normMap,: Probability = 0.01, Count = 1
@in -> buffer.reset: Probability = 0.01, Count = 1
IsLarge -> isLarge: Probability = 1.00, Count = 4
ObjectStream -> ObjectStream: Probability = 1.00, Count = 3
OpenStream -> openStream: Probability = 1.00, Count = 3
tmp -> tmp: Probability = 1.00, Count = 6
copied -> copied: Probability = 1.00, Count = 3
EOFException -> EOFException: Probability = 1.00, Count = 4
tmp, -> tmp,: Probability = 0.71, Count = 5
tmp, -> w.append: Probability = 0.29, Count = 2
GetCachedBytes -> getCachedBytes: Probability = 1.00, Count = 7
V -> V: Probability = 0.88, Count = 50
V -> final: Probability = 0.07, Count = 4
V -> get: Probability = 0.02, Count = 1
V -> @Override: Probability = 0.04, Count = 2
hash -> hash: Probability = 0.73, Count = 133
hash -> secondaryHash: Probability = 0.02, Count = 4
hash -> carray[]: Probability = 0.02, Count = 4
hash -> carray.length: Probability = 0.02, Count = 4
hash -> carray[i]: Probability = 0.02, Count = 4
hash -> hashFunction.hash: Probability = 0.01, Count = 1
hash -> *: Probability = 0.01, Count = 1
hash -> r2: Probability = 0.01, Count = 2
hash -> tab[hash: Probability = 0.02, Count = 4
hash -> 1099511628211L: Probability = 0.02, Count = 3
hash -> 0xcbf29ce484222325L: Probability = 0.02, Count = 3
hash -> i: Probability = 0.02, Count = 3
hash -> i++: Probability = 0.01, Count = 2
hash -> d: Probability = 0.03, Count = 6
hash -> e.next: Probability = 0.01, Count = 1
hash -> e.key: Probability = 0.01, Count = 1
hash -> e.hash: Probability = 0.01, Count = 1
hash -> 17: Probability = 0.01, Count = 1
hash -> numberOfWords: Probability = 0.01, Count = 2
hash -> 0x85EBCA6B: Probability = 0.01, Count = 1
hash -> 0xC2B2AE35: Probability = 0.01, Count = 1
hash -> ^: Probability = 0.01, Count = 1
key.GetHashCode -> key.hashCode: Probability = 1.00, Count = 8
java.util.HashMap.HashMapEntry<K, -> HashMapEntry<K,: Probability = 0.80, Count = 12
java.util.HashMap.HashMapEntry<K, -> e: Probability = 0.20, Count = 3
V>[] -> V>[]: Probability = 1.00, Count = 14
& -> &: Probability = 0.96, Count = 329
& -> final: Probability = 0.02, Count = 8
& -> i: Probability = 0.01, Count = 5
& -> >>>: Probability = 0.00, Count = 1
prev -> tab[index],: Probability = 0.25, Count = 2
prev -> prev: Probability = 0.75, Count = 6
e, -> e,: Probability = 1.00, Count = 10
e.hash -> e.hash: Probability = 1.00, Count = 7
tab[index] -> tab[index]: Probability = 1.00, Count = 6
RevFilter -> RevFilter: Probability = 0.80, Count = 39
RevFilter -> TreeFilter: Probability = 0.10, Count = 5
RevFilter -> final: Probability = 0.10, Count = 5
Negate -> negate: Probability = 1.00, Count = 3
DescribeVpcsResponse -> DescribeVpcsResult: Probability = 1.00, Count = 2
DescribeVpcs -> describeVpcs: Probability = 1.00, Count = 3
DescribeVpcsRequest -> DescribeVpcsRequest: Probability = 1.00, Count = 2
Invoke<DescribeVpcsResponse> -> executeDescribeVpcs: Probability = 1.00, Count = 1
UpdateGameSessionQueueResponse -> UpdateGameSessionQueueResult: Probability = 1.00, Count = 1
UpdateGameSessionQueue -> updateGameSessionQueue: Probability = 1.00, Count = 1
UpdateGameSessionQueueRequest -> UpdateGameSessionQueueRequest: Probability = 1.00, Count = 1
Invoke<UpdateGameSessionQueueResponse> -> executeUpdateGameSessionQueue: Probability = 1.00, Count = 1
GetTitle -> getTitle: Probability = 1.00, Count = 1
title -> title: Probability = 1.00, Count = 6
SetNewHeads -> setNewHeads: Probability = 1.00, Count = 1
IList<Head> -> List<Head>: Probability = 1.00, Count = 3
newHeads -> newHeads: Probability = 1.00, Count = 2
this.newHeads -> this.newHeads: Probability = 1.00, Count = 2
.propertyIsAlreadyNonNull -> .propertyIsAlreadyNonNull: Probability = 1.00, Count = 1
GetExpectedOldObjectId -> getExpectedOldObjectId: Probability = 1.00, Count = 2
expectedOldObjectId -> expectedOldObjectId: Probability = 1.00, Count = 2
GetRecordsResponse -> GetRecordsResult: Probability = 1.00, Count = 1
GetRecords -> getRecords: Probability = 1.00, Count = 1
GetRecordsRequest -> GetRecordsRequest: Probability = 1.00, Count = 1
Invoke<GetRecordsResponse> -> executeGetRecords: Probability = 1.00, Count = 1
Deleted3DPxg -> Deleted3DPxg: Probability = 1.00, Count = 2
externalWorkbookNumber, -> externalWorkbookNumber,: Probability = 1.00, Count = 5
sheetName -> sheetName: Probability = 0.91, Count = 29
sheetName -> SheetNameFormatter.appendFormat: Probability = 0.09, Count = 3
this.externalWorkbookNumber -> this.externalWorkbookNumber: Probability = 0.75, Count = 3
this.externalWorkbookNumber -> this.firstSheetName: Probability = 0.25, Count = 1
this.sheetName -> this.sheetName: Probability = 1.00, Count = 3
Execute -> execute: Probability = 1.00, Count = 14
Lexer -> Lexer: Probability = 1.00, Count = 12
lexer -> lexer: Probability = 1.00, Count = 13
lexer.Skip -> lexer.skip: Probability = 1.00, Count = 1
DescribeScheduledInstancesResponse -> DescribeScheduledInstancesResult: Probability = 1.00, Count = 1
DescribeScheduledInstances -> describeScheduledInstances: Probability = 1.00, Count = 1
DescribeScheduledInstancesRequest -> DescribeScheduledInstancesRequest: Probability = 1.00, Count = 1
Invoke<DescribeScheduledInstancesResponse> -> executeDescribeScheduledInstances: Probability = 1.00, Count = 1
MultiFields -> MultiFields: Probability = 1.00, Count = 1
Fields[] -> Fields[]: Probability = 1.00, Count = 1
subs, -> subs,: Probability = 1.00, Count = 2
ReaderSlice[] -> ReaderSlice[]: Probability = 1.00, Count = 3
subSlices -> subSlices: Probability = 1.00, Count = 4
this.subs -> this.subs: Probability = 1.00, Count = 2
subs -> subs: Probability = 1.00, Count = 4
this.subSlices -> this.subSlices: Probability = 1.00, Count = 2
PeekNextSid -> peekNextSid: Probability = 1.00, Count = 1
!HasNext -> !hasNext: Probability = 1.00, Count = 1
_list[_nextIndex] -> _nextIndex: Probability = 0.50, Count = 1
_list[_nextIndex] -> .getSid: Probability = 0.50, Count = 1
ConfigureAgentResponse -> ConfigureAgentResult: Probability = 1.00, Count = 1
ConfigureAgent -> configureAgent: Probability = 1.00, Count = 1
ConfigureAgentRequest -> ConfigureAgentRequest: Probability = 1.00, Count = 1
Invoke<ConfigureAgentResponse> -> executeConfigureAgent: Probability = 1.00, Count = 1
GetStreamingDistributionResponse -> GetStreamingDistributionResult: Probability = 1.00, Count = 1
GetStreamingDistribution -> getStreamingDistribution: Probability = 1.00, Count = 1
GetStreamingDistributionRequest -> GetStreamingDistributionRequest: Probability = 1.00, Count = 2
Invoke<GetStreamingDistributionResponse> -> executeGetStreamingDistribution: Probability = 1.00, Count = 1
ListTrialComponentsResponse -> ListTrialComponentsResult: Probability = 1.00, Count = 1
ListTrialComponents -> listTrialComponents: Probability = 1.00, Count = 1
ListTrialComponentsRequest -> ListTrialComponentsRequest: Probability = 1.00, Count = 1
Invoke<ListTrialComponentsResponse> -> executeListTrialComponents: Probability = 1.00, Count = 1
putShort -> putShort: Probability = 1.00, Count = 7
CompareNormalised -> compareNormalised: Probability = 1.00, Count = 1
NormalisedDecimal -> NormalisedDecimal: Probability = 1.00, Count = 8
_relativeDecimalExponent -> _relativeDecimalExponent: Probability = 1.00, Count = 3
_wholePart -> _wholePart: Probability = 1.00, Count = 4
other._wholePart -> other._wholePart: Probability = 1.00, Count = 2
_fractionalPart -> _fractionalPart: Probability = 1.00, Count = 3
other._fractionalPart -> other._fractionalPart: Probability = 1.00, Count = 1
JapaneseKatakanaStemFilter -> JapaneseKatakanaStemFilter: Probability = 1.00, Count = 2
minimumLength -> minimumLength: Probability = 0.75, Count = 6
minimumLength -> MINIMUM_LENGTH_PARAM,: Probability = 0.12, Count = 1
minimumLength -> JapaneseKatakanaStemFilter.DEFAULT_MINIMUM_LENGTH: Probability = 0.12, Count = 1
EnableAvailabilityZonesForLoadBalancerResponse -> EnableAvailabilityZonesForLoadBalancerResult: Probability = 1.00, Count = 1
EnableAvailabilityZonesForLoadBalancer -> enableAvailabilityZonesForLoadBalancer: Probability = 1.00, Count = 1
EnableAvailabilityZonesForLoadBalancerRequest -> EnableAvailabilityZonesForLoadBalancerRequest: Probability = 1.00, Count = 2
Invoke<EnableAvailabilityZonesForLoadBalancerResponse> -> executeEnableAvailabilityZonesForLoadBalancer: Probability = 1.00, Count = 1
UpdateEnvironmentResponse -> UpdateEnvironmentResult: Probability = 1.00, Count = 1
UpdateEnvironment -> updateEnvironment: Probability = 1.00, Count = 1
UpdateEnvironmentRequest -> UpdateEnvironmentRequest: Probability = 1.00, Count = 1
Invoke<UpdateEnvironmentResponse> -> executeUpdateEnvironment: Probability = 1.00, Count = 1
ListTagsForDomainResponse -> ListTagsForDomainResult: Probability = 1.00, Count = 1
ListTagsForDomain -> listTagsForDomain: Probability = 1.00, Count = 1
ListTagsForDomainRequest -> ListTagsForDomainRequest: Probability = 1.00, Count = 1
Invoke<ListTagsForDomainResponse> -> executeListTagsForDomain: Probability = 1.00, Count = 1
Log -> log: Probability = 1.00, Count = 3
@base, -> base,: Probability = 0.69, Count = 9
@base, -> base,x: Probability = 0.15, Count = 2
@base, -> base,-x: Probability = 0.15, Count = 2
@base -> base: Probability = 0.86, Count = 12
@base -> ret++: Probability = 0.07, Count = 1
@base -> P_SIZE: Probability = 0.07, Count = 1
writeBoolean -> writeBoolean: Probability = 1.00, Count = 3
val -> val: Probability = 0.67, Count = 51
val -> throws: Probability = 0.12, Count = 9
val -> IOException: Probability = 0.11, Count = 8
val -> Memory.pokeInt: Probability = 0.01, Count = 1
val -> scratch,: Probability = 0.03, Count = 2
val -> val,: Probability = 0.03, Count = 2
val -> getCalField: Probability = 0.01, Count = 1
val -> evaluateArgParity: Probability = 0.01, Count = 1
val -> Memory.pokeLong: Probability = 0.01, Count = 1
otherBuffer -> otherBuffer: Probability = 1.00, Count = 14
otherBuffer.remaining -> otherBuffer.remaining: Probability = 1.00, Count = 28
myPosition -> myPosition: Probability = 1.00, Count = 14
otherPosition -> otherPosition: Probability = 1.00, Count = 7
otherBuffer._position -> otherBuffer.position: Probability = 1.00, Count = 14
equalSoFar -> equalSoFar: Probability = 1.00, Count = 28
myPosition++ -> myPosition++: Probability = 1.00, Count = 7
otherBuffer.get -> otherBuffer.get: Probability = 1.00, Count = 14
otherPosition++ -> otherPosition++: Probability = 1.00, Count = 7
DescribeVirtualGatewaysResponse -> DescribeVirtualGatewaysResult: Probability = 1.00, Count = 2
DescribeVirtualGateways -> describeVirtualGateways: Probability = 1.00, Count = 3
DescribeVirtualGatewaysRequest -> DescribeVirtualGatewaysRequest: Probability = 1.00, Count = 2
fieldName -> fieldName: Probability = 1.00, Count = 38
IFieldConfigListener -> FieldConfigListener: Probability = 1.00, Count = 2
listener -> listener: Probability = 0.93, Count = 40
listener -> addListener: Probability = 0.07, Count = 3
this.listeners -> this.listeners: Probability = 1.00, Count = 1
SetProperty -> setProperty: Probability = 1.00, Count = 1
CellUtil.GetCell -> CellUtil.getCell: Probability = 1.00, Count = 1
CellUtil.SetCellStyleProperty -> CellUtil.setCellStyleProperty: Probability = 1.00, Count = 1
cell, -> cell,: Probability = 1.00, Count = 9
_propertyName, -> _propertyName,: Probability = 1.00, Count = 1
_propertyValue -> _propertyValue: Probability = 1.00, Count = 1
RebootInstancesResponse -> RebootInstancesResult: Probability = 1.00, Count = 1
RebootInstances -> rebootInstances: Probability = 1.00, Count = 1
RebootInstancesRequest -> RebootInstancesRequest: Probability = 1.00, Count = 2
Invoke<RebootInstancesResponse> -> executeRebootInstances: Probability = 1.00, Count = 1
Predicate -> Predicate: Probability = 1.00, Count = 1
ruleIndex, -> ruleIndex,: Probability = 1.00, Count = 11
predIndex, -> predIndex,: Probability = 1.00, Count = 2
isCtxDependent -> isCtxDependent: Probability = 1.00, Count = 6
this.ruleIndex -> this.ruleIndex: Probability = 1.00, Count = 10
ruleIndex -> ruleIndex: Probability = 0.92, Count = 23
ruleIndex -> getRuleIndexMap: Probability = 0.04, Count = 1
ruleIndex -> ruleIndex!=null: Probability = 0.04, Count = 1
this.predIndex -> this.predIndex: Probability = 1.00, Count = 2
predIndex -> predIndex: Probability = 0.50, Count = 2
predIndex -> "pred_"+ruleIndex+":"+predIndex: Probability = 0.25, Count = 1
predIndex -> "+ruleIndex+":"+predIndex+": Probability = 0.25, Count = 1
this.isCtxDependent -> this.isCtxDependent: Probability = 1.00, Count = 3
xPoints, -> xPoints,: Probability = 1.00, Count = 5
yPoints,int -> yPoints,int: Probability = 1.00, Count = 2
nPoints -> nPoints: Probability = 0.75, Count = 3
nPoints -> yPoints,int: Probability = 0.25, Count = 1
FindBiggest -> right: Probability = 0.33, Count = 2
FindBiggest -> findBiggest: Probability = 0.67, Count = 4
xPoints -> xPoints: Probability = 1.00, Count = 4
bottom -> bottom: Probability = 0.29, Count = 4
bottom -> shape.setPolygonDrawArea: Probability = 0.14, Count = 2
bottom -> right: Probability = 0.14, Count = 2
bottom -> shape.setPoints: Probability = 0.14, Count = 2
bottom -> -left: Probability = 0.14, Count = 2
bottom -> h: Probability = 0.14, Count = 2
yPoints -> yPoints: Probability = 1.00, Count = 4
left -> left: Probability = 0.85, Count = 17
left -> isValid: Probability = 0.10, Count = 2
left -> offset,left: Probability = 0.05, Count = 1
FindSmallest -> findSmallest: Probability = 1.00, Count = 4
top -> top: Probability = 0.67, Count = 10
top -> this.y: Probability = 0.20, Count = 3
top -> y: Probability = 0.07, Count = 1
top -> iter.hasNext: Probability = 0.07, Count = 1
HSSFPolygon -> HSSFPolygon: Probability = 0.83, Count = 5
HSSFPolygon -> createPolygon: Probability = 0.17, Count = 1
HSSFChildAnchor -> HSSFChildAnchor: Probability = 1.00, Count = 17
left, -> left,: Probability = 0.60, Count = 3
left, -> addToAll: Probability = 0.40, Count = 2
AddToAll -> yPoints,: Probability = 0.33, Count = 2
AddToAll -> -top: Probability = 0.33, Count = 2
AddToAll -> addToAll: Probability = 0.33, Count = 2
foreground.R, -> shape.setLineStyleColor: Probability = 0.24, Count = 6
foreground.R, -> foreground.getRed: Probability = 0.28, Count = 7
foreground.R, -> shape.setFillColor: Probability = 0.12, Count = 3
foreground.R, -> foreground.getGreen: Probability = 0.16, Count = 4
foreground.R, -> ,: Probability = 0.20, Count = 5
shape.SetLineStyleColor -> foreground.getGreen: Probability = 0.33, Count = 5
shape.SetLineStyleColor -> ,: Probability = 0.67, Count = 10
foreground.G, -> foreground.getBlue: Probability = 1.00, Count = 7
ListEventsRequest -> ListEventsRequest: Probability = 1.00, Count = 2
"ListEvents", -> "Status",: Probability = 0.20, Count = 1
"ListEvents", -> "2020-01-17",: Probability = 0.20, Count = 1
"ListEvents", -> "ListEvents",: Probability = 0.40, Count = 2
"ListEvents", -> "StatusAPI": Probability = 0.20, Count = 1
ListIAMPolicyAssignmentsResponse -> ListIAMPolicyAssignmentsResult: Probability = 1.00, Count = 1
ListIAMPolicyAssignments -> listIAMPolicyAssignments: Probability = 1.00, Count = 1
ListIAMPolicyAssignmentsRequest -> ListIAMPolicyAssignmentsRequest: Probability = 1.00, Count = 1
Invoke<ListIAMPolicyAssignmentsResponse> -> executeListIAMPolicyAssignments: Probability = 1.00, Count = 1
CountingOutputStream -> CountingOutputStream: Probability = 1.00, Count = 1
this.@out -> this.out: Probability = 1.00, Count = 7
SeekExact -> seekExact: Probability = 1.00, Count = 18
TermState -> TermState: Probability = 1.00, Count = 9
otherState -> otherState: Probability = 0.53, Count = 17
otherState -> !target.equals: Probability = 0.09, Count = 3
otherState -> !doOrd: Probability = 0.06, Count = 2
otherState -> numTerms: Probability = 0.06, Count = 2
otherState -> term: Probability = 0.06, Count = 2
otherState -> BytesRef.deepCopyOf: Probability = 0.03, Count = 1
otherState -> assert: Probability = 0.06, Count = 2
otherState -> BlockTermState: Probability = 0.06, Count = 2
otherState -> .ord: Probability = 0.03, Count = 1
state.CopyFrom -> state.copyFrom: Probability = 0.83, Count = 5
state.CopyFrom -> otherState: Probability = 0.17, Count = 1
BytesRef.DeepCopyOf -> BytesRef.deepCopyOf: Probability = 1.00, Count = 4
seekPending -> seekPending: Probability = 0.60, Count = 6
seekPending -> term.copyBytes: Probability = 0.30, Count = 3
seekPending -> indexIsCurrent: Probability = 0.10, Count = 1
seek -> seek: Probability = 1.00, Count = 4
pos -> pos: Probability = 0.87, Count = 235
pos -> Passage: Probability = 0.01, Count = 2
pos -> passage: Probability = 0.00, Count = 1
pos -> passages: Probability = 0.00, Count = 1
pos -> passage.getStartOffset: Probability = 0.01, Count = 2
pos -> passage.getNumMatches: Probability = 0.01, Count = 2
pos -> passage.getMatchStarts: Probability = 0.01, Count = 2
pos -> [i]: Probability = 0.01, Count = 2
pos -> passage.getMatchEnds: Probability = 0.01, Count = 2
pos -> FormatRecord.sid: Probability = 0.00, Count = 1
pos -> field_3_color3: Probability = 0.01, Count = 2
pos -> field_4_color4: Probability = 0.01, Count = 2
pos -> size-pos: Probability = 0.00, Count = 1
pos -> pos+len,: Probability = 0.00, Count = 1
pos -> field_4_dy2: Probability = 0.00, Count = 1
pos -> int: Probability = 0.00, Count = 1
pos -> properties: Probability = 0.01, Count = 2
pos -> property.serializeSimplePart: Probability = 0.00, Count = 1
pos -> property.serializeComplexPart: Probability = 0.00, Count = 1
pos -> pos,: Probability = 0.00, Count = 1
pos -> preceding: Probability = 0.00, Count = 1
pos -> upto+len,: Probability = 0.00, Count = 1
pos -> left: Probability = 0.01, Count = 2
pos -> -=: Probability = 0.00, Count = 1
pos -> upto+left,: Probability = 0.00, Count = 1
alignedPos -> alignedPos: Probability = 0.50, Count = 2
alignedPos -> ALIGN_NOT_MASK: Probability = 0.25, Count = 1
alignedPos -> alignedPos-bufferSize: Probability = 0.25, Count = 1
delta -> delta: Probability = 1.00, Count = 31
removeAllElements -> removeAllElements: Probability = 1.00, Count = 1
QueryCustomerByPhoneRequest -> QueryCustomerByPhoneRequest: Probability = 1.00, Count = 1
"xspace", -> "xspace",: Probability = 1.00, Count = 2
"2017-07-20", -> "2017-07-20",: Probability = 1.00, Count = 2
"QueryCustomerByPhone" -> "QueryCustomerByPhone": Probability = 1.00, Count = 1
"/customerbyphone" -> "/customerbyphone": Probability = 1.00, Count = 1
arg0 -> arg0: Probability = 0.81, Count = 34
arg0 -> TwoDEval: Probability = 0.05, Count = 2
arg0 -> .getWidth: Probability = 0.02, Count = 1
arg0 -> evaluate: Probability = 0.02, Count = 1
arg0 -> srcRowIndex,: Probability = 0.02, Count = 1
arg0 -> srcColumnIndex,: Probability = 0.02, Count = 1
arg0 -> .getFirstColumn: Probability = 0.02, Count = 1
arg0 -> .getColumn: Probability = 0.02, Count = 1
ListDashboardVersionsResponse -> ListDashboardVersionsResult: Probability = 1.00, Count = 1
ListDashboardVersions -> listDashboardVersions: Probability = 1.00, Count = 1
ListDashboardVersionsRequest -> ListDashboardVersionsRequest: Probability = 1.00, Count = 1
Invoke<ListDashboardVersionsResponse> -> executeListDashboardVersions: Probability = 1.00, Count = 1
_position++] -> position++]: Probability = 1.00, Count = 14
DeleteHostedZoneResponse -> DeleteHostedZoneResult: Probability = 1.00, Count = 1
DeleteHostedZone -> deleteHostedZone: Probability = 1.00, Count = 1
DeleteHostedZoneRequest -> DeleteHostedZoneRequest: Probability = 1.00, Count = 2
Invoke<DeleteHostedZoneResponse> -> executeDeleteHostedZone: Probability = 1.00, Count = 1
CreateReceiptRuleResponse -> CreateReceiptRuleResult: Probability = 1.00, Count = 1
CreateReceiptRule -> createReceiptRule: Probability = 1.00, Count = 1
CreateReceiptRuleRequest -> CreateReceiptRuleRequest: Probability = 1.00, Count = 1
Invoke<CreateReceiptRuleResponse> -> executeCreateReceiptRule: Probability = 1.00, Count = 1
Rename -> rename: Probability = 1.00, Count = 1
DoRename -> doRename: Probability = 1.00, Count = 1
err -> err: Probability = 0.88, Count = 15
err -> proxySelector.select: Probability = 0.06, Count = 1
err -> err.initCause: Probability = 0.06, Count = 1
DescribeDBInstancesResponse -> DescribeDBInstancesResult: Probability = 1.00, Count = 2
DescribeDBInstances -> describeDBInstances: Probability = 1.00, Count = 3
DescribeDBInstancesRequest -> DescribeDBInstancesRequest: Probability = 1.00, Count = 2
ruleName -> label: Probability = 0.25, Count = 2
ruleName -> ruleName: Probability = 0.75, Count = 6
bypassTokenType -> tag: Probability = 0.50, Count = 2
bypassTokenType -> "'"+text+"'": Probability = 0.25, Count = 1
bypassTokenType -> bypassTokenType: Probability = 0.25, Count = 1
escaper -> escaper: Probability = 1.00, Count = 9
"[DELETEDCHILD]" -> "[DELETEDCHILD]": Probability = 1.00, Count = 1
CreateAccountResponse -> CreateAccountResult: Probability = 1.00, Count = 1
CreateAccount -> createAccount: Probability = 1.00, Count = 1
CreateAccountRequest -> CreateAccountRequest: Probability = 1.00, Count = 1
Invoke<CreateAccountResponse> -> executeCreateAccount: Probability = 1.00, Count = 1
BaseRef -> BaseRef: Probability = 1.00, Count = 1
RefEval -> RefEval: Probability = 0.75, Count = 24
RefEval -> re.getInnerValueEval: Probability = 0.09, Count = 3
RefEval -> re.getFirstSheetIndex: Probability = 0.09, Count = 3
RefEval -> CountUtils.countMatchingCellsInRef: Probability = 0.06, Count = 2
re -> re: Probability = 0.83, Count = 10
re -> _refEval: Probability = 0.08, Count = 1
re -> _areaEval: Probability = 0.08, Count = 1
_firstRowIndex -> _firstRowIndex: Probability = 0.67, Count = 2
_firstRowIndex -> re.getRow: Probability = 0.33, Count = 1
_firstColumnIndex -> _firstColumnIndex: Probability = 1.00, Count = 6
re.Column -> re.getColumn: Probability = 1.00, Count = 1
_width -> _width: Probability = 1.00, Count = 3
Decode -> decode: Probability = 1.00, Count = 44
blocks, -> blocks,: Probability = 0.92, Count = 49
blocks, -> blocks,int: Probability = 0.08, Count = 4
blocksOffset, -> blocksOffset,: Probability = 0.87, Count = 45
blocksOffset, -> long[]: Probability = 0.13, Count = 7
values, -> values,: Probability = 0.98, Count = 51
values, -> int[]: Probability = 0.02, Count = 1
valuesOffset, -> valuesOffset,: Probability = 1.00, Count = 45
iterations -> iterations: Probability = 1.00, Count = 95
++i -> ++i: Probability = 1.00, Count = 64
blocks[blocksOffset++] -> final: Probability = 0.43, Count = 92
blocks[blocksOffset++] -> blocks[blocksOffset++]: Probability = 0.47, Count = 102
blocks[blocksOffset++] -> long: Probability = 0.09, Count = 20
blocks[blocksOffset++] -> 0xFFL: Probability = 0.01, Count = 2
block -> block: Probability = 0.87, Count = 66
block -> byte: Probability = 0.09, Count = 7
block -> final: Probability = 0.04, Count = 3
shift -> shift: Probability = 0.87, Count = 96
shift -> 62: Probability = 0.01, Count = 1
shift -> final: Probability = 0.09, Count = 10
shift -> 56: Probability = 0.02, Count = 2
shift -> 65535: Probability = 0.01, Count = 1
-= -> -=: Probability = 1.00, Count = 40
values[valuesOffset++] -> values[valuesOffset++]: Probability = 1.00, Count = 106
3 -> 3: Probability = 0.99, Count = 75
3 -> 2: Probability = 0.01, Count = 1
ParserRuleContext -> ParserRuleContext: Probability = 0.96, Count = 23
ParserRuleContext -> _ctx: Probability = 0.04, Count = 1
_parentctx -> _parentctx: Probability = 0.56, Count = 5
_parentctx -> retctx: Probability = 0.22, Count = 2
_parentctx -> retctx.parent: Probability = 0.11, Count = 1
_parentctx -> _parentctx.addChild: Probability = 0.11, Count = 1
_ctx.Stop -> _ctx.stop: Probability = 1.00, Count = 3
_input.LT -> _input.LT: Probability = 1.00, Count = 6
_ctx -> _ctx: Probability = 0.86, Count = 12
_ctx -> triggerExitRuleEvent: Probability = 0.14, Count = 2
_parseListeners -> _parseListeners: Probability = 0.87, Count = 13
_parseListeners -> _ctx,o: Probability = 0.13, Count = 2
_ctx.Parent -> _ctx.parent: Probability = 1.00, Count = 2
_buildParseTrees -> _buildParseTrees: Probability = 1.00, Count = 4
CancelBundleTaskRequest -> CancelBundleTaskRequest: Probability = 1.00, Count = 2
bundleId -> bundleId: Probability = 1.00, Count = 2
_bundleId -> setBundleId: Probability = 1.00, Count = 1
includeOrig -> includeOrig: Probability = 1.00, Count = 2
CountWords -> countWords: Probability = 1.00, Count = 2
SetIdentityDkimEnabledResponse -> SetIdentityDkimEnabledResult: Probability = 1.00, Count = 1
SetIdentityDkimEnabled -> setIdentityDkimEnabled: Probability = 1.00, Count = 1
SetIdentityDkimEnabledRequest -> SetIdentityDkimEnabledRequest: Probability = 1.00, Count = 1
Invoke<SetIdentityDkimEnabledResponse> -> executeSetIdentityDkimEnabled: Probability = 1.00, Count = 1
GetResolverEndpointResponse -> GetResolverEndpointResult: Probability = 1.00, Count = 1
GetResolverEndpoint -> getResolverEndpoint: Probability = 1.00, Count = 1
GetResolverEndpointRequest -> GetResolverEndpointRequest: Probability = 1.00, Count = 1
Invoke<GetResolverEndpointResponse> -> executeGetResolverEndpoint: Probability = 1.00, Count = 1
setText -> setText: Probability = 1.00, Count = 1
@string -> string: Probability = 0.80, Count = 16
@string -> sb: Probability = 0.15, Count = 3
@string -> sb.getValue: Probability = 0.05, Count = 1
value.Length -> value.length: Probability = 0.94, Count = 15
value.Length -> value.length*2: Probability = 0.06, Count = 1
AdjustIndex -> adjustIndex: Probability = 1.00, Count = 1
GalicianStemFilterFactory -> GalicianStemFilterFactory: Probability = 1.00, Count = 1
ListRepositoryAssociationsResponse -> ListRepositoryAssociationsResult: Probability = 1.00, Count = 1
ListRepositoryAssociations -> listRepositoryAssociations: Probability = 1.00, Count = 1
ListRepositoryAssociationsRequest -> ListRepositoryAssociationsRequest: Probability = 1.00, Count = 1
Invoke<ListRepositoryAssociationsResponse> -> executeListRepositoryAssociations: Probability = 1.00, Count = 1
maxNumSegments -> maxNumSegments: Probability = 0.57, Count = 4
maxNumSegments -> "required: Probability = 0.14, Count = 1
maxNumSegments -> specified": Probability = 0.14, Count = 1
maxNumSegments -> iw.forceMerge: Probability = 0.14, Count = 1
getChar -> getChar: Probability = 1.00, Count = 4
getShort -> getShort: Probability = 1.00, Count = 4
prevPtr -> prevPtr: Probability = 1.00, Count = 7
currPtr -> currPtr: Probability = 1.00, Count = 7
nextPtr -> nextPtr: Probability = 1.00, Count = 3
!Eof -> !eof: Probability = 1.00, Count = 6
ParseEntry -> parseEntry: Probability = 0.88, Count = 7
ParseEntry -> elseparseEntry: Probability = 0.12, Count = 1
ptr -> final: Probability = 0.16, Count = 16
ptr -> ptr: Probability = 0.73, Count = 75
ptr -> author: Probability = 0.02, Count = 2
ptr -> 46: Probability = 0.01, Count = 1
ptr -> 'p': Probability = 0.01, Count = 1
ptr -> --ptr: Probability = 0.01, Count = 1
ptr -> tagger: Probability = 0.02, Count = 2
ptr -> '\r': Probability = 0.02, Count = 2
ptr -> b[ptr: Probability = 0.02, Count = 2
ptr -> tagMessage: Probability = 0.01, Count = 1
raw.Length -> raw.length: Probability = 1.00, Count = 6
--delta -> --delta: Probability = 1.00, Count = 2
raw[ptr] -> raw[ptr]: Probability = 1.00, Count = 5
ptr++ -> ptr++: Probability = 1.00, Count = 4
Constants.OBJECT_ID_LENGTH -> OBJECT_ID_LENGTH: Probability = 0.75, Count = 6
Constants.OBJECT_ID_LENGTH -> fmtOverflowBuffer: Probability = 0.12, Count = 1
Constants.OBJECT_ID_LENGTH -> overflowBuffer.write: Probability = 0.12, Count = 1
Sharpen.Extensions.CreateIndexOutOfRangeException -> ArrayIndexOutOfBoundsException: Probability = 1.00, Count = 7
ReceiveCommand.Type -> Type: Probability = 0.50, Count = 1
ReceiveCommand.Type -> getType: Probability = 0.50, Count = 1
this, -> this,: Probability = 0.95, Count = 52
this, -> new: Probability = 0.05, Count = 3
_mark -> mark: Probability = 1.00, Count = 42
NGramFilterFactory -> NGramFilterFactory: Probability = 1.00, Count = 1
minGramSize -> minGramSize: Probability = 1.00, Count = 2
"minGramSize", -> requireInt: Probability = 1.00, Count = 4
GetInt32 -> "minGramSize": Probability = 0.07, Count = 2
GetInt32 -> maxGramSize: Probability = 0.07, Count = 2
GetInt32 -> "maxGramSize": Probability = 0.07, Count = 2
GetInt32 -> getInt: Probability = 0.70, Count = 19
GetInt32 -> "minSubwordSize",: Probability = 0.07, Count = 2
maxGramSize -> preserveOriginal: Probability = 1.00, Count = 4
AddRoleToDBClusterResponse -> AddRoleToDBClusterResult: Probability = 1.00, Count = 1
AddRoleToDBCluster -> addRoleToDBCluster: Probability = 1.00, Count = 1
AddRoleToDBClusterRequest -> AddRoleToDBClusterRequest: Probability = 1.00, Count = 1
Invoke<AddRoleToDBClusterResponse> -> executeAddRoleToDBCluster: Probability = 1.00, Count = 1
comparator -> comparator: Probability = 0.75, Count = 6
comparator -> Comparator<?: Probability = 0.12, Count = 1
comparator -> super: Probability = 0.12, Count = 1
PatternCaptureGroupFilterFactory -> PatternCaptureGroupFilterFactory: Probability = 1.00, Count = 1
GetPattern -> getPattern: Probability = 0.83, Count = 5
GetPattern -> pattern: Probability = 0.17, Count = 1
"pattern" -> "pattern": Probability = 1.00, Count = 3
args.TryGetValue -> args.containsKey: Probability = 1.00, Count = 1
"preserve_original", -> "preserve_original": Probability = 1.00, Count = 2
bool.Parse -> Boolean.parseBoolean: Probability = 0.67, Count = 2
bool.Parse -> Boolean.valueOf: Probability = 0.33, Count = 1
CreateObjectResponse -> CreateObjectResult: Probability = 1.00, Count = 1
CreateObject -> createObject: Probability = 1.00, Count = 1
CreateObjectRequest -> CreateObjectRequest: Probability = 1.00, Count = 1
Invoke<CreateObjectResponse> -> executeCreateObject: Probability = 1.00, Count = 1
getActions -> getActions: Probability = 1.00, Count = 1
this._enclosing.isShowing -> mAdapter: Probability = 1.00, Count = 1
this._enclosing.show -> Runnable: Probability = 1.00, Count = 1
CreateResourceGroupResponse -> CreateResourceGroupResult: Probability = 1.00, Count = 1
CreateResourceGroup -> createResourceGroup: Probability = 1.00, Count = 1
CreateResourceGroupRequest -> CreateResourceGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateResourceGroupResponse> -> executeCreateResourceGroup: Probability = 1.00, Count = 1
Has -> has: Probability = 1.00, Count = 2
RevFlagSet -> final: Probability = 0.25, Count = 2
RevFlagSet -> RevFlagSet: Probability = 0.75, Count = 6
RevFlagFilter.HasAll -> HasAll: Probability = 1.00, Count = 1
this._enclosing._size -> totalSize: Probability = 0.08, Count = 2
this._enclosing._size -> this.size,: Probability = 0.04, Count = 1
this._enclosing._size -> Integer.MAX_VALUE: Probability = 0.04, Count = 1
this._enclosing._size -> subMap.size: Probability = 0.04, Count = 1
this._enclosing._size -> Hashtable.this.size: Probability = 0.04, Count = 1
this._enclosing._size -> backingMap.size: Probability = 0.04, Count = 1
this._enclosing._size -> countMap.isEmpty: Probability = 0.04, Count = 1
this._enclosing._size -> removeFromBothMaps: Probability = 0.04, Count = 1
this._enclosing._size -> size: Probability = 0.23, Count = 6
this._enclosing._size -> ConcurrentHashMap.this.remove: Probability = 0.04, Count = 1
this._enclosing._size -> unfiltered.remove: Probability = 0.04, Count = 1
this._enclosing._size -> countMap.size: Probability = 0.04, Count = 1
this._enclosing._size -> ConcurrentHashMap.this.size: Probability = 0.04, Count = 1
this._enclosing._size -> filteredEntrySet.size: Probability = 0.04, Count = 1
this._enclosing._size -> Impl.this.isEmpty: Probability = 0.04, Count = 1
this._enclosing._size -> map.size: Probability = 0.04, Count = 1
this._enclosing._size -> Impl.this.size: Probability = 0.04, Count = 1
this._enclosing._size -> ConcurrentHashMap.this.isEmpty: Probability = 0.04, Count = 1
this._enclosing._size -> collection.size: Probability = 0.04, Count = 1
this._enclosing._size -> collection.clear: Probability = 0.04, Count = 1
field_1_index_extern_sheet -> field_1_index_extern_sheet: Probability = 1.00, Count = 9
unused1 -> unused1: Probability = 1.00, Count = 9
"@" -> "@": Probability = 1.00, Count = 4
m_directory -> directory: Probability = 1.00, Count = 1
lockFactory=" -> lockFactory=": Probability = 1.00, Count = 1
LockFactory -> lockFactory: Probability = 1.00, Count = 1
3:return -> 3:return: Probability = 1.00, Count = 6
args[2] -> args[2]: Probability = 1.00, Count = 6
4:return -> 4:return: Probability = 1.00, Count = 4
CancelDataRepositoryTaskResponse -> CancelDataRepositoryTaskResult: Probability = 1.00, Count = 1
CancelDataRepositoryTask -> cancelDataRepositoryTask: Probability = 1.00, Count = 1
CancelDataRepositoryTaskRequest -> CancelDataRepositoryTaskRequest: Probability = 1.00, Count = 1
Invoke<CancelDataRepositoryTaskResponse> -> executeCancelDataRepositoryTask: Probability = 1.00, Count = 1
DateFormatTokenizer -> DateFormatTokenizer: Probability = 1.00, Count = 5
format -> format: Probability = 0.84, Count = 31
format -> "Requested: Probability = 0.03, Count = 1
format -> formatIndex+: Probability = 0.03, Count = 1
format -> wasn't: Probability = 0.03, Count = 1
format -> tfr.getFormatString: Probability = 0.03, Count = 1
format -> HSSFDataFormat.getBuiltinFormat: Probability = 0.03, Count = 1
format -> LocaleUtil.getUserLocale: Probability = 0.03, Count = 1
this.format -> this.format: Probability = 0.50, Count = 1
this.format -> LocaleUtil.getUserLocale: Probability = 0.50, Count = 1
GetBiasedExponent -> getBiasedExponent: Probability = 1.00, Count = 1
rawBits -> rawBits: Probability = 0.64, Count = 7
rawBits -> Math.toIntExact: Probability = 0.18, Count = 2
rawBits -> 52: Probability = 0.09, Count = 1
rawBits -> .and: Probability = 0.09, Count = 1
EXPONENT_MASK -> EXPONENT_MASK: Probability = 1.00, Count = 1
EXPONENT_SHIFT -> EXPONENT_SHIFT: Probability = 1.00, Count = 1
"IB -> "IB: Probability = 1.00, Count = 1
m_distribution.ToString -> distribution.toString: Probability = 1.00, Count = 1
"-" -> "-": Probability = 1.00, Count = 12
m_lambda.ToString -> lambda.toString: Probability = 1.00, Count = 1
m_normalization.ToString -> normalization.toString: Probability = 1.00, Count = 2
GetName -> getName: Probability = 1.00, Count = 22
InContext -> inContext: Probability = 1.00, Count = 1
context -> context: Probability = 0.93, Count = 25
context -> recognizer.getContext: Probability = 0.04, Count = 1
context -> context.getParent: Probability = 0.04, Count = 1
desc -> desc: Probability = 0.55, Count = 6
desc -> directory: Probability = 0.18, Count = 2
desc -> directory.getPath: Probability = 0.09, Count = 1
desc -> elsedesc: Probability = 0.09, Count = 1
desc -> "Repository[": Probability = 0.09, Count = 1
Directory -> getDirectory: Probability = 0.20, Count = 3
Directory -> Directory: Probability = 0.67, Count = 10
Directory -> directory: Probability = 0.07, Count = 1
Directory -> commit.getDirectory: Probability = 0.07, Count = 1
data -> []: Probability = 0.04, Count = 3
data -> data: Probability = 0.88, Count = 59
data -> data,: Probability = 0.03, Count = 2
data -> data.length: Probability = 0.03, Count = 2
data -> in.readAllContinuedRemainder: Probability = 0.01, Count = 1
LittleEndian.PutInt -> LittleEndian.putInt: Probability = 1.00, Count = 37
data, -> data,: Probability = 0.88, Count = 188
data, -> offset,: Probability = 0.00, Count = 1
data, -> 18: Probability = 0.01, Count = 3
data, -> field_1_shapeIdMax: Probability = 0.01, Count = 2
data, -> field_3_numShapesSaved: Probability = 0.01, Count = 2
data, -> field_4_drawingsSaved: Probability = 0.01, Count = 2
data, -> field_1_rectX1: Probability = 0.00, Count = 1
data, -> 12,: Probability = 0.01, Count = 3
data, -> field_1_shapeId: Probability = 0.00, Count = 1
data, -> field_1_color1: Probability = 0.01, Count = 2
data, -> field_2_color2: Probability = 0.01, Count = 2
data, -> offset,EscherRecordFactory: Probability = 0.00, Count = 1
data, -> readInstance: Probability = 0.00, Count = 1
data, -> byte[]: Probability = 0.00, Count = 1
data, -> setArrayData: Probability = 0.00, Count = 1
data, -> offset: Probability = 0.00, Count = 1
data, -> fic: Probability = 0.00, Count = 1
field_13_border_styles1 -> field_13_border_styles1: Probability = 1.00, Count = 3
field_14_border_styles2 -> field_14_border_styles2: Probability = 1.00, Count = 3
j -> j: Probability = 0.67, Count = 82
j -> orows.size: Probability = 0.02, Count = 3
j -> jj_la1_0[i]: Probability = 0.07, Count = 9
j -> la1tokens[j]: Probability = 0.07, Count = 9
j -> jj_la1_1[i]: Probability = 0.05, Count = 6
j -> la1tokens[32+j]: Probability = 0.05, Count = 6
j -> getThreshold: Probability = 0.01, Count = 1
j -> 0.1f,: Probability = 0.01, Count = 1
j -> 1f: Probability = 0.01, Count = 1
j -> mtp[3]: Probability = 0.01, Count = 1
j -> mtp[2]*: Probability = 0.01, Count = 1
j -> j+1: Probability = 0.01, Count = 1
j -> j,: Probability = 0.01, Count = 1
++j -> ++j: Probability = 1.00, Count = 12
uint -> >>>: Probability = 0.94, Count = 78
uint -> final: Probability = 0.06, Count = 5
7 -> 7: Probability = 1.00, Count = 32
6 -> 6: Probability = 0.94, Count = 34
6 -> final: Probability = 0.06, Count = 2
5 -> 5: Probability = 0.93, Count = 27
5 -> final: Probability = 0.07, Count = 2
PipedWriter -> PipedWriter: Probability = 1.00, Count = 1
java.io.PipedReader -> PipedReader: Probability = 1.00, Count = 1
destination -> destination: Probability = 1.00, Count = 4
Dequote -> dequote: Probability = 1.00, Count = 4
@in, -> in,: Probability = 1.00, Count = 30
ie -> ie: Probability = 1.00, Count = 4
r[rPtr++] -> in[ip++]: Probability = 1.00, Count = 2
RawParseUtils.Decode -> RawParseUtils.decode: Probability = 1.00, Count = 8
Constants.CHARSET, -> UTF_8,: Probability = 1.00, Count = 3
CheckoutResult.Status -> Status: Probability = 1.00, Count = 2
GetStatus -> getStatus: Probability = 1.00, Count = 7
myStatus -> myStatus: Probability = 0.50, Count = 1
myStatus -> status: Probability = 0.50, Count = 1
DeltaRecord -> DeltaRecord: Probability = 1.00, Count = 2
field_1_max_change -> field_1_max_change: Probability = 1.00, Count = 2
in1.ReadDouble -> in.readDouble: Probability = 1.00, Count = 12
Count -> getCount: Probability = 0.10, Count = 1
Count -> size: Probability = 0.80, Count = 8
Count -> Count: Probability = 0.10, Count = 1
ListPartsRequest -> ListPartsRequest: Probability = 1.00, Count = 3
vaultName, -> vaultName,: Probability = 1.00, Count = 14
uploadId -> uploadId: Probability = 0.71, Count = 10
uploadId -> ): Probability = 0.29, Count = 4
_vaultName -> setVaultName: Probability = 0.53, Count = 28
_vaultName -> (: Probability = 0.45, Count = 24
_vaultName -> this.bucketName: Probability = 0.02, Count = 1
vaultName -> vaultName: Probability = 0.59, Count = 42
vaultName -> ): Probability = 0.38, Count = 27
vaultName -> bucketName: Probability = 0.03, Count = 2
_uploadId -> setUploadId: Probability = 1.00, Count = 6
Set -> set: Probability = 1.00, Count = 40
<< -> <<: Probability = 0.97, Count = 138
<< -> 24: Probability = 0.01, Count = 2
<< -> 16: Probability = 0.01, Count = 2
<< -> &: Probability = 0.01, Count = 1
blocks[o] -> blocks[o]: Probability = 1.00, Count = 32
~ -> ~: Probability = 1.00, Count = 10
| -> |: Probability = 0.98, Count = 97
| -> "[--mixed: Probability = 0.01, Count = 1
| -> --soft: Probability = 0.01, Count = 1
SetRunInBackground -> setRunInBackground: Probability = 1.00, Count = 1
deltaPri -> deltaPri: Probability = 1.00, Count = 2
runInBackground -> runInBackground: Probability = 1.00, Count = 1
this.deltaPri -> this.deltaPri: Probability = 1.00, Count = 1
TeeInputStream -> TeeInputStream: Probability = 1.00, Count = 1
InputStream -> InputStream: Probability = 0.71, Count = 10
InputStream -> getInputStream: Probability = 0.29, Count = 4
dst -> dst: Probability = 0.89, Count = 16
dst -> dst.length: Probability = 0.06, Count = 1
dst -> writeLock: Probability = 0.06, Count = 1
this.src -> this.src: Probability = 1.00, Count = 1
src -> src: Probability = 1.00, Count = 29
this.dst -> this.dst: Probability = 1.00, Count = 1
AddChild -> addChild: Probability = 1.00, Count = 2
Property -> Property: Probability = 0.75, Count = 3
Property -> "_VBA_PROJECT": Probability = 0.25, Count = 1
property -> property: Probability = 1.00, Count = 6
\"" -> \"": Probability = 0.77, Count = 10
\"" -> is: Probability = 0.23, Count = 3
"\"" -> "\"": Probability = 1.00, Count = 7
_children.Add -> _children.add: Probability = 1.00, Count = 1
ListModelsResponse -> ListModelsResult: Probability = 1.00, Count = 1
ListModels -> listModels: Probability = 1.00, Count = 1
ListModelsRequest -> ListModelsRequest: Probability = 1.00, Count = 1
Invoke<ListModelsResponse> -> executeListModels: Probability = 1.00, Count = 1
ExtensionQuery -> ExtensionQuery: Probability = 1.00, Count = 1
Classic.QueryParser -> QueryParser: Probability = 1.00, Count = 1
topLevelParser, -> topLevelParser,: Probability = 1.00, Count = 1
rawQueryString -> rawQueryString: Probability = 1.00, Count = 2
this.RawQueryString -> this.rawQueryString: Probability = 1.00, Count = 1
this.TopLevelParser -> this.topLevelParser: Probability = 1.00, Count = 1
topLevelParser -> topLevelParser: Probability = 1.00, Count = 1
resourceDescription -> resourceDescription: Probability = 0.20, Count = 1
resourceDescription -> ": Probability = 0.60, Count = 3
resourceDescription -> IndexInput.this.toString: Probability = 0.20, Count = 1
GetDeploymentInstanceResponse -> GetDeploymentInstanceResult: Probability = 1.00, Count = 1
GetDeploymentInstance -> getDeploymentInstance: Probability = 1.00, Count = 1
GetDeploymentInstanceRequest -> GetDeploymentInstanceRequest: Probability = 1.00, Count = 1
Invoke<GetDeploymentInstanceResponse> -> executeGetDeploymentInstance: Probability = 1.00, Count = 1
MappingCharFilterFactory -> MappingCharFilterFactory: Probability = 1.00, Count = 1
mapping -> mapping: Probability = 1.00, Count = 1
"mapping" -> "mapping": Probability = 1.00, Count = 1
PromptPassphrase -> promptPassphrase: Probability = 1.00, Count = 1
CredentialItem.StringType -> CredentialItem.StringType: Probability = 1.00, Count = 4
NewPrompt -> newPrompt: Probability = 1.00, Count = 1
provider.Get -> provider.get: Probability = 1.00, Count = 4
passphrase -> passphrase: Probability = 1.00, Count = 3
v.GetValue -> v.getValue: Probability = 1.00, Count = 2
DescribeReservedDBInstancesResponse -> DescribeReservedDBInstancesResult: Probability = 1.00, Count = 2
DescribeReservedDBInstances -> describeReservedDBInstances: Probability = 1.00, Count = 3
DescribeReservedDBInstancesRequest -> DescribeReservedDBInstancesRequest: Probability = 1.00, Count = 2
UnsubscribeFromDatasetResponse -> UnsubscribeFromDatasetResult: Probability = 1.00, Count = 1
UnsubscribeFromDataset -> unsubscribeFromDataset: Probability = 1.00, Count = 1
UnsubscribeFromDatasetRequest -> UnsubscribeFromDatasetRequest: Probability = 1.00, Count = 1
Invoke<UnsubscribeFromDatasetResponse> -> executeUnsubscribeFromDataset: Probability = 1.00, Count = 1
available -> available: Probability = 0.50, Count = 11
available -> throws: Probability = 0.14, Count = 3
available -> this.buf.length: Probability = 0.23, Count = 5
available -> this.buf,: Probability = 0.14, Count = 3
@in.available -> in.available: Probability = 1.00, Count = 1
this.isInBounds -> isInBounds: Probability = 1.00, Count = 3
InsertSST -> insertSST: Probability = 0.43, Count = 3
InsertSST -> LOG.log: Probability = 0.29, Count = 2
InsertSST -> sst.getString: Probability = 0.14, Count = 1
InsertSST -> DEBUG,: Probability = 0.14, Count = 1
sst -> DEBUG,: Probability = 0.13, Count = 2
sst -> "creating: Probability = 0.07, Count = 1
sst -> SST: Probability = 0.13, Count = 2
sst -> sst: Probability = 0.53, Count = 8
sst -> "insert: Probability = 0.07, Count = 1
sst -> string='",: Probability = 0.07, Count = 1
SSTRecord -> via: Probability = 0.17, Count = 1
SSTRecord -> insertSST!": Probability = 0.17, Count = 1
SSTRecord -> SSTRecord: Probability = 0.67, Count = 4
records.Add -> records.add: Probability = 0.67, Count = 6
records.Add -> createExtendedSST: Probability = 0.11, Count = 1
records.Add -> +1,: Probability = 0.22, Count = 2
records.Count -> records.size: Probability = 1.00, Count = 3
AddApplicationCloudWatchLoggingOptionResponse -> AddApplicationCloudWatchLoggingOptionResult: Probability = 1.00, Count = 1
AddApplicationCloudWatchLoggingOption -> addApplicationCloudWatchLoggingOption: Probability = 1.00, Count = 1
AddApplicationCloudWatchLoggingOptionRequest -> AddApplicationCloudWatchLoggingOptionRequest: Probability = 1.00, Count = 1
Invoke<AddApplicationCloudWatchLoggingOptionResponse> -> executeAddApplicationCloudWatchLoggingOption: Probability = 1.00, Count = 1
ListCampaignsResponse -> ListCampaignsResult: Probability = 1.00, Count = 1
ListCampaigns -> listCampaigns: Probability = 1.00, Count = 1
ListCampaignsRequest -> ListCampaignsRequest: Probability = 1.00, Count = 1
Invoke<ListCampaignsResponse> -> executeListCampaigns: Probability = 1.00, Count = 1
lexer.More -> lexer.more: Probability = 1.00, Count = 1
SetFaceCoverRequest -> SetFaceCoverRequest: Probability = 1.00, Count = 1
"SetFaceCover", -> "SetFaceCover",: Probability = 1.00, Count = 1
GetInstanceAccessResponse -> GetInstanceAccessResult: Probability = 1.00, Count = 1
GetInstanceAccess -> getInstanceAccess: Probability = 1.00, Count = 1
GetInstanceAccessRequest -> GetInstanceAccessRequest: Probability = 1.00, Count = 1
Invoke<GetInstanceAccessResponse> -> executeGetInstanceAccess: Probability = 1.00, Count = 1
Clear -> clear: Probability = 1.00, Count = 34
GetFederationTokenResponse -> GetFederationTokenResult: Probability = 1.00, Count = 1
GetFederationToken -> getFederationToken: Probability = 1.00, Count = 1
Invoke<GetFederationTokenResponse> -> executeGetFederationToken: Probability = 1.00, Count = 1
First -> first: Probability = 1.00, Count = 4
currentSentence -> currentSentence: Probability = 0.93, Count = 14
currentSentence -> ++currentSentence: Probability = 0.07, Count = 1
text.SetIndex -> text.setIndex: Probability = 0.76, Count = 16
text.SetIndex -> sentenceStarts[currentSentence]: Probability = 0.14, Count = 3
text.SetIndex -> sentenceStarts[--currentSentence]: Probability = 0.10, Count = 2
text.BeginIndex -> text.getBeginIndex: Probability = 1.00, Count = 11
QueryPhraseMap -> QueryPhraseMap: Probability = 0.67, Count = 6
QueryPhraseMap -> rootMap.subMap.get: Probability = 0.11, Count = 1
QueryPhraseMap -> term: Probability = 0.11, Count = 1
QueryPhraseMap -> searchPhrase: Probability = 0.11, Count = 1
GetFieldTermMap -> getFieldTermMap: Probability = 1.00, Count = 1
fieldName, -> fieldName,: Probability = 0.96, Count = 22
fieldName, -> Query: Probability = 0.04, Count = 1
rootMap -> rootMap: Probability = 0.67, Count = 2
rootMap -> getRootMap: Probability = 0.33, Count = 1
java.util.MapClass.Entry<object, -> Multiset.Entry<?>: Probability = 0.19, Count = 7
java.util.MapClass.Entry<object, -> element: Probability = 0.08, Count = 3
java.util.MapClass.Entry<object, -> entry.getElement: Probability = 0.11, Count = 4
java.util.MapClass.Entry<object, -> removeValuesForKey: Probability = 0.03, Count = 1
java.util.MapClass.Entry<object, -> Entry<?,: Probability = 0.38, Count = 14
java.util.MapClass.Entry<object, -> count: Probability = 0.05, Count = 2
java.util.MapClass.Entry<object, -> map.get: Probability = 0.03, Count = 1
java.util.MapClass.Entry<object, -> Map.Entry<?,?>: Probability = 0.11, Count = 4
java.util.MapClass.Entry<object, -> ConcurrentHashMap.this.get: Probability = 0.03, Count = 1
object> -> object: Probability = 0.07, Count = 3
object> -> entryCount: Probability = 0.12, Count = 5
object> -> entry.getCount: Probability = 0.10, Count = 4
object> -> count: Probability = 0.07, Count = 3
object> -> ?>: Probability = 0.36, Count = 15
object> -> key: Probability = 0.12, Count = 5
object> -> e.getKey: Probability = 0.02, Count = 1
object> -> v: Probability = 0.10, Count = 4
object> -> collection: Probability = 0.05, Count = 2
e.getKey -> &&: Probability = 0.50, Count = 7
e.getKey -> e.getKey: Probability = 0.50, Count = 7
DeleteLexiconResponse -> DeleteLexiconResult: Probability = 1.00, Count = 1
DeleteLexicon -> deleteLexicon: Probability = 1.00, Count = 1
DeleteLexiconRequest -> DeleteLexiconRequest: Probability = 1.00, Count = 1
Invoke<DeleteLexiconResponse> -> executeDeleteLexicon: Probability = 1.00, Count = 1
DomainMetadataResponse -> DomainMetadataResult: Probability = 1.00, Count = 1
DomainMetadata -> domainMetadata: Probability = 1.00, Count = 1
DomainMetadataRequest -> DomainMetadataRequest: Probability = 1.00, Count = 1
Invoke<DomainMetadataResponse> -> executeDomainMetadata: Probability = 1.00, Count = 1
GetReinterestingFlag -> getReinterestingFlag: Probability = 1.00, Count = 1
REINTERESTING -> REINTERESTING: Probability = 1.00, Count = 1
advise -> advise: Probability = 0.60, Count = 3
advise -> FileDescriptor: Probability = 0.20, Count = 1
advise -> posix_fadvise: Probability = 0.20, Count = 1
fd, -> fd,: Probability = 1.00, Count = 4
code -> code: Probability = 0.78, Count = 14
code -> err: Probability = 0.17, Count = 3
code -> ErrPtg: Probability = 0.06, Count = 1
"posix_fadvise -> "posix_fadvise: Probability = 1.00, Count = 1
code=" -> code=": Probability = 1.00, Count = 1
DeleteSchemaResponse -> DeleteSchemaResult: Probability = 1.00, Count = 1
DeleteSchema -> deleteSchema: Probability = 1.00, Count = 1
DeleteSchemaRequest -> DeleteSchemaRequest: Probability = 1.00, Count = 1
Invoke<DeleteSchemaResponse> -> executeDeleteSchema: Probability = 1.00, Count = 1
CreateBatchInferenceJobResponse -> CreateBatchInferenceJobResult: Probability = 1.00, Count = 1
CreateBatchInferenceJob -> createBatchInferenceJob: Probability = 1.00, Count = 1
CreateBatchInferenceJobRequest -> CreateBatchInferenceJobRequest: Probability = 1.00, Count = 1
Invoke<CreateBatchInferenceJobResponse> -> executeCreateBatchInferenceJob: Probability = 1.00, Count = 1
BitField -> BitField: Probability = 0.57, Count = 4
BitField -> instances.get: Probability = 0.14, Count = 1
BitField -> Integer.valueOf: Probability = 0.29, Count = 2
mask -> mask: Probability = 1.00, Count = 14
this._mask -> _mask: Probability = 1.00, Count = 6
num -> count: Probability = 0.08, Count = 2
num -> VBA_PROJECT: Probability = 0.12, Count = 3
num -> name1.compareTo: Probability = 0.04, Count = 1
num -> name2.compareTo: Probability = 0.04, Count = 1
num -> name1.startsWith: Probability = 0.08, Count = 2
num -> name2.startsWith: Probability = 0.08, Count = 2
num -> name1.compareToIgnoreCase: Probability = 0.08, Count = 2
num -> name2: Probability = 0.08, Count = 2
num -> elseresult: Probability = 0.04, Count = 1
num -> result: Probability = 0.04, Count = 1
num -> num: Probability = 0.27, Count = 7
num -> "free: Probability = 0.04, Count = 1
num -> was:: Probability = 0.04, Count = 1
num2 -> bit_pattern: Probability = 0.67, Count = 4
num2 -> count++: Probability = 0.17, Count = 1
num2 -> >>=: Probability = 0.17, Count = 1
this._shift_count -> _shift_count: Probability = 1.00, Count = 2
Failed -> failed: Probability = 1.00, Count = 1
failingPaths.Count -> !failingPaths.isEmpty: Probability = 1.00, Count = 1
b.Append -> b.append: Probability = 0.59, Count = 47
b.Append -> ": Probability = 0.04, Count = 3
b.Append -> target=": Probability = 0.01, Count = 1
b.Append -> .append: Probability = 0.06, Count = 5
b.Append -> label=0x": Probability = 0.01, Count = 1
b.Append -> BIT_FINAL_ARC: Probability = 0.01, Count = 1
b.Append -> "s=": Probability = 0.03, Count = 2
b.Append -> starts[i]: Probability = 0.03, Count = 2
b.Append -> sectionCount: Probability = 0.03, Count = 2
b.Append -> "byteOrder:: Probability = 0.01, Count = 1
b.Append -> getByteOrder: Probability = 0.01, Count = 1
b.Append -> classID:: Probability = 0.01, Count = 1
b.Append -> format:: Probability = 0.01, Count = 1
b.Append -> getFormat: Probability = 0.01, Count = 1
b.Append -> OSVersion:: Probability = 0.01, Count = 1
b.Append -> getOSVersion: Probability = 0.01, Count = 1
b.Append -> sectionCount:: Probability = 0.01, Count = 1
b.Append -> sections:: Probability = 0.01, Count = 1
b.Append -> [\n": Probability = 0.01, Count = 1
b.Append -> Section: Probability = 0.01, Count = 1
b.Append -> section:: Probability = 0.01, Count = 1
b.Append -> getSections: Probability = 0.01, Count = 1
b.Append -> section.toString: Probability = 0.01, Count = 1
b.Append -> getPropertySetIDMap: Probability = 0.01, Count = 1
b.ToString -> b.toString: Probability = 1.00, Count = 12
this._enclosing.modCount -> modCount: Probability = 1.00, Count = 13
this.expectedModCount -> expectedModCount: Probability = 0.88, Count = 15
this.expectedModCount -> lastReturned: Probability = 0.12, Count = 2
java.util.ConcurrentModificationException -> ConcurrentModificationException: Probability = 1.00, Count = 14
this.lastReturned -> lastReturned: Probability = 0.50, Count = 2
this.lastReturned -> LinkedHashMap.this.remove: Probability = 0.25, Count = 1
this.lastReturned -> lastReturned.key: Probability = 0.25, Count = 1
System.InvalidOperationException -> IllegalStateException: Probability = 1.00, Count = 10
ShouldBeRecursive -> shouldBeRecursive: Probability = 1.00, Count = 8
path.ShouldBeRecursive -> path.shouldBeRecursive: Probability = 1.00, Count = 2
ANY_DIFF.ShouldBeRecursive -> ANY_DIFF.shouldBeRecursive: Probability = 1.00, Count = 1
DeleteQueueRequest -> DeleteQueueRequest: Probability = 1.00, Count = 2
queueUrl -> queueUrl: Probability = 0.73, Count = 19
queueUrl -> ): Probability = 0.27, Count = 7
_queueUrl -> setQueueUrl: Probability = 1.00, Count = 8
externSheetIndex, -> externSheetIndex,: Probability = 1.00, Count = 5
externNameIndex -> externNameIndex: Probability = 1.00, Count = 4
nameName -> nameName: Probability = 1.00, Count = 7
externNameIndex, -> externNameIndex,: Probability = 1.00, Count = 2
ix -> ix: Probability = 0.92, Count = 11
ix -> evaluateFirstArg: Probability = 0.08, Count = 1
linkTable.ResolveNameXIx -> linkTable.resolveNameXIx: Probability = 1.00, Count = 1
RegisterUserResponse -> RegisterUserResult: Probability = 1.00, Count = 1
RegisterUser -> registerUser: Probability = 1.00, Count = 1
RegisterUserRequest -> RegisterUserRequest: Probability = 1.00, Count = 1
Invoke<RegisterUserResponse> -> executeRegisterUser: Probability = 1.00, Count = 1
0xFF -> 0xFF: Probability = 0.98, Count = 96
0xFF -> final: Probability = 0.01, Count = 1
0xFF -> &: Probability = 0.01, Count = 1
doFixed -> fixed: Probability = 1.00, Count = 6
BoolEval.FALSE, -> BoolEval.FALSE,: Probability = 1.00, Count = 2
protectedArray -> protectedArray: Probability = 1.00, Count = 6
ReadUByte -> readUByte: Probability = 1.00, Count = 4
ch -> buf: Probability = 0.02, Count = 2
ch -> byte[1]: Probability = 0.01, Count = 1
ch -> LittleEndian.getUByte: Probability = 0.01, Count = 1
ch -> ch: Probability = 0.64, Count = 74
ch -> URISyntaxException: Probability = 0.01, Count = 1
ch -> s.charAt: Probability = 0.03, Count = 4
ch -> 'z': Probability = 0.02, Count = 2
ch -> '9': Probability = 0.02, Count = 2
ch -> legal.indexOf: Probability = 0.01, Count = 1
ch -> character",: Probability = 0.01, Count = 1
ch -> DELIM_CHAR: Probability = 0.03, Count = 3
ch -> ESCAPE_CHAR: Probability = 0.03, Count = 3
ch -> parts.add: Probability = 0.02, Count = 2
ch -> uri.charAt: Probability = 0.03, Count = 3
ch -> isRetained: Probability = 0.01, Count = 1
ch -> '%': Probability = 0.01, Count = 1
ch -> i: Probability = 0.02, Count = 2
ch -> n.cells.put: Probability = 0.02, Count = 2
ch -> ch,: Probability = 0.02, Count = 2
ch -> existing.at: Probability = 0.01, Count = 1
ch -> UNI_SUR_HIGH_START: Probability = 0.01, Count = 1
ch -> UNI_SUR_HIGH_END: Probability = 0.01, Count = 1
ch -> "H:": Probability = 0.01, Count = 1
ch -> UNI_SUR_LOW_START: Probability = 0.01, Count = 1
ch -> UNI_SUR_LOW_END: Probability = 0.02, Count = 2
ch -> "L:": Probability = 0.01, Count = 1
RuntimeException -> RuntimeException: Probability = 1.00, Count = 25
AttrPtg -> AttrPtg: Probability = 1.00, Count = 9
CreateSkip -> createSkip: Probability = 1.00, Count = 1
dist -> dist: Probability = 0.56, Count = 20
dist -> levelW[i]: Probability = 0.06, Count = 2
dist -> levelH[i]: Probability = 0.06, Count = 2
dist -> arity: Probability = 0.06, Count = 2
dist -> 0: Probability = 0.08, Count = 3
dist -> level: Probability = 0.03, Count = 1
dist -> level/arity: Probability = 0.06, Count = 2
dist -> GeohashUtils.lookupHashLenForWidthHeight: Probability = 0.06, Count = 2
dist -> dist,: Probability = 0.03, Count = 1
dist -> Math.min: Probability = 0.03, Count = 1
optiSkip.Set -> optiSkip.set: Probability = 1.00, Count = 1
dist, -> dist,: Probability = 1.00, Count = 3
DescribeUserHierarchyGroupResponse -> DescribeUserHierarchyGroupResult: Probability = 1.00, Count = 1
DescribeUserHierarchyGroup -> describeUserHierarchyGroup: Probability = 1.00, Count = 1
DescribeUserHierarchyGroupRequest -> DescribeUserHierarchyGroupRequest: Probability = 1.00, Count = 1
Invoke<DescribeUserHierarchyGroupResponse> -> executeDescribeUserHierarchyGroup: Probability = 1.00, Count = 1
User -> User: Probability = 1.00, Count = 1
arn, -> arn,: Probability = 1.00, Count = 2
createDate -> createDate: Probability = 1.00, Count = 6
_path -> setPath: Probability = 0.80, Count = 4
_path -> path: Probability = 0.20, Count = 1
_userId -> setUserId: Probability = 0.50, Count = 1
_userId -> userId: Probability = 0.50, Count = 1
_arn -> setArn: Probability = 1.00, Count = 4
arn -> arn: Probability = 0.78, Count = 7
arn -> Arn: Probability = 0.22, Count = 2
_createDate -> setCreateDate: Probability = 1.00, Count = 3
lemmatizerOp -> OpenNLPLemmatizerFilter: Probability = 0.29, Count = 2
lemmatizerOp -> NLPLemmatizerOp: Probability = 0.14, Count = 1
lemmatizerOp -> lemmatizerOp: Probability = 0.29, Count = 2
lemmatizerOp -> OpenNLPOpsFactory.getLemmatizer: Probability = 0.14, Count = 1
lemmatizerOp -> dictionaryFile,: Probability = 0.14, Count = 1
lemmatizerModelFile -> lemmatizerModelFile: Probability = 1.00, Count = 3
byte0 -> byte0: Probability = 1.00, Count = 40
byte1 -> byte1: Probability = 1.00, Count = 50
ulong -> >>>: Probability = 1.00, Count = 31
byte2 -> byte2: Probability = 1.00, Count = 45
15 -> 15: Probability = 1.00, Count = 23
RebootInstanceRequest -> RebootInstanceRequest: Probability = 1.00, Count = 3
"HPC", -> "HPC",: Probability = 0.40, Count = 4
"HPC", -> "2016-06-03",: Probability = 0.40, Count = 4
"HPC", -> "Ens",: Probability = 0.10, Count = 1
"HPC", -> "2017-11-10",: Probability = 0.10, Count = 1
"RebootInstance" -> "RebootInstance",: Probability = 0.67, Count = 2
"RebootInstance" -> "ens": Probability = 0.33, Count = 1
"2016-06-03", -> "hpc": Probability = 1.00, Count = 4
ListContainerInstancesResponse -> ListContainerInstancesResult: Probability = 1.00, Count = 1
ListContainerInstances -> listContainerInstances: Probability = 1.00, Count = 1
ListContainerInstancesRequest -> ListContainerInstancesRequest: Probability = 1.00, Count = 1
Invoke<ListContainerInstancesResponse> -> executeListContainerInstances: Probability = 1.00, Count = 1
ListClustersResponse -> ListClustersResult: Probability = 1.00, Count = 2
ListClusters -> listClusters: Probability = 1.00, Count = 3
ListClustersRequest -> ListClustersRequest: Probability = 1.00, Count = 2
Invoke<ListClustersResponse> -> executeListClusters: Probability = 1.00, Count = 1
bool[] -> boolean[]: Probability = 1.00, Count = 18
GetRelationalDatabaseSnapshotResponse -> GetRelationalDatabaseSnapshotResult: Probability = 1.00, Count = 1
GetRelationalDatabaseSnapshot -> getRelationalDatabaseSnapshot: Probability = 1.00, Count = 1
GetRelationalDatabaseSnapshotRequest -> GetRelationalDatabaseSnapshotRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseSnapshotResponse> -> executeGetRelationalDatabaseSnapshot: Probability = 1.00, Count = 1
FillFields -> fillFields: Probability = 1.00, Count = 10
recordFactory -> EscherRecordFactory: Probability = 0.07, Count = 1
recordFactory -> recordFactory: Probability = 0.93, Count = 13
bytesRemaining -> bytesRemaining: Probability = 0.78, Count = 39
bytesRemaining -> recordFactory.createRecord: Probability = 0.06, Count = 3
bytesRemaining -> "Expecting: Probability = 0.04, Count = 2
bytesRemaining -> log.check: Probability = 0.02, Count = 1
bytesRemaining -> log.log: Probability = 0.02, Count = 1
bytesRemaining -> POILogger.WARN,: Probability = 0.02, Count = 1
bytesRemaining -> data:: Probability = 0.02, Count = 1
bytesRemaining -> space: Probability = 0.02, Count = 1
bytesRemaining -> left": Probability = 0.02, Count = 1
ReadHeader -> readHeader: Probability = 1.00, Count = 10
data[pos -> data[pos: Probability = 1.00, Count = 6
Array.Copy -> System.arraycopy: Probability = 0.87, Count = 61
Array.Copy -> IOUtils.safelyAllocate: Probability = 0.06, Count = 4
Array.Copy -> MAX_RECORD_LENGTH: Probability = 0.07, Count = 5
LittleEndian.GetShort -> LittleEndian.getShort: Probability = 0.43, Count = 3
LittleEndian.GetShort -> numElements: Probability = 0.29, Count = 2
LittleEndian.GetShort -> sizeOfElements: Probability = 0.29, Count = 2
LittleEndian.GetInt -> LittleEndian.getInt: Probability = 0.67, Count = 16
LittleEndian.GetInt -> size+=4: Probability = 0.33, Count = 8
20 -> 20: Probability = 1.00, Count = 9
24 -> 24: Probability = 1.00, Count = 9
36 -> 36: Probability = 1.00, Count = 4
bytesRead -> bytesRead: Probability = 1.00, Count = 4
EscherBlipRecord -> EscherBlipRecord: Probability = 1.00, Count = 2
byte[bytesRemaining] -> bytesRemaining,: Probability = 0.67, Count = 4
byte[bytesRemaining] -> MAX_RECORD_LENGTH: Probability = 0.33, Count = 2
pos, -> pos,: Probability = 0.95, Count = 70
pos, -> -8: Probability = 0.01, Count = 1
pos, -> field_1_dx1: Probability = 0.01, Count = 1
pos, -> field_2_dy1: Probability = 0.01, Count = 1
pos, -> field_3_dx2: Probability = 0.01, Count = 1
PhoneNumberValidateResponse -> PhoneNumberValidateResult: Probability = 1.00, Count = 1
PhoneNumberValidate -> phoneNumberValidate: Probability = 1.00, Count = 1
PhoneNumberValidateRequest -> PhoneNumberValidateRequest: Probability = 1.00, Count = 1
Invoke<PhoneNumberValidateResponse> -> executePhoneNumberValidate: Probability = 1.00, Count = 1
CreateTransformJobResponse -> CreateTransformJobResult: Probability = 1.00, Count = 1
CreateTransformJob -> createTransformJob: Probability = 1.00, Count = 1
CreateTransformJobRequest -> CreateTransformJobRequest: Probability = 1.00, Count = 1
Invoke<CreateTransformJobResponse> -> executeCreateTransformJob: Probability = 1.00, Count = 1
elementData -> elementData: Probability = 0.67, Count = 2
elementData -> newElementArray: Probability = 0.33, Count = 1
size_1 -> size: Probability = 0.88, Count = 15
size_1 -> dumpArray[i]: Probability = 0.12, Count = 2
elementCount -> elementCount: Probability = 1.00, Count = 7
i-- -> i--: Probability = 1.00, Count = 16
DescribeCacheParametersRequest -> DescribeCacheParametersRequest: Probability = 1.00, Count = 2
cacheParameterGroupName -> cacheParameterGroupName: Probability = 0.60, Count = 9
cacheParameterGroupName -> ): Probability = 0.40, Count = 6
_cacheParameterGroupName -> setCacheParameterGroupName: Probability = 1.00, Count = 6
c.clear -> .clear: Probability = 0.50, Count = 1
c.clear -> c.clear: Probability = 0.50, Count = 1
HasRevSort -> hasRevSort: Probability = 1.00, Count = 1
RevSort -> RevSort: Probability = 1.00, Count = 4
sorting.Contains -> sorting.contains: Probability = 1.00, Count = 1
StashListCommand -> StashListCommand: Probability = 1.00, Count = 2
StashList -> stashList: Probability = 1.00, Count = 1
PutGroupPolicyRequest -> PutGroupPolicyRequest: Probability = 1.00, Count = 1
groupName, -> groupName,: Probability = 1.00, Count = 9
policyDocument -> policyDocument: Probability = 1.00, Count = 4
_groupName -> setGroupName: Probability = 0.53, Count = 17
_groupName -> (: Probability = 0.44, Count = 14
_groupName -> groupName: Probability = 0.03, Count = 1
groupName -> groupName: Probability = 0.60, Count = 24
groupName -> ): Probability = 0.40, Count = 16
_policyDocument -> setPolicyDocument: Probability = 1.00, Count = 2
base.get -> super.get: Probability = 1.00, Count = 2
"=" -> "=": Probability = 1.00, Count = 4
WriteByte -> writeByte: Probability = 1.00, Count = 9
CheckPosition -> checkPosition: Probability = 1.00, Count = 8
_buf[_writeIndex++] -> _buf[_writeIndex++]: Probability = 1.00, Count = 1
CountryRecord -> CountryRecord: Probability = 1.00, Count = 1
field_1_default_country -> field_1_default_country: Probability = 1.00, Count = 1
field_2_current_country -> field_2_current_country: Probability = 1.00, Count = 1
UpdateContainerAgentResponse -> UpdateContainerAgentResult: Probability = 1.00, Count = 1
UpdateContainerAgent -> updateContainerAgent: Probability = 1.00, Count = 1
UpdateContainerAgentRequest -> UpdateContainerAgentRequest: Probability = 1.00, Count = 1
Invoke<UpdateContainerAgentResponse> -> executeUpdateContainerAgent: Probability = 1.00, Count = 1
DescribeNodeConfigurationOptionsResponse -> DescribeNodeConfigurationOptionsResult: Probability = 1.00, Count = 1
DescribeNodeConfigurationOptions -> describeNodeConfigurationOptions: Probability = 1.00, Count = 1
DescribeNodeConfigurationOptionsRequest -> DescribeNodeConfigurationOptionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeNodeConfigurationOptionsResponse> -> executeDescribeNodeConfigurationOptions: Probability = 1.00, Count = 1
AddImageRequest -> AddImageRequest: Probability = 1.00, Count = 1
"ImageSearch", -> "ImageSearch",: Probability = 1.00, Count = 2
"2019-03-25", -> "2019-03-25",: Probability = 1.00, Count = 2
"AddImage", -> "AddImage",: Probability = 1.00, Count = 1
"imagesearch", -> "imagesearch": Probability = 1.00, Count = 2
"/v2/image/add" -> "/v2/image/add": Probability = 1.00, Count = 1
BorderFormatting -> BorderFormatting: Probability = 1.00, Count = 1
ListTagsForStreamResponse -> ListTagsForStreamResult: Probability = 1.00, Count = 1
ListTagsForStream -> listTagsForStream: Probability = 1.00, Count = 1
ListTagsForStreamRequest -> ListTagsForStreamRequest: Probability = 1.00, Count = 1
Invoke<ListTagsForStreamResponse> -> executeListTagsForStream: Probability = 1.00, Count = 1
NPOI.SS.UserModel.IName -> HSSFName: Probability = 1.00, Count = 3
CreateName -> createName: Probability = 1.00, Count = 2
NameRecord -> NameRecord: Probability = 0.90, Count = 26
NameRecord -> "Builtin: Probability = 0.03, Count = 1
NameRecord -> builtInName+: Probability = 0.03, Count = 1
NameRecord -> _definedNames.get: Probability = 0.03, Count = 1
nameRecord -> nameRecord: Probability = 1.00, Count = 4
workbook.CreateName -> workbook.createName: Probability = 1.00, Count = 1
HSSFName -> HSSFName: Probability = 1.00, Count = 2
newName -> newName: Probability = 0.88, Count = 7
newName -> names.add: Probability = 0.12, Count = 1
CreateLogPatternResponse -> CreateLogPatternResult: Probability = 1.00, Count = 1
CreateLogPattern -> createLogPattern: Probability = 1.00, Count = 1
CreateLogPatternRequest -> CreateLogPatternRequest: Probability = 1.00, Count = 1
Invoke<CreateLogPatternResponse> -> executeCreateLogPattern: Probability = 1.00, Count = 1
GetTransitGatewayRouteTablePropagationsResponse -> GetTransitGatewayRouteTablePropagationsResult: Probability = 1.00, Count = 1
GetTransitGatewayRouteTablePropagations -> getTransitGatewayRouteTablePropagations: Probability = 1.00, Count = 1
GetTransitGatewayRouteTablePropagationsRequest -> GetTransitGatewayRouteTablePropagationsRequest: Probability = 1.00, Count = 1
Invoke<GetTransitGatewayRouteTablePropagationsResponse> -> executeGetTransitGatewayRouteTablePropagations: Probability = 1.00, Count = 1
Setup -> setup: Probability = 1.00, Count = 2
base.Setup -> super.setup: Probability = 1.00, Count = 1
inputDirProp -> inputDirProp: Probability = 0.60, Count = 3
inputDirProp -> .getConfig: Probability = 0.20, Count = 1
inputDirProp -> ADDINDEXES_INPUT_DIR,: Probability = 0.20, Count = 1
specified -> specified: Probability = 1.00, Count = 3
NGit.Api.StashDropCommand -> StashDropCommand: Probability = 1.00, Count = 2
SetAll -> setAll: Probability = 1.00, Count = 1
all -> all: Probability = 1.00, Count = 6
this.all -> this.all: Probability = 1.00, Count = 1
ListTrainingJobsForHyperParameterTuningJobResponse -> ListTrainingJobsForHyperParameterTuningJobResult: Probability = 1.00, Count = 1
ListTrainingJobsForHyperParameterTuningJob -> listTrainingJobsForHyperParameterTuningJob: Probability = 1.00, Count = 1
ListTrainingJobsForHyperParameterTuningJobRequest -> ListTrainingJobsForHyperParameterTuningJobRequest: Probability = 1.00, Count = 1
Invoke<ListTrainingJobsForHyperParameterTuningJobResponse> -> executeListTrainingJobsForHyperParameterTuningJob: Probability = 1.00, Count = 1
"Match -> "Match: Probability = 0.50, Count = 1
"Match -> %s: Probability = 0.50, Count = 1
found -> found: Probability = 0.90, Count = 9
found -> labels",succeeded: Probability = 0.10, Count = 1
labels", -> "succeeded": Probability = 1.00, Count = 1
Succeeded -> "failed",getLabels: Probability = 1.00, Count = 1
"succeeded" -> .size: Probability = 1.00, Count = 1
AuthorizeCacheSecurityGroupIngressResponse -> CacheSecurityGroup: Probability = 1.00, Count = 1
AuthorizeCacheSecurityGroupIngress -> authorizeCacheSecurityGroupIngress: Probability = 1.00, Count = 1
AuthorizeCacheSecurityGroupIngressRequest -> AuthorizeCacheSecurityGroupIngressRequest: Probability = 1.00, Count = 1
Invoke<AuthorizeCacheSecurityGroupIngressResponse> -> executeAuthorizeCacheSecurityGroupIngress: Probability = 1.00, Count = 1
GetInflectionType -> getInflectionType: Probability = 1.00, Count = 3
dictionary.GetInflectionType -> dictionary.getInflectionType: Probability = 1.00, Count = 1
wordId -> wordId: Probability = 1.00, Count = 12
pending.Next -> nextForIterator: Probability = 0.50, Count = 1
pending.Next -> objItr.next: Probability = 0.50, Count = 1
BatchAssociateUserStackResponse -> BatchAssociateUserStackResult: Probability = 1.00, Count = 1
BatchAssociateUserStack -> batchAssociateUserStack: Probability = 1.00, Count = 1
BatchAssociateUserStackRequest -> BatchAssociateUserStackRequest: Probability = 1.00, Count = 1
Invoke<BatchAssociateUserStackResponse> -> executeBatchAssociateUserStack: Probability = 1.00, Count = 1
ScenarioProtectRecord -> ScenarioProtectRecord: Probability = 1.00, Count = 4
rec.field_1_protect -> copy: Probability = 1.00, Count = 2
GetBundleClass -> Class: Probability = 0.50, Count = 1
GetBundleClass -> getBundleClass: Probability = 0.50, Count = 1
bundleClass -> bundleClass: Probability = 1.00, Count = 1
NextBuffer -> nextBuffer: Probability = 1.00, Count = 4
bufferUpto -> 1+bufferUpto: Probability = 0.11, Count = 4
bufferUpto -> bufferUpto: Probability = 0.40, Count = 14
bufferUpto -> zeroFillBuffers,: Probability = 0.06, Count = 2
bufferUpto -> zeroFillBuffers: Probability = 0.06, Count = 2
bufferUpto -> i<bufferUpto: Probability = 0.06, Count = 2
bufferUpto -> buffers[i],: Probability = 0.06, Count = 2
bufferUpto -> buffers[bufferUpto],: Probability = 0.06, Count = 2
bufferUpto -> intUpto,: Probability = 0.03, Count = 1
bufferUpto -> !reuseFirst: Probability = 0.06, Count = 2
bufferUpto -> allocator.recycleIntBlocks: Probability = 0.03, Count = 1
bufferUpto -> bufferUpto+1,: Probability = 0.03, Count = 1
bufferUpto -> buffers[0]: Probability = 0.06, Count = 2
buffers.Length -> buffers.length: Probability = 0.31, Count = 4
buffers.Length -> buffers.length*1.5: Probability = 0.08, Count = 1
buffers.Length -> ][]: Probability = 0.15, Count = 2
buffers.Length -> newBuffers,: Probability = 0.15, Count = 2
buffers.Length -> buffers: Probability = 0.15, Count = 2
buffers.Length -> byte[ArrayUtil.oversize: Probability = 0.08, Count = 1
buffers.Length -> buffers.length+1,NUM_BYTES_OBJECT_REF: Probability = 0.08, Count = 1
int[][] -> int[][]: Probability = 0.55, Count = 11
int[][] -> ][]: Probability = 0.45, Count = 9
newBuffers -> newBuffers: Probability = 1.00, Count = 4
buffers, -> buffers,: Probability = 1.00, Count = 6
buffers[1 -> buffers[1+bufferUpto]: Probability = 1.00, Count = 2
bufferUpto++ -> bufferUpto++: Probability = 1.00, Count = 2
Int32Upto -> intUpto: Probability = 1.00, Count = 3
Int32Offset -> intOffset: Probability = 1.00, Count = 3
INT32_BLOCK_SIZE -> INT_BLOCK_SIZE: Probability = 1.00, Count = 4
DeleteVpnGatewayRequest -> DeleteVpnGatewayRequest: Probability = 1.00, Count = 2
vpnGatewayId -> vpnGatewayId: Probability = 0.67, Count = 6
vpnGatewayId -> ): Probability = 0.33, Count = 3
_vpnGatewayId -> setVpnGatewayId: Probability = 1.00, Count = 4
IEncoder -> Encoder: Probability = 1.00, Count = 1
GetEncoder -> getEncoder: Probability = 1.00, Count = 3
Format -> Format: Probability = 0.39, Count = 7
Format -> format: Probability = 0.61, Count = 11
format, -> format,: Probability = 1.00, Count = 10
version, -> version,: Probability = 1.00, Count = 7
bitsPerValue -> bitsPerValue: Probability = 0.81, Count = 39
bitsPerValue -> 64: Probability = 0.06, Count = 3
bitsPerValue -> /: Probability = 0.04, Count = 2
bitsPerValue -> this.bitsPerValue: Probability = 0.02, Count = 1
bitsPerValue -> Packed64SingleBlock.isSupported: Probability = 0.02, Count = 1
bitsPerValue -> assert: Probability = 0.02, Count = 1
bitsPerValue -> >=: Probability = 0.02, Count = 1
CheckVersion -> checkVersion: Probability = 1.00, Count = 3
version -> version: Probability = 0.78, Count = 28
version -> "Format: Probability = 0.06, Count = 2
version -> HashFunction: Probability = 0.03, Count = 1
version -> VERSION_START: Probability = 0.06, Count = 2
version -> "Version: Probability = 0.06, Count = 2
version -> old,: Probability = 0.03, Count = 1
BulkOperation.Of -> BulkOperation.of: Probability = 1.00, Count = 2
ClassificationResult -> ClassificationResult: Probability = 1.00, Count = 1
assignedClass, -> assignedClass,: Probability = 1.00, Count = 1
score -> score: Probability = 0.84, Count = 16
score -> weightedSpanTerm.getWeight: Probability = 0.05, Count = 1
score -> !foundTerms.contains: Probability = 0.05, Count = 1
score -> foundTerms.add: Probability = 0.05, Count = 1
_assignedClass -> this.assignedClass: Probability = 1.00, Count = 1
assignedClass -> assignedClass: Probability = 1.00, Count = 1
_score -> this.score: Probability = 1.00, Count = 1
CreateRelationalDatabaseSnapshotResponse -> CreateRelationalDatabaseSnapshotResult: Probability = 1.00, Count = 1
CreateRelationalDatabaseSnapshot -> createRelationalDatabaseSnapshot: Probability = 1.00, Count = 1
CreateRelationalDatabaseSnapshotRequest -> CreateRelationalDatabaseSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CreateRelationalDatabaseSnapshotResponse> -> executeCreateRelationalDatabaseSnapshot: Probability = 1.00, Count = 1
AddName -> addName: Probability = 1.00, Count = 4
OrCreateLinkTable.AddName -> getOrCreateLinkTable: Probability = 0.50, Count = 1
OrCreateLinkTable.AddName -> .addName: Probability = 0.50, Count = 1
GetKey -> getKey: Probability = 1.00, Count = 1
GetBlockPublicAccessConfigurationResponse -> GetBlockPublicAccessConfigurationResult: Probability = 1.00, Count = 1
GetBlockPublicAccessConfiguration -> getBlockPublicAccessConfiguration: Probability = 1.00, Count = 1
GetBlockPublicAccessConfigurationRequest -> GetBlockPublicAccessConfigurationRequest: Probability = 1.00, Count = 1
Invoke<GetBlockPublicAccessConfigurationResponse> -> executeGetBlockPublicAccessConfiguration: Probability = 1.00, Count = 1
unchecked -> delta[p++]: Probability = 0.38, Count = 3
unchecked -> ;: Probability = 0.62, Count = 5
0xff -> 0xff: Probability = 0.52, Count = 11
0xff -> c: Probability = 0.10, Count = 2
0xff -> WHITESPACE[c: Probability = 0.05, Count = 1
0xff -> &: Probability = 0.14, Count = 3
0xff -> 0xff]: Probability = 0.05, Count = 1
0xff -> buffer[limit]&0xff: Probability = 0.05, Count = 1
0xff -> buffer[1+limit]&0xff: Probability = 0.05, Count = 1
0xff -> <<16: Probability = 0.05, Count = 1
0x80 -> 0x80: Probability = 1.00, Count = 7
resLen -> resLen: Probability = 1.00, Count = 5
RamUsageEstimator.AlignObjectSize -> RamUsageEstimator.alignObjectSize: Probability = 0.14, Count = 2
RamUsageEstimator.AlignObjectSize -> super.ramBytesUsed: Probability = 0.29, Count = 4
RamUsageEstimator.AlignObjectSize -> offsets.ramBytesUsed: Probability = 0.21, Count = 3
RamUsageEstimator.AlignObjectSize -> values.ramBytesUsed: Probability = 0.07, Count = 1
RamUsageEstimator.AlignObjectSize -> RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+: Probability = 0.14, Count = 2
RamUsageEstimator.AlignObjectSize -> docs.ramBytesUsed: Probability = 0.07, Count = 1
RamUsageEstimator.AlignObjectSize -> RamUsageEstimator.NUM_BYTES_OBJECT_REF+: Probability = 0.07, Count = 1
RamUsageEstimator.NUM_BYTES_OBJECT_HEADER -> RamUsageEstimator.NUM_BYTES_OBJECT_HEADER: Probability = 1.00, Count = 1
RamUsageEstimator.NUM_BYTES_INT32 -> Integer.BYTES: Probability = 1.00, Count = 8
NoteRecord -> NoteRecord: Probability = 1.00, Count = 3
field_6_author -> field_6_author: Probability = 1.00, Count = 4
field_3_flags -> field_3_flags: Probability = 1.00, Count = 3
field_7_padding -> field_7_padding: Probability = 1.00, Count = 3
DEFAULT_PADDING -> DEFAULT_PADDING: Probability = 1.00, Count = 1
CellReference[] -> CellReference[]: Probability = 0.67, Count = 2
CellReference[] -> getAllReferencedCells: Probability = 0.33, Count = 1
_firstCell, -> _firstCell,: Probability = 0.67, Count = 2
_firstCell, -> _version,: Probability = 0.33, Count = 1
Math.Min -> Math.min: Probability = 0.90, Count = 35
Math.Min -> ,: Probability = 0.10, Count = 4
_lastCell.Row -> _lastCell.getRow: Probability = 1.00, Count = 2
CellReference -> ,: Probability = 0.14, Count = 5
CellReference -> CellReference: Probability = 0.69, Count = 24
CellReference -> cr: Probability = 0.09, Count = 3
CellReference -> crA: Probability = 0.03, Count = 1
CellReference -> ref: Probability = 0.06, Count = 2
refs -> refs: Probability = 0.88, Count = 7
refs -> RefList<Ref>: Probability = 0.12, Count = 1
ArrayList -> ArrayList<>: Probability = 0.89, Count = 8
ArrayList -> HashSet<>: Probability = 0.11, Count = 1
ref1 -> ref: Probability = 1.00, Count = 4
typeof -> new: Probability = 1.00, Count = 7
ListAll -> listAll: Probability = 1.00, Count = 3
res -> res: Probability = 0.86, Count = 24
res -> String[entries.size: Probability = 0.04, Count = 1
res -> terms[i].compareTo: Probability = 0.04, Count = 1
res -> other.terms[i]: Probability = 0.04, Count = 1
res -> res!=0: Probability = 0.04, Count = 1
res[i] -> res[i]: Probability = 1.00, Count = 3
UpdateDataRetentionResponse -> UpdateDataRetentionResult: Probability = 1.00, Count = 1
UpdateDataRetention -> updateDataRetention: Probability = 1.00, Count = 1
UpdateDataRetentionRequest -> UpdateDataRetentionRequest: Probability = 1.00, Count = 1
Invoke<UpdateDataRetentionResponse> -> executeUpdateDataRetention: Probability = 1.00, Count = 1
CreateDistributionRequest -> CreateDistributionRequest: Probability = 1.00, Count = 2
distributionConfig -> distributionConfig: Probability = 0.75, Count = 3
distributionConfig -> setDistributionConfig: Probability = 0.25, Count = 1
_distributionConfig -> setDistributionConfig: Probability = 1.00, Count = 1
DescribeBatchPredictionsResponse -> DescribeBatchPredictionsResult: Probability = 1.00, Count = 1
DescribeBatchPredictions -> describeBatchPredictions: Probability = 1.00, Count = 1
DescribeBatchPredictionsRequest -> DescribeBatchPredictionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeBatchPredictionsResponse> -> executeDescribeBatchPredictions: Probability = 1.00, Count = 1
GetScore -> getScore: Probability = 1.00, Count = 2
scores[index] -> scores[index]: Probability = 1.00, Count = 1
BatchUpdatePhoneNumberResponse -> BatchUpdatePhoneNumberResult: Probability = 1.00, Count = 1
BatchUpdatePhoneNumber -> batchUpdatePhoneNumber: Probability = 1.00, Count = 1
BatchUpdatePhoneNumberRequest -> BatchUpdatePhoneNumberRequest: Probability = 1.00, Count = 1
Invoke<BatchUpdatePhoneNumberResponse> -> executeBatchUpdatePhoneNumber: Probability = 1.00, Count = 1
LMSimilarity -> LMSimilarity: Probability = 1.00, Count = 1
ICollectionModel -> CollectionModel: Probability = 1.00, Count = 1
collectionModel -> collectionModel: Probability = 1.00, Count = 2
this.m_collectionModel -> this.collectionModel: Probability = 1.00, Count = 1
GetGlobalSettingsResponse -> GetGlobalSettingsResult: Probability = 1.00, Count = 1
GetGlobalSettings -> getGlobalSettings: Probability = 1.00, Count = 1
GetGlobalSettingsRequest -> GetGlobalSettingsRequest: Probability = 1.00, Count = 1
Invoke<GetGlobalSettingsResponse> -> executeGetGlobalSettings: Probability = 1.00, Count = 1
CreateHITTypeResponse -> CreateHITTypeResult: Probability = 1.00, Count = 1
CreateHITType -> createHITType: Probability = 1.00, Count = 1
CreateHITTypeRequest -> CreateHITTypeRequest: Probability = 1.00, Count = 1
Invoke<CreateHITTypeResponse> -> executeCreateHITType: Probability = 1.00, Count = 1
@string.ToCharArray -> string.toCharArray: Probability = 1.00, Count = 1
chars.Length -> chars.length: Probability = 1.00, Count = 4
ListFargateProfilesResponse -> ListFargateProfilesResult: Probability = 1.00, Count = 1
ListFargateProfiles -> listFargateProfiles: Probability = 1.00, Count = 1
ListFargateProfilesRequest -> ListFargateProfilesRequest: Probability = 1.00, Count = 1
Invoke<ListFargateProfilesResponse> -> executeListFargateProfiles: Probability = 1.00, Count = 1
floorEntry -> floorEntry: Probability = 1.00, Count = 1
java.util.TreeMap.Relation.FLOOR -> FLOOR: Probability = 1.00, Count = 2
NorwegianStemmer -> NorwegianStemmer: Probability = 1.00, Count = 1
DeleteVaultNotificationsResponse -> DeleteVaultNotificationsResult: Probability = 1.00, Count = 1
DeleteVaultNotifications -> deleteVaultNotifications: Probability = 1.00, Count = 1
DeleteVaultNotificationsRequest -> DeleteVaultNotificationsRequest: Probability = 1.00, Count = 3
Invoke<DeleteVaultNotificationsResponse> -> executeDeleteVaultNotifications: Probability = 1.00, Count = 1
suffix -> suffix: Probability = 1.00, Count = 6
suffixLen -> suffixLen: Probability = 0.67, Count = 8
suffixLen -> suffix.length: Probability = 0.17, Count = 2
suffixLen -> suffix.charAt: Probability = 0.08, Count = 1
suffixLen -> suffix[]: Probability = 0.08, Count = 1
s[len -> s[len: Probability = 0.23, Count = 7
s[len -> s[len-1]: Probability = 0.07, Count = 2
s[len -> 'x': Probability = 0.03, Count = 1
s[len -> s[len-2]: Probability = 0.13, Count = 4
s[len -> 'l': Probability = 0.03, Count = 1
s[len -> 's': Probability = 0.07, Count = 2
s[len -> 'r': Probability = 0.03, Count = 1
s[len -> 'é': Probability = 0.03, Count = 1
s[len -> &&: Probability = 0.03, Count = 1
s[len -> Character.isLetter: Probability = 0.03, Count = 1
s[len -> 'u':case: Probability = 0.03, Count = 1
s[len -> 's':: Probability = 0.03, Count = 1
s[len -> 'e':if: Probability = 0.03, Count = 1
s[len -> 'i': Probability = 0.07, Count = 2
s[len -> s[len-4]: Probability = 0.07, Count = 2
s[len -> 'y': Probability = 0.03, Count = 1
s[len -> 'ъ': Probability = 0.03, Count = 1
SetRequireDimCount -> setRequireDimCount: Probability = 1.00, Count = 1
dimName, -> dimName,: Probability = 0.33, Count = 3
dimName, -> DimConfig: Probability = 0.33, Count = 3
dimName, -> fieldTypes.get: Probability = 0.33, Count = 3
fieldType -> ft: Probability = 1.00, Count = 6
!fieldTypes.TryGetValue -> dimName: Probability = 1.00, Count = 3
out -> ==: Probability = 0.24, Count = 6
out -> null: Probability = 0.48, Count = 12
out -> +: Probability = 0.08, Count = 2
out -> if: Probability = 0.20, Count = 5
fieldTypes[dimName] -> ft: Probability = 1.00, Count = 6
DimConfig -> DimConfig: Probability = 0.33, Count = 3
DimConfig -> fieldTypes.put: Probability = 0.33, Count = 3
DimConfig -> dimName,: Probability = 0.33, Count = 3
nameIndex -> nameIndex: Probability = 0.93, Count = 13
nameIndex -> workbook": Probability = 0.07, Count = 1
GetNameIndex -> getNameIndex: Probability = 0.67, Count = 4
GetNameIndex -> HSSFName: Probability = 0.33, Count = 2
names[nameIndex] -> names.get: Probability = 1.00, Count = 2
ScriptBootstrapActionConfig -> ScriptBootstrapActionConfig: Probability = 0.67, Count = 4
ScriptBootstrapActionConfig -> .withScriptBootstrapAction: Probability = 0.33, Count = 2
List<string> -> java.util.List<String>: Probability = 0.52, Count = 24
List<string> -> ArrayList<String>: Probability = 0.13, Count = 6
List<string> -> ArrayList<>: Probability = 0.15, Count = 7
List<string> -> LinkedList<>: Probability = 0.07, Count = 3
List<string> -> LinkedList<String>: Probability = 0.02, Count = 1
List<string> -> List<String>: Probability = 0.09, Count = 4
List<string> -> recognizer.getRuleInvocationStack: Probability = 0.02, Count = 1
_args -> setArgs: Probability = 1.00, Count = 1
RegisterApplicationRevisionResponse -> RegisterApplicationRevisionResult: Probability = 1.00, Count = 1
RegisterApplicationRevision -> registerApplicationRevision: Probability = 1.00, Count = 1
RegisterApplicationRevisionRequest -> RegisterApplicationRevisionRequest: Probability = 1.00, Count = 1
Invoke<RegisterApplicationRevisionResponse> -> executeRegisterApplicationRevision: Probability = 1.00, Count = 1
SendTestEventNotificationResponse -> SendTestEventNotificationResult: Probability = 1.00, Count = 1
SendTestEventNotification -> sendTestEventNotification: Probability = 1.00, Count = 1
SendTestEventNotificationRequest -> SendTestEventNotificationRequest: Probability = 1.00, Count = 1
Invoke<SendTestEventNotificationResponse> -> executeSendTestEventNotification: Probability = 1.00, Count = 1
SetRefLogIdent -> setRefLogIdent: Probability = 1.00, Count = 2
PersonIdent -> PersonIdent: Probability = 1.00, Count = 15
pi -> pi: Probability = 1.00, Count = 4
refLogIdent -> refLogIdent: Probability = 1.00, Count = 2
GetDomainDeliverabilityCampaignResponse -> GetDomainDeliverabilityCampaignResult: Probability = 1.00, Count = 1
GetDomainDeliverabilityCampaign -> getDomainDeliverabilityCampaign: Probability = 1.00, Count = 1
GetDomainDeliverabilityCampaignRequest -> GetDomainDeliverabilityCampaignRequest: Probability = 1.00, Count = 1
Invoke<GetDomainDeliverabilityCampaignResponse> -> executeGetDomainDeliverabilityCampaign: Probability = 1.00, Count = 1
y -> y: Probability = 0.88, Count = 22
y -> +: Probability = 0.08, Count = 2
y -> x,: Probability = 0.04, Count = 1
"," -> ",": Probability = 1.00, Count = 9
Object -> Object: Probability = 0.57, Count = 24
Object -> BeginRecord: Probability = 0.02, Count = 1
Object -> DBCellRecord: Probability = 0.02, Count = 1
Object -> HeaderFooterRecord: Probability = 0.02, Count = 1
Object -> DVRecord: Probability = 0.02, Count = 1
Object -> UnknownSubRecord: Probability = 0.02, Count = 1
Object -> FeatHdrRecord: Probability = 0.02, Count = 1
Object -> UserSViewBegin: Probability = 0.02, Count = 1
Object -> LbsDataSubRecord: Probability = 0.02, Count = 1
Object -> HeaderRecord: Probability = 0.02, Count = 1
Object -> FilePassRecord: Probability = 0.02, Count = 1
Object -> DeltaRecord: Probability = 0.02, Count = 1
Object -> FeatRecord: Probability = 0.02, Count = 1
Object -> MulBlankRecord: Probability = 0.02, Count = 1
Object -> EmbeddedObjectRefSubRecord: Probability = 0.02, Count = 1
Object -> FooterRecord: Probability = 0.02, Count = 1
Object -> UserSViewEnd: Probability = 0.02, Count = 1
Object -> EndRecord: Probability = 0.02, Count = 1
Object -> FormatRecord: Probability = 0.02, Count = 1
x, -> x,: Probability = 0.95, Count = 21
x, -> x,y,x+width,y+height: Probability = 0.05, Count = 1
maxShingleSize -> ShingleFilterFactory: Probability = 0.06, Count = 1
maxShingleSize -> maxShingleSize: Probability = 0.83, Count = 15
maxShingleSize -> "maxShingleSize",: Probability = 0.06, Count = 1
maxShingleSize -> ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE: Probability = 0.06, Count = 1
ArgumentOutOfRangeException -> IllegalArgumentException: Probability = 1.00, Count = 10
2" -> 2": Probability = 1.00, Count = 7
minShingleSize -> minShingleSize: Probability = 0.82, Count = 14
minShingleSize -> "minShingleSize",: Probability = 0.06, Count = 1
minShingleSize -> ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE: Probability = 0.06, Count = 1
minShingleSize -> setMinShingleSize: Probability = 0.06, Count = 1
greater -> greater: Probability = 1.00, Count = 7
than -> than: Probability = 1.00, Count = 12
outputUnigrams -> outputUnigrams: Probability = 1.00, Count = 6
outputUnigramsIfNoShingles -> outputUnigramsIfNoShingles: Probability = 1.00, Count = 5
tokenSeparator -> tokenSeparator: Probability = 1.00, Count = 7
fillerToken -> fillerToken: Probability = 1.00, Count = 6
UpdateRelationalDatabaseParametersResponse -> UpdateRelationalDatabaseParametersResult: Probability = 1.00, Count = 1
UpdateRelationalDatabaseParameters -> updateRelationalDatabaseParameters: Probability = 1.00, Count = 1
UpdateRelationalDatabaseParametersRequest -> UpdateRelationalDatabaseParametersRequest: Probability = 1.00, Count = 1
Invoke<UpdateRelationalDatabaseParametersResponse> -> executeUpdateRelationalDatabaseParameters: Probability = 1.00, Count = 1
ICollection<IParseTree> -> Collection<ParseTree>: Probability = 1.00, Count = 7
FindAllRuleNodes -> findAllRuleNodes: Probability = 1.00, Count = 1
IParseTree -> ParseTree: Probability = 1.00, Count = 22
t, -> t,: Probability = 1.00, Count = 13
FindAllNodes -> findAllNodes: Probability = 1.00, Count = 3
GetObjectCount -> getObjectCount: Probability = 1.00, Count = 1
entryCount -> entryCount: Probability = 0.75, Count = 3
entryCount -> list.subList: Probability = 0.25, Count = 1
ActionTransition -> ActionTransition: Probability = 1.00, Count = 1
actionIndex, -> actionIndex,: Probability = 1.00, Count = 1
this.actionIndex -> this.actionIndex: Probability = 1.00, Count = 2
actionIndex -> actionIndex: Probability = 0.86, Count = 6
actionIndex -> "action_"+ruleIndex+":"+actionIndex: Probability = 0.14, Count = 1
blockOffset -> blockOffset: Probability = 1.00, Count = 2
valuesPerBlock -> valuesPerBlock: Probability = 0.57, Count = 12
valuesPerBlock -> super.fill: Probability = 0.05, Count = 1
valuesPerBlock -> fromOffsetInBlock: Probability = 0.14, Count = 3
valuesPerBlock -> fromIndex++,: Probability = 0.05, Count = 1
valuesPerBlock -> fromBlock: Probability = 0.10, Count = 2
valuesPerBlock -> toBlock: Probability = 0.10, Count = 2
skip -> skip: Probability = 0.64, Count = 21
skip -> curFP: Probability = 0.09, Count = 3
skip -> filters.add: Probability = 0.09, Count = 3
skip -> AndTreeFilter.create: Probability = 0.09, Count = 3
skip -> TreeFilter.ANY_DIFF: Probability = 0.09, Count = 3
offsetInBlock -> offsetInBlock: Probability = 1.00, Count = 2
m_bitsPerValue -> bitsPerValue: Probability = 0.75, Count = 6
m_bitsPerValue -> PackedInts.unsignedBitsRequired: Probability = 0.25, Count = 2
GetSignerType -> getSignerType: Probability = 1.00, Count = 3
"BEARERTOKEN" -> "BEARERTOKEN": Probability = 1.00, Count = 1
PipedOutputStream -> PipedOutputStream: Probability = 1.00, Count = 1
java.io.PipedInputStream -> PipedInputStream: Probability = 1.00, Count = 1
DeleteLedgerResponse -> DeleteLedgerResult: Probability = 1.00, Count = 1
DeleteLedger -> deleteLedger: Probability = 1.00, Count = 1
DeleteLedgerRequest -> DeleteLedgerRequest: Probability = 1.00, Count = 1
Invoke<DeleteLedgerResponse> -> executeDeleteLedger: Probability = 1.00, Count = 1
GetCognitoEventsResponse -> GetCognitoEventsResult: Probability = 1.00, Count = 1
GetCognitoEvents -> getCognitoEvents: Probability = 1.00, Count = 1
GetCognitoEventsRequest -> GetCognitoEventsRequest: Probability = 1.00, Count = 1
Invoke<GetCognitoEventsResponse> -> executeGetCognitoEvents: Probability = 1.00, Count = 1
GetNameXPtg -> NameXPtg: Probability = 0.17, Count = 1
GetNameXPtg -> getNameXPtg: Probability = 0.83, Count = 5
SheetIdentifier -> SheetIdentifier: Probability = 1.00, Count = 7
sheet -> sheet: Probability = 0.88, Count = 29
sheet -> formulaText2,: Probability = 0.03, Count = 1
sheet -> FormulaPair: Probability = 0.03, Count = 1
sheet -> fp: Probability = 0.03, Count = 1
sheet -> Sheet: Probability = 0.03, Count = 1
sheetRefIndex -> sheetRefIndex: Probability = 1.00, Count = 5
GetSheetExtIx -> getSheetExtIx: Probability = 1.00, Count = 4
_iBook.GetNameXPtg -> _iBook.getNameXPtg: Probability = 1.00, Count = 1
sheetRefIndex, -> sheetRefIndex,: Probability = 1.00, Count = 2
ListResolverEndpointsResponse -> ListResolverEndpointsResult: Probability = 1.00, Count = 1
ListResolverEndpoints -> listResolverEndpoints: Probability = 1.00, Count = 1
ListResolverEndpointsRequest -> ListResolverEndpointsRequest: Probability = 1.00, Count = 1
Invoke<ListResolverEndpointsResponse> -> executeListResolverEndpoints: Probability = 1.00, Count = 1
readLine -> readLine: Probability = 1.00, Count = 2
_reader.readLine -> reader.readLine: Probability = 1.00, Count = 1
java.io.IOError -> IOError: Probability = 1.00, Count = 1
Hash2 -> hash2: Probability = 1.00, Count = 3
5381 -> 5381: Probability = 1.00, Count = 3
0x00FF -> 0x00FF: Probability = 1.00, Count = 9
ToBookSheetColumn -> toBookSheetColumn: Probability = 1.00, Count = 2
bookIndex, -> bookIndex,: Probability = 1.00, Count = 4
sheetIndex, -> sheetIndex,: Probability = 0.90, Count = 18
sheetIndex, -> ,: Probability = 0.10, Count = 2
bookIndex -> bookIndex: Probability = 1.00, Count = 2
0xFFFFL -> 0xFFFFL: Probability = 1.00, Count = 3
48 -> 48: Probability = 1.00, Count = 7
sheetIndex -> sheetIndex: Probability = 0.80, Count = 36
sheetIndex -> tracker,: Probability = 0.04, Count = 2
sheetIndex -> _re.getFirstSheetIndex: Probability = 0.02, Count = 1
sheetIndex -> sheetNumber: Probability = 0.04, Count = 2
sheetIndex -> SheetIndex:: Probability = 0.02, Count = 1
sheetIndex -> name,: Probability = 0.02, Count = 1
sheetIndex -> sheetIndex+1: Probability = 0.02, Count = 1
sheetIndex -> sheetIndex:: Probability = 0.02, Count = 1
CreateConfigurationProfileResponse -> CreateConfigurationProfileResult: Probability = 1.00, Count = 1
CreateConfigurationProfile -> createConfigurationProfile: Probability = 1.00, Count = 1
CreateConfigurationProfileRequest -> CreateConfigurationProfileRequest: Probability = 1.00, Count = 1
Invoke<CreateConfigurationProfileResponse> -> executeCreateConfigurationProfile: Probability = 1.00, Count = 1
StartMigrationResponse -> ReplicationGroup: Probability = 1.00, Count = 1
StartMigration -> startMigration: Probability = 1.00, Count = 1
StartMigrationRequest -> StartMigrationRequest: Probability = 1.00, Count = 1
Invoke<StartMigrationResponse> -> executeStartMigration: Probability = 1.00, Count = 1
OffsetLimitTokenFilter -> OffsetLimitTokenFilter: Probability = 1.00, Count = 1
offsetLimit -> offsetLimit: Probability = 1.00, Count = 1
offsetAttrib -> this.offsetLimit: Probability = 1.00, Count = 1
GetAttribute<IOffsetAttribute> -> offsetLimit: Probability = 1.00, Count = 1
b, -> b,: Probability = 0.87, Count = 73
b, -> b[o]: Probability = 0.01, Count = 1
b, -> b[],: Probability = 0.02, Count = 2
b, -> b.length: Probability = 0.01, Count = 1
b, -> final: Probability = 0.01, Count = 1
b, -> int: Probability = 0.01, Count = 1
b, -> len: Probability = 0.02, Count = 2
b, -> System.arraycopy: Probability = 0.01, Count = 1
b, -> upto,: Probability = 0.02, Count = 2
off, -> off,: Probability = 0.96, Count = 53
off, -> off: Probability = 0.02, Count = 1
off, -> shouldSkipEncryptionOnCurrentRecord: Probability = 0.02, Count = 1
md.Update -> md.update: Probability = 0.65, Count = 11
md.Update -> SHA1: Probability = 0.12, Count = 2
md.Update -> SHA1.newInstance: Probability = 0.12, Count = 2
md.Update -> Constants.encodedTypeString: Probability = 0.12, Count = 2
off -> off: Probability = 1.00, Count = 19
Cell -> Cell: Probability = 0.55, Count = 23
Cell -> m,: Probability = 0.02, Count = 1
Cell -> Character: Probability = 0.14, Count = 6
Cell -> i.hasNext: Probability = 0.12, Count = 5
Cell -> i.next: Probability = 0.12, Count = 5
Cell -> master.cells.get: Probability = 0.02, Count = 1
Cell -> existing.cells.get: Probability = 0.02, Count = 1
Merge -> merge: Probability = 0.91, Count = 10
Merge -> mergeAux: Probability = 0.09, Count = 1
m.skip -> m.skip: Probability = 1.00, Count = 3
m.cmd -> m.cmd: Probability = 0.67, Count = 4
m.cmd -> e.cmd: Probability = 0.33, Count = 2
n.cmd -> n.cmd: Probability = 1.00, Count = 3
e.cmd -> e.cmd: Probability = 1.00, Count = 1
m.@ref -> m.ref: Probability = 1.00, Count = 4
e.@ref -> e.ref: Probability = 1.00, Count = 4
n.@ref -> n.ref: Probability = 1.00, Count = 3
GetCampaignActivitiesResponse -> GetCampaignActivitiesResult: Probability = 1.00, Count = 1
GetCampaignActivities -> getCampaignActivities: Probability = 1.00, Count = 1
GetCampaignActivitiesRequest -> GetCampaignActivitiesRequest: Probability = 1.00, Count = 1
Invoke<GetCampaignActivitiesResponse> -> executeGetCampaignActivities: Probability = 1.00, Count = 1
EstimateBytesUsed -> estimateBytesUsed: Probability = 1.00, Count = 1
this.bytesUsed -> bytesUsed: Probability = 0.25, Count = 2
this.bytesUsed -> hosts: Probability = 0.12, Count = 1
this.bytesUsed -> this.bytesUsed: Probability = 0.50, Count = 4
this.bytesUsed -> CUSTOM:default:return: Probability = 0.12, Count = 1
FunctionNameEval -> FunctionNameEval: Probability = 1.00, Count = 3
functionName -> functionName: Probability = 0.88, Count = 15
functionName -> targetFunc: Probability = 0.12, Count = 2
_functionName -> _functionName: Probability = 1.00, Count = 3
averageBytesPerChar -> averageBytesPerChar: Probability = 1.00, Count = 1
_averageBytesPerChar -> averageBytesPerChar: Probability = 1.00, Count = 2
CreateCacheSecurityGroupRequest -> CreateCacheSecurityGroupRequest: Probability = 1.00, Count = 2
cacheSecurityGroupName, -> cacheSecurityGroupName,: Probability = 1.00, Count = 1
description -> description: Probability = 1.00, Count = 16
_cacheSecurityGroupName -> setCacheSecurityGroupName: Probability = 1.00, Count = 3
cacheSecurityGroupName -> cacheSecurityGroupName: Probability = 0.71, Count = 5
cacheSecurityGroupName -> ): Probability = 0.29, Count = 2
_description -> setDescription: Probability = 1.00, Count = 6
removeAt -> removeAt: Probability = 1.00, Count = 2
mSize -> mSize: Probability = 0.78, Count = 25
mSize -> mKeys[i]: Probability = 0.09, Count = 3
mSize -> mSize++: Probability = 0.06, Count = 2
mSize -> mKeys[mSize: Probability = 0.06, Count = 2
mValues, -> mValues,: Probability = 1.00, Count = 10
mSize-- -> mSize--: Probability = 1.00, Count = 1
DescribeIndexFieldsResponse -> DescribeIndexFieldsResult: Probability = 1.00, Count = 1
DescribeIndexFields -> describeIndexFields: Probability = 1.00, Count = 1
DescribeIndexFieldsRequest -> DescribeIndexFieldsRequest: Probability = 1.00, Count = 1
Invoke<DescribeIndexFieldsResponse> -> executeDescribeIndexFields: Probability = 1.00, Count = 1
java.nio.ShortBuffer -> ShortBuffer: Probability = 1.00, Count = 32
bb -> bb: Probability = 1.00, Count = 21
byteBuffer.duplicate -> byteBuffer.duplicate: Probability = 1.00, Count = 5
.order -> .order: Probability = 1.00, Count = 10
byteBuffer.order -> byteBuffer.order: Probability = 1.00, Count = 11
java.nio.ShortToByteBufferAdapter -> ShortToByteBufferAdapter: Probability = 1.00, Count = 5
buf._limit -> buf.limit: Probability = 1.00, Count = 15
buf._position -> buf.position: Probability = 1.00, Count = 15
buf._mark -> buf.mark: Probability = 1.00, Count = 9
AddDbcell -> addDbcell: Probability = 1.00, Count = 1
field_5_dbcells -> field_5_dbcells: Probability = 1.00, Count = 3
IntList -> IntList: Probability = 0.64, Count = 9
IntList -> final: Probability = 0.36, Count = 5
field_5_dbcells.Add -> field_5_dbcells.add: Probability = 1.00, Count = 2
DeleteSubnetResponse -> DeleteSubnetResult: Probability = 1.00, Count = 1
DeleteSubnet -> deleteSubnet: Probability = 1.00, Count = 1
DeleteSubnetRequest -> DeleteSubnetRequest: Probability = 1.00, Count = 2
Invoke<DeleteSubnetResponse> -> executeDeleteSubnet: Probability = 1.00, Count = 1
List<HSSFPictureData> -> List<HSSFPictureData>: Probability = 0.67, Count = 2
List<HSSFPictureData> -> getAllPictures: Probability = 0.33, Count = 1
pictures -> pictures: Probability = 1.00, Count = 3
IEnumerator -> for: Probability = 0.14, Count = 1
IEnumerator -> org.apache.poi.hssf.record.Record: Probability = 0.14, Count = 1
IEnumerator -> :: Probability = 0.43, Count = 3
IEnumerator -> EscherRecord: Probability = 0.29, Count = 2
AbstractEscherHolderRecord -> r: Probability = 0.36, Count = 4
AbstractEscherHolderRecord -> AbstractEscherHolderRecord: Probability = 0.45, Count = 5
AbstractEscherHolderRecord -> .decode: Probability = 0.09, Count = 1
AbstractEscherHolderRecord -> .getEscherRecords: Probability = 0.09, Count = 1
escherRecords -> escherRecords: Probability = 1.00, Count = 6
IList -> ): Probability = 0.75, Count = 3
IList -> (: Probability = 0.25, Count = 1
DescribeWorkspacesConnectionStatusResponse -> DescribeWorkspacesConnectionStatusResult: Probability = 1.00, Count = 1
DescribeWorkspacesConnectionStatus -> describeWorkspacesConnectionStatus: Probability = 1.00, Count = 1
DescribeWorkspacesConnectionStatusRequest -> DescribeWorkspacesConnectionStatusRequest: Probability = 1.00, Count = 1
Invoke<DescribeWorkspacesConnectionStatusResponse> -> executeDescribeWorkspacesConnectionStatus: Probability = 1.00, Count = 1
InvokeServiceAsyncRequest -> InvokeServiceAsyncRequest: Probability = 1.00, Count = 1
"industry-brain", -> "industry-brain",: Probability = 1.00, Count = 11
"2018-07-12", -> "2018-07-12",: Probability = 1.00, Count = 11
"InvokeServiceAsync" -> "InvokeServiceAsync": Probability = 1.00, Count = 1
AuthorizeSecurityGroupIngressRequest -> AuthorizeSecurityGroupIngressRequest: Probability = 1.00, Count = 1
List<IpPermission> -> java.util.List<IpPermission>: Probability = 1.00, Count = 2
ipPermissions -> ipPermissions: Probability = 1.00, Count = 4
_ipPermissions -> setIpPermissions: Probability = 1.00, Count = 2
stream, -> stream,: Probability = 1.00, Count = 10
section -> section: Probability = 1.00, Count = 5
sectionText -> sectionText: Probability = 1.00, Count = 3
.Equals -> .equals: Probability = 1.00, Count = 9
'[' -> '[': Probability = 1.00, Count = 13
'" -> '": Probability = 0.81, Count = 17
'" -> exception: Probability = 0.10, Count = 2
'" -> exceptions[i]: Probability = 0.10, Count = 2
"' -> "': Probability = 0.90, Count = 27
"' -> this.end+: Probability = 0.03, Count = 1
"' -> text.end: Probability = 0.03, Count = 1
"' -> field='"+: Probability = 0.03, Count = 1
found" -> found": Probability = 1.00, Count = 4
OperandResolver.CoerceValueToInt -> OperandResolver.coerceValueToInt: Probability = 1.00, Count = 6
factorial -> factorial: Probability = 1.00, Count = 3
.LongValue -> .longValue: Probability = 1.00, Count = 2
LexerActionExecutor -> final: Probability = 0.33, Count = 1
LexerActionExecutor -> LexerActionExecutor: Probability = 0.67, Count = 2
getLexerActionExecutor -> getLexerActionExecutor: Probability = 1.00, Count = 1
lexerActionExecutor -> lexerActionExecutor: Probability = 1.00, Count = 5
EnableUserResponse -> EnableUserResult: Probability = 1.00, Count = 1
EnableUser -> enableUser: Probability = 1.00, Count = 1
EnableUserRequest -> EnableUserRequest: Probability = 1.00, Count = 1
Invoke<EnableUserResponse> -> executeEnableUser: Probability = 1.00, Count = 1
"length=" -> 0:: Probability = 0.43, Count = 3
"length=" -> "length=": Probability = 0.57, Count = 4
b.Length -> b.length: Probability = 0.93, Count = 26
b.Length -> b,0,b.length: Probability = 0.07, Count = 2
blockBits -> blockBits: Probability = 0.67, Count = 8
blockBits -> PagedBytes: Probability = 0.08, Count = 1
blockBits -> 31: Probability = 0.08, Count = 1
blockBits -> this.blockBits: Probability = 0.08, Count = 1
blockBits -> blockSize-1: Probability = 0.08, Count = 1
blockMask -> blockMask: Probability = 1.00, Count = 5
b.Bytes -> b.bytes: Probability = 1.00, Count = 3
b.Offset -> b.offset: Probability = 1.00, Count = 4
DescribeJournalS3ExportResponse -> DescribeJournalS3ExportResult: Probability = 1.00, Count = 1
DescribeJournalS3Export -> describeJournalS3Export: Probability = 1.00, Count = 1
DescribeJournalS3ExportRequest -> DescribeJournalS3ExportRequest: Probability = 1.00, Count = 1
Invoke<DescribeJournalS3ExportResponse> -> executeDescribeJournalS3Export: Probability = 1.00, Count = 1
SetCoordinates -> setCoordinates: Probability = 1.00, Count = 2
x1, -> x1,: Probability = 1.00, Count = 6
y1, -> y1,: Probability = 1.00, Count = 5
x2, -> x2,: Probability = 0.86, Count = 6
x2, -> y1,: Probability = 0.14, Count = 1
y2 -> y2: Probability = 1.00, Count = 8
_spgrRecord.RectY1 -> _spgrRecord.setRectY1: Probability = 1.00, Count = 2
y1 -> y1: Probability = 1.00, Count = 3
_spgrRecord.RectY2 -> _spgrRecord.setRectY2: Probability = 1.00, Count = 2
_spgrRecord.RectX1 -> _spgrRecord.setRectX1: Probability = 1.00, Count = 2
x1 -> x1: Probability = 0.58, Count = 7
x1 -> Double.NaN: Probability = 0.25, Count = 3
x1 -> fValue/fDerivative: Probability = 0.08, Count = 1
x1 -> ABSOLUTE_ACCURACY: Probability = 0.08, Count = 1
_spgrRecord.RectX2 -> _spgrRecord.setRectX2: Probability = 1.00, Count = 2
x2 -> x2: Probability = 1.00, Count = 3
DescribeTagsResponse -> DescribeTagsResult: Probability = 1.00, Count = 2
DescribeTags -> describeTags: Probability = 1.00, Count = 3
DescribeTagsRequest -> DescribeTagsRequest: Probability = 1.00, Count = 2
Invoke<DescribeTagsResponse> -> executeDescribeTags: Probability = 1.00, Count = 1
DoLogic -> doLogic: Probability = 0.38, Count = 8
DoLogic -> throws: Probability = 0.33, Count = 7
DoLogic -> Exception: Probability = 0.29, Count = 6
DeleteCustomerGatewayResponse -> DeleteCustomerGatewayResult: Probability = 1.00, Count = 1
DeleteCustomerGateway -> deleteCustomerGateway: Probability = 1.00, Count = 1
DeleteCustomerGatewayRequest -> DeleteCustomerGatewayRequest: Probability = 1.00, Count = 2
Invoke<DeleteCustomerGatewayResponse> -> executeDeleteCustomerGateway: Probability = 1.00, Count = 1
NewContext -> Map: Probability = 1.00, Count = 2
IDictionary -> newContext: Probability = 1.00, Count = 1
IndexSearcher -> IndexSearcher: Probability = 1.00, Count = 8
searcher -> searcher: Probability = 0.48, Count = 12
searcher -> context: Probability = 0.08, Count = 2
searcher -> searchers.putIfAbsent: Probability = 0.04, Count = 1
searcher -> tracker.close: Probability = 0.04, Count = 1
searcher -> tracker.searcher: Probability = 0.08, Count = 2
searcher -> "the: Probability = 0.04, Count = 1
searcher -> provided: Probability = 0.04, Count = 1
searcher -> underlying: Probability = 0.04, Count = 1
searcher -> differs: Probability = 0.04, Count = 1
searcher -> new=": Probability = 0.04, Count = 1
searcher -> old=": Probability = 0.04, Count = 1
searcher -> this.searcher: Probability = 0.04, Count = 1
Hashtable -> IdentityHashMap: Probability = 0.17, Count = 1
Hashtable -> Hashtable: Probability = 0.33, Count = 2
Hashtable -> new: Probability = 0.17, Count = 1
Hashtable -> HashMap<>: Probability = 0.33, Count = 2
IdentityEqualityComparer<object>.Default -> context.put: Probability = 1.00, Count = 1
["searcher"] -> "searcher",: Probability = 1.00, Count = 1
GetSpecificBuiltinRecord -> getSpecificBuiltinRecord: Probability = 1.00, Count = 3
builtInCode, -> builtInCode,: Probability = 1.00, Count = 1
sheetNumber -> sheetNumber: Probability = 0.75, Count = 9
sheetNumber -> boundsheets.add: Probability = 0.08, Count = 1
sheetNumber -> boundsheets.remove: Probability = 0.08, Count = 1
sheetNumber -> records.getBspos: Probability = 0.08, Count = 1
IEnumerator<NameRecord> -> Iterator<NameRecord>: Probability = 1.00, Count = 1
record -> record: Probability = 0.94, Count = 32
record -> createSingleRecord: Probability = 0.03, Count = 1
record -> convertToNumberRecord: Probability = 0.03, Count = 1
iterator.Current -> ): Probability = 0.75, Count = 3
iterator.Current -> (: Probability = 0.25, Count = 1
record.BuiltInName -> record.getBuiltInName: Probability = 1.00, Count = 1
builtInCode -> builtInCode: Probability = 1.00, Count = 1
record.SheetNumber -> record.getSheetNumber: Probability = 1.00, Count = 1
readDouble -> readDouble: Probability = 1.00, Count = 2
buffer, -> buffer,: Probability = 1.00, Count = 52
PersianNormalizationFilter -> PersianNormalizationFilter: Probability = 1.00, Count = 2
SpanishLightStemFilterFactory -> SpanishLightStemFilterFactory: Probability = 1.00, Count = 1
SmallDocSet -> SmallDocSet: Probability = 0.71, Count = 5
SmallDocSet -> union: Probability = 0.14, Count = 1
SmallDocSet -> other.intSet.size: Probability = 0.14, Count = 1
intSet -> intSet: Probability = 1.00, Count = 1
SentinelInt32Set -> SentinelIntSet: Probability = 1.00, Count = 1
RawCharSequence -> RawCharSequence: Probability = 1.00, Count = 1
startPtr -> startPtr: Probability = 1.00, Count = 3
endPtr -> endPtr: Probability = 1.00, Count = 1
GetCustomVerificationEmailTemplateResponse -> GetCustomVerificationEmailTemplateResult: Probability = 1.00, Count = 1
GetCustomVerificationEmailTemplate -> getCustomVerificationEmailTemplate: Probability = 1.00, Count = 1
GetCustomVerificationEmailTemplateRequest -> GetCustomVerificationEmailTemplateRequest: Probability = 1.00, Count = 1
Invoke<GetCustomVerificationEmailTemplateResponse> -> executeGetCustomVerificationEmailTemplate: Probability = 1.00, Count = 1
SendMessageBatchRequest -> SendMessageBatchRequest: Probability = 1.00, Count = 3
queueUrl, -> queueUrl,: Probability = 1.00, Count = 15
List<SendMessageBatchRequestEntry> -> java.util.List<SendMessageBatchRequestEntry>: Probability = 1.00, Count = 2
entries -> entries: Probability = 1.00, Count = 22
_entries -> setEntries: Probability = 1.00, Count = 3
WriteInt -> writeInt: Probability = 1.00, Count = 7
WriteContinueIfRequired -> writeContinueIfRequired: Probability = 1.00, Count = 8
_ulrOutput.WriteInt -> _ulrOutput.writeInt: Probability = 1.00, Count = 1
DescribeDataSourcesResponse -> DescribeDataSourcesResult: Probability = 1.00, Count = 1
DescribeDataSources -> describeDataSources: Probability = 1.00, Count = 1
DescribeDataSourcesRequest -> DescribeDataSourcesRequest: Probability = 1.00, Count = 1
Invoke<DescribeDataSourcesResponse> -> executeDescribeDataSources: Probability = 1.00, Count = 1
ListRoomsResponse -> ListRoomsResult: Probability = 1.00, Count = 1
ListRooms -> listRooms: Probability = 1.00, Count = 1
ListRoomsRequest -> ListRoomsRequest: Probability = 1.00, Count = 1
Invoke<ListRoomsResponse> -> executeListRooms: Probability = 1.00, Count = 1
getConversion -> getConversion: Probability = 1.00, Count = 2
FieldAndTerm -> FieldAndTerm: Probability = 1.00, Count = 4
o.Field.Equals -> other.field.equals: Probability = 1.00, Count = 1
StringComparison.Ordinal -> field: Probability = 0.09, Count = 1
StringComparison.Ordinal -> .equals: Probability = 0.82, Count = 9
StringComparison.Ordinal -> name: Probability = 0.09, Count = 1
Term.BytesEquals -> term.bytesEquals: Probability = 0.67, Count = 2
Term.BytesEquals -> other.term: Probability = 0.33, Count = 1
o.Term -> other.term: Probability = 1.00, Count = 1
CreateConfigurationSetEventDestinationResponse -> CreateConfigurationSetEventDestinationResult: Probability = 1.00, Count = 1
CreateConfigurationSetEventDestination -> createConfigurationSetEventDestination: Probability = 1.00, Count = 1
CreateConfigurationSetEventDestinationRequest -> CreateConfigurationSetEventDestinationRequest: Probability = 1.00, Count = 1
Invoke<CreateConfigurationSetEventDestinationResponse> -> executeCreateConfigurationSetEventDestination: Probability = 1.00, Count = 1
Ole10Native -> Ole10Native: Probability = 1.00, Count = 1
label, -> label,: Probability = 1.00, Count = 4
filename, -> filename,: Probability = 1.00, Count = 2
command, -> command,: Probability = 1.00, Count = 2
label -> setLabel: Probability = 0.04, Count = 1
label -> label: Probability = 0.91, Count = 21
label -> label.isEmpty: Probability = 0.04, Count = 1
FileName= -> setFileName: Probability = 1.00, Count = 1
Command= -> setCommand: Probability = 1.00, Count = 1
command -> command: Probability = 1.00, Count = 3
DataBuffer= -> setDataBuffer: Probability = 1.00, Count = 1
EncodingMode.parsed -> EncodingMode.parsed: Probability = 1.00, Count = 1
"No -> "No: Probability = 1.00, Count = 9
update -> update: Probability = 1.00, Count = 11
CreateCell -> createCell: Probability = 1.00, Count = 7
column, -> column,: Probability = 1.00, Count = 6
HindiNormalizationFilter -> HindiNormalizationFilter: Probability = 1.00, Count = 1
DescribeAddressesResponse -> DescribeAddressesResult: Probability = 1.00, Count = 2
DescribeAddresses -> describeAddresses: Probability = 1.00, Count = 3
DescribeAddressesRequest -> DescribeAddressesRequest: Probability = 1.00, Count = 2
SimpleQQParser -> SimpleQQParser: Probability = 0.75, Count = 3
SimpleQQParser -> qqName,: Probability = 0.25, Count = 1
qqNames, -> qqName,: Probability = 1.00, Count = 1
indexField -> indexField: Probability = 0.70, Count = 7
indexField -> ,: Probability = 0.10, Count = 1
indexField -> this.qqNames: Probability = 0.10, Count = 1
indexField -> qqName: Probability = 0.10, Count = 1
qqNames -> qqName: Probability = 1.00, Count = 1
Dispatch -> dispatch: Probability = 1.00, Count = 4
RefsChangedListener -> RefsChangedListener: Probability = 0.67, Count = 2
RefsChangedListener -> RefsChangedListener.class: Probability = 0.33, Count = 1
listener.OnRefsChanged -> listener.onRefsChanged: Probability = 1.00, Count = 1
SnowballFilter -> SnowballFilter: Probability = 1.00, Count = 2
className -> .asSubclass: Probability = 0.29, Count = 2
className -> className: Probability = 0.57, Count = 4
className -> Analyzer.class: Probability = 0.14, Count = 1
SnowballProgram -> stemClass.getConstructor: Probability = 0.50, Count = 2
SnowballProgram -> SnowballStemmer: Probability = 0.50, Count = 2
Activator.CreateInstance -> .newInstance: Probability = 0.67, Count = 6
Activator.CreateInstance -> cnstr: Probability = 0.11, Count = 1
Activator.CreateInstance -> clazz.getConstructor: Probability = 0.22, Count = 2
UpgradeAppliedSchemaResponse -> UpgradeAppliedSchemaResult: Probability = 1.00, Count = 1
UpgradeAppliedSchema -> upgradeAppliedSchema: Probability = 1.00, Count = 1
UpgradeAppliedSchemaRequest -> UpgradeAppliedSchemaRequest: Probability = 1.00, Count = 1
Invoke<UpgradeAppliedSchemaResponse> -> executeUpgradeAppliedSchema: Probability = 1.00, Count = 1
getParent -> getParent: Probability = 1.00, Count = 3
length_1 -> length: Probability = 0.90, Count = 26
length_1 -> char[value.length]: Probability = 0.03, Count = 1
length_1 -> malformedForLength: Probability = 0.03, Count = 1
length_1 -> unmappableForLength: Probability = 0.03, Count = 1
path.Length -> path.length: Probability = 0.93, Count = 14
path.Length -> path,: Probability = 0.07, Count = 1
firstInPath -> firstInPath: Probability = 1.00, Count = 3
separatorChar -> separatorChar: Probability = 0.50, Count = 6
separatorChar -> path.charAt: Probability = 0.25, Count = 3
separatorChar -> path.indexOf: Probability = 0.08, Count = 1
separatorChar -> index&&: Probability = 0.08, Count = 1
separatorChar -> firstInPath: Probability = 0.08, Count = 1
'\\' -> '\\': Probability = 1.00, Count = 10
path.LastIndexOf -> path.lastIndexOf: Probability = 1.00, Count = 2
Sharpen.StringHelper.Substring -> path.substring: Probability = 0.43, Count = 3
Sharpen.StringHelper.Substring -> input.substring: Probability = 0.29, Count = 2
Sharpen.StringHelper.Substring -> str.substring: Probability = 0.29, Count = 2
BufferedChecksumIndexInput -> BufferedChecksumIndexInput: Probability = 1.00, Count = 1
IndexInput -> IndexInput: Probability = 0.80, Count = 8
IndexInput -> openInput: Probability = 0.20, Count = 2
main -> main: Probability = 0.65, Count = 11
main -> Integer: Probability = 0.18, Count = 3
main -> Integer.valueOf: Probability = 0.18, Count = 3
"BufferedChecksumIndexInput -> "BufferedChecksumIndexInput: Probability = 1.00, Count = 1
this.main -> this.main: Probability = 1.00, Count = 2
this.digest -> this.digest: Probability = 1.00, Count = 1
BufferedChecksum -> BufferedChecksum: Probability = 1.00, Count = 2
CRC32 -> CRC32: Probability = 0.50, Count = 2
CRC32 -> Checksum: Probability = 0.25, Count = 1
CRC32 -> sum.update: Probability = 0.25, Count = 1
Remove -> remove: Probability = 1.00, Count = 18
set -> set: Probability = 0.83, Count = 39
set -> this.apiVersion: Probability = 0.04, Count = 2
set -> this.batchUrl: Probability = 0.02, Count = 1
set -> "Given: Probability = 0.02, Count = 1
set -> contentDisposition: Probability = 0.02, Count = 1
set -> set==null: Probability = 0.02, Count = 1
set -> this.subscriptionId: Probability = 0.02, Count = 1
set -> this.contentLength: Probability = 0.02, Count = 1
&= -> &=: Probability = 1.00, Count = 10
~set.mask -> ~set.mask: Probability = 1.00, Count = 1
GetFaceSearchResponse -> GetFaceSearchResult: Probability = 1.00, Count = 1
GetFaceSearch -> getFaceSearch: Probability = 1.00, Count = 1
GetFaceSearchRequest -> GetFaceSearchRequest: Probability = 1.00, Count = 1
Invoke<GetFaceSearchResponse> -> executeGetFaceSearch: Probability = 1.00, Count = 1
DescribeUserStackAssociationsResponse -> DescribeUserStackAssociationsResult: Probability = 1.00, Count = 1
DescribeUserStackAssociations -> describeUserStackAssociations: Probability = 1.00, Count = 1
DescribeUserStackAssociationsRequest -> DescribeUserStackAssociationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeUserStackAssociationsResponse> -> executeDescribeUserStackAssociations: Probability = 1.00, Count = 1
close -> close: Probability = 0.43, Count = 16
close -> throws: Probability = 0.22, Count = 8
close -> IOException: Probability = 0.16, Count = 6
close -> in.close: Probability = 0.03, Count = 1
close -> synchronized: Probability = 0.05, Count = 2
close -> ContentHandler: Probability = 0.03, Count = 1
close -> ErrorHandler: Probability = 0.03, Count = 1
close -> EntityResolver: Probability = 0.03, Count = 1
close -> DTDHandler: Probability = 0.03, Count = 1
CreateBranchCommand -> CreateBranchCommand: Probability = 1.00, Count = 2
BranchCreate -> branchCreate: Probability = 1.00, Count = 1
rt -> rt: Probability = 1.00, Count = 17
grbitFrt -> grbitFrt: Probability = 1.00, Count = 19
wOffset -> wOffset: Probability = 1.00, Count = 3
grbit -> grbit: Probability = 1.00, Count = 4
unused -> unused: Probability = 0.93, Count = 14
unused -> byte[6]: Probability = 0.07, Count = 1
insert0 -> insert0: Probability = 0.65, Count = 13
insert0 -> s: Probability = 0.05, Count = 1
insert0 -> ?: Probability = 0.10, Count = 2
insert0 -> "null": Probability = 0.10, Count = 2
insert0 -> s.toString: Probability = 0.10, Count = 2
child -> child: Probability = 0.96, Count = 23
child -> TaxonomyReader.INVALID_ORDINAL: Probability = 0.04, Count = 1
siblings[child] -> siblings[child]: Probability = 1.00, Count = 1
DeleteStackResponse -> DeleteStackResult: Probability = 1.00, Count = 1
DeleteStack -> deleteStack: Probability = 1.00, Count = 1
DeleteStackRequest -> DeleteStackRequest: Probability = 1.00, Count = 1
Invoke<DeleteStackResponse> -> executeDeleteStack: Probability = 1.00, Count = 1
variant -> variant: Probability = 0.80, Count = 8
variant -> "variant": Probability = 0.20, Count = 2
variant, -> "nb".equals: Probability = 0.33, Count = 2
variant, -> "nn".equals: Probability = 0.33, Count = 2
variant, -> "no".equals: Probability = 0.33, Count = 2
NorwegianStandard.BOKMAAL -> BOKMAAL: Probability = 0.50, Count = 4
NorwegianStandard.BOKMAAL -> variant: Probability = 0.50, Count = 4
NorwegianStandard.NYNORSK -> NYNORSK: Probability = 1.00, Count = 4
"invalid -> "invalid: Probability = 1.00, Count = 5
"Z -> "Z: Probability = 1.00, Count = 1
z -> z: Probability = 1.00, Count = 1
Record -> org.apache.poi.hssf.record.Record: Probability = 0.52, Count = 13
Record -> Record: Probability = 0.28, Count = 7
Record -> records.getRecords: Probability = 0.08, Count = 2
Record -> record.getSid: Probability = 0.08, Count = 2
Record -> record: Probability = 0.04, Count = 1
in1.Remaining -> in.remaining: Probability = 0.93, Count = 25
in1.Remaining -> field_4_year: Probability = 0.04, Count = 1
in1.Remaining -> field_5_history: Probability = 0.04, Count = 1
0:return -> 0:return: Probability = 1.00, Count = 2
2:return -> 2:return: Probability = 1.00, Count = 8
RecordFormatException -> RecordFormatException: Probability = 1.00, Count = 16
size: -> size:: Probability = 1.00, Count = 1
GetCellsPnt -> getCellsPnt: Probability = 0.67, Count = 2
GetCellsPnt -> Iterator<Character>: Probability = 0.33, Count = 1
Row -> Row: Probability = 0.63, Count = 17
Row -> getRow: Probability = 0.19, Count = 5
Row -> .iterator: Probability = 0.07, Count = 2
Row -> master,: Probability = 0.04, Count = 1
Row -> Iterator<Character>: Probability = 0.04, Count = 1
Row -> master.cells.keySet: Probability = 0.04, Count = 1
rows -> rows: Probability = 0.79, Count = 15
rows -> orows,: Probability = 0.11, Count = 2
rows -> rows,: Probability = 0.11, Count = 2
row.GetCellsPnt -> row.getCellsPnt: Probability = 1.00, Count = 1
Antlr4.Runtime.Atn.LexerActionExecutor -> LexerActionExecutor: Probability = 0.83, Count = 5
Antlr4.Runtime.Atn.LexerActionExecutor -> other.hashCode&&: Probability = 0.17, Count = 1
Arrays.Equals -> Arrays.equals: Probability = 0.78, Count = 7
Arrays.Equals -> &&Arrays.equals: Probability = 0.22, Count = 2
lexerActions, -> lexerActions,: Probability = 1.00, Count = 1
other.lexerActions -> other.lexerActions: Probability = 1.00, Count = 1
CreateAnalyzer -> createAnalyzer: Probability = 1.00, Count = 5
clazz -> clazz: Probability = 0.75, Count = 9
clazz -> Class<?>: Probability = 0.08, Count = 1
clazz -> registry.get: Probability = 0.08, Count = 1
clazz -> resolveEncoder: Probability = 0.08, Count = 1
GetSegmentVersionsResponse -> GetSegmentVersionsResult: Probability = 1.00, Count = 1
GetSegmentVersions -> getSegmentVersions: Probability = 1.00, Count = 1
GetSegmentVersionsRequest -> GetSegmentVersionsRequest: Probability = 1.00, Count = 1
Invoke<GetSegmentVersionsResponse> -> executeGetSegmentVersions: Probability = 1.00, Count = 1
GetDeltaBaseCacheLimit -> getDeltaBaseCacheLimit: Probability = 1.00, Count = 1
deltaBaseCacheLimit -> deltaBaseCacheLimit: Probability = 1.00, Count = 3
GroupMerger -> GroupMerger: Probability = 1.00, Count = 1
groupSort -> groupSort: Probability = 1.00, Count = 4
groupComp -> groupComp: Probability = 1.00, Count = 2
GroupComparer<T> -> GroupComparator<>: Probability = 1.00, Count = 1
queue -> queue: Probability = 1.00, Count = 2
groupsSeen -> groupsSeen: Probability = 1.00, Count = 1
15L -> 15L: Probability = 1.00, Count = 1
FileIdCluster -> FileIdCluster: Probability = 0.75, Count = 3
FileIdCluster -> drawingGroupId,: Probability = 0.25, Count = 1
drawingGroupId, -> drawingGroupId,: Probability = 1.00, Count = 1
numShapeIdsUsed -> numShapeIdsUsed: Probability = 1.00, Count = 2
this.field_1_drawingGroupId -> this.field_1_drawingGroupId: Probability = 1.00, Count = 1
drawingGroupId -> drawingGroupId: Probability = 1.00, Count = 1
this.field_2_numShapeIdsUsed -> this.field_2_numShapeIdsUsed: Probability = 1.00, Count = 1
CharArrayIterator -> CharArrayIterator: Probability = 1.00, Count = 3
clone -> clone: Probability = 0.64, Count = 18
clone -> SrndQuery: Probability = 0.07, Count = 2
clone -> super.clone: Probability = 0.11, Count = 3
clone -> CloneNotSupportedException: Probability = 0.07, Count = 2
clone -> cns: Probability = 0.07, Count = 2
clone -> try: Probability = 0.04, Count = 1
clone.SetText -> clone.setText: Probability = 1.00, Count = 1
clone.index -> clone.index: Probability = 1.00, Count = 1
DescribeReservedNodesResponse -> DescribeReservedNodesResult: Probability = 1.00, Count = 2
DescribeReservedNodes -> describeReservedNodes: Probability = 1.00, Count = 3
DescribeReservedNodesRequest -> DescribeReservedNodesRequest: Probability = 1.00, Count = 2
Invoke<DescribeReservedNodesResponse> -> executeDescribeReservedNodes: Probability = 1.00, Count = 1
ObjectWalk -> ObjectWalk: Probability = 1.00, Count = 2
repo, -> repo,: Probability = 1.00, Count = 4
depth -> depth: Probability = 0.71, Count = 10
depth -> this.depth: Probability = 0.29, Count = 4
this.depth -> this.deepenNots: Probability = 0.50, Count = 4
this.depth -> Collections.emptyList: Probability = 0.50, Count = 4
this.UNSHALLOW -> this.UNSHALLOW: Probability = 0.50, Count = 4
this.UNSHALLOW -> newFlag: Probability = 0.50, Count = 4
NewFlag -> "UNSHALLOW": Probability = 0.50, Count = 4
NewFlag -> this.DEEPEN_NOT: Probability = 0.50, Count = 4
"UNSHALLOW" -> this.REINTERESTING: Probability = 1.00, Count = 4
this.REINTERESTING -> newFlag: Probability = 0.50, Count = 4
this.REINTERESTING -> "REINTERESTING": Probability = 0.50, Count = 4
"REINTERESTING" -> newFlag: Probability = 0.50, Count = 4
"REINTERESTING" -> "DEEPEN_NOT": Probability = 0.50, Count = 4
IsRefLogDisabled -> isRefLogDisabled: Probability = 1.00, Count = 1
refLogMessage -> refLogMessage: Probability = 1.00, Count = 9
SetLoadBalancerListenerSSLCertificateResponse -> SetLoadBalancerListenerSSLCertificateResult: Probability = 1.00, Count = 1
SetLoadBalancerListenerSSLCertificate -> setLoadBalancerListenerSSLCertificate: Probability = 1.00, Count = 1
SetLoadBalancerListenerSSLCertificateRequest -> SetLoadBalancerListenerSSLCertificateRequest: Probability = 1.00, Count = 2
Invoke<SetLoadBalancerListenerSSLCertificateResponse> -> executeSetLoadBalancerListenerSSLCertificate: Probability = 1.00, Count = 1
DescribeRulesPackagesResponse -> DescribeRulesPackagesResult: Probability = 1.00, Count = 1
DescribeRulesPackages -> describeRulesPackages: Probability = 1.00, Count = 1
DescribeRulesPackagesRequest -> DescribeRulesPackagesRequest: Probability = 1.00, Count = 1
Invoke<DescribeRulesPackagesResponse> -> executeDescribeRulesPackages: Probability = 1.00, Count = 1
StandardSyntaxParserTokenManager -> StandardSyntaxParserTokenManager: Probability = 1.00, Count = 5
ICharStream -> CharStream: Probability = 1.00, Count = 16
lexState -> lexState: Probability = 0.97, Count = 33
lexState -> 3: Probability = 0.03, Count = 1
SwitchTo -> SwitchTo: Probability = 1.00, Count = 9
TurkishLowerCaseFilter -> TurkishLowerCaseFilter: Probability = 1.00, Count = 1
"B" -> "B": Probability = 1.00, Count = 1
DEFAULT_ARG1 -> DEFAULT_ARG1: Probability = 1.00, Count = 1
DoubleField -> doubleField: Probability = 1.00, Count = 1
FieldInfo -> FieldInfo: Probability = 0.86, Count = 18
FieldInfo -> fieldInfo: Probability = 0.10, Count = 2
FieldInfo -> fi: Probability = 0.05, Count = 1
fieldInfo, -> fieldInfo,: Probability = 1.00, Count = 3
doc.Add -> doc.add: Probability = 1.00, Count = 1
fieldInfo.Name, -> fieldInfo.name,: Probability = 1.00, Count = 3
GetDistributionConfigRequest -> GetDistributionConfigRequest: Probability = 1.00, Count = 2
DescribeCacheSecurityGroupsResponse -> DescribeCacheSecurityGroupsResult: Probability = 1.00, Count = 2
DescribeCacheSecurityGroups -> describeCacheSecurityGroups: Probability = 1.00, Count = 3
DescribeCacheSecurityGroupsRequest -> DescribeCacheSecurityGroupsRequest: Probability = 1.00, Count = 3
0.0 -> 0.0: Probability = 1.00, Count = 7
NumberEval.ZERO -> NumberEval.ZERO: Probability = 1.00, Count = 5
100 -> 100: Probability = 1.00, Count = 4
ContainsCell -> containsCell: Probability = 1.00, Count = 3
_lastColumnIndex -> _lastColumnIndex: Probability = 0.75, Count = 9
_lastColumnIndex -> _lastColumnIndex+1: Probability = 0.08, Count = 1
_lastColumnIndex -> !_currentRectangleGroup.acceptRow: Probability = 0.08, Count = 1
_lastColumnIndex -> _rectangleGroups.add: Probability = 0.08, Count = 1
_lastRowIndex -> _lastRowIndex: Probability = 0.67, Count = 2
_lastRowIndex -> _lastRowIndex+1: Probability = 0.33, Count = 1
GetSegmentVersionResponse -> GetSegmentVersionResult: Probability = 1.00, Count = 1
GetSegmentVersion -> getSegmentVersion: Probability = 1.00, Count = 1
GetSegmentVersionRequest -> GetSegmentVersionRequest: Probability = 1.00, Count = 1
Invoke<GetSegmentVersionResponse> -> executeGetSegmentVersion: Probability = 1.00, Count = 1
byteCount -> byteCount: Probability = 0.69, Count = 46
byteCount -> throws: Probability = 0.10, Count = 7
byteCount -> IOException: Probability = 0.10, Count = 7
byteCount -> Streams.readFully: Probability = 0.01, Count = 1
byteCount -> checkGetBounds: Probability = 0.01, Count = 1
byteCount -> IoBridge.read: Probability = 0.03, Count = 2
byteCount -> checkPutBounds: Probability = 0.01, Count = 1
byteCount -> IoBridge.write: Probability = 0.01, Count = 1
byteCount -> "byteCount: Probability = 0.01, Count = 1
src.Length -> src.length: Probability = 1.00, Count = 9
SearchFaceRequest -> SearchFaceRequest: Probability = 1.00, Count = 1
"LinkFace", -> "LinkFace",: Probability = 0.50, Count = 15
"LinkFace", -> "2018-07-20",: Probability = 0.50, Count = 15
"SearchFace" -> "SearchFace": Probability = 1.00, Count = 1
TagStreamResponse -> TagStreamResult: Probability = 1.00, Count = 1
TagStream -> tagStream: Probability = 1.00, Count = 1
TagStreamRequest -> TagStreamRequest: Probability = 1.00, Count = 1
Invoke<TagStreamResponse> -> executeTagStream: Probability = 1.00, Count = 1
GetAccessKeyId -> getAccessKeyId: Probability = 1.00, Count = 6
AccessKeyId -> this.accessKeyId: Probability = 0.83, Count = 5
AccessKeyId -> accessKeyId: Probability = 0.17, Count = 1
ET -> ET: Probability = 0.83, Count = 5
ET -> list.modCount: Probability = 0.17, Count = 1
previous -> previous: Probability = 1.00, Count = 13
expectedModCount -> expectedModCount: Probability = 1.00, Count = 4
list.modCount -> list.modCount: Probability = 1.00, Count = 4
link -> link: Probability = 1.00, Count = 25
list.voidLink -> list.voidLink: Probability = 1.00, Count = 3
lastLink -> lastLink: Probability = 1.00, Count = 4
link.previous -> link.previous: Probability = 1.00, Count = 5
lastLink.data -> lastLink.data: Probability = 1.00, Count = 2
java.util.NoSuchElementException -> NoSuchElementException: Probability = 1.00, Count = 12
CreateLBCookieStickinessPolicyResponse -> CreateLBCookieStickinessPolicyResult: Probability = 1.00, Count = 1
CreateLBCookieStickinessPolicy -> createLBCookieStickinessPolicy: Probability = 1.00, Count = 1
CreateLBCookieStickinessPolicyRequest -> CreateLBCookieStickinessPolicyRequest: Probability = 1.00, Count = 2
Invoke<CreateLBCookieStickinessPolicyResponse> -> executeCreateLBCookieStickinessPolicy: Probability = 1.00, Count = 1
CreateDataSourceFromRDSResponse -> CreateDataSourceFromRDSResult: Probability = 1.00, Count = 1
CreateDataSourceFromRDS -> createDataSourceFromRDS: Probability = 1.00, Count = 1
CreateDataSourceFromRDSRequest -> CreateDataSourceFromRDSRequest: Probability = 1.00, Count = 1
Invoke<CreateDataSourceFromRDSResponse> -> executeCreateDataSourceFromRDS: Probability = 1.00, Count = 1
CreateReceiptFilterResponse -> CreateReceiptFilterResult: Probability = 1.00, Count = 1
CreateReceiptFilter -> createReceiptFilter: Probability = 1.00, Count = 1
CreateReceiptFilterRequest -> CreateReceiptFilterRequest: Probability = 1.00, Count = 1
Invoke<CreateReceiptFilterResponse> -> executeCreateReceiptFilter: Probability = 1.00, Count = 1
NGit.Api.CherryPickCommand -> CherryPickCommand: Probability = 1.00, Count = 5
Include -> include: Probability = 1.00, Count = 25
ATNDeserializationOptions -> ATNDeserializationOptions: Probability = 1.00, Count = 4
this.verifyATN -> this.verifyATN: Probability = 1.00, Count = 1
this.optimize -> this.generateRuleBypassTransitions: Probability = 1.00, Count = 1
ListIdentityPoliciesResponse -> ListIdentityPoliciesResult: Probability = 1.00, Count = 1
ListIdentityPolicies -> listIdentityPolicies: Probability = 1.00, Count = 1
ListIdentityPoliciesRequest -> ListIdentityPoliciesRequest: Probability = 1.00, Count = 1
Invoke<ListIdentityPoliciesResponse> -> executeListIdentityPolicies: Probability = 1.00, Count = 1
IsValidCode -> isValidCode: Probability = 1.00, Count = 1
errorCode -> errorCode: Probability = 0.70, Count = 16
errorCode -> error.getCode: Probability = 0.04, Count = 1
errorCode -> FormulaError.forInt: Probability = 0.09, Count = 2
errorCode -> evals.get: Probability = 0.04, Count = 1
errorCode -> FormulaError.isValidCode: Probability = 0.04, Count = 1
errorCode -> .getString: Probability = 0.04, Count = 1
errorCode -> "~non~std~err: Probability = 0.04, Count = 1
FormulaError -> FormulaError: Probability = 1.00, Count = 8
error -> error: Probability = 0.76, Count = 13
error -> eval: Probability = 0.18, Count = 3
error -> "Unhandled: Probability = 0.06, Count = 1
_values -> values: Probability = 0.83, Count = 5
_values -> setValues: Probability = 0.17, Count = 1
error.LongCode -> error.getLongCode: Probability = 1.00, Count = 1
RKRecord -> RKRecord: Probability = 1.00, Count = 3
field_4_rk_number -> field_4_rk_number: Probability = 1.00, Count = 1
ByteBuffer -> ByteBuffer: Probability = 1.00, Count = 9
b.Put -> b.put: Probability = 1.00, Count = 1
ToHexByteArray -> toHexByteArray: Probability = 1.00, Count = 1
.options -> .options: Probability = 1.00, Count = 6
Options -> getOptions: Probability = 1.00, Count = 20
IsHorizontalBorder -> isHorizontalBorder: Probability = 1.00, Count = 2
'\n' -> '\n': Probability = 0.96, Count = 94
'\n' -> .append: Probability = 0.04, Count = 4
IsVerticalBorder -> isVerticalBorder: Probability = 1.00, Count = 2
IsBorder -> isBorder: Probability = 1.00, Count = 2
IsShowSeriesKey -> isShowSeriesKey: Probability = 1.00, Count = 2
UpdateDashboardResponse -> UpdateDashboardResult: Probability = 1.00, Count = 1
UpdateDashboard -> updateDashboard: Probability = 1.00, Count = 1
UpdateDashboardRequest -> UpdateDashboardRequest: Probability = 1.00, Count = 1
Invoke<UpdateDashboardResponse> -> executeUpdateDashboard: Probability = 1.00, Count = 1
RegisterTagRequest -> RegisterTagRequest: Probability = 1.00, Count = 1
"RegisterTag", -> "RegisterTag",: Probability = 1.00, Count = 1
SetPathFilter -> setPathFilter: Probability = 1.00, Count = 2
pathFilter -> pathFilter: Probability = 1.00, Count = 4
this.pathFilter -> this.pathFilter: Probability = 1.00, Count = 1
MarkSupported -> markSupported: Probability = 1.00, Count = 2
": -> ":: Probability = 1.00, Count = 10
maxThreadCount -> maxThreadCount: Probability = 0.28, Count = 5
maxThreadCount -> setMaxMergesAndThreads: Probability = 0.06, Count = 1
maxThreadCount -> maxMergeCount,: Probability = 0.06, Count = 1
maxThreadCount -> maxMergeCount: Probability = 0.06, Count = 1
maxThreadCount -> AUTO_DETECT_MERGES_AND_THREADS: Probability = 0.33, Count = 6
maxThreadCount -> this.maxMergeCount: Probability = 0.11, Count = 2
maxThreadCount -> this.maxThreadCount: Probability = 0.11, Count = 2
maxMergeCount -> maxMergeCount: Probability = 0.41, Count = 7
maxMergeCount -> maxThreadCount: Probability = 0.24, Count = 4
maxMergeCount -> AUTO_DETECT_MERGES_AND_THREADS": Probability = 0.12, Count = 2
maxMergeCount -> "both: Probability = 0.06, Count = 1
maxMergeCount -> "maxThreadCount: Probability = 0.12, Count = 2
maxMergeCount -> "maxMergeCount: Probability = 0.06, Count = 1
println -> println: Probability = 0.79, Count = 23
println -> String.valueOf: Probability = 0.21, Count = 6
newline -> newline: Probability = 1.00, Count = 6
UpdateApiResponse -> UpdateApiResult: Probability = 1.00, Count = 1
UpdateApi -> updateApi: Probability = 1.00, Count = 1
UpdateApiRequest -> UpdateApiRequest: Probability = 1.00, Count = 1
Invoke<UpdateApiResponse> -> executeUpdateApi: Probability = 1.00, Count = 1
FlushStageAuthorizersCacheResponse -> FlushStageAuthorizersCacheResult: Probability = 1.00, Count = 1
FlushStageAuthorizersCache -> flushStageAuthorizersCache: Probability = 1.00, Count = 1
FlushStageAuthorizersCacheRequest -> FlushStageAuthorizersCacheRequest: Probability = 1.00, Count = 1
Invoke<FlushStageAuthorizersCacheResponse> -> executeFlushStageAuthorizersCache: Probability = 1.00, Count = 1
BasicQueryFactory -> BasicQueryFactory: Probability = 0.92, Count = 12
BasicQueryFactory -> atMax: Probability = 0.08, Count = 1
maxBasicQueries -> maxBasicQueries: Probability = 1.00, Count = 2
this.maxBasicQueries -> this.maxBasicQueries: Probability = 1.00, Count = 1
this.queriesMade -> this.queriesMade: Probability = 1.00, Count = 1
TrackingRefUpdate -> TrackingRefUpdate: Probability = 1.00, Count = 1
GetTrackingRefUpdate -> getTrackingRefUpdate: Probability = 1.00, Count = 1
localName -> localName: Probability = 1.00, Count = 4
updates.Get -> updates.get: Probability = 1.00, Count = 1
.rt -> .rt: Probability = 1.00, Count = 7
HexDump.ShortToHex -> HexDump.shortToHex: Probability = 0.92, Count = 65
HexDump.ShortToHex -> '\n': Probability = 0.04, Count = 3
HexDump.ShortToHex -> =": Probability = 0.04, Count = 3
EnableDirectoryResponse -> EnableDirectoryResult: Probability = 1.00, Count = 1
EnableDirectory -> enableDirectory: Probability = 1.00, Count = 1
EnableDirectoryRequest -> EnableDirectoryRequest: Probability = 1.00, Count = 1
Invoke<EnableDirectoryResponse> -> executeEnableDirectory: Probability = 1.00, Count = 1
intCount -> intCount: Probability = 1.00, Count = 24
.password -> .password: Probability = 1.00, Count = 2
field_1_password -> field_1_password: Probability = 1.00, Count = 4
DescribeProjectVersionsResponse -> DescribeProjectVersionsResult: Probability = 1.00, Count = 1
DescribeProjectVersions -> describeProjectVersions: Probability = 1.00, Count = 1
DescribeProjectVersionsRequest -> DescribeProjectVersionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeProjectVersionsResponse> -> executeDescribeProjectVersions: Probability = 1.00, Count = 1
UpdateHostedZoneCommentResponse -> UpdateHostedZoneCommentResult: Probability = 1.00, Count = 1
UpdateHostedZoneComment -> updateHostedZoneComment: Probability = 1.00, Count = 1
UpdateHostedZoneCommentRequest -> UpdateHostedZoneCommentRequest: Probability = 1.00, Count = 1
Invoke<UpdateHostedZoneCommentResponse> -> executeUpdateHostedZoneComment: Probability = 1.00, Count = 1
Rescorer -> Rescorer: Probability = 0.50, Count = 1
Rescorer -> getRescorer: Probability = 0.50, Count = 1
Bindings -> Bindings: Probability = 1.00, Count = 2
bindings -> bindings: Probability = 1.00, Count = 3
ExpressionRescorer -> ExpressionRescorer: Probability = 1.00, Count = 1
headSet -> headSet: Probability = 1.00, Count = 3
first, -> first,: Probability = 1.00, Count = 5
clauses -> Vector<QueryNode>: Probability = 0.17, Count = 6
clauses -> clauses: Probability = 0.66, Count = 23
clauses -> ConjQuery: Probability = 0.09, Count = 3
clauses -> ModifierQueryNode: Probability = 0.09, Count = 3
Jj_ntk -> jj_ntk==-1: Probability = 0.48, Count = 12
Jj_ntk -> ?jj_ntk: Probability = 0.48, Count = 12
Jj_ntk -> :jj_ntk: Probability = 0.04, Count = 1
jj_ntk -> :jj_ntk: Probability = 0.39, Count = 11
jj_ntk -> jj_ntk: Probability = 0.43, Count = 12
jj_ntk -> NOT:case: Probability = 0.07, Count = 2
jj_ntk -> PLUS:case: Probability = 0.07, Count = 2
jj_ntk -> ParseException: Probability = 0.04, Count = 1
jj_gen -> jj_gen: Probability = 1.00, Count = 32
Jj_consume_token -> jj_consume_token: Probability = 0.84, Count = 21
Jj_consume_token -> break: Probability = 0.16, Count = 4
clauses.Add -> clauses.addElement: Probability = 1.00, Count = 6
OrQueryNode -> OrQueryNode: Probability = 1.00, Count = 2
"Missing -> Error: Probability = 0.50, Count = 15
"Missing -> "Missing: Probability = 0.50, Count = 15
statement -> statement: Probability = 1.00, Count = 15
function" -> in: Probability = 0.50, Count = 15
function" -> function": Probability = 0.50, Count = 15
IDataValidationConstraint -> DataValidationConstraint: Probability = 1.00, Count = 9
CreateExplicitListConstraint -> createExplicitListConstraint: Probability = 1.00, Count = 2
listOfValues -> listOfValues: Probability = 1.00, Count = 2
DVConstraint.CreateExplicitListConstraint -> DVConstraint.createExplicitListConstraint: Probability = 1.00, Count = 1
offer -> offer: Probability = 1.00, Count = 1
addLastImpl -> addLastImpl: Probability = 1.00, Count = 3
ListInvalidationsRequest -> ListInvalidationsRequest: Probability = 1.00, Count = 2
distributionId -> distributionId: Probability = 1.00, Count = 4
_distributionId -> setDistributionId: Probability = 1.00, Count = 3
TagPhotoRequest -> TagPhotoRequest: Probability = 1.00, Count = 1
"TagPhoto", -> "TagPhoto",: Probability = 1.00, Count = 1
CreateFleetResponse -> CreateFleetResult: Probability = 1.00, Count = 1
CreateFleet -> createFleet: Probability = 1.00, Count = 1
CreateFleetRequest -> CreateFleetRequest: Probability = 1.00, Count = 1
Invoke<CreateFleetResponse> -> executeCreateFleet: Probability = 1.00, Count = 1
GetTransitGatewayAttachmentPropagationsResponse -> GetTransitGatewayAttachmentPropagationsResult: Probability = 1.00, Count = 1
GetTransitGatewayAttachmentPropagations -> getTransitGatewayAttachmentPropagations: Probability = 1.00, Count = 1
GetTransitGatewayAttachmentPropagationsRequest -> GetTransitGatewayAttachmentPropagationsRequest: Probability = 1.00, Count = 1
Invoke<GetTransitGatewayAttachmentPropagationsResponse> -> executeGetTransitGatewayAttachmentPropagations: Probability = 1.00, Count = 1
ListWorkteamsResponse -> ListWorkteamsResult: Probability = 1.00, Count = 1
ListWorkteams -> listWorkteams: Probability = 1.00, Count = 1
ListWorkteamsRequest -> ListWorkteamsRequest: Probability = 1.00, Count = 1
Invoke<ListWorkteamsResponse> -> executeListWorkteams: Probability = 1.00, Count = 1
DetachVpnGatewayResponse -> DetachVpnGatewayResult: Probability = 1.00, Count = 1
DetachVpnGateway -> detachVpnGateway: Probability = 1.00, Count = 1
DetachVpnGatewayRequest -> DetachVpnGatewayRequest: Probability = 1.00, Count = 2
Invoke<DetachVpnGatewayResponse> -> executeDetachVpnGateway: Probability = 1.00, Count = 1
ListGeoLocationsResponse -> ListGeoLocationsResult: Probability = 1.00, Count = 2
ListGeoLocations -> listGeoLocations: Probability = 1.00, Count = 3
ListGeoLocationsRequest -> ListGeoLocationsRequest: Probability = 1.00, Count = 2
raw_number -> decodeNumber: Probability = 0.17, Count = 1
raw_number -> raw_number: Probability = 0.83, Count = 5
rvalue -> rvalue: Probability = 1.00, Count = 5
0x02 -> 0x02: Probability = 1.00, Count = 3
0x01 -> 0x01: Probability = 1.00, Count = 17
valueCount -> valueCount: Probability = 0.54, Count = 31
valueCount -> Packed64SingleBlock: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock1: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock2: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock3: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock4: Probability = 0.02, Count = 1
valueCount -> 5:return: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock5: Probability = 0.02, Count = 1
valueCount -> 6:return: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock6: Probability = 0.02, Count = 1
valueCount -> 7:return: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock7: Probability = 0.02, Count = 1
valueCount -> 8:return: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock8: Probability = 0.02, Count = 1
valueCount -> 9:return: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock9: Probability = 0.02, Count = 1
valueCount -> 10:return: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock10: Probability = 0.02, Count = 1
valueCount -> 12:return: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock12: Probability = 0.02, Count = 1
valueCount -> 16:return: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock16: Probability = 0.02, Count = 1
valueCount -> 21:return: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock21: Probability = 0.02, Count = 1
valueCount -> 32:return: Probability = 0.02, Count = 1
valueCount -> Packed64SingleBlock32: Probability = 0.02, Count = 1
valueCount -> "Unsupported: Probability = 0.02, Count = 1
subReaders[block].Get -> subReaders[block].get: Probability = 1.00, Count = 2
UpdatePublishingDestinationResponse -> UpdatePublishingDestinationResult: Probability = 1.00, Count = 1
UpdatePublishingDestination -> updatePublishingDestination: Probability = 1.00, Count = 1
UpdatePublishingDestinationRequest -> UpdatePublishingDestinationRequest: Probability = 1.00, Count = 1
Invoke<UpdatePublishingDestinationResponse> -> executeUpdatePublishingDestination: Probability = 1.00, Count = 1
NotifyDeleteCell -> notifyDeleteCell: Probability = 1.00, Count = 2
GetSheetIndex -> getSheetIndex: Probability = 0.90, Count = 9
GetSheetIndex -> srcCell.getSheet: Probability = 0.10, Count = 1
cell.Sheet -> cell.getSheet: Probability = 1.00, Count = 2
_cache.NotifyDeleteCell -> _cache.notifyDeleteCell: Probability = 1.00, Count = 1
_workbookIx, -> _workbookIx,: Probability = 1.00, Count = 2
IRequest -> Request<GetPolicyRequest>: Probability = 0.14, Count = 2
IRequest -> getPolicyRequest: Probability = 0.14, Count = 2
IRequest -> Request<DeletePublicAccessBlockRequest>: Probability = 0.14, Count = 2
IRequest -> DeletePublicAccessBlockRequest: Probability = 0.07, Count = 1
IRequest -> deletePublicAccessBlockRequest: Probability = 0.14, Count = 2
IRequest -> Request<GetPublicAccessBlockRequest>: Probability = 0.14, Count = 2
IRequest -> GetPublicAccessBlockRequest: Probability = 0.07, Count = 1
IRequest -> getPublicAccessBlockRequest: Probability = 0.14, Count = 2
Marshall -> marshall: Probability = 1.00, Count = 6
GetPolicyRequest -> GetPolicyRequest: Probability = 1.00, Count = 2
DefaultRequest -> SdkClientException: Probability = 0.56, Count = 5
DefaultRequest -> marshall: Probability = 0.44, Count = 4
request.HttpMethod -> "Invalid: Probability = 0.25, Count = 5
request.HttpMethod -> argument: Probability = 0.25, Count = 5
request.HttpMethod -> passed: Probability = 0.25, Count = 5
request.HttpMethod -> ...: Probability = 0.25, Count = 5
FunctionName -> request.addParameter: Probability = 0.60, Count = 3
FunctionName -> getPolicyRequest.getPolicyArn: Probability = 0.40, Count = 2
required -> request.setHttpMethod: Probability = 1.00, Count = 5
request.ResourcePath -> StringUtils.fromString: Probability = 0.50, Count = 4
request.ResourcePath -> uriResourcePath: Probability = 0.50, Count = 4
request -> request: Probability = 0.90, Count = 9
request -> (: Probability = 0.10, Count = 1
real_num, -> real_num,: Probability = 0.67, Count = 2
real_num, -> i_num: Probability = 0.33, Count = 1
i_num, -> i_num,: Probability = 1.00, Count = 1
DEFAULT_SUFFIX -> DEFAULT_SUFFIX: Probability = 1.00, Count = 1
IEscherRecordFactory -> EscherRecordFactory: Probability = 1.00, Count = 8
RecordSize -> getRecordSize: Probability = 0.94, Count = 15
RecordSize -> reports: Probability = 0.06, Count = 1
java.nio.charset.CharsetEncoder -> final: Probability = 0.50, Count = 2
java.nio.charset.CharsetEncoder -> CharsetEncoder: Probability = 0.50, Count = 2
INIT -> INIT: Probability = 1.00, Count = 1
implReset -> implReset: Probability = 1.00, Count = 1
Emit -> emit: Probability = 1.00, Count = 3
IToken -> Token: Probability = 0.96, Count = 24
IToken -> recoverInline: Probability = 0.04, Count = 1
token -> token: Probability = 0.86, Count = 24
token -> label: Probability = 0.07, Count = 2
token -> tokenizer.getNextToken: Probability = 0.07, Count = 2
this._token -> this._token: Probability = 1.00, Count = 1
AbstractTreeIterator -> AbstractTreeIterator: Probability = 1.00, Count = 4
CreateSubtreeIterator -> createSubtreeIterator: Probability = 1.00, Count = 2
ObjectReader -> ObjectReader: Probability = 1.00, Count = 8
currentSubtree -> IncorrectObjectTypeException,: Probability = 0.25, Count = 2
currentSubtree -> currentSubtree: Probability = 0.75, Count = 6
IncorrectObjectTypeException -> IncorrectObjectTypeException: Probability = 1.00, Count = 6
EntryObjectId, -> getEntryObjectId: Probability = 1.00, Count = 2
Constants.TYPE_TREE -> ,Constants.TYPE_TREE: Probability = 1.00, Count = 3
NGit.Dircache.DirCacheBuildIterator -> DirCacheBuildIterator: Probability = 1.00, Count = 1
GreekLowerCaseFilterFactory -> GreekLowerCaseFilterFactory: Probability = 1.00, Count = 1
java.net.URI -> URI: Probability = 1.00, Count = 9
relative -> relativize: Probability = 0.07, Count = 1
relative -> relative: Probability = 0.57, Count = 8
relative -> relative.opaque: Probability = 0.07, Count = 1
relative -> relative.scheme: Probability = 0.14, Count = 2
relative -> relative.authority: Probability = 0.14, Count = 2
opaque -> opaque: Probability = 1.00, Count = 4
thisPath -> thisPath: Probability = 1.00, Count = 3
normalize -> normalize: Probability = 1.00, Count = 4
result.path -> result.path: Probability = 1.00, Count = 2
result.setSchemeSpecificPart -> result.setSchemeSpecificPart: Probability = 1.00, Count = 2
trim -> trim: Probability = 1.00, Count = 2
frozen -> frozen: Probability = 1.00, Count = 6
currentBlock -> didSkipBytes: Probability = 0.08, Count = 2
currentBlock -> newBlock: Probability = 0.08, Count = 2
currentBlock -> byte[upto]: Probability = 0.04, Count = 1
currentBlock -> newBlock,: Probability = 0.04, Count = 1
currentBlock -> currentBlock: Probability = 0.52, Count = 13
currentBlock -> EMPTY_BYTES: Probability = 0.04, Count = 1
currentBlock -> addBlock: Probability = 0.12, Count = 3
currentBlock -> PagedBytes.Reader: Probability = 0.04, Count = 1
currentBlock -> currentBlock==null: Probability = 0.04, Count = 1
"cannot -> "cannot: Probability = 1.00, Count = 13
when -> when: Probability = 1.00, Count = 6
was -> was: Probability = 1.00, Count = 13
currentBlock, -> currentBlock,: Probability = 1.00, Count = 5
OperationEvaluationContext -> OperationEvaluationContext: Probability = 1.00, Count = 9
ec -> ec: Probability = 1.00, Count = 9
ec.RowIndex, -> ec.getRowIndex: Probability = 0.43, Count = 9
ec.RowIndex, -> ec.getColumnIndex: Probability = 0.43, Count = 9
ec.RowIndex, -> ,: Probability = 0.14, Count = 3
ec.ColumnIndex, -> ,: Probability = 1.00, Count = 12
args[1] -> args[1]: Probability = 1.00, Count = 8
CreateCluster -> createCluster: Probability = 1.00, Count = 2
CreateClusterRequest -> CreateClusterRequest: Probability = 1.00, Count = 2
Invoke<CreateClusterResponse> -> executeCreateCluster: Probability = 1.00, Count = 2
PersistentSnapshotDeletionPolicy -> PersistentSnapshotDeletionPolicy: Probability = 1.00, Count = 1
IndexDeletionPolicy -> IndexDeletionPolicy: Probability = 1.00, Count = 3
primary, -> primary,Directory: Probability = 1.00, Count = 1
dir, -> dir,: Probability = 0.79, Count = 11
dir, -> Constants.OBJECTS: Probability = 0.07, Count = 1
dir, -> "refs": Probability = 0.07, Count = 1
dir, -> isValidHead: Probability = 0.07, Count = 1
OpenMode -> OpenMode: Probability = 1.00, Count = 2
this.dir -> this.dir: Probability = 1.00, Count = 4
dir -> dir: Probability = 0.92, Count = 22
dir -> Directory: Probability = 0.08, Count = 2
"no -> "no: Probability = 1.00, Count = 3
snapshots -> snapshots: Probability = 1.00, Count = 1
stored -> stored: Probability = 1.00, Count = 1
directory" -> directory": Probability = 1.00, Count = 2
ctx.SourceInterval -> ctx.getSourceInterval: Probability = 1.00, Count = 1
DeleteDataSetResponse -> DeleteDataSetResult: Probability = 1.00, Count = 1
DeleteDataSet -> deleteDataSet: Probability = 1.00, Count = 1
DeleteDataSetRequest -> DeleteDataSetRequest: Probability = 1.00, Count = 1
Invoke<DeleteDataSetResponse> -> executeDeleteDataSet: Probability = 1.00, Count = 1
this._enclosing.containsKey -> containsKey: Probability = 0.25, Count = 2
this._enclosing.containsKey -> Impl.this.containsKey: Probability = 0.12, Count = 1
this._enclosing.containsKey -> ConcurrentHashMap.this.containsKey: Probability = 0.12, Count = 1
this._enclosing.containsKey -> TreeMap.this.containsKey: Probability = 0.12, Count = 1
this._enclosing.containsKey -> key: Probability = 0.25, Count = 2
this._enclosing.containsKey -> subMap.containsKey: Probability = 0.12, Count = 1
base.Matches -> super.matches: Probability = 1.00, Count = 1
!m_exceptions.Contains -> !exceptions.contains: Probability = 1.00, Count = 1
GetDeltaSearchWindowSize -> getDeltaSearchWindowSize: Probability = 1.00, Count = 1
deltaSearchWindowSize -> deltaSearchWindowSize: Probability = 0.50, Count = 1
deltaSearchWindowSize -> elsedeltaSearchWindowSize: Probability = 0.50, Count = 1
GetDomainNameResponse -> GetDomainNameResult: Probability = 1.00, Count = 1
GetDomainName -> getDomainName: Probability = 1.00, Count = 1
GetDomainNameRequest -> GetDomainNameRequest: Probability = 1.00, Count = 1
Invoke<GetDomainNameResponse> -> executeGetDomainName: Probability = 1.00, Count = 1
DeleteAccessLogSettingsResponse -> DeleteAccessLogSettingsResult: Probability = 1.00, Count = 1
DeleteAccessLogSettings -> deleteAccessLogSettings: Probability = 1.00, Count = 1
DeleteAccessLogSettingsRequest -> DeleteAccessLogSettingsRequest: Probability = 1.00, Count = 1
Invoke<DeleteAccessLogSettingsResponse> -> executeDeleteAccessLogSettings: Probability = 1.00, Count = 1
QueryValueSource -> QueryValueSource: Probability = 0.75, Count = 3
QueryValueSource -> QueryValueSource.class: Probability = 0.25, Count = 1
Query -> Query: Probability = 0.89, Count = 24
Query -> query: Probability = 0.04, Count = 1
Query -> throws: Probability = 0.04, Count = 1
Query -> QueryNodeException: Probability = 0.04, Count = 1
q, -> q,: Probability = 1.00, Count = 6
defVal -> defVal: Probability = 1.00, Count = 2
this.q -> this.q: Probability = 1.00, Count = 3
q -> q: Probability = 0.74, Count = 65
q -> q,: Probability = 0.02, Count = 2
q -> AndQuery: Probability = 0.03, Count = 3
q -> NotQuery: Probability = 0.02, Count = 2
q -> fieldNames: Probability = 0.01, Count = 1
q -> dt: Probability = 0.02, Count = 2
q -> WQuery: Probability = 0.03, Count = 3
q -> dt,: Probability = 0.01, Count = 1
q -> wt: Probability = 0.02, Count = 2
q -> PrimaryQuery: Probability = 0.02, Count = 2
q -> wt,: Probability = 0.01, Count = 1
q -> LPAREN: Probability = 0.01, Count = 1
q -> qp.parse: Probability = 0.01, Count = 1
q -> queries[i],: Probability = 0.01, Count = 1
q -> fields[i]: Probability = 0.01, Count = 1
this.defVal -> this.defVal: Probability = 1.00, Count = 1
toArray -> toArray: Probability = 0.88, Count = 7
toArray -> java.lang.Object[]: Probability = 0.12, Count = 1
base.toArray -> .toArray: Probability = 0.67, Count = 2
base.toArray -> super.toArray: Probability = 0.33, Count = 1
ToLexerString -> toLexerString: Probability = 1.00, Count = 1
s0 -> s0==null: Probability = 0.33, Count = 1
s0 -> s0: Probability = 0.67, Count = 2
DFASerializer -> DFASerializer: Probability = 1.00, Count = 3
serializer -> serializer: Probability = 1.00, Count = 3
LexerDFASerializer -> LexerDFASerializer: Probability = 1.00, Count = 1
serializer.ToString -> serializer.toString: Probability = 1.00, Count = 2
Fill -> fill: Probability = 1.00, Count = 7
Count, -> ,: Probability = 1.00, Count = 3
GetStreamingDistributionConfigResponse -> GetStreamingDistributionConfigResult: Probability = 1.00, Count = 1
GetStreamingDistributionConfig -> getStreamingDistributionConfig: Probability = 1.00, Count = 1
GetStreamingDistributionConfigRequest -> GetStreamingDistributionConfigRequest: Probability = 1.00, Count = 2
Invoke<GetStreamingDistributionConfigResponse> -> executeGetStreamingDistributionConfig: Probability = 1.00, Count = 1
UpdateDomainContactResponse -> UpdateDomainContactResult: Probability = 1.00, Count = 1
UpdateDomainContact -> updateDomainContact: Probability = 1.00, Count = 1
UpdateDomainContactRequest -> UpdateDomainContactRequest: Probability = 1.00, Count = 1
Invoke<UpdateDomainContactResponse> -> executeUpdateDomainContact: Probability = 1.00, Count = 1
java.util.ListIterator<E> -> ListIterator<E>: Probability = 0.73, Count = 11
java.util.ListIterator<E> -> @Override: Probability = 0.27, Count = 4
listIterator -> listIterator: Probability = 1.00, Count = 15
location -> location: Probability = 0.89, Count = 50
location -> index: Probability = 0.11, Count = 6
java.util.LinkedList.LinkIterator<E> -> LinkIterator<E>: Probability = 1.00, Count = 1
iObjectKind -> iObjectKind: Probability = 1.00, Count = 8
iObjectContext -> iObjectContext: Probability = 1.00, Count = 3
iObjectInstance1 -> iObjectInstance1: Probability = 1.00, Count = 3
iObjectInstance2 -> iObjectInstance2: Probability = 1.00, Count = 3
9 -> final: Probability = 0.42, Count = 5
9 -> 9: Probability = 0.50, Count = 6
9 -> 9+codec.length: Probability = 0.08, Count = 1
511L -> 511L: Probability = 1.00, Count = 2
needParens -> needParens: Probability = 1.00, Count = 3
t -> t: Probability = 0.86, Count = 89
t -> t.min: Probability = 0.01, Count = 1
t -> t!=null: Probability = 0.02, Count = 2
t -> usableBitSetSizes.length: Probability = 0.01, Count = 1
t -> i++: Probability = 0.01, Count = 1
t -> usableBitSetSizes[i]<=maxNumberOfBits: Probability = 0.01, Count = 1
t -> result=usableBitSetSizes[i]: Probability = 0.01, Count = 1
t -> t.setParent: Probability = 0.01, Count = 1
t -> getTokenErrorDisplay: Probability = 0.01, Count = 1
t -> "EOF": Probability = 0.01, Count = 1
t -> ArrayList<Tree>: Probability = 0.01, Count = 1
t -> ancestors.add: Probability = 0.01, Count = 1
t -> elset: Probability = 0.01, Count = 1
t -> parseHeaders: Probability = 0.01, Count = 1
NewTermQuery -> newTermQuery: Probability = 1.00, Count = 2
.ToString -> .toString: Probability = 1.00, Count = 8
GetStopWords -> getStopWords: Probability = 1.00, Count = 2
stopWords -> Set<String>: Probability = 0.10, Count = 1
stopWords -> stopWords: Probability = 0.70, Count = 7
stopWords -> stopWordsPerField.get: Probability = 0.10, Count = 1
stopWords -> stopWords.toArray: Probability = 0.10, Count = 1
stopWords.ToArray -> String[stopWords.size: Probability = 1.00, Count = 1
string[0] -> String[0]: Probability = 1.00, Count = 5
f -> f: Probability = 0.97, Count = 58
f -> instances.put: Probability = 0.02, Count = 1
f -> in.listAll: Probability = 0.02, Count = 1
f.ToString -> f: Probability = 1.00, Count = 2
MopenCreateGroupRequest -> MopenCreateGroupRequest: Probability = 1.00, Count = 1
"MoPen", -> "MoPen",: Probability = 1.00, Count = 10
"2018-02-11", -> "2018-02-11",: Probability = 1.00, Count = 10
"MopenCreateGroup", -> "MopenCreateGroup",: Probability = 1.00, Count = 1
"mopen", -> "mopen": Probability = 1.00, Count = 10
SmallObject -> SmallObject: Probability = 1.00, Count = 1
type, -> type,: Probability = 0.96, Count = 24
type, -> .idFor: Probability = 0.04, Count = 1
this.type -> this.type: Probability = 1.00, Count = 13
this.data -> this.data: Probability = 1.00, Count = 3
System.Char.IsUpper -> Character.isUpperCase: Probability = 1.00, Count = 1
StartNotebookInstanceResponse -> StartNotebookInstanceResult: Probability = 1.00, Count = 1
StartNotebookInstance -> startNotebookInstance: Probability = 1.00, Count = 1
StartNotebookInstanceRequest -> StartNotebookInstanceRequest: Probability = 1.00, Count = 1
Invoke<StartNotebookInstanceResponse> -> executeStartNotebookInstance: Probability = 1.00, Count = 1
PutUnicodeLE -> putUnicodeLE: Probability = 1.00, Count = 3
bytes -> bytes: Probability = 0.85, Count = 53
bytes -> byte[]: Probability = 0.03, Count = 2
bytes -> fld: Probability = 0.02, Count = 1
bytes -> this.bytes: Probability = 0.02, Count = 1
bytes -> perThread.bytesUsed: Probability = 0.02, Count = 1
bytes -> activeBytes: Probability = 0.02, Count = 1
bytes -> numPending++: Probability = 0.02, Count = 1
bytes -> field.binaryValue: Probability = 0.03, Count = 2
UTF16LE.GetBytes -> input.getBytes: Probability = 0.50, Count = 2
UTF16LE.GetBytes -> UTF16LE: Probability = 0.50, Count = 2
bytes.Length -> bytes.length: Probability = 0.77, Count = 33
bytes.Length -> copyUsingLengthPrefix: Probability = 0.02, Count = 1
bytes.Length -> 32768: Probability = 0.02, Count = 1
bytes.Length -> 32767: Probability = 0.02, Count = 1
bytes.Length -> currentBlock[upto++]: Probability = 0.07, Count = 3
bytes.Length -> bytes.bytes,: Probability = 0.05, Count = 2
bytes.Length -> codec.length: Probability = 0.02, Count = 1
bytes.Length -> out.length: Probability = 0.02, Count = 1
DeleteDocument -> deleteDocument: Probability = 1.00, Count = 2
docID -> docID: Probability = 0.21, Count = 8
docID -> doc.get: Probability = 0.03, Count = 1
docID -> DocMaker.ID_FIELD: Probability = 0.03, Count = 1
docID -> docId: Probability = 0.18, Count = 7
docID -> lastDocId: Probability = 0.08, Count = 3
docID -> "Doc: Probability = 0.03, Count = 1
docID -> in-order,: Probability = 0.03, Count = 1
docID -> lastDocID=": Probability = 0.03, Count = 1
docID -> block: Probability = 0.11, Count = 4
docID -> currentBlockCardinality: Probability = 0.05, Count = 2
docID -> buffer[currentBlockCardinality]: Probability = 0.03, Count = 1
docID -> denseBuffer: Probability = 0.05, Count = 2
docID -> numBits: Probability = 0.05, Count = 2
docID -> doc: Probability = 0.05, Count = 2
docID -> 0xFFFF: Probability = 0.05, Count = 2
GetSequentialSubReaders -> getSequentialSubReaders: Probability = 1.00, Count = 3
.DeleteDocument -> .deleteDocument: Probability = 1.00, Count = 1
ReaderBase -> readerBase: Probability = 1.00, Count = 1
IsRelevant -> isRelevant: Probability = 1.00, Count = 1
docName, -> docName,: Probability = 1.00, Count = 1
QualityQuery -> QualityQuery: Probability = 1.00, Count = 4
QRelJudgement -> QRelJudgement: Probability = 1.00, Count = 2
qrj -> qrj: Probability = 0.22, Count = 2
qrj -> judgements.get: Probability = 0.22, Count = 2
qrj -> query.getQueryID: Probability = 0.22, Count = 2
qrj -> qrj!=null: Probability = 0.22, Count = 2
qrj -> qrj.maxRecall: Probability = 0.11, Count = 1
qrj.IsRelevant -> qrj.isRelevant: Probability = 1.00, Count = 1
docName -> docName: Probability = 1.00, Count = 1
GetBeginB -> getBeginB: Probability = 1.00, Count = 1
beginB -> beginB: Probability = 1.00, Count = 6
ModifySpotFleetRequestResponse -> ModifySpotFleetRequestResult: Probability = 1.00, Count = 1
ModifySpotFleetRequest -> modifySpotFleetRequest: Probability = 1.00, Count = 1
ModifySpotFleetRequestRequest -> ModifySpotFleetRequestRequest: Probability = 1.00, Count = 1
Invoke<ModifySpotFleetRequestResponse> -> executeModifySpotFleetRequest: Probability = 1.00, Count = 1
UncalcedRecord -> UncalcedRecord: Probability = 1.00, Count = 2
_reserved -> _reserved: Probability = 1.00, Count = 4
PageOrder -> PageOrder: Probability = 1.00, Count = 1
ValueOf -> valueOf: Probability = 1.00, Count = 13
_table[value] -> _table[value]: Probability = 0.67, Count = 4
_table[value] -> _table.length: Probability = 0.17, Count = 1
_table[value] -> :_table[value]: Probability = 0.17, Count = 1
CellValue -> CellValue: Probability = 1.00, Count = 4
boolValue -> booleanValue: Probability = 1.00, Count = 2
TRUE -> TRUE: Probability = 1.00, Count = 2
FALSE -> FALSE: Probability = 1.00, Count = 2
buf.append -> buf.append: Probability = 0.73, Count = 11
buf.append -> status:: Probability = 0.07, Count = 1
buf.append -> capacity=": Probability = 0.07, Count = 1
buf.append -> position=": Probability = 0.07, Count = 1
buf.append -> limit=": Probability = 0.07, Count = 1
AddListener -> addListener: Probability = 1.00, Count = 2
IHSSFListener -> HSSFListener: Probability = 1.00, Count = 5
lsnr, -> lsnr,: Probability = 1.00, Count = 2
list -> list: Probability = 0.96, Count = 27
list -> handle: Probability = 0.04, Count = 1
list.Add -> list.add: Probability = 1.00, Count = 2
lsnr -> lsnr: Probability = 1.00, Count = 2
GetMeetingResponse -> GetMeetingResult: Probability = 1.00, Count = 1
GetMeeting -> getMeeting: Probability = 1.00, Count = 1
GetMeetingRequest -> GetMeetingRequest: Probability = 1.00, Count = 1
Invoke<GetMeetingResponse> -> executeGetMeeting: Probability = 1.00, Count = 1
StopTimer -> stopTimer: Probability = 1.00, Count = 1
AttachLoadBalancerTargetGroupsResponse -> AttachLoadBalancerTargetGroupsResult: Probability = 1.00, Count = 1
AttachLoadBalancerTargetGroups -> attachLoadBalancerTargetGroups: Probability = 1.00, Count = 1
AttachLoadBalancerTargetGroupsRequest -> AttachLoadBalancerTargetGroupsRequest: Probability = 1.00, Count = 1
Invoke<AttachLoadBalancerTargetGroupsResponse> -> executeAttachLoadBalancerTargetGroups: Probability = 1.00, Count = 1
GetQueryLoggingConfigResponse -> GetQueryLoggingConfigResult: Probability = 1.00, Count = 1
GetQueryLoggingConfig -> getQueryLoggingConfig: Probability = 1.00, Count = 1
GetQueryLoggingConfigRequest -> GetQueryLoggingConfigRequest: Probability = 1.00, Count = 1
Invoke<GetQueryLoggingConfigResponse> -> executeGetQueryLoggingConfig: Probability = 1.00, Count = 1
snapshot -> snapshot: Probability = 0.82, Count = 14
snapshot -> this.slice: Probability = 0.18, Count = 3
java.util.concurrent.CopyOnWriteArrayList.CowIterator<E> -> CowIterator<E>: Probability = 0.60, Count = 3
java.util.concurrent.CopyOnWriteArrayList.CowIterator<E> -> listIterator: Probability = 0.40, Count = 2
snapshot, -> snapshot,: Probability = 0.50, Count = 9
snapshot, -> 0,: Probability = 0.06, Count = 1
snapshot, -> snapshot.length: Probability = 0.06, Count = 1
snapshot, -> result: Probability = 0.22, Count = 4
snapshot, -> -1: Probability = 0.11, Count = 2
snapshot, -> slice.from: Probability = 0.06, Count = 1
CreateSnapshotResponse -> CreateSnapshotResult: Probability = 0.50, Count = 1
CreateSnapshotResponse -> Snapshot: Probability = 0.50, Count = 1
CreateSnapshot -> createSnapshot: Probability = 1.00, Count = 2
CreateSnapshotRequest -> CreateSnapshotRequest: Probability = 1.00, Count = 3
Invoke<CreateSnapshotResponse> -> executeCreateSnapshot: Probability = 1.00, Count = 2
HasObject -> hasObject: Probability = 1.00, Count = 1
AnyObjectId -> AnyObjectId: Probability = 1.00, Count = 37
objectId -> objectId: Probability = 0.83, Count = 5
objectId -> getObjectDatabase: Probability = 0.17, Count = 1
ObjectDatabase.Has -> .has: Probability = 1.00, Count = 1
CheckRange -> checkRange: Probability = 0.31, Count = 11
CheckRange -> row2,: Probability = 0.03, Count = 1
CheckRange -> getDx1: Probability = 0.03, Count = 1
CheckRange -> ,: Probability = 0.03, Count = 1
CheckRange -> 1023,: Probability = 0.06, Count = 2
CheckRange -> "dx1": Probability = 0.03, Count = 1
CheckRange -> getDx2: Probability = 0.03, Count = 1
CheckRange -> "dx2": Probability = 0.03, Count = 1
CheckRange -> getDy1: Probability = 0.03, Count = 1
CheckRange -> 255,: Probability = 0.06, Count = 2
CheckRange -> "dy1": Probability = 0.03, Count = 1
CheckRange -> getDy2: Probability = 0.03, Count = 1
CheckRange -> "dy2": Probability = 0.03, Count = 1
CheckRange -> getCol1: Probability = 0.03, Count = 1
CheckRange -> MAX_COL,: Probability = 0.06, Count = 2
CheckRange -> "col1": Probability = 0.03, Count = 1
CheckRange -> getCol2: Probability = 0.03, Count = 1
CheckRange -> "col2": Probability = 0.03, Count = 1
CheckRange -> getRow1: Probability = 0.03, Count = 1
CheckRange -> MAX_ROW,: Probability = 0.06, Count = 2
CheckRange -> "row1": Probability = 0.03, Count = 1
MergeSort -> mergeSort: Probability = 1.00, Count = 1
GetChildById -> <T: Probability = 0.50, Count = 1
GetChildById -> EscherRecord>: Probability = 0.50, Count = 1
recordId -> T: Probability = 0.18, Count = 3
recordId -> getChildById: Probability = 0.06, Count = 1
recordId -> recordId: Probability = 0.41, Count = 7
recordId -> isContainer: Probability = 0.06, Count = 1
recordId -> options,: Probability = 0.06, Count = 1
recordId -> EscherContainerRecord.DGG_CONTAINER: Probability = 0.06, Count = 1
recordId -> recordId<=: Probability = 0.06, Count = 1
recordId -> EscherContainerRecord.SOLVER_CONTAINER: Probability = 0.06, Count = 1
recordId -> EscherTextboxRecord.RECORD_ID: Probability = 0.06, Count = 1
EscherRecord -> childRecord: Probability = 0.07, Count = 2
EscherRecord -> childRecord.getRecordId: Probability = 0.03, Count = 1
EscherRecord -> EscherRecord: Probability = 0.60, Count = 18
EscherRecord -> escherRecord: Probability = 0.13, Count = 4
EscherRecord -> r.serialize: Probability = 0.13, Count = 4
EscherRecord -> .anyMatch: Probability = 0.03, Count = 1
iterator.MoveNext -> :: Probability = 1.00, Count = 11
field_1_xBasis -> field_1_xBasis: Probability = 1.00, Count = 2
field_2_yBasis -> field_2_yBasis: Probability = 1.00, Count = 2
field_3_heightBasis -> field_3_heightBasis: Probability = 1.00, Count = 2
field_4_scale -> field_4_scale: Probability = 1.00, Count = 2
field_5_indexToFontTable -> field_5_indexToFontTable: Probability = 1.00, Count = 2
ICollection<Ref> -> Collection<Ref>: Probability = 0.67, Count = 4
ICollection<Ref> -> final: Probability = 0.33, Count = 2
IList<Ref> -> List<Ref>: Probability = 0.90, Count = 9
IList<Ref> -> Collection<Ref>: Probability = 0.10, Count = 1
r.Sort -> Collections.sort: Probability = 1.00, Count = 1
INSTANCE -> INSTANCE: Probability = 1.00, Count = 3
ListProposalsResponse -> ListProposalsResult: Probability = 1.00, Count = 1
ListProposals -> listProposals: Probability = 1.00, Count = 1
ListProposalsRequest -> ListProposalsRequest: Probability = 1.00, Count = 1
Invoke<ListProposalsResponse> -> executeListProposals: Probability = 1.00, Count = 1
m_object -> object: Probability = 1.00, Count = 1
BundleInstanceRequest -> BundleInstanceRequest: Probability = 1.00, Count = 2
instanceId, -> instanceId,: Probability = 1.00, Count = 7
Storage -> Storage: Probability = 1.00, Count = 1
storage -> storage: Probability = 1.00, Count = 3
_instanceId -> setInstanceId: Probability = 0.79, Count = 11
_instanceId -> instanceId: Probability = 0.21, Count = 3
instanceId -> instanceId: Probability = 0.60, Count = 12
instanceId -> ): Probability = 0.40, Count = 8
_storage -> setStorage: Probability = 1.00, Count = 1
Back -> back: Probability = 1.00, Count = 2
trace -> trace: Probability = 1.00, Count = 2
Arrays.Fill -> Arrays.fill: Probability = 1.00, Count = 20
trace, -> trace,: Probability = 1.00, Count = 3
trace[1] -> trace[1]: Probability = 1.00, Count = 2
PatternSyntaxException -> PatternSyntaxException: Probability = 1.00, Count = 1
description, -> description,: Probability = 1.00, Count = 2
pattern, -> pattern,: Probability = 1.00, Count = 14
this.desc -> this.desc: Probability = 1.00, Count = 1
this.pattern -> this.pattern: Probability = 1.00, Count = 3
this.index -> this.index: Probability = 0.31, Count = 4
this.index -> index: Probability = 0.54, Count = 7
this.index -> dirIdx: Probability = 0.08, Count = 1
this.index -> toBlockIndex: Probability = 0.08, Count = 1
AlphaAnimation -> AlphaAnimation: Probability = 1.00, Count = 1
fromAlpha, -> from,: Probability = 1.00, Count = 1
toAlpha -> to: Probability = 0.50, Count = 2
toAlpha -> mStartAlpha: Probability = 0.25, Count = 1
toAlpha -> from: Probability = 0.25, Count = 1
mFromAlpha -> from: Probability = 1.00, Count = 1
fromAlpha -> mEndAlpha: Probability = 1.00, Count = 1
mToAlpha -> mCurrentAlpha: Probability = 1.00, Count = 1
taxonomyWriter -> TaxonomyWriter: Probability = 0.17, Count = 1
taxonomyWriter -> taxonomyWriter: Probability = 0.33, Count = 2
taxonomyWriter -> .getTaxonomyWriter: Probability = 0.17, Count = 1
taxonomyWriter -> taxoWriter: Probability = 0.33, Count = 2
"TaxonomyWriter -> "TaxonomyWriter: Probability = 1.00, Count = 1
currently -> currently: Probability = 1.00, Count = 2
open" -> open": Probability = 1.00, Count = 1
DeltaIndex -> DeltaIndex: Probability = 1.00, Count = 1
sourceBuffer -> sourceBuffer: Probability = 1.00, Count = 2
DeltaIndexScanner -> DeltaIndexScanner: Probability = 1.00, Count = 2
scan -> scan: Probability = 0.50, Count = 3
scan -> long[1: Probability = 0.17, Count = 1
scan -> countEntries: Probability = 0.17, Count = 1
scan -> copyEntries: Probability = 0.17, Count = 1
scan.table -> scan.table: Probability = 1.00, Count = 1
tableMask -> tableMask: Probability = 1.00, Count = 1
scan.tableMask -> scan.tableMask: Probability = 1.00, Count = 1
previousIndex -> previousIndex: Probability = 1.00, Count = 4
IQueryMaker -> QueryMaker: Probability = 0.80, Count = 4
IQueryMaker -> readTask: Probability = 0.20, Count = 1
GetQueryMaker -> getQueryMaker: Probability = 1.00, Count = 4
RunData.GetQueryMaker -> getRunData: Probability = 0.50, Count = 1
RunData.GetQueryMaker -> .getQueryMaker: Probability = 0.50, Count = 1
JapaneseTokenizerFactory -> JapaneseTokenizerFactory: Probability = 1.00, Count = 1
long? -> Long: Probability = 1.00, Count = 2
LongValue -> longValue: Probability = 1.00, Count = 1
DictionaryUtil.Get -> value: Probability = 0.31, Count = 5
DictionaryUtil.Get -> responseMap.get: Probability = 0.31, Count = 5
DictionaryUtil.Get -> value.length: Probability = 0.31, Count = 5
DictionaryUtil.Get -> ==: Probability = 0.06, Count = 1
ResponseDictionary, -> ==: Probability = 0.30, Count = 9
ResponseDictionary, -> value: Probability = 0.20, Count = 6
ResponseDictionary, -> ||: Probability = 0.17, Count = 5
ResponseDictionary, -> null: Probability = 0.17, Count = 5
ResponseDictionary, -> responseMap.get: Probability = 0.13, Count = 4
ResponseDictionary, -> Float.valueOf: Probability = 0.03, Count = 1
GetLibraryRequest -> GetLibraryRequest: Probability = 1.00, Count = 1
"GetLibrary", -> "GetLibrary",: Probability = 1.00, Count = 1
GetFontOfFormattingRun -> getFontOfFormattingRun: Probability = 1.00, Count = 1
UnicodeString.FormatRun -> FormatRun: Probability = 1.00, Count = 7
_string.GetFormatRun -> _string.getFormatRun: Probability = 1.00, Count = 3
r.FontIndex -> r.getFontIndex: Probability = 1.00, Count = 1
but -> but: Probability = 1.00, Count = 24
got -> got: Probability = 0.91, Count = 30
got -> ": Probability = 0.06, Count = 2
got -> +: Probability = 0.03, Count = 1
." -> .": Probability = 1.00, Count = 7
Encode -> encode: Probability = 1.00, Count = 15
valuesOffset -> valuesOffset: Probability = 1.00, Count = 14
blocksOffset -> blocksOffset: Probability = 1.00, Count = 8
WriteInt64 -> writeLong: Probability = 1.00, Count = 3
block, -> block,: Probability = 1.00, Count = 6
GetTerminologyResponse -> GetTerminologyResult: Probability = 1.00, Count = 1
GetTerminology -> getTerminology: Probability = 1.00, Count = 1
GetTerminologyRequest -> GetTerminologyRequest: Probability = 1.00, Count = 1
Invoke<GetTerminologyResponse> -> executeGetTerminology: Probability = 1.00, Count = 1
_character -> _character: Probability = 1.00, Count = 6
_fontIndex -> _fontIndex: Probability = 1.00, Count = 5
field_1_options -> field_1_options: Probability = 0.34, Count = 11
field_1_options -> _options: Probability = 0.28, Count = 9
field_1_options -> "ATTR: Probability = 0.06, Count = 2
field_1_options -> optiIf.isSet: Probability = 0.03, Count = 1
field_1_options -> "IF": Probability = 0.03, Count = 1
field_1_options -> optiChoose.isSet: Probability = 0.03, Count = 1
field_1_options -> "CHOOSE": Probability = 0.03, Count = 1
field_1_options -> optiSkip.isSet: Probability = 0.03, Count = 1
field_1_options -> optiSum.isSet: Probability = 0.03, Count = 1
field_1_options -> "SUM": Probability = 0.03, Count = 1
field_1_options -> baxcel.isSet: Probability = 0.03, Count = 1
field_1_options -> baxcel: Probability = 0.03, Count = 1
field_1_options -> space.isSet: Probability = 0.03, Count = 1
SearchFacesResponse -> SearchFacesResult: Probability = 1.00, Count = 1
SearchFaces -> searchFaces: Probability = 1.00, Count = 1
SearchFacesRequest -> SearchFacesRequest: Probability = 1.00, Count = 1
Invoke<SearchFacesResponse> -> executeSearchFaces: Probability = 1.00, Count = 1
GetPositionIncrementGap -> getPositionIncrementGap: Probability = 1.00, Count = 2
GetWrappedAnalyzer -> getWrappedAnalyzer: Probability = 1.00, Count = 2
.GetPositionIncrementGap -> .getPositionIncrementGap: Probability = 1.00, Count = 1
DescribeSchemaResponse -> DescribeSchemaResult: Probability = 1.00, Count = 1
DescribeSchema -> describeSchema: Probability = 1.00, Count = 1
DescribeSchemaRequest -> DescribeSchemaRequest: Probability = 1.00, Count = 1
Invoke<DescribeSchemaResponse> -> executeDescribeSchema: Probability = 1.00, Count = 1
PackIndex.MutableEntry -> MutableEntry: Probability = 0.75, Count = 3
PackIndex.MutableEntry -> cloneEntry: Probability = 0.25, Count = 1
EnsureId -> ensureId: Probability = 1.00, Count = 3
r.idBuffer.FromObjectId -> r.idBuffer.fromObjectId: Probability = 1.00, Count = 1
idBuffer -> idBuffer: Probability = 1.00, Count = 1
r.offset -> r.offset: Probability = 1.00, Count = 1
OperateEquipmentRequest -> OperateEquipmentRequest: Probability = 1.00, Count = 1
"OperateEquipment" -> "OperateEquipment": Probability = 1.00, Count = 1
add -> add: Probability = 0.66, Count = 23
add -> @Override: Probability = 0.20, Count = 7
add -> object: Probability = 0.11, Count = 4
add -> boolean: Probability = 0.03, Count = 1
c.add -> .add: Probability = 0.50, Count = 1
c.add -> c.add: Probability = 0.50, Count = 1
EscherSimpleProperty -> EscherSimpleProperty: Probability = 0.69, Count = 11
EscherSimpleProperty -> escherSimpleProperty: Probability = 0.06, Count = 1
EscherSimpleProperty -> escherSimpleProperty.propertyValue: Probability = 0.06, Count = 1
EscherSimpleProperty -> resetBackgroundImage: Probability = 0.06, Count = 1
EscherSimpleProperty -> getOptRecord: Probability = 0.12, Count = 2
propertyValue -> propertyValue: Probability = 1.00, Count = 6
Id -> getId: Probability = 0.23, Count = 5
Id -> deletePublicKeyRequest.getIfMatch: Probability = 0.09, Count = 2
Id -> "If-Match",: Probability = 0.05, Count = 1
Id -> "/2019-03-26/public-key/: Probability = 0.05, Count = 1
Id -> Id: Probability = 0.09, Count = 2
Id -> com.amazonaws.transform.PathMarshallers.NON_GREEDY.marshall: Probability = 0.09, Count = 2
Id -> uriResourcePath,: Probability = 0.09, Count = 2
Id -> "Id",: Probability = 0.09, Count = 2
Id -> deletePublicKeyRequest.getId: Probability = 0.05, Count = 1
Id -> getChangeRequest,: Probability = 0.05, Count = 1
Id -> "AmazonRoute53": Probability = 0.05, Count = 1
Id -> "/2013-04-01/change/: Probability = 0.05, Count = 1
Id -> getChangeRequest.getId: Probability = 0.05, Count = 1
asFloatBuffer -> asFloatBuffer: Probability = 1.00, Count = 1
java.nio.FloatToByteBufferAdapter.asFloatBuffer -> FloatToByteBufferAdapter.asFloatBuffer: Probability = 1.00, Count = 1
RemoveThumbnail -> removeThumbnail: Probability = 1.00, Count = 1
PropertyIDMap.PID_THUMBNAIL -> PropertyIDMap.PID_THUMBNAIL: Probability = 1.00, Count = 1
CompareIgnoreCase -> compareIgnoreCase: Probability = 1.00, Count = 1
a.Length -> a.length: Probability = 1.00, Count = 14
ToLowerCase -> toLowerCase: Probability = 0.78, Count = 7
ToLowerCase -> a.charAt: Probability = 0.22, Count = 2
a[i] -> i: Probability = 0.44, Count = 7
a[i] -> a[i]: Probability = 0.56, Count = 9
b[i] -> b.charAt: Probability = 0.60, Count = 3
b[i] -> b[i]: Probability = 0.40, Count = 2
in1.ReadUShort -> ViewDefinitionRecord: Probability = 0.01, Count = 1
in1.ReadUShort -> rwFirst: Probability = 0.01, Count = 1
in1.ReadUShort -> in.readUShort: Probability = 0.73, Count = 71
in1.ReadUShort -> rwLast: Probability = 0.01, Count = 1
in1.ReadUShort -> colFirst: Probability = 0.01, Count = 1
in1.ReadUShort -> colLast: Probability = 0.01, Count = 1
in1.ReadUShort -> rwFirstHead: Probability = 0.01, Count = 1
in1.ReadUShort -> rwFirstData: Probability = 0.01, Count = 1
in1.ReadUShort -> colFirstData: Probability = 0.01, Count = 1
in1.ReadUShort -> iCache: Probability = 0.01, Count = 1
in1.ReadUShort -> sxaxis4Data: Probability = 0.01, Count = 1
in1.ReadUShort -> ipos4Data: Probability = 0.01, Count = 1
in1.ReadUShort -> cDim: Probability = 0.01, Count = 1
in1.ReadUShort -> cDimRw: Probability = 0.01, Count = 1
in1.ReadUShort -> cDimCol: Probability = 0.01, Count = 1
in1.ReadUShort -> cDimPg: Probability = 0.01, Count = 1
in1.ReadUShort -> cDimData: Probability = 0.01, Count = 1
in1.ReadUShort -> cRw: Probability = 0.01, Count = 1
in1.ReadUShort -> cCol: Probability = 0.01, Count = 1
in1.ReadUShort -> itblAutoFmt: Probability = 0.01, Count = 1
in1.ReadUShort -> cchData: Probability = 0.02, Count = 2
in1.ReadUShort -> dataField: Probability = 0.01, Count = 1
in1.ReadUShort -> iiftab: Probability = 0.01, Count = 1
in1.ReadUShort -> isxvd: Probability = 0.01, Count = 1
in1.ReadUShort -> isxvi: Probability = 0.01, Count = 1
in1.ReadUShort -> ifmt: Probability = 0.01, Count = 1
cchName -> cchName: Probability = 1.00, Count = 6
StringUtil.ReadUnicodeString -> StringUtil.readUnicodeString: Probability = 1.00, Count = 5
in1, -> in,: Probability = 1.00, Count = 15
FormatRecord -> FormatRecord: Probability = 1.00, Count = 6
field_1_index_code -> field_1_index_code: Probability = 1.00, Count = 2
field_3_hasMultibyte -> field_3_hasMultibyte: Probability = 1.00, Count = 6
field_4_formatstring -> field_4_formatstring: Probability = 0.60, Count = 3
field_4_formatstring -> readStringCommon: Probability = 0.40, Count = 2
field_3_unicode_len -> in,: Probability = 0.50, Count = 2
field_3_unicode_len -> field_3_unicode_len,: Probability = 0.50, Count = 2
DescribeBrokerResponse -> DescribeBrokerResult: Probability = 1.00, Count = 1
DescribeBroker -> describeBroker: Probability = 1.00, Count = 1
DescribeBrokerRequest -> DescribeBrokerRequest: Probability = 1.00, Count = 1
Invoke<DescribeBrokerResponse> -> executeDescribeBroker: Probability = 1.00, Count = 1
_precedenceStack.Add -> _precedenceStack.push: Probability = 1.00, Count = 2
ATNSimulator -> ATNSimulator: Probability = 1.00, Count = 2
interpreter -> interpreter: Probability = 0.67, Count = 2
interpreter -> interpreter.reset: Probability = 0.33, Count = 1
~flag.mask -> ~flag.mask: Probability = 0.67, Count = 2
~flag.mask -> ~set.mask: Probability = 0.33, Count = 1
content, -> passage.getEndOffset: Probability = 0.40, Count = 2
content, -> content,: Probability = 0.60, Count = 3
Append -> append: Probability = 0.91, Count = 30
Append -> RevBlob: Probability = 0.03, Count = 1
Append -> c: Probability = 0.06, Count = 2
sb, -> sb,: Probability = 1.00, Count = 8
passage.endOffset -> passage.getEndOffset: Probability = 1.00, Count = 2
DrillSidewaysResult -> DrillSidewaysResult: Probability = 1.00, Count = 1
Facets -> Facets: Probability = 1.00, Count = 1
facets, -> facets,: Probability = 1.00, Count = 1
TopDocs -> TopDocs: Probability = 0.67, Count = 2
TopDocs -> TopFieldDocs: Probability = 0.33, Count = 1
hits -> hits: Probability = 1.00, Count = 2
this.Facets -> this.facets: Probability = 1.00, Count = 1
facets -> facets: Probability = 1.00, Count = 1
this.Hits -> this.hits: Probability = 1.00, Count = 1
ListTrafficPolicyInstancesByPolicyResponse -> ListTrafficPolicyInstancesByPolicyResult: Probability = 1.00, Count = 1
ListTrafficPolicyInstancesByPolicy -> listTrafficPolicyInstancesByPolicy: Probability = 1.00, Count = 1
ListTrafficPolicyInstancesByPolicyRequest -> ListTrafficPolicyInstancesByPolicyRequest: Probability = 1.00, Count = 1
Invoke<ListTrafficPolicyInstancesByPolicyResponse> -> executeListTrafficPolicyInstancesByPolicy: Probability = 1.00, Count = 1
ComplexPhraseQuery -> ComplexPhraseQuery: Probability = 1.00, Count = 1
phrasedQueryStringContents,int -> phrasedQueryStringContents,int: Probability = 0.50, Count = 1
phrasedQueryStringContents,int -> slopFactor,: Probability = 0.50, Count = 1
inOrder -> inOrder: Probability = 1.00, Count = 2
this.field -> this.field: Probability = 0.80, Count = 12
this.field -> Objects.requireNonNull: Probability = 0.20, Count = 3
this.phrasedQueryStringContents -> this.phrasedQueryStringContents: Probability = 1.00, Count = 1
phrasedQueryStringContents -> phrasedQueryStringContents: Probability = 1.00, Count = 1
slopFactor -> this.slopFactor: Probability = 1.00, Count = 1
this.inOrder -> slopFactor: Probability = 0.50, Count = 1
this.inOrder -> this.inOrder: Probability = 0.50, Count = 1
Name -> getName: Probability = 0.22, Count = 4
Name -> (: Probability = 0.06, Count = 1
Name -> name: Probability = 0.39, Count = 7
Name -> ): Probability = 0.17, Count = 3
Name -> Name: Probability = 0.17, Count = 3
AreaRecord -> AreaRecord: Probability = 1.00, Count = 1
rec.field_1_formatFlags -> copy: Probability = 1.00, Count = 2
simpleTextTerms -> +: Probability = 0.60, Count = 3
simpleTextTerms -> fst.ramBytesUsed: Probability = 0.20, Count = 1
simpleTextTerms -> scratch.bytes: Probability = 0.20, Count = 1
_termsCache.Values.Sum -> fst!=null: Probability = 1.00, Count = 1
=> -> RamUsageEstimator.sizeOf: Probability = 1.00, Count = 4
DeleteConfigurationTemplateRequest -> DeleteConfigurationTemplateRequest: Probability = 1.00, Count = 1
applicationName, -> applicationName,: Probability = 1.00, Count = 9
templateName -> templateName: Probability = 1.00, Count = 6
_applicationName -> setApplicationName: Probability = 0.50, Count = 13
_applicationName -> (: Probability = 0.50, Count = 13
applicationName -> applicationName: Probability = 0.57, Count = 17
applicationName -> ): Probability = 0.43, Count = 13
_templateName -> setTemplateName: Probability = 1.00, Count = 3
ttype -> ttype: Probability = 0.64, Count = 7
ttype -> HashSet<Integer>: Probability = 0.18, Count = 2
ttype -> getTokenTypeMap: Probability = 0.09, Count = 1
ttype -> ttype!=null: Probability = 0.09, Count = 1
DescribeIamInstanceProfileAssociationsResponse -> DescribeIamInstanceProfileAssociationsResult: Probability = 1.00, Count = 1
DescribeIamInstanceProfileAssociations -> describeIamInstanceProfileAssociations: Probability = 1.00, Count = 1
DescribeIamInstanceProfileAssociationsRequest -> DescribeIamInstanceProfileAssociationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeIamInstanceProfileAssociationsResponse> -> executeDescribeIamInstanceProfileAssociations: Probability = 1.00, Count = 1
veText1 -> veText1: Probability = 0.90, Count = 9
veText1 -> textArg,: Probability = 0.10, Count = 1
OperandResolver.CoerceValueToString -> OperandResolver.coerceValueToString: Probability = 1.00, Count = 9
text.Length -> text.length: Probability = 1.00, Count = 4
AttachVpnGatewayResponse -> AttachVpnGatewayResult: Probability = 1.00, Count = 1
AttachVpnGateway -> attachVpnGateway: Probability = 1.00, Count = 1
AttachVpnGatewayRequest -> AttachVpnGatewayRequest: Probability = 1.00, Count = 2
Invoke<AttachVpnGatewayResponse> -> executeAttachVpnGateway: Probability = 1.00, Count = 1
compareTo -> compareTo: Probability = 1.00, Count = 8
compareRemaining -> compareRemaining: Probability = 1.00, Count = 14
thisPos -> thisPos: Probability = 1.00, Count = 14
otherPos -> otherPos: Probability = 1.00, Count = 14
thisFloat -> thisFloat,: Probability = 0.17, Count = 1
thisFloat -> thisFloat: Probability = 0.83, Count = 5
otherFloat -> otherFloat: Probability = 1.00, Count = 6
thisPos++ -> thisPos++: Probability = 1.00, Count = 7
otherPos++ -> otherPos++: Probability = 1.00, Count = 7
compareRemaining-- -> compareRemaining--: Probability = 1.00, Count = 7
java.util.regex.Matcher -> Matcher: Probability = 1.00, Count = 8
useTransparentBounds -> useTransparentBounds: Probability = 1.00, Count = 1
transparentBounds -> transparentBounds: Probability = 1.00, Count = 1
useTransparentBoundsImpl -> useTransparentBoundsImpl: Probability = 1.00, Count = 1
address, -> address,: Probability = 1.00, Count = 5
this.lastEntryReturned -> lastEntryReturned: Probability = 1.00, Count = 4
this._enclosing.remove -> Hashtable.this.remove: Probability = 0.50, Count = 2
this._enclosing.remove -> HashMap.this.remove: Probability = 0.50, Count = 2
this.lastEntryReturned.key -> lastEntryReturned.key: Probability = 1.00, Count = 2
']' -> ']': Probability = 1.00, Count = 14
'!' -> '!': Probability = 1.00, Count = 4
Arrays.ToString -> slice.toString: Probability = 0.18, Count = 2
Arrays.ToString -> Arrays.toString: Probability = 0.82, Count = 9
Subs -> +":"+: Probability = 0.33, Count = 2
Subs -> postingsEnum: Probability = 0.33, Count = 2
Subs -> getSubs: Probability = 0.33, Count = 2
CreateVpnConnectionRouteResponse -> CreateVpnConnectionRouteResult: Probability = 1.00, Count = 1
CreateVpnConnectionRoute -> createVpnConnectionRoute: Probability = 1.00, Count = 1
CreateVpnConnectionRouteRequest -> CreateVpnConnectionRouteRequest: Probability = 1.00, Count = 1
Invoke<CreateVpnConnectionRouteResponse> -> executeCreateVpnConnectionRoute: Probability = 1.00, Count = 1
this._next -> next: Probability = 1.00, Count = 2
DeleteDBSecurityGroupRequest -> DeleteDBSecurityGroupRequest: Probability = 1.00, Count = 2
dbSecurityGroupName -> dBSecurityGroupName: Probability = 0.64, Count = 7
dbSecurityGroupName -> ): Probability = 0.36, Count = 4
_dbSecurityGroupName -> setDBSecurityGroupName: Probability = 1.00, Count = 4
Compare -> compare: Probability = 1.00, Count = 3
name1 -> name1: Probability = 1.00, Count = 3
name2 -> name2: Probability = 0.67, Count = 4
name2 -> name1.equals: Probability = 0.17, Count = 1
name2 -> c.getID: Probability = 0.17, Count = 1
StringComparison.CurrentCulture -> result: Probability = 1.00, Count = 5
"__", -> "__": Probability = 0.57, Count = 4
"__", -> result: Probability = 0.43, Count = 3
java.nio.DoubleBuffer -> DoubleBuffer: Probability = 1.00, Count = 34
double[] -> double[]: Probability = 1.00, Count = 40
doubleCount -> doubleCount: Probability = 1.00, Count = 23
java.util.Arrays.checkOffsetAndCount -> Arrays.checkOffsetAndCount: Probability = 1.00, Count = 25
dst.Length, -> dst.length,: Probability = 1.00, Count = 8
dstOffset -> dstOffset: Probability = 1.00, Count = 14
dst[i] -> dst[i]: Probability = 1.00, Count = 7
prefix, -> prefix,: Probability = 0.57, Count = 8
prefix, -> prefix.length,prefix.bytes,: Probability = 0.14, Count = 2
prefix, -> prefix.offset,: Probability = 0.14, Count = 2
prefix, -> prefix.offset: Probability = 0.14, Count = 2
prefix -> prefix: Probability = 1.00, Count = 26
NO_OUTPUT -> NO_OUTPUT: Probability = 0.92, Count = 12
NO_OUTPUT -> else: Probability = 0.08, Count = 1
prefix.Length -> prefix.length: Probability = 0.47, Count = 9
prefix.Length -> prefix.chars,: Probability = 0.05, Count = 1
prefix.Length -> prefix.offset,: Probability = 0.11, Count = 2
prefix.Length -> result.chars,: Probability = 0.11, Count = 2
prefix.Length -> output.offset,: Probability = 0.11, Count = 2
prefix.Length -> prefix.bytes,: Probability = 0.05, Count = 1
prefix.Length -> result.bytes,: Probability = 0.11, Count = 2
result.Length -> result.length: Probability = 1.00, Count = 5
UpdateProfileResponse -> UpdateProfileResult: Probability = 1.00, Count = 1
UpdateProfile -> updateProfile: Probability = 1.00, Count = 1
UpdateProfileRequest -> UpdateProfileRequest: Probability = 1.00, Count = 1
Invoke<UpdateProfileResponse> -> executeUpdateProfile: Probability = 1.00, Count = 1
LikeThisQueryBuilder -> LikeThisQueryBuilder: Probability = 1.00, Count = 1
analyzer, -> analyzer,: Probability = 0.80, Count = 4
analyzer, -> this.likeText: Probability = 0.20, Count = 1
defaultFieldNames -> defaultFieldNames: Probability = 1.00, Count = 2
this.defaultFieldNames -> this.defaultFieldNames: Probability = 1.00, Count = 1
l -> l: Probability = 1.00, Count = 11
System.Convert.ToString -> Long.toString: Probability = 0.33, Count = 2
System.Convert.ToString -> Double.toString: Probability = 0.33, Count = 2
System.Convert.ToString -> Float.toString: Probability = 0.17, Count = 1
System.Convert.ToString -> Integer.toString: Probability = 0.17, Count = 1
Field -> Field: Probability = 0.55, Count = 6
Field -> field: Probability = 0.45, Count = 5
FieldType -> IndexableFieldType: Probability = 0.23, Count = 3
FieldType -> DocState: Probability = 0.08, Count = 1
FieldType -> reuseFields,: Probability = 0.08, Count = 1
FieldType -> FieldType: Probability = 0.23, Count = 3
FieldType -> ft,: Probability = 0.08, Count = 1
FieldType -> this.stored: Probability = 0.08, Count = 1
FieldType -> ref.stored: Probability = 0.08, Count = 1
FieldType -> this.tokenized: Probability = 0.08, Count = 1
FieldType -> ref.tokenized: Probability = 0.08, Count = 1
"type -> "type: Probability = 1.00, Count = 4
SrndQuery -> SrndQuery: Probability = 0.41, Count = 20
SrndQuery -> throws: Probability = 0.20, Count = 10
SrndQuery -> ParseException: Probability = 0.20, Count = 10
SrndQuery -> final: Probability = 0.18, Count = 9
Parse2 -> parse2: Probability = 1.00, Count = 1
ReInit -> ReInit: Probability = 1.00, Count = 13
StringReader -> StringReader: Probability = 1.00, Count = 2
TopSrndQuery -> TopSrndQuery: Probability = 1.00, Count = 2
TokenMgrError -> TokenMgrError: Probability = 1.00, Count = 7
ParseException -> ParseException: Probability = 1.00, Count = 29
tme.Message -> tme.getMessage: Probability = 1.00, Count = 1
DescribeConfigurationResponse -> DescribeConfigurationResult: Probability = 1.00, Count = 1
DescribeConfiguration -> describeConfiguration: Probability = 1.00, Count = 1
DescribeConfigurationRequest -> DescribeConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DescribeConfigurationResponse> -> executeDescribeConfiguration: Probability = 1.00, Count = 1
GetCharErrorDisplay -> getCharErrorDisplay: Probability = 1.00, Count = 1
GetErrorDisplay -> getErrorDisplay: Probability = 0.75, Count = 6
GetErrorDisplay -> c: Probability = 0.25, Count = 2
"'" -> "'"+s+"'": Probability = 0.11, Count = 2
"'" -> "'": Probability = 0.84, Count = 16
"'" -> '"+: Probability = 0.05, Count = 1
DescribeHumanTaskUiResponse -> DescribeHumanTaskUiResult: Probability = 1.00, Count = 1
DescribeHumanTaskUi -> describeHumanTaskUi: Probability = 1.00, Count = 1
DescribeHumanTaskUiRequest -> DescribeHumanTaskUiRequest: Probability = 1.00, Count = 1
Invoke<DescribeHumanTaskUiResponse> -> executeDescribeHumanTaskUi: Probability = 1.00, Count = 1
Run -> run: Probability = 1.00, Count = 7
task.RunAndMaybeStats -> task.runAndMaybeStats: Probability = 1.00, Count = 2
task -> letChildReport: Probability = 0.12, Count = 1
task -> task: Probability = 0.62, Count = 5
task -> tasks.add: Probability = 0.12, Count = 1
task -> task.setDepth: Probability = 0.12, Count = 1
DescribeImagePermissionsResponse -> DescribeImagePermissionsResult: Probability = 1.00, Count = 1
DescribeImagePermissions -> describeImagePermissions: Probability = 1.00, Count = 1
DescribeImagePermissionsRequest -> DescribeImagePermissionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeImagePermissionsResponse> -> executeDescribeImagePermissions: Probability = 1.00, Count = 1
RecycleByteBlocks -> recycleByteBlocks: Probability = 0.44, Count = 4
RecycleByteBlocks -> byte[][]: Probability = 0.44, Count = 4
RecycleByteBlocks -> List<byte[]>: Probability = 0.11, Count = 1
numBlocks -> numBlocks: Probability = 1.00, Count = 3
maxBufferedBlocks -> maxBufferedBlocks: Probability = 1.00, Count = 2
freeBlocks -> freeBlocks: Probability = 1.00, Count = 8
freeByteBlocks -> freeByteBlocks: Probability = 1.00, Count = 2
blocks[i] -> blocks[i]: Probability = 1.00, Count = 4
bytesUsed.AddAndGet -> bytesUsed.addAndGet: Probability = 0.92, Count = 11
bytesUsed.AddAndGet -> *: Probability = 0.08, Count = 1
m_blockSize -> blockSize: Probability = 1.00, Count = 4
SpatialContext -> SpatialContext: Probability = 1.00, Count = 5
maxLevels -> maxLevels: Probability = 0.59, Count = 10
maxLevels -> ctx.getWorldBounds: Probability = 0.06, Count = 1
maxLevels -> bounds.getMinX: Probability = 0.12, Count = 2
maxLevels -> "Geohash: Probability = 0.06, Count = 1
maxLevels -> lat-lon: Probability = 0.06, Count = 1
maxLevels -> world: Probability = 0.06, Count = 1
maxLevels -> getMaxLevelsPossible: Probability = 0.06, Count = 1
IRectangle -> Rectangle: Probability = 1.00, Count = 6
bounds -> bounds: Probability = 1.00, Count = 4
only -> only: Probability = 1.00, Count = 8
Maxp -> bounds.: Probability = 0.14, Count = 1
Maxp -> Got: Probability = 0.14, Count = 1
Maxp -> "+bounds: Probability = 0.14, Count = 1
Maxp -> MAXP: Probability = 0.29, Count = 2
Maxp -> "maxLevels: Probability = 0.14, Count = 1
Maxp -> [1-"+MAXP+"]: Probability = 0.14, Count = 1
RemoveName -> removeName: Probability = 0.62, Count = 8
RemoveName -> Name: Probability = 0.23, Count = 3
RemoveName -> name: Probability = 0.15, Count = 2
namenum -> namenum: Probability = 0.22, Count = 2
namenum -> nameIndex: Probability = 0.44, Count = 4
namenum -> linkTable.getNumNames: Probability = 0.11, Count = 1
namenum -> NameRecord.sid: Probability = 0.11, Count = 1
namenum -> linkTable.removeName: Probability = 0.11, Count = 1
_definedNames.RemoveAt -> _definedNames.remove: Probability = 1.00, Count = 1
CancelSpotFleetRequestsResponse -> CancelSpotFleetRequestsResult: Probability = 1.00, Count = 1
CancelSpotFleetRequests -> cancelSpotFleetRequests: Probability = 1.00, Count = 1
CancelSpotFleetRequestsRequest -> CancelSpotFleetRequestsRequest: Probability = 1.00, Count = 1
Invoke<CancelSpotFleetRequestsResponse> -> executeCancelSpotFleetRequests: Probability = 1.00, Count = 1
GetIndustryInfoLineageListRequest -> GetIndustryInfoLineageListRequest: Probability = 1.00, Count = 1
"GetIndustryInfoLineageList" -> "GetIndustryInfoLineageList": Probability = 1.00, Count = 1
Grow -> grow: Probability = 0.69, Count = 58
Grow -> byte[]: Probability = 0.11, Count = 9
Grow -> long[]: Probability = 0.07, Count = 6
Grow -> char[]: Probability = 0.07, Count = 6
Grow -> int[]: Probability = 0.04, Count = 3
Grow -> double[]: Probability = 0.02, Count = 2
minSize -> minSize: Probability = 0.38, Count = 18
minSize -> integer: Probability = 0.26, Count = 12
minSize -> overflow?": Probability = 0.30, Count = 14
minSize -> <T>: Probability = 0.02, Count = 1
minSize -> T[]: Probability = 0.04, Count = 2
"size -> minSize: Probability = 0.42, Count = 14
"size -> "size: Probability = 0.58, Count = 19
likely -> minSize: Probability = 1.00, Count = 14
overflow?" -> :: Probability = 0.42, Count = 14
overflow?" -> likely: Probability = 0.45, Count = 15
overflow?" -> integer: Probability = 0.09, Count = 3
overflow?" -> overflow?": Probability = 0.03, Count = 1
minSize, -> minSize: Probability = 0.54, Count = 14
minSize, -> growExact: Probability = 0.46, Count = 12
newArray, -> oversize: Probability = 0.45, Count = 14
newArray, -> minSize,: Probability = 0.48, Count = 15
newArray, -> growExact: Probability = 0.06, Count = 2
newArray -> Double.BYTES: Probability = 0.18, Count = 2
newArray -> Byte.BYTES: Probability = 0.18, Count = 2
newArray -> <: Probability = 0.09, Count = 1
newArray -> t.max: Probability = 0.09, Count = 1
newArray -> Long.BYTES: Probability = 0.27, Count = 3
newArray -> Character.BYTES: Probability = 0.18, Count = 2
SetResult -> setResult: Probability = 0.30, Count = 8
SetResult -> Result.LOCK_FAILURE: Probability = 0.07, Count = 2
SetResult -> NOT_ATTEMPTED:setResult: Probability = 0.04, Count = 1
SetResult -> Result.NOT_ATTEMPTED: Probability = 0.04, Count = 1
SetResult -> LOCK_FAILURE:case: Probability = 0.04, Count = 1
SetResult -> IO_FAILURE:setResult: Probability = 0.04, Count = 1
SetResult -> NO_CHANGE:case: Probability = 0.04, Count = 1
SetResult -> NEW:case: Probability = 0.04, Count = 1
SetResult -> FORCED:case: Probability = 0.04, Count = 1
SetResult -> FAST_FORWARD:setResult: Probability = 0.04, Count = 1
SetResult -> Result.OK: Probability = 0.04, Count = 1
SetResult -> REJECTED:setResult: Probability = 0.04, Count = 1
SetResult -> Result.REJECTED_NONFASTFORWARD: Probability = 0.04, Count = 1
SetResult -> REJECTED_CURRENT_BRANCH:setResult: Probability = 0.04, Count = 1
SetResult -> Result.REJECTED_CURRENT_BRANCH: Probability = 0.04, Count = 1
SetResult -> REJECTED_MISSING_OBJECT:setResult: Probability = 0.04, Count = 1
SetResult -> Result.REJECTED_MISSING_OBJECT: Probability = 0.04, Count = 1
SetResult -> REJECTED_OTHER_REASON:setResult: Probability = 0.04, Count = 1
SetResult -> Result.REJECTED_OTHER_REASON: Probability = 0.04, Count = 1
this._enclosing.result -> result: Probability = 1.00, Count = 3
base.SetResult -> super.setResult: Probability = 1.00, Count = 3
63 -> 63: Probability = 1.00, Count = 10
byte3 -> byte3: Probability = 1.00, Count = 22
byte4 -> byte4: Probability = 1.00, Count = 16
order -> final: Probability = 0.36, Count = 5
order -> order: Probability = 0.64, Count = 9
DeleteEventBusResponse -> DeleteEventBusResult: Probability = 1.00, Count = 1
DeleteEventBus -> deleteEventBus: Probability = 1.00, Count = 1
DeleteEventBusRequest -> DeleteEventBusRequest: Probability = 1.00, Count = 1
Invoke<DeleteEventBusResponse> -> executeDeleteEventBus: Probability = 1.00, Count = 1
wrap -> wrap: Probability = 1.00, Count = 22
array_1, -> array,: Probability = 1.00, Count = 12
array_1.Length, -> array.length,: Probability = 1.00, Count = 6
java.nio.ReadWriteHeapByteBuffer -> ReadWriteHeapByteBuffer: Probability = 0.88, Count = 7
java.nio.ReadWriteHeapByteBuffer -> ReadWriteDirectByteBuffer: Probability = 0.12, Count = 1
array_1 -> array: Probability = 1.00, Count = 14
ApiVersion -> apiVersion: Probability = 1.00, Count = 1
private -> return: Probability = 0.60, Count = 3
private -> this.error: Probability = 0.20, Count = 1
private -> this.displayName: Probability = 0.20, Count = 1
SearchResponse -> SearchResult: Probability = 1.00, Count = 1
Search -> search: Probability = 1.00, Count = 1
SearchRequest -> SearchRequest: Probability = 1.00, Count = 1
Invoke<SearchResponse> -> executeSearch: Probability = 1.00, Count = 1
SetRemote -> setRemote: Probability = 1.00, Count = 1
remote -> remote: Probability = 1.00, Count = 4
this.remote -> this.remote: Probability = 1.00, Count = 1
AcceptReservedInstancesExchangeQuoteResponse -> AcceptReservedInstancesExchangeQuoteResult: Probability = 1.00, Count = 1
AcceptReservedInstancesExchangeQuote -> acceptReservedInstancesExchangeQuote: Probability = 1.00, Count = 1
AcceptReservedInstancesExchangeQuoteRequest -> AcceptReservedInstancesExchangeQuoteRequest: Probability = 1.00, Count = 1
Invoke<AcceptReservedInstancesExchangeQuoteResponse> -> executeAcceptReservedInstancesExchangeQuote: Probability = 1.00, Count = 1
GetAuthorizationTokenResponse -> GetAuthorizationTokenResult: Probability = 1.00, Count = 1
GetAuthorizationToken -> getAuthorizationToken: Probability = 1.00, Count = 1
GetAuthorizationTokenRequest -> GetAuthorizationTokenRequest: Probability = 1.00, Count = 1
Invoke<GetAuthorizationTokenResponse> -> executeGetAuthorizationToken: Probability = 1.00, Count = 1
InitCommand -> InitCommand: Probability = 1.00, Count = 3
Init -> init: Probability = 1.00, Count = 12
ICollection<RevFilter> -> Collection<RevFilter>: Probability = 1.00, Count = 2
list.Count -> list.size: Probability = 1.00, Count = 4
.atLeastTwoFiltersNeeded -> .atLeastTwoFiltersNeeded: Probability = 1.00, Count = 8
RevFilter[] -> final: Probability = 0.44, Count = 8
RevFilter[] -> RevFilter[]: Probability = 0.44, Count = 8
RevFilter[] -> TreeFilter[]: Probability = 0.11, Count = 2
subfilters -> subfilters: Probability = 0.72, Count = 21
subfilters -> RevFilter[list.size: Probability = 0.07, Count = 2
subfilters -> list.toArray: Probability = 0.14, Count = 4
subfilters -> TreeFilter[list.size: Probability = 0.07, Count = 2
Sharpen.Collections.ToArray -> ]: Probability = 1.00, Count = 6
subfilters.Length -> subfilters.length: Probability = 1.00, Count = 7
subfilters[1] -> subfilters[0],: Probability = 0.50, Count = 4
subfilters[1] -> subfilters[1]: Probability = 0.50, Count = 4
AndRevFilter.List -> List: Probability = 1.00, Count = 4
SingletonPredictionContext -> SingletonPredictionContext: Probability = 1.00, Count = 2
rootIsWildcard -> rootIsWildcard: Probability = 1.00, Count = 2
EMPTY -> EMPTY: Probability = 0.78, Count = 7
EMPTY -> b.returnState,: Probability = 0.11, Count = 1
EMPTY -> b.parent,: Probability = 0.11, Count = 1
payloads -> payloads: Probability = 0.91, Count = 10
payloads -> payloads!=null: Probability = 0.09, Count = 1
EMPTY_RETURN_STATE -> EMPTY_RETURN_STATE: Probability = 1.00, Count = 4
PredictionContext[] -> PredictionContext[]: Probability = 1.00, Count = 3
parents -> parents: Probability = 1.00, Count = 4
joined -> joined: Probability = 0.80, Count = 4
joined -> a.parent,: Probability = 0.20, Count = 1
=new -> =new: Probability = 1.00, Count = 3
ArrayPredictionContext -> ArrayPredictionContext: Probability = 1.00, Count = 6
parents, -> parents,: Probability = 1.00, Count = 5
ListTerminologiesResponse -> ListTerminologiesResult: Probability = 1.00, Count = 1
ListTerminologies -> listTerminologies: Probability = 1.00, Count = 1
ListTerminologiesRequest -> ListTerminologiesRequest: Probability = 1.00, Count = 1
Invoke<ListTerminologiesResponse> -> executeListTerminologies: Probability = 1.00, Count = 1
ModifyInstanceGroupsRequest -> ModifyInstanceGroupsRequest: Probability = 1.00, Count = 2
List<InstanceGroupModifyConfig> -> java.util.List<InstanceGroupModifyConfig>: Probability = 1.00, Count = 1
instanceGroups -> instanceGroups: Probability = 0.75, Count = 3
instanceGroups -> setInstanceGroups: Probability = 0.25, Count = 1
_instanceGroups -> setInstanceGroups: Probability = 1.00, Count = 1
"AnyObjectId[" -> "AnyObjectId[": Probability = 1.00, Count = 1
@is[p -> is[p],: Probability = 0.12, Count = 1
@is[p -> is[p: Probability = 0.50, Count = 4
@is[p -> 1],: Probability = 0.12, Count = 1
@is[p -> 2],: Probability = 0.12, Count = 1
@is[p -> 3],: Probability = 0.12, Count = 1
4] -> 4]: Probability = 1.00, Count = 4
RemoveTagsFromStreamResponse -> RemoveTagsFromStreamResult: Probability = 1.00, Count = 1
RemoveTagsFromStream -> removeTagsFromStream: Probability = 1.00, Count = 1
RemoveTagsFromStreamRequest -> RemoveTagsFromStreamRequest: Probability = 1.00, Count = 1
Invoke<RemoveTagsFromStreamResponse> -> executeRemoveTagsFromStream: Probability = 1.00, Count = 1
writeChar -> writeChar: Probability = 1.00, Count = 2
commitUserData -> commitUserData: Probability = 1.00, Count = 3
ModifyOptionGroupResponse -> OptionGroup: Probability = 1.00, Count = 1
ModifyOptionGroup -> modifyOptionGroup: Probability = 1.00, Count = 1
ModifyOptionGroupRequest -> ModifyOptionGroupRequest: Probability = 1.00, Count = 1
Invoke<ModifyOptionGroupResponse> -> executeModifyOptionGroup: Probability = 1.00, Count = 1
CreateCommentResponse -> CreateCommentResult: Probability = 1.00, Count = 1
CreateComment -> createComment: Probability = 1.00, Count = 3
CreateCommentRequest -> CreateCommentRequest: Probability = 1.00, Count = 1
Invoke<CreateCommentResponse> -> executeCreateComment: Probability = 1.00, Count = 1
userData -> userData: Probability = 1.00, Count = 4
SearchAvailablePhoneNumbersResponse -> SearchAvailablePhoneNumbersResult: Probability = 1.00, Count = 1
SearchAvailablePhoneNumbers -> searchAvailablePhoneNumbers: Probability = 1.00, Count = 1
SearchAvailablePhoneNumbersRequest -> SearchAvailablePhoneNumbersRequest: Probability = 1.00, Count = 1
Invoke<SearchAvailablePhoneNumbersResponse> -> executeSearchAvailablePhoneNumbers: Probability = 1.00, Count = 1
SpanPositionCheckQuery -> SpanPositionCheckQuery: Probability = 1.00, Count = 1
SpanQuery -> SpanQuery: Probability = 0.54, Count = 7
SpanQuery -> SpanNotQuery: Probability = 0.08, Count = 1
SpanQuery -> include,: Probability = 0.08, Count = 1
SpanQuery -> exclude,: Probability = 0.08, Count = 1
SpanQuery -> pre,: Probability = 0.08, Count = 1
SpanQuery -> Objects.requireNonNull: Probability = 0.15, Count = 2
match -> match: Probability = 0.54, Count = 7
match -> this.match: Probability = 0.08, Count = 1
match -> string": Probability = 0.08, Count = 1
match -> pendingPairs.containsKey: Probability = 0.08, Count = 1
match -> "match: Probability = 0.08, Count = 1
match -> added": Probability = 0.08, Count = 1
match -> matches.add: Probability = 0.08, Count = 1
this.m_match -> Objects.requireNonNull: Probability = 1.00, Count = 1
RemoveChildRecord -> removeChildRecord: Probability = 1.00, Count = 1
toBeRemoved -> toBeRemoved: Probability = 1.00, Count = 2
_childRecords.Remove -> _childRecords.remove: Probability = 1.00, Count = 1
Offset, -> offset,: Probability = 1.00, Count = 4
Length -> length: Probability = 0.91, Count = 29
Length -> final: Probability = 0.03, Count = 1
Length -> size: Probability = 0.03, Count = 1
Length -> LENGTH_UNKNOWN: Probability = 0.03, Count = 1
putLong -> putLong: Probability = 1.00, Count = 7
newElements -> CopyOnWriteArrayList.this: Probability = 0.25, Count = 3
newElements -> newElements: Probability = 0.50, Count = 6
newElements -> Object[elements.length: Probability = 0.17, Count = 2
newElements -> elements,: Probability = 0.08, Count = 1
elements.Length -> slice.to: Probability = 0.20, Count = 4
elements.Length -> -: Probability = 0.10, Count = 2
elements.Length -> elements.length: Probability = 0.20, Count = 4
elements.Length -> Slice: Probability = 0.15, Count = 3
elements.Length -> slice: Probability = 0.15, Count = 3
elements.Length -> this.slice: Probability = 0.10, Count = 2
elements.Length -> slice.from: Probability = 0.10, Count = 2
RevTree -> RevTree: Probability = 0.83, Count = 10
RevTree -> lookupTree: Probability = 0.08, Count = 1
RevTree -> parseTree: Probability = 0.08, Count = 1
objects.Get -> objects.get: Probability = 1.00, Count = 5
objects.Add -> objects.add: Probability = 1.00, Count = 4
FunctionQuery -> FunctionQuery: Probability = 1.00, Count = 2
Boost -> ): Probability = 1.00, Count = 1
func.Equals -> .func: Probability = 1.00, Count = 1
ChangeExternalReference -> changeExternalReference: Probability = 1.00, Count = 3
oldUrl, -> oldUrl,: Probability = 1.00, Count = 5
newUrl -> newUrl: Probability = 1.00, Count = 6
ExternalBookBlock -> ExternalBookBlock: Probability = 1.00, Count = 8
_externalBookBlocks -> _externalBookBlocks: Probability = 1.00, Count = 2
externalRecord -> ex.getExternalBookRecord: Probability = 1.00, Count = 1
RemoveLastPrinted -> removeLastPrinted: Probability = 1.00, Count = 1
PropertyIDMap.PID_LASTPRINTED -> PropertyIDMap.PID_LASTPRINTED: Probability = 1.00, Count = 1
MergeCommand -> MergeCommand: Probability = 1.00, Count = 2
Edit.Type -> Type: Probability = 1.00, Count = 2
beginA -> beginA: Probability = 1.00, Count = 5
endA -> endA: Probability = 1.00, Count = 5
endB -> endB: Probability = 1.00, Count = 6
nItems -> nItems: Probability = 0.94, Count = 15
nItems -> field_1_seriesNumbers.length: Probability = 0.06, Count = 1
_list.Count -> _list.size: Probability = 1.00, Count = 3
k++ -> k++: Probability = 1.00, Count = 16
region -> region: Probability = 0.75, Count = 12
region -> _breakMap.put: Probability = 0.06, Count = 1
region -> region.main: Probability = 0.06, Count = 1
region -> region.subFrom: Probability = 0.06, Count = 1
region -> region.subTo: Probability = 0.06, Count = 1
region.Serialize -> region.serialize: Probability = 1.00, Count = 1
"Remove -> "Remove: Probability = 1.00, Count = 1
supported" -> supported": Probability = 1.00, Count = 13
NGit.Api.TagCommand -> TagCommand: Probability = 1.00, Count = 6
SetSigned -> setSigned: Probability = 1.00, Count = 1
signed -> signed: Probability = 1.00, Count = 3
this.signed -> this.signed: Probability = 1.00, Count = 1
DescribeReservedInstancesListingsResponse -> DescribeReservedInstancesListingsResult: Probability = 1.00, Count = 2
DescribeReservedInstancesListings -> describeReservedInstancesListings: Probability = 1.00, Count = 3
DescribeReservedInstancesListingsRequest -> DescribeReservedInstancesListingsRequest: Probability = 1.00, Count = 2
Invoke<DescribeReservedInstancesListingsResponse> -> executeDescribeReservedInstancesListings: Probability = 1.00, Count = 1
GetRef -> getRef: Probability = 1.00, Count = 4
.GetName -> .getName: Probability = 0.75, Count = 3
.GetName -> "-StreamCopy": Probability = 0.25, Count = 1
IsAllSet -> isAllSet: Probability = 1.00, Count = 1
holder -> final: Probability = 0.33, Count = 12
holder -> holder: Probability = 0.67, Count = 24
GetEncodedSize -> getEncodedSize: Probability = 1.00, Count = 4
StringUtil.HasMultibyte -> StringUtil.hasMultibyte: Probability = 1.00, Count = 7
IList<CharsRef> -> List<CharsRef>: Probability = 1.00, Count = 3
word, -> word,: Probability = 0.27, Count = 7
word, -> length,: Probability = 0.12, Count = 3
word, -> caseType: Probability = 0.12, Count = 3
word, -> caseFoldLower: Probability = 0.08, Count = 2
word, -> list: Probability = 0.15, Count = 4
word, -> doStem: Probability = 0.15, Count = 4
word, -> list.addAll: Probability = 0.12, Count = 3
ArrayUtil.Grow -> ArrayUtil.grow: Probability = 0.48, Count = 21
ArrayUtil.Grow -> costs: Probability = 0.05, Count = 2
ArrayUtil.Grow -> costs,: Probability = 0.05, Count = 2
ArrayUtil.Grow -> lastRightID: Probability = 0.05, Count = 2
ArrayUtil.Grow -> lastRightID,: Probability = 0.05, Count = 2
ArrayUtil.Grow -> backPos: Probability = 0.05, Count = 2
ArrayUtil.Grow -> backPos,: Probability = 0.05, Count = 2
ArrayUtil.Grow -> backWordPos: Probability = 0.02, Count = 1
ArrayUtil.Grow -> backWordPos,: Probability = 0.02, Count = 1
ArrayUtil.Grow -> backIndex: Probability = 0.05, Count = 2
ArrayUtil.Grow -> backIndex,: Probability = 0.05, Count = 2
ArrayUtil.Grow -> backID: Probability = 0.05, Count = 2
ArrayUtil.Grow -> backID,: Probability = 0.05, Count = 2
ArrayUtil.Grow -> forwardPos: Probability = 0.02, Count = 1
word -> word: Probability = 0.15, Count = 2
word -> new: Probability = 0.54, Count = 7
word -> denseBuffer.set: Probability = 0.15, Count = 2
word -> ): Probability = 0.08, Count = 1
word -> this.slop: Probability = 0.08, Count = 1
-1, -> lowerBuffer,: Probability = 0.29, Count = 2
-1, -> doStem: Probability = 0.29, Count = 2
-1, -> -1,: Probability = 0.43, Count = 3
length, -> length,: Probability = 1.00, Count = 16
IConditionalFormattingRule -> HSSFConditionalFormattingRule: Probability = 1.00, Count = 2
CreateConditionalFormattingRule -> createConditionalFormattingRule: Probability = 1.00, Count = 1
formula -> formula: Probability = 0.62, Count = 18
formula -> coding: Probability = 0.03, Count = 1
formula -> error:: Probability = 0.03, Count = 1
formula -> "+_firstCell.getCol: Probability = 0.03, Count = 1
formula -> +'/'+_firstCell.getRow: Probability = 0.03, Count = 1
formula -> "+agg.getColumn: Probability = 0.03, Count = 1
formula -> +'/'+agg.getRow: Probability = 0.03, Count = 1
formula -> _frAggs.length: Probability = 0.03, Count = 1
formula -> "Too: Probability = 0.03, Count = 1
formula -> records: Probability = 0.03, Count = 1
formula -> group": Probability = 0.03, Count = 1
formula -> _frAggs[_numberOfFormulas++]: Probability = 0.03, Count = 1
CFRuleRecord -> CFRuleRecord: Probability = 0.55, Count = 6
CFRuleRecord -> CFRuleBase: Probability = 0.45, Count = 5
rr -> rr: Probability = 0.67, Count = 6
rr -> _sheet,: Probability = 0.22, Count = 2
rr -> "Attempt: Probability = 0.11, Count = 1
_sheet.Workbook -> CFRuleRecord.create: Probability = 1.00, Count = 1
HSSFConditionalFormattingRule -> HSSFConditionalFormattingRule: Probability = 0.91, Count = 10
HSSFConditionalFormattingRule -> regions,new: Probability = 0.09, Count = 1
"Unable -> org.apache.poi.util.RecordFormatException: Probability = 0.17, Count = 1
"Unable -> "Unable: Probability = 0.83, Count = 5
construct -> construct: Probability = 1.00, Count = 1
instance", -> instance": Probability = 0.50, Count = 1
instance", -> e.getTargetException: Probability = 0.50, Count = 1
arr, -> arr,: Probability = 1.00, Count = 10
arr.Length -> arr.length: Probability = 1.00, Count = 3
i, -> i,: Probability = 1.00, Count = 27
arr[o] -> arr[o]: Probability = 1.00, Count = 2
pair -> bytes: Probability = 0.50, Count = 3
pair -> mem: Probability = 0.33, Count = 2
pair -> ordinals: Probability = 0.17, Count = 1
ordsCache.Sum -> ords: Probability = 0.25, Count = 1
ordsCache.Sum -> ordsCache.values: Probability = 0.25, Count = 1
ordsCache.Sum -> offsets: Probability = 0.50, Count = 2
pair.Value.RamBytesUsed -> +=: Probability = 0.40, Count = 2
pair.Value.RamBytesUsed -> ords.ramBytesUsed: Probability = 0.20, Count = 1
pair.Value.RamBytesUsed -> ordinals: Probability = 0.20, Count = 1
pair.Value.RamBytesUsed -> mem: Probability = 0.20, Count = 1
WriteDouble -> writeDouble: Probability = 1.00, Count = 3
WriteLong -> writeLong: Probability = 1.00, Count = 4
BitConverter.DoubleToInt64Bits -> Double.doubleToLongBits: Probability = 1.00, Count = 2
"DocumentsWriterFlushControl -> "DocumentsWriterFlushControl: Probability = 1.00, Count = 1
[activeBytes=" -> [activeBytes=": Probability = 1.00, Count = 1
activeBytes -> activeBytes+: Probability = 1.00, Count = 1
flushBytes=" -> flushBytes=": Probability = 1.00, Count = 1
flushBytes -> flushBytes: Probability = 1.00, Count = 2
ListSecurityConfigurationsResponse -> ListSecurityConfigurationsResult: Probability = 1.00, Count = 1
ListSecurityConfigurations -> listSecurityConfigurations: Probability = 1.00, Count = 1
ListSecurityConfigurationsRequest -> ListSecurityConfigurationsRequest: Probability = 1.00, Count = 1
Invoke<ListSecurityConfigurationsResponse> -> executeListSecurityConfigurations: Probability = 1.00, Count = 1
ListQualificationRequestsResponse -> ListQualificationRequestsResult: Probability = 1.00, Count = 1
ListQualificationRequests -> listQualificationRequests: Probability = 1.00, Count = 1
ListQualificationRequestsRequest -> ListQualificationRequestsRequest: Probability = 1.00, Count = 1
Invoke<ListQualificationRequestsResponse> -> executeListQualificationRequests: Probability = 1.00, Count = 1
ReleaseAddressResponse -> ReleaseAddressResult: Probability = 1.00, Count = 1
ReleaseAddress -> releaseAddress: Probability = 1.00, Count = 1
ReleaseAddressRequest -> ReleaseAddressRequest: Probability = 1.00, Count = 2
Invoke<ReleaseAddressResponse> -> executeReleaseAddress: Probability = 1.00, Count = 1
y, -> y,: Probability = 1.00, Count = 18
width, -> width,: Probability = 1.00, Count = 17
height -> height: Probability = 0.74, Count = 20
height -> HSSFSimpleShape.OBJECT_TYPE_OVAL: Probability = 0.07, Count = 2
height -> shape.setLineStyle: Probability = 0.07, Count = 2
height -> HSSFShape.LINESTYLE_NONE: Probability = 0.11, Count = 3
HSSFSimpleShape -> HSSFSimpleShape: Probability = 0.91, Count = 10
HSSFSimpleShape -> createShape: Probability = 0.09, Count = 1
escherGroup.CreateShape -> escherGroup.createShape: Probability = 1.00, Count = 4
shape.ShapeType -> shape.setShapeType: Probability = 1.00, Count = 4
foreground.B -> foreground.getRed: Probability = 0.40, Count = 2
foreground.B -> ,: Probability = 0.20, Count = 1
foreground.B -> foreground.getBlue: Probability = 0.40, Count = 2
shape.IsNoFill -> shape.setNoFill: Probability = 1.00, Count = 3
needle -> needle: Probability = 1.00, Count = 6
TextFunction.EvaluateStringArg -> TextFunction.evaluateStringArg: Probability = 0.67, Count = 4
TextFunction.EvaluateStringArg -> haystack: Probability = 0.33, Count = 2
startpos -> startpos: Probability = 0.75, Count = 3
startpos -> TextFunction.evaluateIntArg: Probability = 0.25, Count = 1
Eval -> eval: Probability = 1.00, Count = 5
haystack, -> haystack,: Probability = 1.00, Count = 2
needle, -> needle,: Probability = 1.00, Count = 2
CreateInvalidationRequest -> CreateInvalidationRequest: Probability = 1.00, Count = 2
distributionId, -> distributionId,: Probability = 1.00, Count = 2
InvalidationBatch -> InvalidationBatch: Probability = 1.00, Count = 3
invalidationBatch -> invalidationBatch: Probability = 1.00, Count = 2
_invalidationBatch -> setInvalidationBatch: Probability = 1.00, Count = 1
CreateUsageReportSubscriptionResponse -> CreateUsageReportSubscriptionResult: Probability = 1.00, Count = 1
CreateUsageReportSubscription -> createUsageReportSubscription: Probability = 1.00, Count = 1
CreateUsageReportSubscriptionRequest -> CreateUsageReportSubscriptionRequest: Probability = 1.00, Count = 1
Invoke<CreateUsageReportSubscriptionResponse> -> executeCreateUsageReportSubscription: Probability = 1.00, Count = 1
FromString -> fromString: Probability = 1.00, Count = 6
GetDetectorsResponse -> GetDetectorsResult: Probability = 1.00, Count = 1
GetDetectors -> getDetectors: Probability = 1.00, Count = 1
GetDetectorsRequest -> GetDetectorsRequest: Probability = 1.00, Count = 1
Invoke<GetDetectorsResponse> -> executeGetDetectors: Probability = 1.00, Count = 1
FromDouble -> fromDouble: Probability = 0.50, Count = 1
FromDouble -> Double: Probability = 0.50, Count = 1
value.ToString -> Double.toString: Probability = 0.50, Count = 1
value.ToString -> Long.toString: Probability = 0.50, Count = 1
WriteProtectWorkbook -> writeProtectWorkbook: Probability = 1.00, Count = 2
password, -> password,: Probability = 1.00, Count = 5
username -> username: Probability = 0.83, Count = 10
username -> frec.setUsername: Probability = 0.08, Count = 1
username -> waccess.setUsername: Probability = 0.08, Count = 1
FileSharingRecord -> FileSharingRecord: Probability = 0.67, Count = 2
FileSharingRecord -> frec: Probability = 0.33, Count = 1
frec -> getFileSharing: Probability = 1.00, Count = 1
WriteAccessRecord -> WriteAccessRecord: Probability = 1.00, Count = 2
FileSharing -> waccess: Probability = 1.00, Count = 1
waccess -> getWriteAccess: Probability = 1.00, Count = 1
password -> password: Probability = 1.00, Count = 17
Exec -> exec: Probability = 1.00, Count = 2
TransportException -> TransportException: Probability = 1.00, Count = 4
IList<string> -> List<String>: Probability = 0.91, Count = 30
IList<string> -> getDFAStrings: Probability = 0.03, Count = 1
IList<string> -> _interp.decisionToDFA: Probability = 0.03, Count = 1
IList<string> -> ArrayList<String>: Probability = 0.03, Count = 1
args.AddItem -> args.add: Probability = 0.75, Count = 6
args.AddItem -> getURI: Probability = 0.25, Count = 2
this._enclosing.GetURI -> .getPort: Probability = 0.25, Count = 2
this._enclosing.GetURI -> getURI: Probability = 0.50, Count = 4
this._enclosing.GetURI -> .getUser: Probability = 0.25, Count = 2
ProcessStartInfo -> ProcessBuilder: Probability = 1.00, Count = 4
out1.Write -> out.write: Probability = 0.82, Count = 14
out1.Write -> associatedRange.serialize: Probability = 0.06, Count = 1
out1.Write -> super.write: Probability = 0.12, Count = 2
recordData -> recordData: Probability = 1.00, Count = 2
UpdateFleetCapacityResponse -> UpdateFleetCapacityResult: Probability = 1.00, Count = 1
UpdateFleetCapacity -> updateFleetCapacity: Probability = 1.00, Count = 1
UpdateFleetCapacityRequest -> UpdateFleetCapacityRequest: Probability = 1.00, Count = 1
Invoke<UpdateFleetCapacityResponse> -> executeUpdateFleetCapacity: Probability = 1.00, Count = 1
CreateDirectConnectGatewayAssociationResponse -> CreateDirectConnectGatewayAssociationResult: Probability = 1.00, Count = 1
CreateDirectConnectGatewayAssociation -> createDirectConnectGatewayAssociation: Probability = 1.00, Count = 1
CreateDirectConnectGatewayAssociationRequest -> CreateDirectConnectGatewayAssociationRequest: Probability = 1.00, Count = 1
Invoke<CreateDirectConnectGatewayAssociationResponse> -> executeCreateDirectConnectGatewayAssociation: Probability = 1.00, Count = 1
words -> words: Probability = 1.00, Count = 7
filter -> filter: Probability = 0.93, Count = 26
filter -> "filter": Probability = 0.07, Count = 2
m_luceneMatchVersion, -> new: Probability = 1.00, Count = 8
KeepWordFilter -> KeepWordFilter: Probability = 1.00, Count = 1
GetEndA -> getEndA: Probability = 1.00, Count = 1
GetStrictHostKeyChecking -> getStrictHostKeyChecking: Probability = 1.00, Count = 1
strictHostKeyChecking -> strictHostKeyChecking: Probability = 1.00, Count = 1
Lift -> Lift: Probability = 1.00, Count = 1
changeSkip -> changeSkip: Probability = 1.00, Count = 5
this.changeSkip -> this.changeSkip: Probability = 1.00, Count = 1
field_1_precision -> field_1_precision: Probability = 1.00, Count = 1
GetAuthorizerResponse -> GetAuthorizerResult: Probability = 1.00, Count = 1
GetAuthorizer -> getAuthorizer: Probability = 1.00, Count = 1
GetAuthorizerRequest -> GetAuthorizerRequest: Probability = 1.00, Count = 1
Invoke<GetAuthorizerResponse> -> executeGetAuthorizer: Probability = 1.00, Count = 1
StringCharacterIterator -> StringCharacterIterator: Probability = 1.00, Count = 3
@string.Length -> string.length: Probability = 1.00, Count = 3
this.start -> this.start: Probability = 1.00, Count = 6
buf.Append -> buf.append: Probability = 0.66, Count = 41
buf.Append -> "ObjectToPack[": Probability = 0.02, Count = 1
buf.Append -> getDeltaDepth: Probability = 0.03, Count = 2
buf.Append -> "DiffEntry[": Probability = 0.02, Count = 1
buf.Append -> ADD:buf.append: Probability = 0.02, Count = 1
buf.Append -> COPY:buf.append: Probability = 0.02, Count = 1
buf.Append -> "->": Probability = 0.05, Count = 3
buf.Append -> DELETE:buf.append: Probability = 0.02, Count = 1
buf.Append -> MODIFY:buf.append: Probability = 0.02, Count = 1
buf.Append -> RENAME:buf.append: Probability = 0.02, Count = 1
buf.Append -> getStateString: Probability = 0.03, Count = 2
buf.Append -> c=='\r': Probability = 0.02, Count = 1
buf.Append -> i>0: Probability = 0.03, Count = 2
buf.Append -> returnStates[i]==EMPTY_RETURN_STATE: Probability = 0.02, Count = 1
buf.Append -> returnStates[i]: Probability = 0.02, Count = 1
buf.Append -> parents[i]!=null: Probability = 0.02, Count = 1
buf.Append -> parents[i].toString: Probability = 0.02, Count = 1
Constants.TypeString -> Constants.typeString: Probability = 1.00, Count = 6
IsReuseAsIs -> isReuseAsIs: Probability = 1.00, Count = 2
GetDeltaBase -> getDeltaBase: Probability = 1.00, Count = 4
GetDeltaBaseId -> getDeltaBaseId: Probability = 1.00, Count = 2
IsWritten -> isWritten: Probability = 1.00, Count = 2
GetOffset -> getOffset: Probability = 1.00, Count = 5
buf.ToString -> buf.toString: Probability = 1.00, Count = 11
"1" -> "1": Probability = 1.00, Count = 2
readFully -> readFully: Probability = 1.00, Count = 5
GetMailboxDetailsResponse -> GetMailboxDetailsResult: Probability = 1.00, Count = 1
GetMailboxDetails -> getMailboxDetails: Probability = 1.00, Count = 1
GetMailboxDetailsRequest -> GetMailboxDetailsRequest: Probability = 1.00, Count = 1
Invoke<GetMailboxDetailsResponse> -> executeGetMailboxDetails: Probability = 1.00, Count = 1
java.lang.CharSequence -> CharSequence: Probability = 1.00, Count = 15
csq -> csq: Probability = 1.00, Count = 12
csq.ToString -> csq.toString: Probability = 1.00, Count = 2
RegisterFaceRequest -> RegisterFaceRequest: Probability = 1.00, Count = 1
"RegisterFace" -> "RegisterFace": Probability = 1.00, Count = 1
CheckValue -> checkValue: Probability = 1.00, Count = 2
PutInvitationConfigurationResponse -> PutInvitationConfigurationResult: Probability = 1.00, Count = 1
PutInvitationConfiguration -> putInvitationConfiguration: Probability = 1.00, Count = 1
PutInvitationConfigurationRequest -> PutInvitationConfigurationRequest: Probability = 1.00, Count = 1
Invoke<PutInvitationConfigurationResponse> -> executePutInvitationConfiguration: Probability = 1.00, Count = 1
Process -> process: Probability = 1.00, Count = 3
queryTree -> queryTree: Probability = 1.00, Count = 4
op -> Operator: Probability = 0.18, Count = 2
op -> op: Probability = 0.64, Count = 7
op -> ConfigurationKeys.DEFAULT_OPERATOR: Probability = 0.18, Count = 2
GetQueryConfigHandler -> getQueryConfigHandler: Probability = 1.00, Count = 3
.Get -> .get: Probability = 1.00, Count = 3
"StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR -> "StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR: Probability = 1.00, Count = 2
should -> should: Probability = 0.92, Count = 11
should -> "both: Probability = 0.08, Count = 1
on -> on: Probability = 1.00, Count = 13
QueryConfigHandler" -> QueryConfigHandler": Probability = 1.00, Count = 2
this.usingAnd -> this.usingAnd: Probability = 1.00, Count = 2
Operator.AND -> StandardQueryConfigHandler.Operator.AND: Probability = 1.00, Count = 2
base.Process -> super.process: Probability = 1.00, Count = 1
outside -> outside: Probability = 0.79, Count = 11
outside -> is: Probability = 0.21, Count = 3
allowed -> allowed: Probability = 1.00, Count = 8
range -> range: Probability = 0.88, Count = 28
range -> setVerticalCellRange: Probability = 0.06, Count = 2
range -> dataValues,: Probability = 0.03, Count = 1
range -> dataCategoryLabels,: Probability = 0.03, Count = 1
scratch.Grow -> scratch.grow: Probability = 1.00, Count = 3
utf8.Length -> utf8.length: Probability = 1.00, Count = 2
10 -> 10: Probability = 1.00, Count = 22
utf8 -> utf8: Probability = 1.00, Count = 7
scratch -> scratch.get: Probability = 0.13, Count = 3
scratch -> scratch: Probability = 0.61, Count = 14
scratch -> BytesRefBuilder: Probability = 0.04, Count = 1
scratch -> chars: Probability = 0.17, Count = 4
scratch -> ref.chars: Probability = 0.04, Count = 1
decode -> decode: Probability = 1.00, Count = 7
false, -> false,: Probability = 0.71, Count = 15
false, -> EscherPropertyTypes.FILL__FILLTYPE,: Probability = 0.10, Count = 2
false, -> FILL_TYPE_SOLID: Probability = 0.05, Count = 1
false, -> false,false: Probability = 0.05, Count = 1
false, -> EscherPropertyTypes.FILL__PATTERNTEXTURE,: Probability = 0.05, Count = 1
false, -> FILL_TYPE_PICTURE: Probability = 0.05, Count = 1
java.nio.charset.Charsets.UTF_8 -> Charsets.UTF_8: Probability = 1.00, Count = 1
SetExpire -> setExpire: Probability = 1.00, Count = 1
expire -> expire: Probability = 1.00, Count = 3
this.expire -> this.expire: Probability = 1.00, Count = 1
expireAgeMillis -> expireAgeMillis: Probability = 1.00, Count = 3
DecRef -> DecRef: Probability = 0.17, Count = 1
DecRef -> decRef: Probability = 0.83, Count = 5
Thread.CurrentThread.Name -> Thread.currentThread: Probability = 1.00, Count = 2
pre-decrement -> pre-decrement: Probability = 1.00, Count = 1
file -> file: Probability = 0.94, Count = 16
file -> attributes.getFile: Probability = 0.06, Count = 1
--count -> --count: Probability = 1.00, Count = 1
IList<WeightedFragInfo> -> List<WeightedFragInfo>: Probability = 0.60, Count = 3
IList<WeightedFragInfo> -> getWeightedFragInfoList: Probability = 0.40, Count = 2
CreateInstancesFromSnapshotResponse -> CreateInstancesFromSnapshotResult: Probability = 1.00, Count = 1
CreateInstancesFromSnapshot -> createInstancesFromSnapshot: Probability = 1.00, Count = 1
CreateInstancesFromSnapshotRequest -> CreateInstancesFromSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CreateInstancesFromSnapshotResponse> -> executeCreateInstancesFromSnapshot: Probability = 1.00, Count = 1
java.util.Comparator<E> -> Comparator<?: Probability = 0.33, Count = 4
java.util.Comparator<E> -> super: Probability = 0.33, Count = 4
java.util.Comparator<E> -> E>: Probability = 0.33, Count = 4
backingMap.comparator -> backingMap.comparator: Probability = 1.00, Count = 4
IsValueSecure -> isValueSecure: Probability = 1.00, Count = 1
valueSecure -> valueSecure: Probability = 1.00, Count = 1
IdFor -> idFor: Probability = 0.85, Count = 11
IdFor -> delegate: Probability = 0.15, Count = 2
CreateDomainNameResponse -> CreateDomainNameResult: Probability = 1.00, Count = 1
CreateDomainName -> createDomainName: Probability = 1.00, Count = 1
CreateDomainNameRequest -> CreateDomainNameRequest: Probability = 1.00, Count = 1
Invoke<CreateDomainNameResponse> -> executeCreateDomainName: Probability = 1.00, Count = 1
DeleteAddressBookResponse -> DeleteAddressBookResult: Probability = 1.00, Count = 1
DeleteAddressBook -> deleteAddressBook: Probability = 1.00, Count = 1
DeleteAddressBookRequest -> DeleteAddressBookRequest: Probability = 1.00, Count = 1
Invoke<DeleteAddressBookResponse> -> executeDeleteAddressBook: Probability = 1.00, Count = 1
AddToolPack -> addToolPack: Probability = 1.00, Count = 1
toopack -> toopack: Probability = 1.00, Count = 2
AggregatingUDFFinder -> AggregatingUDFFinder: Probability = 0.67, Count = 2
AggregatingUDFFinder -> udfs: Probability = 0.33, Count = 1
_udfFinder -> _udfFinder: Probability = 1.00, Count = 1
udfs.Add -> udfs.add: Probability = 1.00, Count = 1
SearchUsersResponse -> SearchUsersResult: Probability = 1.00, Count = 1
SearchUsers -> searchUsers: Probability = 1.00, Count = 1
SearchUsersRequest -> SearchUsersRequest: Probability = 1.00, Count = 1
Invoke<SearchUsersResponse> -> executeSearchUsers: Probability = 1.00, Count = 1
GetAccessKeySecret -> getAccessKeySecret: Probability = 1.00, Count = 3
privateKeySecret -> privateKeySecret: Probability = 0.80, Count = 4
privateKeySecret -> publicKeyId,: Probability = 0.20, Count = 1
setValueAt -> setValueAt: Probability = 1.00, Count = 1
gc -> gc: Probability = 1.00, Count = 8
mValues[index] -> mValues[index]: Probability = 1.00, Count = 3
RefErrorPtg -> RefErrorPtg: Probability = 1.00, Count = 1
field_1_reserved -> field_1_reserved: Probability = 1.00, Count = 5
GetFlagByBit -> getFlagByBit: Probability = 1.00, Count = 1
bitmask -> bitmask: Probability = 1.00, Count = 4
UpdateAccountSendingEnabledResponse -> UpdateAccountSendingEnabledResult: Probability = 1.00, Count = 1
UpdateAccountSendingEnabled -> updateAccountSendingEnabled: Probability = 1.00, Count = 1
UpdateAccountSendingEnabledRequest -> UpdateAccountSendingEnabledRequest: Probability = 1.00, Count = 1
Invoke<UpdateAccountSendingEnabledResponse> -> executeUpdateAccountSendingEnabled: Probability = 1.00, Count = 1
AppCookieStickinessPolicy -> AppCookieStickinessPolicy: Probability = 1.00, Count = 1
cookieName -> cookieName: Probability = 1.00, Count = 4
_cookieName -> setCookieName: Probability = 1.00, Count = 2
GetAccountBalanceResponse -> GetAccountBalanceResult: Probability = 1.00, Count = 1
GetAccountBalance -> getAccountBalance: Probability = 1.00, Count = 1
GetAccountBalanceRequest -> GetAccountBalanceRequest: Probability = 1.00, Count = 1
Invoke<GetAccountBalanceResponse> -> executeGetAccountBalance: Probability = 1.00, Count = 1
DescribeConversionTasksResponse -> DescribeConversionTasksResult: Probability = 1.00, Count = 2
DescribeConversionTasks -> describeConversionTasks: Probability = 1.00, Count = 3
DescribeConversionTasksRequest -> DescribeConversionTasksRequest: Probability = 1.00, Count = 2
Invoke<DescribeConversionTasksResponse> -> executeDescribeConversionTasks: Probability = 1.00, Count = 1
DescribeImagesResponse -> DescribeImagesResult: Probability = 1.00, Count = 2
DescribeImages -> describeImages: Probability = 1.00, Count = 3
DescribeImagesRequest -> DescribeImagesRequest: Probability = 1.00, Count = 2
delegate1.Close -> _closed: Probability = 1.00, Count = 1
ListSignalingChannelsResponse -> ListSignalingChannelsResult: Probability = 1.00, Count = 1
ListSignalingChannels -> listSignalingChannels: Probability = 1.00, Count = 1
ListSignalingChannelsRequest -> ListSignalingChannelsRequest: Probability = 1.00, Count = 1
Invoke<ListSignalingChannelsResponse> -> executeListSignalingChannels: Probability = 1.00, Count = 1
MergeFacesRequest -> MergeFacesRequest: Probability = 1.00, Count = 1
"MergeFaces", -> "MergeFaces",: Probability = 1.00, Count = 1
DetectTextResponse -> DetectTextResult: Probability = 1.00, Count = 1
DetectText -> detectText: Probability = 1.00, Count = 1
DetectTextRequest -> DetectTextRequest: Probability = 1.00, Count = 1
Invoke<DetectTextResponse> -> executeDetectText: Probability = 1.00, Count = 1
dst.Length -> dst.length: Probability = 1.00, Count = 7
GetCreationTime -> getCreationTime: Probability = 1.00, Count = 1
DecodeTS -> decodeTS: Probability = 1.00, Count = 1
P_CTIME -> P_CTIME: Probability = 1.00, Count = 1
AndTreeFilter.Binary -> Binary: Probability = 1.00, Count = 2
a.Clone -> a.clone: Probability = 1.00, Count = 8
b.Clone -> b.clone: Probability = 1.00, Count = 6
putChar -> putChar: Probability = 1.00, Count = 4
newPosition -> newPosition: Probability = 1.00, Count = 23
libcore.io.SizeOf.CHAR -> SizeOf.CHAR: Probability = 1.00, Count = 12
libcore.io.Memory.pokeShort -> Memory.pokeShort: Probability = 1.00, Count = 4
_order -> order: Probability = 1.00, Count = 14
sb.append -> String.format: Probability = 0.08, Count = 1
sb.append -> "Rect: Probability = 0.08, Count = 1
sb.append -> [: Probability = 0.08, Count = 1
sb.append -> %d,%d: Probability = 0.15, Count = 2
sb.append -> %dx%d]",: Probability = 0.08, Count = 1
sb.append -> x,: Probability = 0.08, Count = 1
sb.append -> y,: Probability = 0.08, Count = 1
sb.append -> x: Probability = 0.08, Count = 1
sb.append -> w,: Probability = 0.15, Count = 2
sb.append -> y: Probability = 0.08, Count = 1
sb.append -> h,: Probability = 0.08, Count = 1
java.nio.LongBuffer -> LongBuffer: Probability = 1.00, Count = 33
array_1.Length -> array.length: Probability = 1.00, Count = 6
SpanNearClauseFactory -> SpanNearClauseFactory: Probability = 1.00, Count = 1
IndexReader -> IndexReader: Probability = 1.00, Count = 8
qf -> qf: Probability = 0.94, Count = 17
qf -> isWeighted: Probability = 0.06, Count = 1
this.fieldName -> this.fieldName: Probability = 1.00, Count = 4
this.weightBySpanQuery -> this.weightBySpanQuery: Probability = 1.00, Count = 1
this.qf -> this.qf: Probability = 1.00, Count = 1
BeginRecord -> copy: Probability = 1.00, Count = 1
DescribeGameSessionQueuesResponse -> DescribeGameSessionQueuesResult: Probability = 1.00, Count = 1
DescribeGameSessionQueues -> describeGameSessionQueues: Probability = 1.00, Count = 1
DescribeGameSessionQueuesRequest -> DescribeGameSessionQueuesRequest: Probability = 1.00, Count = 1
Invoke<DescribeGameSessionQueuesResponse> -> executeDescribeGameSessionQueues: Probability = 1.00, Count = 1
SubmitAttachmentStateChangesResponse -> SubmitAttachmentStateChangesResult: Probability = 1.00, Count = 1
SubmitAttachmentStateChanges -> submitAttachmentStateChanges: Probability = 1.00, Count = 1
SubmitAttachmentStateChangesRequest -> SubmitAttachmentStateChangesRequest: Probability = 1.00, Count = 1
Invoke<SubmitAttachmentStateChangesResponse> -> executeSubmitAttachmentStateChanges: Probability = 1.00, Count = 1
UnicodeString -> UnicodeString: Probability = 0.73, Count = 8
UnicodeString -> field_3_strings.get: Probability = 0.18, Count = 2
UnicodeString -> LOG.log: Probability = 0.09, Count = 1
GetString -> getString: Probability = 1.00, Count = 7
GetSignificand -> getSignificand: Probability = 1.00, Count = 1
_significand -> _significand: Probability = 1.00, Count = 7
Join -> join: Probability = 1.00, Count = 1
rawDataContainer.Concatenate -> rawDataContainer.concatenate: Probability = 1.00, Count = 3
record.RawData -> record.getRawData: Probability = 1.00, Count = 1
FlushInfo -> FlushInfo: Probability = 1.00, Count = 3
EstimatedSegmentSize -> estimatedSegmentSize: Probability = 1.00, Count = 2
NumDocs -> numDocs: Probability = 1.00, Count = 2
CopyRawTo -> copyRawTo: Probability = 1.00, Count = 3
b[o -> b[o: Probability = 1.00, Count = 4
2] -> 2]: Probability = 1.00, Count = 10
3] -> 3]: Probability = 0.40, Count = 4
3] -> s[len-3]: Probability = 0.60, Count = 6
ReadPipelineResponse -> ReadPipelineResult: Probability = 1.00, Count = 1
ReadPipeline -> readPipeline: Probability = 1.00, Count = 1
ReadPipelineRequest -> ReadPipelineRequest: Probability = 1.00, Count = 1
Invoke<ReadPipelineResponse> -> executeReadPipeline: Probability = 1.00, Count = 1
BoostQueryNode -> BoostQueryNode: Probability = 1.00, Count = 1
query, -> query,: Probability = 1.00, Count = 13
QueryNodeError -> QueryNodeError: Probability = 1.00, Count = 4
QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, -> QueryParserMessages.NODE_ACTION_NOT_SUPPORTED,: Probability = 1.00, Count = 3
"query", -> "query",: Probability = 1.00, Count = 3
this.value -> this.value: Probability = 1.00, Count = 12
IsLeaf -> setLeaf: Probability = 1.00, Count = 6
Allocate -> allocate: Probability = 1.00, Count = 6
SetFallbackAlgorithm -> setFallbackAlgorithm: Probability = 1.00, Count = 1
alg -> alg: Probability = 1.00, Count = 4
fallback -> fallback: Probability = 1.00, Count = 1
Transition -> Transition: Probability = 1.00, Count = 5
Find -> find: Probability = 1.00, Count = 7
t.min -> t.min: Probability = 1.00, Count = 1
.starts.Add -> .starts.add: Probability = 1.00, Count = 1
t.max -> 1+t.max: Probability = 1.00, Count = 1
.ends.Add -> .ends.add: Probability = 1.00, Count = 1
[FEATURE -> [FEATURE: Probability = 1.00, Count = 3
[/FEATURE -> [/FEATURE: Probability = 1.00, Count = 3
lexer.Type -> lexer.setType: Probability = 1.00, Count = 1
UpgradePublishedSchemaResponse -> UpgradePublishedSchemaResult: Probability = 1.00, Count = 1
UpgradePublishedSchema -> upgradePublishedSchema: Probability = 1.00, Count = 1
UpgradePublishedSchemaRequest -> UpgradePublishedSchemaRequest: Probability = 1.00, Count = 1
Invoke<UpgradePublishedSchemaResponse> -> executeUpgradePublishedSchema: Probability = 1.00, Count = 1
ReadRecordSID -> readRecordSID: Probability = 1.00, Count = 2
_le.ReadUShort -> readPlain: Probability = 0.30, Count = 3
_le.ReadUShort -> buffer,: Probability = 0.30, Count = 3
_le.ReadUShort -> LittleEndianConsts.SHORT_SIZE: Probability = 0.30, Count = 3
_le.ReadUShort -> ccis.readShort: Probability = 0.10, Count = 1
_rc4.SkipTwoBytes -> LittleEndian.getUShort: Probability = 0.40, Count = 2
_rc4.SkipTwoBytes -> buffer,: Probability = 0.40, Count = 2
_rc4.SkipTwoBytes -> ccis.setNextRecordSize: Probability = 0.20, Count = 1
_rc4.StartRecord -> shouldSkipEncryptionOnCurrentRecord: Probability = 1.00, Count = 1
CreateImageBuilderStreamingURLResponse -> CreateImageBuilderStreamingURLResult: Probability = 1.00, Count = 1
CreateImageBuilderStreamingURL -> createImageBuilderStreamingURL: Probability = 1.00, Count = 1
CreateImageBuilderStreamingURLRequest -> CreateImageBuilderStreamingURLRequest: Probability = 1.00, Count = 1
Invoke<CreateImageBuilderStreamingURLResponse> -> executeCreateImageBuilderStreamingURL: Probability = 1.00, Count = 1
bookName, -> bookName,: Probability = 1.00, Count = 1
NameIdentifier -> NameIdentifier: Probability = 1.00, Count = 2
sheetIdentifier -> sheetIdentifier: Probability = 1.00, Count = 2
_bookName -> _bookName: Probability = 1.00, Count = 1
bookName -> bookName: Probability = 1.00, Count = 1
_sheetIdentifier -> _sheetIdentifier: Probability = 1.00, Count = 1
PortugueseStemmer -> PortugueseStemmer: Probability = 1.00, Count = 1
PasswordRecord -> PasswordRecord: Probability = 1.00, Count = 4
DescribeTableRequest -> DescribeTableRequest: Probability = 1.00, Count = 2
tableName -> tableName: Probability = 0.71, Count = 12
tableName -> ): Probability = 0.29, Count = 5
_tableName -> setTableName: Probability = 1.00, Count = 5
ModifyCacheParameterGroupResponse -> ModifyCacheParameterGroupResult: Probability = 1.00, Count = 1
ModifyCacheParameterGroup -> modifyCacheParameterGroup: Probability = 1.00, Count = 1
ModifyCacheParameterGroupRequest -> ModifyCacheParameterGroupRequest: Probability = 1.00, Count = 2
Invoke<ModifyCacheParameterGroupResponse> -> executeModifyCacheParameterGroup: Probability = 1.00, Count = 1
location, -> location,: Probability = 1.00, Count = 10
System.IndexOutOfRangeException -> IndexOutOfBoundsException: Probability = 0.94, Count = 15
System.IndexOutOfRangeException -> ArrayIndexOutOfBoundsException: Probability = 0.06, Count = 1
it.set -> it.set: Probability = 1.00, Count = 1
NumberToTextConverter.ToText -> NumberToTextConverter.toText: Probability = 0.50, Count = 1
NumberToTextConverter.ToText -> field_1_value: Probability = 0.50, Count = 1
ListBootstrapActionsResponse -> ListBootstrapActionsResult: Probability = 1.00, Count = 1
ListBootstrapActions -> listBootstrapActions: Probability = 1.00, Count = 1
ListBootstrapActionsRequest -> ListBootstrapActionsRequest: Probability = 1.00, Count = 1
Invoke<ListBootstrapActionsResponse> -> executeListBootstrapActions: Probability = 1.00, Count = 1
_wStyle -> _wStyle: Probability = 1.00, Count = 3
_cLine -> _cLine: Probability = 1.00, Count = 3
_dxMin -> _dxMin: Probability = 1.00, Count = 3
StringUtil.WriteUnicodeString -> StringUtil.writeUnicodeString: Probability = 0.67, Count = 4
StringUtil.WriteUnicodeString -> field_3_sheet_name: Probability = 0.33, Count = 2
out1, -> out,: Probability = 1.00, Count = 7
_str -> _str: Probability = 0.83, Count = 5
_str -> StringUtil.getEncodedSize: Probability = 0.17, Count = 1
_unused -> _unused: Probability = 1.00, Count = 7
SynonymMap -> SynonymMap: Probability = 1.00, Count = 2
ignoreCase -> ignoreCase: Probability = 0.89, Count = 17
ignoreCase -> dedup: Probability = 0.11, Count = 2
AddAttribute<ICharTermAttribute> -> input: Probability = 1.00, Count = 15
this.ignoreCase -> this.ignoreCase: Probability = 0.67, Count = 2
this.ignoreCase -> this.dedup: Probability = 0.33, Count = 1
this.fst -> this.fst: Probability = 1.00, Count = 4
fst -> fst: Probability = 0.83, Count = 10
fst -> dict: Probability = 0.08, Count = 1
fst -> FieldIndexData: Probability = 0.08, Count = 1
fst.GetBytesReader -> fst.getBytesReader: Probability = 1.00, Count = 2
pos++ -> pos++: Probability = 1.00, Count = 6
PendingOutputs -> PendingOutputs: Probability = 1.00, Count = 2
CreateApiResponse -> CreateApiResult: Probability = 1.00, Count = 1
CreateApi -> createApi: Probability = 1.00, Count = 1
CreateApiRequest -> CreateApiRequest: Probability = 1.00, Count = 1
Invoke<CreateApiResponse> -> executeCreateApi: Probability = 1.00, Count = 1
IndexOutput -> IndexOutput: Probability = 1.00, Count = 1
createOutput -> createOutput: Probability = 1.00, Count = 1
IOContext -> IOContext: Probability = 1.00, Count = 4
context.context -> context.context: Probability = 1.00, Count = 2
Context.MERGE -> Context.MERGE: Probability = 1.00, Count = 2
minBytesDirect -> context.mergeInfo.estimatedMergeBytes: Probability = 0.33, Count = 2
minBytesDirect -> minBytesDirect: Probability = 0.50, Count = 3
minBytesDirect -> delegate.openInput: Probability = 0.17, Count = 1
Directory, -> .resolve: Probability = 1.00, Count = 2
mergeBufferSize -> mergeBufferSize: Probability = 1.00, Count = 2
DrawArc -> drawArc: Probability = 1.00, Count = 1
height,int -> height,int: Probability = 1.00, Count = 4
startAngle, -> startAngle,: Probability = 1.00, Count = 2
arcAngle -> arcAngle: Probability = 1.00, Count = 2
Logger.Check -> logger.check: Probability = 1.00, Count = 8
POILogger.WARN -> POILogger.WARN: Probability = 1.00, Count = 8
Logger.Log -> logger.log: Probability = 1.00, Count = 8
"DrawArc -> POILogger.WARN,"drawArc: Probability = 1.00, Count = 1
UpdateUserSettingsResponse -> UpdateUserSettingsResult: Probability = 1.00, Count = 1
UpdateUserSettings -> updateUserSettings: Probability = 1.00, Count = 1
UpdateUserSettingsRequest -> UpdateUserSettingsRequest: Probability = 1.00, Count = 1
Invoke<UpdateUserSettingsResponse> -> executeUpdateUserSettings: Probability = 1.00, Count = 1
DeleteDiskSnapshotResponse -> DeleteDiskSnapshotResult: Probability = 1.00, Count = 1
DeleteDiskSnapshot -> deleteDiskSnapshot: Probability = 1.00, Count = 1
DeleteDiskSnapshotRequest -> DeleteDiskSnapshotRequest: Probability = 1.00, Count = 1
Invoke<DeleteDiskSnapshotResponse> -> executeDeleteDiskSnapshot: Probability = 1.00, Count = 1
ColumnInfoRecord -> ColumnInfoRecord: Probability = 1.00, Count = 3
this.ColumnWidth -> setColumnWidth: Probability = 1.00, Count = 1
2275 -> 2275: Probability = 1.00, Count = 1
_options -> _options: Probability = 0.80, Count = 8
_options -> useNaturalLanguageFormulasFlag.setBoolean: Probability = 0.10, Count = 1
_options -> _options,: Probability = 0.10, Count = 1
_xf_index -> _xfIndex: Probability = 1.00, Count = 2
0x0f -> 0x0f: Probability = 1.00, Count = 1
field_6_reserved -> field_6_reserved: Probability = 1.00, Count = 3
getLong -> getLong: Probability = 1.00, Count = 3
libcore.io.SizeOf.LONG -> SizeOf.LONG: Probability = 1.00, Count = 11
libcore.io.Memory.peekLong -> Memory.peekLong: Probability = 1.00, Count = 1
DeleteKnownHostKeysResponse -> DeleteKnownHostKeysResult: Probability = 1.00, Count = 1
DeleteKnownHostKeys -> deleteKnownHostKeys: Probability = 1.00, Count = 1
DeleteKnownHostKeysRequest -> DeleteKnownHostKeysRequest: Probability = 1.00, Count = 1
Invoke<DeleteKnownHostKeysResponse> -> executeDeleteKnownHostKeys: Probability = 1.00, Count = 1
DeleteSigningCertificateRequest -> DeleteSigningCertificateRequest: Probability = 1.00, Count = 1
StopProcessingJobResponse -> StopProcessingJobResult: Probability = 1.00, Count = 1
StopProcessingJob -> stopProcessingJob: Probability = 1.00, Count = 1
StopProcessingJobRequest -> StopProcessingJobRequest: Probability = 1.00, Count = 1
Invoke<StopProcessingJobResponse> -> executeStopProcessingJob: Probability = 1.00, Count = 1
TermsEnum -> TermsEnum: Probability = 1.00, Count = 6
GetTermsEnum -> getTermsEnum: Probability = 1.00, Count = 1
Terms -> Terms: Probability = 0.67, Count = 2
Terms -> +":"+terms: Probability = 0.33, Count = 1
terms -> terms: Probability = 1.00, Count = 6
terms.GetIterator -> NONE:return: Probability = 0.17, Count = 1
terms.GetIterator -> TermsEnum.EMPTY: Probability = 0.17, Count = 1
terms.GetIterator -> ALL:return: Probability = 0.17, Count = 1
terms.GetIterator -> terms.iterator: Probability = 0.33, Count = 2
terms.GetIterator -> SINGLE:return: Probability = 0.17, Count = 1
SingleTermsEnum -> SingleTermsEnum: Probability = 1.00, Count = 2
default:throw -> default:throw: Probability = 1.00, Count = 7
"unhandled -> case": Probability = 1.00, Count = 1
backPos -> 1+count: Probability = 1.00, Count = 5
backIndex -> 1+count: Probability = 1.00, Count = 5
JapaneseTokenizerType[] -> Type[]: Probability = 1.00, Count = 3
newBackType -> newBackType: Probability = 0.29, Count = 4
newBackType -> Type[backID.length]: Probability = 0.14, Count = 2
newBackType -> backType,: Probability = 0.14, Count = 2
newBackType -> newBackType,: Probability = 0.14, Count = 2
newBackType -> backType.length: Probability = 0.14, Count = 2
newBackType -> backType: Probability = 0.14, Count = 2
IndexOutOfRangeException -> IndexOutOfBoundsException: Probability = 0.41, Count = 9
IndexOutOfRangeException -> ArrayIndexOutOfBoundsException: Probability = 0.59, Count = 13
accessible -> accessible: Probability = 1.00, Count = 1
_array[index] -> _array[: Probability = 1.00, Count = 2
slice -> slice: Probability = 0.87, Count = 20
slice -> pool.buffer: Probability = 0.04, Count = 1
slice -> offset0: Probability = 0.04, Count = 1
slice -> pool.byteOffset: Probability = 0.04, Count = 1
java.nio.ReadWriteLongArrayBuffer -> ReadWriteLongArrayBuffer: Probability = 1.00, Count = 3
+_position -> +: Probability = 0.50, Count = 5
+_position -> position: Probability = 0.50, Count = 5
ListProblemsResponse -> ListProblemsResult: Probability = 1.00, Count = 1
ListProblems -> listProblems: Probability = 1.00, Count = 1
ListProblemsRequest -> ListProblemsRequest: Probability = 1.00, Count = 1
Invoke<ListProblemsResponse> -> executeListProblems: Probability = 1.00, Count = 1
p, -> p,: Probability = 1.00, Count = 10
retval -> retval: Probability = 0.85, Count = 33
retval -> -1*: Probability = 0.08, Count = 3
retval -> "Returning: Probability = 0.03, Count = 1
retval -> String=: Probability = 0.03, Count = 1
retval -> byte[: Probability = 0.03, Count = 1
r1 -> r1: Probability = 1.00, Count = 15
r1, -> r1,: Probability = 1.00, Count = 6
PrintGridlinesRecord -> PrintGridlinesRecord: Probability = 1.00, Count = 2
rec -> copy: Probability = 0.33, Count = 15
rec -> rec: Probability = 0.56, Count = 25
rec -> rec.getSid: Probability = 0.07, Count = 3
rec -> addUnknownRecord: Probability = 0.04, Count = 2
HSSFCellStyle -> HSSFCellStyle: Probability = 0.70, Count = 7
HSSFCellStyle -> this.cloneStyleFrom: Probability = 0.10, Count = 1
HSSFCellStyle -> another,: Probability = 0.10, Count = 1
HSSFCellStyle -> XSSFCellStyle": Probability = 0.10, Count = 1
GetColumnStyle -> getColumnStyle: Probability = 1.00, Count = 1
styleIndex -> styleIndex: Probability = 0.62, Count = 5
styleIndex -> _sheet.getXFIndexForColAt: Probability = 0.12, Count = 1
styleIndex -> 0xf: Probability = 0.12, Count = 1
styleIndex -> _book.getExFormatAt: Probability = 0.12, Count = 1
ExtendedFormatRecord -> ExtendedFormatRecord: Probability = 1.00, Count = 12
xf -> xf: Probability = 0.67, Count = 4
xf -> createExtendedFormat: Probability = 0.17, Count = 1
xf -> records.setXfpos: Probability = 0.17, Count = 1
styleIndex, -> styleIndex,: Probability = 1.00, Count = 1
xf, -> xf,: Probability = 0.50, Count = 1
xf, -> _book: Probability = 0.50, Count = 1
Search.Query -> Query: Probability = 0.88, Count = 7
Search.Query -> makeLuceneQueryField: Probability = 0.12, Count = 1
MakeLuceneQueryFieldNoBoost -> makeLuceneQueryFieldNoBoost: Probability = 1.00, Count = 5
q.Boost -> getWeight: Probability = 1.00, Count = 1
numPoints -> numPoints: Probability = 0.60, Count = 3
numPoints -> pAt[: Probability = 0.20, Count = 1
numPoints -> numPoints]: Probability = 0.20, Count = 1
pAt[n] -> pAt[n]: Probability = 1.00, Count = 2
DescribeEngineDefaultParametersRequest -> DescribeEngineDefaultParametersRequest: Probability = 1.00, Count = 3
dbParameterGroupFamily -> dBParameterGroupFamily: Probability = 1.00, Count = 3
_dbParameterGroupFamily -> setDBParameterGroupFamily: Probability = 1.00, Count = 2
DeleteClientCertificateResponse -> DeleteClientCertificateResult: Probability = 1.00, Count = 1
DeleteClientCertificate -> deleteClientCertificate: Probability = 1.00, Count = 1
DeleteClientCertificateRequest -> DeleteClientCertificateRequest: Probability = 1.00, Count = 1
Invoke<DeleteClientCertificateResponse> -> executeDeleteClientCertificate: Probability = 1.00, Count = 1
thisByte -> thisByte,: Probability = 0.27, Count = 3
thisByte -> thisByte: Probability = 0.73, Count = 8
otherByte -> otherByte: Probability = 0.92, Count = 12
otherByte -> thisByte: Probability = 0.08, Count = 1
ReadByte -> byte: Probability = 0.43, Count = 6
ReadByte -> readByte: Probability = 0.57, Count = 8
_in.ReadByte -> _in.readByte: Probability = 1.00, Count = 1
SendBounceResponse -> SendBounceResult: Probability = 1.00, Count = 1
SendBounce -> sendBounce: Probability = 1.00, Count = 1
SendBounceRequest -> SendBounceRequest: Probability = 1.00, Count = 1
Invoke<SendBounceResponse> -> executeSendBounce: Probability = 1.00, Count = 1
dn -> dn: Probability = 1.00, Count = 9
ve1 -> ve1: Probability = 1.00, Count = 7
N -> N: Probability = 0.83, Count = 5
N -> 8191: Probability = 0.17, Count = 1
StatsLib.kthSmallest -> StatsLib.kthSmallest: Probability = 0.83, Count = 5
StatsLib.kthSmallest -> ds,: Probability = 0.17, Count = 1
ds, -> StatsLib.kthLargest: Probability = 0.25, Count = 2
ds, -> ds,: Probability = 0.75, Count = 6
GetIndexOfFormattingRun -> getIndexOfFormattingRun: Probability = 1.00, Count = 1
r.CharacterPos -> r.getCharacterPos: Probability = 1.00, Count = 4
GetEntryObjectId -> getEntryObjectId: Probability = 1.00, Count = 1
IdBuffer, -> idBuffer: Probability = 0.30, Count = 3
IdBuffer, -> ,: Probability = 0.40, Count = 4
IdBuffer, -> idOffset: Probability = 0.30, Count = 3
IdOffset -> ): Probability = 1.00, Count = 2
dflt -> dflt: Probability = 1.00, Count = 14
temp -> vals[]: Probability = 0.17, Count = 7
temp -> valByRound.get: Probability = 0.20, Count = 8
temp -> name: Probability = 0.20, Count = 8
temp -> temp: Probability = 0.33, Count = 13
temp -> CountUtils.countArg: Probability = 0.03, Count = 1
temp -> args[i],: Probability = 0.03, Count = 1
temp -> double: Probability = 0.03, Count = 1
temp -> modify: Probability = 0.03, Count = 1
vals -> vals: Probability = 0.42, Count = 11
vals -> valByRound.put: Probability = 0.27, Count = 7
vals -> name,: Probability = 0.31, Count = 8
vals[roundNumber -> vals[roundNumber: Probability = 1.00, Count = 14
vals.Length] -> vals.length]: Probability = 1.00, Count = 14
sval -> sval: Probability = 0.35, Count = 17
sval -> props.getProperty: Probability = 0.15, Count = 7
sval -> "": Probability = 0.12, Count = 6
sval -> +: Probability = 0.12, Count = 6
sval -> .booleanValue: Probability = 0.04, Count = 2
sval -> propToBooleanArray: Probability = 0.04, Count = 2
sval -> propToIntArray: Probability = 0.04, Count = 2
sval -> sval.indexOf: Probability = 0.06, Count = 3
sval -> ":\\": Probability = 0.02, Count = 1
sval -> propToDoubleArray: Probability = 0.04, Count = 2
sval.IndexOf -> sval.indexOf: Probability = 0.34, Count = 13
sval.IndexOf -> sval: Probability = 0.32, Count = 12
sval.IndexOf -> ":": Probability = 0.08, Count = 3
sval.IndexOf -> sval.substring: Probability = 0.26, Count = 10
colName -> colName: Probability = 0.94, Count = 16
colName -> colForValByRound.values: Probability = 0.06, Count = 1
sval.Substring -> colForValByRound.put: Probability = 0.39, Count = 7
sval.Substring -> name,: Probability = 0.33, Count = 6
sval.Substring -> sval: Probability = 0.06, Count = 1
sval.Substring -> sval.substring: Probability = 0.22, Count = 4
valByRound[name] -> vals: Probability = 1.00, Count = 11
SetCaching -> setCaching: Probability = 1.00, Count = 1
maxDocsToCache, -> maxDocsToCache,: Probability = 1.00, Count = 1
cacheScores -> cacheScores: Probability = 1.00, Count = 4
this.maxDocsToCache -> this.maxDocsToCache: Probability = 1.00, Count = 2
maxDocsToCache -> maxDocsToCache: Probability = 1.00, Count = 1
this.maxCacheRAMMB -> this.maxCacheRAMMB: Probability = 1.00, Count = 2
this.cacheScores -> this.cacheScores: Probability = 1.00, Count = 2
IsValidTermOrPhrase -> isValidTermOrPhrase: Probability = 1.00, Count = 1
IList<TermInfo> -> List<TermInfo>: Probability = 1.00, Count = 2
phraseCandidate -> phraseCandidate: Probability = 1.00, Count = 4
phraseCandidate.Count -> phraseCandidate.size: Probability = 1.00, Count = 2
nextPos -> phraseCandidate.get: Probability = 0.17, Count = 2
nextPos -> .getPosition: Probability = 0.17, Count = 2
nextPos -> nextPos: Probability = 0.67, Count = 8
Math.Abs -> Math.abs: Probability = 1.00, Count = 6
StartWorkflowExecutionResponse -> Run: Probability = 1.00, Count = 1
StartWorkflowExecution -> startWorkflowExecution: Probability = 1.00, Count = 1
StartWorkflowExecutionRequest -> StartWorkflowExecutionRequest: Probability = 1.00, Count = 1
Invoke<StartWorkflowExecutionResponse> -> executeStartWorkflowExecution: Probability = 1.00, Count = 1
NextKey -> nextKey: Probability = 1.00, Count = 2
GoNext -> goNext: Probability = 1.00, Count = 1
outerInstance.keys[lastPos] -> keys[lastPos]: Probability = 1.00, Count = 1
ContainsResult -> ContainsResult: Probability = 1.00, Count = 1
Contains -> contains: Probability = 0.88, Count = 14
Contains -> Object: Probability = 0.12, Count = 2
MayContainValue -> mayContainValue: Probability = 1.00, Count = 1
GetMethodResponseResponse -> GetMethodResponseResult: Probability = 1.00, Count = 1
GetMethodResponse -> getMethodResponse: Probability = 0.50, Count = 1
GetMethodResponse -> GetMethodResult: Probability = 0.50, Count = 1
GetMethodResponseRequest -> GetMethodResponseRequest: Probability = 1.00, Count = 1
Invoke<GetMethodResponseResponse> -> executeGetMethodResponse: Probability = 1.00, Count = 1
SetValue -> setValue: Probability = 1.00, Count = 6
_value -> _value: Probability = 0.71, Count = 17
_value -> setValue: Probability = 0.29, Count = 7
_isError -> _isError: Probability = 1.00, Count = 1
elementAt -> elementAt: Probability = 1.00, Count = 1
elementData[location] -> elementData[location]: Probability = 1.00, Count = 1
arrayIndexOutOfBoundsException -> arrayIndexOutOfBoundsException: Probability = 1.00, Count = 1
255L -> 255L: Probability = 1.00, Count = 3
IterationRecord -> IterationRecord: Probability = 1.00, Count = 3
RequiresCommitBody -> requiresCommitBody: Probability = 1.00, Count = 6
a.RequiresCommitBody -> a.requiresCommitBody: Probability = 1.00, Count = 1
UpdateTrafficPolicyCommentResponse -> UpdateTrafficPolicyCommentResult: Probability = 1.00, Count = 1
UpdateTrafficPolicyComment -> updateTrafficPolicyComment: Probability = 1.00, Count = 1
UpdateTrafficPolicyCommentRequest -> UpdateTrafficPolicyCommentRequest: Probability = 1.00, Count = 1
Invoke<UpdateTrafficPolicyCommentResponse> -> executeUpdateTrafficPolicyComment: Probability = 1.00, Count = 1
UpdatePrimaryEmailAddressResponse -> UpdatePrimaryEmailAddressResult: Probability = 1.00, Count = 1
UpdatePrimaryEmailAddress -> updatePrimaryEmailAddress: Probability = 1.00, Count = 1
UpdatePrimaryEmailAddressRequest -> UpdatePrimaryEmailAddressRequest: Probability = 1.00, Count = 1
Invoke<UpdatePrimaryEmailAddressResponse> -> executeUpdatePrimaryEmailAddress: Probability = 1.00, Count = 1
java.util.regex.Pattern -> Pattern: Probability = 1.00, Count = 3
compile -> compile: Probability = 1.00, Count = 1
pattern_1 -> pattern: Probability = 1.00, Count = 1
pattern_1, -> pattern,: Probability = 1.00, Count = 1
hash, -> hash,: Probability = 1.00, Count = 8
c1 -> c1: Probability = 0.67, Count = 4
c1 -> MutableValue>: Probability = 0.33, Count = 2
c2 -> c2: Probability = 1.00, Count = 5
13 -> 13: Probability = 1.00, Count = 5
m -> m: Probability = 0.87, Count = 41
m -> dsq.distanceSubQueryNotAllowed: Probability = 0.02, Count = 1
m -> LexerATNSimulator.debug: Probability = 0.02, Count = 1
m -> mtp[0]: Probability = 0.02, Count = 1
m -> s1.length: Probability = 0.02, Count = 1
m -> s2.length: Probability = 0.02, Count = 1
m -> mtp[1]: Probability = 0.02, Count = 1
^ -> ^: Probability = 1.00, Count = 21
Width -> getWidth: Probability = 1.00, Count = 5
Height -> getHeight: Probability = 1.00, Count = 6
ShardRef -> lessThan: Probability = 0.33, Count = 2
ShardRef -> ShardRef: Probability = 0.67, Count = 4
second -> second: Probability = 1.00, Count = 8
FieldDoc -> FieldDoc: Probability = 0.67, Count = 6
FieldDoc -> firstFD: Probability = 0.11, Count = 1
FieldDoc -> shardHits[first.shardIndex][first.hitIndex]: Probability = 0.11, Count = 1
FieldDoc -> secondFD: Probability = 0.11, Count = 1
first.HitIndex -> tieBreakLessThan: Probability = 0.40, Count = 2
first.HitIndex -> first,: Probability = 0.40, Count = 2
first.HitIndex -> firstScoreDoc,: Probability = 0.20, Count = 1
second.HitIndex -> firstFD,: Probability = 0.14, Count = 1
second.HitIndex -> second,: Probability = 0.29, Count = 2
second.HitIndex -> secondFD,: Probability = 0.14, Count = 1
second.HitIndex -> tieBreaker: Probability = 0.14, Count = 1
second.HitIndex -> secondScoreDoc,: Probability = 0.14, Count = 1
second.HitIndex -> tieBreakerComparator: Probability = 0.14, Count = 1
UTF8toUTF16 -> UTF8toUTF16: Probability = 1.00, Count = 2
bytesRef, -> bytesRef,: Probability = 1.00, Count = 1
bytesRef.Bytes, -> bytesRef.bytes,: Probability = 1.00, Count = 1
bytesRef.Offset, -> bytesRef.offset,: Probability = 1.00, Count = 1
bytesRef.Length, -> bytesRef.length,: Probability = 1.00, Count = 1
Trie -> Trie: Probability = 0.54, Count = 19
Trie -> optimize: Probability = 0.11, Count = 4
Trie -> orig: Probability = 0.11, Count = 4
Trie -> List<CharSequence>: Probability = 0.11, Count = 4
Trie -> cmds: Probability = 0.11, Count = 4
cmds -> orig.cmds: Probability = 1.00, Count = 4
orig.cmds -> List<Row>: Probability = 1.00, Count = 7
IList<Row> -> ArrayList<>: Probability = 0.29, Count = 4
IList<Row> -> orig.rows: Probability = 0.29, Count = 4
IList<Row> -> remap[]: Probability = 0.29, Count = 4
IList<Row> -> List<Row>: Probability = 0.14, Count = 2
orows -> orows: Probability = 1.00, Count = 5
remap -> int[orows.size: Probability = 0.40, Count = 4
remap -> remap: Probability = 0.60, Count = 6
remap, -> remap,: Probability = 1.00, Count = 5
RemoveGaps -> removeGaps: Probability = 1.00, Count = 4
orig.root, -> orig.root,: Probability = 1.00, Count = 3
List<Row> -> ArrayList<Row>: Probability = 1.00, Count = 4
orig.forward, -> orig.forward,: Probability = 1.00, Count = 4
remap[orig.root], -> remap[orig.root],: Probability = 1.00, Count = 3
cmds, -> cmds,: Probability = 1.00, Count = 4
CreateCustomConstraint -> createCustomConstraint: Probability = 1.00, Count = 1
DVConstraint.CreateCustomFormulaConstraint -> DVConstraint.createCustomFormulaConstraint: Probability = 1.00, Count = 1
DescribeLoadBalancerPolicyTypesResponse -> DescribeLoadBalancerPolicyTypesResult: Probability = 1.00, Count = 2
DescribeLoadBalancerPolicyTypes -> describeLoadBalancerPolicyTypes: Probability = 1.00, Count = 3
DescribeLoadBalancerPolicyTypesRequest -> DescribeLoadBalancerPolicyTypesRequest: Probability = 1.00, Count = 2
NIOFSIndexInput -> NIOFSIndexInput: Probability = 1.00, Count = 4
base.Clone -> super.clone: Probability = 1.00, Count = 4
clone.isClone -> clone.isClone: Probability = 1.00, Count = 2
getTotalSLLATNLookaheadOps -> getTotalSLLATNLookaheadOps: Probability = 1.00, Count = 1
DecisionInfo[] -> DecisionInfo[]: Probability = 1.00, Count = 9
decisions -> decisions: Probability = 1.00, Count = 9
atnSimulator.getDecisionInfo -> atnSimulator.getDecisionInfo: Probability = 1.00, Count = 8
decisions.Length -> decisions.length: Probability = 0.71, Count = 5
decisions.Length -> i<decisions.length: Probability = 0.29, Count = 2
decisions[i].SLL_ATNTransitions -> decisions[i].SLL_ATNTransitions: Probability = 1.00, Count = 2
UpdateEndpointResponse -> UpdateEndpointResult: Probability = 1.00, Count = 1
UpdateEndpoint -> updateEndpoint: Probability = 1.00, Count = 1
UpdateEndpointRequest -> UpdateEndpointRequest: Probability = 1.00, Count = 1
Invoke<UpdateEndpointResponse> -> executeUpdateEndpoint: Probability = 1.00, Count = 1
GetEmailChannelResponse -> GetEmailChannelResult: Probability = 1.00, Count = 1
GetEmailChannel -> getEmailChannel: Probability = 1.00, Count = 1
GetEmailChannelRequest -> GetEmailChannelRequest: Probability = 1.00, Count = 1
Invoke<GetEmailChannelResponse> -> executeGetEmailChannel: Probability = 1.00, Count = 1
ListPhoneNumberOrdersResponse -> ListPhoneNumberOrdersResult: Probability = 1.00, Count = 1
ListPhoneNumberOrders -> listPhoneNumberOrders: Probability = 1.00, Count = 1
ListPhoneNumberOrdersRequest -> ListPhoneNumberOrdersRequest: Probability = 1.00, Count = 1
Invoke<ListPhoneNumberOrdersResponse> -> executeListPhoneNumberOrders: Probability = 1.00, Count = 1
UpdateBuildResponse -> UpdateBuildResult: Probability = 1.00, Count = 1
UpdateBuild -> updateBuild: Probability = 1.00, Count = 1
UpdateBuildRequest -> UpdateBuildRequest: Probability = 1.00, Count = 1
Invoke<UpdateBuildResponse> -> executeUpdateBuild: Probability = 1.00, Count = 1
EscherSerializationListener -> EscherSerializationListener: Probability = 1.00, Count = 12
listener.BeforeRecordSerialize -> listener.beforeRecordSerialize: Probability = 0.93, Count = 13
listener.BeforeRecordSerialize -> getRecordId: Probability = 0.07, Count = 1
RecordId, -> getRecordId: Probability = 0.50, Count = 25
RecordId, -> ,: Probability = 0.50, Count = 25
LittleEndian.PutShort -> LittleEndian.putShort: Probability = 0.86, Count = 44
LittleEndian.PutShort -> field_1_flag: Probability = 0.02, Count = 1
LittleEndian.PutShort -> field_2_col1: Probability = 0.02, Count = 1
LittleEndian.PutShort -> field_3_dx1: Probability = 0.02, Count = 1
LittleEndian.PutShort -> 14,: Probability = 0.02, Count = 1
LittleEndian.PutShort -> field_4_row1: Probability = 0.02, Count = 1
LittleEndian.PutShort -> !shortRecord: Probability = 0.02, Count = 1
LittleEndian.PutShort -> field_5_dy1: Probability = 0.02, Count = 1
RecordId -> getRecordId: Probability = 1.00, Count = 13
remainingBytes -> remainingBytes: Probability = 0.79, Count = 19
remainingBytes -> offset+2,: Probability = 0.12, Count = 3
remainingBytes -> r.getRecordSize: Probability = 0.08, Count = 2
8, -> 8,: Probability = 1.00, Count = 7
listener.AfterRecordSerialize -> listener.afterRecordSerialize: Probability = 1.00, Count = 13
RecordSize, -> getRecordSize: Probability = 0.43, Count = 6
RecordSize, -> ,: Probability = 0.57, Count = 8
NGit.Api.CleanCommand -> CleanCommand: Probability = 1.00, Count = 2
SetDryRun -> setDryRun: Probability = 1.00, Count = 2
dryRun -> dryRun: Probability = 1.00, Count = 5
this.dryRun -> this.dryRun: Probability = 1.00, Count = 2
DescribeClusterVersionsResponse -> DescribeClusterVersionsResult: Probability = 1.00, Count = 2
DescribeClusterVersions -> describeClusterVersions: Probability = 1.00, Count = 3
DescribeClusterVersionsRequest -> DescribeClusterVersionsRequest: Probability = 1.00, Count = 2
Invoke<DescribeClusterVersionsResponse> -> executeDescribeClusterVersions: Probability = 1.00, Count = 1
DescribeWorkspacesResponse -> DescribeWorkspacesResult: Probability = 1.00, Count = 2
DescribeWorkspaces -> describeWorkspaces: Probability = 1.00, Count = 2
DescribeWorkspacesRequest -> DescribeWorkspacesRequest: Probability = 0.67, Count = 2
DescribeWorkspacesRequest -> describeWorkspaces: Probability = 0.33, Count = 1
Invoke<DescribeWorkspacesResponse> -> executeDescribeWorkspaces: Probability = 1.00, Count = 1
NB.EncodeInt32 -> b[o]: Probability = 0.20, Count = 1
NB.EncodeInt32 -> b[o: Probability = 0.80, Count = 4
SetStackPolicyResponse -> SetStackPolicyResult: Probability = 1.00, Count = 1
SetStackPolicy -> setStackPolicy: Probability = 1.00, Count = 1
SetStackPolicyRequest -> SetStackPolicyRequest: Probability = 1.00, Count = 1
Invoke<SetStackPolicyResponse> -> executeSetStackPolicy: Probability = 1.00, Count = 1
GetXFAt -> getXFAt: Probability = 1.00, Count = 2
coffset -> coffset: Probability = 1.00, Count = 3
field_3_rks[coffset].xf -> field_3_rks[coffset].xf: Probability = 1.00, Count = 1
src.Length, -> src.length,: Probability = 1.00, Count = 6
srcOffset -> srcOffset: Probability = 1.00, Count = 10
src[i] -> src[i]: Probability = 1.00, Count = 5
ReceiveMessageResponse -> ReceiveMessageResult: Probability = 1.00, Count = 2
ReceiveMessage -> receiveMessage: Probability = 1.00, Count = 3
ReceiveMessageRequest -> ReceiveMessageRequest: Probability = 1.00, Count = 2
request.QueueUrl -> (: Probability = 0.10, Count = 1
request.QueueUrl -> .withQueueUrl: Probability = 0.90, Count = 9
NativeUnixIndexInput -> NativeUnixIndexInput: Probability = 0.75, Count = 3
NativeUnixIndexInput -> other.toString: Probability = 0.25, Count = 1
this.bufferSize -> this.bufferSize: Probability = 1.00, Count = 2
isOpen -> isOpen: Probability = 1.00, Count = 3
Merger -> Merger: Probability = 0.25, Count = 1
Merger -> ThreeWayMerger: Probability = 0.75, Count = 3
NewMerger -> newMerger: Probability = 1.00, Count = 5
db, -> db,: Probability = 1.00, Count = 7
inCore -> inCore: Probability = 1.00, Count = 4
StrategyOneSided.OneSide -> OneSide: Probability = 1.00, Count = 1
treeIndex -> treeIndex: Probability = 1.00, Count = 1
flush -> flush: Probability = 1.00, Count = 11
@lock -> lock: Probability = 0.96, Count = 27
@lock -> ByteArrayOutputStream: Probability = 0.04, Count = 1
setError -> setError: Probability = 1.00, Count = 10
DisassociateIamInstanceProfileResponse -> DisassociateIamInstanceProfileResult: Probability = 1.00, Count = 1
DisassociateIamInstanceProfile -> disassociateIamInstanceProfile: Probability = 1.00, Count = 1
DisassociateIamInstanceProfileRequest -> DisassociateIamInstanceProfileRequest: Probability = 1.00, Count = 1
Invoke<DisassociateIamInstanceProfileResponse> -> executeDisassociateIamInstanceProfile: Probability = 1.00, Count = 1
BeginTask -> beginTask: Probability = 1.00, Count = 1
title, -> title,: Probability = 1.00, Count = 3
totalWork -> totalWork: Probability = 1.00, Count = 2
!IsMainThread -> !isMainThread: Probability = 1.00, Count = 3
pm.BeginTask -> pm.beginTask: Probability = 1.00, Count = 2
letChildReport -> letChildReport: Probability = 1.00, Count = 3
EdgeNGramTokenFilter -> EdgeNGramTokenFilter: Probability = 1.00, Count = 1
minGramSize, -> minGramSize,: Probability = 0.50, Count = 2
minGramSize, -> maxGramSize,: Probability = 0.50, Count = 2
fastForward -> fastForward: Probability = 1.00, Count = 2
string.Empty -> "": Probability = 1.00, Count = 23
forceUpdate -> forceUpdate: Probability = 1.00, Count = 5
ListJournalS3ExportsResponse -> ListJournalS3ExportsResult: Probability = 1.00, Count = 1
ListJournalS3Exports -> listJournalS3Exports: Probability = 1.00, Count = 1
ListJournalS3ExportsRequest -> ListJournalS3ExportsRequest: Probability = 1.00, Count = 1
Invoke<ListJournalS3ExportsResponse> -> executeListJournalS3Exports: Probability = 1.00, Count = 1
lookingAt -> lookingAt: Probability = 1.00, Count = 1
matchFound -> matchFound: Probability = 1.00, Count = 9
lookingAtImpl -> lookingAtImpl: Probability = 1.00, Count = 1
matchOffsets -> matchOffsets: Probability = 1.00, Count = 4
findPos -> findPos: Probability = 1.00, Count = 3
matchOffsets[1] -> matchOffsets[1]: Probability = 1.00, Count = 3
DescribeIdentityUsageResponse -> DescribeIdentityUsageResult: Probability = 1.00, Count = 1
DescribeIdentityUsage -> describeIdentityUsage: Probability = 1.00, Count = 1
DescribeIdentityUsageRequest -> DescribeIdentityUsageRequest: Probability = 1.00, Count = 1
Invoke<DescribeIdentityUsageResponse> -> executeDescribeIdentityUsage: Probability = 1.00, Count = 1
carry -> carry: Probability = 0.80, Count = 4
carry -> carryFlags: Probability = 0.20, Count = 1
_predicate -> _predicate: Probability = 1.00, Count = 2
defaultPredicate -> defaultPredicate: Probability = 1.00, Count = 1
ShowNoteCommand -> ShowNoteCommand: Probability = 1.00, Count = 2
NotesShow -> notesShow: Probability = 1.00, Count = 1
ResolveRoomResponse -> ResolveRoomResult: Probability = 1.00, Count = 1
ResolveRoom -> resolveRoom: Probability = 1.00, Count = 1
ResolveRoomRequest -> ResolveRoomRequest: Probability = 1.00, Count = 1
Invoke<ResolveRoomResponse> -> executeResolveRoom: Probability = 1.00, Count = 1
GetArea3DEval -> getArea3DEval: Probability = 0.43, Count = 3
GetArea3DEval -> aptg: Probability = 0.43, Count = 3
GetArea3DEval -> Area3DPxg: Probability = 0.14, Count = 1
Area3DPxg -> Area3DPxg: Probability = 1.00, Count = 2
sre -> sre: Probability = 0.67, Count = 14
sre -> ,: Probability = 0.19, Count = 4
sre -> aptg.getLastSheetName: Probability = 0.10, Count = 2
sre -> rptg.getExternSheetIndex: Probability = 0.05, Count = 1
aptg -> createExternSheetRefEvaluator: Probability = 0.60, Count = 3
aptg -> aptg.getSheetName: Probability = 0.40, Count = 2
CreateExternSheetRefEvaluator -> ,: Probability = 0.50, Count = 2
CreateExternSheetRefEvaluator -> aptg.getExternalWorkbookNumber: Probability = 0.50, Count = 2
LazyAreaEval -> LazyAreaEval: Probability = 0.73, Count = 11
LazyAreaEval -> aptg.getFirstRow: Probability = 0.07, Count = 1
LazyAreaEval -> aptg.getFirstColumn: Probability = 0.13, Count = 2
LazyAreaEval -> ,: Probability = 0.07, Count = 1
aptg.FirstColumn,aptg.LastRow, -> ,: Probability = 0.86, Count = 6
aptg.FirstColumn,aptg.LastRow, -> ): Probability = 0.14, Count = 1
aptg.FirstRow, -> ,aptg.getLastRow: Probability = 0.75, Count = 3
aptg.FirstRow, -> aptg.getFirstColumn: Probability = 0.25, Count = 1
aptg.LastColumn, -> aptg.getLastColumn: Probability = 0.50, Count = 3
aptg.LastColumn, -> ,: Probability = 0.50, Count = 3
DoubleMetaphoneFilterFactory -> DoubleMetaphoneFilterFactory: Probability = 1.00, Count = 1
inject -> inject: Probability = 0.67, Count = 4
inject -> maxCodeLength,: Probability = 0.17, Count = 1
inject -> this.encoder.setMaxCodeLen: Probability = 0.17, Count = 1
maxCodeLength -> maxCodeLength: Probability = 1.00, Count = 3
MAX_CODE_LENGTH, -> MAX_CODE_LENGTH,: Probability = 1.00, Count = 2
DocOffsetSorter -> DocOffsetSorter: Probability = 1.00, Count = 1
maxDoc -> maxDoc: Probability = 1.00, Count = 4
64 -> 64: Probability = 1.00, Count = 15
this.tmpDocs -> this.tmpDocs: Probability = 1.00, Count = 2
int[maxDoc -> int[maxDoc: Probability = 1.00, Count = 2
64] -> 64]: Probability = 1.00, Count = 3
this.tmpOffsets -> this.tmpOffsets: Probability = 1.00, Count = 1
long[maxDoc -> long[maxDoc: Probability = 1.00, Count = 1
EnableInsightRulesResponse -> EnableInsightRulesResult: Probability = 1.00, Count = 1
EnableInsightRules -> enableInsightRules: Probability = 1.00, Count = 1
EnableInsightRulesRequest -> EnableInsightRulesRequest: Probability = 1.00, Count = 1
Invoke<EnableInsightRulesResponse> -> executeEnableInsightRules: Probability = 1.00, Count = 1
SemanticContext.AND -> AND: Probability = 1.00, Count = 6
this.opnds, -> this.opnds,: Probability = 1.00, Count = 2
other.opnds -> other.opnds: Probability = 1.00, Count = 2
Ptg[] -> Ptg[]: Probability = 1.00, Count = 25
ptgs -> ptgs: Probability = 0.66, Count = 31
ptgs -> ptgs.length: Probability = 0.06, Count = 3
ptgs -> shifter.adjustFormula: Probability = 0.11, Count = 5
ptgs -> rule.setParsedExpression2: Probability = 0.02, Count = 1
ptgs -> CFRule12Record: Probability = 0.06, Count = 3
ptgs -> rule12.getParsedExpressionScale: Probability = 0.02, Count = 1
ptgs -> rule12.setParsedExpressionScale: Probability = 0.02, Count = 1
ptgs -> Ptg.getEncodedSize: Probability = 0.02, Count = 1
ptgs -> encodedData: Probability = 0.02, Count = 1
ptgs.Length -> Ptg: Probability = 0.20, Count = 2
ptgs.Length -> ptg: Probability = 0.30, Count = 3
ptgs.Length -> ptgs: Probability = 0.50, Count = 5
iterateOn -> iterateOn: Probability = 1.00, Count = 2
_flags -> _flags: Probability = 1.00, Count = 6
iterationOn.SetBoolean -> iterationOn.setBoolean: Probability = 1.00, Count = 1
UnlinkIdentityResponse -> UnlinkIdentityResult: Probability = 1.00, Count = 1
UnlinkIdentity -> unlinkIdentity: Probability = 1.00, Count = 1
UnlinkIdentityRequest -> UnlinkIdentityRequest: Probability = 1.00, Count = 1
Invoke<UnlinkIdentityResponse> -> executeUnlinkIdentity: Probability = 1.00, Count = 1
CreateThreatIntelSetResponse -> CreateThreatIntelSetResult: Probability = 1.00, Count = 1
CreateThreatIntelSet -> createThreatIntelSet: Probability = 1.00, Count = 1
CreateThreatIntelSetRequest -> CreateThreatIntelSetRequest: Probability = 1.00, Count = 1
Invoke<CreateThreatIntelSetResponse> -> executeCreateThreatIntelSet: Probability = 1.00, Count = 1
TokenizedPhraseQueryNode -> TokenizedPhraseQueryNode: Probability = 1.00, Count = 1
DataItemRecord -> DataItemRecord: Probability = 1.00, Count = 1
isxvdData -> isxvdData: Probability = 1.00, Count = 2
df -> df: Probability = 0.62, Count = 8
df -> docCount: Probability = 0.23, Count = 3
df -> List<Explanation>: Probability = 0.15, Count = 2
in1.ReadString -> in.readString: Probability = 1.00, Count = 3
DeleteDBParameterGroupResponse -> DeleteDBParameterGroupResult: Probability = 1.00, Count = 1
DeleteDBParameterGroup -> deleteDBParameterGroup: Probability = 1.00, Count = 1
DeleteDBParameterGroupRequest -> DeleteDBParameterGroupRequest: Probability = 1.00, Count = 2
Invoke<DeleteDBParameterGroupResponse> -> executeDeleteDBParameterGroup: Probability = 1.00, Count = 1
GetReservedNodeExchangeOfferingsResponse -> GetReservedNodeExchangeOfferingsResult: Probability = 1.00, Count = 1
GetReservedNodeExchangeOfferings -> getReservedNodeExchangeOfferings: Probability = 1.00, Count = 1
GetReservedNodeExchangeOfferingsRequest -> GetReservedNodeExchangeOfferingsRequest: Probability = 1.00, Count = 1
Invoke<GetReservedNodeExchangeOfferingsResponse> -> executeGetReservedNodeExchangeOfferings: Probability = 1.00, Count = 1
NextHighestPowerOfTwo -> long: Probability = 0.40, Count = 2
NextHighestPowerOfTwo -> nextHighestPowerOfTwo: Probability = 0.60, Count = 3
v-- -> v: Probability = 1.00, Count = 1
v++ -> v++: Probability = 1.00, Count = 6
RunInstancesResponse -> RunInstancesResult: Probability = 1.00, Count = 1
RunInstances -> runInstances: Probability = 1.00, Count = 1
RunInstancesRequest -> RunInstancesRequest: Probability = 1.00, Count = 2
Invoke<RunInstancesResponse> -> executeRunInstances: Probability = 1.00, Count = 1
ChangeMessageVisibilityBatchResponse -> ChangeMessageVisibilityBatchResult: Probability = 1.00, Count = 2
ChangeMessageVisibilityBatch -> changeMessageVisibilityBatch: Probability = 1.00, Count = 3
List<ChangeMessageVisibilityBatchRequestEntry> -> java.util.List<ChangeMessageVisibilityBatchRequestEntry>: Probability = 1.00, Count = 2
ChangeMessageVisibilityBatchRequest -> ChangeMessageVisibilityBatchRequest: Probability = 1.00, Count = 3
request.Entries -> .withEntries: Probability = 1.00, Count = 3
DeleteRealtimeEndpointResponse -> DeleteRealtimeEndpointResult: Probability = 1.00, Count = 1
DeleteRealtimeEndpoint -> deleteRealtimeEndpoint: Probability = 1.00, Count = 1
DeleteRealtimeEndpointRequest -> DeleteRealtimeEndpointRequest: Probability = 1.00, Count = 1
Invoke<DeleteRealtimeEndpointResponse> -> executeDeleteRealtimeEndpoint: Probability = 1.00, Count = 1
CreateDiskSnapshotResponse -> CreateDiskSnapshotResult: Probability = 1.00, Count = 1
CreateDiskSnapshot -> createDiskSnapshot: Probability = 1.00, Count = 1
CreateDiskSnapshotRequest -> CreateDiskSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CreateDiskSnapshotResponse> -> executeCreateDiskSnapshot: Probability = 1.00, Count = 1
checkNotClosed -> checkNotClosed: Probability = 1.00, Count = 7
markpos -> markpos: Probability = 1.00, Count = 4
ICUNormalizer2Filter -> ICUNormalizer2Filter: Probability = 1.00, Count = 2
normalizer -> normalizer: Probability = 1.00, Count = 10
ModifyImageAttributeResponse -> ModifyImageAttributeResult: Probability = 1.00, Count = 1
ModifyImageAttribute -> modifyImageAttribute: Probability = 1.00, Count = 1
ModifyImageAttributeRequest -> ModifyImageAttributeRequest: Probability = 1.00, Count = 2
Invoke<ModifyImageAttributeResponse> -> executeModifyImageAttribute: Probability = 1.00, Count = 1
Invoke<DescribeClusterSubnetGroupsResponse> -> executeDescribeClusterSubnetGroups: Probability = 1.00, Count = 1
StopQueryExecutionResponse -> StopQueryExecutionResult: Probability = 1.00, Count = 1
StopQueryExecution -> stopQueryExecution: Probability = 1.00, Count = 1
StopQueryExecutionRequest -> StopQueryExecutionRequest: Probability = 1.00, Count = 1
Invoke<StopQueryExecutionResponse> -> executeStopQueryExecution: Probability = 1.00, Count = 1
UpdateUserInfoRequest -> UpdateUserInfoRequest: Probability = 1.00, Count = 1
"UpdateUserInfo", -> "UpdateUserInfo",: Probability = 1.00, Count = 1
"/users" -> "/users": Probability = 1.00, Count = 2
DiscoverInputSchemaResponse -> DiscoverInputSchemaResult: Probability = 1.00, Count = 1
DiscoverInputSchema -> discoverInputSchema: Probability = 1.00, Count = 1
DiscoverInputSchemaRequest -> DiscoverInputSchemaRequest: Probability = 1.00, Count = 1
Invoke<DiscoverInputSchemaResponse> -> executeDiscoverInputSchema: Probability = 1.00, Count = 1
GetEnvironmentResponse -> GetEnvironmentResult: Probability = 1.00, Count = 1
GetEnvironment -> getEnvironment: Probability = 1.00, Count = 1
GetEnvironmentRequest -> GetEnvironmentRequest: Probability = 1.00, Count = 1
Invoke<GetEnvironmentResponse> -> executeGetEnvironment: Probability = 1.00, Count = 1
exists -> Boolean: Probability = 0.29, Count = 2
exists -> exists: Probability = 0.71, Count = 5
_exists -> setExists: Probability = 1.00, Count = 2
GetCalcMode -> getCalcMode: Probability = 1.00, Count = 3
AmazonS3EncryptionClient -> AmazonS3EncryptionClient: Probability = 1.00, Count = 2
materials -> EncryptionMaterials: Probability = 0.25, Count = 1
materials -> encryptionMaterials: Probability = 0.50, Count = 2
materials -> credentials,EncryptionMaterials: Probability = 0.25, Count = 1
S3CryptoConfig -> StaticEncryptionMaterialsProvider: Probability = 1.00, Count = 2
AmazonS3CryptoConfiguration -> encryptionMaterials: Probability = 1.00, Count = 2
AddRule -> addRule: Probability = 1.00, Count = 5
cfRule -> ConditionalFormattingRule: Probability = 0.33, Count = 3
cfRule -> cfRule: Probability = 0.67, Count = 6
cfRule.CfRuleRecord -> ): Probability = 0.33, Count = 2
cfRule.CfRuleRecord -> cfRule: Probability = 0.33, Count = 2
cfRule.CfRuleRecord -> cfRule.getCfRuleRecord: Probability = 0.33, Count = 2
descendingIterator -> descendingIterator: Probability = 1.00, Count = 2
descendingSet -> descendingSet: Probability = 1.00, Count = 2
.iterator -> .iterator: Probability = 1.00, Count = 4
DescribeSubnetGroupsResponse -> DescribeSubnetGroupsResult: Probability = 1.00, Count = 1
DescribeSubnetGroups -> describeSubnetGroups: Probability = 1.00, Count = 1
DescribeSubnetGroupsRequest -> DescribeSubnetGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeSubnetGroupsResponse> -> executeDescribeSubnetGroups: Probability = 1.00, Count = 1
tree -> blob: Probability = 0.22, Count = 2
tree -> tree: Probability = 0.78, Count = 7
FileMode.TREE, -> REGULAR_FILE,: Probability = 0.50, Count = 1
FileMode.TREE, -> TREE,: Probability = 0.50, Count = 1
subMap -> subMap: Probability = 1.00, Count = 2
fromInclusive, -> fromInclusive,: Probability = 1.00, Count = 4
fromInclusive -> fromInclusive: Probability = 1.00, Count = 2
toBound -> toBound: Probability = 1.00, Count = 4
this.pos -> pos: Probability = 0.73, Count = 8
this.pos -> this.pos: Probability = 0.27, Count = 3
this.lastPosition -> lastPosition: Probability = 0.71, Count = 5
this.lastPosition -> pos--: Probability = 0.29, Count = 2
IPMT -> ipmt: Probability = 1.00, Count = 8
per, -> per,: Probability = 1.00, Count = 11
DictionaryCompoundWordTokenFilter -> DictionaryCompoundWordTokenFilter: Probability = 1.00, Count = 1
dictionary, -> dictionary,: Probability = 1.00, Count = 4
minWordSize, -> minWordSize,: Probability = 1.00, Count = 2
minSubwordSize, -> minSubwordSize,: Probability = 1.00, Count = 2
maxSubwordSize, -> maxSubwordSize,: Probability = 1.00, Count = 2
onlyLongestMatch -> onlyLongestMatch: Probability = 1.00, Count = 4
r.Append -> r.append: Probability = 0.55, Count = 80
r.Append -> q.toString: Probability = 0.01, Count = 1
r.Append -> !p.eof: Probability = 0.01, Count = 2
r.Append -> p.getEntryFileMode: Probability = 0.01, Count = 1
r.Append -> p.getEntryObjectId: Probability = 0.01, Count = 1
r.Append -> .name: Probability = 0.01, Count = 2
r.Append -> p.getEntryPathString: Probability = 0.01, Count = 1
r.Append -> p.next: Probability = 0.01, Count = 1
r.Append -> subfilters[i].toString: Probability = 0.02, Count = 3
r.Append -> "PersonIdent[": Probability = 0.01, Count = 1
r.Append -> dtfmt.format: Probability = 0.01, Count = 1
r.Append -> sb.append: Probability = 0.01, Count = 2
r.Append -> b: Probability = 0.05, Count = 8
r.Append -> '"': Probability = 0.03, Count = 4
r.Append -> ': Probability = 0.07, Count = 10
r.Append -> chainlength: Probability = 0.01, Count = 2
r.Append -> "Ref[": Probability = 0.01, Count = 1
r.Append -> '=': Probability = 0.01, Count = 2
r.Append -> ObjectId.toString: Probability = 0.01, Count = 2
r.Append -> updateIndex: Probability = 0.01, Count = 2
r.Append -> ": Probability = 0.03, Count = 4
r.Append -> ]": Probability = 0.01, Count = 2
r.Append -> "Tag": Probability = 0.01, Count = 1
r.Append -> "=: Probability = 0.01, Count = 1
r.Append -> "object: Probability = 0.01, Count = 1
r.Append -> object.name: Probability = 0.01, Count = 1
r.Append -> "NOT_SET": Probability = 0.02, Count = 3
r.Append -> "tag: Probability = 0.01, Count = 1
r.Append -> "tagger: Probability = 0.01, Count = 1
r.Append -> cur.getName: Probability = 0.01, Count = 2
r.Append -> cur.getTarget: Probability = 0.01, Count = 1
r.Append -> cur.getObjectId: Probability = 0.01, Count = 1
r.ToString -> r.toString: Probability = 1.00, Count = 13
AssociateDeviceWithRoomResponse -> AssociateDeviceWithRoomResult: Probability = 1.00, Count = 1
AssociateDeviceWithRoom -> associateDeviceWithRoom: Probability = 1.00, Count = 1
AssociateDeviceWithRoomRequest -> AssociateDeviceWithRoomRequest: Probability = 1.00, Count = 1
Invoke<AssociateDeviceWithRoomResponse> -> executeAssociateDeviceWithRoom: Probability = 1.00, Count = 1
DeleteRetentionPolicyRequest -> DeleteRetentionPolicyRequest: Probability = 1.00, Count = 1
logGroupName -> logGroupName: Probability = 0.59, Count = 17
logGroupName -> ): Probability = 0.41, Count = 12
_logGroupName -> setLogGroupName: Probability = 0.55, Count = 12
_logGroupName -> (: Probability = 0.45, Count = 10
TypeTokenFilterFactory -> TypeTokenFilterFactory: Probability = 1.00, Count = 1
Require -> require: Probability = 1.00, Count = 9
useWhitelist -> useWhitelist: Probability = 1.00, Count = 2
ServerCertificate -> ServerCertificate: Probability = 1.00, Count = 1
ServerCertificateMetadata -> ServerCertificateMetadata: Probability = 1.00, Count = 2
serverCertificateMetadata, -> serverCertificateMetadata,: Probability = 1.00, Count = 1
_serverCertificateMetadata -> setServerCertificateMetadata: Probability = 1.00, Count = 1
serverCertificateMetadata -> serverCertificateMetadata: Probability = 1.00, Count = 1
c, -> c,: Probability = 1.00, Count = 25
queueControl -> queueControl: Probability = 0.62, Count = 5
queueControl -> !c.has: Probability = 0.12, Count = 1
queueControl -> c.add: Probability = 0.12, Count = 1
queueControl -> pList[i],: Probability = 0.12, Count = 1
SetFilePath -> setFilePath: Probability = 1.00, Count = 1
filePath -> filePath: Probability = 1.00, Count = 2
this.path -> this.path: Probability = 1.00, Count = 1
IsTraverseEmptyCells -> isTraverseEmptyCells: Probability = 1.00, Count = 1
traverseEmptyCells -> traverseEmptyCells: Probability = 1.00, Count = 3
QueryCustomerByIdRequest -> QueryCustomerByIdRequest: Probability = 1.00, Count = 1
"QueryCustomerById" -> "QueryCustomerById": Probability = 1.00, Count = 1
"/customer" -> "/customer": Probability = 1.00, Count = 1
MethodType.PUT -> MethodType.PUT: Probability = 1.00, Count = 11
OpenNLPPOSFilterFactory -> OpenNLPPOSFilterFactory: Probability = 1.00, Count = 1
posTaggerModelFile -> posTaggerModelFile: Probability = 1.00, Count = 2
POS_TAGGER_MODEL -> POS_TAGGER_MODEL: Probability = 1.00, Count = 1
args.Any -> !args.isEmpty: Probability = 1.00, Count = 5
GetLinkAttributesResponse -> GetLinkAttributesResult: Probability = 1.00, Count = 1
GetLinkAttributes -> getLinkAttributes: Probability = 1.00, Count = 1
GetLinkAttributesRequest -> GetLinkAttributesRequest: Probability = 1.00, Count = 1
Invoke<GetLinkAttributesResponse> -> executeGetLinkAttributes: Probability = 1.00, Count = 1
GetByteBlock -> getByteBlock: Probability = 1.00, Count = 3
byte[m_blockSize] -> byte[blockSize]: Probability = 1.00, Count = 3
CanonicalTreeParser -> CanonicalTreeParser: Probability = 1.00, Count = 3
in1.Sid -> in.getSid: Probability = 1.00, Count = 4
field_4_string_len -> field_4_string_len: Probability = 1.00, Count = 8
in1.ReadUByte -> in.readUByte: Probability = 1.00, Count = 15
logger.Log -> logger.log: Probability = 1.00, Count = 4
GetCampaignResponse -> GetCampaignResult: Probability = 1.00, Count = 1
GetCampaign -> getCampaign: Probability = 1.00, Count = 1
GetCampaignRequest -> GetCampaignRequest: Probability = 1.00, Count = 1
Invoke<GetCampaignResponse> -> executeGetCampaign: Probability = 1.00, Count = 1
isEmpty -> isEmpty: Probability = 0.86, Count = 18
isEmpty -> @Override: Probability = 0.14, Count = 3
backingMap.isEmpty -> backingMap.isEmpty: Probability = 1.00, Count = 1
Subtract -> subtract: Probability = 1.00, Count = 6
@object, -> object,: Probability = 0.94, Count = 16
@object, -> Boolean.TRUE: Probability = 0.06, Count = 1
inc -> inc: Probability = 1.00, Count = 9
outputs.Subtract -> outputs.subtract: Probability = 1.00, Count = 1
XFIndex -> getXFIndex: Probability = 1.00, Count = 7
hidden -> hidden: Probability = 1.00, Count = 2
EditList -> EditList: Probability = 0.75, Count = 3
EditList -> toEditList: Probability = 0.25, Count = 1
hunk -> HunkHeader: Probability = 1.00, Count = 1
hunks -> hunk: Probability = 0.25, Count = 1
hunks -> hunks: Probability = 0.75, Count = 3
hunk.ToEditList -> r.addAll: Probability = 0.50, Count = 1
hunk.ToEditList -> hunk.toEditList: Probability = 0.50, Count = 1
split -> split: Probability = 1.00, Count = 3
split.Length -> split.length: Probability = 1.00, Count = 1
split[0] -> split[0]: Probability = 1.00, Count = 1
columnIndex, -> columnIndex,: Probability = 1.00, Count = 5
shortCellNum -> shortCellNum: Probability = 1.00, Count = 2
HSSFCell -> HSSFCell: Probability = 0.67, Count = 4
HSSFCell -> cell.getCellValueRecord: Probability = 0.33, Count = 2
book, -> book,: Probability = 1.00, Count = 3
sheet, -> sheet,: Probability = 1.00, Count = 6
RowNum, -> getRowNum: Probability = 1.00, Count = 2
AddCell -> addCell: Probability = 1.00, Count = 3
Builder<BytesRef> -> this.terms.toArray: Probability = 0.20, Count = 1
Builder<BytesRef> -> int[this.positions.size: Probability = 0.40, Count = 2
Builder<BytesRef> -> fieldAndWeights.size: Probability = 0.20, Count = 1
Builder<BytesRef> -> positionsArray: Probability = 0.20, Count = 1
ModifyInstanceEventStartTimeResponse -> ModifyInstanceEventStartTimeResult: Probability = 1.00, Count = 1
ModifyInstanceEventStartTime -> modifyInstanceEventStartTime: Probability = 1.00, Count = 1
ModifyInstanceEventStartTimeRequest -> ModifyInstanceEventStartTimeRequest: Probability = 1.00, Count = 1
Invoke<ModifyInstanceEventStartTimeResponse> -> executeModifyInstanceEventStartTime: Probability = 1.00, Count = 1
CheckShowJsonItemName -> checkShowJsonItemName: Probability = 1.00, Count = 1
AnalyzerAnonymousHelper -> private: Probability = 0.20, Count = 2
AnalyzerAnonymousHelper -> final: Probability = 0.20, Count = 2
AnalyzerAnonymousHelper -> Integer: Probability = 0.20, Count = 2
AnalyzerAnonymousHelper -> positionIncrementGap: Probability = 0.10, Count = 1
AnalyzerAnonymousHelper -> AnalyzerFactory.this.positionIncrementGap: Probability = 0.10, Count = 1
AnalyzerAnonymousHelper -> offsetGap: Probability = 0.10, Count = 1
AnalyzerAnonymousHelper -> AnalyzerFactory.this.offsetGap: Probability = 0.10, Count = 1
list.Length -> list.length: Probability = 1.00, Count = 12
list[0], -> list[0],: Probability = 1.00, Count = 4
list[1] -> list[1]: Probability = 1.00, Count = 4
RevFilter[list.Length] -> RevFilter[list.length]: Probability = 1.00, Count = 2
list, -> list,: Probability = 1.00, Count = 4
subfilters, -> subfilters,: Probability = 1.00, Count = 4
OrRevFilter.List -> List: Probability = 1.00, Count = 4
DescribePrefixListsResponse -> DescribePrefixListsResult: Probability = 1.00, Count = 1
DescribePrefixLists -> describePrefixLists: Probability = 1.00, Count = 1
DescribePrefixListsRequest -> DescribePrefixListsRequest: Probability = 1.00, Count = 1
Invoke<DescribePrefixListsResponse> -> executeDescribePrefixLists: Probability = 1.00, Count = 1
CharVector -> CharVector: Probability = 0.88, Count = 7
CharVector -> array.clone: Probability = 0.12, Count = 1
cv -> cv: Probability = 1.00, Count = 2
cv.n -> cv.n: Probability = 1.00, Count = 1
this.n -> this.n: Probability = 1.00, Count = 4
CreateDatasetImportJobResponse -> CreateDatasetImportJobResult: Probability = 1.00, Count = 1
CreateDatasetImportJob -> createDatasetImportJob: Probability = 1.00, Count = 1
CreateDatasetImportJobRequest -> CreateDatasetImportJobRequest: Probability = 1.00, Count = 1
Invoke<CreateDatasetImportJobResponse> -> executeCreateDatasetImportJob: Probability = 1.00, Count = 1
GetRecommenderConfigurationsResponse -> GetRecommenderConfigurationsResult: Probability = 1.00, Count = 1
GetRecommenderConfigurations -> getRecommenderConfigurations: Probability = 1.00, Count = 1
GetRecommenderConfigurationsRequest -> GetRecommenderConfigurationsRequest: Probability = 1.00, Count = 1
Invoke<GetRecommenderConfigurationsResponse> -> executeGetRecommenderConfigurations: Probability = 1.00, Count = 1
SetOldPrefix -> setOldPrefix: Probability = 1.00, Count = 1
oldPrefix -> oldPrefix: Probability = 1.00, Count = 1
DescribeAvailabilityZonesResponse -> DescribeAvailabilityZonesResult: Probability = 1.00, Count = 2
DescribeAvailabilityZones -> describeAvailabilityZones: Probability = 1.00, Count = 3
DescribeAvailabilityZonesRequest -> DescribeAvailabilityZonesRequest: Probability = 1.00, Count = 2
this.expectedCharacter -> this.expectedCharacter: Probability = 1.00, Count = 1
PutCompressedUnicode -> putCompressedUnicode: Probability = 1.00, Count = 3
ISO_8859_1.GetBytes -> input.getBytes: Probability = 0.33, Count = 2
ISO_8859_1.GetBytes -> ISO_8859_1: Probability = 0.67, Count = 4
mKeys.Length -> mKeys.length: Probability = 0.71, Count = 10
mKeys.Length -> ArrayUtils.idealIntArraySize: Probability = 0.29, Count = 4
nkeys -> nkeys: Probability = 0.67, Count = 8
nkeys -> mKeys: Probability = 0.33, Count = 4
int[n] -> int[n]: Probability = 1.00, Count = 6
nvalues -> nvalues: Probability = 0.67, Count = 8
nvalues -> mValues: Probability = 0.33, Count = 4
ClearEscherRecords -> clearEscherRecords: Probability = 1.00, Count = 1
escherRecords.Clear -> escherRecords.clear: Probability = 1.00, Count = 1
getSchemeSpecificPart -> getSchemeSpecificPart: Probability = 1.00, Count = 1
schemeSpecificPart -> schemeSpecificPart: Probability = 1.00, Count = 3
DeleteSkillAuthorizationResponse -> DeleteSkillAuthorizationResult: Probability = 1.00, Count = 1
DeleteSkillAuthorization -> deleteSkillAuthorization: Probability = 1.00, Count = 1
DeleteSkillAuthorizationRequest -> DeleteSkillAuthorizationRequest: Probability = 1.00, Count = 1
Invoke<DeleteSkillAuthorizationResponse> -> executeDeleteSkillAuthorization: Probability = 1.00, Count = 1
QuerySyncPicScheduleRequest -> QuerySyncPicScheduleRequest: Probability = 1.00, Count = 1
"QuerySyncPicSchedule" -> "QuerySyncPicSchedule": Probability = 1.00, Count = 1
SheetRecordCollectingListener -> SheetRecordCollectingListener: Probability = 1.00, Count = 1
childListener -> childListener: Probability = 1.00, Count = 4
this.childListener -> this.childListener: Probability = 0.33, Count = 1
this.childListener -> childListener,: Probability = 0.33, Count = 1
this.childListener -> LocaleUtil.getUserLocale: Probability = 0.33, Count = 1
RussianStemmer -> RussianStemmer: Probability = 1.00, Count = 1
List<HSSFShape> -> ArrayList: Probability = 0.33, Count = 2
List<HSSFShape> -> <HSSFShape>: Probability = 0.33, Count = 2
List<HSSFShape> -> ArrayList<>: Probability = 0.33, Count = 2
_shapes -> _shapes: Probability = 1.00, Count = 1
HSSFShape -> HSSFShape: Probability = 1.00, Count = 12
RemoveShape -> removeShape: Probability = 1.00, Count = 4
AddTagsToVaultResponse -> AddTagsToVaultResult: Probability = 1.00, Count = 1
AddTagsToVault -> addTagsToVault: Probability = 1.00, Count = 1
AddTagsToVaultRequest -> AddTagsToVaultRequest: Probability = 1.00, Count = 1
Invoke<AddTagsToVaultResponse> -> executeAddTagsToVault: Probability = 1.00, Count = 1
'@' -> '@': Probability = 1.00, Count = 2
java.nio.charset.Charset -> Charset: Probability = 1.00, Count = 5
that -> that: Probability = 1.00, Count = 6
this.canonicalName.Equals -> this.canonicalName.equals: Probability = 1.00, Count = 1
that.canonicalName -> that.canonicalName: Probability = 1.00, Count = 1
AppendCharString -> +: Probability = 1.00, Count = 6
DeleteDirectoryConfigResponse -> DeleteDirectoryConfigResult: Probability = 1.00, Count = 1
DeleteDirectoryConfig -> deleteDirectoryConfig: Probability = 1.00, Count = 1
DeleteDirectoryConfigRequest -> DeleteDirectoryConfigRequest: Probability = 1.00, Count = 1
Invoke<DeleteDirectoryConfigResponse> -> executeDeleteDirectoryConfig: Probability = 1.00, Count = 1
DVConstraint -> DVConstraint: Probability = 1.00, Count = 13
comparisonOperator, -> comparisonOperator,: Probability = 1.00, Count = 9
expr1, -> expr1,: Probability = 1.00, Count = 4
expr2 -> expr2: Probability = 0.65, Count = 11
expr2 -> comparisonOperator,String: Probability = 0.06, Count = 1
expr2 -> validationType: Probability = 0.12, Count = 2
expr2 -> ValidationType.ANY:if: Probability = 0.06, Count = 1
expr2 -> convertNumber: Probability = 0.12, Count = 2
expr1 -> expr1: Probability = 0.67, Count = 10
expr1 -> OperatorType.validateSecondArg: Probability = 0.20, Count = 3
expr1 -> "expr1: Probability = 0.13, Count = 2
"expr1 -> "expr1: Probability = 1.00, Count = 2
supplied" -> supplied": Probability = 1.00, Count = 4
formula1 -> formula1: Probability = 0.73, Count = 8
formula1 -> value1: Probability = 0.27, Count = 3
GetFormulaFromTextExpression -> getFormulaFromTextExpression: Probability = 1.00, Count = 6
Double -> Double: Probability = 0.80, Count = 12
Double -> null: Probability = 0.20, Count = 3
ConvertTime -> convertTime: Probability = 1.00, Count = 2
Double.NaN -> null: Probability = 1.00, Count = 4
formula2 -> formula2: Probability = 0.82, Count = 14
formula2 -> value2: Probability = 0.18, Count = 3
formula1, -> formula1,: Probability = 1.00, Count = 12
formula2, -> formula2,: Probability = 1.00, Count = 5
value1, -> value1,: Probability = 1.00, Count = 3
value2, -> value2,: Probability = 1.00, Count = 3
RestoreDBInstanceFromDBSnapshotRequest -> RestoreDBInstanceFromDBSnapshotRequest: Probability = 1.00, Count = 2
dbInstanceIdentifier, -> dBInstanceIdentifier,: Probability = 1.00, Count = 3
dbSnapshotIdentifier -> dBSnapshotIdentifier: Probability = 1.00, Count = 3
_dbInstanceIdentifier -> setDBInstanceIdentifier: Probability = 1.00, Count = 7
dbInstanceIdentifier -> dBInstanceIdentifier: Probability = 0.65, Count = 11
dbInstanceIdentifier -> ): Probability = 0.35, Count = 6
_dbSnapshotIdentifier -> setDBSnapshotIdentifier: Probability = 1.00, Count = 2
seqName -> seqName: Probability = 1.00, Count = 1
"#REF!" -> FormulaError.REF.getString: Probability = 1.00, Count = 1
GetWorkflowExecutionHistoryResponse -> History: Probability = 1.00, Count = 1
GetWorkflowExecutionHistory -> getWorkflowExecutionHistory: Probability = 1.00, Count = 1
GetWorkflowExecutionHistoryRequest -> GetWorkflowExecutionHistoryRequest: Probability = 1.00, Count = 1
Invoke<GetWorkflowExecutionHistoryResponse> -> executeGetWorkflowExecutionHistory: Probability = 1.00, Count = 1
DeleteFileSystemPolicyResponse -> DeleteFileSystemPolicyResult: Probability = 1.00, Count = 1
DeleteFileSystemPolicy -> deleteFileSystemPolicy: Probability = 1.00, Count = 1
DeleteFileSystemPolicyRequest -> DeleteFileSystemPolicyRequest: Probability = 1.00, Count = 1
Invoke<DeleteFileSystemPolicyResponse> -> executeDeleteFileSystemPolicy: Probability = 1.00, Count = 1
1:return -> 1:return: Probability = 1.00, Count = 6
GetFormat -> getFormat: Probability = 1.00, Count = 6
formats[index] -> _formats.get: Probability = 1.00, Count = 2
fmt -> fmt: Probability = 0.65, Count = 11
fmt -> _formats.size: Probability = 0.06, Count = 1
fmt -> _builtinFormats.length: Probability = 0.06, Count = 1
fmt -> _builtinFormats[index]: Probability = 0.12, Count = 2
fmt -> Formatter: Probability = 0.12, Count = 2
builtinFormats[index] -> index: Probability = 0.67, Count = 2
builtinFormats[index] -> BuiltinFormats.getBuiltinFormat: Probability = 0.33, Count = 1
walker, -> walker,: Probability = 1.00, Count = 5
cmit -> cmit: Probability = 0.50, Count = 1
cmit -> StopWalkException,: Probability = 0.50, Count = 1
maxCount -> maxCount: Probability = 1.00, Count = 13
StopWalkException.INSTANCE -> StopWalkException.INSTANCE: Probability = 1.00, Count = 3
java.nio.Buffer -> final: Probability = 0.50, Count = 7
java.nio.Buffer -> Buffer: Probability = 0.50, Count = 7
ModifyClientPropertiesResponse -> ModifyClientPropertiesResult: Probability = 1.00, Count = 1
ModifyClientProperties -> modifyClientProperties: Probability = 1.00, Count = 1
ModifyClientPropertiesRequest -> ModifyClientPropertiesRequest: Probability = 1.00, Count = 1
Invoke<ModifyClientPropertiesResponse> -> executeModifyClientProperties: Probability = 1.00, Count = 1
StopWalk -> stopWalk: Probability = 1.00, Count = 2
parent -> parent: Probability = 1.00, Count = 9
parent.StopWalk -> parent.stopWalk: Probability = 1.00, Count = 1
ToObjectId -> toObjectId: Probability = 1.00, Count = 4
IsComplete -> isComplete: Probability = 1.00, Count = 1
UpdateIntegrationResponse -> UpdateIntegrationResult: Probability = 0.50, Count = 1
UpdateIntegrationResponse -> updateIntegrationResponse: Probability = 0.50, Count = 1
UpdateIntegration -> updateIntegration: Probability = 1.00, Count = 1
UpdateIntegrationRequest -> UpdateIntegrationRequest: Probability = 1.00, Count = 1
Invoke<UpdateIntegrationResponse> -> executeUpdateIntegration: Probability = 1.00, Count = 1
PutDetectorResponse -> PutDetectorResult: Probability = 1.00, Count = 1
PutDetector -> putDetector: Probability = 1.00, Count = 1
PutDetectorRequest -> PutDetectorRequest: Probability = 1.00, Count = 1
Invoke<PutDetectorResponse> -> executePutDetector: Probability = 1.00, Count = 1
GetLong -> getLong: Probability = 0.50, Count = 1
GetLong -> typedGetter.getLong: Probability = 0.50, Count = 1
section, -> section,: Probability = 1.00, Count = 2
defaultValue -> defaultValue: Probability = 1.00, Count = 2
EscherBSERecord -> EscherBSERecord: Probability = 0.80, Count = 4
EscherBSERecord -> escherBSERecords.get: Probability = 0.20, Count = 1
HSSFPatriarch -> .getWorkbook: Probability = 1.00, Count = 3
bse.Ref -> .getBSERecord: Probability = 0.33, Count = 2
bse.Ref -> bse.setRef: Probability = 0.33, Count = 2
bse.Ref -> bse.getRef: Probability = 0.33, Count = 2
SetPropertyValue -> setPropertyValue: Probability = 1.00, Count = 7
DataInput -> DataInput: Probability = 0.88, Count = 7
DataInput -> in,: Probability = 0.12, Count = 1
this.@in -> this.in: Probability = 1.00, Count = 7
this.valueCount -> this.valueCount: Probability = 1.00, Count = 3
ord -> ord: Probability = 0.84, Count = 42
ord -> final: Probability = 0.14, Count = 7
ord -> br: Probability = 0.02, Count = 1
ResetSnapshotAttributeResponse -> ResetSnapshotAttributeResult: Probability = 1.00, Count = 1
ResetSnapshotAttribute -> resetSnapshotAttribute: Probability = 1.00, Count = 1
ResetSnapshotAttributeRequest -> ResetSnapshotAttributeRequest: Probability = 1.00, Count = 2
Invoke<ResetSnapshotAttributeResponse> -> executeResetSnapshotAttribute: Probability = 1.00, Count = 1
MutableValue -> MutableValue: Probability = 1.00, Count = 8
Duplicate -> duplicate: Probability = 1.00, Count = 4
MutableValueStr -> MutableValueStr: Probability = 0.67, Count = 8
MutableValueStr -> exists: Probability = 0.17, Count = 2
MutableValueStr -> value.length: Probability = 0.17, Count = 2
v.Value.CopyBytes -> v.value.copyBytes: Probability = 1.00, Count = 1
Value -> value: Probability = 0.81, Count = 13
Value -> getValue: Probability = 0.19, Count = 3
v.Exists -> v.exists: Probability = 1.00, Count = 4
this.Exists -> this.exists: Probability = 1.00, Count = 4
getColumnNumber -> getColumnNumber: Probability = 1.00, Count = 1
PatternKeywordMarkerFilter -> PatternKeywordMarkerFilter: Probability = 1.00, Count = 2
protectedWords -> protectedWords: Probability = 0.67, Count = 2
protectedWords -> SetKeywordMarkerFilter: Probability = 0.33, Count = 1
ElisionFilter -> ElisionFilter: Probability = 1.00, Count = 1
articles -> articles: Probability = 0.67, Count = 2
articles -> this.articles: Probability = 0.33, Count = 1
StrCmp -> strcmp: Probability = 1.00, Count = 3
str, -> str,: Probability = 0.94, Count = 15
str, -> str.substring: Probability = 0.06, Count = 1
d, -> d,: Probability = 1.00, Count = 5
str.Length -> str.length: Probability = 1.00, Count = 12
str[i] -> str.charAt: Probability = 1.00, Count = 3
a[start -> a[start: Probability = 1.00, Count = 3
i] -> i]: Probability = 0.80, Count = 8
i] -> -a[start: Probability = 0.10, Count = 1
i] -> positions[positionIndex: Probability = 0.10, Count = 1
java.util.NavigableSet<E> -> NavigableSet<E>: Probability = 1.00, Count = 4
_descendingSet -> descendingSet: Probability = 0.67, Count = 2
_descendingSet -> descendingSet:: Probability = 0.33, Count = 1
java.util.TreeSet<E> -> TreeSet<E>: Probability = 1.00, Count = 4
backingMap.descendingMap -> backingMap.descendingMap: Probability = 1.00, Count = 1
getDecisionInfo -> getDecisionInfo: Probability = 1.00, Count = 2
PushConnection -> PushConnection: Probability = 0.50, Count = 1
PushConnection -> openPush: Probability = 0.50, Count = 1
NGit.Errors.NotSupportedException -> NotSupportedException: Probability = 0.67, Count = 4
NGit.Errors.NotSupportedException -> UnsupportedOperationException: Probability = 0.33, Count = 2
.pushIsNotSupportedForBundleTransport -> .pushIsNotSupportedForBundleTransport: Probability = 1.00, Count = 1
PutRecordResponse -> PutRecordResult: Probability = 1.00, Count = 1
PutRecord -> putRecord: Probability = 1.00, Count = 1
PutRecordRequest -> PutRecordRequest: Probability = 1.00, Count = 1
Invoke<PutRecordResponse> -> executePutRecord: Probability = 1.00, Count = 1
tokens -> tokens: Probability = 0.75, Count = 9
tokens -> tokens==null: Probability = 0.17, Count = 2
tokens -> ArrayList<TerminalNode>: Probability = 0.08, Count = 1
List<IToken> -> ArrayList<Token>: Probability = 1.00, Count = 2
NextToken -> nextToken: Probability = 1.00, Count = 3
t.Type -> t.getType: Probability = 0.62, Count = 5
t.Type -> ==Token.EOF: Probability = 0.38, Count = 3
tokens.Add -> tokens.add: Probability = 1.00, Count = 3
ModifyInstanceCapacityReservationAttributesResponse -> ModifyInstanceCapacityReservationAttributesResult: Probability = 1.00, Count = 1
ModifyInstanceCapacityReservationAttributes -> modifyInstanceCapacityReservationAttributes: Probability = 1.00, Count = 1
ModifyInstanceCapacityReservationAttributesRequest -> ModifyInstanceCapacityReservationAttributesRequest: Probability = 1.00, Count = 1
Invoke<ModifyInstanceCapacityReservationAttributesResponse> -> executeModifyInstanceCapacityReservationAttributes: Probability = 1.00, Count = 1
MoveFacePhotosRequest -> MoveFacePhotosRequest: Probability = 1.00, Count = 1
"MoveFacePhotos", -> "MoveFacePhotos",: Probability = 1.00, Count = 1
RequestSpotFleetResponse -> RequestSpotFleetResult: Probability = 1.00, Count = 1
RequestSpotFleet -> requestSpotFleet: Probability = 1.00, Count = 1
RequestSpotFleetRequest -> RequestSpotFleetRequest: Probability = 1.00, Count = 1
Invoke<RequestSpotFleetResponse> -> executeRequestSpotFleet: Probability = 1.00, Count = 1
ListApplicationSnapshotsResponse -> ListApplicationSnapshotsResult: Probability = 1.00, Count = 1
ListApplicationSnapshots -> listApplicationSnapshots: Probability = 1.00, Count = 1
ListApplicationSnapshotsRequest -> ListApplicationSnapshotsRequest: Probability = 1.00, Count = 1
Invoke<ListApplicationSnapshotsResponse> -> executeListApplicationSnapshots: Probability = 1.00, Count = 1
DefaultAcsClient -> DefaultAcsClient: Probability = 1.00, Count = 3
IClientProfile -> IClientProfile: Probability = 1.00, Count = 5
profile, -> profile,: Probability = 0.50, Count = 2
profile, -> this.clientProfile: Probability = 0.50, Count = 2
AlibabaCloudCredentials -> AlibabaCloudCredentials: Probability = 1.00, Count = 8
credentials -> credentials: Probability = 0.50, Count = 16
credentials -> KeyPairCredentials: Probability = 0.03, Count = 1
credentials -> BearerTokenCredentials: Probability = 0.03, Count = 1
credentials -> legacyCredential.getSecurityToken: Probability = 0.06, Count = 2
credentials -> this.credentials: Probability = 0.09, Count = 3
credentials -> AlibabaCloudCredentials: Probability = 0.03, Count = 1
credentials -> ecsMetadataServiceFetchCount: Probability = 0.06, Count = 2
credentials -> maxRetryTimes: Probability = 0.06, Count = 2
credentials -> fetcher.fetch: Probability = 0.06, Count = 2
credentials -> else: Probability = 0.03, Count = 1
credentials -> credentials.willSoonExpire: Probability = 0.03, Count = 1
profile -> profile,: Probability = 0.40, Count = 2
profile -> profile: Probability = 0.60, Count = 3
StaticCredentialsProvider -> StaticCredentialsProvider: Probability = 1.00, Count = 5
clientProfile.SetCredentialsProvider -> ): Probability = 1.00, Count = 6
ConcurrentRefUpdateException -> ConcurrentRefUpdateException: Probability = 1.00, Count = 1
message, -> message,: Probability = 1.00, Count = 8
rc -> ref,RefUpdate.Result: Probability = 0.02, Count = 1
rc -> rc: Probability = 0.63, Count = 26
rc -> .refUpdateReturnCodeWas,: Probability = 0.02, Count = 1
rc -> this.rc: Probability = 0.02, Count = 1
rc -> final: Probability = 0.12, Count = 5
rc -> decRef: Probability = 0.05, Count = 2
rc -> "seg=": Probability = 0.05, Count = 2
rc -> info: Probability = 0.05, Count = 2
rc -> 1:: Probability = 0.02, Count = 1
". -> ".: Probability = 1.00, Count = 9
this.@ref -> this.ref: Probability = 0.75, Count = 3
this.@ref -> ref: Probability = 0.25, Count = 1
@ref -> ref: Probability = 0.98, Count = 44
@ref -> packed.get: Probability = 0.02, Count = 1
DeleteNetworkAclResponse -> DeleteNetworkAclResult: Probability = 1.00, Count = 1
DeleteNetworkAcl -> deleteNetworkAcl: Probability = 1.00, Count = 1
DeleteNetworkAclRequest -> DeleteNetworkAclRequest: Probability = 1.00, Count = 1
Invoke<DeleteNetworkAclResponse> -> executeDeleteNetworkAcl: Probability = 1.00, Count = 1
shortCount -> shortCount: Probability = 1.00, Count = 16
SharedValueManager -> SharedValueManager: Probability = 1.00, Count = 3
CreateEmpty -> createEmpty: Probability = 1.00, Count = 1
CellReference[0], -> SharedFormulaRecord[0],: Probability = 1.00, Count = 1
List<ArrayRecord> -> new: Probability = 0.50, Count = 1
List<ArrayRecord> -> CellReference[0],: Probability = 0.50, Count = 1
List<TableRecord> -> ArrayRecord[0],: Probability = 0.50, Count = 1
List<TableRecord> -> TableRecord[0]: Probability = 0.50, Count = 1
DeleteCacheSecurityGroupResponse -> DeleteCacheSecurityGroupResult: Probability = 1.00, Count = 1
DeleteCacheSecurityGroup -> deleteCacheSecurityGroup: Probability = 1.00, Count = 1
DeleteCacheSecurityGroupRequest -> DeleteCacheSecurityGroupRequest: Probability = 1.00, Count = 2
Invoke<DeleteCacheSecurityGroupResponse> -> executeDeleteCacheSecurityGroup: Probability = 1.00, Count = 1
CreateGroupRequest -> CreateGroupRequest: Probability = 1.00, Count = 2
SetParentId -> setParentId: Probability = 1.00, Count = 2
newParent -> newParent: Probability = 1.00, Count = 1
parentIds -> parentIds: Probability = 1.00, Count = 5
ObjectId[] -> ObjectId[]: Probability = 1.00, Count = 3
newParent.Copy -> newParent.copy: Probability = 1.00, Count = 1
HasConflictingAltSet -> hasConflictingAltSet: Probability = 1.00, Count = 1
IEnumerable<BitSet> -> Collection<BitSet>: Probability = 1.00, Count = 7
altsets -> altsets: Probability = 0.94, Count = 15
altsets -> Collection<BitSet>: Probability = 0.06, Count = 1
alts -> alts: Probability = 1.00, Count = 5
alts.Cardinality -> alts.cardinality: Probability = 1.00, Count = 2
CommonRpcRequest -> CommonRpcRequest: Probability = 1.00, Count = 3
product -> product: Probability = 0.90, Count = 9
product -> values!=null: Probability = 0.10, Count = 1
AcceptFormat -> setAcceptFormat: Probability = 0.50, Count = 1
AcceptFormat -> setSysAcceptFormat: Probability = 0.50, Count = 1
FormatType.JSON -> FormatType.JSON: Probability = 1.00, Count = 2
.key -> .key: Probability = 0.67, Count = 4
.key -> n.key: Probability = 0.17, Count = 1
.key -> .getKey: Probability = 0.17, Count = 1
DeleteTransitGatewayMulticastDomainResponse -> DeleteTransitGatewayMulticastDomainResult: Probability = 1.00, Count = 1
DeleteTransitGatewayMulticastDomain -> deleteTransitGatewayMulticastDomain: Probability = 1.00, Count = 1
DeleteTransitGatewayMulticastDomainRequest -> DeleteTransitGatewayMulticastDomainRequest: Probability = 1.00, Count = 1
Invoke<DeleteTransitGatewayMulticastDomainResponse> -> executeDeleteTransitGatewayMulticastDomain: Probability = 1.00, Count = 1
DescribeEventsResponse -> DescribeEventsResult: Probability = 1.00, Count = 2
DescribeEvents -> describeEvents: Probability = 1.00, Count = 3
DescribeEventsRequest -> DescribeEventsRequest: Probability = 1.00, Count = 2
Invoke<DescribeEventsResponse> -> executeDescribeEvents: Probability = 1.00, Count = 1
DescribeFleetsResponse -> DescribeFleetsResult: Probability = 1.00, Count = 1
DescribeFleets -> describeFleets: Probability = 1.00, Count = 1
DescribeFleetsRequest -> DescribeFleetsRequest: Probability = 1.00, Count = 1
Invoke<DescribeFleetsResponse> -> executeDescribeFleets: Probability = 1.00, Count = 1
DescribeDataRepositoryTasksResponse -> DescribeDataRepositoryTasksResult: Probability = 1.00, Count = 1
DescribeDataRepositoryTasks -> describeDataRepositoryTasks: Probability = 1.00, Count = 1
DescribeDataRepositoryTasksRequest -> DescribeDataRepositoryTasksRequest: Probability = 1.00, Count = 1
Invoke<DescribeDataRepositoryTasksResponse> -> executeDescribeDataRepositoryTasks: Probability = 1.00, Count = 1
StartLabelDetectionResponse -> StartLabelDetectionResult: Probability = 1.00, Count = 1
StartLabelDetection -> startLabelDetection: Probability = 1.00, Count = 1
StartLabelDetectionRequest -> StartLabelDetectionRequest: Probability = 1.00, Count = 1
Invoke<StartLabelDetectionResponse> -> executeStartLabelDetection: Probability = 1.00, Count = 1
GetLastCommitGeneration -> getLastCommitGeneration: Probability = 0.75, Count = 3
GetLastCommitGeneration -> IndexFileNames.SEGMENTS,"",getLastCommitGeneration: Probability = 0.25, Count = 1
files -> files: Probability = 0.54, Count = 20
files -> file.startsWith: Probability = 0.05, Count = 2
files -> IndexFileNames.SEGMENTS: Probability = 0.08, Count = 3
files -> Collection<String>: Probability = 0.03, Count = 1
files -> HashSet<>: Probability = 0.03, Count = 1
files -> checkFileNames: Probability = 0.03, Count = 1
files -> for: Probability = 0.03, Count = 1
files -> f: Probability = 0.05, Count = 2
files -> :: Probability = 0.03, Count = 1
files -> List<File>: Probability = 0.03, Count = 1
files -> ArrayList<File>: Probability = 0.03, Count = 1
files -> files.length: Probability = 0.03, Count = 1
files -> indexExists: Probability = 0.03, Count = 1
files -> "_": Probability = 0.03, Count = 1
gen -> gen: Probability = 0.76, Count = 13
gen -> generationFromSegmentsFileName: Probability = 0.06, Count = 1
gen -> commit.getGeneration: Probability = 0.06, Count = 1
gen -> fileNameFromGeneration: Probability = 0.06, Count = 1
gen -> ext,: Probability = 0.06, Count = 1
EnableFastSnapshotRestoresResponse -> EnableFastSnapshotRestoresResult: Probability = 1.00, Count = 1
EnableFastSnapshotRestores -> enableFastSnapshotRestores: Probability = 1.00, Count = 1
EnableFastSnapshotRestoresRequest -> EnableFastSnapshotRestoresRequest: Probability = 1.00, Count = 1
Invoke<EnableFastSnapshotRestoresResponse> -> executeEnableFastSnapshotRestores: Probability = 1.00, Count = 1
ListVPCAssociationAuthorizationsResponse -> ListVPCAssociationAuthorizationsResult: Probability = 1.00, Count = 1
ListVPCAssociationAuthorizations -> listVPCAssociationAuthorizations: Probability = 1.00, Count = 1
ListVPCAssociationAuthorizationsRequest -> ListVPCAssociationAuthorizationsRequest: Probability = 1.00, Count = 1
Invoke<ListVPCAssociationAuthorizationsResponse> -> executeListVPCAssociationAuthorizations: Probability = 1.00, Count = 1
Thumbnail -> Thumbnail: Probability = 1.00, Count = 4
thumbnailData -> thumbnailData: Probability = 1.00, Count = 2
this.thumbnailData -> this._thumbnailData: Probability = 1.00, Count = 1
Explain -> Explanation: Probability = 0.55, Count = 6
Explain -> explain: Probability = 0.45, Count = 5
BasicStats -> BasicStats: Probability = 0.60, Count = 6
BasicStats -> double: Probability = 0.20, Count = 2
BasicStats -> stats: Probability = 0.20, Count = 2
stats, -> stats,: Probability = 1.00, Count = 2
tfn -> tfn: Probability = 1.00, Count = 6
Explanation -> Explanation.match: Probability = 0.10, Count = 8
Explanation -> scoreTimes1pTfn: Probability = 0.03, Count = 2
Explanation -> /: Probability = 0.09, Count = 7
Explanation -> ,getClass: Probability = 0.05, Count = 4
Explanation -> computed: Probability = 0.06, Count = 5
Explanation -> as: Probability = 0.06, Count = 5
Explanation -> 1: Probability = 0.01, Count = 1
Explanation -> N: Probability = 0.04, Count = 3
Explanation -> from:",Explanation.match: Probability = 0.01, Count = 1
Explanation -> number: Probability = 0.10, Count = 8
Explanation -> of: Probability = 0.05, Count = 4
Explanation -> containing: Probability = 0.05, Count = 4
Explanation -> term": Probability = 0.04, Count = 3
Explanation -> ,Explanation.match: Probability = 0.03, Count = 2
Explanation -> total: Probability = 0.08, Count = 6
Explanation -> with: Probability = 0.05, Count = 4
Explanation -> field": Probability = 0.05, Count = 4
Explanation -> F: Probability = 0.03, Count = 2
Explanation -> float: Probability = 0.01, Count = 1
Explanation -> Explanation: Probability = 0.03, Count = 2
Explanation -> lambda: Probability = 0.03, Count = 2
Explanation -> documents": Probability = 0.01, Count = 1
result.Description -> (: Probability = 1.00, Count = 5
computed -> 1: Probability = 1.00, Count = 4
result.Value -> 1: Probability = 1.00, Count = 5
result.AddDetail -> from:",Explanation.match: Probability = 0.07, Count = 4
result.AddDetail -> tfn,: Probability = 0.05, Count = 3
result.AddDetail -> "tfn,: Probability = 0.05, Count = 3
result.AddDetail -> normalized: Probability = 0.05, Count = 3
result.AddDetail -> term: Probability = 0.10, Count = 6
result.AddDetail -> frequency": Probability = 0.05, Count = 3
result.AddDetail -> ,Explanation.match: Probability = 0.08, Count = 5
result.AddDetail -> stats.getTotalTermFreq: Probability = 0.03, Count = 2
result.AddDetail -> ,"F,: Probability = 0.03, Count = 2
result.AddDetail -> number: Probability = 0.03, Count = 2
result.AddDetail -> of: Probability = 0.13, Count = 8
result.AddDetail -> occurrences: Probability = 0.03, Count = 2
result.AddDetail -> across: Probability = 0.03, Count = 2
result.AddDetail -> all: Probability = 0.03, Count = 2
result.AddDetail -> documents: Probability = 0.08, Count = 5
result.AddDetail -> 1": Probability = 0.03, Count = 2
result.AddDetail -> stats.getDocFreq: Probability = 0.03, Count = 2
result.AddDetail -> ,"n,: Probability = 0.03, Count = 2
result.AddDetail -> stats.getNumberOfDocuments: Probability = 0.03, Count = 2
Score -> float: Probability = 0.40, Count = 2
Score -> score: Probability = 0.60, Count = 3
Parse -> parse: Probability = 0.89, Count = 8
Parse -> queryText: Probability = 0.11, Count = 1
line -> line: Probability = 0.91, Count = 21
line -> firstWant.getLine: Probability = 0.04, Count = 1
line -> command.getLine: Probability = 0.04, Count = 1
insideQuote -> insideQuote: Probability = 1.00, Count = 4
quoteCount -> quoteCount: Probability = 1.00, Count = 4
line.Length -> line.length: Probability = 1.00, Count = 3
!insideQuote -> !insideQuote: Probability = 1.00, Count = 4
result.Add -> result.add: Probability = 1.00, Count = 8
result.ToArray -> result.toArray: Probability = 0.83, Count = 5
result.ToArray -> String[0]: Probability = 0.17, Count = 1
pattern.Length -> pattern.length: Probability = 1.00, Count = 4
.cannotMatchOnEmptyString -> .cannotMatchOnEmptyString: Probability = 1.00, Count = 4
SubStringRevFilter.Safe -> SubStringRevFilter.safe: Probability = 1.00, Count = 3
AuthorRevFilter.PatternSearch -> PatternSearch: Probability = 1.00, Count = 2
NotImplementedFunctionException -> NotImplementedFunctionException: Probability = 1.00, Count = 2
this.functionName -> this.functionName: Probability = 1.00, Count = 1
DeleteResourceResponse -> DeleteResourceResult: Probability = 1.00, Count = 1
DeleteResource -> deleteResource: Probability = 1.00, Count = 1
DeleteResourceRequest -> DeleteResourceRequest: Probability = 1.00, Count = 1
Invoke<DeleteResourceResponse> -> executeDeleteResource: Probability = 1.00, Count = 1
PaletteRecord -> PaletteRecord: Probability = 1.00, Count = 2
CreateDefaultPalette -> PColor[]: Probability = 1.00, Count = 1
defaultPalette.Length -> defaultPalette: Probability = 0.50, Count = 2
defaultPalette.Length -> createDefaultPalette: Probability = 0.25, Count = 1
defaultPalette.Length -> defaultPalette.length: Probability = 0.25, Count = 1
List<PColor> -> _colors.ensureCapacity: Probability = 1.00, Count = 2
field_2_colors.Add -> _colors,: Probability = 0.33, Count = 1
field_2_colors.Add -> _colors.add: Probability = 0.67, Count = 2
GetRepoBuildLogsRequest -> GetRepoBuildLogsRequest: Probability = 1.00, Count = 1
"GetRepoBuildLogs", -> "GetRepoBuildLogs",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/build/[BuildId]/logs" -> "/repos/[RepoNamespace]/[RepoName]/build/[BuildId]/logs": Probability = 1.00, Count = 1
MethodType.GET -> MethodType.GET: Probability = 0.51, Count = 26
MethodType.GET -> ): Probability = 0.49, Count = 25
"SortedSetDocValuesFacetField -> "SortedSetDocValuesFacetField: Probability = 1.00, Count = 1
dim=" -> dim=": Probability = 1.00, Count = 3
Dim -> dim: Probability = 0.57, Count = 4
Dim -> path=": Probability = 0.43, Count = 3
label=" -> label=": Probability = 1.00, Count = 1
Label -> label: Probability = 1.00, Count = 3
Break -> Break: Probability = 0.62, Count = 8
Break -> _breakMap.get: Probability = 0.23, Count = 3
Break -> _breaks.add: Probability = 0.15, Count = 2
main, -> main,: Probability = 1.00, Count = 3
subFrom, -> subFrom,: Probability = 1.00, Count = 3
subTo -> subTo: Probability = 1.00, Count = 6
this.subFrom -> this.subFrom: Probability = 1.00, Count = 1
subFrom -> subFrom: Probability = 1.00, Count = 3
this.subTo -> this.subTo: Probability = 1.00, Count = 1
docSize -> docSize: Probability = 1.00, Count = 1
float.Parse -> Float.parseFloat: Probability = 0.75, Count = 3
float.Parse -> 1000.0*Float.parseFloat: Probability = 0.25, Count = 1
java.io.File -> File: Probability = 0.83, Count = 15
java.io.File -> FileNotFoundException: Probability = 0.11, Count = 2
java.io.File -> FileOutputStream: Probability = 0.06, Count = 1
another -> another: Probability = 1.00, Count = 1
this.getPath -> this.getPath: Probability = 1.00, Count = 1
another.getPath -> another.getPath: Probability = 1.00, Count = 1
writeByte -> writeByte: Probability = 1.00, Count = 4
"top -> "top: Probability = 1.00, Count = 2
Column -> getColumn: Probability = 1.00, Count = 6
RefreshDate -> this.refreshDate: Probability = 0.71, Count = 5
RefreshDate -> new: Probability = 0.29, Count = 2
DateTime.UtcNow -> Date: Probability = 0.60, Count = 3
DateTime.UtcNow -> new: Probability = 0.40, Count = 2
toExclusive -> toExclusive: Probability = 1.00, Count = 2
java.util.TreeMap.Bound.INCLUSIVE, -> INCLUSIVE,: Probability = 1.00, Count = 2
toExclusive,java.util.TreeMap.Bound.EXCLUSIVE -> toExclusive,: Probability = 0.50, Count = 1
toExclusive,java.util.TreeMap.Bound.EXCLUSIVE -> EXCLUSIVE: Probability = 0.50, Count = 1
DescribeLedgerResponse -> DescribeLedgerResult: Probability = 1.00, Count = 1
DescribeLedger -> describeLedger: Probability = 1.00, Count = 1
DescribeLedgerRequest -> DescribeLedgerRequest: Probability = 1.00, Count = 1
Invoke<DescribeLedgerResponse> -> executeDescribeLedger: Probability = 1.00, Count = 1
IsNoPrefix -> isNoPrefix: Probability = 1.00, Count = 1
noPrefix -> noPrefix: Probability = 1.00, Count = 1
Policy -> Policy: Probability = 1.00, Count = 4
FromJson -> fromJson: Probability = 1.00, Count = 1
json -> jsonString: Probability = 0.33, Count = 1
json -> fromJson: Probability = 0.33, Count = 1
json -> PolicyReaderOptions: Probability = 0.33, Count = 1
JsonPolicyReader.ReadJsonStringToPolicy -> jsonString,: Probability = 1.00, Count = 1
GetPhoneNumberResponse -> GetPhoneNumberResult: Probability = 1.00, Count = 1
GetPhoneNumber -> getPhoneNumber: Probability = 1.00, Count = 1
GetPhoneNumberRequest -> GetPhoneNumberRequest: Probability = 1.00, Count = 1
Invoke<GetPhoneNumberResponse> -> executeGetPhoneNumber: Probability = 1.00, Count = 1
WriteUnicodeString -> writeUnicodeString: Probability = 1.00, Count = 1
nChars -> nChars: Probability = 0.88, Count = 15
nChars -> readUnicodeLE: Probability = 0.06, Count = 1
nChars -> nChars,: Probability = 0.06, Count = 1
is16Bit -> is16Bit: Probability = 1.00, Count = 3
HasMultibyte -> hasMultibyte: Probability = 1.00, Count = 2
0x00 -> 0x00: Probability = 1.00, Count = 12
DescribeCoipPoolsResponse -> DescribeCoipPoolsResult: Probability = 1.00, Count = 1
DescribeCoipPools -> describeCoipPools: Probability = 1.00, Count = 1
DescribeCoipPoolsRequest -> DescribeCoipPoolsRequest: Probability = 1.00, Count = 1
Invoke<DescribeCoipPoolsResponse> -> executeDescribeCoipPools: Probability = 1.00, Count = 1
HSSFRow -> HSSFRow: Probability = 0.75, Count = 6
HSSFRow -> _hs.getRow: Probability = 0.12, Count = 1
HSSFRow -> _workbook,: Probability = 0.12, Count = 1
"Specified -> "Specified: Probability = 1.00, Count = 11
"] -> "]: Probability = 1.00, Count = 12
change -> change: Probability = 1.00, Count = 5
part -> part: Probability = 0.64, Count = 7
part -> '_':return: Probability = 0.09, Count = 1
part -> PERCENTS.matcher: Probability = 0.09, Count = 1
part -> .replaceAll: Probability = 0.09, Count = 1
part -> "%%": Probability = 0.09, Count = 1
removedRow -> removedRow: Probability = 1.00, Count = 2
lastrow -> _lastrow: Probability = 0.88, Count = 7
lastrow -> _valuesAgg.getFirstCellNum: Probability = 0.12, Count = 1
firstrow -> _firstrow: Probability = 1.00, Count = 7
ICollection<TreeFilter> -> Collection<TreeFilter>: Probability = 1.00, Count = 2
OrTreeFilter.List -> List: Probability = 1.00, Count = 4
SpanOrTermsBuilder -> SpanOrTermsBuilder: Probability = 1.00, Count = 1
isReadOnly -> isReadOnly: Probability = 1.00, Count = 2
byteBuffer.isReadOnly -> byteBuffer.isReadOnly: Probability = 1.00, Count = 7
SetValuesCellRange -> setValuesCellRange: Probability = 1.00, Count = 1
CellRangeAddressBase -> CellRangeAddressBase: Probability = 0.67, Count = 4
CellRangeAddressBase -> Integer: Probability = 0.33, Count = 2
SetVerticalCellRange -> count: Probability = 1.00, Count = 2
series.NumValues -> series.setNumValues: Probability = 1.00, Count = 1
ModifyGlobalReplicationGroupResponse -> GlobalReplicationGroup: Probability = 1.00, Count = 1
ModifyGlobalReplicationGroup -> modifyGlobalReplicationGroup: Probability = 1.00, Count = 1
ModifyGlobalReplicationGroupRequest -> ModifyGlobalReplicationGroupRequest: Probability = 1.00, Count = 1
Invoke<ModifyGlobalReplicationGroupResponse> -> executeModifyGlobalReplicationGroup: Probability = 1.00, Count = 1
CreateTrialResponse -> CreateTrialResult: Probability = 1.00, Count = 1
CreateTrial -> createTrial: Probability = 1.00, Count = 1
CreateTrialRequest -> CreateTrialRequest: Probability = 1.00, Count = 1
Invoke<CreateTrialResponse> -> executeCreateTrial: Probability = 1.00, Count = 1
List<Property> -> preWrite: Probability = 0.50, Count = 1
List<Property> -> List<Property>: Probability = 0.50, Count = 1
backingMap.firstKey -> backingMap.firstKey: Probability = 1.00, Count = 1
data.Length -> data.length: Probability = 1.00, Count = 8
GetHostedZoneCountResponse -> GetHostedZoneCountResult: Probability = 1.00, Count = 2
GetHostedZoneCount -> getHostedZoneCount: Probability = 1.00, Count = 3
GetHostedZoneCountRequest -> GetHostedZoneCountRequest: Probability = 1.00, Count = 2
Invoke<GetHostedZoneCountResponse> -> executeGetHostedZoneCount: Probability = 1.00, Count = 1
LookupResult[] -> LookupResult[]: Probability = 1.00, Count = 2
GetResults -> getResults: Probability = 1.00, Count = 1
LookupResult[size] -> LookupResult[size]: Probability = 1.00, Count = 1
transitions.Length -> transitions.length: Probability = 1.00, Count = 1
Transition[] -> next+3: Probability = 1.00, Count = 1
transitions -> transitions: Probability = 0.75, Count = 3
transitions -> transitions[next+2]: Probability = 0.25, Count = 1
Transition[ArrayUtil.Oversize -> next+3: Probability = 1.00, Count = 1
transitions, -> t.dest: Probability = 1.00, Count = 1
GetFormatString -> getFormatString: Probability = 1.00, Count = 4
formatIndex -> formatIndex: Probability = 0.89, Count = 8
formatIndex -> HSSFDataFormat.getNumberOfBuiltinBuiltinFormats: Probability = 0.11, Count = 1
tfr -> tfr: Probability = 0.67, Count = 2
tfr -> _customFormatRecords.get: Probability = 0.33, Count = 1
DisassociateDelegateFromResourceResponse -> DisassociateDelegateFromResourceResult: Probability = 1.00, Count = 1
DisassociateDelegateFromResource -> disassociateDelegateFromResource: Probability = 1.00, Count = 1
DisassociateDelegateFromResourceRequest -> DisassociateDelegateFromResourceRequest: Probability = 1.00, Count = 1
Invoke<DisassociateDelegateFromResourceResponse> -> executeDisassociateDelegateFromResource: Probability = 1.00, Count = 1
StartDocumentClassificationJobResponse -> StartDocumentClassificationJobResult: Probability = 1.00, Count = 1
StartDocumentClassificationJob -> startDocumentClassificationJob: Probability = 1.00, Count = 1
StartDocumentClassificationJobRequest -> StartDocumentClassificationJobRequest: Probability = 1.00, Count = 1
Invoke<StartDocumentClassificationJobResponse> -> executeStartDocumentClassificationJob: Probability = 1.00, Count = 1
packs -> packs: Probability = 1.00, Count = 4
objects -> objects: Probability = 0.80, Count = 4
objects -> Collections.unmodifiableList: Probability = 0.20, Count = 1
fanout -> fanout: Probability = 1.00, Count = 3
Constants.OBJECT_ID_STRING_LENGTH -> Constants.OBJECT_ID_STRING_LENGTH: Probability = 1.00, Count = 9
PackFile -> PackFile: Probability = 1.00, Count = 3
pm.EndTask -> pm.endTask: Probability = 1.00, Count = 2
ListJobsByPipelineResponse -> ListJobsByPipelineResult: Probability = 1.00, Count = 1
ListJobsByPipeline -> listJobsByPipeline: Probability = 1.00, Count = 1
ListJobsByPipelineRequest -> ListJobsByPipelineRequest: Probability = 1.00, Count = 1
Invoke<ListJobsByPipelineResponse> -> executeListJobsByPipeline: Probability = 1.00, Count = 1
SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialRequest -> SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialRequest: Probability = 1.00, Count = 2
"Domain-intl", -> "Domain",: Probability = 0.60, Count = 3
"Domain-intl", -> "Domain-intl",: Probability = 0.40, Count = 2
"2017-12-18", -> "2018-01-29",: Probability = 0.60, Count = 3
"2017-12-18", -> "2017-12-18",: Probability = 0.40, Count = 2
"SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredential", -> "SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredential": Probability = 0.50, Count = 1
"SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredential", -> "SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredential",: Probability = 0.50, Count = 1
DeleteDhcpOptionsResponse -> DeleteDhcpOptionsResult: Probability = 1.00, Count = 1
DeleteDhcpOptions -> deleteDhcpOptions: Probability = 1.00, Count = 1
DeleteDhcpOptionsRequest -> DeleteDhcpOptionsRequest: Probability = 1.00, Count = 2
Invoke<DeleteDhcpOptionsResponse> -> executeDeleteDhcpOptions: Probability = 1.00, Count = 1
GetSheetLastNameByExternSheet -> getSheetLastNameByExternSheet: Probability = 1.00, Count = 1
externSheetIndex -> externSheetIndex: Probability = 0.96, Count = 22
externSheetIndex -> _iBook.getExternalSheet: Probability = 0.04, Count = 1
_iBook.FindSheetLastNameFromExternSheet -> _iBook.findSheetLastNameFromExternSheet: Probability = 1.00, Count = 1
InMemorySorter -> InMemorySorter: Probability = 1.00, Count = 1
IComparer<BytesRef> -> Comparator<BytesRef>: Probability = 1.00, Count = 1
IsSymbolic -> isSymbolic: Probability = 1.00, Count = 2
ChooseSingleElementFromArea -> chooseSingleElementFromArea: Probability = 1.00, Count = 2
AreaEval -> AreaEval: Probability = 1.00, Count = 14
ae,int -> ae,int: Probability = 1.00, Count = 1
srcCellRow, -> srcCellRow,: Probability = 1.00, Count = 16
srcCellCol -> srcCellCol: Probability = 0.84, Count = 16
srcCellCol -> chooseSingleElementFromAreaInternal: Probability = 0.05, Count = 1
srcCellCol -> this.evaluator.evaluateDateArg: Probability = 0.11, Count = 2
ae, -> ae,: Probability = 1.00, Count = 4
ErrorEval -> ErrorEval: Probability = 1.00, Count = 13
freeByteBlocks[--freeBlocks] -> freeByteBlocks[--freeBlocks]: Probability = 1.00, Count = 2
HtmlEncode -> htmlEncode: Probability = 1.00, Count = 2
plainText -> plainText: Probability = 1.00, Count = 2
string.IsNullOrEmpty -> ==: Probability = 0.39, Count = 11
string.IsNullOrEmpty -> null: Probability = 0.43, Count = 12
string.IsNullOrEmpty -> ||: Probability = 0.14, Count = 4
string.IsNullOrEmpty -> path.isEmpty: Probability = 0.04, Count = 1
result.ToString -> result.toString: Probability = 1.00, Count = 11
IsReuseDeltas -> isReuseDeltas: Probability = 1.00, Count = 1
reuseDeltas -> reuseDeltas: Probability = 1.00, Count = 3
HeaderLength -> headerLength: Probability = 1.00, Count = 1
codec -> codec: Probability = 0.83, Count = 5
codec -> [got: Probability = 0.17, Count = 1
StartCelebrityRecognitionResponse -> StartCelebrityRecognitionResult: Probability = 1.00, Count = 1
StartCelebrityRecognition -> startCelebrityRecognition: Probability = 1.00, Count = 1
StartCelebrityRecognitionRequest -> StartCelebrityRecognitionRequest: Probability = 1.00, Count = 1
Invoke<StartCelebrityRecognitionResponse> -> executeStartCelebrityRecognition: Probability = 1.00, Count = 1
flushInternal -> flushInternal: Probability = 1.00, Count = 3
@out.write -> out.write: Probability = 1.00, Count = 6
buffer.Length, -> buffer.length,: Probability = 1.00, Count = 5
count, -> count,: Probability = 1.00, Count = 6
_lei.ReadUShort -> _lei.readUShort: Probability = 1.00, Count = 2
ListProfileTimesResponse -> ListProfileTimesResult: Probability = 1.00, Count = 1
ListProfileTimes -> listProfileTimes: Probability = 1.00, Count = 1
ListProfileTimesRequest -> ListProfileTimesRequest: Probability = 1.00, Count = 1
Invoke<ListProfileTimesResponse> -> executeListProfileTimes: Probability = 1.00, Count = 1
ModifyCluster -> modifyCluster: Probability = 1.00, Count = 2
ModifyClusterRequest -> ModifyClusterRequest: Probability = 1.00, Count = 2
Invoke<ModifyClusterResponse> -> executeModifyCluster: Probability = 1.00, Count = 2
GetRouteResponsesResponse -> GetRouteResponsesResult: Probability = 1.00, Count = 1
GetRouteResponses -> getRouteResponses: Probability = 1.00, Count = 1
GetRouteResponsesRequest -> GetRouteResponsesRequest: Probability = 1.00, Count = 1
Invoke<GetRouteResponsesResponse> -> executeGetRouteResponses: Probability = 1.00, Count = 1
ReadTask -> ReadTask: Probability = 1.00, Count = 2
qm -> ReadTask>: Probability = 0.08, Count = 1
qm -> readTaskClass: Probability = 0.15, Count = 2
qm -> readTask.getClass: Probability = 0.08, Count = 1
qm -> qm: Probability = 0.31, Count = 4
qm -> readTaskQueryMaker.get: Probability = 0.08, Count = 1
qm -> qmkrClass.getConstructor: Probability = 0.08, Count = 1
qm -> qm.setConfig: Probability = 0.08, Count = 1
qm -> readTaskQueryMaker.put: Probability = 0.08, Count = 1
qm -> readTaskClass,qm: Probability = 0.08, Count = 1
PromptYesNo -> promptYesNo: Probability = 1.00, Count = 1
CredentialItem.YesNoType -> CredentialItem.YesNoType: Probability = 1.00, Count = 2
Utf8ToString -> utf8ToString: Probability = 1.00, Count = 1
UnicodeUtil.UTF8toUTF16 -> UnicodeUtil.UTF8toUTF16: Probability = 1.00, Count = 2
@ref.ToString -> ref,: Probability = 1.00, Count = 1
ListCandidatesForAutoMLJobResponse -> ListCandidatesForAutoMLJobResult: Probability = 1.00, Count = 1
ListCandidatesForAutoMLJob -> listCandidatesForAutoMLJob: Probability = 1.00, Count = 1
ListCandidatesForAutoMLJobRequest -> ListCandidatesForAutoMLJobRequest: Probability = 1.00, Count = 1
Invoke<ListCandidatesForAutoMLJobResponse> -> executeListCandidatesForAutoMLJob: Probability = 1.00, Count = 1
IFormulaRenderingWorkbook -> FormulaRenderingWorkbook: Probability = 1.00, Count = 3
book -> book: Probability = 1.00, Count = 4
book.ResolveNameXText -> book.resolveNameXText: Probability = 1.00, Count = 1
UpdateSkillGroupResponse -> UpdateSkillGroupResult: Probability = 1.00, Count = 1
UpdateSkillGroup -> updateSkillGroup: Probability = 1.00, Count = 1
UpdateSkillGroupRequest -> UpdateSkillGroupRequest: Probability = 1.00, Count = 1
Invoke<UpdateSkillGroupResponse> -> executeUpdateSkillGroup: Probability = 1.00, Count = 1
GetValue -> getValue: Probability = 0.69, Count = 9
GetValue -> final: Probability = 0.31, Count = 4
enc, -> enc,: Probability = 1.00, Count = 3
valStart, -> valStart,: Probability = 1.00, Count = 4
valEnd -> valEnd: Probability = 1.00, Count = 6
ListAssociatedFleetsResponse -> ListAssociatedFleetsResult: Probability = 1.00, Count = 1
ListAssociatedFleets -> listAssociatedFleets: Probability = 1.00, Count = 1
ListAssociatedFleetsRequest -> ListAssociatedFleetsRequest: Probability = 1.00, Count = 1
Invoke<ListAssociatedFleetsResponse> -> executeListAssociatedFleets: Probability = 1.00, Count = 1
RemoveLastChild -> removeLastChild: Probability = 1.00, Count = 1
children -> children!=null: Probability = 0.07, Count = 2
children -> .size: Probability = 0.34, Count = 10
children -> getChildren: Probability = 0.34, Count = 10
children -> children==null: Probability = 0.07, Count = 2
children -> children: Probability = 0.17, Count = 5
children.RemoveAt -> children.remove: Probability = 0.50, Count = 1
children.RemoveAt -> children.size: Probability = 0.50, Count = 1
children.Count -> ): Probability = 0.50, Count = 2
children.Count -> (: Probability = 0.25, Count = 1
children.Count -> children.size: Probability = 0.25, Count = 1
byte5 -> byte5: Probability = 1.00, Count = 9
byte6 -> byte6: Probability = 1.00, Count = 6
"\t" -> "\t": Probability = 1.00, Count = 7
delim -> delim: Probability = 1.00, Count = 3
RunScheduledInstancesResponse -> RunScheduledInstancesResult: Probability = 1.00, Count = 1
RunScheduledInstances -> runScheduledInstances: Probability = 1.00, Count = 1
RunScheduledInstancesRequest -> RunScheduledInstancesRequest: Probability = 1.00, Count = 1
Invoke<RunScheduledInstancesResponse> -> executeRunScheduledInstances: Probability = 1.00, Count = 1
IsValidExcelDate -> isValidExcelDate: Probability = 1.00, Count = 1
-Double.Epsilon -> -Double.MIN_VALUE: Probability = 1.00, Count = 1
SetForce -> setForce: Probability = 1.00, Count = 2
force -> force: Probability = 1.00, Count = 7
this.force -> this.force: Probability = 1.00, Count = 2
ConvertToEscherRecords -> convertToEscherRecords: Probability = 1.00, Count = 2
data.Length, -> data.length,: Probability = 1.00, Count = 1
text.Index -> text.getIndex: Probability = 1.00, Count = 4
text.EndIndex -> text.getEndIndex: Probability = 1.00, Count = 6
Done -> DONE: Probability = 1.00, Count = 13
sentenceStarts.Length -> sentenceStarts.length: Probability = 1.00, Count = 10
RunAutomaton -> RunAutomaton: Probability = 1.00, Count = 2
!Arrays.Equals -> !Arrays.equals: Probability = 1.00, Count = 3
SetOffset -> setOffset: Probability = 1.00, Count = 1
this.offset -> this.offset: Probability = 1.00, Count = 2
DescribeKeyPairsResponse -> DescribeKeyPairsResult: Probability = 1.00, Count = 2
DescribeKeyPairs -> describeKeyPairs: Probability = 1.00, Count = 3
DescribeKeyPairsRequest -> DescribeKeyPairsRequest: Probability = 1.00, Count = 2
IList<IParseTree> -> List<ParseTree>: Probability = 1.00, Count = 7
parseTrees -> parseTrees: Probability = 0.25, Count = 1
parseTrees -> parseTrees==null: Probability = 0.25, Count = 1
parseTrees -> parseTrees.size: Probability = 0.50, Count = 2
labels.Get -> labels.get: Probability = 1.00, Count = 2
parseTrees[parseTrees.Count -> parseTrees.get: Probability = 1.00, Count = 1
ListRecordsResponse -> ListRecordsResult: Probability = 1.00, Count = 1
ListRecords -> listRecords: Probability = 1.00, Count = 1
ListRecordsRequest -> ListRecordsRequest: Probability = 1.00, Count = 1
Invoke<ListRecordsResponse> -> executeListRecords: Probability = 1.00, Count = 1
DetectStackResourceDriftResponse -> DetectStackResourceDriftResult: Probability = 1.00, Count = 1
DetectStackResourceDrift -> detectStackResourceDrift: Probability = 1.00, Count = 1
DetectStackResourceDriftRequest -> DetectStackResourceDriftRequest: Probability = 1.00, Count = 1
Invoke<DetectStackResourceDriftResponse> -> executeDetectStackResourceDrift: Probability = 1.00, Count = 1
EncodeText -> encodeText: Probability = 1.00, Count = 2
originalText -> originalText: Probability = 1.00, Count = 12
invert -> invert: Probability = 1.00, Count = 4
List<IParseTree> -> ArrayList<ParseTree>: Probability = 0.67, Count = 4
List<IParseTree> -> ArrayList: Probability = 0.17, Count = 1
List<IParseTree> -> ArrayList<?>: Probability = 0.17, Count = 1
Trees.Descendants -> Trees.getDescendants: Probability = 1.00, Count = 1
DeleteUsagePlanKeyResponse -> DeleteUsagePlanKeyResult: Probability = 1.00, Count = 1
DeleteUsagePlanKey -> deleteUsagePlanKey: Probability = 1.00, Count = 1
DeleteUsagePlanKeyRequest -> DeleteUsagePlanKeyRequest: Probability = 1.00, Count = 1
Invoke<DeleteUsagePlanKeyResponse> -> executeDeleteUsagePlanKey: Probability = 1.00, Count = 1
GetLocalName -> getLocalName: Probability = 1.00, Count = 1
DeleteDocumentResponse -> DeleteDocumentResult: Probability = 1.00, Count = 1
DeleteDocumentRequest -> DeleteDocumentRequest: Probability = 1.00, Count = 1
Invoke<DeleteDocumentResponse> -> executeDeleteDocument: Probability = 1.00, Count = 1
GetExternalSheetIndex -> getExternalSheetIndex: Probability = 1.00, Count = 4
_uBook.GetSheetIndex -> _uBook.getSheetIndex: Probability = 1.00, Count = 3
_iBook.CheckExternSheet -> _iBook.checkExternSheet: Probability = 1.00, Count = 1
IdentityEncoder -> IdentityEncoder: Probability = 1.00, Count = 2
Encoding -> Charset: Probability = 1.00, Count = 4
charset -> charset: Probability = 1.00, Count = 2
this.m_charset -> this.charset: Probability = 1.00, Count = 1
CreateInternalReferences -> createInternalReferences: Probability = 1.00, Count = 1
numberOfSheets -> numberOfSheets: Probability = 1.00, Count = 3
CreateDBInstanceReadReplicaResponse -> DBInstance: Probability = 1.00, Count = 1
CreateDBInstanceReadReplica -> createDBInstanceReadReplica: Probability = 1.00, Count = 1
CreateDBInstanceReadReplicaRequest -> CreateDBInstanceReadReplicaRequest: Probability = 1.00, Count = 2
Invoke<CreateDBInstanceReadReplicaResponse> -> executeCreateDBInstanceReadReplica: Probability = 1.00, Count = 1
DescribePartnerEventSourceResponse -> DescribePartnerEventSourceResult: Probability = 1.00, Count = 1
DescribePartnerEventSource -> describePartnerEventSource: Probability = 1.00, Count = 1
DescribePartnerEventSourceRequest -> DescribePartnerEventSourceRequest: Probability = 1.00, Count = 1
Invoke<DescribePartnerEventSourceResponse> -> executeDescribePartnerEventSource: Probability = 1.00, Count = 1
EnterStandbyResponse -> EnterStandbyResult: Probability = 1.00, Count = 1
EnterStandby -> enterStandby: Probability = 1.00, Count = 1
EnterStandbyRequest -> EnterStandbyRequest: Probability = 1.00, Count = 1
Invoke<EnterStandbyResponse> -> executeEnterStandby: Probability = 1.00, Count = 1
GenerateParseException -> generateParseException: Probability = 1.00, Count = 9
jj_expentries.Clear -> jj_expentries.clear: Probability = 1.00, Count = 9
la1tokens -> la1tokens: Probability = 1.00, Count = 9
la1tokens[jj_kind] -> jj_kind: Probability = 1.00, Count = 18
jj_kind -> la1tokens[jj_kind]: Probability = 1.00, Count = 9
jj_la1[i] -> 10: Probability = 0.17, Count = 5
jj_la1[i] -> jj_la1[i]: Probability = 0.69, Count = 20
jj_la1[i] -> 25: Probability = 0.14, Count = 4
j++ -> j++: Probability = 0.92, Count = 22
j++ -> j: Probability = 0.08, Count = 2
jj_la1_0[i] -> 1<<j: Probability = 1.00, Count = 15
jj_expentry -> la1tokens[i]: Probability = 0.12, Count = 9
jj_expentry -> jj_expentry[0]: Probability = 0.12, Count = 9
jj_expentry -> jj_expentries.add: Probability = 0.12, Count = 9
jj_expentry -> jj_endpos: Probability = 0.12, Count = 9
jj_expentry -> jj_rescan_token: Probability = 0.12, Count = 9
jj_expentry -> jj_add_error_token: Probability = 0.12, Count = 9
jj_expentry -> exptokseq: Probability = 0.12, Count = 9
jj_expentry -> int[jj_expentries.size: Probability = 0.12, Count = 9
la1tokens[i] -> jj_expentry: Probability = 1.00, Count = 11
int[1] -> int[1]: Probability = 1.00, Count = 11
exptokseq -> i: Probability = 1.00, Count = 2
int[jj_expentries.Count][] -> i: Probability = 1.00, Count = 7
jj_expentries.Count -> jj_expentries.size: Probability = 0.82, Count = 9
jj_expentries.Count -> exptokseq[i]: Probability = 0.18, Count = 2
exptokseq[i] -> jj_expentries.get: Probability = 0.56, Count = 9
exptokseq[i] -> exptokseq[i]: Probability = 0.44, Count = 7
Token, -> token,: Probability = 1.00, Count = 9
exptokseq, -> exptokseq,: Probability = 0.50, Count = 9
exptokseq, -> tokenImage: Probability = 0.50, Count = 9
CreateCloudFrontOriginAccessIdentityRequest -> CreateCloudFrontOriginAccessIdentityRequest: Probability = 1.00, Count = 1
CloudFrontOriginAccessIdentityConfig -> CloudFrontOriginAccessIdentityConfig: Probability = 1.00, Count = 2
cloudFrontOriginAccessIdentityConfig -> cloudFrontOriginAccessIdentityConfig: Probability = 1.00, Count = 2
_cloudFrontOriginAccessIdentityConfig -> setCloudFrontOriginAccessIdentityConfig: Probability = 1.00, Count = 1
ResetFpgaImageAttributeResponse -> ResetFpgaImageAttributeResult: Probability = 1.00, Count = 1
ResetFpgaImageAttribute -> resetFpgaImageAttribute: Probability = 1.00, Count = 1
ResetFpgaImageAttributeRequest -> ResetFpgaImageAttributeRequest: Probability = 1.00, Count = 1
Invoke<ResetFpgaImageAttributeResponse> -> executeResetFpgaImageAttribute: Probability = 1.00, Count = 1
ContinuableRecordOutput -> ContinuableRecordOutput: Probability = 1.00, Count = 3
_numStrings -> _numStrings: Probability = 1.00, Count = 2
_numUniqueStrings -> _numUniqueStrings: Probability = 1.00, Count = 2
strings.Size -> strings.size: Probability = 1.00, Count = 2
rOff -> rOff: Probability = 0.38, Count = 3
rOff -> k/ExtSSTRecord.DEFAULT_BUCKET_SIZE: Probability = 0.12, Count = 1
rOff -> ExtSSTRecord.MAX_BUCKETS: Probability = 0.12, Count = 1
rOff -> bucketAbsoluteOffsets[index]: Probability = 0.12, Count = 1
rOff -> bucketRelativeOffsets[index]: Probability = 0.12, Count = 1
rOff -> getUnicodeString: Probability = 0.12, Count = 1
DeleteGroupMembershipResponse -> DeleteGroupMembershipResult: Probability = 1.00, Count = 1
DeleteGroupMembership -> deleteGroupMembership: Probability = 1.00, Count = 1
DeleteGroupMembershipRequest -> DeleteGroupMembershipRequest: Probability = 1.00, Count = 1
Invoke<DeleteGroupMembershipResponse> -> executeDeleteGroupMembership: Probability = 1.00, Count = 1
NameXPtg -> NameXPtg: Probability = 1.00, Count = 8
thisSheetRefIndex -> thisSheetRefIndex: Probability = 0.75, Count = 3
thisSheetRefIndex -> findRefIndexFromExtBookIndex: Probability = 0.25, Count = 1
pop -> pop: Probability = 1.00, Count = 2
removeFirstImpl -> removeFirstImpl: Probability = 1.00, Count = 3
ElisionFilterFactory -> ElisionFilterFactory: Probability = 1.00, Count = 1
articlesFile -> articlesFile: Probability = 1.00, Count = 1
"ignoreCase", -> "ignoreCase",: Probability = 1.00, Count = 6
base.Grow -> super.grow: Probability = 1.00, Count = 2
ord.Length -> start.length: Probability = 0.11, Count = 3
ord.Length -> ord.length: Probability = 0.59, Count = 16
ord.Length -> end.length: Probability = 0.07, Count = 2
ord.Length -> freq.length: Probability = 0.07, Count = 2
ord.Length -> boost,: Probability = 0.04, Count = 1
ord.Length -> TermStates[]: Probability = 0.04, Count = 1
ord.Length -> boost.length: Probability = 0.07, Count = 2
freq -> freq: Probability = 0.93, Count = 13
freq -> norm: Probability = 0.07, Count = 1
freq, -> freq,: Probability = 1.00, Count = 2
GetPersonalizedRankingResponse -> GetPersonalizedRankingResult: Probability = 1.00, Count = 1
GetPersonalizedRanking -> getPersonalizedRanking: Probability = 1.00, Count = 1
GetPersonalizedRankingRequest -> GetPersonalizedRankingRequest: Probability = 1.00, Count = 1
Invoke<GetPersonalizedRankingResponse> -> executeGetPersonalizedRanking: Probability = 1.00, Count = 1
GetObjectId -> getObjectId: Probability = 0.86, Count = 12
GetObjectId -> ObjectId: Probability = 0.14, Count = 2
FirstCol -> getFirstCol: Probability = 1.00, Count = 4
LastCol -> getLastCol: Probability = 1.00, Count = 4
RmCommand -> RmCommand: Probability = 1.00, Count = 3
filepatterns -> filepatterns: Probability = 1.00, Count = 3
Recover -> recover: Probability = 1.00, Count = 3
Parser -> Parser: Probability = 1.00, Count = 17
recognizer, -> recognizer,: Probability = 1.00, Count = 8
RecognitionException -> RecognitionException: Probability = 0.62, Count = 5
RecognitionException -> re: Probability = 0.25, Count = 2
RecognitionException -> recover: Probability = 0.12, Count = 1
context.exception -> context.exception: Probability = 1.00, Count = 1
ParseCanceledException -> ParseCancellationException: Probability = 1.00, Count = 2
BATBlock -> BATBlock: Probability = 0.60, Count = 3
BATBlock -> createBATBlock: Probability = 0.20, Count = 1
BATBlock -> bigBlockSize,: Probability = 0.20, Count = 1
POIFSBigBlockSize -> POIFSBigBlockSize: Probability = 1.00, Count = 2
ToByteArray -> toByteArray: Probability = 1.00, Count = 7
int.MaxValue -> Integer.MAX_VALUE: Probability = 1.00, Count = 7
OutOfMemoryException -> OutOfMemoryError: Probability = 1.00, Count = 4
outPtr -> outPtr: Probability = 0.71, Count = 5
outPtr -> outPtr,: Probability = 0.29, Count = 2
b.count -> b.buffer,: Probability = 0.33, Count = 1
b.count -> b.count: Probability = 0.67, Count = 2
@out, -> out,: Probability = 1.00, Count = 10
ClearShort -> clearShort: Probability = 1.00, Count = 1
this.Clear -> clear: Probability = 1.00, Count = 2
recordName -> recordName: Probability = 1.00, Count = 3
RecordName -> getRecordName: Probability = 1.00, Count = 5
"[" -> "[": Probability = 1.00, Count = 13
"]\n" -> "]\n": Probability = 1.00, Count = 6
"[/" -> "[/": Probability = 1.00, Count = 5
IllegalFormatCodePointException -> IllegalFormatCodePointException: Probability = 1.00, Count = 1
this.c -> this.c: Probability = 1.00, Count = 2
this.schema -> this.schema: Probability = 1.00, Count = 2
":'" -> ":'": Probability = 1.00, Count = 1
startDateAsNumber -> startDateAsNumber: Probability = 0.57, Count = 4
startDateAsNumber -> startDate: Probability = 0.29, Count = 2
startDateAsNumber -> startDateAsNumber,: Probability = 0.14, Count = 1
dtEnd -> months: Probability = 0.12, Count = 2
dtEnd -> cal.setTime: Probability = 0.06, Count = 1
dtEnd -> cal.clear: Probability = 0.24, Count = 4
dtEnd -> Calendar.HOUR: Probability = 0.06, Count = 1
dtEnd -> cal.set: Probability = 0.12, Count = 2
dtEnd -> Calendar.HOUR_OF_DAY,: Probability = 0.06, Count = 1
dtEnd -> cal.add: Probability = 0.12, Count = 2
dtEnd -> Calendar.MONTH,: Probability = 0.06, Count = 1
dtEnd -> Calendar.DAY_OF_MONTH,: Probability = 0.12, Count = 2
dtEnd -> cal.getTime: Probability = 0.06, Count = 1
1.0 -> 1.0: Probability = 1.00, Count = 9
DateUtil.GetExcelDate -> DateUtil.getExcelDate: Probability = 1.00, Count = 2
GetSSTString -> getSSTString: Probability = 1.00, Count = 1
sst.GetString -> index=",: Probability = 1.00, Count = 1
'\'' -> '\'': Probability = 1.00, Count = 8
@in.Length -> in.length: Probability = 1.00, Count = 3
@in[i] -> in.charAt: Probability = 1.00, Count = 3
lastElement -> lastElement: Probability = 1.00, Count = 2
currentOffset -> currentOffset: Probability = 0.50, Count = 3
currentOffset -> pool.append: Probability = 0.17, Count = 1
currentOffset -> offsets[lastElement++]: Probability = 0.17, Count = 1
currentOffset -> lastElement-1: Probability = 0.17, Count = 1
offsets.Length -> offsets,: Probability = 0.25, Count = 2
offsets.Length -> offsets.length: Probability = 0.50, Count = 4
offsets.Length -> oldLen: Probability = 0.25, Count = 2
pool.Reset -> pool.reset: Probability = 1.00, Count = 1
ReplaceableItem -> ReplaceableItem: Probability = 1.00, Count = 2
IrishLowerCaseFilter -> IrishLowerCaseFilter: Probability = 1.00, Count = 2
termAtt -> super: Probability = 0.71, Count = 10
termAtt -> termAtt: Probability = 0.29, Count = 4
secondaryProgress -> setSecondaryProgress: Probability = 0.10, Count = 1
secondaryProgress -> secondaryProgress: Probability = 0.70, Count = 7
secondaryProgress -> R.id.secondaryProgress,: Probability = 0.10, Count = 1
secondaryProgress -> mSecondaryProgress,: Probability = 0.10, Count = 1
mMax -> mMax: Probability = 1.00, Count = 5
mSecondaryProgress -> mSecondaryProgress: Probability = 1.00, Count = 3
refreshProgress -> refreshProgress: Probability = 1.00, Count = 2
GetHiddenTokensToRight -> getHiddenTokensToRight: Probability = 1.00, Count = 3
DataValidityTable -> DataValidityTable: Probability = 1.00, Count = 2
_headerRec -> _headerRec: Probability = 1.00, Count = 3
DVALRecord -> DVALRecord: Probability = 1.00, Count = 4
_validationList -> _validationList: Probability = 1.00, Count = 2
errorEval -> errorEval: Probability = 1.00, Count = 2
_errorEval -> _errorEval: Probability = 1.00, Count = 2
UpdateConfigurationTemplateRequest -> UpdateConfigurationTemplateRequest: Probability = 1.00, Count = 1
Invoke<DescribeAvailabilityZonesResponse> -> executeDescribeAvailabilityZones: Probability = 1.00, Count = 1
idealShortArraySize -> idealShortArraySize: Probability = 1.00, Count = 1
need -> need: Probability = 1.00, Count = 16
idealByteArraySize -> idealByteArraySize: Probability = 1.00, Count = 7
NumericPayloadTokenFilterFactory -> NumericPayloadTokenFilterFactory: Probability = 1.00, Count = 1
payload -> payload: Probability = 0.79, Count = 15
payload -> closeIndexWriterOnBuild: Probability = 0.11, Count = 2
payload -> t.getPayload: Probability = 0.11, Count = 2
RequireSingle -> requireFloat: Probability = 1.00, Count = 1
"payload" -> "payload": Probability = 1.00, Count = 1
"typeMatch" -> "typeMatch": Probability = 1.00, Count = 1
DescribeResourcePermissionsResponse -> DescribeResourcePermissionsResult: Probability = 1.00, Count = 1
DescribeResourcePermissions -> describeResourcePermissions: Probability = 1.00, Count = 1
DescribeResourcePermissionsRequest -> DescribeResourcePermissionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeResourcePermissionsResponse> -> executeDescribeResourcePermissions: Probability = 1.00, Count = 1
delegator.Create -> SynonymFilter: Probability = 0.50, Count = 1
delegator.Create -> map,: Probability = 0.50, Count = 1
GetRuleInvocationStack -> getRuleInvocationStack: Probability = 1.00, Count = 3
m_len -> s.getChars: Probability = 0.08, Count = 1
m_len -> 0,s.length: Probability = 0.15, Count = 2
m_len -> ,buf,: Probability = 0.15, Count = 2
m_len -> len: Probability = 0.38, Count = 5
m_len -> +=s.length: Probability = 0.15, Count = 2
m_len -> =0: Probability = 0.08, Count = 1
map.Clear -> map.clear: Probability = 1.00, Count = 2
DeleteWorkteamResponse -> DeleteWorkteamResult: Probability = 1.00, Count = 1
DeleteWorkteam -> deleteWorkteam: Probability = 1.00, Count = 1
DeleteWorkteamRequest -> DeleteWorkteamRequest: Probability = 1.00, Count = 1
Invoke<DeleteWorkteamResponse> -> executeDeleteWorkteam: Probability = 1.00, Count = 1
a.ToString -> a.toString: Probability = 1.00, Count = 5
changeType -> changeType: Probability = 1.00, Count = 4
newPath -> newPath: Probability = 1.00, Count = 4
oldPath -> oldPath: Probability = 1.00, Count = 5
CreateRepositoryResponse -> CreateRepositoryResult: Probability = 1.00, Count = 1
CreateRepository -> createRepository: Probability = 1.00, Count = 1
CreateRepositoryRequest -> CreateRepositoryRequest: Probability = 1.00, Count = 1
Invoke<CreateRepositoryResponse> -> executeCreateRepository: Probability = 1.00, Count = 1
LineFormatRecord -> LineFormatRecord: Probability = 1.00, Count = 1
field_1_lineColor -> field_1_lineColor: Probability = 1.00, Count = 2
field_2_linePattern -> field_2_linePattern: Probability = 1.00, Count = 2
field_3_weight -> field_3_weight: Probability = 1.00, Count = 2
field_4_format -> field_4_format: Probability = 1.00, Count = 2
field_5_colourPaletteIndex -> field_5_colourPaletteIndex: Probability = 1.00, Count = 2
DescribeClusterResponse -> DescribeClusterResult: Probability = 1.00, Count = 1
DescribeCluster -> describeCluster: Probability = 1.00, Count = 1
DescribeClusterRequest -> DescribeClusterRequest: Probability = 1.00, Count = 1
Invoke<DescribeClusterResponse> -> executeDescribeCluster: Probability = 1.00, Count = 1
UserAgent -> UserAgentConfig: Probability = 1.00, Count = 1
GetUserAgentConfig -> getUserAgentConfig: Probability = 1.00, Count = 1
userAgentConfig -> userAgentConfig: Probability = 1.00, Count = 1
GetTokenScore -> getTokenScore: Probability = 1.00, Count = 2
termText -> termText: Probability = 1.00, Count = 12
termAtt.ToString -> termAtt.toString: Probability = 1.00, Count = 3
queryTerm -> WeightedTerm: Probability = 0.25, Count = 1
queryTerm -> queryTerm: Probability = 0.50, Count = 2
queryTerm -> !uniqueTermsInFragment.contains: Probability = 0.25, Count = 1
!termsToFind.TryGetValue -> termsToFind.get: Probability = 1.00, Count = 2
totalScore -> totalScore: Probability = 1.00, Count = 4
queryTerm.Weight -> queryTerm.getWeight: Probability = 0.67, Count = 2
queryTerm.Weight -> uniqueTermsInFragment.add: Probability = 0.33, Count = 1
arrays.Clear -> arrays.clear: Probability = 1.00, Count = 2
DescribeEndpointsResponse -> DescribeEndpointsResult: Probability = 1.00, Count = 1
DescribeEndpoints -> describeEndpoints: Probability = 1.00, Count = 1
DescribeEndpointsRequest -> DescribeEndpointsRequest: Probability = 1.00, Count = 1
Invoke<DescribeEndpointsResponse> -> executeDescribeEndpoints: Probability = 1.00, Count = 1
"PATH -> "PATH: Probability = 1.00, Count = 1
pathStr -> pathStr: Probability = 1.00, Count = 1
"\" -> "\": Probability = 1.00, Count = 8
"dictionary" -> "dictionary": Probability = 1.00, Count = 3
writeFloat -> writeFloat: Probability = 1.00, Count = 2
ToCharArray -> toCharArray: Probability = 1.00, Count = 1
newbuf -> newbuf[]: Probability = 0.33, Count = 1
newbuf -> char[size: Probability = 0.33, Count = 1
newbuf -> newbuf: Probability = 0.33, Count = 1
m_buf, -> buf,: Probability = 0.60, Count = 3
m_buf, -> size: Probability = 0.40, Count = 2
newbuf, -> newbuf,: Probability = 1.00, Count = 1
GetExpectedTokens -> getExpectedTokens: Probability = 0.75, Count = 3
GetExpectedTokens -> getATN: Probability = 0.25, Count = 1
recognizer -> recognizer: Probability = 0.60, Count = 21
recognizer -> RecognitionException: Probability = 0.06, Count = 2
recognizer -> singleTokenDeletion: Probability = 0.06, Count = 2
recognizer -> e: Probability = 0.11, Count = 4
recognizer -> nextTokensContext: Probability = 0.14, Count = 5
recognizer -> nextTokensState,: Probability = 0.03, Count = 1
recognizer.Atn.GetExpectedTokens -> recognizer.getATN: Probability = 0.50, Count = 1
recognizer.Atn.GetExpectedTokens -> .getExpectedTokens: Probability = 0.50, Count = 1
offendingState, -> offendingState,: Probability = 1.00, Count = 1
HindiNormalizationFilterFactory -> HindiNormalizationFilterFactory: Probability = 1.00, Count = 1
UpdateUserIdentityInfoResponse -> UpdateUserIdentityInfoResult: Probability = 1.00, Count = 1
UpdateUserIdentityInfo -> updateUserIdentityInfo: Probability = 1.00, Count = 1
UpdateUserIdentityInfoRequest -> UpdateUserIdentityInfoRequest: Probability = 1.00, Count = 1
Invoke<UpdateUserIdentityInfoResponse> -> executeUpdateUserIdentityInfo: Probability = 1.00, Count = 1
Allocator -> Allocator: Probability = 1.00, Count = 2
this.m_blockSize -> this.blockSize: Probability = 1.00, Count = 1
NoteMapMerger -> NoteMapMerger: Probability = 1.00, Count = 1
NoteMerger -> NoteMerger: Probability = 1.00, Count = 1
noteMerger, -> noteMerger,MergeStrategy: Probability = 1.00, Count = 1
nonNotesMergeStrategy -> nonNotesMergeStrategy: Probability = 1.00, Count = 2
this.db -> this.db: Probability = 1.00, Count = 1
db -> db: Probability = 1.00, Count = 18
db.NewObjectReader -> db.newObjectReader: Probability = 1.00, Count = 1
this.nonNotesMergeStrategy -> this.nonNotesMergeStrategy: Probability = 1.00, Count = 1
this.objectIdPrefix -> this.objectIdPrefix: Probability = 1.00, Count = 1
ListAliasesResponse -> ListAliasesResult: Probability = 1.00, Count = 1
ListAliases -> listAliases: Probability = 1.00, Count = 1
ListAliasesRequest -> ListAliasesRequest: Probability = 1.00, Count = 1
Invoke<ListAliasesResponse> -> executeListAliases: Probability = 1.00, Count = 1
WithRoleSessionName -> STSAssumeRoleSessionCredentialsProvider: Probability = 0.50, Count = 1
WithRoleSessionName -> withRoleSessionName: Probability = 0.50, Count = 1
roleSessionName -> roleSessionName: Probability = 0.25, Count = 1
roleSessionName -> this.roleSessionName: Probability = 0.25, Count = 1
roleSessionName -> this: Probability = 0.50, Count = 2
this.roleSessionName -> roleSessionName: Probability = 1.00, Count = 1
capacity -> capacity: Probability = 0.68, Count = 42
capacity -> ArrayList: Probability = 0.02, Count = 1
capacity -> "Capacity:: Probability = 0.03, Count = 2
capacity -> @SuppressWarnings: Probability = 0.03, Count = 2
capacity -> "unchecked": Probability = 0.03, Count = 2
capacity -> MINIMUM_CAPACITY: Probability = 0.06, Count = 4
capacity -> MAXIMUM_CAPACITY: Probability = 0.06, Count = 4
capacity -> roundUpToPowerOfTwo: Probability = 0.03, Count = 2
capacity -> makeTable: Probability = 0.03, Count = 2
capacity -> toDirectoryIndex: Probability = 0.02, Count = 1
int[capacity] -> int[capacity]: Probability = 1.00, Count = 1
ReceiveCommand.Result -> Result: Probability = 0.50, Count = 2
ReceiveCommand.Result -> ReceiveCommand.Result: Probability = 0.50, Count = 2
GetResult -> getResult: Probability = 1.00, Count = 6
Size -> size: Probability = 1.00, Count = 6
DescribeAccountAttributesResponse -> DescribeAccountAttributesResult: Probability = 1.00, Count = 2
DescribeAccountAttributes -> describeAccountAttributes: Probability = 1.00, Count = 3
DescribeAccountAttributesRequest -> DescribeAccountAttributesRequest: Probability = 1.00, Count = 2
"G" -> "G": Probability = 1.00, Count = 1
Int64 -> fieldsData: Probability = 1.00, Count = 3
GroupedFacetResult -> GroupedFacetResult: Probability = 1.00, Count = 1
minCount, -> minCount,: Probability = 0.50, Count = 2
minCount, -> Integer: Probability = 0.50, Count = 2
orderByCount, -> orderByCount,: Probability = 1.00, Count = 1
totalCount, -> totalCount,: Probability = 1.00, Count = 1
totalMissingCount -> totalMissingCount: Probability = 1.00, Count = 2
this.facetEntries -> this.facetEntries: Probability = 1.00, Count = 1
orderByCount -> orderByCount: Probability = 1.00, Count = 1
orderByCountAndValue -> orderByCountAndValue: Probability = 1.00, Count = 1
orderByValue -> orderByValue: Probability = 1.00, Count = 1
this.totalMissingCount -> this.totalMissingCount: Probability = 1.00, Count = 1
this.totalCount -> this.totalCount: Probability = 1.00, Count = 1
totalCount -> totalCount: Probability = 1.00, Count = 5
maxSize -> maxSize: Probability = 1.00, Count = 2
currentMin -> currentMin: Probability = 1.00, Count = 1
minCount -> minCount: Probability = 1.00, Count = 2
ret -> byName.get: Probability = 0.03, Count = 1
ret -> ret: Probability = 0.71, Count = 27
ret -> byNumber.length: Probability = 0.03, Count = 1
ret -> byNumber[fieldNumber]: Probability = 0.03, Count = 1
ret -> eqSkip: Probability = 0.05, Count = 2
ret -> t2.bytes,: Probability = 0.03, Count = 1
ret -> t2.docFreq,: Probability = 0.03, Count = 1
ret -> t2.totalTermFreq: Probability = 0.03, Count = 1
ret -> t1.bytes,: Probability = 0.03, Count = 1
ret -> t1.docFreq,: Probability = 0.03, Count = 1
ret -> t1.totalTermFreq: Probability = 0.03, Count = 1
regionStart -> regionStart: Probability = 1.00, Count = 1
_regionStart -> regionStart: Probability = 1.00, Count = 1
GetPort -> getPort: Probability = 1.00, Count = 3
port -> Host.this.getPort: Probability = 0.25, Count = 1
port -> port: Probability = 0.75, Count = 3
InterruptTimer -> InterruptTimer: Probability = 1.00, Count = 1
threadName -> threadName: Probability = 1.00, Count = 1
InterruptTimer.AlarmState -> AlarmState: Probability = 1.00, Count = 1
autoKiller -> autoKiller: Probability = 1.00, Count = 1
InterruptTimer.AutoKiller -> AutoKiller: Probability = 1.00, Count = 1
thread -> thread: Probability = 1.00, Count = 1
InterruptTimer.AlarmThread -> AlarmThread: Probability = 1.00, Count = 1
threadName, -> threadName,: Probability = 1.00, Count = 1
thread.Start -> thread.start: Probability = 1.00, Count = 1
HighFrequencyDictionary -> HighFrequencyDictionary: Probability = 1.00, Count = 1
thresh -> thresh: Probability = 1.00, Count = 2
this.thresh -> this.thresh: Probability = 1.00, Count = 1
ModifyDBProxyTargetGroupResponse -> ModifyDBProxyTargetGroupResult: Probability = 1.00, Count = 1
ModifyDBProxyTargetGroup -> modifyDBProxyTargetGroup: Probability = 1.00, Count = 1
ModifyDBProxyTargetGroupRequest -> ModifyDBProxyTargetGroupRequest: Probability = 1.00, Count = 1
Invoke<ModifyDBProxyTargetGroupResponse> -> executeModifyDBProxyTargetGroup: Probability = 1.00, Count = 1
arriving -> arriving: Probability = 0.25, Count = 1
arriving -> count: Probability = 0.50, Count = 2
arriving -> forwardCount: Probability = 0.25, Count = 1
leaving -> -1: Probability = 0.22, Count = 2
leaving -> leaving: Probability = 0.11, Count = 1
leaving -> "pos=": Probability = 0.11, Count = 1
leaving -> +: Probability = 0.33, Count = 3
leaving -> forwardCount=": Probability = 0.11, Count = 1
leaving -> forwardCount: Probability = 0.11, Count = 1
loadBalancerName, -> loadBalancerName,: Probability = 1.00, Count = 9
loadBalancerPort, -> Integer: Probability = 0.60, Count = 3
loadBalancerPort, -> loadBalancerPort,: Probability = 0.40, Count = 2
sslCertificateId -> sSLCertificateId: Probability = 1.00, Count = 2
_loadBalancerName -> setLoadBalancerName: Probability = 1.00, Count = 11
loadBalancerName -> loadBalancerName: Probability = 0.54, Count = 13
loadBalancerName -> ): Probability = 0.46, Count = 11
_loadBalancerPort -> setLoadBalancerPort: Probability = 1.00, Count = 2
loadBalancerPort -> loadBalancerPort: Probability = 1.00, Count = 2
_sslCertificateId -> setSSLCertificateId: Probability = 1.00, Count = 1
SpanTermQuery -> SpanTermQuery: Probability = 1.00, Count = 5
this.m_term -> this.termStates: Probability = 1.00, Count = 1
sizeInByes -> ramBytesUsed: Probability = 0.75, Count = 3
sizeInByes -> r.ramBytesUsed: Probability = 0.25, Count = 1
postingsReader -> postingsReader.ramBytesUsed: Probability = 0.18, Count = 2
postingsReader -> PostingsReaderBase: Probability = 0.18, Count = 2
postingsReader -> postingsReader: Probability = 0.45, Count = 5
postingsReader -> FSTTermsReader: Probability = 0.18, Count = 2
o.GetType -> o.getClass: Probability = 1.00, Count = 6
DocFreqValueSource -> DocFreqValueSource: Probability = 1.00, Count = 3
this.m_indexedField.Equals -> this.indexedField.equals: Probability = 1.00, Count = 1
other.m_indexedField, -> other.indexedField: Probability = 1.00, Count = 1
this.m_indexedBytes.Equals -> this.indexedBytes.equals: Probability = 1.00, Count = 1
other.m_indexedBytes -> other.indexedBytes: Probability = 1.00, Count = 1
GetLucenePrefixTerm -> getLucenePrefixTerm: Probability = 1.00, Count = 1
Prefix -> getPrefix: Probability = 1.00, Count = 2
Trees.FindAllTokenNodes -> Trees.findAllTokenNodes: Probability = 1.00, Count = 1
tokenType -> tokenType: Probability = 1.00, Count = 11
Signer -> Signer: Probability = 1.00, Count = 1
GetSigner -> getSigner: Probability = 1.00, Count = 2
BearerTokenCredential -> SHA256_WITH_RSA_SIGNER: Probability = 1.00, Count = 1
KeyPairCredentials -> BEARER_TOKEN_SIGNER: Probability = 0.50, Count = 1
KeyPairCredentials -> KeyPairCredentials: Probability = 0.50, Count = 1
hmacSHA1Signer -> HMACSHA1_SIGNER: Probability = 1.00, Count = 1
PutAccountSendingAttributesResponse -> PutAccountSendingAttributesResult: Probability = 1.00, Count = 1
PutAccountSendingAttributes -> putAccountSendingAttributes: Probability = 1.00, Count = 1
PutAccountSendingAttributesRequest -> PutAccountSendingAttributesRequest: Probability = 1.00, Count = 1
Invoke<PutAccountSendingAttributesResponse> -> executePutAccountSendingAttributes: Probability = 1.00, Count = 1
GetExtension -> getExtension: Probability = 1.00, Count = 2
RunJobFlowResponse -> RunJobFlowResult: Probability = 1.00, Count = 1
RunJobFlow -> runJobFlow: Probability = 1.00, Count = 1
RunJobFlowRequest -> RunJobFlowRequest: Probability = 1.00, Count = 2
Invoke<RunJobFlowResponse> -> executeRunJobFlow: Probability = 1.00, Count = 1
LastLength -> lastLength: Probability = 1.00, Count = 1
lastLength -> lastLength: Probability = 1.00, Count = 1
ListStreamConsumersResponse -> ListStreamConsumersResult: Probability = 1.00, Count = 1
ListStreamConsumers -> listStreamConsumers: Probability = 1.00, Count = 1
ListStreamConsumersRequest -> ListStreamConsumersRequest: Probability = 1.00, Count = 1
Invoke<ListStreamConsumersResponse> -> executeListStreamConsumers: Probability = 1.00, Count = 1
SimpleFraction -> SimpleFraction: Probability = 1.00, Count = 4
BuildFractionMaxDenominator -> buildFractionMaxDenominator: Probability = 1.00, Count = 2
maxDenominator -> maxDenominator: Probability = 1.00, Count = 1
maxDenominator, -> maxDenominator,: Probability = 1.00, Count = 1
"term=" -> method: Probability = 1.00, Count = 1
exist" -> called": Probability = 1.00, Count = 1
NGit.Api.LsRemoteCommand -> LsRemoteCommand: Probability = 1.00, Count = 3
SetUploadPack -> setUploadPack: Probability = 1.00, Count = 1
uploadPack -> uploadPack: Probability = 1.00, Count = 2
this.uploadPack -> this.uploadPack: Probability = 1.00, Count = 1
hex -> hex: Probability = 1.00, Count = 3
BaseNumberUtils.ConvertToDecimal -> BaseNumberUtils.convertToDecimal: Probability = 1.00, Count = 2
MAX_NUMBER_OF_PLACES -> MAX_NUMBER_OF_PLACES: Probability = 1.00, Count = 2
DescribeInstancesResponse -> DescribeInstancesResult: Probability = 1.00, Count = 2
DescribeInstances -> describeInstances: Probability = 1.00, Count = 3
DescribeInstancesRequest -> DescribeInstancesRequest: Probability = 1.00, Count = 2
Call -> call: Probability = 0.38, Count = 15
Call -> throws: Probability = 0.38, Count = 15
Call -> GitAPIException: Probability = 0.25, Count = 10
ICollection<ReflogEntry> -> Collection<ReflogEntry>: Probability = 1.00, Count = 2
walk.ParseCommit -> walk.parseCommit: Probability = 1.00, Count = 7
JGitInternalException -> JGitInternalException: Probability = 0.90, Count = 19
JGitInternalException -> ,: Probability = 0.10, Count = 2
field_1_error_code -> field_1_error_code: Probability = 0.67, Count = 2
field_1_error_code -> .getString: Probability = 0.33, Count = 1
PutAccountSettingResponse -> PutAccountSettingResult: Probability = 1.00, Count = 1
PutAccountSetting -> putAccountSetting: Probability = 1.00, Count = 1
PutAccountSettingRequest -> PutAccountSettingRequest: Probability = 1.00, Count = 1
Invoke<PutAccountSettingResponse> -> executePutAccountSetting: Probability = 1.00, Count = 1
CharacterBuffer -> CharacterBuffer: Probability = 1.00, Count = 2
NewCharacterBuffer -> newCharacterBuffer: Probability = 1.00, Count = 1
"buffersize -> "buffersize: Probability = 1.00, Count = 1
char[bufferSize], -> char[bufferSize],: Probability = 1.00, Count = 1
GetLevelForDistance -> getLevelForDistance: Probability = 0.58, Count = 7
GetLevelForDistance -> dist: Probability = 0.42, Count = 5
m_maxLevels -> maxLevels: Probability = 0.33, Count = 11
m_maxLevels -> maxLevels-1: Probability = 0.06, Count = 2
m_maxLevels -> i+1: Probability = 0.06, Count = 2
m_maxLevels -> level: Probability = 0.15, Count = 5
m_maxLevels -> S2Projections.MAX_WIDTH.getMinLevel: Probability = 0.06, Count = 2
m_maxLevels -> DistanceUtils.DEGREES_TO_RADIANS: Probability = 0.06, Count = 2
m_maxLevels -> roundLevel: Probability = 0.12, Count = 4
m_maxLevels -> Math.min: Probability = 0.03, Count = 1
m_maxLevels -> maxLevels,: Probability = 0.06, Count = 2
m_maxLevels -> level,: Probability = 0.06, Count = 2
MakeLuceneQueryNoBoost -> makeLuceneQueryNoBoost: Probability = 1.00, Count = 2
ListDedicatedIpPoolsResponse -> ListDedicatedIpPoolsResult: Probability = 1.00, Count = 1
ListDedicatedIpPools -> listDedicatedIpPools: Probability = 1.00, Count = 1
ListDedicatedIpPoolsRequest -> ListDedicatedIpPoolsRequest: Probability = 1.00, Count = 1
Invoke<ListDedicatedIpPoolsResponse> -> executeListDedicatedIpPools: Probability = 1.00, Count = 1
CreateVector -> createVector: Probability = 1.00, Count = 2
SheetVector -> SheetVector: Probability = 1.00, Count = 2
NGit.Api.RemoveNoteCommand -> RemoveNoteCommand: Probability = 1.00, Count = 2
this.id -> this.id: Probability = 0.86, Count = 6
this.id -> this: Probability = 0.14, Count = 1
field_1_chartGroupIndex -> field_1_chartGroupIndex: Probability = 1.00, Count = 2
IsOutlineOn=false -> false: Probability = 1.00, Count = 3
IsShadowOn=false -> false: Probability = 1.00, Count = 2
SetInt -> false: Probability = 0.40, Count = 6
SetInt -> OFFSET_FONT_NAME,: Probability = 0.07, Count = 1
SetInt -> setInt: Probability = 0.20, Count = 3
SetInt -> OFFSET_NOT_USED1,: Probability = 0.07, Count = 1
SetInt -> 0x00000001: Probability = 0.07, Count = 1
SetInt -> OFFSET_NOT_USED2,: Probability = 0.07, Count = 1
SetInt -> OFFSET_NOT_USED3,: Probability = 0.07, Count = 1
SetInt -> 0x7FFFFFFF: Probability = 0.07, Count = 1
SetShort -> setShort: Probability = 1.00, Count = 3
0x00000000 -> 0x00000000: Probability = 1.00, Count = 2
GetFacetResponse -> GetFacetResult: Probability = 1.00, Count = 1
GetFacet -> getFacet: Probability = 1.00, Count = 1
GetFacetRequest -> GetFacetRequest: Probability = 1.00, Count = 1
Invoke<GetFacetResponse> -> executeGetFacet: Probability = 1.00, Count = 1
"Table -> "Table: Probability = 1.00, Count = 1
Arrays -> Arrays: Probability = 1.00, Count = 1
yet -> yet: Probability = 1.00, Count = 4
StartFleetResponse -> StartFleetResult: Probability = 1.00, Count = 1
StartFleet -> startFleet: Probability = 1.00, Count = 1
StartFleetRequest -> StartFleetRequest: Probability = 1.00, Count = 1
Invoke<StartFleetResponse> -> executeStartFleet: Probability = 1.00, Count = 1
family -> FontFamily: Probability = 0.50, Count = 2
family -> nativeId: Probability = 0.50, Count = 2
NOT_APPLICABLE -> ff: Probability = 1.00, Count = 2
EncodeBytes -> encodeBytes: Probability = 1.00, Count = 2
source -> source: Probability = 0.96, Count = 23
source -> mLogic: Probability = 0.04, Count = 1
source.Length -> source.length: Probability = 1.00, Count = 1
DescribeBackupsResponse -> DescribeBackupsResult: Probability = 1.00, Count = 1
DescribeBackups -> describeBackups: Probability = 1.00, Count = 1
DescribeBackupsRequest -> DescribeBackupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeBackupsResponse> -> executeDescribeBackups: Probability = 1.00, Count = 1
ReflectionMethodRecordCreator -> ReflectionMethodRecordCreator: Probability = 1.00, Count = 1
MethodInfo -> Method: Probability = 1.00, Count = 1
_m -> _m: Probability = 1.00, Count = 1
ResolvesToJustOneViableAlt -> resolvesToJustOneViableAlt: Probability = 1.00, Count = 1
GetSingleViableAlt -> getSingleViableAlt: Probability = 1.00, Count = 2
GetGatewayResponse -> GetGatewayResult: Probability = 0.50, Count = 1
GetGatewayResponse -> getGatewayResponse: Probability = 0.50, Count = 1
GetGateway -> getGateway: Probability = 1.00, Count = 1
GetGatewayRequest -> GetGatewayRequest: Probability = 1.00, Count = 1
Invoke<GetGatewayResponse> -> executeGetGateway: Probability = 1.00, Count = 1
onFilterComplete -> onFilterComplete: Probability = 1.00, Count = 1
updateDropDownForFilter -> updateDropDownForFilter: Probability = 1.00, Count = 1
FreeRefFunction -> FreeRefFunction: Probability = 1.00, Count = 10
FindUserDefinedFunction -> findUserDefinedFunction: Probability = 1.00, Count = 2
_bookEvaluator.FindUserDefinedFunction -> _bookEvaluator.findUserDefinedFunction: Probability = 1.00, Count = 1
SemanticContext.PrecedencePredicate -> PrecedencePredicate: Probability = 1.00, Count = 4
this.precedence -> this.precedence: Probability = 1.00, Count = 4
other.precedence -> other.precedence: Probability = 1.00, Count = 1
GetStringWidth -> getStringWidth: Probability = 1.00, Count = 1
width -> width: Probability = 0.85, Count = 11
width -> charWidths.put: Probability = 0.08, Count = 1
width -> ,: Probability = 0.08, Count = 1
GetCharWidth -> getCharWidth: Probability = 1.00, Count = 3
ByteVector -> ByteVector: Probability = 1.00, Count = 4
DEFAULT_BLOCK_SIZE -> DEFAULT_BLOCK_SIZE: Probability = 0.71, Count = 5
DEFAULT_BLOCK_SIZE -> a: Probability = 0.29, Count = 2
DeleteVerifiedEmailAddressResponse -> DeleteVerifiedEmailAddressResult: Probability = 1.00, Count = 1
DeleteVerifiedEmailAddress -> deleteVerifiedEmailAddress: Probability = 1.00, Count = 1
DeleteVerifiedEmailAddressRequest -> DeleteVerifiedEmailAddressRequest: Probability = 1.00, Count = 1
Invoke<DeleteVerifiedEmailAddressResponse> -> executeDeleteVerifiedEmailAddress: Probability = 1.00, Count = 1
DescribeScalingActivitiesResponse -> DescribeScalingActivitiesResult: Probability = 1.00, Count = 2
DescribeScalingActivities -> describeScalingActivities: Probability = 1.00, Count = 3
DescribeScalingActivitiesRequest -> DescribeScalingActivitiesRequest: Probability = 1.00, Count = 2
Invoke<DescribeScalingActivitiesResponse> -> executeDescribeScalingActivities: Probability = 1.00, Count = 1
SimpleQueryParser -> SimpleQueryParser: Probability = 1.00, Count = 1
float> -> Collections.singletonMap: Probability = 1.00, Count = 1
1.0F -> 1.0F: Probability = 1.00, Count = 1
queries -> ArrayList<SrndQuery>: Probability = 0.33, Count = 10
queries -> queries: Probability = 0.67, Count = 20
Token -> Token: Probability = 0.66, Count = 31
Token -> token: Probability = 0.32, Count = 15
Token -> ParseException: Probability = 0.02, Count = 1
oprt -> oprt: Probability = 1.00, Count = 9
queries.Add -> queries.add: Probability = 1.00, Count = 11
queries, -> queries,: Probability = 0.69, Count = 9
queries, -> getDistanceQuery: Probability = 0.31, Count = 4
AddJobFlowStepsRequest -> AddJobFlowStepsRequest: Probability = 1.00, Count = 3
jobFlowId, -> jobFlowId,: Probability = 1.00, Count = 2
List<StepConfig> -> java.util.List<StepConfig>: Probability = 1.00, Count = 1
steps -> steps: Probability = 1.00, Count = 2
_jobFlowId -> setJobFlowId: Probability = 0.80, Count = 4
_jobFlowId -> jobFlowId: Probability = 0.20, Count = 1
jobFlowId -> jobFlowId: Probability = 1.00, Count = 5
_steps -> setSteps: Probability = 1.00, Count = 1
"<>" -> "<>": Probability = 1.00, Count = 1
StripSegmentName -> stripSegmentName: Probability = 1.00, Count = 1
IndexOfSegmentName -> indexOfSegmentName: Probability = 1.00, Count = 2
InvalidMarkException -> InvalidMarkException: Probability = 1.00, Count = 1
detailMessage -> detailMessage: Probability = 1.00, Count = 5
nextElement -> nextElement: Probability = 1.00, Count = 2
this.nextEntryNotFailFast -> nextEntryNotFailFast: Probability = 1.00, Count = 2
.value -> .value: Probability = 0.57, Count = 4
.value -> v: Probability = 0.29, Count = 2
.value -> .getValue: Probability = 0.14, Count = 1
NGit.PersonIdent -> PersonIdent: Probability = 1.00, Count = 3
GetEmailAddress -> getEmailAddress: Probability = 1.00, Count = 4
1000L -> 1000L: Probability = 0.67, Count = 2
1000L -> p.when: Probability = 0.33, Count = 1
DetectKeyPhrasesResponse -> DetectKeyPhrasesResult: Probability = 1.00, Count = 1
DetectKeyPhrases -> detectKeyPhrases: Probability = 1.00, Count = 1
DetectKeyPhrasesRequest -> DetectKeyPhrasesRequest: Probability = 1.00, Count = 1
Invoke<DetectKeyPhrasesResponse> -> executeDetectKeyPhrases: Probability = 1.00, Count = 1
SetHideObj -> setHideObj: Probability = 1.00, Count = 1
hide -> hide: Probability = 1.00, Count = 2
field_1_hide_obj -> field_1_hide_obj: Probability = 1.00, Count = 3
SetLastColumnRaw -> setLastColumnRaw: Probability = 1.00, Count = 1
field_4_last_column -> field_4_last_column: Probability = 1.00, Count = 1
PrintCellComments -> PrintCellComments: Probability = 1.00, Count = 1
DeleteDBInstanceResponse -> DBInstance: Probability = 1.00, Count = 1
DeleteDBInstance -> deleteDBInstance: Probability = 1.00, Count = 1
DeleteDBInstanceRequest -> DeleteDBInstanceRequest: Probability = 1.00, Count = 2
Invoke<DeleteDBInstanceResponse> -> executeDeleteDBInstance: Probability = 1.00, Count = 1
"Configuration -> "Configuration: Probability = 1.00, Count = 2
Error: -> Error:: Probability = 1.00, Count = 3
missing -> missing: Probability = 1.00, Count = 6
WAH8DocIdSet -> build: Probability = 1.00, Count = 6
base.Build -> 0,: Probability = 0.57, Count = 4
base.Build -> segmentOptimizationEnabled: Probability = 0.14, Count = 1
base.Build -> numTerms: Probability = 0.14, Count = 1
base.Build -> ,rewriteMethod: Probability = 0.14, Count = 1
GetImageLayerRequest -> GetImageLayerRequest: Probability = 1.00, Count = 1
"GetImageLayer", -> "GetImageLayer",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/tags/[Tag]/layers" -> "/repos/[RepoNamespace]/[RepoName]/tags/[Tag]/layers": Probability = 1.00, Count = 1
ParameterNameValue -> ParameterNameValue: Probability = 1.00, Count = 2
parameterName -> parameterName: Probability = 1.00, Count = 3
_parameterName -> setParameterName: Probability = 1.00, Count = 2
CreateDirectConnectGatewayAssociationProposalResponse -> CreateDirectConnectGatewayAssociationProposalResult: Probability = 1.00, Count = 1
CreateDirectConnectGatewayAssociationProposal -> createDirectConnectGatewayAssociationProposal: Probability = 1.00, Count = 1
CreateDirectConnectGatewayAssociationProposalRequest -> CreateDirectConnectGatewayAssociationProposalRequest: Probability = 1.00, Count = 1
Invoke<CreateDirectConnectGatewayAssociationProposalResponse> -> executeCreateDirectConnectGatewayAssociationProposal: Probability = 1.00, Count = 1
ListResourceDelegatesResponse -> ListResourceDelegatesResult: Probability = 1.00, Count = 1
ListResourceDelegates -> listResourceDelegates: Probability = 1.00, Count = 1
ListResourceDelegatesRequest -> ListResourceDelegatesRequest: Probability = 1.00, Count = 1
Invoke<ListResourceDelegatesResponse> -> executeListResourceDelegates: Probability = 1.00, Count = 1
placesNumber -> placesNumber: Probability = 0.50, Count = 6
placesNumber -> DEFAULT_PLACES_VALUE: Probability = 0.25, Count = 3
placesNumber -> placesValueEval: Probability = 0.25, Count = 3
binary -> binary: Probability = 1.00, Count = 4
binary.Length -> binary.length: Probability = 1.00, Count = 3
CheckHeaderNoMagic -> checkHeaderNoMagic: Probability = 1.00, Count = 2
codec, -> codec,: Probability = 1.00, Count = 5
minVersion, -> minVersion,: Probability = 1.00, Count = 5
maxVersion -> maxVersion: Probability = 0.86, Count = 12
maxVersion -> minVersion,: Probability = 0.14, Count = 2
actualVersion -> codec=": Probability = 0.25, Count = 2
actualVersion -> actualVersion: Probability = 0.50, Count = 4
actualVersion -> actualVersion,: Probability = 0.25, Count = 2
DescribeDefaultParametersResponse -> DescribeDefaultParametersResult: Probability = 1.00, Count = 1
DescribeDefaultParameters -> describeDefaultParameters: Probability = 1.00, Count = 1
DescribeDefaultParametersRequest -> DescribeDefaultParametersRequest: Probability = 1.00, Count = 1
Invoke<DescribeDefaultParametersResponse> -> executeDescribeDefaultParameters: Probability = 1.00, Count = 1
SimpleSpanFragmenter -> SimpleSpanFragmenter: Probability = 1.00, Count = 1
QueryScorer -> QueryScorer: Probability = 1.00, Count = 5
queryScorer, -> queryScorer,: Probability = 1.00, Count = 1
fragmentSize -> fragmentSize: Probability = 1.00, Count = 6
this.fragmentSize -> this.fragmentSize: Probability = 1.00, Count = 2
this.queryScorer -> this.queryScorer: Probability = 1.00, Count = 1
queryScorer -> queryScorer: Probability = 1.00, Count = 1
CreateApplicationResponse -> CreateApplicationResult: Probability = 1.00, Count = 1
CreateApplication -> createApplication: Probability = 1.00, Count = 1
CreateApplicationRequest -> CreateApplicationRequest: Probability = 1.00, Count = 2
Invoke<CreateApplicationResponse> -> executeCreateApplication: Probability = 1.00, Count = 1
URIish -> URIish: Probability = 0.70, Count = 14
URIish -> NotSupportedException,: Probability = 0.15, Count = 3
URIish -> TransportException: Probability = 0.15, Count = 3
GetURI -> getURI: Probability = 1.00, Count = 1
DeleteConferenceProviderResponse -> DeleteConferenceProviderResult: Probability = 1.00, Count = 1
DeleteConferenceProvider -> deleteConferenceProvider: Probability = 1.00, Count = 1
DeleteConferenceProviderRequest -> DeleteConferenceProviderRequest: Probability = 1.00, Count = 1
Invoke<DeleteConferenceProviderResponse> -> executeDeleteConferenceProvider: Probability = 1.00, Count = 1
SetByte -> setByte: Probability = 1.00, Count = 2
this.Set -> set: Probability = 0.67, Count = 2
this.Set -> this.set: Probability = 0.33, Count = 1
PipedInputStream -> PipedInputStream: Probability = 1.00, Count = 2
java.io.PipedOutputStream -> PipedOutputStream: Probability = 1.00, Count = 3
byteBuffer.limit -> byteBuffer.limit: Probability = 1.00, Count = 20
libcore.io.SizeOf.INT -> SizeOf.INT: Probability = 1.00, Count = 12
byteBuffer.position -> byteBuffer.position: Probability = 1.00, Count = 20
byteBuffer.slice -> byteBuffer.slice: Probability = 1.00, Count = 5
java.nio.IntToByteBufferAdapter -> IntToByteBufferAdapter: Probability = 1.00, Count = 5
byteBuffer.clear -> byteBuffer.clear: Probability = 1.00, Count = 11
CreateDeploymentConfigResponse -> CreateDeploymentConfigResult: Probability = 1.00, Count = 1
CreateDeploymentConfig -> createDeploymentConfig: Probability = 1.00, Count = 1
CreateDeploymentConfigRequest -> CreateDeploymentConfigRequest: Probability = 1.00, Count = 1
Invoke<CreateDeploymentConfigResponse> -> executeCreateDeploymentConfig: Probability = 1.00, Count = 1
HSSFColor -> HSSFColor: Probability = 0.80, Count = 4
HSSFColor -> findSimilarColor: Probability = 0.20, Count = 1
red, -> red,: Probability = 1.00, Count = 10
green, -> green,: Probability = 1.00, Count = 10
blue -> blue: Probability = 0.88, Count = 14
blue -> _blue: Probability = 0.12, Count = 2
palette.GetColor -> _palette.getColor: Probability = 1.00, Count = 6
PaletteRecord.FIRST_COLOR_INDEX -> PaletteRecord.FIRST_COLOR_INDEX: Probability = 0.88, Count = 7
PaletteRecord.FIRST_COLOR_INDEX -> PaletteRecord.STANDARD_PALETTE_SIZE: Probability = 0.12, Count = 1
red -> red: Probability = 0.67, Count = 4
red -> _red: Probability = 0.33, Count = 2
green -> green: Probability = 0.67, Count = 4
green -> _green: Probability = 0.33, Count = 2
b[2] -> b[2]: Probability = 1.00, Count = 2
canEncode -> canEncode: Probability = 1.00, Count = 2
implCanEncode -> implCanEncode: Probability = 1.00, Count = 2
java.nio.CharBuffer.wrap -> CharBuffer.wrap: Probability = 1.00, Count = 3
NetworkInterface -> NetworkInterface: Probability = 1.00, Count = 1
macAddress -> macAddress: Probability = 1.00, Count = 2
_mac -> mac: Probability = 0.67, Count = 2
_mac -> "/": Probability = 0.33, Count = 1
"/network/interfaces/macs/ -> "/network/interfaces/macs/": Probability = 1.00, Count = 1
/", -> +: Probability = 1.00, Count = 2
IsAccept -> isAccept: Probability = 1.00, Count = 1
m_accept[state] -> accept.get: Probability = 0.50, Count = 1
m_accept[state] -> state: Probability = 0.50, Count = 1
ToStringTree -> toStringTree: Probability = 1.00, Count = 7
this.upperTerm -> this.lowerTerm: Probability = 1.00, Count = 1
this.includeLower -> this.upperTerm: Probability = 1.00, Count = 1
includeLower -> this.includeLower: Probability = 0.25, Count = 1
includeLower -> includeLower: Probability = 0.75, Count = 3
this.includeUpper -> this.includeUpper: Probability = 1.00, Count = 1
ScanResponse -> ScanResult: Probability = 1.00, Count = 1
Scan -> scan: Probability = 1.00, Count = 2
tableName, -> tableName,: Probability = 1.00, Count = 4
attributesToGet -> attributesToGet: Probability = 0.67, Count = 2
attributesToGet -> .withAttributesToGet: Probability = 0.33, Count = 1
ScanRequest -> ScanRequest: Probability = 1.00, Count = 2
request.TableName -> .withTableName: Probability = 1.00, Count = 3
StopLabelingJobResponse -> StopLabelingJobResult: Probability = 1.00, Count = 1
StopLabelingJob -> stopLabelingJob: Probability = 1.00, Count = 1
StopLabelingJobRequest -> StopLabelingJobRequest: Probability = 1.00, Count = 1
Invoke<StopLabelingJobResponse> -> executeStopLabelingJob: Probability = 1.00, Count = 1
PublishSchemaResponse -> PublishSchemaResult: Probability = 1.00, Count = 1
PublishSchema -> publishSchema: Probability = 1.00, Count = 1
PublishSchemaRequest -> PublishSchemaRequest: Probability = 1.00, Count = 1
Invoke<PublishSchemaResponse> -> executePublishSchema: Probability = 1.00, Count = 1
DeleteAttributesRequest -> DeleteAttributesRequest: Probability = 1.00, Count = 3
_externalBookRecord -> _externalBookRecord: Probability = 1.00, Count = 4
SupBookRecord.CreateAddInFunctions -> SupBookRecord.createAddInFunctions: Probability = 1.00, Count = 1
_externalNameRecords -> _externalNameRecords: Probability = 1.00, Count = 3
ExternalNameRecord[0] -> ExternalNameRecord[0]: Probability = 1.00, Count = 1
_crnBlocks -> _crnBlocks: Probability = 1.00, Count = 4
CRNBlock[0] -> CRNBlock[0]: Probability = 1.00, Count = 2
getFragment -> getFragment: Probability = 1.00, Count = 1
putDouble -> putDouble: Probability = 1.00, Count = 5
InternalWorkbook -> InternalWorkbook: Probability = 1.00, Count = 4
CreateStubWorkbook -> createStubWorkbook: Probability = 1.00, Count = 4
ExternSheetRecord[] -> ExternSheetRecord[]: Probability = 1.00, Count = 3
externs,BoundSheetRecord[] -> externs,BoundSheetRecord[]: Probability = 1.00, Count = 2
externs, -> externs,: Probability = 1.00, Count = 1
bounds, -> bounds,: Probability = 1.00, Count = 3
IndexDocumentsResponse -> IndexDocumentsResult: Probability = 1.00, Count = 1
IndexDocuments -> indexDocuments: Probability = 1.00, Count = 1
IndexDocumentsRequest -> IndexDocumentsRequest: Probability = 1.00, Count = 1
Invoke<IndexDocumentsResponse> -> executeIndexDocuments: Probability = 1.00, Count = 1
recog -> recog: Probability = 1.00, Count = 2
Trees.ToStringTree -> Trees.toStringTree: Probability = 1.00, Count = 2
FieldsConsumer -> FieldsConsumer: Probability = 0.44, Count = 4
FieldsConsumer -> fieldsConsumer: Probability = 0.33, Count = 3
FieldsConsumer -> delegatePostingsFormat: Probability = 0.11, Count = 1
FieldsConsumer -> Lucene84PostingsWriter: Probability = 0.11, Count = 1
SegmentWriteState -> SegmentWriteState: Probability = 1.00, Count = 5
"Error -> "Error: Probability = 1.00, Count = 6
choice -> constructed: Probability = 1.00, Count = 1
without -> without: Probability = 1.00, Count = 3
PostingsFormat" -> choice: Probability = 0.50, Count = 1
PostingsFormat" -> PostingsFormat": Probability = 0.50, Count = 1
base.ToString -> super.toString: Probability = 1.00, Count = 14
pattern.Pattern -> pattern.pattern: Probability = 1.00, Count = 1
StripTags -> stripTags: Probability = 0.44, Count = 4
StripTags -> start>0: Probability = 0.22, Count = 2
StripTags -> buf.substring: Probability = 0.33, Count = 3
JapaneseIterationMarkCharFilter -> JapaneseIterationMarkCharFilter: Probability = 1.00, Count = 1
normalizeKanji, -> normalizeKanji,: Probability = 1.00, Count = 1
normalizeKana -> normalizeKana: Probability = 1.00, Count = 2
getKeyProgressIncrement -> getKeyProgressIncrement: Probability = 1.00, Count = 1
mKeyProgressIncrement -> mKeyProgressIncrement: Probability = 1.00, Count = 4
tm -> tm: Probability = 1.00, Count = 10
TokenSource -> token_source: Probability = 1.00, Count = 8
28 -> 25: Probability = 1.00, Count = 6
jj_2_rtns.Length -> jj_2_rtns.length: Probability = 1.00, Count = 11
jj_2_rtns[i] -> jj_2_rtns[i]: Probability = 1.00, Count = 11
JJCalls -> JJCalls: Probability = 1.00, Count = 11
too -> too: Probability = 1.00, Count = 5
pointer -> pointer: Probability = 1.00, Count = 4
GetPointer -> getPointer: Probability = 1.00, Count = 2
128 -> 128: Probability = 0.88, Count = 7
128 -> ASCII,: Probability = 0.12, Count = 1
upto, -> upto,: Probability = 1.00, Count = 5
HighFreqTerm -> HighFreqTerm: Probability = 1.00, Count = 1
docIDs, -> docIDs,: Probability = 1.00, Count = 2
freqs, -> freqs,: Probability = 1.00, Count = 1
positions, -> positions,: Probability = 1.00, Count = 3
byte[][][] -> byte[][][]: Probability = 1.00, Count = 1
totalTermFreq -> payloads,: Probability = 0.11, Count = 1
totalTermFreq -> totalTermFreq: Probability = 0.89, Count = 8
this.docIDs -> this.docIDs: Probability = 1.00, Count = 2
docIDs -> docIDs: Probability = 1.00, Count = 3
this.freqs -> this.freqs: Probability = 1.00, Count = 3
freqs -> freqs: Probability = 1.00, Count = 8
positions -> positions: Probability = 1.00, Count = 6
this.payloads -> this.payloads: Probability = 1.00, Count = 2
this.totalTermFreq -> this.totalTermFreq: Probability = 1.00, Count = 2
CheckMax -> TooManyBasicQueries: Probability = 0.50, Count = 2
CheckMax -> checkMax: Probability = 0.50, Count = 2
HindiStemFilterFactory -> HindiStemFilterFactory: Probability = 1.00, Count = 1
"<regexp -> "<regexp: Probability = 1.00, Count = 1
field='" -> field='": Probability = 1.00, Count = 7
term='" -> term='": Probability = 0.83, Count = 5
term='" -> this.text: Probability = 0.17, Count = 1
"'/>" -> "'/>": Probability = 1.00, Count = 8
CreateStackSetResponse -> CreateStackSetResult: Probability = 1.00, Count = 1
CreateStackSet -> createStackSet: Probability = 1.00, Count = 1
CreateStackSetRequest -> CreateStackSetRequest: Probability = 1.00, Count = 1
Invoke<CreateStackSetResponse> -> executeCreateStackSet: Probability = 1.00, Count = 1
SendMessagesResponse -> SendMessagesResult: Probability = 1.00, Count = 1
SendMessages -> sendMessages: Probability = 1.00, Count = 1
SendMessagesRequest -> SendMessagesRequest: Probability = 1.00, Count = 1
Invoke<SendMessagesResponse> -> executeSendMessages: Probability = 1.00, Count = 1
setCharAt -> setCharAt: Probability = 1.00, Count = 2
base.setCharAt -> super.setCharAt: Probability = 1.00, Count = 1
CreateIntegrationResponse -> CreateIntegrationResult: Probability = 0.50, Count = 1
CreateIntegrationResponse -> createIntegrationResponse: Probability = 0.50, Count = 1
CreateIntegration -> createIntegration: Probability = 1.00, Count = 1
CreateIntegrationRequest -> CreateIntegrationRequest: Probability = 1.00, Count = 1
Invoke<CreateIntegrationResponse> -> executeCreateIntegration: Probability = 1.00, Count = 1
lexer.Mode -> lexer.mode: Probability = 1.00, Count = 1
refCount.DecrementAndGet -> refCount.decrementAndGet: Probability = 1.00, Count = 4
success -> success: Probability = 0.80, Count = 32
success -> state.segmentSuffix: Probability = 0.07, Count = 3
success -> state: Probability = 0.07, Count = 3
success -> boolean: Probability = 0.05, Count = 2
closed -> closed: Probability = 1.00, Count = 2
!success -> !success: Probability = 1.00, Count = 10
"too -> "too: Probability = 1.00, Count = 3
many -> many: Probability = 1.00, Count = 5
calls: -> calls:: Probability = 1.00, Count = 3
refCount -> refCount: Probability = 0.50, Count = 4
refCount -> refCount.get: Probability = 0.50, Count = 4
after -> after: Probability = 0.67, Count = 6
after -> decrement": Probability = 0.33, Count = 3
List<DFAState> -> List<DFAState>: Probability = 0.60, Count = 3
List<DFAState> -> getStates: Probability = 0.20, Count = 1
List<DFAState> -> ArrayList<DFAState>: Probability = 0.20, Count = 1
states -> states: Probability = 0.83, Count = 5
states -> transitions[s]: Probability = 0.17, Count = 1
DFAState -> DFAState: Probability = 1.00, Count = 7
Register -> register: Probability = 1.00, Count = 1
db.Directory -> db.getDirectory: Probability = 1.00, Count = 2
RepositoryCache.FileKey -> FileKey: Probability = 1.00, Count = 9
RepositoryCache.FileKey.Exact -> FileKey.exact: Probability = 0.60, Count = 3
RepositoryCache.FileKey.Exact -> db.getDirectory: Probability = 0.40, Count = 2
db.FileSystem -> db.getFS: Probability = 1.00, Count = 2
cache.RegisterRepository -> cache.registerRepository: Probability = 1.00, Count = 1
GetConfigurationSetEventDestinationsResponse -> GetConfigurationSetEventDestinationsResult: Probability = 1.00, Count = 1
GetConfigurationSetEventDestinations -> getConfigurationSetEventDestinations: Probability = 1.00, Count = 1
GetConfigurationSetEventDestinationsRequest -> GetConfigurationSetEventDestinationsRequest: Probability = 1.00, Count = 1
Invoke<GetConfigurationSetEventDestinationsResponse> -> executeGetConfigurationSetEventDestinations: Probability = 1.00, Count = 1
aeSum -> aeSum: Probability = 0.75, Count = 3
aeSum -> createSumRange: Probability = 0.25, Count = 1
MoPenAddGroupMemberRequest -> MoPenAddGroupMemberRequest: Probability = 1.00, Count = 1
"MoPenAddGroupMember", -> "MoPenAddGroupMember",: Probability = 1.00, Count = 1
DeleteAssessmentTargetResponse -> DeleteAssessmentTargetResult: Probability = 1.00, Count = 1
DeleteAssessmentTarget -> deleteAssessmentTarget: Probability = 1.00, Count = 1
DeleteAssessmentTargetRequest -> DeleteAssessmentTargetRequest: Probability = 1.00, Count = 1
Invoke<DeleteAssessmentTargetResponse> -> executeDeleteAssessmentTarget: Probability = 1.00, Count = 1
"LL" -> "LL": Probability = 1.00, Count = 1
DescribeReservedInstancesOfferingsResponse -> DescribeReservedInstancesOfferingsResult: Probability = 1.00, Count = 2
DescribeReservedInstancesOfferings -> describeReservedInstancesOfferings: Probability = 1.00, Count = 3
DescribeReservedInstancesOfferingsRequest -> DescribeReservedInstancesOfferingsRequest: Probability = 1.00, Count = 2
Invoke<DescribeReservedInstancesOfferingsResponse> -> executeDescribeReservedInstancesOfferings: Probability = 1.00, Count = 1
SetNextEnum -> setNextEnum: Probability = 1.00, Count = 1
termsEnum -> termsEnum: Probability = 0.60, Count = 3
termsEnum -> this.termsEnum: Probability = 0.20, Count = 1
termsEnum -> this.boostAtt: Probability = 0.20, Count = 1
this.boostAtt -> termsEnum.attributes: Probability = 1.00, Count = 1
termsEnum.Attributes.AddAttribute<IBoostAttribute> -> .addAttribute: Probability = 0.50, Count = 1
termsEnum.Attributes.AddAttribute<IBoostAttribute> -> BoostAttribute.class: Probability = 0.50, Count = 1
MessageRevFilter.PatternSearch -> PatternSearch: Probability = 1.00, Count = 2
Pattern -> pattern: Probability = 1.00, Count = 3
GetRouteResponseResponse -> GetRouteResponseResult: Probability = 1.00, Count = 1
GetRouteResponse -> getRouteResponse: Probability = 1.00, Count = 1
GetRouteResponseRequest -> GetRouteResponseRequest: Probability = 1.00, Count = 1
Invoke<GetRouteResponseResponse> -> executeGetRouteResponse: Probability = 1.00, Count = 1
UpdateLagResponse -> UpdateLagResult: Probability = 1.00, Count = 1
UpdateLag -> updateLag: Probability = 1.00, Count = 1
UpdateLagRequest -> UpdateLagRequest: Probability = 1.00, Count = 1
Invoke<UpdateLagResponse> -> executeUpdateLag: Probability = 1.00, Count = 1
DescribeEndpointResponse -> DescribeEndpointResult: Probability = 1.00, Count = 1
DescribeEndpoint -> describeEndpoint: Probability = 1.00, Count = 1
DescribeEndpointRequest -> DescribeEndpointRequest: Probability = 1.00, Count = 1
Invoke<DescribeEndpointResponse> -> executeDescribeEndpoint: Probability = 1.00, Count = 1
AddPositionSpans -> addPositionSpans: Probability = 1.00, Count = 1
IList<PositionSpan> -> List<PositionSpan>: Probability = 1.00, Count = 2
positionSpans -> positionSpans: Probability = 1.00, Count = 4
this._positionSpans.AddRange -> this.positionSpans.addAll: Probability = 1.00, Count = 1
backingMap.remove -> backingMap.remove: Probability = 1.00, Count = 1
ListPartsResponse -> ListPartsResult: Probability = 1.00, Count = 1
ListParts -> listParts: Probability = 1.00, Count = 1
Invoke<ListPartsResponse> -> executeListParts: Probability = 1.00, Count = 1
SetForceUpdate -> setForceUpdate: Probability = 1.00, Count = 2
RemoveCustomProperties -> removeCustomProperties: Probability = 1.00, Count = 1
SectionCount -> getSectionCount: Probability = 1.00, Count = 3
_lei.Available -> remaining: Probability = 0.50, Count = 1
_lei.Available -> _lei.available: Probability = 0.50, Count = 1
GetInstanceResponse -> GetInstanceResult: Probability = 1.00, Count = 1
GetInstance -> getInstance: Probability = 1.00, Count = 3
GetInstanceRequest -> GetInstanceRequest: Probability = 1.00, Count = 1
Invoke<GetInstanceResponse> -> executeGetInstance: Probability = 1.00, Count = 1
UpdateSmsChannelResponse -> UpdateSmsChannelResult: Probability = 1.00, Count = 1
UpdateSmsChannel -> updateSmsChannel: Probability = 1.00, Count = 1
UpdateSmsChannelRequest -> UpdateSmsChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateSmsChannelResponse> -> executeUpdateSmsChannel: Probability = 1.00, Count = 1
CreateEgressOnlyInternetGatewayResponse -> CreateEgressOnlyInternetGatewayResult: Probability = 1.00, Count = 1
CreateEgressOnlyInternetGateway -> createEgressOnlyInternetGateway: Probability = 1.00, Count = 1
CreateEgressOnlyInternetGatewayRequest -> CreateEgressOnlyInternetGatewayRequest: Probability = 1.00, Count = 1
Invoke<CreateEgressOnlyInternetGatewayResponse> -> executeCreateEgressOnlyInternetGateway: Probability = 1.00, Count = 1
GetResourcesResponse -> GetResourcesResult: Probability = 1.00, Count = 1
GetResources -> getResources: Probability = 1.00, Count = 1
GetResourcesRequest -> GetResourcesRequest: Probability = 1.00, Count = 1
Invoke<GetResourcesResponse> -> executeGetResources: Probability = 1.00, Count = 1
ByteBlockPool -> ByteBlockPool: Probability = 1.00, Count = 5
allocator -> allocator: Probability = 1.00, Count = 1
-BYTE_BLOCK_SIZE -> this.allocator: Probability = 1.00, Count = 1
this.allocator -> allocator: Probability = 1.00, Count = 1
ListStepsResponse -> ListStepsResult: Probability = 1.00, Count = 1
ListSteps -> listSteps: Probability = 1.00, Count = 1
ListStepsRequest -> ListStepsRequest: Probability = 1.00, Count = 1
Invoke<ListStepsResponse> -> executeListSteps: Probability = 1.00, Count = 1
readBoolean -> readBoolean: Probability = 1.00, Count = 1
PutLogEventsRequest -> PutLogEventsRequest: Probability = 1.00, Count = 1
logGroupName, -> logGroupName,: Probability = 1.00, Count = 7
logStreamName, -> logStreamName,: Probability = 0.50, Count = 1
logStreamName, -> java.util.List<InputLogEvent>: Probability = 0.50, Count = 1
logEvents -> logEvents: Probability = 1.00, Count = 2
_logStreamName -> setLogStreamName: Probability = 1.00, Count = 4
logStreamName -> logStreamName: Probability = 0.64, Count = 7
logStreamName -> ): Probability = 0.36, Count = 4
_logEvents -> setLogEvents: Probability = 1.00, Count = 1
sliceOffset -> sliceOffset: Probability = 1.00, Count = 2
GetAttendeeResponse -> GetAttendeeResult: Probability = 1.00, Count = 1
GetAttendee -> getAttendee: Probability = 1.00, Count = 1
GetAttendeeRequest -> GetAttendeeRequest: Probability = 1.00, Count = 1
Invoke<GetAttendeeResponse> -> executeGetAttendee: Probability = 1.00, Count = 1
GetFilePointer -> getFilePointer: Probability = 1.00, Count = 6
SerializeSimplePart -> serializeSimplePart: Probability = 1.00, Count = 3
recordSize -> recordSize: Probability = 0.75, Count = 3
recordSize -> !sizeIncludesHeaderSize: Probability = 0.25, Count = 1
_complexData.Length -> getComplexData: Probability = 0.22, Count = 2
_complexData.Length -> .length: Probability = 0.33, Count = 3
_complexData.Length -> complexData.length: Probability = 0.33, Count = 3
_complexData.Length -> sizeIncludesHeaderSize: Probability = 0.11, Count = 1
commit.GetName -> commit.getName: Probability = 1.00, Count = 2
ReadDataSize -> readDataSize: Probability = 1.00, Count = 2
dataSize -> dataSize: Probability = 0.71, Count = 10
dataSize -> PageItemRecord: Probability = 0.07, Count = 1
dataSize -> FieldInfo.ENCODED_SIZE: Probability = 0.14, Count = 2
dataSize -> FieldInfo[]: Probability = 0.07, Count = 1
RemoveUserFromGroupRequest -> RemoveUserFromGroupRequest: Probability = 1.00, Count = 1
PutImageResponse -> PutImageResult: Probability = 1.00, Count = 1
PutImage -> putImage: Probability = 1.00, Count = 1
PutImageRequest -> PutImageRequest: Probability = 1.00, Count = 1
Invoke<PutImageResponse> -> executePutImage: Probability = 1.00, Count = 1
m_limit_backward -> limit_backward: Probability = 1.00, Count = 12
v_3 -> cursor: Probability = 0.67, Count = 8
v_3 -> limit: Probability = 0.33, Count = 4
m_limit -> limit: Probability = 0.52, Count = 26
m_limit -> r_undouble: Probability = 0.04, Count = 2
m_limit -> v_3: Probability = 0.16, Count = 8
m_limit -> r_consonant_pair: Probability = 0.04, Count = 2
m_limit -> v_4: Probability = 0.12, Count = 6
m_limit -> r_other_suffix: Probability = 0.04, Count = 2
m_limit -> v_5: Probability = 0.08, Count = 4
v_1 -> v_1: Probability = 0.73, Count = 8
v_1 -> r_mark_regions: Probability = 0.27, Count = 3
m_cursor -> limit: Probability = 0.55, Count = 11
m_cursor -> r_main_suffix: Probability = 0.10, Count = 2
m_cursor -> cursor: Probability = 0.35, Count = 7
lab0 -> cursor: Probability = 1.00, Count = 7
v_2 -> v_2: Probability = 1.00, Count = 10
lab1 -> cursor: Probability = 1.00, Count = 8
IntervalSet[] -> IntervalSet[]: Probability = 0.67, Count = 2
IntervalSet[] -> getDecisionLookahead: Probability = 0.33, Count = 1
look -> look: Probability = 1.00, Count = 2
alt -> alt: Probability = 0.60, Count = 9
alt -> AlternateHandle[]: Probability = 0.07, Count = 1
alt -> alternates.get: Probability = 0.07, Count = 1
alt -> alternates.compareAndSet: Probability = 0.07, Count = 1
alt -> AlternateHandle: Probability = 0.07, Count = 1
alt -> od: Probability = 0.07, Count = 1
alt -> od.close: Probability = 0.07, Count = 1
look[alt] -> look[alt]: Probability = 1.00, Count = 2
Ptg -> Ptg: Probability = 1.00, Count = 15
CreatePtg -> createPtg: Probability = 1.00, Count = 2
ILittleEndianInput -> LittleEndianInput: Probability = 1.00, Count = 17
retval.PtgClass -> retval.setClass: Probability = 0.43, Count = 3
retval.PtgClass -> CLASS_ARRAY: Probability = 0.14, Count = 1
retval.PtgClass -> 0x40: Probability = 0.14, Count = 1
retval.PtgClass -> CLASS_VALUE: Probability = 0.14, Count = 1
retval.PtgClass -> CLASS_REF: Probability = 0.14, Count = 1
ListEntitiesDetectionJobsResponse -> ListEntitiesDetectionJobsResult: Probability = 1.00, Count = 1
ListEntitiesDetectionJobs -> listEntitiesDetectionJobs: Probability = 1.00, Count = 1
ListEntitiesDetectionJobsRequest -> ListEntitiesDetectionJobsRequest: Probability = 1.00, Count = 1
Invoke<ListEntitiesDetectionJobsResponse> -> executeListEntitiesDetectionJobs: Probability = 1.00, Count = 1
ListReviewableHITsResponse -> ListReviewableHITsResult: Probability = 1.00, Count = 1
ListReviewableHITs -> listReviewableHITs: Probability = 1.00, Count = 1
ListReviewableHITsRequest -> ListReviewableHITsRequest: Probability = 1.00, Count = 1
Invoke<ListReviewableHITsResponse> -> executeListReviewableHITs: Probability = 1.00, Count = 1
WorkbookEvaluator -> WorkbookEvaluator: Probability = 1.00, Count = 2
bookEvaluator, -> bookEvaluator,: Probability = 1.00, Count = 3
IEvaluationWorkbook -> EvaluationWorkbook: Probability = 1.00, Count = 2
workbook, -> workbook,: Probability = 1.00, Count = 2
_bookEvaluator -> srcRowNum,int: Probability = 0.50, Count = 1
_bookEvaluator -> _bookEvaluator: Probability = 0.50, Count = 1
tracker -> srcColNum,: Probability = 0.22, Count = 2
tracker -> tracker: Probability = 0.44, Count = 4
tracker -> searchers.get: Probability = 0.22, Count = 2
tracker -> SearcherTracker: Probability = 0.11, Count = 1
EvaluationTracker -> EvaluationTracker: Probability = 1.00, Count = 4
srcColNum -> srcRowNum,: Probability = 1.00, Count = 3
SetMaxDocFreqPct -> setMaxDocFreqPct: Probability = 1.00, Count = 1
maxPercentage -> maxPercentage: Probability = 0.40, Count = 2
maxPercentage -> setMaxDocFreq: Probability = 0.20, Count = 1
maxPercentage -> Math.toIntExact: Probability = 0.20, Count = 1
maxPercentage -> ir.maxDoc: Probability = 0.20, Count = 1
this.MaxDocFreq -> (: Probability = 1.00, Count = 1
ir.NumDocs -> ): Probability = 1.00, Count = 2
lazySet -> lazySet: Probability = 1.00, Count = 1
newValue -> newValue: Probability = 0.80, Count = 12
newValue -> unsafe.putOrderedObject: Probability = 0.07, Count = 1
newValue -> this,: Probability = 0.07, Count = 1
newValue -> valueOffset,: Probability = 0.07, Count = 1
UpdateVpcLinkResponse -> UpdateVpcLinkResult: Probability = 1.00, Count = 1
UpdateVpcLink -> updateVpcLink: Probability = 1.00, Count = 1
UpdateVpcLinkRequest -> UpdateVpcLinkRequest: Probability = 1.00, Count = 1
Invoke<UpdateVpcLinkResponse> -> executeUpdateVpcLink: Probability = 1.00, Count = 1
RemoveNoteCount -> removeNoteCount: Probability = 1.00, Count = 1
PropertyIDMap.PID_NOTECOUNT -> PropertyIDMap.PID_NOTECOUNT: Probability = 1.00, Count = 1
prior -> prior: Probability = 0.88, Count = 7
prior -> loose.add: Probability = 0.12, Count = 1
this._enclosing.Put -> getKey: Probability = 1.00, Count = 1
GetSourceCommit -> getSourceCommit: Probability = 1.00, Count = 2
sourceCommits[idx] -> sourceCommits[idx]: Probability = 1.00, Count = 1
ClassicTokenizerFactory -> ClassicTokenizerFactory: Probability = 1.00, Count = 1
maxTokenLength -> maxTokenLength: Probability = 1.00, Count = 4
"maxTokenLength", -> "maxTokenLength",: Probability = 1.00, Count = 3
StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH -> StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH: Probability = 1.00, Count = 3
GetDistributionResponse -> GetDistributionResult: Probability = 1.00, Count = 1
GetDistribution -> getDistribution: Probability = 1.00, Count = 1
GetDistributionRequest -> GetDistributionRequest: Probability = 1.00, Count = 2
Invoke<GetDistributionResponse> -> executeGetDistribution: Probability = 1.00, Count = 1
Seek -> seek: Probability = 1.00, Count = 9
outerInstance.totalIndexInterval -> indexInterval: Probability = 0.57, Count = 4
outerInstance.totalIndexInterval -> fieldIndex.numIndexTerms: Probability = 0.43, Count = 3
fieldIndex.termOffsets.Get -> fieldIndex.termOffsets.get: Probability = 0.67, Count = 8
fieldIndex.termOffsets.Get -> termBytesReader.fillSlice: Probability = 0.33, Count = 4
fieldIndex.termBytesStart -> fieldIndex.termBytesStart: Probability = 1.00, Count = 4
fieldIndex.termsStart -> fieldIndex.termsStart: Probability = 1.00, Count = 4
fieldIndex.termsDictOffsets.Get -> fieldIndex.termsDictOffsets.get: Probability = 1.00, Count = 4
DescribeInterconnectsResponse -> DescribeInterconnectsResult: Probability = 1.00, Count = 2
DescribeInterconnects -> describeInterconnects: Probability = 1.00, Count = 3
DescribeInterconnectsRequest -> DescribeInterconnectsRequest: Probability = 1.00, Count = 2
Invoke<DescribeInterconnectsResponse> -> executeDescribeInterconnects: Probability = 1.00, Count = 1
InvalidValue -> invalidValue: Probability = 1.00, Count = 1
DescribeOrderableClusterOptionsResponse -> DescribeOrderableClusterOptionsResult: Probability = 1.00, Count = 2
DescribeOrderableClusterOptions -> describeOrderableClusterOptions: Probability = 1.00, Count = 3
DescribeOrderableClusterOptionsRequest -> DescribeOrderableClusterOptionsRequest: Probability = 1.00, Count = 2
Invoke<DescribeOrderableClusterOptionsResponse> -> executeDescribeOrderableClusterOptions: Probability = 1.00, Count = 1
DeleteArchiveRequest -> DeleteArchiveRequest: Probability = 1.00, Count = 3
archiveId -> archiveId: Probability = 1.00, Count = 5
_archiveId -> setArchiveId: Probability = 1.00, Count = 3
DescribeSnapshotsResponse -> DescribeSnapshotsResult: Probability = 1.00, Count = 2
DescribeSnapshots -> describeSnapshots: Probability = 1.00, Count = 3
DescribeSnapshotsRequest -> DescribeSnapshotsRequest: Probability = 1.00, Count = 2
Invoke<DescribeSnapshotsResponse> -> executeDescribeSnapshots: Probability = 1.00, Count = 1
BatchDeleteClusterSnapshotsResponse -> BatchDeleteClusterSnapshotsResult: Probability = 1.00, Count = 1
BatchDeleteClusterSnapshots -> batchDeleteClusterSnapshots: Probability = 1.00, Count = 1
BatchDeleteClusterSnapshotsRequest -> BatchDeleteClusterSnapshotsRequest: Probability = 1.00, Count = 1
Invoke<BatchDeleteClusterSnapshotsResponse> -> executeBatchDeleteClusterSnapshots: Probability = 1.00, Count = 1
DescribeClientVpnRoutesResponse -> DescribeClientVpnRoutesResult: Probability = 1.00, Count = 1
DescribeClientVpnRoutes -> describeClientVpnRoutes: Probability = 1.00, Count = 1
DescribeClientVpnRoutesRequest -> DescribeClientVpnRoutesRequest: Probability = 1.00, Count = 1
Invoke<DescribeClientVpnRoutesResponse> -> executeDescribeClientVpnRoutes: Probability = 1.00, Count = 1
padd -> padd: Probability = 0.67, Count = 4
padd -> getPadding: Probability = 0.33, Count = 2
parallel -> parallel: Probability = 1.00, Count = 3
PerfTask -> PerfTask: Probability = 1.00, Count = 4
">" -> ">": Probability = 0.71, Count = 5
">" -> "<rule: Probability = 0.14, Count = 1
">" -> "+index+">": Probability = 0.14, Count = 1
repetitions -> fixedTime: Probability = 0.20, Count = 2
repetitions -> repetitions: Probability = 0.30, Count = 3
repetitions -> repetitions==REPEAT_EXHAUST: Probability = 0.20, Count = 2
repetitions -> setRepetitions: Probability = 0.10, Count = 1
repetitions -> this.repetitions: Probability = 0.10, Count = 1
repetitions -> isParallel: Probability = 0.10, Count = 1
sb.AppendFormat -> sb.append: Probability = 1.00, Count = 5
rate -> rate: Probability = 0.80, Count = 4
rate -> 60*rate: Probability = 0.20, Count = 1
perMin -> perMin: Probability = 1.00, Count = 4
out1.WriteDouble -> out.writeDouble: Probability = 1.00, Count = 8
field_1_minimumAxisValue -> field_1_minimumAxisValue: Probability = 1.00, Count = 2
field_2_maximumAxisValue -> field_2_maximumAxisValue: Probability = 1.00, Count = 2
field_3_majorIncrement -> field_3_majorIncrement: Probability = 1.00, Count = 2
field_4_minorIncrement -> field_4_minorIncrement: Probability = 1.00, Count = 2
field_5_categoryAxisCross -> field_5_categoryAxisCross: Probability = 1.00, Count = 2
field_6_options -> field_6_options: Probability = 1.00, Count = 3
MakeReadOnly -> makeReadOnly: Probability = 1.00, Count = 1
readOnly -> readOnly: Probability = 1.00, Count = 1
DescribeDirectConnectGatewaysResponse -> DescribeDirectConnectGatewaysResult: Probability = 1.00, Count = 1
DescribeDirectConnectGateways -> describeDirectConnectGateways: Probability = 1.00, Count = 1
DescribeDirectConnectGatewaysRequest -> DescribeDirectConnectGatewaysRequest: Probability = 1.00, Count = 1
Invoke<DescribeDirectConnectGatewaysResponse> -> executeDescribeDirectConnectGateways: Probability = 1.00, Count = 1
GetUsagePlanKeyResponse -> GetUsagePlanKeyResult: Probability = 1.00, Count = 1
GetUsagePlanKey -> getUsagePlanKey: Probability = 1.00, Count = 1
GetUsagePlanKeyRequest -> GetUsagePlanKeyRequest: Probability = 1.00, Count = 1
Invoke<GetUsagePlanKeyResponse> -> executeGetUsagePlanKey: Probability = 1.00, Count = 1
DescribeVpcEndpointConnectionNotificationsResponse -> DescribeVpcEndpointConnectionNotificationsResult: Probability = 1.00, Count = 1
DescribeVpcEndpointConnectionNotifications -> describeVpcEndpointConnectionNotifications: Probability = 1.00, Count = 1
DescribeVpcEndpointConnectionNotificationsRequest -> DescribeVpcEndpointConnectionNotificationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpcEndpointConnectionNotificationsResponse> -> executeDescribeVpcEndpointConnectionNotifications: Probability = 1.00, Count = 1
UpdateGatewayGroupResponse -> UpdateGatewayGroupResult: Probability = 1.00, Count = 1
UpdateGatewayGroup -> updateGatewayGroup: Probability = 1.00, Count = 1
UpdateGatewayGroupRequest -> UpdateGatewayGroupRequest: Probability = 1.00, Count = 1
Invoke<UpdateGatewayGroupResponse> -> executeUpdateGatewayGroup: Probability = 1.00, Count = 1
DetachClassicLinkVpcResponse -> DetachClassicLinkVpcResult: Probability = 1.00, Count = 1
DetachClassicLinkVpc -> detachClassicLinkVpc: Probability = 1.00, Count = 1
DetachClassicLinkVpcRequest -> DetachClassicLinkVpcRequest: Probability = 1.00, Count = 1
Invoke<DetachClassicLinkVpcResponse> -> executeDetachClassicLinkVpc: Probability = 1.00, Count = 1
ListOperationsResponse -> ListOperationsResult: Probability = 1.00, Count = 2
ListOperations -> listOperations: Probability = 1.00, Count = 3
ListOperationsRequest -> ListOperationsRequest: Probability = 1.00, Count = 2
BatchDeletePhoneNumberResponse -> BatchDeletePhoneNumberResult: Probability = 1.00, Count = 1
BatchDeletePhoneNumber -> batchDeletePhoneNumber: Probability = 1.00, Count = 1
BatchDeletePhoneNumberRequest -> BatchDeletePhoneNumberRequest: Probability = 1.00, Count = 1
Invoke<BatchDeletePhoneNumberResponse> -> executeBatchDeletePhoneNumber: Probability = 1.00, Count = 1
SetExpireAgeMillis -> setExpireAgeMillis: Probability = 1.00, Count = 1
this.expireAgeMillis -> this.expireAgeMillis: Probability = 1.00, Count = 1
DeactivateEventSourceResponse -> DeactivateEventSourceResult: Probability = 1.00, Count = 1
DeactivateEventSource -> deactivateEventSource: Probability = 1.00, Count = 1
DeactivateEventSourceRequest -> DeactivateEventSourceRequest: Probability = 1.00, Count = 1
Invoke<DeactivateEventSourceResponse> -> executeDeactivateEventSource: Probability = 1.00, Count = 1
ReadBytes -> readBytes: Probability = 1.00, Count = 8
SendUsersMessagesResponse -> SendUsersMessagesResult: Probability = 1.00, Count = 1
SendUsersMessages -> sendUsersMessages: Probability = 1.00, Count = 1
SendUsersMessagesRequest -> SendUsersMessagesRequest: Probability = 1.00, Count = 1
Invoke<SendUsersMessagesResponse> -> executeSendUsersMessages: Probability = 1.00, Count = 1
MissingFormatWidthException -> MissingFormatWidthException: Probability = 1.00, Count = 1
this.s -> this.s: Probability = 1.00, Count = 3
DescribeVolumesRequest -> DescribeVolumesRequest: Probability = 1.00, Count = 2
volumeIds -> volumeIds: Probability = 1.00, Count = 2
_volumeIds -> setVolumeIds: Probability = 1.00, Count = 1
SubmitCutoutTaskRequest -> SubmitCutoutTaskRequest: Probability = 1.00, Count = 1
"lubancloud", -> "lubancloud",: Probability = 1.00, Count = 3
"2018-05-09", -> "2018-05-09",: Probability = 1.00, Count = 3
"SubmitCutoutTask", -> "SubmitCutoutTask",: Probability = 1.00, Count = 1
"luban", -> "luban": Probability = 1.00, Count = 3
asReadOnlyBuffer -> asReadOnlyBuffer: Probability = 1.00, Count = 16
CreateLabelsResponse -> CreateLabelsResult: Probability = 1.00, Count = 1
CreateLabels -> createLabels: Probability = 1.00, Count = 1
CreateLabelsRequest -> CreateLabelsRequest: Probability = 1.00, Count = 1
Invoke<CreateLabelsResponse> -> executeCreateLabels: Probability = 1.00, Count = 1
GetRenameScore -> getRenameScore: Probability = 1.00, Count = 1
currentSource.renameScore -> outCandidate.renameScore: Probability = 1.00, Count = 1
SeriesTextRecord -> SeriesTextRecord: Probability = 1.00, Count = 2
field_4_text -> field_4_text: Probability = 1.00, Count = 3
is16bit -> is16bit: Probability = 0.82, Count = 9
is16bit -> username.length: Probability = 0.18, Count = 2
sequence[_position++] -> sequence.charAt: Probability = 0.50, Count = 1
sequence[_position++] -> position++: Probability = 0.50, Count = 1
x0 -> x0: Probability = 1.00, Count = 5
fValue -> denominator: Probability = 1.00, Count = 3
fDerivative -> fDerivative: Probability = 0.60, Count = 3
fDerivative -> denominator: Probability = 0.40, Count = 2
values.Length -> values.length: Probability = 0.17, Count = 3
values.Length -> double: Probability = 0.39, Count = 7
values.Length -> value: Probability = 0.44, Count = 8
Skip -> skip: Probability = 1.00, Count = 3
_type -> _type: Probability = 0.29, Count = 4
_type -> type: Probability = 0.07, Count = 1
_type -> setType: Probability = 0.43, Count = 6
_type -> type.toString: Probability = 0.21, Count = 3
TokenTypes.Skip -> SKIP: Probability = 1.00, Count = 1
IClientAnchor -> HSSFClientAnchor: Probability = 0.75, Count = 6
IClientAnchor -> ClientAnchor: Probability = 0.25, Count = 2
GetPreferredSize -> getPreferredSize: Probability = 1.00, Count = 6
ints -> ints: Probability = 1.00, Count = 2
ints, -> ints,: Probability = 1.00, Count = 2
ModifyClusterParameterGroupResponse -> ModifyClusterParameterGroupResult: Probability = 1.00, Count = 1
ModifyClusterParameterGroup -> modifyClusterParameterGroup: Probability = 1.00, Count = 1
ModifyClusterParameterGroupRequest -> ModifyClusterParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<ModifyClusterParameterGroupResponse> -> executeModifyClusterParameterGroup: Probability = 1.00, Count = 1
IList<CredentialItem> -> List<CredentialItem>: Probability = 1.00, Count = 2
items, -> items.toArray: Probability = 1.00, Count = 1
CredentialItem[items.Count] -> CredentialItem[0]: Probability = 1.00, Count = 1
FormatType -> synchronized: Probability = 0.50, Count = 1
FormatType -> FormatType: Probability = 0.50, Count = 1
acceptFormat -> acceptFormat: Probability = 1.00, Count = 1
ListTypesResponse -> ListTypesResult: Probability = 1.00, Count = 1
ListTypes -> listTypes: Probability = 1.00, Count = 1
ListTypesRequest -> ListTypesRequest: Probability = 1.00, Count = 1
Invoke<ListTypesResponse> -> executeListTypes: Probability = 1.00, Count = 1
StartAssessmentRunResponse -> StartAssessmentRunResult: Probability = 1.00, Count = 1
StartAssessmentRun -> startAssessmentRun: Probability = 1.00, Count = 1
StartAssessmentRunRequest -> StartAssessmentRunRequest: Probability = 1.00, Count = 1
Invoke<StartAssessmentRunResponse> -> executeStartAssessmentRun: Probability = 1.00, Count = 1
SemanticContext.OR -> OR: Probability = 1.00, Count = 5
PointTransitions -> PointTransitions: Probability = 1.00, Count = 2
.point -> .point: Probability = 1.00, Count = 1
point -> point: Probability = 1.00, Count = 4
arg3 -> arg3: Probability = 1.00, Count = 2
"Incomplete -> "Incomplete: Probability = 1.00, Count = 2
code"+ -> code"+: Probability = 1.00, Count = 1
don't -> don't: Probability = 1.00, Count = 3
know -> know: Probability = 1.00, Count = 2
how -> how: Probability = 1.00, Count = 1
support -> support: Probability = 1.00, Count = 16
'area_num' -> 'area_num': Probability = 1.00, Count = 1
DescribeClusterParametersResponse -> DescribeClusterParametersResult: Probability = 1.00, Count = 1
DescribeClusterParameters -> describeClusterParameters: Probability = 1.00, Count = 1
DescribeClusterParametersRequest -> DescribeClusterParametersRequest: Probability = 1.00, Count = 1
Invoke<DescribeClusterParametersResponse> -> executeDescribeClusterParameters: Probability = 1.00, Count = 1
typeName -> typeName: Probability = 1.00, Count = 1
_typeName -> typeName: Probability = 1.00, Count = 1
CreateModelPackageResponse -> CreateModelPackageResult: Probability = 1.00, Count = 1
CreateModelPackage -> createModelPackage: Probability = 1.00, Count = 1
CreateModelPackageRequest -> CreateModelPackageRequest: Probability = 1.00, Count = 1
Invoke<CreateModelPackageResponse> -> executeCreateModelPackage: Probability = 1.00, Count = 1
mem -> mem: Probability = 1.00, Count = 5
RamUsageEstimator.SizeOf -> RamUsageEstimator.shallowSizeOf: Probability = 0.31, Count = 4
RamUsageEstimator.SizeOf -> RamUsageEstimator.sizeOf: Probability = 0.69, Count = 9
Offsets -> offsets: Probability = 1.00, Count = 2
Ordinals -> ordinals: Probability = 1.00, Count = 2
State -> State: Probability = 0.55, Count = 17
State -> setState: Probability = 0.13, Count = 4
State -> int: Probability = 0.26, Count = 8
State -> char[data.length]: Probability = 0.03, Count = 1
State -> parseSubQuery: Probability = 0.03, Count = 1
this.GetCurrentState -> this.getCurrentState: Probability = 1.00, Count = 2
state.Clone -> state.clone: Probability = 1.00, Count = 1
Row, -> getRow: Probability = 0.60, Count = 3
Row, -> getColumn: Probability = 0.40, Count = 2
compact -> compact: Probability = 1.00, Count = 18
DetectCustomLabelsResponse -> DetectCustomLabelsResult: Probability = 1.00, Count = 1
DetectCustomLabels -> detectCustomLabels: Probability = 1.00, Count = 1
DetectCustomLabelsRequest -> DetectCustomLabelsRequest: Probability = 1.00, Count = 1
Invoke<DetectCustomLabelsResponse> -> executeDetectCustomLabels: Probability = 1.00, Count = 1
symbol, -> symbol,: Probability = 1.00, Count = 6
minVocabSymbol, -> minVocabSymbol,: Probability = 1.00, Count = 6
maxVocabSymbol -> maxVocabSymbol: Probability = 0.88, Count = 7
maxVocabSymbol -> maxVocabSymbol&&: Probability = 0.12, Count = 1
symbol -> symbol: Probability = 0.92, Count = 11
symbol -> minVocabSymbol&&: Probability = 0.08, Count = 1
minVocabSymbol -> minVocabSymbol: Probability = 1.00, Count = 1
indexOf -> indexOf: Probability = 0.91, Count = 20
indexOf -> field.indexOf: Probability = 0.05, Count = 1
indexOf -> 0,indexOf: Probability = 0.05, Count = 1
@object.Equals -> object.equals: Probability = 0.73, Count = 11
@object.Equals -> i: Probability = 0.27, Count = 4
SetObjectChecking -> setObjectChecking: Probability = 1.00, Count = 1
SetObjectChecker -> setObjectChecker: Probability = 1.00, Count = 1
ObjectChecker -> ObjectChecker: Probability = 1.00, Count = 2
ModifyVpcEndpointResponse -> ModifyVpcEndpointResult: Probability = 1.00, Count = 1
ModifyVpcEndpoint -> modifyVpcEndpoint: Probability = 1.00, Count = 1
ModifyVpcEndpointRequest -> ModifyVpcEndpointRequest: Probability = 1.00, Count = 1
Invoke<ModifyVpcEndpointResponse> -> executeModifyVpcEndpoint: Probability = 1.00, Count = 1
DeleteMethodResponseResponse -> DeleteMethodResponseResult: Probability = 1.00, Count = 1
DeleteMethodResponse -> deleteMethodResponse: Probability = 0.50, Count = 1
DeleteMethodResponse -> DeleteMethodResult: Probability = 0.50, Count = 1
DeleteMethodResponseRequest -> DeleteMethodResponseRequest: Probability = 1.00, Count = 1
Invoke<DeleteMethodResponseResponse> -> executeDeleteMethodResponse: Probability = 1.00, Count = 1
StringRecord -> StringRecord: Probability = 1.00, Count = 1
field_1_string_length -> field_1_string_length: Probability = 1.00, Count = 3
_is16bitUnicode -> _is16bitUnicode: Probability = 0.75, Count = 3
_is16bitUnicode -> ASCII": Probability = 0.25, Count = 1
_text -> _text: Probability = 0.57, Count = 4
_text -> text: Probability = 0.29, Count = 2
_text -> setText: Probability = 0.14, Count = 1
in1.ReadUnicodeLEString -> in.readUnicodeLEString: Probability = 0.89, Count = 8
in1.ReadUnicodeLEString -> rgchDefPivotStyle: Probability = 0.11, Count = 1
in1.ReadCompressedUnicode -> in.readCompressedUnicode: Probability = 1.00, Count = 6
DrawingRecord -> DrawingRecord: Probability = 1.00, Count = 2
GetProfileResponse -> GetProfileResult: Probability = 1.00, Count = 1
GetProfile -> getProfile: Probability = 1.00, Count = 5
GetProfileRequest -> GetProfileRequest: Probability = 1.00, Count = 1
Invoke<GetProfileResponse> -> executeGetProfile: Probability = 1.00, Count = 1
DescribeTableResponse -> DescribeTableResult: Probability = 1.00, Count = 1
DescribeTable -> describeTable: Probability = 1.00, Count = 2
GetSegmentResponse -> GetSegmentResult: Probability = 1.00, Count = 1
GetSegment -> getSegment: Probability = 1.00, Count = 1
GetSegmentRequest -> GetSegmentRequest: Probability = 1.00, Count = 1
Invoke<GetSegmentResponse> -> executeGetSegment: Probability = 1.00, Count = 1
PutAlarmResponse -> PutAlarmResult: Probability = 1.00, Count = 1
PutAlarm -> putAlarm: Probability = 1.00, Count = 1
PutAlarmRequest -> PutAlarmRequest: Probability = 1.00, Count = 1
Invoke<PutAlarmResponse> -> executePutAlarm: Probability = 1.00, Count = 1
testValue -> testValue: Probability = 1.00, Count = 7
BoolEval -> BoolEval: Probability = 1.00, Count = 6
BoolToInt -> boolToInt: Probability = 1.00, Count = 2
default:return -> default:return: Probability = 1.00, Count = 6
DeleteTrialResponse -> DeleteTrialResult: Probability = 1.00, Count = 1
DeleteTrial -> deleteTrial: Probability = 1.00, Count = 1
DeleteTrialRequest -> DeleteTrialRequest: Probability = 1.00, Count = 1
Invoke<DeleteTrialResponse> -> executeDeleteTrial: Probability = 1.00, Count = 1
set.ToString -> set.toString: Probability = 1.00, Count = 1
!Field.Equals -> !getField: Probability = 1.00, Count = 3
Term.ToString -> "*".equals: Probability = 0.25, Count = 2
Term.ToString -> Term.toString: Probability = 0.50, Count = 4
Term.ToString -> "\\*": Probability = 0.25, Count = 2
"*" -> "*": Probability = 1.00, Count = 3
bytesStart -> bytesStart: Probability = 1.00, Count = 4
int[ArrayUtil.Oversize -> int[ArrayUtil.oversize: Probability = 1.00, Count = 4
m_initSize, -> initSize,: Probability = 1.00, Count = 1
codePointBefore -> codePointBefore: Probability = 1.00, Count = 2
indexAndLength -> indexAndLength: Probability = 1.00, Count = 3
Sharpen.CharHelper.CodePointBefore -> Character.codePointBefore: Probability = 1.00, Count = 1
"SkipWorkTree -> "SkipWorkTree: Probability = 1.00, Count = 1
treeIdx -> treeIdx: Probability = 0.50, Count = 1
treeIdx -> DirCacheIterator.class: Probability = 0.50, Count = 1
GetLifecyclePoliciesResponse -> GetLifecyclePoliciesResult: Probability = 1.00, Count = 1
GetLifecyclePolicies -> getLifecyclePolicies: Probability = 1.00, Count = 1
GetLifecyclePoliciesRequest -> GetLifecyclePoliciesRequest: Probability = 1.00, Count = 1
Invoke<GetLifecyclePoliciesResponse> -> executeGetLifecyclePolicies: Probability = 1.00, Count = 1
NRTCachingDirectory -> NRTCachingDirectory: Probability = 1.00, Count = 1
@delegate, -> delegate,: Probability = 1.00, Count = 1
maxMergeSizeMB, -> maxMergeSizeMB,: Probability = 1.00, Count = 1
maxCachedMB -> maxCachedMB: Probability = 1.00, Count = 2
@delegate -> delegate: Probability = 1.00, Count = 4
maxMergeSizeBytes -> maxMergeSizeBytes: Probability = 1.00, Count = 1
VisitContainedRecords -> visitContainedRecords: Probability = 1.00, Count = 9
RecordVisitor -> RecordVisitor: Probability = 1.00, Count = 10
rv -> rv: Probability = 1.00, Count = 18
VisitIfPresent -> visitIfPresent: Probability = 0.50, Count = 4
VisitIfPresent -> _protectRecord,: Probability = 0.12, Count = 1
VisitIfPresent -> _objectProtectRecord,: Probability = 0.12, Count = 1
VisitIfPresent -> _scenarioProtectRecord,: Probability = 0.12, Count = 1
VisitIfPresent -> _passwordRecord,: Probability = 0.12, Count = 1
RefSubRecord -> RefSubRecord: Probability = 1.00, Count = 1
extBookIndex, -> extBookIndex,: Probability = 1.00, Count = 1
_extBookIndex -> _extBookIndex: Probability = 1.00, Count = 2
extBookIndex -> extBookIndex: Probability = 1.00, Count = 3
GetEntryLength -> getEntryLength: Probability = 1.00, Count = 1
.GetLength -> .getLength: Probability = 1.00, Count = 1
maxLevels:" -> maxLevels:": Probability = 1.00, Count = 1
",ctx:" -> ",ctx:": Probability = 1.00, Count = 1
BooleanQueryBuilder -> BooleanQueryBuilder: Probability = 1.00, Count = 1
IQueryBuilder -> QueryBuilder: Probability = 1.00, Count = 5
factory -> factory: Probability = 1.00, Count = 18
this.factory -> this.factory: Probability = 1.00, Count = 8
EscherContainerRecord -> EscherContainerRecord: Probability = 0.71, Count = 15
EscherContainerRecord -> dgLoc: Probability = 0.10, Count = 2
EscherContainerRecord -> dggContainer: Probability = 0.05, Count = 1
EscherContainerRecord -> drawingGroup.getEscherRecord: Probability = 0.05, Count = 1
EscherContainerRecord -> dggContainer.getChild: Probability = 0.10, Count = 2
spContainer, -> spContainer,: Probability = 1.00, Count = 5
ObjRecord -> ObjRecord: Probability = 1.00, Count = 5
objRecord -> objRecord: Probability = 0.83, Count = 5
objRecord -> this._objRecord: Probability = 0.17, Count = 1
this._escherContainer -> this._escherContainer: Probability = 1.00, Count = 2
spContainer -> spContainer: Probability = 1.00, Count = 3
this._optRecord -> this._optRecord: Probability = 1.00, Count = 1
spContainer.GetChildById -> spContainer.getChildById: Probability = 1.00, Count = 1
EscherOptRecord.RECORD_ID -> EscherOptRecord.RECORD_ID: Probability = 1.00, Count = 3
this.anchor -> this.anchor: Probability = 1.00, Count = 2
HSSFAnchor.CreateAnchorFromEscher -> HSSFAnchor.createAnchorFromEscher: Probability = 1.00, Count = 1
ListUpdatesResponse -> ListUpdatesResult: Probability = 1.00, Count = 1
ListUpdates -> listUpdates: Probability = 1.00, Count = 1
ListUpdatesRequest -> ListUpdatesRequest: Probability = 1.00, Count = 1
Invoke<ListUpdatesResponse> -> executeListUpdates: Probability = 1.00, Count = 1
IncreaseStreamRetentionPeriodResponse -> IncreaseStreamRetentionPeriodResult: Probability = 1.00, Count = 1
IncreaseStreamRetentionPeriod -> increaseStreamRetentionPeriod: Probability = 1.00, Count = 1
IncreaseStreamRetentionPeriodRequest -> IncreaseStreamRetentionPeriodRequest: Probability = 1.00, Count = 1
Invoke<IncreaseStreamRetentionPeriodResponse> -> executeIncreaseStreamRetentionPeriod: Probability = 1.00, Count = 1
ICollection<Cell> -> Collection<Cell>: Probability = 0.50, Count = 1
ICollection<Cell> -> getSubCells: Probability = 0.50, Count = 1
hashes -> hashes: Probability = 0.50, Count = 2
hashes -> GeohashUtils.getSubGeohashes: Probability = 0.25, Count = 1
hashes -> getGeohash: Probability = 0.25, Count = 1
cells -> cells: Probability = 1.00, Count = 3
FindAllTokenNodes -> findAllTokenNodes: Probability = 1.00, Count = 1
ttype, -> ttype,: Probability = 1.00, Count = 2
isQuoted -> isQuoted: Probability = 1.00, Count = 2
_isQuoted -> _isQuoted: Probability = 1.00, Count = 2
ObjectLoader -> ObjectLoader: Probability = 0.75, Count = 3
ObjectLoader -> objectId,: Probability = 0.25, Count = 1
Open -> open: Probability = 0.50, Count = 7
Open -> throws: Probability = 0.50, Count = 7
side, -> DiffEntry.Side: Probability = 1.00, Count = 2
DiffEntry -> side,: Probability = 0.50, Count = 2
DiffEntry -> DiffEntry: Probability = 0.50, Count = 2
ent -> ent: Probability = 1.00, Count = 5
side -> side: Probability = 1.00, Count = 8
ent.oldPath, -> OLD:return: Probability = 1.00, Count = 2
ent.oldId.ToObjectId -> ent.oldPath,: Probability = 1.00, Count = 2
DiffEntry.Side.NEW: -> ent.oldId.toObjectId: Probability = 1.00, Count = 2
ent.newPath, -> NEW:return: Probability = 1.00, Count = 2
ent.newId.ToObjectId -> ent.newPath,: Probability = 0.50, Count = 2
ent.newId.ToObjectId -> ent.newId.toObjectId: Probability = 0.50, Count = 2
CreateDBClusterSnapshotResponse -> DBClusterSnapshot: Probability = 1.00, Count = 1
CreateDBClusterSnapshot -> createDBClusterSnapshot: Probability = 1.00, Count = 1
CreateDBClusterSnapshotRequest -> CreateDBClusterSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CreateDBClusterSnapshotResponse> -> executeCreateDBClusterSnapshot: Probability = 1.00, Count = 1
url, -> url,: Probability = 1.00, Count = 6
sheetNames -> sheetNames: Probability = 1.00, Count = 8
SupBookRecord.CreateExternalReferences -> SupBookRecord.createExternalReferences: Probability = 1.00, Count = 1
CompareWithCase -> compareWithCase: Probability = 1.00, Count = 1
RecallPoint[] -> RecallPoint: Probability = 0.50, Count = 1
RecallPoint[] -> []: Probability = 0.50, Count = 1
GetRecallPoints -> getRecallPoints: Probability = 1.00, Count = 1
recallPoints.ToArray -> recallPoints.toArray: Probability = 0.50, Count = 1
recallPoints.ToArray -> RecallPoint[0]: Probability = 0.50, Count = 1
RemoveFacePhotosRequest -> RemoveFacePhotosRequest: Probability = 1.00, Count = 1
"RemoveFacePhotos", -> "RemoveFacePhotos",: Probability = 1.00, Count = 1
Int32sRef -> IntsRef: Probability = 0.33, Count = 3
Int32sRef -> toUTF32: Probability = 0.11, Count = 1
Int32sRef -> IntsRefBuilder: Probability = 0.56, Count = 5
charIdx -> charIdx: Probability = 1.00, Count = 3
intIdx -> intIdx: Probability = 1.00, Count = 2
charLimit -> charLimit: Probability = 0.75, Count = 3
charLimit -> intIdx+1: Probability = 0.25, Count = 1
utf32 -> utf32: Probability = 0.56, Count = 5
utf32 -> charIdx,: Probability = 0.11, Count = 1
utf32 -> scratch.setIntAt: Probability = 0.11, Count = 1
utf32 -> intIdx,: Probability = 0.11, Count = 1
utf32 -> intIdx++: Probability = 0.11, Count = 1
Character.CharCount -> Character.charCount: Probability = 1.00, Count = 6
SkipBytes -> skipBytes: Probability = 0.75, Count = 6
SkipBytes -> long: Probability = 0.25, Count = 2
AddDataValidation -> addDataValidation: Probability = 1.00, Count = 1
DVRecord -> DVRecord: Probability = 0.67, Count = 4
DVRecord -> _constraint.getValidationType: Probability = 0.17, Count = 1
DVRecord -> ,_constraint.getOperator: Probability = 0.17, Count = 1
dvRecord -> dvRecord: Probability = 1.00, Count = 2
_validationList.Add -> _validationList.add: Probability = 1.00, Count = 1
_headerRec.DVRecNo -> _headerRec.setDVRecNo: Probability = 0.50, Count = 1
_headerRec.DVRecNo -> _validationList.size: Probability = 0.50, Count = 1
_validationList.Count -> ): Probability = 1.00, Count = 2
SetDoubleValue -> setDoubleValue: Probability = 1.00, Count = 2
FieldsData.GetType -> fieldsData.getClass: Probability = 1.00, Count = 4
Double" -> Double": Probability = 1.00, Count = 1
DeleteRepoAuthorizationRequest -> DeleteRepoAuthorizationRequest: Probability = 1.00, Count = 1
"DeleteRepoAuthorization", -> "DeleteRepoAuthorization",: Probability = 1.00, Count = 1
MethodType.DELETE -> MethodType.DELETE: Probability = 1.00, Count = 8
writeObject -> writeObject: Probability = 1.00, Count = 2
raw -> raw: Probability = 0.48, Count = 13
raw -> final: Probability = 0.52, Count = 14
FileMode -> FileMode: Probability = 0.93, Count = 14
FileMode -> getIndexFileMode: Probability = 0.07, Count = 1
"I -> "I: Probability = 1.00, Count = 2
ne -> ne: Probability = 1.00, Count = 3
ListInvalidationsResponse -> ListInvalidationsResult: Probability = 1.00, Count = 1
ListInvalidations -> listInvalidations: Probability = 1.00, Count = 1
Invoke<ListInvalidationsResponse> -> executeListInvalidations: Probability = 1.00, Count = 1
SinkTokenStream -> TokenStream: Probability = 0.50, Count = 1
SinkTokenStream -> newSinkTokenStream: Probability = 0.50, Count = 1
NewSinkTokenStream -> SinkTokenStream: Probability = 0.50, Count = 1
NewSinkTokenStream -> this.cloneAttributes: Probability = 0.50, Count = 1
ACCEPT_ALL_FILTER -> ,: Probability = 0.50, Count = 1
ACCEPT_ALL_FILTER -> cachedStates: Probability = 0.50, Count = 1
PrecedencePredicate -> PrecedencePredicate: Probability = 1.00, Count = 1
precedence -> precedence: Probability = 0.73, Count = 22
precedence -> DFAs: Probability = 0.07, Count = 2
precedence -> state.": Probability = 0.07, Count = 2
precedence -> s0.edges.length: Probability = 0.07, Count = 2
precedence -> s0.edges: Probability = 0.03, Count = 1
precedence -> s0.edges,: Probability = 0.03, Count = 1
ReadPresetResponse -> ReadPresetResult: Probability = 1.00, Count = 1
ReadPreset -> readPreset: Probability = 1.00, Count = 1
ReadPresetRequest -> ReadPresetRequest: Probability = 1.00, Count = 1
Invoke<ReadPresetResponse> -> executeReadPreset: Probability = 1.00, Count = 1
GetIndexFile -> getIndexFile: Probability = 1.00, Count = 1
NoWorkTreeException -> NoWorkTreeException: Probability = 1.00, Count = 2
IsBare -> isBare: Probability = 1.00, Count = 1
indexFile -> indexFile: Probability = 1.00, Count = 1
ListApplicationsResponse -> ListApplicationsResult: Probability = 1.00, Count = 2
ListApplications -> listApplications: Probability = 1.00, Count = 3
ListApplicationsRequest -> ListApplicationsRequest: Probability = 1.00, Count = 2
Invoke<ListApplicationsResponse> -> executeListApplications: Probability = 1.00, Count = 1
CreateNumericConstraint -> createNumericConstraint: Probability = 1.00, Count = 2
validationType, -> validationType,int: Probability = 0.25, Count = 1
validationType, -> validationType,: Probability = 0.75, Count = 3
operatorType, -> operatorType,: Probability = 1.00, Count = 8
DVConstraint.CreateNumericConstraint -> DVConstraint.createNumericConstraint: Probability = 1.00, Count = 3
read -> read: Probability = 0.56, Count = 20
read -> throws: Probability = 0.28, Count = 10
read -> IOException: Probability = 0.17, Count = 6
field_1_value -> _value: Probability = 0.50, Count = 2
field_1_value -> field_1_value: Probability = 0.50, Count = 2
"TRUE" -> "TRUE": Probability = 1.00, Count = 2
"FALSE" -> "FALSE": Probability = 1.00, Count = 2
TokenSource.ReInit -> token_source.ReInit: Probability = 1.00, Count = 3
RevokeDBSecurityGroupIngressRequest -> RevokeDBSecurityGroupIngressRequest: Probability = 1.00, Count = 2
InitiateDocumentVersionUploadResponse -> InitiateDocumentVersionUploadResult: Probability = 1.00, Count = 1
InitiateDocumentVersionUpload -> initiateDocumentVersionUpload: Probability = 1.00, Count = 1
InitiateDocumentVersionUploadRequest -> InitiateDocumentVersionUploadRequest: Probability = 1.00, Count = 1
Invoke<InitiateDocumentVersionUploadResponse> -> executeInitiateDocumentVersionUpload: Probability = 1.00, Count = 1
MemAreaPtg -> MemAreaPtg: Probability = 1.00, Count = 2
subexLen -> subexLen: Probability = 1.00, Count = 2
field_2_subex_len -> field_2_subex_len: Probability = 1.00, Count = 4
byte[8] -> 0,: Probability = 1.00, Count = 3
byteBuffer.compact -> byteBuffer.compact: Probability = 1.00, Count = 6
_capacity -> capacity: Probability = 1.00, Count = 15
UNSET_MARK -> UNSET_MARK: Probability = 1.00, Count = 16
getRawAuthority -> getRawAuthority: Probability = 1.00, Count = 1
writeBytes -> writeBytes: Probability = 0.83, Count = 5
writeBytes -> buffer.remaining: Probability = 0.17, Count = 1
validateSimple -> validateSimple: Probability = 1.00, Count = 1
'A' -> 'A': Probability = 1.00, Count = 4
'Z' -> 'Z': Probability = 1.00, Count = 4
'0' -> '0': Probability = 1.00, Count = 4
ReadUnicodeString -> readUnicodeString: Probability = 1.00, Count = 1
DocValuesOrdinalsReader -> DocValuesOrdinalsReader: Probability = 1.00, Count = 1
AdvertiseByoipCidrResponse -> AdvertiseByoipCidrResult: Probability = 1.00, Count = 1
AdvertiseByoipCidr -> advertiseByoipCidr: Probability = 1.00, Count = 1
AdvertiseByoipCidrRequest -> AdvertiseByoipCidrRequest: Probability = 1.00, Count = 1
Invoke<AdvertiseByoipCidrResponse> -> executeAdvertiseByoipCidr: Probability = 1.00, Count = 1
DescribeAlarmsResponse -> DescribeAlarmsResult: Probability = 1.00, Count = 2
DescribeAlarms -> describeAlarms: Probability = 1.00, Count = 3
DescribeAlarmsRequest -> DescribeAlarmsRequest: Probability = 1.00, Count = 2
DescribeCrossAccountAccessRoleResponse -> DescribeCrossAccountAccessRoleResult: Probability = 1.00, Count = 1
DescribeCrossAccountAccessRole -> describeCrossAccountAccessRole: Probability = 1.00, Count = 1
DescribeCrossAccountAccessRoleRequest -> DescribeCrossAccountAccessRoleRequest: Probability = 1.00, Count = 1
Invoke<DescribeCrossAccountAccessRoleResponse> -> executeDescribeCrossAccountAccessRole: Probability = 1.00, Count = 1
reverse -> reverse: Probability = 1.00, Count = 5
reverse0 -> reverse0: Probability = 1.00, Count = 2
Invoke<DescribeImagesResponse> -> executeDescribeImages: Probability = 1.00, Count = 1
CreateDhcpOptionsRequest -> CreateDhcpOptionsRequest: Probability = 1.00, Count = 2
List<DhcpConfiguration> -> java.util.List<DhcpConfiguration>: Probability = 1.00, Count = 1
dhcpConfigurations -> dhcpConfigurations: Probability = 1.00, Count = 2
_dhcpConfigurations -> setDhcpConfigurations: Probability = 1.00, Count = 1
StartChatContactResponse -> StartChatContactResult: Probability = 1.00, Count = 1
StartChatContact -> startChatContact: Probability = 1.00, Count = 1
StartChatContactRequest -> StartChatContactRequest: Probability = 1.00, Count = 1
Invoke<StartChatContactResponse> -> executeStartChatContact: Probability = 1.00, Count = 1
GetCampaignsResponse -> GetCampaignsResult: Probability = 1.00, Count = 1
GetCampaigns -> getCampaigns: Probability = 1.00, Count = 1
GetCampaignsRequest -> GetCampaignsRequest: Probability = 1.00, Count = 1
Invoke<GetCampaignsResponse> -> executeGetCampaigns: Probability = 1.00, Count = 1
GetAssessmentReportResponse -> GetAssessmentReportResult: Probability = 1.00, Count = 1
GetAssessmentReport -> getAssessmentReport: Probability = 1.00, Count = 1
GetAssessmentReportRequest -> GetAssessmentReportRequest: Probability = 1.00, Count = 1
Invoke<GetAssessmentReportResponse> -> executeGetAssessmentReport: Probability = 1.00, Count = 1
ATNConfigSet -> configs: Probability = 0.43, Count = 3
ATNConfigSet -> ATNConfigSet: Probability = 0.57, Count = 4
decision -> decision: Probability = 0.90, Count = 9
decision -> atnStartState,: Probability = 0.10, Count = 1
dfa -> dfa: Probability = 0.60, Count = 3
dfa -> _interp.decisionToDFA[d]: Probability = 0.40, Count = 2
Interval.Of -> Interval.of: Probability = 0.83, Count = 5
Interval.Of -> 0,size: Probability = 0.17, Count = 1
startIndex, -> startIndex,: Probability = 0.58, Count = 7
startIndex, -> end: Probability = 0.42, Count = 5
stopIndex -> stopIndex: Probability = 1.00, Count = 5
this._enclosing -> Hashtable.this: Probability = 0.29, Count = 4
this._enclosing -> Iterator<Multiset.Entry<E>>: Probability = 0.14, Count = 2
this._enclosing -> return: Probability = 0.07, Count = 1
this._enclosing -> UnmodifiableIterator<K>: Probability = 0.07, Count = 1
this._enclosing -> V>>: Probability = 0.14, Count = 2
this._enclosing -> UnmodifiableIterator<Entry<K,: Probability = 0.07, Count = 1
this._enclosing -> Lists.newArrayList: Probability = 0.07, Count = 1
this._enclosing -> iterator: Probability = 0.07, Count = 1
this._enclosing -> subMap.remove: Probability = 0.07, Count = 1
.mask -> .mask: Probability = 1.00, Count = 1
DisableAlarmActionsResponse -> DisableAlarmActionsResult: Probability = 1.00, Count = 1
DisableAlarmActions -> disableAlarmActions: Probability = 1.00, Count = 1
DisableAlarmActionsRequest -> DisableAlarmActionsRequest: Probability = 1.00, Count = 1
Invoke<DisableAlarmActionsResponse> -> executeDisableAlarmActions: Probability = 1.00, Count = 1
RegisterDBProxyTargetsResponse -> RegisterDBProxyTargetsResult: Probability = 1.00, Count = 1
RegisterDBProxyTargets -> registerDBProxyTargets: Probability = 1.00, Count = 1
RegisterDBProxyTargetsRequest -> RegisterDBProxyTargetsRequest: Probability = 1.00, Count = 1
Invoke<RegisterDBProxyTargetsResponse> -> executeRegisterDBProxyTargets: Probability = 1.00, Count = 1
java.util.Arrays.checkStartAndEnd -> Arrays.checkStartAndEnd: Probability = 1.00, Count = 9
array.Length, -> array.length,: Probability = 1.00, Count = 9
ContainsColumn -> containsColumn: Probability = 1.00, Count = 2
_first_col -> _firstCol: Probability = 1.00, Count = 3
_last_col -> _lastCol: Probability = 1.00, Count = 4
java.util.Hashtable.HashtableEntry<K, -> HashtableEntry<K,: Probability = 1.00, Count = 13
EMPTY_TABLE -> EMPTY_TABLE: Probability = 1.00, Count = 4
threshold -> threshold: Probability = 1.00, Count = 11
AttributeFactory -> final: Probability = 0.33, Count = 1
AttributeFactory -> AttributeFactory: Probability = 0.67, Count = 2
GetAttributeFactory -> getAttributeFactory: Probability = 1.00, Count = 1
onChange -> onChange: Probability = 1.00, Count = 2
selfChange -> selfChange: Probability = 1.00, Count = 2
this._enclosing.onContentChanged -> refreshData: Probability = 0.50, Count = 1
this._enclosing.onContentChanged -> mCursor.requery: Probability = 0.50, Count = 1
ListObjectAttributesResponse -> ListObjectAttributesResult: Probability = 1.00, Count = 1
ListObjectAttributes -> listObjectAttributes: Probability = 1.00, Count = 1
ListObjectAttributesRequest -> ListObjectAttributesRequest: Probability = 1.00, Count = 1
Invoke<ListObjectAttributesResponse> -> executeListObjectAttributes: Probability = 1.00, Count = 1
GetDeploymentsResponse -> GetDeploymentsResult: Probability = 1.00, Count = 1
GetDeployments -> getDeployments: Probability = 1.00, Count = 1
GetDeploymentsRequest -> GetDeploymentsRequest: Probability = 1.00, Count = 1
Invoke<GetDeploymentsResponse> -> executeGetDeployments: Probability = 1.00, Count = 1
ListWorkGroupsResponse -> ListWorkGroupsResult: Probability = 1.00, Count = 1
ListWorkGroups -> listWorkGroups: Probability = 1.00, Count = 1
ListWorkGroupsRequest -> ListWorkGroupsRequest: Probability = 1.00, Count = 1
Invoke<ListWorkGroupsResponse> -> executeListWorkGroups: Probability = 1.00, Count = 1
CreatePhotoStoreRequest -> CreatePhotoStoreRequest: Probability = 1.00, Count = 1
"CreatePhotoStore", -> "CreatePhotoStore",: Probability = 1.00, Count = 1
PutMethod -> putMethod: Probability = 1.00, Count = 1
PutMethodRequest -> PutMethodRequest: Probability = 1.00, Count = 1
Invoke<PutMethodResponse> -> executePutMethod: Probability = 1.00, Count = 1
DescribeServiceAccessPoliciesResponse -> DescribeServiceAccessPoliciesResult: Probability = 1.00, Count = 1
DescribeServiceAccessPolicies -> describeServiceAccessPolicies: Probability = 1.00, Count = 1
DescribeServiceAccessPoliciesRequest -> DescribeServiceAccessPoliciesRequest: Probability = 1.00, Count = 1
Invoke<DescribeServiceAccessPoliciesResponse> -> executeDescribeServiceAccessPolicies: Probability = 1.00, Count = 1
DescribeCacheParameterGroupsResponse -> DescribeCacheParameterGroupsResult: Probability = 1.00, Count = 2
DescribeCacheParameterGroups -> describeCacheParameterGroups: Probability = 1.00, Count = 3
DescribeCacheParameterGroupsRequest -> DescribeCacheParameterGroupsRequest: Probability = 1.00, Count = 3
key2 -> key2: Probability = 1.00, Count = 2
key.Trim -> key.trim: Probability = 0.20, Count = 1
key.Trim -> .toLowerCase: Probability = 0.40, Count = 2
key.Trim -> locale: Probability = 0.40, Count = 2
TSTNode -> TSTNode: Probability = 1.00, Count = 3
node -> node: Probability = 1.00, Count = 10
GetNode -> getNode: Probability = 1.00, Count = 6
aux -> aux: Probability = 0.84, Count = 16
aux -> 1f: Probability = 0.05, Count = 1
aux -> aux.intValue: Probability = 0.05, Count = 1
aux -> key2,: Probability = 0.05, Count = 1
node.data -> node.data: Probability = 1.00, Count = 2
Put -> put: Probability = 1.00, Count = 3
"[/WINDOWPROTECT]\n" -> "[/WINDOWPROTECT]\n": Probability = 1.00, Count = 1
RetrieveDomainAuthCodeResponse -> RetrieveDomainAuthCodeResult: Probability = 1.00, Count = 1
RetrieveDomainAuthCode -> retrieveDomainAuthCode: Probability = 1.00, Count = 1
RetrieveDomainAuthCodeRequest -> RetrieveDomainAuthCodeRequest: Probability = 1.00, Count = 1
Invoke<RetrieveDomainAuthCodeResponse> -> executeRetrieveDomainAuthCode: Probability = 1.00, Count = 1
GetRelationalDatabaseMetricDataResponse -> GetRelationalDatabaseMetricDataResult: Probability = 1.00, Count = 1
GetRelationalDatabaseMetricData -> getRelationalDatabaseMetricData: Probability = 1.00, Count = 1
GetRelationalDatabaseMetricDataRequest -> GetRelationalDatabaseMetricDataRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseMetricDataResponse> -> executeGetRelationalDatabaseMetricData: Probability = 1.00, Count = 1
pollFirstEntry -> pollFirstEntry: Probability = 1.00, Count = 1
java.util.TreeMap.Node<K, -> Node<K,: Probability = 1.00, Count = 2
this.endpoint -> endpoint: Probability = 1.00, Count = 6
this._enclosing.removeInternal -> removeInternal: Probability = 1.00, Count = 3
maxTokenPosition -> maxTokenPosition: Probability = 0.75, Count = 3
maxTokenPosition -> "maxTokenPosition: Probability = 0.25, Count = 1
zero" -> zero": Probability = 1.00, Count = 3
this.consumeAllTokens -> this.consumeAllTokens: Probability = 1.00, Count = 2
AddAttribute<IPositionIncrementAttribute> -> =: Probability = 1.00, Count = 1
DefaultProfile -> synchronized: Probability = 0.33, Count = 4
DefaultProfile -> DefaultProfile: Probability = 0.67, Count = 8
regionId, -> regionId,: Probability = 1.00, Count = 4
accessKeyId, -> accessKeyId,: Probability = 1.00, Count = 6
secret -> secret: Probability = 0.89, Count = 8
secret -> this.accessKeyId: Probability = 0.11, Count = 1
credential -> creden: Probability = 1.00, Count = 2
_profile -> profile: Probability = 1.00, Count = 7
@string, -> string,: Probability = 1.00, Count = 1
ListAppsResponse -> ListAppsResult: Probability = 1.00, Count = 1
ListApps -> listApps: Probability = 1.00, Count = 1
ListAppsRequest -> ListAppsRequest: Probability = 1.00, Count = 1
Invoke<ListAppsResponse> -> executeListApps: Probability = 1.00, Count = 1
ListAttachedIndicesResponse -> ListAttachedIndicesResult: Probability = 1.00, Count = 1
ListAttachedIndices -> listAttachedIndices: Probability = 1.00, Count = 1
ListAttachedIndicesRequest -> ListAttachedIndicesRequest: Probability = 1.00, Count = 1
Invoke<ListAttachedIndicesResponse> -> executeListAttachedIndices: Probability = 1.00, Count = 1
AddShape -> addShape: Probability = 1.00, Count = 7
shape.Patriarch -> shape.setPatriarch: Probability = 1.00, Count = 1
_shapes.Add -> _shapes.add: Probability = 1.00, Count = 1
CreateNatGatewayResponse -> CreateNatGatewayResult: Probability = 1.00, Count = 1
CreateNatGateway -> createNatGateway: Probability = 1.00, Count = 1
CreateNatGatewayRequest -> CreateNatGatewayRequest: Probability = 1.00, Count = 1
Invoke<CreateNatGatewayResponse> -> executeCreateNatGateway: Probability = 1.00, Count = 1
GetApnsVoipChannelResponse -> GetApnsVoipChannelResult: Probability = 1.00, Count = 1
GetApnsVoipChannel -> getApnsVoipChannel: Probability = 1.00, Count = 1
GetApnsVoipChannelRequest -> GetApnsVoipChannelRequest: Probability = 1.00, Count = 1
Invoke<GetApnsVoipChannelResponse> -> executeGetApnsVoipChannel: Probability = 1.00, Count = 1
ReplaceTransitGatewayRouteResponse -> ReplaceTransitGatewayRouteResult: Probability = 1.00, Count = 1
ReplaceTransitGatewayRoute -> replaceTransitGatewayRoute: Probability = 1.00, Count = 1
ReplaceTransitGatewayRouteRequest -> ReplaceTransitGatewayRouteRequest: Probability = 1.00, Count = 1
Invoke<ReplaceTransitGatewayRouteResponse> -> executeReplaceTransitGatewayRoute: Probability = 1.00, Count = 1
RamUsageEstimator.NUM_BYTES_OBJECT_REF -> lengths.ramBytesUsed: Probability = 0.21, Count = 3
RamUsageEstimator.NUM_BYTES_OBJECT_REF -> RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+: Probability = 0.29, Count = 4
RamUsageEstimator.NUM_BYTES_OBJECT_REF -> RamUsageEstimator.NUM_BYTES_OBJECT_REF: Probability = 0.29, Count = 4
RamUsageEstimator.NUM_BYTES_OBJECT_REF -> docs.ramBytesUsed: Probability = 0.07, Count = 1
RamUsageEstimator.NUM_BYTES_OBJECT_REF -> 2: Probability = 0.07, Count = 1
RamUsageEstimator.NUM_BYTES_OBJECT_REF -> Integer.BYTES+: Probability = 0.07, Count = 1
positions.RamBytesUsed -> Integer.BYTES+: Probability = 1.00, Count = 2
ParseTreePattern -> ParseTreePattern: Probability = 1.00, Count = 7
Compile -> compile: Probability = 1.00, Count = 3
patternRuleIndex -> patternRuleIndex: Probability = 1.00, Count = 8
tokenList -> tokenList: Probability = 1.00, Count = 2
Tokenize -> tokenize: Probability = 1.00, Count = 2
ListTokenSource -> ListTokenSource: Probability = 1.00, Count = 2
tokenSrc -> tokenSrc: Probability = 1.00, Count = 2
CommonTokenStream -> CommonTokenStream: Probability = 1.00, Count = 2
ParserInterpreter -> ParserInterpreter: Probability = 1.00, Count = 2
patternRuleIndex, -> patternRuleIndex,: Probability = 0.67, Count = 2
patternRuleIndex, -> patternRuleIndex,Lexer: Probability = 0.33, Count = 1
GetRelationalDatabaseLogEventsResponse -> GetRelationalDatabaseLogEventsResult: Probability = 1.00, Count = 1
GetRelationalDatabaseLogEvents -> getRelationalDatabaseLogEvents: Probability = 1.00, Count = 1
GetRelationalDatabaseLogEventsRequest -> GetRelationalDatabaseLogEventsRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseLogEventsResponse> -> executeGetRelationalDatabaseLogEvents: Probability = 1.00, Count = 1
BeiderMorseFilter -> BeiderMorseFilter: Probability = 1.00, Count = 2
engine, -> engine,: Probability = 1.00, Count = 3
languageSet -> languageSet: Probability = 1.00, Count = 1
ClasspathResourceLoader -> ClasspathResourceLoader: Probability = 0.50, Count = 1
ClasspathResourceLoader -> Class<?>: Probability = 0.50, Count = 1
this.clazz -> clazz,: Probability = 0.50, Count = 1
this.clazz -> clazz.getClassLoader: Probability = 0.50, Count = 1
DescribeRouteTablesResponse -> DescribeRouteTablesResult: Probability = 1.00, Count = 1
DescribeRouteTables -> describeRouteTables: Probability = 1.00, Count = 1
DescribeRouteTablesRequest -> DescribeRouteTablesRequest: Probability = 1.00, Count = 1
Invoke<DescribeRouteTablesResponse> -> executeDescribeRouteTables: Probability = 1.00, Count = 1
SetRenameCallback -> setRenameCallback: Probability = 1.00, Count = 1
RenameCallback -> RenameCallback: Probability = 1.00, Count = 2
callback -> callback: Probability = 1.00, Count = 2
renameCallback -> renameCallback: Probability = 1.00, Count = 2
DimensionsRecord -> DimensionsRecord: Probability = 0.57, Count = 4
DimensionsRecord -> createDimensions: Probability = 0.14, Count = 1
DimensionsRecord -> result.setFirstRow: Probability = 0.14, Count = 1
DimensionsRecord -> result.setLastRow: Probability = 0.14, Count = 1
=_valuesAgg.FirstCellNum -> result.setLastCol: Probability = 1.00, Count = 1
_valuesAgg.LastCellNum -> _valuesAgg.getLastCellNum: Probability = 1.00, Count = 1
StopTransformJobResponse -> StopTransformJobResult: Probability = 1.00, Count = 1
StopTransformJob -> stopTransformJob: Probability = 1.00, Count = 1
StopTransformJobRequest -> StopTransformJobRequest: Probability = 1.00, Count = 1
Invoke<StopTransformJobResponse> -> executeStopTransformJob: Probability = 1.00, Count = 1
QueryAuthenticationRequest -> QueryAuthenticationRequest: Probability = 1.00, Count = 1
"QueryAuthentication" -> "QueryAuthentication": Probability = 1.00, Count = 1
java.io.PrintStream -> PrintStream: Probability = 1.00, Count = 2
StartKeyPhrasesDetectionJobResponse -> StartKeyPhrasesDetectionJobResult: Probability = 1.00, Count = 1
StartKeyPhrasesDetectionJob -> startKeyPhrasesDetectionJob: Probability = 1.00, Count = 1
StartKeyPhrasesDetectionJobRequest -> StartKeyPhrasesDetectionJobRequest: Probability = 1.00, Count = 1
Invoke<StartKeyPhrasesDetectionJobResponse> -> executeStartKeyPhrasesDetectionJob: Probability = 1.00, Count = 1
currMap -> currMap: Probability = 0.50, Count = 4
currMap -> ti: Probability = 0.12, Count = 1
currMap -> currMap.subMap.get: Probability = 0.12, Count = 1
currMap -> ti.getText: Probability = 0.12, Count = 1
currMap -> currMap.isValidTermOrPhrase: Probability = 0.12, Count = 1
TermInfo -> TermInfo: Probability = 1.00, Count = 6
"Term -> "Term: Probability = 1.00, Count = 1
this.m_terms.Add -> this.terms.add: Probability = 1.00, Count = 1
ListEmailIdentitiesResponse -> ListEmailIdentitiesResult: Probability = 1.00, Count = 1
ListEmailIdentities -> listEmailIdentities: Probability = 1.00, Count = 1
ListEmailIdentitiesRequest -> ListEmailIdentitiesRequest: Probability = 1.00, Count = 1
Invoke<ListEmailIdentitiesResponse> -> executeListEmailIdentities: Probability = 1.00, Count = 1
MutableFPNumber -> MutableFPNumber: Probability = 0.78, Count = 7
MutableFPNumber -> cc: Probability = 0.22, Count = 2
frac, -> frac,: Probability = 1.00, Count = 3
binaryExponent -> binaryExponent: Probability = 0.58, Count = 7
binaryExponent -> 49: Probability = 0.08, Count = 1
binaryExponent -> 46: Probability = 0.08, Count = 1
binaryExponent -> 29: Probability = 0.08, Count = 1
binaryExponent -> 19: Probability = 0.08, Count = 1
binaryExponent -> LOG_BASE_10_OF_2_TIMES_2_POW_20: Probability = 0.08, Count = 1
frac -> frac: Probability = 1.00, Count = 2
_binaryExponent -> _binaryExponent: Probability = 1.00, Count = 9
CreateNetworkProfileResponse -> CreateNetworkProfileResult: Probability = 1.00, Count = 1
CreateNetworkProfile -> createNetworkProfile: Probability = 1.00, Count = 1
CreateNetworkProfileRequest -> CreateNetworkProfileRequest: Probability = 1.00, Count = 1
Invoke<CreateNetworkProfileResponse> -> executeCreateNetworkProfile: Probability = 1.00, Count = 1
RemoveTransition -> Transition: Probability = 0.50, Count = 1
RemoveTransition -> removeTransition: Probability = 0.50, Count = 1
transitions.RemoveAt -> transitions.remove: Probability = 1.00, Count = 1
PerfRunData -> PerfRunData: Probability = 1.00, Count = 5
runData -> runData: Probability = 0.88, Count = 7
runData -> this.runData: Probability = 0.12, Count = 1
w -> w: Probability = 0.64, Count = 28
w -> e.next: Probability = 0.09, Count = 4
w -> now.getCmd: Probability = 0.05, Count = 2
w -> cmds.get: Probability = 0.07, Count = 3
w -> now.getRef: Probability = 0.05, Count = 2
w -> getByte: Probability = 0.02, Count = 1
w -> 0:w: Probability = 0.02, Count = 1
w -> 1:w: Probability = 0.02, Count = 1
w -> 2:w: Probability = 0.02, Count = 1
w -> 3:w: Probability = 0.02, Count = 1
"please -> "please: Probability = 1.00, Count = 3
before -> before: Probability = 1.00, Count = 5
J2N.Time.CurrentTimeMilliseconds -> System.currentTimeMillis: Probability = 1.00, Count = 5
DirectoryReader -> DirectoryReader: Probability = 1.00, Count = 5
reopenCount -> reopenCount: Probability = 1.00, Count = 3
waitForMsec -> waitForMsec: Probability = 1.00, Count = 3
pauseMSec -> pauseMSec: Probability = 1.00, Count = 2
newReader -> newReader: Probability = 1.00, Count = 4
PutAttributesResponse -> PutAttributesResult: Probability = 1.00, Count = 1
PutAttributes -> putAttributes: Probability = 1.00, Count = 1
Invoke<PutAttributesResponse> -> executePutAttributes: Probability = 1.00, Count = 1
DeleteLocalGatewayRouteTableVpcAssociationResponse -> DeleteLocalGatewayRouteTableVpcAssociationResult: Probability = 1.00, Count = 1
DeleteLocalGatewayRouteTableVpcAssociation -> deleteLocalGatewayRouteTableVpcAssociation: Probability = 1.00, Count = 1
DeleteLocalGatewayRouteTableVpcAssociationRequest -> DeleteLocalGatewayRouteTableVpcAssociationRequest: Probability = 1.00, Count = 1
Invoke<DeleteLocalGatewayRouteTableVpcAssociationResponse> -> executeDeleteLocalGatewayRouteTableVpcAssociation: Probability = 1.00, Count = 1
TreeFilter[list.Length] -> TreeFilter[list.length]: Probability = 1.00, Count = 2
nextSubtreePos-- -> nextSubtreePos--: Probability = 1.00, Count = 1
ptr-- -> ptr--: Probability = 1.00, Count = 4
currentSubtree.GetEntrySpan -> currentSubtree.getEntrySpan: Probability = 1.00, Count = 1
SubmoduleStatus> -> SubmoduleStatus>: Probability = 1.00, Count = 2
Dictionary<string, -> Map<String,: Probability = 0.36, Count = 5
Dictionary<string, -> HashMap<>: Probability = 0.43, Count = 6
Dictionary<string, -> String>: Probability = 0.14, Count = 2
Dictionary<string, -> new: Probability = 0.07, Count = 1
e.Message, -> e.getMessage: Probability = 0.48, Count = 11
e.Message, -> ,: Probability = 0.52, Count = 12
SmallStream -> SmallStream: Probability = 1.00, Count = 1
EscapeExtensionField -> escapeExtensionField: Probability = 1.00, Count = 2
extfield -> extfield: Probability = 1.00, Count = 2
QueryParserBase.Escape -> QueryParserBase.escape: Probability = 1.00, Count = 1
GetHighIx -> getHighIx: Probability = 1.00, Count = 1
_highIx -> _highIx: Probability = 1.00, Count = 4
"[/VCENTER]\n" -> "[/VCENTER]\n": Probability = 1.00, Count = 1
PredictCategoryRequest -> PredictCategoryRequest: Probability = 1.00, Count = 1
"visionai-poc", -> "visionai-poc",: Probability = 1.00, Count = 5
"2020-04-08", -> "2020-04-08",: Probability = 1.00, Count = 5
"PredictCategory" -> "PredictCategory": Probability = 1.00, Count = 1
DeleteLagResponse -> DeleteLagResult: Probability = 1.00, Count = 1
DeleteLag -> deleteLag: Probability = 1.00, Count = 1
DeleteLagRequest -> DeleteLagRequest: Probability = 1.00, Count = 1
Invoke<DeleteLagResponse> -> executeDeleteLag: Probability = 1.00, Count = 1
End -> end: Probability = 1.00, Count = 3
state.End -> state.end: Probability = 1.00, Count = 1
BooleanMatcher -> BooleanMatcher: Probability = 1.00, Count = 1
CmpOp -> CmpOp: Probability = 1.00, Count = 5
optr -> operator: Probability = 0.86, Count = 6
optr -> operator.getCode: Probability = 0.14, Count = 1
re.NumberOfSheets -> re.getNumberOfSheets: Probability = 1.00, Count = 1
_re -> _re: Probability = 1.00, Count = 1
UpdateGameSessionResponse -> UpdateGameSessionResult: Probability = 1.00, Count = 1
UpdateGameSession -> updateGameSession: Probability = 1.00, Count = 1
UpdateGameSessionRequest -> UpdateGameSessionRequest: Probability = 1.00, Count = 1
Invoke<UpdateGameSessionResponse> -> executeUpdateGameSession: Probability = 1.00, Count = 1
"Dirichlet -> String.format: Probability = 0.50, Count = 1
"Dirichlet -> "Dirichlet: Probability = 0.50, Count = 1
Number.ToString -> Locale.ROOT,: Probability = 0.50, Count = 2
Number.ToString -> %f: Probability = 0.50, Count = 2
Mu -> getMu: Probability = 1.00, Count = 1
MemoryStream -> compressedLength: Probability = 0.27, Count = 3
MemoryStream -> paddedLength: Probability = 0.27, Count = 3
MemoryStream -> compressed,: Probability = 0.27, Count = 3
MemoryStream -> ByteArrayOutputStream: Probability = 0.18, Count = 2
bytes.Offset -> bytes.offset: Probability = 1.00, Count = 4
bytes.Bytes -> bytes.bytes: Probability = 1.00, Count = 2
Tuple<string, -> Pair<String,String>: Probability = 0.20, Count = 1
Tuple<string, -> splitExtensionField: Probability = 0.20, Count = 1
Tuple<string, -> defaultField,String: Probability = 0.20, Count = 1
Tuple<string, -> Pair<>: Probability = 0.40, Count = 2
this.extensionFieldDelimiter -> this.extensionFieldDelimiter: Probability = 1.00, Count = 3
defaultField -> defaultField: Probability = 1.00, Count = 6
field.Substring -> field.substring: Probability = 1.00, Count = 2
extensionKey -> extensionKey: Probability = 0.80, Count = 4
extensionKey -> indexField,: Probability = 0.20, Count = 1
PauseClusterResponse -> Cluster: Probability = 1.00, Count = 1
PauseCluster -> pauseCluster: Probability = 1.00, Count = 1
PauseClusterRequest -> PauseClusterRequest: Probability = 1.00, Count = 1
Invoke<PauseClusterResponse> -> executePauseCluster: Probability = 1.00, Count = 1
AllocateAddressResponse -> AllocateAddressResult: Probability = 1.00, Count = 2
AllocateAddress -> allocateAddress: Probability = 1.00, Count = 3
AllocateAddressRequest -> AllocateAddressRequest: Probability = 1.00, Count = 2
Invoke<AllocateAddressResponse> -> executeAllocateAddress: Probability = 1.00, Count = 1
GetNetworkProfileResponse -> GetNetworkProfileResult: Probability = 1.00, Count = 1
GetNetworkProfile -> getNetworkProfile: Probability = 1.00, Count = 1
GetNetworkProfileRequest -> GetNetworkProfileRequest: Probability = 1.00, Count = 1
Invoke<GetNetworkProfileResponse> -> executeGetNetworkProfile: Probability = 1.00, Count = 1
th -> reThrow: Probability = 0.17, Count = 1
th -> Throwable: Probability = 0.17, Count = 1
th -> th: Probability = 0.50, Count = 3
th -> rethrowAlways: Probability = 0.17, Count = 1
RemoveCell -> removeCell: Probability = 1.00, Count = 4
CellValueRecordInterface -> CellValueRecordInterface: Probability = 1.00, Count = 8
cvRec -> cvRec: Probability = 0.86, Count = 6
cvRec -> .notifyFormulaChanging: Probability = 0.14, Count = 1
FormulaRecordAggregate -> FormulaRecordAggregate: Probability = 0.70, Count = 14
FormulaRecordAggregate -> fra: Probability = 0.10, Count = 2
FormulaRecordAggregate -> fra.getFormulaTokens: Probability = 0.10, Count = 2
FormulaRecordAggregate -> ptgs2: Probability = 0.05, Count = 1
FormulaRecordAggregate -> .getFormulaRecord: Probability = 0.05, Count = 1
_valuesAgg.RemoveCell -> _valuesAgg.removeCell: Probability = 1.00, Count = 1
"token -> "token: Probability = 1.00, Count = 3
tokens[i] -> tokens.get: Probability = 1.00, Count = 5
Invoke<DescribeAlarmsResponse> -> executeDescribeAlarms: Probability = 1.00, Count = 1
SetTags -> setTags: Probability = 1.00, Count = 2
tags -> tags: Probability = 1.00, Count = 10
this.tags -> this.tags: Probability = 1.00, Count = 1
ASCIIFoldingFilterFactory -> ASCIIFoldingFilterFactory: Probability = 1.00, Count = 1
"preserveOriginal", -> PRESERVE_ORIGINAL,: Probability = 1.00, Count = 1
"input=" -> input.get: Probability = 0.33, Count = 1
"input=" -> output=": Probability = 0.33, Count = 1
"input=" -> output: Probability = 0.33, Count = 1
Input -> context=": Probability = 0.50, Count = 1
Input -> context: Probability = 0.50, Count = 1
cost=" -> boost=": Probability = 0.50, Count = 1
cost=" -> boost: Probability = 0.50, Count = 1
Cost -> payload=": Probability = 0.50, Count = 1
Cost -> payload: Probability = 0.50, Count = 1
NGit.Api.ListNotesCommand -> ListNotesCommand: Probability = 1.00, Count = 1
SetNotesRef -> setNotesRef: Probability = 1.00, Count = 4
notesRef -> notesRef: Probability = 1.00, Count = 12
this.notesRef -> this.notesRef: Probability = 1.00, Count = 4
.name -> .name: Probability = 1.00, Count = 7
ArgumentNullException -> NullPointerException: Probability = 0.86, Count = 6
ArgumentNullException -> "Null: Probability = 0.14, Count = 1
HexDump.ByteToHex -> HexDump.byteToHex: Probability = 1.00, Count = 8
CodepointCountFilterFactory -> CodepointCountFilterFactory: Probability = 1.00, Count = 1
ceilingEntry -> ceilingEntry: Probability = 1.00, Count = 1
java.util.TreeMap.Relation.CEILING -> CEILING: Probability = 1.00, Count = 2
SetStartTimeMillis -> setStartTimeMillis: Probability = 1.00, Count = 1
startTimeMillis -> startTimeMillis: Probability = 1.00, Count = 2
ListProfilingGroupsResponse -> ListProfilingGroupsResult: Probability = 1.00, Count = 1
ListProfilingGroups -> listProfilingGroups: Probability = 1.00, Count = 1
ListProfilingGroupsRequest -> ListProfilingGroupsRequest: Probability = 1.00, Count = 1
Invoke<ListProfilingGroupsResponse> -> executeListProfilingGroups: Probability = 1.00, Count = 1
ParsePersonIdent -> parsePersonIdent: Probability = 1.00, Count = 2
Constants.Encode -> Constants.encode: Probability = 1.00, Count = 6
field_1_numerator -> field_1_numerator: Probability = 1.00, Count = 2
field_2_denominator -> field_2_denominator: Probability = 1.00, Count = 2
NGit.Api.AddCommand -> AddCommand: Probability = 1.00, Count = 3
SetUpdate -> setUpdate: Probability = 1.00, Count = 1
this.update -> this.update: Probability = 1.00, Count = 1
copyOf -> copyOf: Probability = 1.00, Count = 7
newLength -> newLength: Probability = 0.96, Count = 25
newLength -> original: Probability = 0.04, Count = 1
java.lang.NegativeArraySizeException -> NegativeArraySizeException: Probability = 1.00, Count = 7
_ulrOutput.WriteByte -> _ulrOutput.writeByte: Probability = 1.00, Count = 2
previousValue -> previousValue: Probability = 1.00, Count = 2
minValue -> minValue: Probability = 1.00, Count = 2
SetLength -> setLength: Probability = 0.80, Count = 4
SetLength -> long: Probability = 0.20, Count = 1
IndexCommit -> IndexCommit: Probability = 0.72, Count = 13
IndexCommit -> Long.toString: Probability = 0.11, Count = 2
IndexCommit -> otherCommit: Probability = 0.06, Count = 1
IndexCommit -> otherCommit.getDirectory: Probability = 0.06, Count = 1
IndexCommit -> findIndexCommit: Probability = 0.06, Count = 1
indexCommit, -> indexCommit,: Probability = 1.00, Count = 3
taxonomyCommit -> taxoCommit: Probability = 1.00, Count = 3
0:X -> RADIX: Probability = 1.00, Count = 1
1:X -> Long.toString: Probability = 1.00, Count = 1
taxonomyCommit.Generation -> taxoCommit.getGeneration: Probability = 1.00, Count = 2
indexCommit.Generation, -> RADIX: Probability = 1.00, Count = 1
needleString -> needleString: Probability = 1.00, Count = 2
field_3_strings.Size -> field_3_strings.size: Probability = 1.00, Count = 2
GetChildren -> getChildren: Probability = 1.00, Count = 23
filler -> filler: Probability = 0.79, Count = 15
filler -> child.toQueryString: Probability = 0.21, Count = 4
Parent -> getParent: Probability = 0.50, Count = 6
Parent -> GroupQueryNode: Probability = 0.25, Count = 3
Parent -> isRoot: Probability = 0.25, Count = 3
SetReceivePack -> setReceivePack: Probability = 1.00, Count = 1
receivePack -> receivePack: Probability = 1.00, Count = 3
this.receivePack -> this.receivePack: Probability = 1.00, Count = 1
DeleteImagePermissionsResponse -> DeleteImagePermissionsResult: Probability = 1.00, Count = 1
DeleteImagePermissions -> deleteImagePermissions: Probability = 1.00, Count = 1
DeleteImagePermissionsRequest -> DeleteImagePermissionsRequest: Probability = 1.00, Count = 1
Invoke<DeleteImagePermissionsResponse> -> executeDeleteImagePermissions: Probability = 1.00, Count = 1
Formula -> Formula: Probability = 1.00, Count = 7
formula.Tokens -> formula.getTokens: Probability = 1.00, Count = 1
SkipToNextByte -> skipToNextByte: Probability = 1.00, Count = 2
remainingBits -> remainingBits: Probability = 1.00, Count = 2
GetJourneyExecutionActivityMetricsResponse -> GetJourneyExecutionActivityMetricsResult: Probability = 1.00, Count = 1
GetJourneyExecutionActivityMetrics -> getJourneyExecutionActivityMetrics: Probability = 1.00, Count = 1
GetJourneyExecutionActivityMetricsRequest -> GetJourneyExecutionActivityMetricsRequest: Probability = 1.00, Count = 1
Invoke<GetJourneyExecutionActivityMetricsResponse> -> executeGetJourneyExecutionActivityMetrics: Probability = 1.00, Count = 1
DeregisterContainerInstanceResponse -> DeregisterContainerInstanceResult: Probability = 1.00, Count = 1
DeregisterContainerInstance -> deregisterContainerInstance: Probability = 1.00, Count = 1
DeregisterContainerInstanceRequest -> DeregisterContainerInstanceRequest: Probability = 1.00, Count = 1
Invoke<DeregisterContainerInstanceResponse> -> executeDeregisterContainerInstance: Probability = 1.00, Count = 1
DeleteEntityRecognizerResponse -> DeleteEntityRecognizerResult: Probability = 1.00, Count = 1
DeleteEntityRecognizer -> deleteEntityRecognizer: Probability = 1.00, Count = 1
DeleteEntityRecognizerRequest -> DeleteEntityRecognizerRequest: Probability = 1.00, Count = 1
Invoke<DeleteEntityRecognizerResponse> -> executeDeleteEntityRecognizer: Probability = 1.00, Count = 1
DescribeGameSessionsResponse -> DescribeGameSessionsResult: Probability = 1.00, Count = 1
DescribeGameSessions -> describeGameSessions: Probability = 1.00, Count = 1
DescribeGameSessionsRequest -> DescribeGameSessionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeGameSessionsResponse> -> executeDescribeGameSessions: Probability = 1.00, Count = 1
SegToken -> SegToken: Probability = 1.00, Count = 3
idArray, -> idArray,: Probability = 1.00, Count = 1
wordType, -> wordType,: Probability = 1.00, Count = 1
weight -> weight: Probability = 1.00, Count = 5
this.CharArray -> this.charArray: Probability = 1.00, Count = 1
idArray -> idArray: Probability = 1.00, Count = 1
this.WordType -> this.wordType: Probability = 1.00, Count = 1
wordType -> wordType: Probability = 1.00, Count = 1
this.Weight -> this.weight: Probability = 1.00, Count = 1
this.position -> this.position: Probability = 1.00, Count = 1
o.position -> o.position: Probability = 1.00, Count = 1
TagMeetingResponse -> TagMeetingResult: Probability = 1.00, Count = 1
TagMeeting -> tagMeeting: Probability = 1.00, Count = 1
TagMeetingRequest -> TagMeetingRequest: Probability = 1.00, Count = 1
Invoke<TagMeetingResponse> -> executeTagMeeting: Probability = 1.00, Count = 1
limit -> limit: Probability = 0.97, Count = 33
limit -> Integer: Probability = 0.03, Count = 1
newLimit -> newLimit: Probability = 1.00, Count = 6
limitImpl -> limitImpl: Probability = 1.00, Count = 1
MakeRecipDistanceValueSource -> makeRecipDistanceValueSource: Probability = 1.00, Count = 1
queryShape -> queryShape: Probability = 1.00, Count = 1
bbox -> bbox: Probability = 0.62, Count = 5
bbox -> makeWithin: Probability = 0.25, Count = 2
bbox -> Rectangle: Probability = 0.12, Count = 1
diagonalDist -> diagonalDist: Probability = 0.29, Count = 2
diagonalDist -> ctx.getDistCalc: Probability = 0.14, Count = 1
diagonalDist -> .distance: Probability = 0.14, Count = 1
diagonalDist -> ctx.makePoint: Probability = 0.14, Count = 1
diagonalDist -> bbox.getMinX: Probability = 0.14, Count = 1
diagonalDist -> bbox.getMinY: Probability = 0.14, Count = 1
distToEdge -> bbox.getMaxX: Probability = 0.25, Count = 1
distToEdge -> bbox.getMaxY: Probability = 0.25, Count = 1
distToEdge -> distToEdge: Probability = 0.50, Count = 2
0.1f -> 0.1f: Probability = 1.00, Count = 2
MakeDistanceValueSource -> DoubleValuesSource: Probability = 0.43, Count = 3
MakeDistanceValueSource -> makeDistanceValueSource: Probability = 0.57, Count = 4
1f, -> distance: Probability = 0.67, Count = 2
1f, -> ReciprocalDoubleValuesSource: Probability = 0.33, Count = 1
GetLoginProfileRequest -> GetLoginProfileRequest: Probability = 1.00, Count = 1
SerializeComplexPart -> serializeComplexPart: Probability = 1.00, Count = 2
DBCellRecord -> DBCellRecord: Probability = 1.00, Count = 4
rowOffset, -> rowOffset,: Probability = 1.00, Count = 1
short[]cellOffsets -> short[]: Probability = 0.50, Count = 1
short[]cellOffsets -> cellOffsets: Probability = 0.50, Count = 1
field_1_row_offset -> field_1_row_offset: Probability = 1.00, Count = 3
rowOffset -> rowOffset: Probability = 1.00, Count = 1
field_2_cell_offsets -> field_2_cell_offsets: Probability = 1.00, Count = 2
cellOffsets -> cellOffsets: Probability = 1.00, Count = 1
GetLocale -> getLocale: Probability = 1.00, Count = 1
SpanNotBuilder -> SpanNotBuilder: Probability = 1.00, Count = 1
ISpanQueryBuilder -> SpanQueryBuilder: Probability = 1.00, Count = 6
ExtRst -> ExtRst: Probability = 1.00, Count = 4
phRuns.Length -> result: Probability = 1.00, Count = 1
GetInstanceSnapshotsResponse -> GetInstanceSnapshotsResult: Probability = 1.00, Count = 1
GetInstanceSnapshots -> getInstanceSnapshots: Probability = 1.00, Count = 1
GetInstanceSnapshotsRequest -> GetInstanceSnapshotsRequest: Probability = 1.00, Count = 1
Invoke<GetInstanceSnapshotsResponse> -> executeGetInstanceSnapshots: Probability = 1.00, Count = 1
TranslateTextResponse -> TranslateTextResult: Probability = 1.00, Count = 1
TranslateText -> translateText: Probability = 1.00, Count = 1
TranslateTextRequest -> TranslateTextRequest: Probability = 1.00, Count = 2
Invoke<TranslateTextResponse> -> executeTranslateText: Probability = 1.00, Count = 1
field_1_first_row -> field_1_first_row: Probability = 1.00, Count = 4
field_4_last_col -> field_4_last_col: Probability = 1.00, Count = 2
Vector -> Vector: Probability = 1.00, Count = 2
capacity_1, -> capacity,: Probability = 1.00, Count = 1
capacityIncrement -> capacityIncrement: Probability = 1.00, Count = 2
this.capacityIncrement -> this.capacityIncrement: Probability = 1.00, Count = 1
DeleteLogGroupRequest -> DeleteLogGroupRequest: Probability = 1.00, Count = 1
RemoveManagedScalingPolicyResponse -> RemoveManagedScalingPolicyResult: Probability = 1.00, Count = 1
RemoveManagedScalingPolicy -> removeManagedScalingPolicy: Probability = 1.00, Count = 1
RemoveManagedScalingPolicyRequest -> RemoveManagedScalingPolicyRequest: Probability = 1.00, Count = 1
Invoke<RemoveManagedScalingPolicyResponse> -> executeRemoveManagedScalingPolicy: Probability = 1.00, Count = 1
GetDataRetrievalPolicyResponse -> GetDataRetrievalPolicyResult: Probability = 1.00, Count = 1
GetDataRetrievalPolicy -> getDataRetrievalPolicy: Probability = 1.00, Count = 1
GetDataRetrievalPolicyRequest -> GetDataRetrievalPolicyRequest: Probability = 1.00, Count = 1
Invoke<GetDataRetrievalPolicyResponse> -> executeGetDataRetrievalPolicy: Probability = 1.00, Count = 1
DescribeExportImageTasksResponse -> DescribeExportImageTasksResult: Probability = 1.00, Count = 1
DescribeExportImageTasks -> describeExportImageTasks: Probability = 1.00, Count = 1
DescribeExportImageTasksRequest -> DescribeExportImageTasksRequest: Probability = 1.00, Count = 1
Invoke<DescribeExportImageTasksResponse> -> executeDescribeExportImageTasks: Probability = 1.00, Count = 1
DefaultICUTokenizerConfig -> DefaultICUTokenizerConfig: Probability = 1.00, Count = 1
cjkAsWords, -> cjkAsWords,: Probability = 1.00, Count = 1
myanmarAsWords -> myanmarAsWords: Probability = 1.00, Count = 3
this.cjkAsWords -> this.cjkAsWords: Probability = 1.00, Count = 1
cjkAsWords -> cjkAsWords: Probability = 1.00, Count = 2
this.myanmarAsWords -> this.myanmarAsWords: Probability = 1.00, Count = 1
DisableAvailabilityZonesForLoadBalancerResponse -> DisableAvailabilityZonesForLoadBalancerResult: Probability = 1.00, Count = 1
DisableAvailabilityZonesForLoadBalancer -> disableAvailabilityZonesForLoadBalancer: Probability = 1.00, Count = 1
DisableAvailabilityZonesForLoadBalancerRequest -> DisableAvailabilityZonesForLoadBalancerRequest: Probability = 1.00, Count = 2
Invoke<DisableAvailabilityZonesForLoadBalancerResponse> -> executeDisableAvailabilityZonesForLoadBalancer: Probability = 1.00, Count = 1
SetIndexFieldName -> setIndexFieldName: Probability = 1.00, Count = 1
indexFieldName -> indexFieldName: Probability = 0.67, Count = 2
indexFieldName -> ft.indexFieldName: Probability = 0.33, Count = 1
ArrayUtil.ParseInt32 -> ArrayUtil.parseInt: Probability = 1.00, Count = 1
PayloadHelper.EncodeInt32 -> PayloadHelper.encodeInt: Probability = 1.00, Count = 1
HideObjRecord -> HideObjRecord: Probability = 1.00, Count = 1
"$" -> "$": Probability = 1.00, Count = 3
getSecondaryProgress -> getSecondaryProgress: Probability = 1.00, Count = 1
DeleteContactMethodResponse -> DeleteContactMethodResult: Probability = 1.00, Count = 1
DeleteContactMethod -> deleteContactMethod: Probability = 1.00, Count = 1
DeleteContactMethodRequest -> DeleteContactMethodRequest: Probability = 1.00, Count = 1
Invoke<DeleteContactMethodResponse> -> executeDeleteContactMethod: Probability = 1.00, Count = 1
java.util.List<E> -> @Override: Probability = 0.57, Count = 4
java.util.List<E> -> List<?>: Probability = 0.43, Count = 3
subList -> List<E>: Probability = 0.50, Count = 4
subList -> subList: Probability = 0.50, Count = 4
java.util.Collections.SynchronizedList<E> -> SynchronizedList<E>: Probability = 1.00, Count = 1
list.subList -> list.subList: Probability = 1.00, Count = 2
mapEntry.Equals -> m.equals: Probability = 0.50, Count = 1
mapEntry.Equals -> mapEntry.equals: Probability = 0.50, Count = 1
colon -> getSchemePrefix: Probability = 0.17, Count = 1
colon -> colon: Probability = 0.67, Count = 4
colon -> spec.indexOf: Probability = 0.17, Count = 1
spec -> spec: Probability = 1.00, Count = 2
CreateServiceResponse -> CreateServiceResult: Probability = 1.00, Count = 1
CreateService -> createService: Probability = 1.00, Count = 1
CreateServiceRequest -> CreateServiceRequest: Probability = 1.00, Count = 1
Invoke<CreateServiceResponse> -> executeCreateService: Probability = 1.00, Count = 1
_numberOfRegions -> _numberOfRegions: Probability = 1.00, Count = 5
_regions[_startIndex -> _regions[_startIndex: Probability = 1.00, Count = 3
i].Serialize -> i].serialize: Probability = 1.00, Count = 1
LabelSSTRecord -> LabelSSTRecord: Probability = 1.00, Count = 1
field_4_sst_index -> field_4_sst_index: Probability = 1.00, Count = 1
id.Copy -> id.copy: Probability = 1.00, Count = 3
CFRecordsAggregate -> CFRecordsAggregate: Probability = 0.62, Count = 10
CFRecordsAggregate -> subAgg: Probability = 0.12, Count = 2
CFRecordsAggregate -> _cfHeaders: Probability = 0.06, Count = 1
CFRecordsAggregate -> subAgg.visitContainedRecords: Probability = 0.06, Count = 1
CFRecordsAggregate -> _cfHeaders.get: Probability = 0.12, Count = 2
cfAggregate -> cfAggregate: Probability = 0.40, Count = 2
cfAggregate -> cfAggregate.getHeader: Probability = 0.20, Count = 1
cfAggregate -> .setID: Probability = 0.20, Count = 1
cfAggregate -> _cfHeaders.add: Probability = 0.20, Count = 1
_cfHeaders.Count -> _cfHeaders.size: Probability = 1.00, Count = 3
TermVectorsPostingsArray -> TermVectorsPostingsArray: Probability = 1.00, Count = 1
int[size] -> int[size]: Probability = 0.37, Count = 7
int[size] -> lastOffsets: Probability = 0.11, Count = 2
int[size] -> lastPositions: Probability = 0.11, Count = 2
int[size] -> writeOffsets: Probability = 0.11, Count = 2
int[size] -> writeFreqs: Probability = 0.05, Count = 1
int[size] -> termFreqs: Probability = 0.05, Count = 1
int[size] -> lastDocIDs: Probability = 0.05, Count = 1
int[size] -> lastDocCodes: Probability = 0.05, Count = 1
int[size] -> writeProx: Probability = 0.05, Count = 1
int[size] -> !writeOffsets: Probability = 0.05, Count = 1
FieldsQuery -> FieldsQuery: Probability = 1.00, Count = 7
fieldNames, -> fieldNames,: Probability = 1.00, Count = 1
fieldOp -> fieldOp: Probability = 1.00, Count = 5
this.fieldNames -> this.fieldNames: Probability = 1.00, Count = 1
fieldNames -> fieldNames: Probability = 0.56, Count = 9
fieldNames -> ArrayList<String>: Probability = 0.25, Count = 4
fieldNames -> OptionalFields: Probability = 0.12, Count = 2
fieldNames -> getFieldsQuery: Probability = 0.06, Count = 1
this.fieldOp -> this.fieldOp: Probability = 1.00, Count = 2
GreekLowerCaseFilter -> GreekLowerCaseFilter: Probability = 1.00, Count = 1
ECSMetadataServiceCredentialsFetcher -> ECSMetadataServiceCredentialsFetcher: Probability = 1.00, Count = 1
connectionTimeoutInMilliseconds -> this.connectionTimeoutInMilliseconds: Probability = 1.00, Count = 1
DEFAULT_TIMEOUT_IN_MILLISECONDS -> DEFAULT_TIMEOUT_IN_MILLISECONDS: Probability = 1.00, Count = 1
IDecoder -> Decoder: Probability = 1.00, Count = 1
GetDecoder -> getDecoder: Probability = 1.00, Count = 1
nameFinder.clearAdaptiveData -> nameFinder.clearAdaptiveData: Probability = 1.00, Count = 1
NextKeyString -> nextKeyString: Probability = 1.00, Count = 1
UpdateNodeResponse -> UpdateNodeResult: Probability = 1.00, Count = 1
UpdateNode -> updateNode: Probability = 1.00, Count = 1
UpdateNodeRequest -> UpdateNodeRequest: Probability = 1.00, Count = 1
Invoke<UpdateNodeResponse> -> executeUpdateNode: Probability = 1.00, Count = 1
GetJobOutputRequest -> GetJobOutputRequest: Probability = 1.00, Count = 3
jobId, -> jobId,: Probability = 1.00, Count = 2
_jobId -> setJobId: Probability = 1.00, Count = 3
jobId -> jobId: Probability = 1.00, Count = 4
_range -> setRange: Probability = 1.00, Count = 2
Regex.Replace -> buf.replaceAll: Probability = 1.00, Count = 1
"<[^>]*>", -> "<[^>]*>",: Probability = 1.00, Count = 1
DescribeLaunchTemplatesResponse -> DescribeLaunchTemplatesResult: Probability = 1.00, Count = 1
DescribeLaunchTemplates -> describeLaunchTemplates: Probability = 1.00, Count = 1
DescribeLaunchTemplatesRequest -> DescribeLaunchTemplatesRequest: Probability = 1.00, Count = 1
Invoke<DescribeLaunchTemplatesResponse> -> executeDescribeLaunchTemplates: Probability = 1.00, Count = 1
AssureMatchVersion -> args,: Probability = 1.00, Count = 6
OriginalArgs -> tokenizerFactory: Probability = 1.00, Count = 4
RemovePrintArea -> removePrintArea: Probability = 1.00, Count = 1
Workbook.RemoveBuiltinRecord -> getWorkbook: Probability = 1.00, Count = 1
NameRecord.BUILTIN_PRINT_AREA, -> .removeBuiltinRecord: Probability = 0.11, Count = 1
NameRecord.BUILTIN_PRINT_AREA, -> NameRecord.BUILTIN_PRINT_AREA,: Probability = 0.44, Count = 4
NameRecord.BUILTIN_PRINT_AREA, -> sheetIndex+1: Probability = 0.44, Count = 4
ModifyTrafficMirrorFilterNetworkServicesResponse -> ModifyTrafficMirrorFilterNetworkServicesResult: Probability = 1.00, Count = 1
ModifyTrafficMirrorFilterNetworkServices -> modifyTrafficMirrorFilterNetworkServices: Probability = 1.00, Count = 1
ModifyTrafficMirrorFilterNetworkServicesRequest -> ModifyTrafficMirrorFilterNetworkServicesRequest: Probability = 1.00, Count = 1
Invoke<ModifyTrafficMirrorFilterNetworkServicesResponse> -> executeModifyTrafficMirrorFilterNetworkServices: Probability = 1.00, Count = 1
maxChange -> maxChange: Probability = 1.00, Count = 2
UpdateDomainEntryResponse -> UpdateDomainEntryResult: Probability = 1.00, Count = 1
UpdateDomainEntry -> updateDomainEntry: Probability = 1.00, Count = 1
UpdateDomainEntryRequest -> UpdateDomainEntryRequest: Probability = 1.00, Count = 1
Invoke<UpdateDomainEntryResponse> -> executeUpdateDomainEntry: Probability = 1.00, Count = 1
SegmentCommitInfo -> SegmentCommitInfo: Probability = 0.43, Count = 6
SegmentCommitInfo -> info,: Probability = 0.07, Count = 1
SegmentCommitInfo -> delCount,: Probability = 0.07, Count = 1
SegmentCommitInfo -> softDelCount,: Probability = 0.07, Count = 1
SegmentCommitInfo -> delGen,: Probability = 0.07, Count = 1
SegmentCommitInfo -> fieldInfosGen,: Probability = 0.07, Count = 1
SegmentCommitInfo -> docValuesGen: Probability = 0.07, Count = 1
SegmentCommitInfo -> other.nextWriteDelGen: Probability = 0.07, Count = 1
SegmentCommitInfo -> other.nextWriteFieldInfosGen: Probability = 0.07, Count = 1
fieldInfosGen -> nextWriteDelGen: Probability = 1.00, Count = 1
other.nextWriteDelGen -> nextWriteFieldInfosGen: Probability = 1.00, Count = 1
nextWriteFieldInfosGen -> Entry<Integer,Set<String>>: Probability = 1.00, Count = 1
ISet<string>> -> other.dvUpdatesFiles.put: Probability = 1.00, Count = 1
JCG.HashSet<string> -> HashSet<>: Probability = 1.00, Count = 7
e.Value -> other.fieldInfosFiles.addAll: Probability = 0.50, Count = 1
e.Value -> fieldInfosFiles: Probability = 0.50, Count = 1
PutAttribute -> putAttribute: Probability = 1.00, Count = 1
attributes[key] -> Collections.unmodifiableMap: Probability = 0.50, Count = 1
attributes[key] -> newMap: Probability = 0.50, Count = 1
oneChar -> oneChar: Probability = 1.00, Count = 6
"[WritePROTECT]\n" -> "[WRITEPROTECT]\n": Probability = 1.00, Count = 1
"[/WritePROTECT]\n" -> "[/WRITEPROTECT]\n": Probability = 1.00, Count = 1
IEvaluationSheet -> EvaluationSheet: Probability = 1.00, Count = 2
GetSheet -> getSheet: Probability = 1.00, Count = 1
HSSFEvaluationSheet -> HSSFEvaluationSheet: Probability = 1.00, Count = 3
_uBook.GetSheetAt -> _uBook.getSheetAt: Probability = 1.00, Count = 1
RemoveSlideCount -> removeSlideCount: Probability = 1.00, Count = 1
PropertyIDMap.PID_SLIDECOUNT -> PropertyIDMap.PID_SLIDECOUNT: Probability = 1.00, Count = 1
DescribeFlowDefinitionResponse -> DescribeFlowDefinitionResult: Probability = 1.00, Count = 1
DescribeFlowDefinition -> describeFlowDefinition: Probability = 1.00, Count = 1
DescribeFlowDefinitionRequest -> DescribeFlowDefinitionRequest: Probability = 1.00, Count = 1
Invoke<DescribeFlowDefinitionResponse> -> executeDescribeFlowDefinition: Probability = 1.00, Count = 1
intSet.Put -> intSet.put: Probability = 1.00, Count = 1
maxInt -> maxInt: Probability = 1.00, Count = 2
stopWordFiles -> stopWordFiles: Probability = 1.00, Count = 3
"words" -> "words": Probability = 1.00, Count = 3
AddState -> addState: Probability = 1.00, Count = 1
state.atn -> state.atn: Probability = 1.00, Count = 1
state.stateNumber -> state.stateNumber: Probability = 1.00, Count = 1
states.Count -> states.size: Probability = 1.00, Count = 2
states.Add -> states.add: Probability = 1.00, Count = 1
BatchUrl -> batchUrl: Probability = 1.00, Count = 1
jj_expentry[0] -> jj_expentry: Probability = 1.00, Count = 7
java.util.Iterator<K> -> @Override: Probability = 0.38, Count = 3
java.util.Iterator<K> -> Iterator<K>: Probability = 0.62, Count = 5
V>.KeyIterator -> KeyIterator: Probability = 0.50, Count = 1
V>.KeyIterator -> newKeyIterator: Probability = 0.50, Count = 1
DoubleList -> DoubleList: Probability = 1.00, Count = 1
_array -> _array: Probability = 1.00, Count = 1
double[8] -> double[8]: Probability = 1.00, Count = 1
_Count -> _count: Probability = 1.00, Count = 5
NGit.Api.AddNoteCommand -> AddNoteCommand: Probability = 1.00, Count = 3
SetMessage -> setMessage: Probability = 1.00, Count = 3
this.message -> this.message: Probability = 1.00, Count = 3
SerializationHandleMap -> SerializationHandleMap: Probability = 1.00, Count = 1
this.size -> this.size: Probability = 1.00, Count = 4
this.threshold -> this.threshold: Probability = 1.00, Count = 2
21 -> 21: Probability = 0.86, Count = 6
21 -> =: Probability = 0.14, Count = 1
arraySize -> arraySize: Probability = 1.00, Count = 5
10000 -> 10000: Probability = 1.00, Count = 1
LOAD_FACTOR -> LOAD_FACTOR: Probability = 1.00, Count = 2
resizeArrays -> resizeArrays: Probability = 1.00, Count = 1
this.blockSize -> this.blockSize: Probability = 1.00, Count = 7
RamUsageEstimator.NUM_BYTES_ARRAY_HEADER -> RamUsageEstimator.NUM_BYTES_ARRAY_HEADER: Probability = 1.00, Count = 2
IncreaseReplicationFactorResponse -> IncreaseReplicationFactorResult: Probability = 1.00, Count = 1
IncreaseReplicationFactor -> increaseReplicationFactor: Probability = 1.00, Count = 1
IncreaseReplicationFactorRequest -> IncreaseReplicationFactorRequest: Probability = 1.00, Count = 1
Invoke<IncreaseReplicationFactorResponse> -> executeIncreaseReplicationFactor: Probability = 1.00, Count = 1
UpdateRuntimeConfigurationResponse -> UpdateRuntimeConfigurationResult: Probability = 1.00, Count = 1
UpdateRuntimeConfiguration -> updateRuntimeConfiguration: Probability = 1.00, Count = 1
UpdateRuntimeConfigurationRequest -> UpdateRuntimeConfigurationRequest: Probability = 1.00, Count = 1
Invoke<UpdateRuntimeConfigurationResponse> -> executeUpdateRuntimeConfiguration: Probability = 1.00, Count = 1
GetChar -> getChar: Probability = 0.67, Count = 4
GetChar -> "delimiter",: Probability = 0.17, Count = 1
GetChar -> PathHierarchyTokenizer.DEFAULT_DELIMITER: Probability = 0.17, Count = 1
NotifyListeners -> notifyListeners: Probability = 1.00, Count = 1
LexerNoViableAltException -> LexerNoViableAltException: Probability = 1.00, Count = 3
_input.GetText -> _input.getText: Probability = 1.00, Count = 1
_tokenStartCharIndex, -> _tokenStartCharIndex,: Probability = 1.00, Count = 2
recognition -> recognition: Probability = 1.00, Count = 2
at: -> at:: Probability = 1.00, Count = 1
IAntlrErrorListener<int> -> ANTLRErrorListener: Probability = 1.00, Count = 1
ErrorListenerDispatch -> getErrorListenerDispatch: Probability = 1.00, Count = 1
ErrorOutput, -> listener.syntaxError: Probability = 1.00, Count = 1
_tokenStartColumn, -> _tokenStartLine,: Probability = 0.50, Count = 1
_tokenStartColumn, -> _tokenStartCharPositionInLine,: Probability = 0.50, Count = 1
msg, -> msg,: Probability = 1.00, Count = 4
GetExportJobResponse -> GetExportJobResult: Probability = 1.00, Count = 1
GetExportJob -> getExportJob: Probability = 1.00, Count = 1
GetExportJobRequest -> GetExportJobRequest: Probability = 1.00, Count = 1
Invoke<GetExportJobResponse> -> executeGetExportJob: Probability = 1.00, Count = 1
AddRoleToDBInstanceResponse -> AddRoleToDBInstanceResult: Probability = 1.00, Count = 1
AddRoleToDBInstance -> addRoleToDBInstance: Probability = 1.00, Count = 1
AddRoleToDBInstanceRequest -> AddRoleToDBInstanceRequest: Probability = 1.00, Count = 1
Invoke<AddRoleToDBInstanceResponse> -> executeAddRoleToDBInstance: Probability = 1.00, Count = 1
DeregisterInstancesFromLoadBalancerResponse -> DeregisterInstancesFromLoadBalancerResult: Probability = 1.00, Count = 1
DeregisterInstancesFromLoadBalancer -> deregisterInstancesFromLoadBalancer: Probability = 1.00, Count = 1
DeregisterInstancesFromLoadBalancerRequest -> DeregisterInstancesFromLoadBalancerRequest: Probability = 1.00, Count = 2
Invoke<DeregisterInstancesFromLoadBalancerResponse> -> executeDeregisterInstancesFromLoadBalancer: Probability = 1.00, Count = 1
DownloadDBLogFilePortionResponse -> DownloadDBLogFilePortionResult: Probability = 1.00, Count = 1
DownloadDBLogFilePortion -> downloadDBLogFilePortion: Probability = 1.00, Count = 1
DownloadDBLogFilePortionRequest -> DownloadDBLogFilePortionRequest: Probability = 1.00, Count = 1
Invoke<DownloadDBLogFilePortionResponse> -> executeDownloadDBLogFilePortion: Probability = 1.00, Count = 1
GetStaticIpResponse -> GetStaticIpResult: Probability = 1.00, Count = 1
GetStaticIp -> getStaticIp: Probability = 1.00, Count = 1
GetStaticIpRequest -> GetStaticIpRequest: Probability = 1.00, Count = 1
Invoke<GetStaticIpResponse> -> executeGetStaticIp: Probability = 1.00, Count = 1
CreateUsagePlanResponse -> CreateUsagePlanResult: Probability = 1.00, Count = 1
CreateUsagePlan -> createUsagePlan: Probability = 1.00, Count = 1
CreateUsagePlanRequest -> CreateUsagePlanRequest: Probability = 1.00, Count = 1
Invoke<CreateUsagePlanResponse> -> executeCreateUsagePlan: Probability = 1.00, Count = 1
followFileRenames -> followFileRenames: Probability = 1.00, Count = 2
SearchTransitGatewayMulticastGroupsResponse -> SearchTransitGatewayMulticastGroupsResult: Probability = 1.00, Count = 1
SearchTransitGatewayMulticastGroups -> searchTransitGatewayMulticastGroups: Probability = 1.00, Count = 1
SearchTransitGatewayMulticastGroupsRequest -> SearchTransitGatewayMulticastGroupsRequest: Probability = 1.00, Count = 1
Invoke<SearchTransitGatewayMulticastGroupsResponse> -> executeSearchTransitGatewayMulticastGroups: Probability = 1.00, Count = 1
LinearOffsetRange -> LinearOffsetRange: Probability = 1.00, Count = 4
NormaliseAndTranslate -> normaliseAndTranslate: Probability = 1.00, Count = 1
translationAmount -> translationAmount: Probability = 0.80, Count = 4
translationAmount -> _offset,: Probability = 0.20, Count = 1
_Length -> _length: Probability = 1.00, Count = 4
_offset -> _offset: Probability = 1.00, Count = 7
-_Length -> -_length: Probability = 1.00, Count = 1
IsInvoke -> isInvoke: Probability = 1.00, Count = 1
invokeMap[characterCategoryMap[c]] -> invokeMap[characterCategoryMap[c]]: Probability = 1.00, Count = 1
GetSize -> getSize: Probability = 1.00, Count = 6
Mark -> mark: Probability = 0.83, Count = 5
Mark -> ignoredReadlimit: Probability = 0.17, Count = 1
SearchPhotosRequest -> SearchPhotosRequest: Probability = 1.00, Count = 1
"SearchPhotos", -> "SearchPhotos",: Probability = 1.00, Count = 1
CopyFrom -> copyFrom: Probability = 1.00, Count = 3
OrdTermState -> OrdTermState: Probability = 1.00, Count = 2
"can -> "can: Probability = 1.00, Count = 2
other.GetType -> other.getClass: Probability = 1.00, Count = 4
this.Ord -> this.ord: Probability = 1.00, Count = 1
.Ord -> .ord: Probability = 1.00, Count = 2
AnalyzeDocumentResponse -> AnalyzeDocumentResult: Probability = 1.00, Count = 1
AnalyzeDocument -> analyzeDocument: Probability = 1.00, Count = 1
AnalyzeDocumentRequest -> AnalyzeDocumentRequest: Probability = 1.00, Count = 1
Invoke<AnalyzeDocumentResponse> -> executeAnalyzeDocument: Probability = 1.00, Count = 1
CalcExtSSTRecordSize -> calcExtSSTRecordSize: Probability = 1.00, Count = 1
ExtSSTRecord.GetRecordSizeForStrings -> ExtSSTRecord.getRecordSizeForStrings: Probability = 1.00, Count = 1
FormulaShifter -> FormulaShifter: Probability = 1.00, Count = 7
CreateForSheetShift -> createForSheetShift: Probability = 1.00, Count = 1
srcSheetIndex, -> srcSheetIndex,: Probability = 1.00, Count = 2
dstSheetIndex -> dstSheetIndex: Probability = 1.00, Count = 2
SetRule -> setRule: Probability = 1.00, Count = 3
idx, -> idx,: Probability = 1.00, Count = 6
cfAggregate.SetRule -> idx,: Probability = 0.50, Count = 1
cfAggregate.SetRule -> cfAggregate.setRule: Probability = 0.50, Count = 1
SelectionRecord -> SelectionRecord: Probability = 1.00, Count = 2
field_1_pane -> field_1_pane: Probability = 1.00, Count = 2
field_2_row_active_cell -> field_2_row_active_cell: Probability = 1.00, Count = 2
field_3_col_active_cell -> field_3_col_active_cell: Probability = 1.00, Count = 2
field_4_ref_active_cell -> field_4_active_cell_ref_index: Probability = 1.00, Count = 2
field_6_refs -> field_6_refs: Probability = 1.00, Count = 2
CellRangeAddress8Bit -> CellRangeAddress8Bit: Probability = 0.75, Count = 6
CellRangeAddress8Bit -> getRange: Probability = 0.12, Count = 1
CellRangeAddress8Bit -> _range: Probability = 0.12, Count = 1
SetNeedNewObjectIds -> setNeedNewObjectIds: Probability = 1.00, Count = 1
newObjectIds -> newObjectIds: Probability = 0.33, Count = 1
newObjectIds -> ObjectIdSubclassMap<>: Probability = 0.33, Count = 1
newObjectIds -> elsenewObjectIds: Probability = 0.33, Count = 1
GetResolverRulePolicyResponse -> GetResolverRulePolicyResult: Probability = 1.00, Count = 1
GetResolverRulePolicy -> getResolverRulePolicy: Probability = 1.00, Count = 1
GetResolverRulePolicyRequest -> GetResolverRulePolicyRequest: Probability = 1.00, Count = 1
Invoke<GetResolverRulePolicyResponse> -> executeGetResolverRulePolicy: Probability = 1.00, Count = 1
DescribeInterconnectLoaResponse -> DescribeInterconnectLoaResult: Probability = 1.00, Count = 1
DescribeInterconnectLoa -> describeInterconnectLoa: Probability = 1.00, Count = 1
DescribeInterconnectLoaRequest -> DescribeInterconnectLoaRequest: Probability = 1.00, Count = 1
Invoke<DescribeInterconnectLoaResponse> -> executeDescribeInterconnectLoa: Probability = 1.00, Count = 1
java.nio.ByteOrder -> ByteOrder: Probability = 1.00, Count = 5
nativeOrder -> nativeOrder: Probability = 1.00, Count = 1
NATIVE_ORDER -> NATIVE_ORDER: Probability = 1.00, Count = 1
CalcModeRecord -> CalcModeRecord: Probability = 1.00, Count = 1
field_1_calcmode -> field_1_calcmode: Probability = 1.00, Count = 3
AddParentId -> addParentId: Probability = 1.00, Count = 1
additionalParent -> additionalParent: Probability = 1.00, Count = 2
parentIds.Length -> parentIds.length: Probability = 1.00, Count = 2
newParents -> newParents: Probability = 1.00, Count = 3
ObjectId[parentIds.Length -> ObjectId[parentIds.length: Probability = 1.00, Count = 1
parentIds, -> parentIds,: Probability = 1.00, Count = 1
newParents[parentIds.Length] -> newParents[parentIds.length]: Probability = 1.00, Count = 1
additionalParent.Copy -> additionalParent.copy: Probability = 1.00, Count = 1
CreateAccessPointResponse -> CreateAccessPointResult: Probability = 1.00, Count = 1
CreateAccessPoint -> createAccessPoint: Probability = 1.00, Count = 1
CreateAccessPointRequest -> CreateAccessPointRequest: Probability = 1.00, Count = 1
Invoke<CreateAccessPointResponse> -> executeCreateAccessPoint: Probability = 1.00, Count = 1
DeleteLoadBalancerListenersResponse -> DeleteLoadBalancerListenersResult: Probability = 1.00, Count = 1
DeleteLoadBalancerListeners -> deleteLoadBalancerListeners: Probability = 1.00, Count = 1
DeleteLoadBalancerListenersRequest -> DeleteLoadBalancerListenersRequest: Probability = 1.00, Count = 1
Invoke<DeleteLoadBalancerListenersResponse> -> executeDeleteLoadBalancerListeners: Probability = 1.00, Count = 1
SetDerefTags -> setDerefTags: Probability = 1.00, Count = 1
deref -> deref: Probability = 1.00, Count = 2
derefTags -> derefTags: Probability = 1.00, Count = 1
DeactivateMFADeviceRequest -> DeactivateMFADeviceRequest: Probability = 1.00, Count = 1
serialNumber -> serialNumber: Probability = 1.00, Count = 3
_serialNumber -> setSerialNumber: Probability = 1.00, Count = 2
markSupported -> markSupported: Probability = 1.00, Count = 5
@in.markSupported -> in.markSupported: Probability = 1.00, Count = 2
CreateNewFile -> createNewFile: Probability = 1.00, Count = 1
!f.CreateNewFile -> !f.createNewFile: Probability = 1.00, Count = 1
.createNewFileFailed, -> .createNewFileFailed,: Probability = 1.00, Count = 1
GetFieldAsString -> getFieldAsString: Probability = 1.00, Count = 3
this.field.ToString -> this.field.toString: Probability = 1.00, Count = 1
dictionaries -> affix: Probability = 0.43, Count = 3
dictionaries -> dictionaries: Probability = 0.57, Count = 4
Dictionary -> Dictionary: Probability = 1.00, Count = 2
DetectDocumentTextResponse -> DetectDocumentTextResult: Probability = 1.00, Count = 1
DetectDocumentText -> detectDocumentText: Probability = 1.00, Count = 1
DetectDocumentTextRequest -> DetectDocumentTextRequest: Probability = 1.00, Count = 1
Invoke<DetectDocumentTextResponse> -> executeDetectDocumentText: Probability = 1.00, Count = 1
DescribeCertificatesResponse -> DescribeCertificatesResult: Probability = 1.00, Count = 1
DescribeCertificates -> describeCertificates: Probability = 1.00, Count = 1
DescribeCertificatesRequest -> DescribeCertificatesRequest: Probability = 1.00, Count = 1
Invoke<DescribeCertificatesResponse> -> executeDescribeCertificates: Probability = 1.00, Count = 1
GetFormatCount -> getFormatCount: Probability = 1.00, Count = 1
m_formats.Count -> _formats.length: Probability = 1.00, Count = 4
GetOutcomesResponse -> GetOutcomesResult: Probability = 1.00, Count = 1
GetOutcomes -> getOutcomes: Probability = 1.00, Count = 1
GetOutcomesRequest -> GetOutcomesRequest: Probability = 1.00, Count = 1
Invoke<GetOutcomesResponse> -> executeGetOutcomes: Probability = 1.00, Count = 1
ICollection<TransportProtocol.URIishField> -> Set<URIishField>: Probability = 1.00, Count = 2
GetOptionalFields -> getOptionalFields: Probability = 1.00, Count = 1
Sharpen.Collections.EmptySet<TransportProtocol.URIishField> -> Collections.emptySet: Probability = 1.00, Count = 1
queryBoost -> boost: Probability = 0.67, Count = 2
queryBoost -> this.boost: Probability = 0.33, Count = 1
UpdateSecurityGroupRuleDescriptionsIngressResponse -> UpdateSecurityGroupRuleDescriptionsIngressResult: Probability = 1.00, Count = 1
UpdateSecurityGroupRuleDescriptionsIngress -> updateSecurityGroupRuleDescriptionsIngress: Probability = 1.00, Count = 1
UpdateSecurityGroupRuleDescriptionsIngressRequest -> UpdateSecurityGroupRuleDescriptionsIngressRequest: Probability = 1.00, Count = 1
Invoke<UpdateSecurityGroupRuleDescriptionsIngressResponse> -> executeUpdateSecurityGroupRuleDescriptionsIngress: Probability = 1.00, Count = 1
GetAdvertisedRefs -> getAdvertisedRefs: Probability = 1.00, Count = 1
Sharpen.Collections.UnmodifiableCollection -> Collections.unmodifiableCollection: Probability = 0.60, Count = 3
Sharpen.Collections.UnmodifiableCollection -> remoteUpdates.values: Probability = 0.20, Count = 1
Sharpen.Collections.UnmodifiableCollection -> updates.values: Probability = 0.20, Count = 1
advertisedRefs.Values -> advertisedRefs.values: Probability = 1.00, Count = 2
QueryParser -> QueryParser: Probability = 1.00, Count = 5
QueryParserTokenManager -> QueryParserTokenManager: Probability = 1.00, Count = 7
SetText -> setText: Probability = 0.67, Count = 4
SetText -> array[],: Probability = 0.33, Count = 2
CharacterIterator -> CharacterIterator: Probability = 1.00, Count = 2
newText -> newText: Probability = 1.00, Count = 4
newText.BeginIndex -> newText.getBeginIndex: Probability = 1.00, Count = 1
newText.EndIndex -> newText.getEndIndex: Probability = 1.00, Count = 1
current -> current: Probability = 0.95, Count = 19
current -> fstEnum.next: Probability = 0.05, Count = 1
PutOutcomeResponse -> PutOutcomeResult: Probability = 1.00, Count = 1
PutOutcome -> putOutcome: Probability = 1.00, Count = 1
PutOutcomeRequest -> PutOutcomeRequest: Probability = 1.00, Count = 1
Invoke<PutOutcomeResponse> -> executePutOutcome: Probability = 1.00, Count = 1
UnescapedCharSequence -> UnescapedCharSequence: Probability = 1.00, Count = 5
char[text.Length] -> char[text.length: Probability = 1.00, Count = 1
this.wasEscaped -> this.wasEscaped: Probability = 1.00, Count = 2
bool[text.Length] -> boolean[text.length: Probability = 1.00, Count = 1
this.chars[i] -> this.chars[i]: Probability = 1.00, Count = 6
this.wasEscaped[i] -> this.wasEscaped[i]: Probability = 1.00, Count = 3
libcore.io.SizeOf.DOUBLE -> SizeOf.DOUBLE: Probability = 1.00, Count = 10
byteBuffer -> byteBuffer: Probability = 1.00, Count = 27
java.nio.ReadWriteDirectByteBuffer -> ReadWriteDirectByteBuffer: Probability = 1.00, Count = 8
.put -> .put: Probability = 1.00, Count = 8
this._position -> this.position: Probability = 1.00, Count = 9
System.NotSupportedException -> UnsupportedOperationException: Probability = 1.00, Count = 19
CTFormat -> CTFormat: Probability = 0.43, Count = 3
CTFormat -> ctf: Probability = 0.29, Count = 2
CTFormat -> _formats[i]: Probability = 0.29, Count = 2
ctf.Offset -> ctf.getOffset: Probability = 1.00, Count = 4
StartDominantLanguageDetectionJobResponse -> StartDominantLanguageDetectionJobResult: Probability = 1.00, Count = 1
StartDominantLanguageDetectionJob -> startDominantLanguageDetectionJob: Probability = 1.00, Count = 1
StartDominantLanguageDetectionJobRequest -> StartDominantLanguageDetectionJobRequest: Probability = 1.00, Count = 1
Invoke<StartDominantLanguageDetectionJobResponse> -> executeStartDominantLanguageDetectionJob: Probability = 1.00, Count = 1
HasNonConflictingAltSet -> hasNonConflictingAltSet: Probability = 1.00, Count = 1
CreateTextLengthConstraint -> createTextLengthConstraint: Probability = 1.00, Count = 1
ValidationType.TEXT_LENGTH, -> ValidationType.TEXT_LENGTH,: Probability = 1.00, Count = 1
WriteShort -> writeShort: Probability = 1.00, Count = 6
libcore.io.SizeOf.SHORT -> SizeOf.SHORT: Probability = 1.00, Count = 12
libcore.io.Memory.peekShort -> Memory.peekShort: Probability = 1.00, Count = 4
FuncPtg -> FuncPtg: Probability = 1.00, Count = 3
functionIndex -> functionIndex: Probability = 1.00, Count = 6
FunctionMetadata -> FunctionMetadata: Probability = 1.00, Count = 5
fm -> fm: Probability = 1.00, Count = 3
FunctionMetadataRegistry.GetFunctionByIndex -> FunctionMetadataRegistry.getFunctionByIndex: Probability = 1.00, Count = 3
built-in -> built-in: Probability = 1.00, Count = 1
function -> function: Probability = 1.00, Count = 5
functionIndex, -> functionIndex,: Probability = 1.00, Count = 1
?" -> ?": Probability = 1.00, Count = 2
ListDashboardsResponse -> ListDashboardsResult: Probability = 1.00, Count = 1
ListDashboards -> listDashboards: Probability = 1.00, Count = 1
ListDashboardsRequest -> ListDashboardsRequest: Probability = 1.00, Count = 1
Invoke<ListDashboardsResponse> -> executeListDashboards: Probability = 1.00, Count = 1
DeleteVoiceTemplateResponse -> DeleteVoiceTemplateResult: Probability = 1.00, Count = 1
DeleteVoiceTemplate -> deleteVoiceTemplate: Probability = 1.00, Count = 1
DeleteVoiceTemplateRequest -> DeleteVoiceTemplateRequest: Probability = 1.00, Count = 1
Invoke<DeleteVoiceTemplateResponse> -> executeDeleteVoiceTemplate: Probability = 1.00, Count = 1
AddListenerForAllRecords -> addListenerForAllRecords: Probability = 1.00, Count = 1
RecordFactory.GetAllKnownRecordSIDs -> rectypes: Probability = 0.50, Count = 1
RecordFactory.GetAllKnownRecordSIDs -> RecordFactory.getAllKnownRecordSIDs: Probability = 0.50, Count = 1
rectypes[k] -> rectype: Probability = 1.00, Count = 2
rectypes.Length -> rectypes: Probability = 1.00, Count = 1
DescribeLocalGatewayRouteTablesResponse -> DescribeLocalGatewayRouteTablesResult: Probability = 1.00, Count = 1
DescribeLocalGatewayRouteTables -> describeLocalGatewayRouteTables: Probability = 1.00, Count = 1
DescribeLocalGatewayRouteTablesRequest -> DescribeLocalGatewayRouteTablesRequest: Probability = 1.00, Count = 1
Invoke<DescribeLocalGatewayRouteTablesResponse> -> executeDescribeLocalGatewayRouteTables: Probability = 1.00, Count = 1
EnableDomainAutoRenewResponse -> EnableDomainAutoRenewResult: Probability = 1.00, Count = 1
EnableDomainAutoRenew -> enableDomainAutoRenew: Probability = 1.00, Count = 1
EnableDomainAutoRenewRequest -> EnableDomainAutoRenewRequest: Probability = 1.00, Count = 1
Invoke<EnableDomainAutoRenewResponse> -> executeEnableDomainAutoRenew: Probability = 1.00, Count = 1
result.Append -> result.append: Probability = 0.86, Count = 18
result.Append -> type.toString: Probability = 0.05, Count = 1
result.Append -> '<': Probability = 0.05, Count = 1
result.Append -> '>': Probability = 0.05, Count = 1
GetFieldLevelEncryptionProfileConfigResponse -> GetFieldLevelEncryptionProfileConfigResult: Probability = 1.00, Count = 1
GetFieldLevelEncryptionProfileConfig -> getFieldLevelEncryptionProfileConfig: Probability = 1.00, Count = 1
GetFieldLevelEncryptionProfileConfigRequest -> GetFieldLevelEncryptionProfileConfigRequest: Probability = 1.00, Count = 1
Invoke<GetFieldLevelEncryptionProfileConfigResponse> -> executeGetFieldLevelEncryptionProfileConfig: Probability = 1.00, Count = 1
ListInstancesResponse -> ListInstancesResult: Probability = 1.00, Count = 1
ListInstances -> listInstances: Probability = 1.00, Count = 1
ListInstancesRequest -> ListInstancesRequest: Probability = 1.00, Count = 1
Invoke<ListInstancesResponse> -> executeListInstances: Probability = 1.00, Count = 1
Read -> read: Probability = 1.00, Count = 14
cnt -> cnt: Probability = 0.83, Count = 20
cnt -> cache.getEntryCount: Probability = 0.04, Count = 1
cnt -> builder.keep: Probability = 0.04, Count = 1
cnt -> cur,: Probability = 0.04, Count = 1
cnt -> is.read: Probability = 0.04, Count = 1
this._enclosing.bAvail -> bAvail: Probability = 1.00, Count = 3
CountClosedWorkflowExecutionsResponse -> WorkflowExecutionCount: Probability = 1.00, Count = 1
CountClosedWorkflowExecutions -> countClosedWorkflowExecutions: Probability = 1.00, Count = 1
CountClosedWorkflowExecutionsRequest -> CountClosedWorkflowExecutionsRequest: Probability = 1.00, Count = 1
Invoke<CountClosedWorkflowExecutionsResponse> -> executeCountClosedWorkflowExecutions: Probability = 1.00, Count = 1
unsigned -> number.length: Probability = 0.22, Count = 2
unsigned -> unsigned: Probability = 0.56, Count = 5
unsigned -> getDecimalValue: Probability = 0.22, Count = 2
isPositive -> isPositive: Probability = 1.00, Count = 4
sum -> sum: Probability = 1.00, Count = 19
long.Parse -> Long.parseLong: Probability = 1.00, Count = 4
GetOldId -> getOldId: Probability = 1.00, Count = 9
oldId -> oldId: Probability = 1.00, Count = 2
FeatProtection -> FeatProtection: Probability = 1.00, Count = 2
fSD -> fSD: Probability = 1.00, Count = 3
passwordVerifier -> passwordVerifier: Probability = 1.00, Count = 3
securityDescriptor -> securityDescriptor: Probability = 1.00, Count = 2
UpdateContactAttributesResponse -> UpdateContactAttributesResult: Probability = 1.00, Count = 1
UpdateContactAttributes -> updateContactAttributes: Probability = 1.00, Count = 1
UpdateContactAttributesRequest -> UpdateContactAttributesRequest: Probability = 1.00, Count = 1
Invoke<UpdateContactAttributesResponse> -> executeUpdateContactAttributes: Probability = 1.00, Count = 1
DescribeClientVpnEndpointsResponse -> DescribeClientVpnEndpointsResult: Probability = 1.00, Count = 1
DescribeClientVpnEndpoints -> describeClientVpnEndpoints: Probability = 1.00, Count = 1
DescribeClientVpnEndpointsRequest -> DescribeClientVpnEndpointsRequest: Probability = 1.00, Count = 1
Invoke<DescribeClientVpnEndpointsResponse> -> executeDescribeClientVpnEndpoints: Probability = 1.00, Count = 1
Invoke<DescribeCacheSecurityGroupsResponse> -> executeDescribeCacheSecurityGroups: Probability = 1.00, Count = 1
base.Equals -> super.equals: Probability = 0.40, Count = 2
base.Equals -> Name: Probability = 0.20, Count = 1
base.Equals -> object: Probability = 0.20, Count = 1
base.Equals -> .name.equalsIgnoreCase: Probability = 0.20, Count = 1
IList<TransportProtocol> -> List<TransportProtocol>: Probability = 0.50, Count = 2
IList<TransportProtocol> -> getTransportProtocols: Probability = 0.25, Count = 1
IList<TransportProtocol> -> protocols.size: Probability = 0.25, Count = 1
JavaWeakReference<TransportProtocol> -> WeakReference<TransportProtocol>: Probability = 1.00, Count = 4
protocols -> protocols: Probability = 1.00, Count = 4
TransportProtocol -> TransportProtocol: Probability = 1.00, Count = 5
proto -> proto: Probability = 1.00, Count = 9
@ref.Get -> ref.get: Probability = 1.00, Count = 4
res.AddItem -> res.add: Probability = 1.00, Count = 2
Sharpen.Collections.UnmodifiableList -> Collections.unmodifiableList: Probability = 1.00, Count = 4
SrndTermQuery -> SrndTermQuery: Probability = 1.00, Count = 1
termText, -> termText,: Probability = 1.00, Count = 1
quoted -> quoted: Probability = 1.00, Count = 2
this.termText -> this.termText: Probability = 1.00, Count = 1
CreateEmailTemplateResponse -> CreateEmailTemplateResult: Probability = 1.00, Count = 1
CreateEmailTemplate -> createEmailTemplate: Probability = 1.00, Count = 1
CreateEmailTemplateRequest -> CreateEmailTemplateRequest: Probability = 1.00, Count = 1
Invoke<CreateEmailTemplateResponse> -> executeCreateEmailTemplate: Probability = 1.00, Count = 1
DeleteSnapshotResponse -> Snapshot: Probability = 0.50, Count = 1
DeleteSnapshotResponse -> DeleteSnapshotResult: Probability = 0.50, Count = 1
DeleteSnapshot -> deleteSnapshot: Probability = 1.00, Count = 2
Invoke<DeleteSnapshotResponse> -> executeDeleteSnapshot: Probability = 1.00, Count = 2
ListMemberAccountsResponse -> ListMemberAccountsResult: Probability = 1.00, Count = 1
ListMemberAccounts -> listMemberAccounts: Probability = 1.00, Count = 1
ListMemberAccountsRequest -> ListMemberAccountsRequest: Probability = 1.00, Count = 1
Invoke<ListMemberAccountsResponse> -> executeListMemberAccounts: Probability = 1.00, Count = 1
ShouldRefresh -> shouldRefresh: Probability = 1.00, Count = 1
now -> now: Probability = 1.00, Count = 15
DateTime.UtcNow.Ticks -> System.currentTimeMillis: Probability = 1.00, Count = 2
lastFailedRefreshTime -> lastFailedRefreshTime: Probability = 1.00, Count = 2
refreshIntervalInMillSeconds -> refreshIntervalInMillSeconds: Probability = 0.67, Count = 2
refreshIntervalInMillSeconds -> System.currentTimeMillis: Probability = 0.33, Count = 1
SetRefLogMessage -> setRefLogMessage: Probability = 1.00, Count = 3
appendStatus -> appendStatus: Probability = 1.00, Count = 6
!appendStatus -> !appendStatus: Probability = 1.00, Count = 2
DisableRefLog -> disableRefLog: Probability = 0.88, Count = 7
DisableRefLog -> customRefLog: Probability = 0.12, Count = 1
refLogIncludeResult -> refLogIncludeResult: Probability = 1.00, Count = 9
RemoteRefUpdate.Status -> Status: Probability = 1.00, Count = 2
GetDeploymentStrategyResponse -> GetDeploymentStrategyResult: Probability = 1.00, Count = 1
GetDeploymentStrategy -> getDeploymentStrategy: Probability = 1.00, Count = 1
GetDeploymentStrategyRequest -> GetDeploymentStrategyRequest: Probability = 1.00, Count = 1
Invoke<GetDeploymentStrategyResponse> -> executeGetDeploymentStrategy: Probability = 1.00, Count = 1
DeleteEventResponse -> DeleteEventResult: Probability = 1.00, Count = 1
DeleteEvent -> deleteEvent: Probability = 1.00, Count = 1
DeleteEventRequest -> DeleteEventRequest: Probability = 1.00, Count = 2
Invoke<DeleteEventResponse> -> executeDeleteEvent: Probability = 1.00, Count = 1
ListQueryLoggingConfigsResponse -> ListQueryLoggingConfigsResult: Probability = 1.00, Count = 1
ListQueryLoggingConfigs -> listQueryLoggingConfigs: Probability = 1.00, Count = 1
ListQueryLoggingConfigsRequest -> ListQueryLoggingConfigsRequest: Probability = 1.00, Count = 1
Invoke<ListQueryLoggingConfigsResponse> -> executeListQueryLoggingConfigs: Probability = 1.00, Count = 1
BatchGetDeploymentTargetsResponse -> BatchGetDeploymentTargetsResult: Probability = 1.00, Count = 1
BatchGetDeploymentTargets -> batchGetDeploymentTargets: Probability = 1.00, Count = 1
BatchGetDeploymentTargetsRequest -> BatchGetDeploymentTargetsRequest: Probability = 1.00, Count = 1
Invoke<BatchGetDeploymentTargetsResponse> -> executeBatchGetDeploymentTargets: Probability = 1.00, Count = 1
GetRulesResponse -> GetRulesResult: Probability = 1.00, Count = 1
GetRules -> getRules: Probability = 1.00, Count = 2
GetRulesRequest -> GetRulesRequest: Probability = 1.00, Count = 1
Invoke<GetRulesResponse> -> executeGetRules: Probability = 1.00, Count = 1
newMessage -> newMessage: Probability = 1.00, Count = 2
CompleteMigrationResponse -> ReplicationGroup: Probability = 1.00, Count = 1
CompleteMigration -> completeMigration: Probability = 1.00, Count = 1
CompleteMigrationRequest -> CompleteMigrationRequest: Probability = 1.00, Count = 1
Invoke<CompleteMigrationResponse> -> executeCompleteMigration: Probability = 1.00, Count = 1
recLen -> recLen: Probability = 1.00, Count = 2
field_1_number_of_sheets -> field_1_number_of_sheets: Probability = 1.00, Count = 7
_isAddInFunctions -> _isAddInFunctions: Probability = 0.86, Count = 6
_isAddInFunctions -> TAG_ADD_IN_FUNCTIONS: Probability = 0.14, Count = 1
field_2_encoded_url -> field_2_encoded_url: Probability = 0.80, Count = 4
field_2_encoded_url -> field_3_sheet_names: Probability = 0.20, Count = 1
sheetNames.Length -> sheetNames.length: Probability = 1.00, Count = 2
field_3_sheet_names -> field_3_sheet_names: Probability = 1.00, Count = 4
nextShort -> nextShort: Probability = 1.00, Count = 4
"+ -> "+: Probability = 0.94, Count = 15
"+ -> ": Probability = 0.06, Count = 1
GetEmailTemplateResponse -> GetEmailTemplateResult: Probability = 1.00, Count = 1
GetEmailTemplate -> getEmailTemplate: Probability = 1.00, Count = 1
GetEmailTemplateRequest -> GetEmailTemplateRequest: Probability = 1.00, Count = 1
Invoke<GetEmailTemplateResponse> -> executeGetEmailTemplate: Probability = 1.00, Count = 1
SumTotalTermFreqValueSource -> SumTotalTermFreqValueSource: Probability = 1.00, Count = 1
indexedField -> indexedField: Probability = 1.00, Count = 4
this.m_indexedField -> this.indexedField: Probability = 1.00, Count = 3
tailSet -> tailSet: Probability = 1.00, Count = 3
startInclusive -> startInclusive: Probability = 1.00, Count = 2
java.lang.Comparable<E> -> Comparable<E>: Probability = 1.00, Count = 3
.compareTo -> .compareTo: Probability = 1.00, Count = 3
c.compare -> c.compare: Probability = 1.00, Count = 3
ReadJobResponse -> ReadJobResult: Probability = 1.00, Count = 1
ReadJob -> readJob: Probability = 1.00, Count = 1
ReadJobRequest -> ReadJobRequest: Probability = 1.00, Count = 1
Invoke<ReadJobResponse> -> executeReadJob: Probability = 1.00, Count = 1
GetSignalingChannelEndpointResponse -> GetSignalingChannelEndpointResult: Probability = 1.00, Count = 1
GetSignalingChannelEndpoint -> getSignalingChannelEndpoint: Probability = 1.00, Count = 1
GetSignalingChannelEndpointRequest -> GetSignalingChannelEndpointRequest: Probability = 1.00, Count = 1
Invoke<GetSignalingChannelEndpointResponse> -> executeGetSignalingChannelEndpoint: Probability = 1.00, Count = 1
VariableGapTermsIndexWriter -> VariableGapTermsIndexWriter: Probability = 1.00, Count = 1
state, -> state,: Probability = 1.00, Count = 19
IndexTermSelector -> IndexTermSelector: Probability = 1.00, Count = 1
policy -> policy: Probability = 0.55, Count = 6
policy -> MissingCellPolicy: Probability = 0.09, Count = 1
policy -> retrieveCell: Probability = 0.09, Count = 1
policy -> CellType.BLANK: Probability = 0.18, Count = 2
policy -> isBlank: Probability = 0.09, Count = 1
IndexFileNames.SegmentFileName -> IndexFileNames.segmentFileName: Probability = 1.00, Count = 4
state.SegmentInfo.Name, -> state.segmentInfo.name,: Probability = 0.50, Count = 4
state.SegmentInfo.Name, -> state.segmentSuffix,: Probability = 0.50, Count = 4
m_output -> out: Probability = 0.31, Count = 4
m_output -> CODEC_NAME,: Probability = 0.15, Count = 2
m_output -> VERSION_CURRENT,: Probability = 0.15, Count = 2
m_output -> state.segmentInfo.getId: Probability = 0.15, Count = 2
m_output -> state.segmentSuffix: Probability = 0.08, Count = 1
m_output -> postingsWriter.init: Probability = 0.08, Count = 1
m_output -> out,: Probability = 0.08, Count = 1
state.Directory.CreateOutput -> state.directory.createOutput: Probability = 1.00, Count = 3
state.Context -> state.context: Probability = 1.00, Count = 4
state.FieldInfos -> state.fieldInfos: Probability = 1.00, Count = 4
WriteHeader -> CodecUtil.writeIndexHeader: Probability = 0.50, Count = 3
WriteHeader -> out,: Probability = 0.33, Count = 2
WriteHeader -> writeHeader: Probability = 0.17, Count = 1
HashSet<int> -> Set<Integer>: Probability = 0.50, Count = 2
HashSet<int> -> toSet: Probability = 0.25, Count = 1
HashSet<int> -> HashSet<Integer>: Probability = 0.25, Count = 1
Interval -> Interval: Probability = 1.00, Count = 8
I -> I: Probability = 1.00, Count = 6
intervals -> intervals: Probability = 1.00, Count = 6
I.a -> I.a: Probability = 1.00, Count = 4
I.b -> I.b: Probability = 0.88, Count = 7
I.b -> I.a: Probability = 0.12, Count = 1
s.Add -> s.add: Probability = 1.00, Count = 4
"Sorry, -> "Sorry,: Probability = 1.00, Count = 1
can't -> can't: Probability = 1.00, Count = 3
serialize -> serialize: Probability = 1.00, Count = 2
MulRK -> MulRK: Probability = 1.00, Count = 1
release" -> release": Probability = 1.00, Count = 1
index.ToString -> index: Probability = 1.00, Count = 4
directory[ToDirectoryIndex -> directory[toDirectoryIndex: Probability = 1.00, Count = 3
][ToBlockIndex -> ][toBlockIndex: Probability = 1.00, Count = 1
DeleteSnapshotCopyGrantResponse -> DeleteSnapshotCopyGrantResult: Probability = 1.00, Count = 1
DeleteSnapshotCopyGrant -> deleteSnapshotCopyGrant: Probability = 1.00, Count = 1
DeleteSnapshotCopyGrantRequest -> DeleteSnapshotCopyGrantRequest: Probability = 1.00, Count = 1
Invoke<DeleteSnapshotCopyGrantResponse> -> executeDeleteSnapshotCopyGrant: Probability = 1.00, Count = 1
ResetFontStyle -> resetFontStyle: Probability = 1.00, Count = 1
SetFontStyle -> setFontStyle: Probability = 1.00, Count = 2
numberOfRanges -> numberOfRanges: Probability = 1.00, Count = 2
CellRangeAddress.GetEncodedSize -> CellRangeAddress.getEncodedSize: Probability = 1.00, Count = 1
ListJobsRequest -> ListJobsRequest: Probability = 1.00, Count = 4
DeletePlacementGroupRequest -> DeletePlacementGroupRequest: Probability = 1.00, Count = 2
1000 -> 1000: Probability = 0.40, Count = 2
1000 -> now: Probability = 0.40, Count = 2
1000 -> System.currentTimeMillis: Probability = 0.20, Count = 1
fetched -> fetched: Probability = 1.00, Count = 2
Fetch -> fetch: Probability = 1.00, Count = 3
DescribeGlobalClustersResponse -> DescribeGlobalClustersResult: Probability = 1.00, Count = 1
DescribeGlobalClusters -> describeGlobalClusters: Probability = 1.00, Count = 1
DescribeGlobalClustersRequest -> DescribeGlobalClustersRequest: Probability = 1.00, Count = 1
Invoke<DescribeGlobalClustersResponse> -> executeDescribeGlobalClusters: Probability = 1.00, Count = 1
PutVoiceConnectorTerminationResponse -> PutVoiceConnectorTerminationResult: Probability = 1.00, Count = 1
PutVoiceConnectorTermination -> putVoiceConnectorTermination: Probability = 1.00, Count = 1
PutVoiceConnectorTerminationRequest -> PutVoiceConnectorTerminationRequest: Probability = 1.00, Count = 1
Invoke<PutVoiceConnectorTerminationResponse> -> executePutVoiceConnectorTermination: Probability = 1.00, Count = 1
startA, -> startA,: Probability = 1.00, Count = 1
startB -> startB: Probability = 1.00, Count = 1
a[startA] -> a[startA]: Probability = 0.60, Count = 3
a[startA] -> startA++,: Probability = 0.20, Count = 1
a[startA] -> startB++: Probability = 0.20, Count = 1
b[startB] -> b[startB]: Probability = 1.00, Count = 2
StartSentimentDetectionJobResponse -> StartSentimentDetectionJobResult: Probability = 1.00, Count = 1
StartSentimentDetectionJob -> startSentimentDetectionJob: Probability = 1.00, Count = 1
StartSentimentDetectionJobRequest -> StartSentimentDetectionJobRequest: Probability = 1.00, Count = 1
Invoke<StartSentimentDetectionJobResponse> -> executeStartSentimentDetectionJob: Probability = 1.00, Count = 1
this.CreateCell -> this.createCell: Probability = 1.00, Count = 1
CellType.Blank -> column,CellType.BLANK: Probability = 1.00, Count = 1
RecalcIdRecord -> RecalcIdRecord: Probability = 1.00, Count = 2
GetEncodedSizeWithoutArrayData -> getEncodedSizeWithoutArrayData: Probability = 1.00, Count = 1
ptg -> ptg: Probability = 0.67, Count = 16
ptg -> ArrayPtg.PLAIN_TOKEN_SIZE: Probability = 0.04, Count = 1
ptg -> newExtSheetIx: Probability = 0.12, Count = 3
ptg -> a3p: Probability = 0.08, Count = 2
ptg -> OperandPtg: Probability = 0.08, Count = 2
ArrayPtg -> ArrayPtg: Probability = 0.50, Count = 7
ArrayPtg -> arrayPtg: Probability = 0.14, Count = 2
ArrayPtg -> _reserved0,: Probability = 0.07, Count = 1
ArrayPtg -> _reserved1,: Probability = 0.07, Count = 1
ArrayPtg -> _reserved2,: Probability = 0.07, Count = 1
ArrayPtg -> nColumns,: Probability = 0.07, Count = 1
ArrayPtg -> nRows,: Probability = 0.07, Count = 1
Math.Ceiling -> Math.ceil: Probability = 1.00, Count = 3
ListResolverRulesResponse -> ListResolverRulesResult: Probability = 1.00, Count = 1
ListResolverRules -> listResolverRules: Probability = 1.00, Count = 1
ListResolverRulesRequest -> ListResolverRulesRequest: Probability = 1.00, Count = 1
Invoke<ListResolverRulesResponse> -> executeListResolverRules: Probability = 1.00, Count = 1
ListBusinessReportSchedulesResponse -> ListBusinessReportSchedulesResult: Probability = 1.00, Count = 1
ListBusinessReportSchedules -> listBusinessReportSchedules: Probability = 1.00, Count = 1
ListBusinessReportSchedulesRequest -> ListBusinessReportSchedulesRequest: Probability = 1.00, Count = 1
Invoke<ListBusinessReportSchedulesResponse> -> executeListBusinessReportSchedules: Probability = 1.00, Count = 1
EscherDgRecord -> EscherDgRecord: Probability = 0.50, Count = 3
EscherDgRecord -> createDgRecord: Probability = 0.17, Count = 1
EscherDgRecord -> dg.setRecordId: Probability = 0.17, Count = 1
EscherDgRecord -> EscherDgRecord.RECORD_ID: Probability = 0.17, Count = 1
dg -> dg: Probability = 1.00, Count = 3
dgId -> dgId: Probability = 0.40, Count = 2
dgId -> findNewDrawingGroupId: Probability = 0.40, Count = 2
dgId -> dgg.findNewDrawingGroupId: Probability = 0.20, Count = 1
dgId, -> dgId,: Probability = 1.00, Count = 3
NGit.Transport.Transport -> Transport: Probability = 1.00, Count = 4
.transportNeedsRepository -> .transportNeedsRepository: Probability = 1.00, Count = 1
OrdRange -> OrdRange: Probability = 1.00, Count = 1
this.Start -> this.start: Probability = 1.00, Count = 4
this.End -> this.end: Probability = 1.00, Count = 3
backingMap.put -> backingMap.put: Probability = 1.00, Count = 2
BeginRead -> beginRead: Probability = 1.00, Count = 3
base.Skip -> super.skip: Probability = 1.00, Count = 1
ThreadInterruptedException -> InterruptedIOException: Probability = 0.35, Count = 6
ThreadInterruptedException -> e: Probability = 0.65, Count = 11
ReadTimedOut -> readTimedOut: Probability = 0.75, Count = 3
ReadTimedOut -> e: Probability = 0.25, Count = 1
EndRead -> endRead: Probability = 1.00, Count = 3
StepDetail -> StepDetail: Probability = 1.00, Count = 1
StepConfig -> StepConfig: Probability = 1.00, Count = 2
stepConfig, -> stepConfig,: Probability = 1.00, Count = 1
StepExecutionStatusDetail -> StepExecutionStatusDetail: Probability = 1.00, Count = 2
executionStatusDetail -> executionStatusDetail: Probability = 1.00, Count = 3
_stepConfig -> setStepConfig: Probability = 1.00, Count = 1
stepConfig -> stepConfig: Probability = 1.00, Count = 1
_executionStatusDetail -> setExecutionStatusDetail: Probability = 1.00, Count = 2
GetToken -> getToken: Probability = 1.00, Count = 2
t.Next -> t.next: Probability = 1.00, Count = 3
TokenSource.GetNextToken -> token_source.getNextToken: Probability = 1.00, Count = 2
c.toArray -> .toArray: Probability = 0.50, Count = 1
c.toArray -> c.toArray: Probability = 0.50, Count = 1
CreateDBParameterGroupResponse -> DBParameterGroup: Probability = 1.00, Count = 1
CreateDBParameterGroup -> createDBParameterGroup: Probability = 1.00, Count = 1
CreateDBParameterGroupRequest -> CreateDBParameterGroupRequest: Probability = 1.00, Count = 2
Invoke<CreateDBParameterGroupResponse> -> executeCreateDBParameterGroup: Probability = 1.00, Count = 1
append0 -> append0: Probability = 0.62, Count = 13
append0 -> appendNull: Probability = 0.10, Count = 2
append0 -> RealToString.getInstance: Probability = 0.10, Count = 2
append0 -> .appendFloat: Probability = 0.05, Count = 1
append0 -> this,: Probability = 0.10, Count = 2
append0 -> IntegralToString.appendInt: Probability = 0.05, Count = 1
lexer, -> lexer,: Probability = 0.57, Count = 4
lexer, -> lexer,CharStream: Probability = 0.14, Count = 1
lexer, -> input,int: Probability = 0.14, Count = 1
lexer, -> startIndex,ATNConfigSet: Probability = 0.14, Count = 1
startIndex -> startIndex: Probability = 0.84, Count = 16
startIndex -> endIndex-startIndex: Probability = 0.11, Count = 2
startIndex -> i=start: Probability = 0.05, Count = 1
requiresSeek -> requiresSeek: Probability = 0.57, Count = 4
requiresSeek -> input.seek: Probability = 0.43, Count = 3
ILexerAction -> LexerAction: Probability = 1.00, Count = 2
lexerAction -> lexerAction: Probability = 0.80, Count = 4
lexerAction -> MurmurHash.update: Probability = 0.20, Count = 1
lexerActions -> lexerActions: Probability = 0.67, Count = 4
lexerActions -> this.lexerActions: Probability = 0.17, Count = 1
lexerActions -> MurmurHash.initialize: Probability = 0.17, Count = 1
LexerIndexedCustomAction -> LexerIndexedCustomAction: Probability = 1.00, Count = 5
action -> lexerAction: Probability = 0.60, Count = 3
action -> .getOffset: Probability = 0.20, Count = 1
action -> .getAction: Probability = 0.20, Count = 1
ListMailboxPermissionsResponse -> ListMailboxPermissionsResult: Probability = 1.00, Count = 1
ListMailboxPermissions -> listMailboxPermissions: Probability = 1.00, Count = 1
ListMailboxPermissionsRequest -> ListMailboxPermissionsRequest: Probability = 1.00, Count = 1
Invoke<ListMailboxPermissionsResponse> -> executeListMailboxPermissions: Probability = 1.00, Count = 1
ConditionalFormattingTable -> ConditionalFormattingTable: Probability = 1.00, Count = 1
RecordStream -> RecordStream: Probability = 1.00, Count = 11
rs -> rs: Probability = 1.00, Count = 15
CFHeaderRecord -> CFHeaderBase: Probability = 0.60, Count = 3
CFHeaderRecord -> CFHeaderRecord: Probability = 0.40, Count = 2
CFRecordsAggregate.CreateCFAggregate -> CFRecordsAggregate.createCFAggregate: Probability = 1.00, Count = 1
Ref> -> Ref>: Probability = 0.56, Count = 5
Ref> -> UncheckedIOException: Probability = 0.22, Count = 2
Ref> -> refs: Probability = 0.22, Count = 2
GetTags -> getTags: Probability = 1.00, Count = 2
RefDatabase.GetRefs -> getRefDatabase: Probability = 0.50, Count = 2
RefDatabase.GetRefs -> .getRefs: Probability = 0.50, Count = 2
Constants.R_TAGS -> Constants.R_TAGS: Probability = 1.00, Count = 2
ComposedQuery -> ComposedQuery: Probability = 1.00, Count = 1
IList<SrndQuery> -> List<SrndQuery>: Probability = 1.00, Count = 3
qs, -> qs,: Probability = 1.00, Count = 1
operatorInfix, -> operatorInfix,: Probability = 1.00, Count = 1
opName -> opName: Probability = 0.33, Count = 4
opName -> text==null: Probability = 0.08, Count = 1
opName -> "<DeleteOp@"+tokens.get: Probability = 0.08, Count = 1
opName -> +".."+tokens.get: Probability = 0.17, Count = 2
opName -> lastIndex: Probability = 0.17, Count = 2
opName -> opName.indexOf: Probability = 0.08, Count = 1
opName -> '$': Probability = 0.08, Count = 1
Recompose -> recompose: Probability = 1.00, Count = 1
qs -> qs: Probability = 1.00, Count = 1
this.operatorInfix -> this.operatorInfix: Probability = 1.00, Count = 1
operatorInfix -> operatorInfix: Probability = 1.00, Count = 1
this.m_opName -> this.opName: Probability = 1.00, Count = 1
TestRoleResponse -> TestRoleResult: Probability = 1.00, Count = 1
TestRole -> testRole: Probability = 1.00, Count = 1
TestRoleRequest -> TestRoleRequest: Probability = 1.00, Count = 1
Invoke<TestRoleResponse> -> executeTestRole: Probability = 1.00, Count = 1
OR -> AND: Probability = 1.00, Count = 3
ModifyVpcAttributeResponse -> ModifyVpcAttributeResult: Probability = 1.00, Count = 1
ModifyVpcAttribute -> modifyVpcAttribute: Probability = 1.00, Count = 1
ModifyVpcAttributeRequest -> ModifyVpcAttributeRequest: Probability = 1.00, Count = 1
Invoke<ModifyVpcAttributeResponse> -> executeModifyVpcAttribute: Probability = 1.00, Count = 1
ArabicNormalizationFilterFactory -> ArabicNormalizationFilterFactory: Probability = 1.00, Count = 1
BookSheetKey -> BookSheetKey: Probability = 1.00, Count = 6
_bookIndex -> _bookIndex: Probability = 1.00, Count = 2
_sheetIndex -> other._bookIndex: Probability = 0.20, Count = 1
_sheetIndex -> _sheetIndex: Probability = 0.80, Count = 4
other._sheetIndex -> other._sheetIndex: Probability = 1.00, Count = 1
TermContext -> TermStates: Probability = 1.00, Count = 1
states.DocFreq -> Objects.requireNonNull: Probability = 0.67, Count = 2
states.DocFreq -> perReaderTermState: Probability = 0.33, Count = 1
GetClusterCredentialsResponse -> GetClusterCredentialsResult: Probability = 1.00, Count = 1
GetClusterCredentials -> getClusterCredentials: Probability = 1.00, Count = 1
GetClusterCredentialsRequest -> GetClusterCredentialsRequest: Probability = 1.00, Count = 1
Invoke<GetClusterCredentialsResponse> -> executeGetClusterCredentials: Probability = 1.00, Count = 1
this.EqualsSameType -> this.equalsSameType: Probability = 1.00, Count = 1
Item -> Item: Probability = 1.00, Count = 5
parent, -> parent,: Probability = 0.89, Count = 16
parent, -> super.setShapeType: Probability = 0.11, Count = 2
UpdateClusterResponse -> UpdateClusterResult: Probability = 1.00, Count = 1
UpdateCluster -> updateCluster: Probability = 1.00, Count = 1
UpdateClusterRequest -> UpdateClusterRequest: Probability = 1.00, Count = 1
Invoke<UpdateClusterResponse> -> executeUpdateCluster: Probability = 1.00, Count = 1
NGit.Api.LogCommand -> LogCommand: Probability = 1.00, Count = 3
SetMaxCount -> setMaxCount: Probability = 1.00, Count = 1
this.maxCount -> this.maxCount: Probability = 1.00, Count = 1
GetInsightRuleReportResponse -> GetInsightRuleReportResult: Probability = 1.00, Count = 1
GetInsightRuleReport -> getInsightRuleReport: Probability = 1.00, Count = 1
GetInsightRuleReportRequest -> GetInsightRuleReportRequest: Probability = 1.00, Count = 1
Invoke<GetInsightRuleReportResponse> -> executeGetInsightRuleReport: Probability = 1.00, Count = 1
CommonToken -> CommonToken: Probability = 1.00, Count = 6
oldToken -> oldToken: Probability = 0.67, Count = 4
oldToken -> .source: Probability = 0.17, Count = 1
oldToken -> oldToken.getText: Probability = 0.17, Count = 1
Antlr4.Runtime.CommonToken -> CommonToken: Probability = 1.00, Count = 3
Tuple.Create -> Pair<TokenSource,: Probability = 0.80, Count = 4
Tuple.Create -> CharStream>: Probability = 0.20, Count = 1
ListSolutionsResponse -> ListSolutionsResult: Probability = 1.00, Count = 1
ListSolutions -> listSolutions: Probability = 1.00, Count = 1
ListSolutionsRequest -> ListSolutionsRequest: Probability = 1.00, Count = 1
Invoke<ListSolutionsResponse> -> executeListSolutions: Probability = 1.00, Count = 1
hasPrevious -> hasPrevious: Probability = 1.00, Count = 3
finalState -> finalState: Probability = 1.00, Count = 2
RestoreState -> restoreState: Probability = 1.00, Count = 3
ResolveMerger -> ResolveMerger: Probability = 1.00, Count = 2
Pop_Union -> pop_union: Probability = 1.00, Count = 1
arr1, -> arr1,: Probability = 1.00, Count = 4
arr2, -> arr2,: Probability = 1.00, Count = 4
wordOffset, -> wordOffset,: Probability = 1.00, Count = 10
numWords -> numWords: Probability = 1.00, Count = 10
popCount -> popCount: Probability = 0.83, Count = 15
popCount -> ~arr2[i]: Probability = 0.06, Count = 1
popCount -> Long.bitCount: Probability = 0.06, Count = 1
popCount -> arr[i]: Probability = 0.06, Count = 1
wordOffset -> wordOffset: Probability = 1.00, Count = 5
arr1[i] -> Long.bitCount: Probability = 1.00, Count = 4
.PopCount -> arr1[i]: Probability = 1.00, Count = 4
arr2[i] -> arr2[i]: Probability = 1.00, Count = 3
ConstValueSource -> ConstValueSource: Probability = 1.00, Count = 1
constant -> constant: Probability = 0.88, Count = 7
constant -> this.fv: Probability = 0.12, Count = 1
this.constant -> this.constant: Probability = 1.00, Count = 2
this.dv -> this.dv: Probability = 1.00, Count = 1
punctCharacters.IndexOf -> punctCharacters.indexOf: Probability = 1.00, Count = 1
estimatedSegmentSize -> estimatedSegmentSize: Probability = 1.00, Count = 2
this.NumDocs -> this.numDocs: Probability = 1.00, Count = 1
this.EstimatedSegmentSize -> this.estimatedSegmentSize: Probability = 1.00, Count = 1
element -> element: Probability = 0.83, Count = 24
element -> escherRecords.add: Probability = 0.03, Count = 1
element -> size: Probability = 0.03, Count = 1
element -> T: Probability = 0.07, Count = 2
element -> if: Probability = 0.03, Count = 1
getFirstImpl -> getFirstImpl: Probability = 1.00, Count = 2
ListNodegroupsResponse -> ListNodegroupsResult: Probability = 1.00, Count = 1
ListNodegroups -> listNodegroups: Probability = 1.00, Count = 1
ListNodegroupsRequest -> ListNodegroupsRequest: Probability = 1.00, Count = 1
Invoke<ListNodegroupsResponse> -> executeListNodegroups: Probability = 1.00, Count = 1
PutSkillAuthorizationResponse -> PutSkillAuthorizationResult: Probability = 1.00, Count = 1
PutSkillAuthorization -> putSkillAuthorization: Probability = 1.00, Count = 1
PutSkillAuthorizationRequest -> PutSkillAuthorizationRequest: Probability = 1.00, Count = 1
Invoke<PutSkillAuthorizationResponse> -> executePutSkillAuthorization: Probability = 1.00, Count = 1
DescribeSourceRegionsResponse -> DescribeSourceRegionsResult: Probability = 1.00, Count = 1
DescribeSourceRegions -> describeSourceRegions: Probability = 1.00, Count = 1
DescribeSourceRegionsRequest -> DescribeSourceRegionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeSourceRegionsResponse> -> executeDescribeSourceRegions: Probability = 1.00, Count = 1
SplitShardResponse -> SplitShardResult: Probability = 1.00, Count = 1
SplitShard -> splitShard: Probability = 1.00, Count = 1
SplitShardRequest -> SplitShardRequest: Probability = 1.00, Count = 1
Invoke<SplitShardResponse> -> executeSplitShard: Probability = 1.00, Count = 1
CreateTableRequest -> CreateTableRequest: Probability = 1.00, Count = 1
List<KeySchemaElement> -> java.util.List<KeySchemaElement>: Probability = 1.00, Count = 1
keySchema -> keySchema: Probability = 1.00, Count = 2
_keySchema -> setKeySchema: Probability = 1.00, Count = 1
field_1_id -> field_1_id: Probability = 1.00, Count = 2
field_4_text, -> field_4_text,: Probability = 1.00, Count = 2
UpdateVoiceTemplateResponse -> UpdateVoiceTemplateResult: Probability = 1.00, Count = 1
UpdateVoiceTemplate -> updateVoiceTemplate: Probability = 1.00, Count = 1
UpdateVoiceTemplateRequest -> UpdateVoiceTemplateRequest: Probability = 1.00, Count = 1
Invoke<UpdateVoiceTemplateResponse> -> executeUpdateVoiceTemplate: Probability = 1.00, Count = 1
BookBoolRecord -> BookBoolRecord: Probability = 1.00, Count = 1
field_1_save_link_values -> field_1_save_link_values: Probability = 1.00, Count = 2
flip -> flip: Probability = 1.00, Count = 1
SetGroupDocsOffset -> setGroupDocsOffset: Probability = 1.00, Count = 1
groupDocsOffset -> groupDocsOffset: Probability = 1.00, Count = 2
this.groupDocsOffset -> this.groupDocsOffset: Probability = 1.00, Count = 1
InitializeInstanceFields -> this: Probability = 0.43, Count = 3
InitializeInstanceFields -> 16,: Probability = 0.14, Count = 1
InitializeInstanceFields -> 16: Probability = 0.14, Count = 1
InitializeInstanceFields -> this.similarity: Probability = 0.14, Count = 1
InitializeInstanceFields -> BM25Similarity: Probability = 0.14, Count = 1
GetCommandName -> getCommandName: Probability = 1.00, Count = 1
GetFirstInternalSheetIndexForExtIndex -> getFirstInternalSheetIndexForExtIndex: Probability = 1.00, Count = 1
extRefIndex -> extRefIndex: Probability = 0.67, Count = 12
extRefIndex -> _externSheetRecord.getNumOfRefs: Probability = 0.11, Count = 2
extRefIndex -> getExternalBookAndSheetName: Probability = 0.06, Count = 1
extRefIndex -> ebIx: Probability = 0.06, Count = 1
extRefIndex -> _externalBookBlocks[ebIx].getExternalBookRecord: Probability = 0.06, Count = 1
extRefIndex -> !ebr.isExternalReferences: Probability = 0.06, Count = 1
_externSheetRecord.GetFirstSheetIndexFromRefIndex -> _externSheetRecord.getFirstSheetIndexFromRefIndex: Probability = 1.00, Count = 3
IsExpired -> isExpired: Probability = 1.00, Count = 3
ExpiredDate -> this.expiredDate: Probability = 0.50, Count = 1
ExpiredDate -> this.expiredDate.after: Probability = 0.50, Count = 1
ListPolicyAttachmentsResponse -> ListPolicyAttachmentsResult: Probability = 1.00, Count = 1
ListPolicyAttachments -> listPolicyAttachments: Probability = 1.00, Count = 1
ListPolicyAttachmentsRequest -> ListPolicyAttachmentsRequest: Probability = 1.00, Count = 1
Invoke<ListPolicyAttachmentsResponse> -> executeListPolicyAttachments: Probability = 1.00, Count = 1
ReadDouble -> readDouble: Probability = 0.80, Count = 4
ReadDouble -> Double.longBitsToDouble: Probability = 0.20, Count = 1
ReadLong -> readLong: Probability = 1.00, Count = 3
UpdateLoginProfileRequest -> UpdateLoginProfileRequest: Probability = 1.00, Count = 1
GetResultPath -> getResultPath: Probability = 1.00, Count = 2
resultPath -> resultPath: Probability = 1.00, Count = 1
DescribeInstanceAttributeRequest -> DescribeInstanceAttributeRequest: Probability = 1.00, Count = 2
InstanceAttributeName -> InstanceAttributeName: Probability = 0.50, Count = 3
InstanceAttributeName -> attribute: Probability = 0.50, Count = 3
attribute -> ): Probability = 0.80, Count = 20
attribute -> attribute: Probability = 0.20, Count = 5
_attribute -> setAttribute: Probability = 0.54, Count = 7
_attribute -> attribute.toString: Probability = 0.46, Count = 6
ListResourceRecordSetsRequest -> ListResourceRecordSetsRequest: Probability = 1.00, Count = 1
hostedZoneId -> hostedZoneId: Probability = 0.80, Count = 4
hostedZoneId -> ): Probability = 0.20, Count = 1
_hostedZoneId -> setHostedZoneId: Probability = 1.00, Count = 3
EventBasedExcelExtractor -> EventBasedExcelExtractor: Probability = 1.00, Count = 1
POIFSFileSystem -> POIFSFileSystem: Probability = 1.00, Count = 1
this.fs -> super.setFilesystem: Probability = 0.50, Count = 1
this.fs -> ".keep": Probability = 0.50, Count = 1
CreateAddressResponse -> CreateAddressResult: Probability = 1.00, Count = 1
CreateAddress -> createAddress: Probability = 1.00, Count = 1
CreateAddressRequest -> CreateAddressRequest: Probability = 1.00, Count = 1
Invoke<CreateAddressResponse> -> executeCreateAddress: Probability = 1.00, Count = 1
ListFacePhotosRequest -> ListFacePhotosRequest: Probability = 1.00, Count = 1
"ListFacePhotos", -> "ListFacePhotos",: Probability = 1.00, Count = 1
ToPrivateASCIIString -> toPrivateASCIIString: Probability = 1.00, Count = 1
BatchGetNamedQueryResponse -> BatchGetNamedQueryResult: Probability = 1.00, Count = 1
BatchGetNamedQuery -> batchGetNamedQuery: Probability = 1.00, Count = 1
BatchGetNamedQueryRequest -> BatchGetNamedQueryRequest: Probability = 1.00, Count = 1
Invoke<BatchGetNamedQueryResponse> -> executeBatchGetNamedQuery: Probability = 1.00, Count = 1
CreateProfilingGroupResponse -> CreateProfilingGroupResult: Probability = 1.00, Count = 1
CreateProfilingGroup -> createProfilingGroup: Probability = 1.00, Count = 1
CreateProfilingGroupRequest -> CreateProfilingGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateProfilingGroupResponse> -> executeCreateProfilingGroup: Probability = 1.00, Count = 1
java.util.Arrays.toString -> Arrays.toString: Probability = 1.00, Count = 2
'-' -> '-': Probability = 1.00, Count = 4
Counter -> Counter: Probability = 1.00, Count = 5
BytesUsed -> bytesUsed: Probability = 1.00, Count = 1
bytesUsed -> bytesUsed: Probability = 1.00, Count = 9
ListStreamingDistributionsResponse -> ListStreamingDistributionsResult: Probability = 1.00, Count = 1
ListStreamingDistributions -> listStreamingDistributions: Probability = 1.00, Count = 1
ListStreamingDistributionsRequest -> ListStreamingDistributionsRequest: Probability = 1.00, Count = 1
Invoke<ListStreamingDistributionsResponse> -> executeListStreamingDistributions: Probability = 1.00, Count = 1
writeInt -> writeInt: Probability = 1.00, Count = 2
ExpandedDouble -> ExpandedDouble: Probability = 1.00, Count = 6
FromRawBitsAndExponent -> fromRawBitsAndExponent: Probability = 1.00, Count = 1
rawBits, -> rawBits,: Probability = 1.00, Count = 1
exp -> exp: Probability = 1.00, Count = 3
GetFrac -> getFrac: Probability = 1.00, Count = 2
offerFirst -> offerFirst: Probability = 1.00, Count = 1
addFirstImpl -> addFirstImpl: Probability = 1.00, Count = 3
BlockTermsWriter -> BlockTermsWriter: Probability = 1.00, Count = 1
TermsIndexWriterBase -> TermsIndexWriterBase: Probability = 0.50, Count = 1
TermsIndexWriterBase -> termsIndexWriter,SegmentWriteState: Probability = 0.50, Count = 1
PostingsWriterBase -> PostingsWriterBase: Probability = 1.00, Count = 3
postingsWriter -> postingsWriter: Probability = 0.64, Count = 7
postingsWriter -> TERMS_EXTENSION: Probability = 0.18, Count = 2
postingsWriter -> this.postingsWriter: Probability = 0.18, Count = 2
termsFileName -> termsFileName: Probability = 1.00, Count = 3
InstanceGroupModifyConfig -> InstanceGroupModifyConfig: Probability = 1.00, Count = 1
instanceGroupId, -> instanceGroupId,: Probability = 1.00, Count = 1
instanceCount -> Integer: Probability = 0.31, Count = 4
instanceCount -> instanceCount: Probability = 0.62, Count = 8
instanceCount -> setInstanceRole: Probability = 0.08, Count = 1
_instanceGroupId -> setInstanceGroupId: Probability = 1.00, Count = 1
instanceGroupId -> instanceGroupId: Probability = 1.00, Count = 1
_instanceCount -> setInstanceCount: Probability = 1.00, Count = 4
totalHits++ -> totalHits++: Probability = 1.00, Count = 1
_complexData, -> complexData,: Probability = 0.40, Count = 2
_complexData, -> getComplexData: Probability = 0.60, Count = 3
"<notokenfound/>" -> "<notokenfound/>": Probability = 1.00, Count = 1
DecisionInfo -> DecisionInfo: Probability = 1.00, Count = 2
this.decision -> this.decision: Probability = 1.00, Count = 2
GroupMarkerSubRecord -> GroupMarkerSubRecord: Probability = 1.00, Count = 1
EMPTY_BYTE_ARRAY -> EMPTY_BYTE_ARRAY: Probability = 1.00, Count = 2
token.CharArray[i] -> token.wordType: Probability = 0.04, Count = 1
token.CharArray[i] -> WordType.FULLWIDTH_NUMBER:case: Probability = 0.04, Count = 1
token.CharArray[i] -> WordType.FULLWIDTH_STRING:: Probability = 0.04, Count = 1
token.CharArray[i] -> token.charArray.length: Probability = 0.08, Count = 2
token.CharArray[i] -> token.charArray[i]: Probability = 0.32, Count = 8
token.CharArray[i] -> 0xFF10: Probability = 0.04, Count = 1
token.CharArray[i] -> 0xFEE0: Probability = 0.04, Count = 1
token.CharArray[i] -> 0x0041: Probability = 0.08, Count = 2
token.CharArray[i] -> 0x005A: Probability = 0.08, Count = 2
token.CharArray[i] -> 0x0020: Probability = 0.08, Count = 2
token.CharArray[i] -> WordType.STRING:for: Probability = 0.04, Count = 1
token.CharArray[i] -> WordType.DELIMITER:: Probability = 0.04, Count = 1
token.CharArray[i] -> token.charArray: Probability = 0.04, Count = 1
token.CharArray[i] -> Utility.COMMON_DELIMITER: Probability = 0.04, Count = 1
BarRecord -> BarRecord: Probability = 1.00, Count = 1
field_1_barSpace -> field_1_barSpace: Probability = 1.00, Count = 1
field_2_categorySpace -> field_2_categorySpace: Probability = 1.00, Count = 1
field_3_formatFlags -> field_3_formatFlags: Probability = 1.00, Count = 1
TryIncRef -> tryIncRef: Probability = 1.00, Count = 1
GetStackPolicyResponse -> GetStackPolicyResult: Probability = 1.00, Count = 1
GetStackPolicy -> getStackPolicy: Probability = 1.00, Count = 1
GetStackPolicyRequest -> GetStackPolicyRequest: Probability = 1.00, Count = 1
Invoke<GetStackPolicyResponse> -> executeGetStackPolicy: Probability = 1.00, Count = 1
RemoveKeywords -> removeKeywords: Probability = 1.00, Count = 1
PropertyIDMap.PID_KEYWORDS -> PropertyIDMap.PID_KEYWORDS: Probability = 1.00, Count = 1
Follows -> follows: Probability = 1.00, Count = 1
TextFragment -> TextFragment: Probability = 1.00, Count = 4
TextStartPos -> textStartPos: Probability = 0.50, Count = 1
TextStartPos -> .toString: Probability = 0.50, Count = 1
fragment.TextEndPos -> fragment.textEndPos: Probability = 1.00, Count = 1
DescribeHyperParameterTuningJobResponse -> DescribeHyperParameterTuningJobResult: Probability = 1.00, Count = 1
DescribeHyperParameterTuningJob -> describeHyperParameterTuningJob: Probability = 1.00, Count = 1
DescribeHyperParameterTuningJobRequest -> DescribeHyperParameterTuningJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeHyperParameterTuningJobResponse> -> executeDescribeHyperParameterTuningJob: Probability = 1.00, Count = 1
AND -> AND: Probability = 1.00, Count = 6
"PackWriter.State[" -> "State: Probability = 0.14, Count = 1
"PackWriter.State[" -> [entries=": Probability = 0.14, Count = 1
"PackWriter.State[" -> case: Probability = 0.29, Count = 2
"PackWriter.State[" -> SET:return: Probability = 0.14, Count = 1
"PackWriter.State[" -> UNSET:return: Probability = 0.14, Count = 1
"PackWriter.State[" -> "PackWriter.State[": Probability = 0.14, Count = 1
this.phase -> entries: Probability = 0.14, Count = 1
this.phase -> key: Probability = 0.29, Count = 2
this.phase -> case: Probability = 0.14, Count = 1
this.phase -> phase: Probability = 0.29, Count = 2
this.phase -> snapshot: Probability = 0.14, Count = 1
memory=" -> hosts=": Probability = 0.20, Count = 1
memory=" -> key: Probability = 0.40, Count = 2
memory=" -> case: Probability = 0.20, Count = 1
memory=" -> memory=": Probability = 0.20, Count = 1
DataFormatRecord -> DataFormatRecord: Probability = 1.00, Count = 1
field_1_pointNumber -> field_1_pointNumber: Probability = 1.00, Count = 2
field_2_seriesIndex -> field_2_seriesIndex: Probability = 1.00, Count = 2
field_3_seriesNumber -> field_3_seriesNumber: Probability = 1.00, Count = 2
field_4_formatFlags -> field_4_formatFlags: Probability = 1.00, Count = 4
ModifyVpcEndpointServiceConfigurationResponse -> ModifyVpcEndpointServiceConfigurationResult: Probability = 1.00, Count = 1
ModifyVpcEndpointServiceConfiguration -> modifyVpcEndpointServiceConfiguration: Probability = 1.00, Count = 1
ModifyVpcEndpointServiceConfigurationRequest -> ModifyVpcEndpointServiceConfigurationRequest: Probability = 1.00, Count = 1
Invoke<ModifyVpcEndpointServiceConfigurationResponse> -> executeModifyVpcEndpointServiceConfiguration: Probability = 1.00, Count = 1
_encodedTokenLen -> _encodedTokenLen: Probability = 1.00, Count = 2
_byteEncoding -> _byteEncoding: Probability = 1.00, Count = 1
RecognizeLabelRequest -> RecognizeLabelRequest: Probability = 1.00, Count = 1
"RecognizeLabel" -> "RecognizeLabel": Probability = 1.00, Count = 1
ListStackSetsResponse -> ListStackSetsResult: Probability = 1.00, Count = 1
ListStackSets -> listStackSets: Probability = 1.00, Count = 1
ListStackSetsRequest -> ListStackSetsRequest: Probability = 1.00, Count = 1
Invoke<ListStackSetsResponse> -> executeListStackSets: Probability = 1.00, Count = 1
ModifyNetworkInterfaceAttributeResponse -> ModifyNetworkInterfaceAttributeResult: Probability = 1.00, Count = 1
ModifyNetworkInterfaceAttribute -> modifyNetworkInterfaceAttribute: Probability = 1.00, Count = 1
ModifyNetworkInterfaceAttributeRequest -> ModifyNetworkInterfaceAttributeRequest: Probability = 1.00, Count = 1
Invoke<ModifyNetworkInterfaceAttributeResponse> -> executeModifyNetworkInterfaceAttribute: Probability = 1.00, Count = 1
NGit.Revwalk.Filter.NotRevFilter -> NotRevFilter: Probability = 1.00, Count = 2
up -> up: Probability = 0.50, Count = 1
up -> "+up: Probability = 0.50, Count = 1
returnState -> returnState: Probability = 1.00, Count = 7
returnState.ToString -> String.valueOf: Probability = 0.50, Count = 2
returnState.ToString -> returnState: Probability = 0.50, Count = 2
ToParentBlockJoinQuery -> ToParentBlockJoinQuery: Probability = 1.00, Count = 1
childQuery, -> childQuery,: Probability = 1.00, Count = 1
parentsFilter, -> BitSetProducer: Probability = 0.67, Count = 2
parentsFilter, -> childWeight,: Probability = 0.33, Count = 1
ScoreMode -> parentsFilter,: Probability = 0.50, Count = 2
ScoreMode -> ScoreMode: Probability = 0.50, Count = 2
scoreMode -> scoreMode: Probability = 0.78, Count = 7
scoreMode -> fromSearcher,ScoreMode: Probability = 0.11, Count = 1
scoreMode -> GenericTermsCollector: Probability = 0.11, Count = 1
childQuery -> this.childQuery: Probability = 0.33, Count = 1
childQuery -> childQuery: Probability = 0.33, Count = 1
childQuery -> this.parentsFilter: Probability = 0.33, Count = 1
parentsFilter -> parentsFilter: Probability = 0.40, Count = 2
parentsFilter -> this.scoreMode: Probability = 0.40, Count = 2
parentsFilter -> this.parentsFilter: Probability = 0.20, Count = 1
previous_1 -> previous: Probability = 1.00, Count = 3
iterator.previousIndex -> iterator.previousIndex: Probability = 1.00, Count = 2
GetSourcePath -> getSourcePath: Probability = 1.00, Count = 2
sourcePaths[idx] -> sourcePaths[idx]: Probability = 1.00, Count = 1
java.nio.ReadWriteDoubleArrayBuffer -> ReadWriteDoubleArrayBuffer: Probability = 1.00, Count = 3
DescribeEvaluationsResponse -> DescribeEvaluationsResult: Probability = 1.00, Count = 1
DescribeEvaluations -> describeEvaluations: Probability = 1.00, Count = 1
DescribeEvaluationsRequest -> DescribeEvaluationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeEvaluationsResponse> -> executeDescribeEvaluations: Probability = 1.00, Count = 1
GetBigBlockSize -> getBigBlockSize: Probability = 1.00, Count = 1
CreateRowVector -> createRowVector: Probability = 1.00, Count = 2
relativeRowIndex -> relativeRowIndex: Probability = 1.00, Count = 3
RowVector -> RowVector: Probability = 1.00, Count = 1
SetDbcell -> setDbcell: Probability = 1.00, Count = 1
field_5_dbcells.Set -> field_5_dbcells.set: Probability = 1.00, Count = 1
CompareSameType -> compareSameType: Probability = 1.00, Count = 5
StartSpeechSynthesisTaskResponse -> StartSpeechSynthesisTaskResult: Probability = 1.00, Count = 1
StartSpeechSynthesisTask -> startSpeechSynthesisTask: Probability = 1.00, Count = 1
StartSpeechSynthesisTaskRequest -> StartSpeechSynthesisTaskRequest: Probability = 1.00, Count = 1
Invoke<StartSpeechSynthesisTaskResponse> -> executeStartSpeechSynthesisTask: Probability = 1.00, Count = 1
RemoveParseListeners -> removeParseListeners: Probability = 1.00, Count = 1
ListIdentityPoolsResponse -> ListIdentityPoolsResult: Probability = 1.00, Count = 1
ListIdentityPools -> listIdentityPools: Probability = 1.00, Count = 1
ListIdentityPoolsRequest -> ListIdentityPoolsRequest: Probability = 1.00, Count = 1
Invoke<ListIdentityPoolsResponse> -> executeListIdentityPools: Probability = 1.00, Count = 1
SetWrapIfNotCachingTokenFilter -> setWrapIfNotCachingTokenFilter: Probability = 1.00, Count = 1
this.wrapToCaching -> this.wrapToCaching: Probability = 1.00, Count = 1
DeleteRuleResponse -> DeleteRuleResult: Probability = 1.00, Count = 1
DeleteRule -> deleteRule: Probability = 1.00, Count = 1
DeleteRuleRequest -> DeleteRuleRequest: Probability = 1.00, Count = 1
Invoke<DeleteRuleResponse> -> executeDeleteRule: Probability = 1.00, Count = 1
DelMenuCount -> getDelMenuCount: Probability = 1.00, Count = 1
getPattern -> getPattern: Probability = 1.00, Count = 1
.margin -> .margin: Probability = 1.00, Count = 3
Margin -> getMargin: Probability = 1.00, Count = 3
\n" -> \n": Probability = 1.00, Count = 7
ICharTermAttribute -> CharTermAttribute: Probability = 1.00, Count = 1
zzBuffer, -> t.copyBuffer: Probability = 1.00, Count = 1
zzStartRead, -> zzBuffer,: Probability = 0.50, Count = 1
zzStartRead, -> zzStartRead,: Probability = 0.50, Count = 1
zzStartRead -> zzMarkedPos-zzStartRead: Probability = 1.00, Count = 1
LinkedList -> LinkedList: Probability = 1.00, Count = 1
voidLink -> voidLink: Probability = 1.00, Count = 14
java.util.LinkedList.Link<E> -> Link<E>: Probability = 1.00, Count = 10
voidLink.previous -> voidLink.previous: Probability = 1.00, Count = 4
voidLink.next -> voidLink.next: Probability = 1.00, Count = 4
CreateSnapshotCopyGrantResponse -> SnapshotCopyGrant: Probability = 1.00, Count = 1
CreateSnapshotCopyGrant -> createSnapshotCopyGrant: Probability = 1.00, Count = 1
CreateSnapshotCopyGrantRequest -> CreateSnapshotCopyGrantRequest: Probability = 1.00, Count = 1
Invoke<CreateSnapshotCopyGrantResponse> -> executeCreateSnapshotCopyGrant: Probability = 1.00, Count = 1
minAlt -> minAlt: Probability = 0.50, Count = 2
minAlt -> alts.nextSetBit: Probability = 0.25, Count = 1
minAlt -> viableAlts.set: Probability = 0.25, Count = 1
viableAlts.NextSetBit -> viableAlts.nextSetBit: Probability = 1.00, Count = 1
GetRevertedRefs -> getRevertedRefs: Probability = 1.00, Count = 1
revertedRefs -> revertedRefs: Probability = 1.00, Count = 1
DetachPolicyResponse -> DetachPolicyResult: Probability = 1.00, Count = 1
DetachPolicy -> detachPolicy: Probability = 1.00, Count = 1
DetachPolicyRequest -> DetachPolicyRequest: Probability = 1.00, Count = 1
Invoke<DetachPolicyResponse> -> executeDetachPolicy: Probability = 1.00, Count = 1
writeUTF -> writeUTF: Probability = 1.00, Count = 2
DeleteBusinessReportScheduleResponse -> DeleteBusinessReportScheduleResult: Probability = 1.00, Count = 1
DeleteBusinessReportSchedule -> deleteBusinessReportSchedule: Probability = 1.00, Count = 1
DeleteBusinessReportScheduleRequest -> DeleteBusinessReportScheduleRequest: Probability = 1.00, Count = 1
Invoke<DeleteBusinessReportScheduleResponse> -> executeDeleteBusinessReportSchedule: Probability = 1.00, Count = 1
JapanesePartOfSpeechStopFilterFactory -> JapanesePartOfSpeechStopFilterFactory: Probability = 1.00, Count = 1
SetVaultNotificationsResponse -> SetVaultNotificationsResult: Probability = 1.00, Count = 1
SetVaultNotifications -> setVaultNotifications: Probability = 1.00, Count = 1
SetVaultNotificationsRequest -> SetVaultNotificationsRequest: Probability = 1.00, Count = 3
Invoke<SetVaultNotificationsResponse> -> executeSetVaultNotifications: Probability = 1.00, Count = 1
WriteBytes -> writeBytes: Probability = 1.00, Count = 3
System.Buffer.BlockCopy -> System.arraycopy: Probability = 1.00, Count = 6
UpdateLedgerResponse -> UpdateLedgerResult: Probability = 1.00, Count = 1
UpdateLedger -> updateLedger: Probability = 1.00, Count = 1
UpdateLedgerRequest -> UpdateLedgerRequest: Probability = 1.00, Count = 1
Invoke<UpdateLedgerResponse> -> executeUpdateLedger: Probability = 1.00, Count = 1
BatchDetectDominantLanguageResponse -> BatchDetectDominantLanguageResult: Probability = 1.00, Count = 1
BatchDetectDominantLanguage -> batchDetectDominantLanguage: Probability = 1.00, Count = 1
BatchDetectDominantLanguageRequest -> BatchDetectDominantLanguageRequest: Probability = 1.00, Count = 1
Invoke<BatchDetectDominantLanguageResponse> -> executeBatchDetectDominantLanguage: Probability = 1.00, Count = 1
PollForUpdates -> pollForUpdates: Probability = 0.50, Count = 1
PollForUpdates -> isMainThread: Probability = 0.50, Count = 1
DoUpdates -> doUpdates: Probability = 1.00, Count = 1
getAltNumber -> getAltNumber: Probability = 1.00, Count = 1
Atn.ATN.INVALID_ALT_NUMBER -> ATN.INVALID_ALT_NUMBER: Probability = 1.00, Count = 1
GetTimeout -> getTimeout: Probability = 1.00, Count = 1
CanReuse -> canReuse: Probability = 1.00, Count = 3
_inStart -> inStart: Probability = 1.00, Count = 1
DescribeMetricFiltersRequest -> DescribeMetricFiltersRequest: Probability = 1.00, Count = 1
trimToSize -> trimToSize: Probability = 1.00, Count = 2
char[count] -> char[count]: Probability = 1.00, Count = 2
newValue, -> newValue,: Probability = 1.00, Count = 2
shared -> shared: Probability = 0.90, Count = 9
shared -> value.clone: Probability = 0.10, Count = 1
ListTransformJobsResponse -> ListTransformJobsResult: Probability = 1.00, Count = 1
ListTransformJobs -> listTransformJobs: Probability = 1.00, Count = 1
ListTransformJobsRequest -> ListTransformJobsRequest: Probability = 1.00, Count = 1
Invoke<ListTransformJobsResponse> -> executeListTransformJobs: Probability = 1.00, Count = 1
IEvaluationName -> EvaluationName: Probability = 1.00, Count = 3
NamePtg -> NamePtg: Probability = 1.00, Count = 6
namePtg -> namePtg: Probability = 1.00, Count = 2
namePtg.Index -> namePtg.getIndex: Probability = 1.00, Count = 2
_iBook.GetNameRecord -> _iBook.getNameRecord: Probability = 1.00, Count = 3
NGit.Api.StashCreateCommand -> StashCreateCommand: Probability = 1.00, Count = 3
SetIndexMessage -> setIndexMessage: Probability = 1.00, Count = 1
indexMessage -> indexMessage: Probability = 1.00, Count = 1
HSSFPalette -> HSSFPalette: Probability = 0.67, Count = 2
HSSFPalette -> workbook.getCustomPalette: Probability = 0.33, Count = 1
GetCustomPalette -> getCustomPalette: Probability = 1.00, Count = 1
DeregisterTaskDefinitionResponse -> DeregisterTaskDefinitionResult: Probability = 1.00, Count = 1
DeregisterTaskDefinition -> deregisterTaskDefinition: Probability = 1.00, Count = 1
DeregisterTaskDefinitionRequest -> DeregisterTaskDefinitionRequest: Probability = 1.00, Count = 1
Invoke<DeregisterTaskDefinitionResponse> -> executeDeregisterTaskDefinition: Probability = 1.00, Count = 1
_pattern -> pattern: Probability = 1.00, Count = 2
SetThreads -> setThreads: Probability = 1.00, Count = 1
threads -> threads: Probability = 1.00, Count = 3
this.threads -> this.threads: Probability = 1.00, Count = 1
GetNewId -> getNewId: Probability = 1.00, Count = 4
GetEbsDefaultKmsKeyIdResponse -> GetEbsDefaultKmsKeyIdResult: Probability = 1.00, Count = 1
GetEbsDefaultKmsKeyId -> getEbsDefaultKmsKeyId: Probability = 1.00, Count = 1
GetEbsDefaultKmsKeyIdRequest -> GetEbsDefaultKmsKeyIdRequest: Probability = 1.00, Count = 1
Invoke<GetEbsDefaultKmsKeyIdResponse> -> executeGetEbsDefaultKmsKeyId: Probability = 1.00, Count = 1
DocsAndPositionsEnum -> ": Probability = 0.67, Count = 2
DocsAndPositionsEnum -> postingsEnum: Probability = 0.33, Count = 1
DeleteCacheParameterGroupRequest -> DeleteCacheParameterGroupRequest: Probability = 1.00, Count = 1
headMap -> headMap: Probability = 1.00, Count = 2
java.util.TreeMap.Bound.NO_BOUND, -> NO_BOUND,: Probability = 1.00, Count = 2
GetOutputStream -> getOutputStream: Probability = 1.00, Count = 2
rawOut -> rawOut: Probability = 1.00, Count = 1
bool? -> Boolean: Probability = 1.00, Count = 3
BooleanValue -> booleanValue: Probability = 1.00, Count = 1
ATN -> ATN: Probability = 1.00, Count = 7
serializedAtn -> getATNWithBypassAlts: Probability = 0.20, Count = 1
serializedAtn -> serializedAtn: Probability = 0.60, Count = 3
serializedAtn -> getSerializedATN: Probability = 0.20, Count = 1
NotSupportedException -> UnsupportedOperationException: Probability = 1.00, Count = 20
parser -> parser: Probability = 1.00, Count = 11
deserializationOptions -> deserializationOptions: Probability = 0.86, Count = 6
deserializationOptions -> ATNDeserializationOptions.getDefaultOptions: Probability = 0.14, Count = 1
ATNDeserializer -> ATNDeserializer: Probability = 1.00, Count = 2
GetDownloadUrlRequest -> GetDownloadUrlRequest: Probability = 1.00, Count = 1
"GetDownloadUrl", -> "GetDownloadUrl",: Probability = 1.00, Count = 1
GetCRC -> getCRC: Probability = 1.00, Count = 1
crc -> crc: Probability = 1.00, Count = 2
AddEscherRecord -> addEscherRecord: Probability = 1.00, Count = 2
ModifyWorkspaceStateResponse -> ModifyWorkspaceStateResult: Probability = 1.00, Count = 1
ModifyWorkspaceState -> modifyWorkspaceState: Probability = 1.00, Count = 1
ModifyWorkspaceStateRequest -> ModifyWorkspaceStateRequest: Probability = 1.00, Count = 1
Invoke<ModifyWorkspaceStateResponse> -> executeModifyWorkspaceState: Probability = 1.00, Count = 1
ICUTransformFilter -> ICUTransformFilter: Probability = 1.00, Count = 2
transform -> Transliterator: Probability = 0.14, Count = 1
transform -> transform: Probability = 0.43, Count = 3
transform -> this.transform: Probability = 0.14, Count = 1
transform -> transform.getFilter: Probability = 0.14, Count = 1
transform -> com.ibm.icu.text.RuleBasedTransliterator: Probability = 0.14, Count = 1
UnicodeSet -> UnicodeSet: Probability = 1.00, Count = 5
sourceSet -> sourceSet: Probability = 0.50, Count = 3
sourceSet -> transform.getSourceSet: Probability = 0.17, Count = 1
sourceSet -> !sourceSet.isEmpty: Probability = 0.17, Count = 1
sourceSet -> transform.setFilter: Probability = 0.17, Count = 1
StopGameSessionPlacementResponse -> StopGameSessionPlacementResult: Probability = 1.00, Count = 1
StopGameSessionPlacement -> stopGameSessionPlacement: Probability = 1.00, Count = 1
StopGameSessionPlacementRequest -> StopGameSessionPlacementRequest: Probability = 1.00, Count = 1
Invoke<StopGameSessionPlacementResponse> -> executeStopGameSessionPlacement: Probability = 1.00, Count = 1
RefModeRecord -> RefModeRecord: Probability = 1.00, Count = 2
AddURI -> addURI: Probability = 1.00, Count = 1
toAdd -> toAdd: Probability = 1.00, Count = 6
uris.Contains -> uris.contains: Probability = 1.00, Count = 1
uris.AddItem -> uris.add: Probability = 1.00, Count = 1
GetOldMode -> getOldMode: Probability = 1.00, Count = 4
ICollection<RemoteRefUpdate> -> Collection<RemoteRefUpdate>: Probability = 0.50, Count = 1
ICollection<RemoteRefUpdate> -> getRemoteUpdates: Probability = 0.50, Count = 1
_wholePart.ToString -> _wholePart: Probability = 0.67, Count = 2
_wholePart.ToString -> Long.toString: Probability = 0.33, Count = 1
GetDecimalExponent -> getDecimalExponent: Probability = 1.00, Count = 2
CreateCollectionResponse -> CreateCollectionResult: Probability = 1.00, Count = 1
CreateCollection -> createCollection: Probability = 1.00, Count = 1
CreateCollectionRequest -> CreateCollectionRequest: Probability = 1.00, Count = 2
Invoke<CreateCollectionResponse> -> executeCreateCollection: Probability = 1.00, Count = 1
Invoke<ChangeMessageVisibilityBatchResponse> -> executeChangeMessageVisibilityBatch: Probability = 1.00, Count = 1
SetInstance -> setInstance: Probability = 1.00, Count = 1
SshSessionFactory -> SshSessionFactory: Probability = 1.00, Count = 3
newFactory -> newFactory: Probability = 1.00, Count = 3
DefaultSshSessionFactory -> loadSshSessionFactory: Probability = 1.00, Count = 1
GetRepoSyncTaskListRequest -> GetRepoSyncTaskListRequest: Probability = 1.00, Count = 1
"GetRepoSyncTaskList", -> "GetRepoSyncTaskList",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/syncTasks" -> "/repos/[RepoNamespace]/[RepoName]/syncTasks": Probability = 1.00, Count = 2
imageId, -> imageId,: Probability = 1.00, Count = 3
_imageId -> setImageId: Probability = 0.60, Count = 3
_imageId -> imageId: Probability = 0.40, Count = 2
_minCount -> setMinCount: Probability = 1.00, Count = 1
_maxCount -> setMaxCount: Probability = 1.00, Count = 1
DeleteCodeRepositoryResponse -> DeleteCodeRepositoryResult: Probability = 1.00, Count = 1
DeleteCodeRepository -> deleteCodeRepository: Probability = 1.00, Count = 1
DeleteCodeRepositoryRequest -> DeleteCodeRepositoryRequest: Probability = 1.00, Count = 1
Invoke<DeleteCodeRepositoryResponse> -> executeDeleteCodeRepository: Probability = 1.00, Count = 1
fromIndex, -> fromIndex,: Probability = 1.00, Count = 4
toIndex, -> toIndex,: Probability = 1.00, Count = 6
fromIndex -> fromIndex: Probability = 1.00, Count = 7
toIndex -> toIndex: Probability = 1.00, Count = 6
blockValue -> blockValue: Probability = 1.00, Count = 4
0L -> 0L: Probability = 1.00, Count = 5
ListDomainNamesResponse -> ListDomainNamesResult: Probability = 1.00, Count = 2
ListDomainNames -> listDomainNames: Probability = 1.00, Count = 3
ListDomainNamesRequest -> ListDomainNamesRequest: Probability = 1.00, Count = 2
AbortMultipartUploadRequest -> AbortMultipartUploadRequest: Probability = 1.00, Count = 3
accountId, -> accountId,: Probability = 1.00, Count = 14
_accountId -> setAccountId: Probability = 0.88, Count = 14
_accountId -> accountId: Probability = 0.12, Count = 2
accountId -> accountId: Probability = 0.65, Count = 15
accountId -> ): Probability = 0.30, Count = 7
accountId -> "AWS",: Probability = 0.04, Count = 1
GetNewHead -> getNewHead: Probability = 1.00, Count = 1
newHead -> newHead: Probability = 1.00, Count = 2
3L -> 3L: Probability = 1.00, Count = 1
UpdateContainerInstancesStateResponse -> UpdateContainerInstancesStateResult: Probability = 1.00, Count = 1
UpdateContainerInstancesState -> updateContainerInstancesState: Probability = 1.00, Count = 1
UpdateContainerInstancesStateRequest -> UpdateContainerInstancesStateRequest: Probability = 1.00, Count = 1
Invoke<UpdateContainerInstancesStateResponse> -> executeUpdateContainerInstancesState: Probability = 1.00, Count = 1
GetExternalModelsResponse -> GetExternalModelsResult: Probability = 1.00, Count = 1
GetExternalModels -> getExternalModels: Probability = 1.00, Count = 1
GetExternalModelsRequest -> GetExternalModelsRequest: Probability = 1.00, Count = 1
Invoke<GetExternalModelsResponse> -> executeGetExternalModels: Probability = 1.00, Count = 1
GetFaceDetectionResponse -> GetFaceDetectionResult: Probability = 1.00, Count = 1
GetFaceDetection -> getFaceDetection: Probability = 1.00, Count = 1
GetFaceDetectionRequest -> GetFaceDetectionRequest: Probability = 1.00, Count = 1
Invoke<GetFaceDetectionResponse> -> executeGetFaceDetection: Probability = 1.00, Count = 1
Delete -> delete: Probability = 1.00, Count = 7
outerInstance -> SnapshotDeletionPolicy.this: Probability = 0.50, Count = 1
outerInstance -> TermQuery.this: Probability = 0.50, Count = 1
!outerInstance.m_refCounts.ContainsKey -> !refCounts.containsKey: Probability = 0.50, Count = 1
!outerInstance.m_refCounts.ContainsKey -> cp.getGeneration: Probability = 0.50, Count = 1
m_cp.Delete -> cp.delete: Probability = 1.00, Count = 1
java.util.LinkedList<E>.ReverseLinkIterator<E> -> ReverseLinkIterator<E>: Probability = 1.00, Count = 2
CredentialsBackupCompatibilityAdaptor -> CredentialsBackupCompatibilityAdaptor: Probability = 1.00, Count = 2
AlibabaCloudCredentialsProvider -> AlibabaCloudCredentialsProvider: Probability = 1.00, Count = 3
provider -> provider: Probability = 1.00, Count = 3
this.provider -> this.provider: Probability = 1.00, Count = 3
DescribeDBClusterSnapshotsResponse -> DescribeDBClusterSnapshotsResult: Probability = 1.00, Count = 1
DescribeDBClusterSnapshots -> describeDBClusterSnapshots: Probability = 1.00, Count = 1
DescribeDBClusterSnapshotsRequest -> DescribeDBClusterSnapshotsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBClusterSnapshotsResponse> -> executeDescribeDBClusterSnapshots: Probability = 1.00, Count = 1
numfonts -> numfonts: Probability = 1.00, Count = 4
font -> font: Probability = 0.90, Count = 9
font -> setFont: Probability = 0.10, Count = 1
records[ -> records.get: Probability = 1.00, Count = 3
records.Fontpos -> records.getFontpos: Probability = 0.80, Count = 4
records.Fontpos -> records.setFontpos: Probability = 0.20, Count = 1
DescribeCustomerGatewaysResponse -> DescribeCustomerGatewaysResult: Probability = 1.00, Count = 2
DescribeCustomerGateways -> describeCustomerGateways: Probability = 1.00, Count = 3
DescribeCustomerGatewaysRequest -> DescribeCustomerGatewaysRequest: Probability = 1.00, Count = 2
CreateSubnetRequest -> CreateSubnetRequest: Probability = 1.00, Count = 2
vpcId, -> vpcId,: Probability = 1.00, Count = 1
cidrBlock -> cidrBlock: Probability = 1.00, Count = 4
_vpcId -> setVpcId: Probability = 1.00, Count = 5
vpcId -> vpcId: Probability = 0.64, Count = 9
vpcId -> ): Probability = 0.36, Count = 5
_cidrBlock -> setCidrBlock: Probability = 1.00, Count = 2
StempelStemmer -> StempelStemmer: Probability = 0.75, Count = 3
StempelStemmer -> PolishAnalyzer.getDefaultTable: Probability = 0.25, Count = 1
this.stemmer -> this.stemmer: Probability = 1.00, Count = 4
NLPNERTaggerOp -> NLPNERTaggerOp: Probability = 1.00, Count = 1
TokenNameFinderModel -> TokenNameFinderModel: Probability = 1.00, Count = 1
model -> model: Probability = 1.00, Count = 4
this.nameFinder -> this.nameFinder: Probability = 1.00, Count = 1
NameFinderME -> NameFinderME: Probability = 1.00, Count = 1
NGit.Revwalk.FollowFilter -> FollowFilter: Probability = 1.00, Count = 1
PathFilter -> path.clone: Probability = 1.00, Count = 1
path.Clone -> cfg: Probability = 1.00, Count = 1
QueryAddUserInfoRequest -> QueryAddUserInfoRequest: Probability = 1.00, Count = 1
"QueryAddUserInfo" -> "QueryAddUserInfo": Probability = 1.00, Count = 1
TreeWalk -> TreeWalk: Probability = 1.00, Count = 10
walker -> walker: Probability = 1.00, Count = 9
DirCacheIterator -> DirCacheIterator: Probability = 1.00, Count = 3
walker.GetTree<DirCacheIterator> -> walker.getTree: Probability = 0.50, Count = 1
walker.GetTree<DirCacheIterator> -> treeIdx,: Probability = 0.50, Count = 1
DirCacheEntry -> DirCacheEntry: Probability = 1.00, Count = 7
!e.IsSkipWorkTree -> !e.isSkipWorkTree: Probability = 1.00, Count = 1
CompareResult -> CompareResult: Probability = 1.00, Count = 3
"Compare -> "compare: Probability = 1.00, Count = 1
_targetType -> _targetClass: Probability = 1.00, Count = 1
CompareResult.TypeMismatch -> CompareResult.TYPE_MISMATCH: Probability = 1.00, Count = 1
SegmentReadState -> SegmentReadState: Probability = 0.80, Count = 4
SegmentReadState -> other,String: Probability = 0.20, Count = 1
newSegmentSuffix -> newSegmentSuffix: Probability = 1.00, Count = 2
this.Directory -> this.directory: Probability = 1.00, Count = 1
other.Directory -> other.directory: Probability = 1.00, Count = 1
other.SegmentInfo -> this.segmentInfo: Probability = 1.00, Count = 1
this.FieldInfos -> other.segmentInfo: Probability = 1.00, Count = 1
other.FieldInfos -> this.fieldInfos: Probability = 1.00, Count = 1
this.Context -> other.fieldInfos: Probability = 1.00, Count = 1
this.TermsIndexDivisor -> other.context: Probability = 1.00, Count = 1
this.SegmentSuffix -> this.segmentSuffix: Probability = 1.00, Count = 1
DeleteModelResponse -> DeleteModelResult: Probability = 1.00, Count = 1
DeleteModel -> deleteModel: Probability = 1.00, Count = 1
DeleteModelRequest -> DeleteModelRequest: Probability = 1.00, Count = 1
Invoke<DeleteModelResponse> -> executeDeleteModel: Probability = 1.00, Count = 1
SetFiles -> setFiles: Probability = 1.00, Count = 2
setFiles -> addFiles: Probability = 1.00, Count = 1
Release -> release: Probability = 1.00, Count = 4
reader.Release -> lItr.release: Probability = 1.00, Count = 1
valueIfKeyNotFound -> valueIfKeyNotFound: Probability = 1.00, Count = 4
_iBook.ResolveNameXText -> _iBook.resolveNameXText: Probability = 0.50, Count = 1
_iBook.ResolveNameXText -> n.getSheetRefIndex: Probability = 0.50, Count = 1
n.SheetRefIndex, -> n.getNameIndex: Probability = 1.00, Count = 1
_representation -> _representation: Probability = 1.00, Count = 4
PutEmailIdentityMailFromAttributesResponse -> PutEmailIdentityMailFromAttributesResult: Probability = 1.00, Count = 1
PutEmailIdentityMailFromAttributes -> putEmailIdentityMailFromAttributes: Probability = 1.00, Count = 1
PutEmailIdentityMailFromAttributesRequest -> PutEmailIdentityMailFromAttributesRequest: Probability = 1.00, Count = 1
Invoke<PutEmailIdentityMailFromAttributesResponse> -> executePutEmailIdentityMailFromAttributes: Probability = 1.00, Count = 1
RemoveAlbumPhotosRequest -> RemoveAlbumPhotosRequest: Probability = 1.00, Count = 1
"RemoveAlbumPhotos", -> "RemoveAlbumPhotos",: Probability = 1.00, Count = 1
DeleteAttributesResponse -> DeleteAttributesResult: Probability = 1.00, Count = 1
DeleteAttributes -> deleteAttributes: Probability = 1.00, Count = 1
Invoke<DeleteAttributesResponse> -> executeDeleteAttributes: Probability = 1.00, Count = 1
destination.SetRefLogMessage -> destination.setRefLogMessage: Probability = 0.50, Count = 1
destination.SetRefLogMessage -> elsedestination.setRefLogMessage: Probability = 0.50, Count = 1
string.Empty, -> "",: Probability = 1.00, Count = 1
GermanLightStemFilter -> GermanLightStemFilter: Probability = 1.00, Count = 1
removeLast -> removeLast: Probability = 1.00, Count = 1
removeLastImpl -> removeLastImpl: Probability = 1.00, Count = 2
UpdateDomainMetadataResponse -> UpdateDomainMetadataResult: Probability = 1.00, Count = 1
UpdateDomainMetadata -> updateDomainMetadata: Probability = 1.00, Count = 1
UpdateDomainMetadataRequest -> UpdateDomainMetadataRequest: Probability = 1.00, Count = 1
Invoke<UpdateDomainMetadataResponse> -> executeUpdateDomainMetadata: Probability = 1.00, Count = 1
"FacetEntry -> "FacetEntry: Probability = 1.00, Count = 1
+"value=" -> +"value=": Probability = 1.00, Count = 1
value.Utf8ToString -> value.utf8ToString: Probability = 1.00, Count = 1
+", -> +",: Probability = 0.34, Count = 10
+", -> +"decision=": Probability = 0.03, Count = 1
+", -> contextSensitivities=": Probability = 0.03, Count = 1
+", -> contextSensitivities.size: Probability = 0.03, Count = 1
+", -> errors=": Probability = 0.03, Count = 1
+", -> errors.size: Probability = 0.03, Count = 1
+", -> ambiguities=": Probability = 0.03, Count = 1
+", -> ambiguities.size: Probability = 0.03, Count = 1
+", -> SLL_lookahead=": Probability = 0.03, Count = 1
+", -> SLL_TotalLook: Probability = 0.03, Count = 1
+", -> SLL_ATNTransitions=": Probability = 0.03, Count = 1
+", -> SLL_ATNTransitions: Probability = 0.03, Count = 1
+", -> SLL_DFATransitions=": Probability = 0.03, Count = 1
+", -> SLL_DFATransitions: Probability = 0.03, Count = 1
+", -> LL_Fallback=": Probability = 0.03, Count = 1
+", -> LL_Fallback: Probability = 0.03, Count = 1
+", -> LL_lookahead=": Probability = 0.03, Count = 1
+", -> LL_TotalLook: Probability = 0.03, Count = 1
+", -> LL_ATNTransitions=": Probability = 0.03, Count = 1
+", -> LL_ATNTransitions: Probability = 0.03, Count = 1
count=" -> count=": Probability = 1.00, Count = 2
+' -> +': Probability = 1.00, Count = 2
SharedFormulaRecord -> SharedFormulaRecord: Probability = 1.00, Count = 4
LinkSharedFormulaRecord -> linkSharedFormulaRecord: Probability = 1.00, Count = 1
firstCell, -> firstCell,: Probability = 1.00, Count = 1
agg -> agg: Probability = 1.00, Count = 5
SharedFormulaGroup -> SharedFormulaGroup: Probability = 1.00, Count = 2
FindFormulaGroupForCell -> findFormulaGroupForCell: Probability = 1.00, Count = 1
firstCell -> firstCell: Probability = 1.00, Count = 3
"Failed -> "Failed: Probability = 1.00, Count = 3
matching -> matching: Probability = 1.00, Count = 3
record" -> record": Probability = 1.00, Count = 2
result.SFR -> result.getSFR: Probability = 1.00, Count = 1
field_1_label_index -> field_1_label_index: Probability = 1.00, Count = 3
field_2_zero -> field_2_zero: Probability = 1.00, Count = 2
OpenStringBuilder -> Appendable: Probability = 0.60, Count = 3
OpenStringBuilder -> OpenStringBuilder: Probability = 0.40, Count = 2
csq.Length -> this: Probability = 1.00, Count = 1
DelimitedPayloadTokenFilter -> DelimitedPayloadTokenFilter: Probability = 1.00, Count = 3
delimiter, -> delimiter,: Probability = 1.00, Count = 2
encoder -> encoder: Probability = 0.54, Count = 7
encoder -> PayloadEncoder: Probability = 0.08, Count = 1
encoder -> this.delimiter: Probability = 0.08, Count = 1
encoder -> IntegerEncoder: Probability = 0.08, Count = 1
encoder -> "identity": Probability = 0.08, Count = 1
encoder -> encoderClass,: Probability = 0.08, Count = 1
encoder -> PayloadEncoder.class: Probability = 0.08, Count = 1
"NONE" -> "NONE": Probability = 1.00, Count = 1
GetAlarmsResponse -> GetAlarmsResult: Probability = 1.00, Count = 1
GetAlarms -> getAlarms: Probability = 1.00, Count = 1
GetAlarmsRequest -> GetAlarmsRequest: Probability = 1.00, Count = 1
Invoke<GetAlarmsResponse> -> executeGetAlarms: Probability = 1.00, Count = 1
DeleteDetectorVersionResponse -> DeleteDetectorVersionResult: Probability = 1.00, Count = 1
DeleteDetectorVersion -> deleteDetectorVersion: Probability = 1.00, Count = 1
DeleteDetectorVersionRequest -> DeleteDetectorVersionRequest: Probability = 1.00, Count = 1
Invoke<DeleteDetectorVersionResponse> -> executeDeleteDetectorVersion: Probability = 1.00, Count = 1
CreateExpandedDouble -> createExpandedDouble: Probability = 1.00, Count = 1
_significand, -> _significand,: Probability = 1.00, Count = 4
java.nio.CharToByteBufferAdapter -> CharToByteBufferAdapter: Probability = 1.00, Count = 3
ResetInstanceAttributeRequest -> ResetInstanceAttributeRequest: Probability = 1.00, Count = 2
GetFooterLines -> List<FooterLine>: Probability = 0.29, Count = 2
GetFooterLines -> getFooterLines: Probability = 0.43, Count = 3
GetFooterLines -> final: Probability = 0.29, Count = 2
msgB -> msgB: Probability = 0.71, Count = 10
msgB -> RawParseUtils.commitMessage: Probability = 0.21, Count = 3
msgB -> RawParseUtils.tagMessage: Probability = 0.07, Count = 1
raw, -> raw,: Probability = 0.87, Count = 26
raw, -> guessEncoding: Probability = 0.13, Count = 4
enc -> enc: Probability = 0.56, Count = 5
enc -> UnsupportedEncodingException: Probability = 0.22, Count = 2
enc -> parseEncoding: Probability = 0.11, Count = 1
enc -> parseEncodingName: Probability = 0.11, Count = 1
keyEnd -> keyStart: Probability = 0.43, Count = 3
keyEnd -> keyEnd: Probability = 0.57, Count = 4
valStart -> valStart: Probability = 1.00, Count = 4
RawParseUtils.NextLF -> RawParseUtils.nextLF: Probability = 1.00, Count = 5
GetExternalBookRecord -> getExternalBookRecord: Probability = 1.00, Count = 1
ApplySecurityGroupsToLoadBalancerResponse -> ApplySecurityGroupsToLoadBalancerResult: Probability = 1.00, Count = 1
ApplySecurityGroupsToLoadBalancer -> applySecurityGroupsToLoadBalancer: Probability = 1.00, Count = 1
ApplySecurityGroupsToLoadBalancerRequest -> ApplySecurityGroupsToLoadBalancerRequest: Probability = 1.00, Count = 1
Invoke<ApplySecurityGroupsToLoadBalancerResponse> -> executeApplySecurityGroupsToLoadBalancer: Probability = 1.00, Count = 1
DeleteDedicatedIpPoolResponse -> DeleteDedicatedIpPoolResult: Probability = 1.00, Count = 1
DeleteDedicatedIpPool -> deleteDedicatedIpPool: Probability = 1.00, Count = 1
DeleteDedicatedIpPoolRequest -> DeleteDedicatedIpPoolRequest: Probability = 1.00, Count = 1
Invoke<DeleteDedicatedIpPoolResponse> -> executeDeleteDedicatedIpPool: Probability = 1.00, Count = 1
DescribeStackInstanceResponse -> DescribeStackInstanceResult: Probability = 1.00, Count = 1
DescribeStackInstance -> describeStackInstance: Probability = 1.00, Count = 1
DescribeStackInstanceRequest -> DescribeStackInstanceRequest: Probability = 1.00, Count = 1
Invoke<DescribeStackInstanceResponse> -> executeDescribeStackInstance: Probability = 1.00, Count = 1
EscherChildAnchorRecord -> EscherChildAnchorRecord: Probability = 1.00, Count = 3
escherChildAnchorRecord -> escherChildAnchorRecord: Probability = 1.00, Count = 2
this._escherChildAnchor -> this._escherChildAnchor: Probability = 1.00, Count = 1
_currentRowIndex -> _currentRowIndex: Probability = 1.00, Count = 6
_currentRectangleGroup -> _currentRectangleGroup: Probability = 1.00, Count = 5
BlankCellRectangleGroup -> BlankCellRectangleGroup: Probability = 1.00, Count = 3
_firstColumnIndex, -> _currentRowIndex,: Probability = 0.50, Count = 3
_firstColumnIndex, -> _firstColumnIndex,: Probability = 0.50, Count = 3
"BLOCK: -> "BLOCK:: Probability = 0.67, Count = 2
"BLOCK: -> prefix=": Probability = 0.33, Count = 1
Prefix.Utf8ToString -> brToString: Probability = 0.50, Count = 2
Prefix.Utf8ToString -> prefix: Probability = 0.50, Count = 2
7L -> 7L: Probability = 1.00, Count = 2
e.getValue -> e.getValue: Probability = 1.00, Count = 8
DescribeDirectConnectGatewayAssociationsResponse -> DescribeDirectConnectGatewayAssociationsResult: Probability = 1.00, Count = 1
DescribeDirectConnectGatewayAssociations -> describeDirectConnectGatewayAssociations: Probability = 1.00, Count = 1
DescribeDirectConnectGatewayAssociationsRequest -> DescribeDirectConnectGatewayAssociationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDirectConnectGatewayAssociationsResponse> -> executeDescribeDirectConnectGatewayAssociations: Probability = 1.00, Count = 1
GetRestApiResponse -> GetRestApiResult: Probability = 1.00, Count = 1
GetRestApi -> getRestApi: Probability = 1.00, Count = 1
GetRestApiRequest -> GetRestApiRequest: Probability = 1.00, Count = 1
Invoke<GetRestApiResponse> -> executeGetRestApi: Probability = 1.00, Count = 1
CreateLaunchTemplateVersionResponse -> CreateLaunchTemplateVersionResult: Probability = 1.00, Count = 1
CreateLaunchTemplateVersion -> createLaunchTemplateVersion: Probability = 1.00, Count = 1
CreateLaunchTemplateVersionRequest -> CreateLaunchTemplateVersionRequest: Probability = 1.00, Count = 1
Invoke<CreateLaunchTemplateVersionResponse> -> executeCreateLaunchTemplateVersion: Probability = 1.00, Count = 1
SetLoadBalancerPoliciesOfListenerResponse -> SetLoadBalancerPoliciesOfListenerResult: Probability = 1.00, Count = 1
SetLoadBalancerPoliciesOfListener -> setLoadBalancerPoliciesOfListener: Probability = 1.00, Count = 1
SetLoadBalancerPoliciesOfListenerRequest -> SetLoadBalancerPoliciesOfListenerRequest: Probability = 1.00, Count = 1
Invoke<SetLoadBalancerPoliciesOfListenerResponse> -> executeSetLoadBalancerPoliciesOfListener: Probability = 1.00, Count = 1
SoraniNormalizationFilter -> SoraniNormalizationFilter: Probability = 1.00, Count = 2
UpdateTerminationProtectionResponse -> UpdateTerminationProtectionResult: Probability = 1.00, Count = 1
UpdateTerminationProtection -> updateTerminationProtection: Probability = 1.00, Count = 1
UpdateTerminationProtectionRequest -> UpdateTerminationProtectionRequest: Probability = 1.00, Count = 1
Invoke<UpdateTerminationProtectionResponse> -> executeUpdateTerminationProtection: Probability = 1.00, Count = 1
AddChildRecord -> addChildRecord: Probability = 1.00, Count = 3
this._childRecords.Add -> _childRecords.add: Probability = 1.00, Count = 1
SetIdentityMailFromDomainResponse -> SetIdentityMailFromDomainResult: Probability = 1.00, Count = 1
SetIdentityMailFromDomain -> setIdentityMailFromDomain: Probability = 1.00, Count = 1
SetIdentityMailFromDomainRequest -> SetIdentityMailFromDomainRequest: Probability = 1.00, Count = 1
Invoke<SetIdentityMailFromDomainResponse> -> executeSetIdentityMailFromDomain: Probability = 1.00, Count = 1
link.next -> link.next: Probability = 1.00, Count = 12
link.data -> link.data: Probability = 1.00, Count = 9
UpdateJobResponse -> UpdateJobResult: Probability = 1.00, Count = 1
UpdateJob -> updateJob: Probability = 1.00, Count = 1
UpdateJobRequest -> UpdateJobRequest: Probability = 1.00, Count = 1
Invoke<UpdateJobResponse> -> executeUpdateJob: Probability = 1.00, Count = 1
ListInvitationsResponse -> ListInvitationsResult: Probability = 1.00, Count = 1
ListInvitations -> listInvitations: Probability = 1.00, Count = 1
ListInvitationsRequest -> ListInvitationsRequest: Probability = 1.00, Count = 1
Invoke<ListInvitationsResponse> -> executeListInvitations: Probability = 1.00, Count = 1
ListTrialsResponse -> ListTrialsResult: Probability = 1.00, Count = 1
ListTrials -> listTrials: Probability = 1.00, Count = 1
ListTrialsRequest -> ListTrialsRequest: Probability = 1.00, Count = 1
Invoke<ListTrialsResponse> -> executeListTrials: Probability = 1.00, Count = 1
CreateDocumentClassifierResponse -> CreateDocumentClassifierResult: Probability = 1.00, Count = 1
CreateDocumentClassifier -> createDocumentClassifier: Probability = 1.00, Count = 1
CreateDocumentClassifierRequest -> CreateDocumentClassifierRequest: Probability = 1.00, Count = 1
Invoke<CreateDocumentClassifierResponse> -> executeCreateDocumentClassifier: Probability = 1.00, Count = 1
GetPasswordDataResponse -> GetPasswordDataResult: Probability = 1.00, Count = 1
GetPasswordData -> getPasswordData: Probability = 1.00, Count = 1
GetPasswordDataRequest -> GetPasswordDataRequest: Probability = 1.00, Count = 2
Invoke<GetPasswordDataResponse> -> executeGetPasswordData: Probability = 1.00, Count = 1
Text -> text: Probability = 1.00, Count = 2
Bytes -> bytes: Probability = 0.75, Count = 3
Bytes -> BytesRef.deepCopyOf: Probability = 0.25, Count = 1
HSSFPicture -> HSSFPicture: Probability = 1.00, Count = 6
HSSFAnchor -> HSSFAnchor: Probability = 1.00, Count = 10
anchor -> anchor: Probability = 0.92, Count = 34
anchor -> shape.setParent: Probability = 0.08, Count = 3
base.ShapeType -> OBJECT_TYPE_PICTURE: Probability = 0.50, Count = 1
base.ShapeType -> OBJECT_TYPE_COMBO_BOX: Probability = 0.50, Count = 1
CommonObjectDataSubRecord -> CommonObjectDataSubRecord: Probability = 0.50, Count = 6
CommonObjectDataSubRecord -> cod: Probability = 0.17, Count = 2
CommonObjectDataSubRecord -> getObjRecord: Probability = 0.17, Count = 2
CommonObjectDataSubRecord -> .getSubRecords: Probability = 0.17, Count = 2
GetObjRecord -> .get: Probability = 1.00, Count = 2
cod.ObjectType -> cod.setObjectType: Probability = 1.00, Count = 2
CommonObjectType.Picture -> CommonObjectDataSubRecord.OBJECT_TYPE_PICTURE: Probability = 1.00, Count = 1
SubSequence -> CharSequence: Probability = 0.20, Count = 1
SubSequence -> subSequence: Probability = 0.80, Count = 4
NGit.Util.RawCharSequence -> RawCharSequence: Probability = 1.00, Count = 1
DeleteAccessPointResponse -> DeleteAccessPointResult: Probability = 1.00, Count = 1
DeleteAccessPoint -> deleteAccessPoint: Probability = 1.00, Count = 1
DeleteAccessPointRequest -> DeleteAccessPointRequest: Probability = 1.00, Count = 1
Invoke<DeleteAccessPointResponse> -> executeDeleteAccessPoint: Probability = 1.00, Count = 1
DescribeSubnetsResponse -> DescribeSubnetsResult: Probability = 1.00, Count = 2
DescribeSubnets -> describeSubnets: Probability = 1.00, Count = 3
DescribeSubnetsRequest -> DescribeSubnetsRequest: Probability = 1.00, Count = 2
AddTagsToOnPremisesInstancesResponse -> AddTagsToOnPremisesInstancesResult: Probability = 1.00, Count = 1
AddTagsToOnPremisesInstances -> addTagsToOnPremisesInstances: Probability = 1.00, Count = 1
AddTagsToOnPremisesInstancesRequest -> AddTagsToOnPremisesInstancesRequest: Probability = 1.00, Count = 1
Invoke<AddTagsToOnPremisesInstancesResponse> -> executeAddTagsToOnPremisesInstances: Probability = 1.00, Count = 1
CoerceValueToString -> coerceValueToString: Probability = 1.00, Count = 1
StringValueEval -> StringValueEval: Probability = 0.60, Count = 3
StringValueEval -> sve: Probability = 0.20, Count = 1
StringValueEval -> sve.getStringValue: Probability = 0.20, Count = 1
CreateVpcLinkResponse -> CreateVpcLinkResult: Probability = 1.00, Count = 1
CreateVpcLink -> createVpcLink: Probability = 1.00, Count = 1
CreateVpcLinkRequest -> CreateVpcLinkRequest: Probability = 1.00, Count = 1
Invoke<CreateVpcLinkResponse> -> executeCreateVpcLink: Probability = 1.00, Count = 1
DescribeTrafficMirrorTargetsResponse -> DescribeTrafficMirrorTargetsResult: Probability = 1.00, Count = 1
DescribeTrafficMirrorTargets -> describeTrafficMirrorTargets: Probability = 1.00, Count = 1
DescribeTrafficMirrorTargetsRequest -> DescribeTrafficMirrorTargetsRequest: Probability = 1.00, Count = 1
Invoke<DescribeTrafficMirrorTargetsResponse> -> executeDescribeTrafficMirrorTargets: Probability = 1.00, Count = 1
SetRepositoryPolicyResponse -> SetRepositoryPolicyResult: Probability = 1.00, Count = 1
SetRepositoryPolicy -> setRepositoryPolicy: Probability = 1.00, Count = 1
SetRepositoryPolicyRequest -> SetRepositoryPolicyRequest: Probability = 1.00, Count = 1
Invoke<SetRepositoryPolicyResponse> -> executeSetRepositoryPolicy: Probability = 1.00, Count = 1
"UNKNOWN" -> "UNKNOWN": Probability = 1.00, Count = 1
d0, -> d0,: Probability = 1.00, Count = 4
4095L -> 4095L: Probability = 1.00, Count = 2
ProtectionRev4Record -> ProtectionRev4Record: Probability = 1.00, Count = 1
protect -> protect: Probability = 1.00, Count = 4
:this -> this: Probability = 1.00, Count = 3
Protect -> setProtect: Probability = 1.00, Count = 2
UpdateAuditStreamConfigurationResponse -> UpdateAuditStreamConfigurationResult: Probability = 1.00, Count = 1
UpdateAuditStreamConfiguration -> updateAuditStreamConfiguration: Probability = 1.00, Count = 1
UpdateAuditStreamConfigurationRequest -> UpdateAuditStreamConfigurationRequest: Probability = 1.00, Count = 1
Invoke<UpdateAuditStreamConfigurationResponse> -> executeUpdateAuditStreamConfiguration: Probability = 1.00, Count = 1
ISheet -> Sheet: Probability = 1.00, Count = 5
workbook.CreateSheet -> workbook.createSheet: Probability = 1.00, Count = 2
currentRow -> currentRow: Probability = 0.73, Count = 8
currentRow -> rowRecord.getOutlineLevel: Probability = 0.18, Count = 2
currentRow -> currentRow--: Probability = 0.09, Count = 1
sheet.CreateRow -> sheet.createRow: Probability = 1.00, Count = 2
cellIndex -> cellIndex: Probability = 1.00, Count = 3
cellValue -> cellValue: Probability = 0.50, Count = 3
cellValue -> rowArray[cellIndex]: Probability = 0.17, Count = 1
cellValue -> currentRow.createCell: Probability = 0.17, Count = 1
cellValue -> currentCell,: Probability = 0.17, Count = 1
shouldCreateEmptyCells -> shouldCreateEmptyCells: Probability = 1.00, Count = 4
SetCellValue -> setCellValue: Probability = 1.00, Count = 3
CharArrayWriter -> CharArrayWriter: Probability = 1.00, Count = 2
0" -> 0": Probability = 1.00, Count = 9
char[initialSize] -> char[initialSize]: Probability = 1.00, Count = 1
AtomicReference -> AtomicReference: Probability = 1.00, Count = 1
initialValue -> initialValue: Probability = 1.00, Count = 2
ISignatureComposer -> ISignatureComposer: Probability = 1.00, Count = 2
GetComposer -> getComposer: Probability = 1.00, Count = 2
composer -> composer: Probability = 1.00, Count = 6
RpcSignatureComposer -> RpcSignatureComposer: Probability = 1.00, Count = 1
ListHITsForQualificationTypeResponse -> ListHITsForQualificationTypeResult: Probability = 1.00, Count = 1
ListHITsForQualificationType -> listHITsForQualificationType: Probability = 1.00, Count = 1
ListHITsForQualificationTypeRequest -> ListHITsForQualificationTypeRequest: Probability = 1.00, Count = 1
Invoke<ListHITsForQualificationTypeResponse> -> executeListHITsForQualificationType: Probability = 1.00, Count = 1
AddTagsToStreamResponse -> AddTagsToStreamResult: Probability = 1.00, Count = 1
AddTagsToStream -> addTagsToStream: Probability = 1.00, Count = 1
AddTagsToStreamRequest -> AddTagsToStreamRequest: Probability = 1.00, Count = 1
Invoke<AddTagsToStreamResponse> -> executeAddTagsToStream: Probability = 1.00, Count = 1
nl -> nl: Probability = 0.88, Count = 7
nl -> Decoded": Probability = 0.12, Count = 1
escherRecords.Count -> escherRecords.size: Probability = 1.00, Count = 3
Records -> Records: Probability = 1.00, Count = 3
WSBoolRecord -> WSBoolRecord: Probability = 1.00, Count = 1
field_1_wsbool -> field_1_wsbool: Probability = 1.00, Count = 1
field_2_wsbool -> =data[: Probability = 1.00, Count = 2
=data[1] -> ]: Probability = 1.00, Count = 2
=data[0] -> field_2_wsbool: Probability = 1.00, Count = 1
BrazilianStemFilter -> BrazilianStemFilter: Probability = 1.00, Count = 2
NGit.Api.ResetCommand -> ResetCommand: Probability = 1.00, Count = 2
SetRef -> setRef: Probability = 1.00, Count = 3
EnableOrganizationAdminAccountResponse -> EnableOrganizationAdminAccountResult: Probability = 1.00, Count = 1
EnableOrganizationAdminAccount -> enableOrganizationAdminAccount: Probability = 1.00, Count = 1
EnableOrganizationAdminAccountRequest -> EnableOrganizationAdminAccountRequest: Probability = 1.00, Count = 1
Invoke<EnableOrganizationAdminAccountResponse> -> executeEnableOrganizationAdminAccount: Probability = 1.00, Count = 1
GetInnerValueEval -> getInnerValueEval: Probability = 1.00, Count = 1
_evaluator.GetEvalForCell -> _evaluator.getEvalForCell: Probability = 1.00, Count = 2
DeleteRecommenderConfigurationResponse -> DeleteRecommenderConfigurationResult: Probability = 1.00, Count = 1
DeleteRecommenderConfiguration -> deleteRecommenderConfiguration: Probability = 1.00, Count = 1
DeleteRecommenderConfigurationRequest -> DeleteRecommenderConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DeleteRecommenderConfigurationResponse> -> executeDeleteRecommenderConfiguration: Probability = 1.00, Count = 1
UpdateIntegrationResponseResponse -> UpdateIntegrationResponseResult: Probability = 1.00, Count = 1
UpdateIntegrationResponseRequest -> UpdateIntegrationResponseRequest: Probability = 1.00, Count = 1
Invoke<UpdateIntegrationResponseResponse> -> executeUpdateIntegrationResponse: Probability = 1.00, Count = 1
.codepage -> .codepage: Probability = 1.00, Count = 2
OutputToString -> outputToString: Probability = 1.00, Count = 2
output.ToString -> output.toString: Probability = 1.00, Count = 1
Path -> path: Probability = 1.00, Count = 3
LabelAndValue -> LabelAndValue: Probability = 0.75, Count = 6
LabelAndValue -> _other: Probability = 0.25, Count = 2
AcceptVpcEndpointConnectionsResponse -> AcceptVpcEndpointConnectionsResult: Probability = 1.00, Count = 1
AcceptVpcEndpointConnections -> acceptVpcEndpointConnections: Probability = 1.00, Count = 1
AcceptVpcEndpointConnectionsRequest -> AcceptVpcEndpointConnectionsRequest: Probability = 1.00, Count = 1
Invoke<AcceptVpcEndpointConnectionsResponse> -> executeAcceptVpcEndpointConnections: Probability = 1.00, Count = 1
DescribeIdentityProviderConfigurationResponse -> DescribeIdentityProviderConfigurationResult: Probability = 1.00, Count = 1
DescribeIdentityProviderConfiguration -> describeIdentityProviderConfiguration: Probability = 1.00, Count = 1
DescribeIdentityProviderConfigurationRequest -> DescribeIdentityProviderConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DescribeIdentityProviderConfigurationResponse> -> executeDescribeIdentityProviderConfiguration: Probability = 1.00, Count = 1
head -> head: Probability = 0.69, Count = 11
head -> headIterator.hasPrevious: Probability = 0.06, Count = 1
head -> Head: Probability = 0.06, Count = 1
head -> headIterator.previous: Probability = 0.06, Count = 1
head -> b.resetToEnd: Probability = 0.06, Count = 1
head -> b.next: Probability = 0.06, Count = 1
free.Clear -> free.clear: Probability = 1.00, Count = 2
.GetPath -> .getPath: Probability = 1.00, Count = 1
GetRelationalDatabaseBlueprintsResponse -> GetRelationalDatabaseBlueprintsResult: Probability = 1.00, Count = 1
GetRelationalDatabaseBlueprints -> getRelationalDatabaseBlueprints: Probability = 1.00, Count = 1
GetRelationalDatabaseBlueprintsRequest -> GetRelationalDatabaseBlueprintsRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseBlueprintsResponse> -> executeGetRelationalDatabaseBlueprints: Probability = 1.00, Count = 1
Concatenate -> concatenate: Probability = 1.00, Count = 1
"array -> "array: Probability = 1.00, Count = 2
arrays.Add -> arrays.add: Probability = 1.00, Count = 2
DescribeAutoScalingNotificationTypesResponse -> DescribeAutoScalingNotificationTypesResult: Probability = 1.00, Count = 2
DescribeAutoScalingNotificationTypes -> describeAutoScalingNotificationTypes: Probability = 1.00, Count = 3
DescribeAutoScalingNotificationTypesRequest -> DescribeAutoScalingNotificationTypesRequest: Probability = 1.00, Count = 2
LookupResult -> LookupResult: Probability = 1.00, Count = 1
CHARSEQUENCE_COMPARER.Compare -> CHARSEQUENCE_COMPARATOR.compare: Probability = 1.00, Count = 1
Key, -> key,: Probability = 1.00, Count = 1
o.Key -> o.key: Probability = 1.00, Count = 1
UpdateVariableResponse -> UpdateVariableResult: Probability = 1.00, Count = 1
UpdateVariable -> updateVariable: Probability = 1.00, Count = 1
UpdateVariableRequest -> UpdateVariableRequest: Probability = 1.00, Count = 1
Invoke<UpdateVariableResponse> -> executeUpdateVariable: Probability = 1.00, Count = 1
"hiknoengine", -> "hiknoengine",: Probability = 0.25, Count = 1
"hiknoengine", -> "2019-06-25",: Probability = 0.25, Count = 1
"hiknoengine", -> "TranslateText",: Probability = 0.25, Count = 1
"hiknoengine", -> "hiknoengine": Probability = 0.25, Count = 1
a[location] -> a[location]: Probability = 1.00, Count = 2
XmlDocument -> Document: Probability = 0.10, Count = 1
XmlDocument -> loadXML: Probability = 0.10, Count = 1
XmlDocument -> is: Probability = 0.10, Count = 1
XmlDocument -> DocumentBuilderFactory: Probability = 0.10, Count = 1
XmlDocument -> dbf: Probability = 0.10, Count = 1
XmlDocument -> DocumentBuilderFactory.newInstance: Probability = 0.10, Count = 1
XmlDocument -> DocumentBuilder: Probability = 0.10, Count = 1
XmlDocument -> db: Probability = 0.20, Count = 2
XmlDocument -> dbf.newDocumentBuilder: Probability = 0.10, Count = 1
se -> se: Probability = 0.42, Count = 5
se -> doc: Probability = 0.25, Count = 3
se -> db.parse: Probability = 0.08, Count = 1
se -> parsing: Probability = 0.08, Count = 1
se -> file:": Probability = 0.08, Count = 1
se -> se,: Probability = 0.08, Count = 1
SetTokenStream -> setTokenStream: Probability = 1.00, Count = 1
tokenStream -> tokenStream: Probability = 1.00, Count = 7
this.m_tokenStream -> this.tokenStream: Probability = 1.00, Count = 2
Area3DPtg -> Area3DPtg: Probability = 1.00, Count = 8
aptg.ExternSheetIndex -> aptg.getFirstRow: Probability = 1.00, Count = 2
MulBlankRecord -> MulBlankRecord: Probability = 1.00, Count = 4
xfs -> xfs: Probability = 1.00, Count = 2
_row -> _row: Probability = 1.00, Count = 2
_xfs -> _xfs: Probability = 1.00, Count = 1
xfs.Length -> xfs.length: Probability = 1.00, Count = 1
DescribeEngineDefaultParametersResponse -> EngineDefaults: Probability = 1.00, Count = 1
DescribeEngineDefaultParameters -> describeEngineDefaultParameters: Probability = 1.00, Count = 1
Invoke<DescribeEngineDefaultParametersResponse> -> executeDescribeEngineDefaultParameters: Probability = 1.00, Count = 1
AttachVolumeResponse -> AttachVolumeResult: Probability = 1.00, Count = 1
AttachVolume -> attachVolume: Probability = 1.00, Count = 1
AttachVolumeRequest -> AttachVolumeRequest: Probability = 1.00, Count = 2
Invoke<AttachVolumeResponse> -> executeAttachVolume: Probability = 1.00, Count = 1
sizeInBytes -> termOffsets!=null: Probability = 0.02, Count = 1
sizeInBytes -> ?: Probability = 0.07, Count = 4
sizeInBytes -> termOffsets.ramBytesUsed: Probability = 0.02, Count = 1
sizeInBytes -> termsDictOffsets!=null: Probability = 0.02, Count = 1
sizeInBytes -> termsDictOffsets.ramBytesUsed: Probability = 0.02, Count = 1
sizeInBytes -> 0: Probability = 0.02, Count = 1
sizeInBytes -> sizeInBytes: Probability = 0.42, Count = 23
sizeInBytes -> termBytesReader!=null: Probability = 0.02, Count = 1
sizeInBytes -> termBytesReader.ramBytesUsed: Probability = 0.02, Count = 1
sizeInBytes -> Map.Entry<String,DirectField>: Probability = 0.02, Count = 1
sizeInBytes -> entry:: Probability = 0.02, Count = 1
sizeInBytes -> fields.entrySet: Probability = 0.02, Count = 1
sizeInBytes -> .length: Probability = 0.02, Count = 1
sizeInBytes -> *: Probability = 0.05, Count = 3
sizeInBytes -> Character.BYTES: Probability = 0.02, Count = 1
sizeInBytes -> +=: Probability = 0.04, Count = 2
sizeInBytes -> postingsReader!=null: Probability = 0.02, Count = 1
sizeInBytes -> fields.size: Probability = 0.04, Count = 2
sizeInBytes -> 2L: Probability = 0.02, Count = 1
sizeInBytes -> RamUsageEstimator.NUM_BYTES_OBJECT_REF: Probability = 0.02, Count = 1
sizeInBytes -> FieldReader: Probability = 0.02, Count = 1
sizeInBytes -> ramBytesUsed: Probability = 0.05, Count = 3
sizeInBytes -> docIDs!=null: Probability = 0.02, Count = 1
sizeInBytes -> fst.ramBytesUsed: Probability = 0.02, Count = 1
DeleteWorkerBlockResponse -> DeleteWorkerBlockResult: Probability = 1.00, Count = 1
DeleteWorkerBlock -> deleteWorkerBlock: Probability = 1.00, Count = 1
DeleteWorkerBlockRequest -> DeleteWorkerBlockRequest: Probability = 1.00, Count = 1
Invoke<DeleteWorkerBlockResponse> -> executeDeleteWorkerBlock: Probability = 1.00, Count = 1
Unregister -> unregister: Probability = 1.00, Count = 1
refProto -> refProto: Probability = 1.00, Count = 3
protocols.Remove -> protocols.remove: Probability = 1.00, Count = 3
CreateNetworkInterfacePermissionResponse -> CreateNetworkInterfacePermissionResult: Probability = 1.00, Count = 1
CreateNetworkInterfacePermission -> createNetworkInterfacePermission: Probability = 1.00, Count = 1
CreateNetworkInterfacePermissionRequest -> CreateNetworkInterfacePermissionRequest: Probability = 1.00, Count = 1
Invoke<CreateNetworkInterfacePermissionResponse> -> executeCreateNetworkInterfacePermission: Probability = 1.00, Count = 1
ParseLine -> parseLine: Probability = 1.00, Count = 3
DocData -> DocData: Probability = 1.00, Count = 3
docData, -> docData,: Probability = 1.00, Count = 5
parts -> parts: Probability = 1.00, Count = 10
longitude -> parts[4]: Probability = 0.33, Count = 1
longitude -> longitude: Probability = 0.33, Count = 1
longitude -> parts[5]: Probability = 0.33, Count = 1
cache.UnregisterRepository -> cache.unregisterAndCloseRepository: Probability = 1.00, Count = 1
IList<IQueryNode> -> List<QueryNode>: Probability = 1.00, Count = 4
clauses.Count -> clauses.size: Probability = 1.00, Count = 2
"OR -> "OR: Probability = 1.00, Count = 1
have -> have: Probability = 1.00, Count = 5
clause" -> clause": Probability = 1.00, Count = 2
CreateReplicationGroupResponse -> ReplicationGroup: Probability = 1.00, Count = 1
CreateReplicationGroup -> createReplicationGroup: Probability = 1.00, Count = 1
CreateReplicationGroupRequest -> CreateReplicationGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateReplicationGroupResponse> -> executeCreateReplicationGroup: Probability = 1.00, Count = 1
ListCollectionsResponse -> ListCollectionsResult: Probability = 1.00, Count = 1
ListCollections -> listCollections: Probability = 1.00, Count = 1
ListCollectionsRequest -> ListCollectionsRequest: Probability = 1.00, Count = 1
Invoke<ListCollectionsResponse> -> executeListCollections: Probability = 1.00, Count = 1
SetParentIds -> setParentIds: Probability = 0.67, Count = 2
SetParentIds -> ObjectId...: Probability = 0.33, Count = 1
parent1, -> parent1,: Probability = 1.00, Count = 1
parent2 -> parent2: Probability = 1.00, Count = 1
parent1.Copy -> parent1.copy: Probability = 1.00, Count = 1
parent2.Copy -> parent2.copy: Probability = 1.00, Count = 1
TokenOffsetPayloadTokenFilter -> TokenOffsetPayloadTokenFilter: Probability = 1.00, Count = 2
CreateDataSourceResponse -> CreateDataSourceResult: Probability = 1.00, Count = 1
CreateDataSource -> createDataSource: Probability = 1.00, Count = 1
CreateDataSourceRequest -> CreateDataSourceRequest: Probability = 1.00, Count = 1
Invoke<CreateDataSourceResponse> -> executeCreateDataSource: Probability = 1.00, Count = 1
NGit.Api.DeleteBranchCommand -> DeleteBranchCommand: Probability = 1.00, Count = 1
SetBranchNames -> setBranchNames: Probability = 1.00, Count = 1
params -> String...: Probability = 0.83, Count = 5
params -> Object...: Probability = 0.17, Count = 1
branchnames -> branchnames: Probability = 1.00, Count = 2
this.branchNames.Clear -> this.branchNames.clear: Probability = 1.00, Count = 1
branch -> this.branchNames.addAll: Probability = 1.00, Count = 1
DescribeNotificationConfigurationsResponse -> DescribeNotificationConfigurationsResult: Probability = 1.00, Count = 2
DescribeNotificationConfigurations -> describeNotificationConfigurations: Probability = 1.00, Count = 3
DescribeNotificationConfigurationsRequest -> DescribeNotificationConfigurationsRequest: Probability = 1.00, Count = 2
GetStatusResponse -> GetStatusResult: Probability = 1.00, Count = 1
GetStatusRequest -> GetStatusRequest: Probability = 1.00, Count = 1
Invoke<GetStatusResponse> -> executeGetStatus: Probability = 1.00, Count = 1
ExternalSheet -> ExternalSheet: Probability = 1.00, Count = 6
GetExternalSheet -> getExternalSheet: Probability = 1.00, Count = 3
extNames -> extNames: Probability = 0.67, Count = 2
extNames -> linkTable.getExternalBookAndSheetName: Probability = 0.33, Count = 1
extNames.Length -> extNames.length: Probability = 1.00, Count = 1
extNames[0], -> extNames[0],: Probability = 0.40, Count = 2
extNames[0], -> extNames[1]: Probability = 0.20, Count = 1
extNames[0], -> extNames[1],: Probability = 0.20, Count = 1
extNames[0], -> extNames[2]: Probability = 0.20, Count = 1
ExternalSheetRange -> ExternalSheetRange: Probability = 1.00, Count = 2
IConditionalFormatting -> HSSFConditionalFormatting: Probability = 1.00, Count = 2
GetConditionalFormattingAt -> getConditionalFormattingAt: Probability = 1.00, Count = 1
cf -> cf: Probability = 0.44, Count = 4
cf -> _conditionalFormattingTable.get: Probability = 0.11, Count = 1
cf -> HSSFConditionalFormatting: Probability = 0.22, Count = 2
cf -> ConditionalFormatting: Probability = 0.11, Count = 1
cf -> .cloneCFAggregate: Probability = 0.11, Count = 1
SetFillColor -> setFillColor: Probability = 1.00, Count = 1
fillColor -> fillColor: Probability = 1.00, Count = 2
EscherRGBProperty -> EscherRGBProperty: Probability = 1.00, Count = 2
EscherProperties.FILL__FILLCOLOR, -> EscherPropertyTypes.FILL__FILLCOLOR,: Probability = 1.00, Count = 1
IPolicyOperations -> ErrorResponseBody: Probability = 0.50, Count = 1
IPolicyOperations -> error: Probability = 0.50, Count = 1
BeginWrite -> beginWrite: Probability = 1.00, Count = 3
dst.Write -> dst.write: Probability = 1.00, Count = 2
WriteTimedOut -> writeTimedOut: Probability = 1.00, Count = 3
EndWrite -> endWrite: Probability = 1.00, Count = 3
ParserExtension -> ParserExtension: Probability = 1.00, Count = 1
extension -> extension: Probability = 0.67, Count = 2
extension -> this.extensions.put: Probability = 0.33, Count = 1
SignOutUserResponse -> SignOutUserResult: Probability = 1.00, Count = 1
SignOutUser -> signOutUser: Probability = 1.00, Count = 1
SignOutUserRequest -> SignOutUserRequest: Probability = 1.00, Count = 1
Invoke<SignOutUserResponse> -> executeSignOutUser: Probability = 1.00, Count = 1
PutImageTagMutabilityResponse -> PutImageTagMutabilityResult: Probability = 1.00, Count = 1
PutImageTagMutability -> putImageTagMutability: Probability = 1.00, Count = 1
PutImageTagMutabilityRequest -> PutImageTagMutabilityRequest: Probability = 1.00, Count = 1
Invoke<PutImageTagMutabilityResponse> -> executePutImageTagMutability: Probability = 1.00, Count = 1
CreateIAMPolicyAssignmentResponse -> CreateIAMPolicyAssignmentResult: Probability = 1.00, Count = 1
CreateIAMPolicyAssignment -> createIAMPolicyAssignment: Probability = 1.00, Count = 1
CreateIAMPolicyAssignmentRequest -> CreateIAMPolicyAssignmentRequest: Probability = 1.00, Count = 1
Invoke<CreateIAMPolicyAssignmentResponse> -> executeCreateIAMPolicyAssignment: Probability = 1.00, Count = 1
GetRoomResponse -> GetRoomResult: Probability = 1.00, Count = 1
GetRoom -> getRoom: Probability = 1.00, Count = 1
GetRoomRequest -> GetRoomRequest: Probability = 1.00, Count = 1
Invoke<GetRoomResponse> -> executeGetRoom: Probability = 1.00, Count = 1
DescribeLaunchConfigurationsResponse -> DescribeLaunchConfigurationsResult: Probability = 1.00, Count = 2
DescribeLaunchConfigurations -> describeLaunchConfigurations: Probability = 1.00, Count = 3
DescribeLaunchConfigurationsRequest -> DescribeLaunchConfigurationsRequest: Probability = 1.00, Count = 2
UpdateTaskSetResponse -> UpdateTaskSetResult: Probability = 1.00, Count = 1
UpdateTaskSet -> updateTaskSet: Probability = 1.00, Count = 1
UpdateTaskSetRequest -> UpdateTaskSetRequest: Probability = 1.00, Count = 1
Invoke<UpdateTaskSetResponse> -> executeUpdateTaskSet: Probability = 1.00, Count = 1
_other -> other_: Probability = 0.40, Count = 4
_other -> FSTTermOutputs.TermData: Probability = 0.10, Count = 1
_other -> statsEqual: Probability = 0.10, Count = 1
_other -> other: Probability = 0.30, Count = 3
_other -> &&bytesEqual: Probability = 0.10, Count = 1
TermData -> TermData: Probability = 0.75, Count = 9
TermData -> t1,: Probability = 0.08, Count = 1
TermData -> t1: Probability = 0.17, Count = 2
GetSequenceIndex -> getSequenceIndex: Probability = 1.00, Count = 1
sequenceIndex -> sequenceIndex: Probability = 1.00, Count = 1
DeleteAutoScalingGroupResponse -> DeleteAutoScalingGroupResult: Probability = 1.00, Count = 1
DeleteAutoScalingGroup -> deleteAutoScalingGroup: Probability = 1.00, Count = 1
DeleteAutoScalingGroupRequest -> DeleteAutoScalingGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteAutoScalingGroupResponse> -> executeDeleteAutoScalingGroup: Probability = 1.00, Count = 1
NextDoc -> nextDoc: Probability = 1.00, Count = 4
docs.Get -> newDoc: Probability = 1.00, Count = 4
++idx -> newDoc: Probability = 1.00, Count = 5
prevIdx -> newDoc: Probability = 1.00, Count = 1
ICollection<ChildScorer> -> Collection<ChildScorable>: Probability = 1.00, Count = 3
List<ChildScorer> -> Collections.singleton: Probability = 1.00, Count = 2
ChildScorer -> ChildScorable: Probability = 1.00, Count = 3
_parentScorer, -> parentScorer,: Probability = 1.00, Count = 1
"BLOCK_JOIN" -> "BLOCK_JOIN": Probability = 1.00, Count = 2
EndTask -> endTask: Probability = 1.00, Count = 1
UpdateConfigurationSetEventDestinationResponse -> UpdateConfigurationSetEventDestinationResult: Probability = 1.00, Count = 1
UpdateConfigurationSetEventDestination -> updateConfigurationSetEventDestination: Probability = 1.00, Count = 1
UpdateConfigurationSetEventDestinationRequest -> UpdateConfigurationSetEventDestinationRequest: Probability = 1.00, Count = 1
Invoke<UpdateConfigurationSetEventDestinationResponse> -> executeUpdateConfigurationSetEventDestination: Probability = 1.00, Count = 1
Backup -> getBackup: Probability = 1.00, Count = 1
DescribeBundleTasksResponse -> DescribeBundleTasksResult: Probability = 1.00, Count = 2
DescribeBundleTasks -> describeBundleTasks: Probability = 1.00, Count = 3
DescribeBundleTasksRequest -> DescribeBundleTasksRequest: Probability = 1.00, Count = 2
Invoke<DescribeBundleTasksResponse> -> executeDescribeBundleTasks: Probability = 1.00, Count = 1
IdfExplain -> Explanation: Probability = 0.25, Count = 4
IdfExplain -> idfExplain: Probability = 0.25, Count = 4
IdfExplain -> CollectionStatistics: Probability = 0.25, Count = 4
IdfExplain -> collectionStats,: Probability = 0.25, Count = 4
TermStatistics -> TermStatistics: Probability = 1.00, Count = 6
CollectionStatistics -> termStats: Probability = 0.67, Count = 4
CollectionStatistics -> termStats[]: Probability = 0.33, Count = 2
termStats -> termStats.docFreq: Probability = 0.50, Count = 2
termStats -> 0d: Probability = 0.50, Count = 2
termStats.DocFreq -> final: Probability = 0.67, Count = 4
termStats.DocFreq -> idf: Probability = 0.33, Count = 2
collectionStats.MaxDoc -> idf: Probability = 0.50, Count = 2
collectionStats.MaxDoc -> docCount: Probability = 0.50, Count = 2
maxDocs=" -> documents: Probability = 1.00, Count = 4
DescribeFleetEventsResponse -> DescribeFleetEventsResult: Probability = 1.00, Count = 1
DescribeFleetEvents -> describeFleetEvents: Probability = 1.00, Count = 1
DescribeFleetEventsRequest -> DescribeFleetEventsRequest: Probability = 1.00, Count = 1
Invoke<DescribeFleetEventsResponse> -> executeDescribeFleetEvents: Probability = 1.00, Count = 1
BasicCredentials -> BasicCredentials: Probability = 1.00, Count = 1
accessKeySecret -> accessKeySecret: Probability = 1.00, Count = 5
accessKeyId -> accessKeyId: Probability = 1.00, Count = 6
"Access -> "Access: Probability = 1.00, Count = 2
ID -> ID: Probability = 1.00, Count = 2
this.accessKeySecret -> this.accessKeySecret: Probability = 1.00, Count = 1
GetOldPath -> getOldPath: Probability = 1.00, Count = 2
nextIndex -> nextIndex: Probability = 1.00, Count = 8
iterator.nextIndex -> iterator.nextIndex: Probability = 1.00, Count = 2
DeleteClusterSnapshotResponse -> Snapshot: Probability = 1.00, Count = 1
DeleteClusterSnapshot -> deleteClusterSnapshot: Probability = 1.00, Count = 1
DeleteClusterSnapshotRequest -> DeleteClusterSnapshotRequest: Probability = 1.00, Count = 1
Invoke<DeleteClusterSnapshotResponse> -> executeDeleteClusterSnapshot: Probability = 1.00, Count = 1
GetColsNamesForValsByRound -> getColsNamesForValsByRound: Probability = 1.00, Count = 1
colForValByRound.Count -> colForValByRound.size: Probability = 1.00, Count = 1
DeprecateActivityType -> deprecateActivityType: Probability = 1.00, Count = 1
DeprecateActivityTypeRequest -> DeprecateActivityTypeRequest: Probability = 1.00, Count = 1
options.ResponseUnmarshaller -> request: Probability = 1.00, Count = 16
DeprecateActivityTypeResponseUnmarshaller.Instance -> executeDeprecateActivityType: Probability = 1.00, Count = 1
PartETag -> PartETag: Probability = 1.00, Count = 1
partNumber, -> partNumber,: Probability = 1.00, Count = 1
eTag -> eTag: Probability = 1.00, Count = 2
this.partNumber -> this.partNumber: Probability = 1.00, Count = 1
partNumber -> partNumber: Probability = 1.00, Count = 1
this.eTag -> this.eTag: Probability = 1.00, Count = 1
this._enclosing.removeMapping -> ): Probability = 1.00, Count = 1
ListAccessControlRulesResponse -> ListAccessControlRulesResult: Probability = 1.00, Count = 1
ListAccessControlRules -> listAccessControlRules: Probability = 1.00, Count = 1
ListAccessControlRulesRequest -> ListAccessControlRulesRequest: Probability = 1.00, Count = 1
Invoke<ListAccessControlRulesResponse> -> executeListAccessControlRules: Probability = 1.00, Count = 1
DescribeDBClusterBacktracksResponse -> DescribeDBClusterBacktracksResult: Probability = 1.00, Count = 1
DescribeDBClusterBacktracks -> describeDBClusterBacktracks: Probability = 1.00, Count = 1
DescribeDBClusterBacktracksRequest -> DescribeDBClusterBacktracksRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBClusterBacktracksResponse> -> executeDescribeDBClusterBacktracks: Probability = 1.00, Count = 1
this.context -> this.context: Probability = 1.00, Count = 5
other.context -> this.context.equals: Probability = 0.25, Count = 1
other.context -> other.context: Probability = 0.25, Count = 1
other.context -> this.semanticContext.equals: Probability = 0.25, Count = 1
other.context -> other.semanticContext: Probability = 0.25, Count = 1
AbbreviatedObjectId -> AbbreviatedObjectId: Probability = 1.00, Count = 10
GetId -> getId: Probability = 1.00, Count = 2
DiffEntry.Side -> Side: Probability = 1.00, Count = 3
DiffEntry.Side.OLD -> Side.OLD: Probability = 1.00, Count = 3
CatLabRecord -> CatLabRecord: Probability = 1.00, Count = 1
in1.Available -> in.available: Probability = 1.00, Count = 7
substring -> substring: Probability = 1.00, Count = 5
startEndAndLength -> startEndAndLength: Probability = 1.00, Count = 3
_array, -> _array,: Probability = 0.67, Count = 8
_array, -> _limit: Probability = 0.33, Count = 4
_limit-- -> _limit--: Probability = 1.00, Count = 2
getKey -> getKey: Probability = 1.00, Count = 3
unused2 -> unused2: Probability = 1.00, Count = 6
SetDeltaCacheLimit -> setDeltaCacheLimit: Probability = 1.00, Count = 1
deltaCacheLimit -> deltaCacheLimit: Probability = 1.00, Count = 2
"L" -> "L": Probability = 1.00, Count = 1
response, -> response,: Probability = 1.00, Count = 2
endpoint -> endpoint: Probability = 0.50, Count = 4
endpoint -> endpoint,: Probability = 0.25, Count = 2
endpoint -> FIRST_POSITION: Probability = 0.25, Count = 2
response.GetEnumerator -> StringCharacterIterator: Probability = 0.50, Count = 2
response.GetEnumerator -> response: Probability = 0.50, Count = 2
DeleteMessageResponse -> DeleteMessageResult: Probability = 1.00, Count = 2
DeleteMessage -> deleteMessage: Probability = 1.00, Count = 3
DeleteMessageRequest -> DeleteMessageRequest: Probability = 1.00, Count = 3
Invoke<DeleteMessageResponse> -> executeDeleteMessage: Probability = 1.00, Count = 1
SearchFind -> SearchFind: Probability = 1.00, Count = 1
isCaseSensitive -> isCaseSensitive: Probability = 1.00, Count = 2
_isCaseSensitive -> _isCaseSensitive: Probability = 1.00, Count = 1
SetRoleName -> setRoleName: Probability = 1.00, Count = 1
roleName -> roleName: Probability = 1.00, Count = 3
"You -> "You: Probability = 1.00, Count = 2
specifiy -> specifiy: Probability = 1.00, Count = 1
valid -> valid: Probability = 1.00, Count = 4
role -> role: Probability = 1.00, Count = 1
name." -> name.": Probability = 1.00, Count = 1
this.roleName -> this.roleName: Probability = 1.00, Count = 1
SetCredentialUrl -> setCredentialUrl: Probability = 1.00, Count = 1
AllocatePublicVirtualInterfaceResponse -> AllocatePublicVirtualInterfaceResult: Probability = 1.00, Count = 1
AllocatePublicVirtualInterface -> allocatePublicVirtualInterface: Probability = 1.00, Count = 1
AllocatePublicVirtualInterfaceRequest -> AllocatePublicVirtualInterfaceRequest: Probability = 1.00, Count = 1
Invoke<AllocatePublicVirtualInterfaceResponse> -> executeAllocatePublicVirtualInterface: Probability = 1.00, Count = 1
DeleteLoadBalancerRequest -> DeleteLoadBalancerRequest: Probability = 1.00, Count = 2
PutDeliverabilityDashboardOptionResponse -> PutDeliverabilityDashboardOptionResult: Probability = 1.00, Count = 1
PutDeliverabilityDashboardOption -> putDeliverabilityDashboardOption: Probability = 1.00, Count = 1
PutDeliverabilityDashboardOptionRequest -> PutDeliverabilityDashboardOptionRequest: Probability = 1.00, Count = 1
Invoke<PutDeliverabilityDashboardOptionResponse> -> executePutDeliverabilityDashboardOption: Probability = 1.00, Count = 1
XPathRuleElement -> XPathRuleElement: Probability = 1.00, Count = 1
ruleName, -> ruleName,: Probability = 1.00, Count = 1
NGit.Api.PullCommand -> PullCommand: Probability = 1.00, Count = 1
SetProgressMonitor -> setProgressMonitor: Probability = 0.44, Count = 7
SetProgressMonitor -> ProgressMonitor: Probability = 0.31, Count = 5
SetProgressMonitor -> monitor: Probability = 0.25, Count = 4
ProgressMonitor -> if: Probability = 0.50, Count = 4
ProgressMonitor -> ProgressMonitor: Probability = 0.50, Count = 4
monitor -> monitor: Probability = 0.50, Count = 12
monitor -> ==: Probability = 0.17, Count = 4
monitor -> null: Probability = 0.17, Count = 4
monitor -> this.monitor: Probability = 0.17, Count = 4
this.monitor -> monitor: Probability = 0.45, Count = 5
this.monitor -> NullProgressMonitor.INSTANCE: Probability = 0.36, Count = 4
this.monitor -> this.monitor: Probability = 0.18, Count = 2
After -> after: Probability = 1.00, Count = 4
ts -> ts: Probability = 0.79, Count = 11
ts -> long: Probability = 0.14, Count = 2
ts -> Date: Probability = 0.07, Count = 1
CommitTimeRevFilterAfter -> After: Probability = 1.00, Count = 1
DeleteRoomResponse -> DeleteRoomResult: Probability = 1.00, Count = 1
DeleteRoom -> deleteRoom: Probability = 1.00, Count = 1
DeleteRoomRequest -> DeleteRoomRequest: Probability = 1.00, Count = 1
Invoke<DeleteRoomResponse> -> executeDeleteRoom: Probability = 1.00, Count = 1
ScandinavianNormalizationFilter -> ScandinavianNormalizationFilter: Probability = 1.00, Count = 3
ValidateTemplateResponse -> ValidateTemplateResult: Probability = 1.00, Count = 1
ValidateTemplate -> validateTemplate: Probability = 1.00, Count = 1
ValidateTemplateRequest -> ValidateTemplateRequest: Probability = 1.00, Count = 1
Invoke<ValidateTemplateResponse> -> executeValidateTemplate: Probability = 1.00, Count = 1
ListBranchCommand -> ListBranchCommand: Probability = 1.00, Count = 2
BranchList -> branchList: Probability = 1.00, Count = 1
EntryPathString -> getEntryPathString: Probability = 1.00, Count = 1
Before -> final: Probability = 0.42, Count = 5
Before -> before: Probability = 0.58, Count = 7
NGit.Diff.Edit -> Edit: Probability = 0.67, Count = 6
NGit.Diff.Edit -> cut: Probability = 0.11, Count = 1
NGit.Diff.Edit -> final: Probability = 0.11, Count = 1
NGit.Diff.Edit -> this.beginA: Probability = 0.11, Count = 1
beginA, -> beginA,: Probability = 1.00, Count = 1
cut.beginA, -> cut.beginA,: Probability = 1.00, Count = 1
beginB, -> beginB,: Probability = 1.00, Count = 1
cut.beginB -> cut.beginB: Probability = 1.00, Count = 1
TokenConstants.EOF -> Token.EOF: Probability = 1.00, Count = 4
"<EOF>" -> "<EOF>": Probability = 1.00, Count = 3
Symbol.Text -> symbol.getText: Probability = 1.00, Count = 2
DeleteDeploymentStrategyResponse -> DeleteDeploymentStrategyResult: Probability = 1.00, Count = 1
DeleteDeploymentStrategy -> deleteDeploymentStrategy: Probability = 1.00, Count = 1
DeleteDeploymentStrategyRequest -> DeleteDeploymentStrategyRequest: Probability = 1.00, Count = 1
Invoke<DeleteDeploymentStrategyResponse> -> executeDeleteDeploymentStrategy: Probability = 1.00, Count = 1
GetModelResponse -> GetModelResult: Probability = 1.00, Count = 1
GetModel -> getModel: Probability = 1.00, Count = 1
GetModelRequest -> GetModelRequest: Probability = 1.00, Count = 1
Invoke<GetModelResponse> -> executeGetModel: Probability = 1.00, Count = 1
DescribeUserResponse -> DescribeUserResult: Probability = 1.00, Count = 1
DescribeUser -> describeUser: Probability = 1.00, Count = 1
DescribeUserRequest -> DescribeUserRequest: Probability = 1.00, Count = 1
Invoke<DescribeUserResponse> -> executeDescribeUser: Probability = 1.00, Count = 1
ListSnapshotBlocksResponse -> ListSnapshotBlocksResult: Probability = 1.00, Count = 1
ListSnapshotBlocks -> listSnapshotBlocks: Probability = 1.00, Count = 1
ListSnapshotBlocksRequest -> ListSnapshotBlocksRequest: Probability = 1.00, Count = 1
Invoke<ListSnapshotBlocksResponse> -> executeListSnapshotBlocks: Probability = 1.00, Count = 1
ResetCommand -> ResetCommand: Probability = 1.00, Count = 2
CreateClusterSnapshotResponse -> Snapshot: Probability = 1.00, Count = 1
CreateClusterSnapshot -> createClusterSnapshot: Probability = 1.00, Count = 1
CreateClusterSnapshotRequest -> CreateClusterSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CreateClusterSnapshotResponse> -> executeCreateClusterSnapshot: Probability = 1.00, Count = 1
SetCachedResultTypeEmptyString -> setCachedResultTypeEmptyString: Probability = 1.00, Count = 1
SpecialCachedValue.CreateCachedEmptyValue -> FormulaSpecialCachedValue.createCachedEmptyValue: Probability = 1.00, Count = 1
DeleteIdentityPolicyResponse -> DeleteIdentityPolicyResult: Probability = 1.00, Count = 1
DeleteIdentityPolicy -> deleteIdentityPolicy: Probability = 1.00, Count = 1
DeleteIdentityPolicyRequest -> DeleteIdentityPolicyRequest: Probability = 1.00, Count = 1
Invoke<DeleteIdentityPolicyResponse> -> executeDeleteIdentityPolicy: Probability = 1.00, Count = 1
!initDone -> !initDone: Probability = 1.00, Count = 1
initDone -> initDone: Probability = 1.00, Count = 1
++count -> ++count: Probability = 1.00, Count = 1
bs -> bs: Probability = 1.00, Count = 3
LeftMarginRecord -> LeftMarginRecord: Probability = 1.00, Count = 2
rec.field_1_margin -> copy: Probability = 1.00, Count = 4
FailedPredicateException -> FailedPredicateException: Probability = 1.00, Count = 3
predicate, -> recognizer,String: Probability = 0.33, Count = 1
predicate, -> predicate,String: Probability = 0.33, Count = 1
predicate, -> formatMessage: Probability = 0.33, Count = 1
ITokenStream -> recognizer.getInputStream: Probability = 1.00, Count = 3
recognizer.InputStream -> recognizer._ctx: Probability = 1.00, Count = 2
AbstractPredicateTransition -> AbstractPredicateTransition: Probability = 1.00, Count = 2
trans -> trans: Probability = 0.78, Count = 7
trans -> .ruleIndex: Probability = 0.11, Count = 1
trans -> .predIndex: Probability = 0.11, Count = 1
PredicateTransition -> PredicateTransition: Probability = 0.67, Count = 4
PredicateTransition -> this.predicateIndex: Probability = 0.33, Count = 2
predicate -> predicate: Probability = 1.00, Count = 3
this.OffendingToken -> this.setOffendingToken: Probability = 0.33, Count = 1
this.OffendingToken -> recognizer.getCurrentToken: Probability = 0.67, Count = 2
Normalize -> normalize: Probability = 1.00, Count = 3
idealCharArraySize -> idealCharArraySize: Probability = 1.00, Count = 1
objType -> objType: Probability = 1.00, Count = 2
obj.Copy -> obj.copy: Probability = 1.00, Count = 1
GetItem -> getItem: Probability = 1.00, Count = 5
zero -> zero: Probability = 1.00, Count = 2
allowed" -> allowed": Probability = 1.00, Count = 2
SemanticContext -> SemanticContext: Probability = 1.00, Count = 6
HashSet<SemanticContext> -> Set<SemanticContext>: Probability = 0.50, Count = 1
HashSet<SemanticContext> -> SemanticContext: Probability = 0.50, Count = 1
operands.Add -> operands.add: Probability = 0.50, Count = 3
operands.Add -> NONE: Probability = 0.50, Count = 3
reduced -> reduced: Probability = 1.00, Count = 2
opnds -> opnds: Probability = 0.33, Count = 1
opnds -> ,: Probability = 0.67, Count = 2
GetCampaignVersionResponse -> GetCampaignVersionResult: Probability = 1.00, Count = 1
GetCampaignVersion -> getCampaignVersion: Probability = 1.00, Count = 1
GetCampaignVersionRequest -> GetCampaignVersionRequest: Probability = 1.00, Count = 1
Invoke<GetCampaignVersionResponse> -> executeGetCampaignVersion: Probability = 1.00, Count = 1
field_2_textLength -> field_2_textLength: Probability = 1.00, Count = 3
DeleteCacheSubnetGroupResponse -> DeleteCacheSubnetGroupResult: Probability = 1.00, Count = 1
DeleteCacheSubnetGroup -> deleteCacheSubnetGroup: Probability = 1.00, Count = 1
DeleteCacheSubnetGroupRequest -> DeleteCacheSubnetGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteCacheSubnetGroupResponse> -> executeDeleteCacheSubnetGroup: Probability = 1.00, Count = 1
getItem -> Tab: Probability = 0.50, Count = 1
getItem -> getItem: Probability = 0.50, Count = 1
this._enclosing.mTabLayout.getChildAt -> mTabs.get: Probability = 1.00, Count = 1
CreateFormat -> createFormat: Probability = 1.00, Count = 2
formatString -> formatString: Probability = 0.67, Count = 6
formatString -> _defaultFormat.format: Probability = 0.11, Count = 1
formatString -> _formatter.formatRawCellContents: Probability = 0.11, Count = 1
formatString -> formatIndex,: Probability = 0.11, Count = 1
maxformatid -> maxformatid: Probability = 0.57, Count = 4
maxformatid -> 0xa4: Probability = 0.29, Count = 2
maxformatid -> maxformatid,: Probability = 0.14, Count = 1
ListDeploymentStrategiesResponse -> ListDeploymentStrategiesResult: Probability = 1.00, Count = 1
ListDeploymentStrategies -> listDeploymentStrategies: Probability = 1.00, Count = 1
ListDeploymentStrategiesRequest -> ListDeploymentStrategiesRequest: Probability = 1.00, Count = 1
Invoke<ListDeploymentStrategiesResponse> -> executeListDeploymentStrategies: Probability = 1.00, Count = 1
CreateLoginProfileRequest -> CreateLoginProfileRequest: Probability = 1.00, Count = 1
_password -> setPassword: Probability = 1.00, Count = 1
GetMetadata -> getMetadata: Probability = 1.00, Count = 1
ClientException -> ClientException: Probability = 0.77, Count = 10
ClientException -> ECS: Probability = 0.15, Count = 2
ClientException -> Max: Probability = 0.08, Count = 1
HttpRequest -> HttpRequest: Probability = 1.00, Count = 3
response -> connectionTimeoutInMilliseconds: Probability = 0.33, Count = 2
response -> request.setSysReadTimeout: Probability = 0.17, Count = 1
response -> HttpResponse: Probability = 0.17, Count = 1
response -> response: Probability = 0.33, Count = 2
connect -> connect: Probability = 1.00, Count = 4
ECS -> Metadata: Probability = 1.00, Count = 2
Metadata -> Service:: Probability = 1.00, Count = 2
response.Status -> response.getStatus: Probability = 0.33, Count = 2
response.Status -> HttpURLConnection.HTTP_OK: Probability = 0.17, Count = 1
response.Status -> ECS_METADAT_FETCH_ERROR_MSG: Probability = 0.17, Count = 1
response.Status -> HttpCode=": Probability = 0.17, Count = 1
response.Status -> response.getHttpContent: Probability = 0.17, Count = 1
SetAbbreviationLength -> setAbbreviationLength: Probability = 1.00, Count = 1
.abbreviationLengthMustBeNonNegative -> .abbreviationLengthMustBeNonNegative: Probability = 1.00, Count = 1
abbreviationLength -> abbreviationLength: Probability = 1.00, Count = 1
SearchFacesByImageResponse -> SearchFacesByImageResult: Probability = 1.00, Count = 1
SearchFacesByImage -> searchFacesByImage: Probability = 1.00, Count = 1
SearchFacesByImageRequest -> SearchFacesByImageRequest: Probability = 1.00, Count = 1
Invoke<SearchFacesByImageResponse> -> executeSearchFacesByImage: Probability = 1.00, Count = 1
ListMonitoringSchedulesResponse -> ListMonitoringSchedulesResult: Probability = 1.00, Count = 1
ListMonitoringSchedules -> listMonitoringSchedules: Probability = 1.00, Count = 1
ListMonitoringSchedulesRequest -> ListMonitoringSchedulesRequest: Probability = 1.00, Count = 1
Invoke<ListMonitoringSchedulesResponse> -> executeListMonitoringSchedules: Probability = 1.00, Count = 1
snapshot[index++] -> snapshot[index++]: Probability = 1.00, Count = 1
real -> real: Probability = 1.00, Count = 4
Convert.ToString -> String.valueOf: Probability = 1.00, Count = 3
sign -> sign: Probability = 0.75, Count = 9
sign -> groupRealNumber: Probability = 0.17, Count = 2
sign -> -1.0d: Probability = 0.08, Count = 1
PlacementType -> PlacementType: Probability = 1.00, Count = 1
availabilityZone -> availabilityZone: Probability = 0.53, Count = 8
availabilityZone -> ): Probability = 0.33, Count = 5
availabilityZone -> setAvailabilityZone: Probability = 0.13, Count = 2
_availabilityZone -> setAvailabilityZone: Probability = 0.50, Count = 3
_availabilityZone -> availabilityZone: Probability = 0.33, Count = 2
_availabilityZone -> setSize: Probability = 0.17, Count = 1
UpdateDomainResponse -> UpdateDomainResult: Probability = 1.00, Count = 1
UpdateDomain -> updateDomain: Probability = 1.00, Count = 1
UpdateDomainRequest -> UpdateDomainRequest: Probability = 1.00, Count = 1
Invoke<UpdateDomainResponse> -> executeUpdateDomain: Probability = 1.00, Count = 1
byte[RecordSize] -> byte[getRecordSize: Probability = 0.25, Count = 1
byte[RecordSize] -> ]: Probability = 0.50, Count = 2
byte[RecordSize] -> getRecordSize: Probability = 0.25, Count = 1
GetLoadBalancerResponse -> GetLoadBalancerResult: Probability = 1.00, Count = 1
GetLoadBalancer -> getLoadBalancer: Probability = 1.00, Count = 1
GetLoadBalancerRequest -> GetLoadBalancerRequest: Probability = 1.00, Count = 1
Invoke<GetLoadBalancerResponse> -> executeGetLoadBalancer: Probability = 1.00, Count = 1
ModifyTrafficMirrorFilterRuleResponse -> ModifyTrafficMirrorFilterRuleResult: Probability = 1.00, Count = 1
ModifyTrafficMirrorFilterRule -> modifyTrafficMirrorFilterRule: Probability = 1.00, Count = 1
ModifyTrafficMirrorFilterRuleRequest -> ModifyTrafficMirrorFilterRuleRequest: Probability = 1.00, Count = 1
Invoke<ModifyTrafficMirrorFilterRuleResponse> -> executeModifyTrafficMirrorFilterRule: Probability = 1.00, Count = 1
Resize -> resize: Probability = 1.00, Count = 4
scaleX, -> scaleX,: Probability = 1.00, Count = 3
scaleY -> scaleY: Probability = 1.00, Count = 3
HSSFClientAnchor -> HSSFClientAnchor: Probability = 0.67, Count = 14
HSSFClientAnchor -> anchor.setAnchorType: Probability = 0.05, Count = 1
HSSFClientAnchor -> AnchorType.MOVE_DONT_RESIZE: Probability = 0.05, Count = 1
HSSFClientAnchor -> pref: Probability = 0.05, Count = 1
HSSFClientAnchor -> scaleX,scaleY: Probability = 0.05, Count = 1
HSSFClientAnchor -> anchor.getRow1: Probability = 0.10, Count = 2
HSSFClientAnchor -> pref.getRow2: Probability = 0.05, Count = 1
ClientAnchor -> getClientAnchor: Probability = 1.00, Count = 2
row2 -> row2: Probability = 1.00, Count = 5
col2 -> col2: Probability = 1.00, Count = 3
"mark/reset -> "mark/reset: Probability = 1.00, Count = 2
Body -> Body: Probability = 0.67, Count = 2
Body -> body: Probability = 0.33, Count = 1
Content -> Content: Probability = 1.00, Count = 3
clientProfile -> clientProfile: Probability = 0.29, Count = 2
clientProfile -> clientProfile1: Probability = 0.14, Count = 1
clientProfile -> clientProfile1.getCredential: Probability = 0.14, Count = 1
clientProfile -> IClientProfile: Probability = 0.14, Count = 1
clientProfile -> this.httpClient: Probability = 0.14, Count = 1
clientProfile -> HttpClientFactory.buildClient: Probability = 0.14, Count = 1
BasicSessionCredentials -> BasicSessionCredentials: Probability = 1.00, Count = 2
^= -> hash: Probability = 0.41, Count = 7
^= -> ^=: Probability = 0.59, Count = 10
eKey -> eKey: Probability = 1.00, Count = 12
Keep -> keep: Probability = 1.00, Count = 1
BeforeAdd -> beforeAdd: Probability = 1.00, Count = 2
cache.GetEntry -> cache.getEntry: Probability = 1.00, Count = 1
FastKeep -> fastKeep: Probability = 1.00, Count = 1
TableStylesRecord -> TableStylesRecord: Probability = 1.00, Count = 1
in1.ReadFully -> in.readFully: Probability = 1.00, Count = 4
cchDefListStyle -> cchDefListStyle: Probability = 1.00, Count = 2
cchDefPivotStyle -> cchDefPivotStyle: Probability = 1.00, Count = 2
AddAttributesToFindingsResponse -> AddAttributesToFindingsResult: Probability = 1.00, Count = 1
AddAttributesToFindings -> addAttributesToFindings: Probability = 1.00, Count = 1
AddAttributesToFindingsRequest -> AddAttributesToFindingsRequest: Probability = 1.00, Count = 1
Invoke<AddAttributesToFindingsResponse> -> executeAddAttributesToFindings: Probability = 1.00, Count = 1
TimeSpec -> TimeSpec: Probability = 1.00, Count = 2
spec.len -> desc.replace: Probability = 0.07, Count = 1
spec.len -> spec.pos,: Probability = 0.07, Count = 1
spec.len -> spec.pos: Probability = 0.07, Count = 1
spec.len -> spec.len,: Probability = 0.07, Count = 1
spec.len -> "%0": Probability = 0.07, Count = 1
spec.len -> spec.len: Probability = 0.13, Count = 2
spec.len -> "d": Probability = 0.07, Count = 1
spec.len -> spec.type: Probability = 0.07, Count = 1
spec.len -> topmost.type: Probability = 0.07, Count = 1
spec.len -> spec.modBy: Probability = 0.07, Count = 1
spec.len -> modFor: Probability = 0.07, Count = 1
spec.len -> spec.type,: Probability = 0.07, Count = 1
spec.len -> printfFmt: Probability = 0.07, Count = 1
spec.len -> desc.toString: Probability = 0.07, Count = 1
char.IsWhiteSpace -> Character.isWhitespace: Probability = 1.00, Count = 1
bytesID, -> bytesID,: Probability = 1.00, Count = 1
"bytesStart -> "bytesStart: Probability = 1.00, Count = 2
initialized" -> initialized": Probability = 1.00, Count = 2
bytesID -> bytesID: Probability = 1.00, Count = 1
bytesStart.Length, -> bytesStart.length:: Probability = 1.00, Count = 1
"bytesID -> "bytesID: Probability = 1.00, Count = 1
byteStart -> byteStart: Probability = 1.00, Count = 1
len: -> len:: Probability = 1.00, Count = 1
bytesStart.Length -> bytesStart.length: Probability = 1.00, Count = 1
pool.SetBytesRef -> pool.setBytesRef: Probability = 1.00, Count = 1
@ref, -> ref,: Probability = 0.14, Count = 2
@ref, -> ref.length: Probability = 0.14, Count = 2
@ref, -> prefix.length: Probability = 0.29, Count = 4
@ref, -> ref.bytes,: Probability = 0.07, Count = 1
@ref, -> ref.offset,: Probability = 0.07, Count = 1
@ref, -> ref.offset: Probability = 0.07, Count = 1
@ref, -> +: Probability = 0.21, Count = 3
bytesStart[bytesID] -> bytesStart[bytesID]: Probability = 1.00, Count = 1
display -> display: Probability = 1.00, Count = 1
UpdateMatchmakingConfigurationResponse -> UpdateMatchmakingConfigurationResult: Probability = 1.00, Count = 1
UpdateMatchmakingConfiguration -> updateMatchmakingConfiguration: Probability = 1.00, Count = 1
UpdateMatchmakingConfigurationRequest -> UpdateMatchmakingConfigurationRequest: Probability = 1.00, Count = 1
Invoke<UpdateMatchmakingConfigurationResponse> -> executeUpdateMatchmakingConfiguration: Probability = 1.00, Count = 1
IsGroup -> isGroup: Probability = 1.00, Count = 1
groupMap[characterCategoryMap[c]] -> groupMap[characterCategoryMap[c]]: Probability = 1.00, Count = 1
SetTraverseEmptyCells -> setTraverseEmptyCells: Probability = 1.00, Count = 1
this.traverseEmptyCells -> this.traverseEmptyCells: Probability = 1.00, Count = 2
Invoke<ListPresetsResponse> -> executeListPresets: Probability = 1.00, Count = 1
java.util.Set<K> -> @Override: Probability = 0.29, Count = 2
java.util.Set<K> -> Set<K>: Probability = 0.71, Count = 5
keySet -> keySet: Probability = 1.00, Count = 3
ks -> ks: Probability = 1.00, Count = 6
_keySet -> keySet: Probability = 1.00, Count = 4
V>.KeySet -> KeySet: Probability = 1.00, Count = 2
r.GetName -> r.getName: Probability = 1.00, Count = 3
r.GetObjectId -> r.getObjectId: Probability = 1.00, Count = 4
r.GetPeeledObjectId -> r.getPeeledObjectId: Probability = 1.00, Count = 2
tagTargets.AddItem -> tagTargets.add: Probability = 1.00, Count = 2
.StartsWith -> .startsWith: Probability = 1.00, Count = 3
java.nio.DirectByteBuffer -> DirectByteBuffer: Probability = 1.00, Count = 10
.get -> .get: Probability = 1.00, Count = 10
java.nio.HeapByteBuffer -> HeapByteBuffer: Probability = 1.00, Count = 5
inc.Length -> inc.length: Probability = 0.40, Count = 8
inc.Length -> output.length:: Probability = 0.10, Count = 2
inc.Length -> "inc.length=": Probability = 0.10, Count = 2
inc.Length -> output.length=": Probability = 0.10, Count = 2
inc.Length -> output.offset: Probability = 0.10, Count = 2
inc.Length -> inc.length,: Probability = 0.10, Count = 2
inc.Length -> output.length-inc.length: Probability = 0.10, Count = 2
IsKanji -> isKanji: Probability = 1.00, Count = 1
characterClass -> characterClass: Probability = 0.75, Count = 3
characterClass -> KANJI: Probability = 0.25, Count = 1
characterCategoryMap[c] -> characterCategoryMap[c]: Probability = 1.00, Count = 2
KANJINUMERIC -> KANJINUMERIC: Probability = 1.00, Count = 1
index+ -> index+: Probability = 1.00, Count = 4
0.." -> 0..": Probability = 1.00, Count = 9
_tableArray.GetRelativeValue -> _tableArray.getValue: Probability = 1.00, Count = 2
_columnIndex -> _columnIndex: Probability = 1.00, Count = 4
ModClause -> ModClause: Probability = 1.00, Count = 3
AndQueryNode -> AndQueryNode: Probability = 1.00, Count = 2
SetRevFilter -> setRevFilter: Probability = 1.00, Count = 1
newFilter -> newFilter: Probability = 1.00, Count = 6
AssertNotStarted -> assertNotStarted: Probability = 1.00, Count = 4
RevFilter.ALL -> RevFilter.ALL: Probability = 1.00, Count = 1
this.array -> this.array: Probability = 1.00, Count = 2
this.limit -> this.limit: Probability = 1.00, Count = 3
GetVoiceChannelResponse -> GetVoiceChannelResult: Probability = 1.00, Count = 1
GetVoiceChannel -> getVoiceChannel: Probability = 1.00, Count = 1
GetVoiceChannelRequest -> GetVoiceChannelRequest: Probability = 1.00, Count = 1
Invoke<GetVoiceChannelResponse> -> executeGetVoiceChannel: Probability = 1.00, Count = 1
RevokeSecurityGroupIngressResponse -> RevokeSecurityGroupIngressResult: Probability = 1.00, Count = 1
RevokeSecurityGroupIngress -> revokeSecurityGroupIngress: Probability = 1.00, Count = 1
RevokeSecurityGroupIngressRequest -> RevokeSecurityGroupIngressRequest: Probability = 1.00, Count = 2
Invoke<RevokeSecurityGroupIngressResponse> -> executeRevokeSecurityGroupIngress: Probability = 1.00, Count = 1
java.nio.DoubleToByteBufferAdapter -> DoubleToByteBufferAdapter: Probability = 1.00, Count = 3
IPoint -> Point: Probability = 1.00, Count = 5
queryPoint, -> queryPoint,: Probability = 1.00, Count = 3
DistanceValueSource -> DistanceValueSource: Probability = 1.00, Count = 2
SimpleDateFormat -> SimpleDateFormat: Probability = 1.00, Count = 4
dtfmt -> dtfmt: Probability = 1.00, Count = 2
ArabicStemFilterFactory -> ArabicStemFilterFactory: Probability = 1.00, Count = 1
getIndex -> getIndex: Probability = 1.00, Count = 2
ListVoiceConnectorsResponse -> ListVoiceConnectorsResult: Probability = 1.00, Count = 1
ListVoiceConnectors -> listVoiceConnectors: Probability = 1.00, Count = 1
ListVoiceConnectorsRequest -> ListVoiceConnectorsRequest: Probability = 1.00, Count = 1
Invoke<ListVoiceConnectorsResponse> -> executeListVoiceConnectors: Probability = 1.00, Count = 1
GetOperationResponse -> GetOperationResult: Probability = 1.00, Count = 1
GetOperation -> getOperation: Probability = 1.00, Count = 1
GetOperationRequest -> GetOperationRequest: Probability = 1.00, Count = 1
Invoke<GetOperationResponse> -> executeGetOperation: Probability = 1.00, Count = 1
SetIdentityHeadersInNotificationsEnabledResponse -> SetIdentityHeadersInNotificationsEnabledResult: Probability = 1.00, Count = 1
SetIdentityHeadersInNotificationsEnabled -> setIdentityHeadersInNotificationsEnabled: Probability = 1.00, Count = 1
SetIdentityHeadersInNotificationsEnabledRequest -> SetIdentityHeadersInNotificationsEnabledRequest: Probability = 1.00, Count = 1
Invoke<SetIdentityHeadersInNotificationsEnabledResponse> -> executeSetIdentityHeadersInNotificationsEnabled: Probability = 1.00, Count = 1
SetSensitiveInputCells -> setSensitiveInputCells: Probability = 0.67, Count = 2
SetSensitiveInputCells -> sensitiveInputCells: Probability = 0.33, Count = 1
CellCacheEntry[] -> CellCacheEntry[]: Probability = 1.00, Count = 3
sensitiveInputCells -> sensitiveInputCells: Probability = 0.29, Count = 2
sensitiveInputCells -> _sensitiveInputCells: Probability = 0.14, Count = 1
sensitiveInputCells -> changeConsumingCells: Probability = 0.29, Count = 2
sensitiveInputCells -> CellCacheEntry.EMPTY_ARRAY: Probability = 0.14, Count = 1
sensitiveInputCells -> sensitiveInputCells.clone: Probability = 0.14, Count = 1
_sensitiveInputCells -> _sensitiveInputCells: Probability = 1.00, Count = 4
elements, -> elements,: Probability = 1.00, Count = 5
newElements, -> newElements,: Probability = 0.75, Count = 3
newElements, -> CopyOnWriteArrayList.this.add: Probability = 0.25, Count = 1
newElements[elements.Length] -> newElements[elements.length]: Probability = 1.00, Count = 1
DeleteHsmClientCertificateResponse -> DeleteHsmClientCertificateResult: Probability = 1.00, Count = 1
DeleteHsmClientCertificate -> deleteHsmClientCertificate: Probability = 1.00, Count = 1
DeleteHsmClientCertificateRequest -> DeleteHsmClientCertificateRequest: Probability = 1.00, Count = 1
Invoke<DeleteHsmClientCertificateResponse> -> executeDeleteHsmClientCertificate: Probability = 1.00, Count = 1
CreateAssessmentTargetResponse -> CreateAssessmentTargetResult: Probability = 1.00, Count = 1
CreateAssessmentTarget -> createAssessmentTarget: Probability = 1.00, Count = 1
CreateAssessmentTargetRequest -> CreateAssessmentTargetRequest: Probability = 1.00, Count = 1
Invoke<CreateAssessmentTargetResponse> -> executeCreateAssessmentTarget: Probability = 1.00, Count = 1
DescribeGlobalReplicationGroupsResponse -> DescribeGlobalReplicationGroupsResult: Probability = 1.00, Count = 1
DescribeGlobalReplicationGroups -> describeGlobalReplicationGroups: Probability = 1.00, Count = 1
DescribeGlobalReplicationGroupsRequest -> DescribeGlobalReplicationGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeGlobalReplicationGroupsResponse> -> executeDescribeGlobalReplicationGroups: Probability = 1.00, Count = 1
_sheetRefIndex -> _sheetRefIndex: Probability = 1.00, Count = 1
_nameNumber -> _nameNumber: Probability = 1.00, Count = 1
ParseSegmentName -> parseSegmentName: Probability = 1.00, Count = 1
GetRefLogMessage -> getRefLogMessage: Probability = 1.00, Count = 2
SetPackedGitLimit -> setPackedGitLimit: Probability = 1.00, Count = 1
packedGitLimit -> packedGitLimit: Probability = 1.00, Count = 3
IList<Note> -> List<Note>: Probability = 1.00, Count = 2
notes -> notes: Probability = 1.00, Count = 4
map -> map: Probability = 1.00, Count = 18
notesCommit -> notesCommit: Probability = 0.48, Count = 11
notesCommit -> ref.getObjectId: Probability = 0.17, Count = 4
notesCommit -> NoteMap.read: Probability = 0.17, Count = 4
notesCommit -> walk.getObjectReader: Probability = 0.17, Count = 4
ListOrganizationsResponse -> ListOrganizationsResult: Probability = 1.00, Count = 1
ListOrganizations -> listOrganizations: Probability = 1.00, Count = 1
ListOrganizationsRequest -> ListOrganizationsRequest: Probability = 1.00, Count = 1
Invoke<ListOrganizationsResponse> -> executeListOrganizations: Probability = 1.00, Count = 1
ParseTreeMatch -> ParseTreeMatch: Probability = 1.00, Count = 2
Match -> match: Probability = 1.00, Count = 7
tree, -> tree,: Probability = 0.75, Count = 9
tree, -> xpath: Probability = 0.08, Count = 1
tree, -> xpath,: Probability = 0.08, Count = 1
tree, -> matcher.getParser: Probability = 0.08, Count = 1
GridsetRecord -> GridsetRecord: Probability = 1.00, Count = 2
field_1_gridset_flag -> field_1_gridset_flag: Probability = 1.00, Count = 1
PagedBytesDataInput -> PagedBytesDataInput: Probability = 0.67, Count = 4
PagedBytesDataInput -> getDataInput: Probability = 0.33, Count = 2
clone.SetPosition -> clone.setPosition: Probability = 1.00, Count = 1
MissingObjectException -> MissingObjectException: Probability = 1.00, Count = 4
.missingObject, -> .missingObject,: Probability = 1.00, Count = 2
id.Name -> id.name: Probability = 1.00, Count = 2
pathOffset, -> pathOffset,: Probability = 1.00, Count = 1
pathLen -> pathLen: Probability = 0.67, Count = 6
pathLen -> byte[Math.max: Probability = 0.11, Count = 1
pathLen -> DEFAULT_PATH_SIZE: Probability = 0.11, Count = 1
pathLen -> n[pathLen]: Probability = 0.11, Count = 1
pathOffset -> pathOffset: Probability = 1.00, Count = 2
IList<HunkHeader> -> List<?: Probability = 0.40, Count = 2
IList<HunkHeader> -> extends: Probability = 0.40, Count = 2
IList<HunkHeader> -> CombinedHunkHeader>: Probability = 0.20, Count = 1
GetHunks -> getHunks: Probability = 0.67, Count = 2
GetHunks -> HunkHeader>: Probability = 0.33, Count = 1
base.GetHunks -> List<CombinedHunkHeader>: Probability = 0.50, Count = 1
base.GetHunks -> super.getHunks: Probability = 0.50, Count = 1
CountPendingDecisionTasksResponse -> PendingTaskCount: Probability = 1.00, Count = 1
CountPendingDecisionTasks -> countPendingDecisionTasks: Probability = 1.00, Count = 1
CountPendingDecisionTasksRequest -> CountPendingDecisionTasksRequest: Probability = 1.00, Count = 1
Invoke<CountPendingDecisionTasksResponse> -> executeCountPendingDecisionTasks: Probability = 1.00, Count = 1
ListStackResourcesResponse -> ListStackResourcesResult: Probability = 1.00, Count = 1
ListStackResources -> listStackResources: Probability = 1.00, Count = 1
ListStackResourcesRequest -> ListStackResourcesRequest: Probability = 1.00, Count = 1
Invoke<ListStackResourcesResponse> -> executeListStackResources: Probability = 1.00, Count = 1
keyId, -> keyId,: Probability = 1.00, Count = 4
secret, -> secret,: Probability = 1.00, Count = 3
securityToken, -> securityToken,: Probability = 1.00, Count = 1
expiredHours -> expiredHours: Probability = 1.00, Count = 4
keyId -> keyId: Probability = 1.00, Count = 4
AccessSecret -> this.accessSecret: Probability = 0.80, Count = 4
AccessSecret -> =: Probability = 0.20, Count = 1
SecurityToken -> this.securityToken: Probability = 1.00, Count = 2
securityToken -> securityToken: Probability = 1.00, Count = 3
SetExpiredDate -> setExpiredDate: Probability = 1.00, Count = 2
writeFields -> writeFields: Probability = 0.33, Count = 1
writeFields -> currentPutField: Probability = 0.67, Count = 2
AssignIpv6AddressesResponse -> AssignIpv6AddressesResult: Probability = 1.00, Count = 1
AssignIpv6Addresses -> assignIpv6Addresses: Probability = 1.00, Count = 1
AssignIpv6AddressesRequest -> AssignIpv6AddressesRequest: Probability = 1.00, Count = 1
Invoke<AssignIpv6AddressesResponse> -> executeAssignIpv6Addresses: Probability = 1.00, Count = 1
ModifyDBInstanceResponse -> DBInstance: Probability = 1.00, Count = 1
ModifyDBInstance -> modifyDBInstance: Probability = 1.00, Count = 1
ModifyDBInstanceRequest -> ModifyDBInstanceRequest: Probability = 1.00, Count = 2
Invoke<ModifyDBInstanceResponse> -> executeModifyDBInstance: Probability = 1.00, Count = 1
RemoveAttributesFromFindingsResponse -> RemoveAttributesFromFindingsResult: Probability = 1.00, Count = 1
RemoveAttributesFromFindings -> removeAttributesFromFindings: Probability = 1.00, Count = 1
RemoveAttributesFromFindingsRequest -> RemoveAttributesFromFindingsRequest: Probability = 1.00, Count = 1
Invoke<RemoveAttributesFromFindingsResponse> -> executeRemoveAttributesFromFindings: Probability = 1.00, Count = 1
JoinDocFreqValueSource -> JoinDocFreqValueSource: Probability = 1.00, Count = 1
qfield -> qfield: Probability = 1.00, Count = 2
this.m_qfield -> this.qfield: Probability = 1.00, Count = 1
delegate1.ReadDouble -> readLong: Probability = 1.00, Count = 1
DescribeDirectoryConfigsResponse -> DescribeDirectoryConfigsResult: Probability = 1.00, Count = 1
DescribeDirectoryConfigs -> describeDirectoryConfigs: Probability = 1.00, Count = 1
DescribeDirectoryConfigsRequest -> DescribeDirectoryConfigsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDirectoryConfigsResponse> -> executeDescribeDirectoryConfigs: Probability = 1.00, Count = 1
GetAccountResponse -> GetAccountResult: Probability = 1.00, Count = 1
GetAccount -> getAccount: Probability = 1.00, Count = 1
GetAccountRequest -> GetAccountRequest: Probability = 1.00, Count = 1
Invoke<GetAccountResponse> -> executeGetAccount: Probability = 1.00, Count = 1
.type -> .type: Probability = 1.00, Count = 5
GetShortRawValue -> getShortRawValue: Probability = 1.00, Count = 1
this.GetRawValue -> getRawValue: Probability = 1.00, Count = 2
d2 -> d2: Probability = 1.00, Count = 4
GetPublicKeyConfigResponse -> GetPublicKeyConfigResult: Probability = 1.00, Count = 1
GetPublicKeyConfig -> getPublicKeyConfig: Probability = 1.00, Count = 1
GetPublicKeyConfigRequest -> GetPublicKeyConfigRequest: Probability = 1.00, Count = 1
Invoke<GetPublicKeyConfigResponse> -> executeGetPublicKeyConfig: Probability = 1.00, Count = 1
NGit.Transport.URIish -> URIish: Probability = 0.75, Count = 21
NGit.Transport.URIish -> final: Probability = 0.25, Count = 7
SetUser -> setUser: Probability = 1.00, Count = 1
r.user -> r.user: Probability = 1.00, Count = 1
EscherArrayProperty -> EscherArrayProperty: Probability = 1.00, Count = 2
complexData -> complexSize: Probability = 0.14, Count = 3
complexData -> complexData: Probability = 0.43, Count = 9
complexData -> this: Probability = 0.14, Count = 3
complexData -> IS_COMPLEX: Probability = 0.05, Count = 1
complexData -> complexSize,: Probability = 0.05, Count = 1
complexData -> MAX_RECORD_LENGTH: Probability = 0.05, Count = 1
complexData -> ?: Probability = 0.05, Count = 1
complexData -> complexData.length: Probability = 0.05, Count = 1
complexData -> setComplexData: Probability = 0.05, Count = 1
CheckComplexData -> complexSize: Probability = 1.00, Count = 1
emptyComplexPart -> emptyComplexPart: Probability = 1.00, Count = 2
ToASCIIString -> toASCIIString: Probability = 1.00, Count = 1
GetContactResponse -> GetContactResult: Probability = 1.00, Count = 1
GetContact -> getContact: Probability = 1.00, Count = 1
GetContactRequest -> GetContactRequest: Probability = 1.00, Count = 1
Invoke<GetContactResponse> -> executeGetContact: Probability = 1.00, Count = 1
RemoveHiddenCount -> removeHiddenCount: Probability = 1.00, Count = 1
PropertyIDMap.PID_HIDDENCOUNT -> PropertyIDMap.PID_HIDDENCOUNT: Probability = 1.00, Count = 1
GetRestApisResponse -> GetRestApisResult: Probability = 1.00, Count = 1
GetRestApis -> getRestApis: Probability = 1.00, Count = 1
GetRestApisRequest -> GetRestApisRequest: Probability = 1.00, Count = 1
Invoke<GetRestApisResponse> -> executeGetRestApis: Probability = 1.00, Count = 1
returnStates -> returnStates: Probability = 0.23, Count = 3
returnStates -> calculateHashCode: Probability = 0.08, Count = 1
returnStates -> assert: Probability = 0.15, Count = 2
returnStates -> parents!=null: Probability = 0.08, Count = 1
returnStates -> &&: Probability = 0.15, Count = 2
returnStates -> parents.length>0: Probability = 0.08, Count = 1
returnStates -> returnStates!=null: Probability = 0.08, Count = 1
returnStates -> this.parents: Probability = 0.08, Count = 1
returnStates -> this.returnStates: Probability = 0.08, Count = 1
this.parents -> returnStates.length>0: Probability = 1.00, Count = 1
DeleteStageResponse -> DeleteStageResult: Probability = 1.00, Count = 1
DeleteStage -> deleteStage: Probability = 1.00, Count = 1
DeleteStageRequest -> DeleteStageRequest: Probability = 1.00, Count = 1
Invoke<DeleteStageResponse> -> executeDeleteStage: Probability = 1.00, Count = 1
elements.Clone -> elements.clone: Probability = 1.00, Count = 2
ignoredReadlimit -> _marked_offset: Probability = 0.17, Count = 1
ignoredReadlimit -> _current_offset: Probability = 0.17, Count = 1
ignoredReadlimit -> _marked_offset_count: Probability = 0.17, Count = 1
ignoredReadlimit -> 0,: Probability = 0.17, Count = 1
ignoredReadlimit -> _current_block_count: Probability = 0.17, Count = 1
ignoredReadlimit -> -: Probability = 0.17, Count = 1
delegate1.Mark -> Math.max: Probability = 1.00, Count = 1
"NOT -> "NOT: Probability = 1.00, Count = 1
SetExpectDataAfterPackFooter -> setExpectDataAfterPackFooter: Probability = 1.00, Count = 1
expectDataAfterPackFooter -> expectDataAfterPackFooter: Probability = 1.00, Count = 2
request.AddSubResource -> uriResourcePath: Probability = 1.00, Count = 2
"publicAccessBlock" -> "/v20180820/configuration/publicAccessBlock": Probability = 1.00, Count = 2
request.MarshallerVersion -> request.setResourcePath: Probability = 0.67, Count = 4
request.MarshallerVersion -> uriResourcePath: Probability = 0.33, Count = 2
request.UseQueryString -> uriResourcePath: Probability = 1.00, Count = 2
FetchResult -> FetchResult: Probability = 1.00, Count = 1
GetFetchResult -> getFetchResult: Probability = 1.00, Count = 1
this.fetchResult -> this.fetchResult: Probability = 1.00, Count = 1
GetJourneyExecutionMetricsResponse -> GetJourneyExecutionMetricsResult: Probability = 1.00, Count = 1
GetJourneyExecutionMetrics -> getJourneyExecutionMetrics: Probability = 1.00, Count = 1
GetJourneyExecutionMetricsRequest -> GetJourneyExecutionMetricsRequest: Probability = 1.00, Count = 1
Invoke<GetJourneyExecutionMetricsResponse> -> executeGetJourneyExecutionMetrics: Probability = 1.00, Count = 1
.FullName -> .getName: Probability = 1.00, Count = 8
UpdateStreamingDistributionResponse -> UpdateStreamingDistributionResult: Probability = 1.00, Count = 1
UpdateStreamingDistribution -> updateStreamingDistribution: Probability = 1.00, Count = 1
UpdateStreamingDistributionRequest -> UpdateStreamingDistributionRequest: Probability = 1.00, Count = 1
Invoke<UpdateStreamingDistributionResponse> -> executeUpdateStreamingDistribution: Probability = 1.00, Count = 1
AttachNetworkInterfaceResponse -> AttachNetworkInterfaceResult: Probability = 1.00, Count = 1
AttachNetworkInterface -> attachNetworkInterface: Probability = 1.00, Count = 1
AttachNetworkInterfaceRequest -> AttachNetworkInterfaceRequest: Probability = 1.00, Count = 1
Invoke<AttachNetworkInterfaceResponse> -> executeAttachNetworkInterface: Probability = 1.00, Count = 1
HungarianStemmer -> HungarianStemmer: Probability = 1.00, Count = 1
DescribeDatasetResponse -> DescribeDatasetResult: Probability = 1.00, Count = 1
DescribeDataset -> describeDataset: Probability = 1.00, Count = 1
DescribeDatasetRequest -> DescribeDatasetRequest: Probability = 1.00, Count = 1
Invoke<DescribeDatasetResponse> -> executeDescribeDataset: Probability = 1.00, Count = 1
UpdateShardCountResponse -> UpdateShardCountResult: Probability = 1.00, Count = 1
UpdateShardCount -> updateShardCount: Probability = 1.00, Count = 1
UpdateShardCountRequest -> UpdateShardCountRequest: Probability = 1.00, Count = 1
Invoke<UpdateShardCountResponse> -> executeUpdateShardCount: Probability = 1.00, Count = 1
BoundSheetRecord[] -> BoundSheetRecord[]: Probability = 0.60, Count = 3
BoundSheetRecord[] -> orderByBofPosition: Probability = 0.20, Count = 1
BoundSheetRecord[] -> List<BoundSheetRecord>: Probability = 0.20, Count = 1
GetBoundSheetRecords -> getBoundSheetRecords: Probability = 1.00, Count = 2
boundSheetRecords.ToArray -> boundSheetRecords.toArray: Probability = 1.00, Count = 2
BoundSheetRecord -> BoundSheetRecord[0]: Probability = 0.25, Count = 1
BoundSheetRecord -> BoundSheetRecord: Probability = 0.50, Count = 2
BoundSheetRecord -> bsr: Probability = 0.25, Count = 1
FooterKey -> FooterKey: Probability = 1.00, Count = 3
bPtr -> kRaw.length: Probability = 0.33, Count = 1
bPtr -> bPtr: Probability = 0.67, Count = 2
kPtr -> kPtr: Probability = 1.00, Count = 2
CreateUserResponse -> CreateUserResult: Probability = 1.00, Count = 1
CreateUser -> createUser: Probability = 1.00, Count = 1
CreateUserRequest -> CreateUserRequest: Probability = 1.00, Count = 2
Invoke<CreateUserResponse> -> executeCreateUser: Probability = 1.00, Count = 1
S3Origin -> S3Origin: Probability = 1.00, Count = 2
originAccessIdentity -> originAccessIdentity: Probability = 1.00, Count = 2
_originAccessIdentity -> setOriginAccessIdentity: Probability = 1.00, Count = 1
StartTopicsDetectionJobResponse -> StartTopicsDetectionJobResult: Probability = 1.00, Count = 1
StartTopicsDetectionJob -> startTopicsDetectionJob: Probability = 1.00, Count = 1
StartTopicsDetectionJobRequest -> StartTopicsDetectionJobRequest: Probability = 1.00, Count = 1
Invoke<StartTopicsDetectionJobResponse> -> executeStartTopicsDetectionJob: Probability = 1.00, Count = 1
RevokeClusterSecurityGroupIngressResponse -> ClusterSecurityGroup: Probability = 1.00, Count = 1
RevokeClusterSecurityGroupIngress -> revokeClusterSecurityGroupIngress: Probability = 1.00, Count = 1
RevokeClusterSecurityGroupIngressRequest -> RevokeClusterSecurityGroupIngressRequest: Probability = 1.00, Count = 1
Invoke<RevokeClusterSecurityGroupIngressResponse> -> executeRevokeClusterSecurityGroupIngress: Probability = 1.00, Count = 1
EnterRule -> enterRule: Probability = 1.00, Count = 3
localctx, -> localctx,: Probability = 1.00, Count = 9
localctx -> localctx: Probability = 1.00, Count = 4
_ctx.Start -> _ctx.start: Probability = 1.00, Count = 3
TriggerEnterRuleEvent -> triggerEnterRuleEvent: Probability = 1.00, Count = 3
NewReader -> newReader: Probability = 1.00, Count = 1
NGit.Storage.File.WindowCursor -> WindowCursor: Probability = 1.00, Count = 1
PathToString -> pathToString: Probability = 1.00, Count = 5
component -> component: Probability = 1.00, Count = 2
got: -> got:: Probability = 1.00, Count = 3
numChars -> numChars: Probability = 1.00, Count = 3
CancelSpotInstanceRequestsRequest -> CancelSpotInstanceRequestsRequest: Probability = 1.00, Count = 2
spotInstanceRequestIds -> spotInstanceRequestIds: Probability = 1.00, Count = 2
_spotInstanceRequestIds -> setSpotInstanceRequestIds: Probability = 1.00, Count = 1
subfilters[i].ToString -> sb.append: Probability = 1.00, Count = 16
GetConnectionResponse -> GetConnectionResult: Probability = 1.00, Count = 1
GetConnection -> getConnection: Probability = 1.00, Count = 1
GetConnectionRequest -> GetConnectionRequest: Probability = 1.00, Count = 1
Invoke<GetConnectionResponse> -> executeGetConnection: Probability = 1.00, Count = 1
".." -> a+".."+b: Probability = 0.20, Count = 1
".." -> "..": Probability = 0.80, Count = 4
AddNoteCommand -> AddNoteCommand: Probability = 1.00, Count = 2
NotesAdd -> notesAdd: Probability = 1.00, Count = 1
Antlr4.Runtime.Atn.LexerIndexedCustomAction -> LexerIndexedCustomAction: Probability = 0.75, Count = 3
Antlr4.Runtime.Atn.LexerIndexedCustomAction -> other.offset&&: Probability = 0.25, Count = 1
action.Equals -> action.equals: Probability = 1.00, Count = 1
other.action -> other.action: Probability = 1.00, Count = 1
DeleteNamespaceAuthorizationRequest -> DeleteNamespaceAuthorizationRequest: Probability = 1.00, Count = 1
"DeleteNamespaceAuthorization", -> "DeleteNamespaceAuthorization",: Probability = 1.00, Count = 1
"/namespace/[Namespace]/authorizations/[AuthorizeId]" -> "/namespace/[Namespace]/authorizations/[AuthorizeId]": Probability = 1.00, Count = 2
b[ptr] -> b[ptr]: Probability = 1.00, Count = 8
ptr, -> ptr,: Probability = 1.00, Count = 13
DescribeHostsResponse -> DescribeHostsResult: Probability = 1.00, Count = 1
DescribeHosts -> describeHosts: Probability = 1.00, Count = 1
DescribeHostsRequest -> DescribeHostsRequest: Probability = 1.00, Count = 1
Invoke<DescribeHostsResponse> -> executeDescribeHosts: Probability = 1.00, Count = 1
OpenNLPChunkerFilterFactory -> OpenNLPChunkerFilterFactory: Probability = 1.00, Count = 1
chunkerModelFile -> chunkerModelFile: Probability = 1.00, Count = 3
CHUNKER_MODEL -> CHUNKER_MODEL: Probability = 1.00, Count = 1
StartStreamEncryptionResponse -> StartStreamEncryptionResult: Probability = 1.00, Count = 1
StartStreamEncryption -> startStreamEncryption: Probability = 1.00, Count = 1
StartStreamEncryptionRequest -> StartStreamEncryptionRequest: Probability = 1.00, Count = 1
Invoke<StartStreamEncryptionResponse> -> executeStartStreamEncryption: Probability = 1.00, Count = 1
DeleteCloudFrontOriginAccessIdentityRequest -> DeleteCloudFrontOriginAccessIdentityRequest: Probability = 1.00, Count = 2
ifMatch -> ifMatch: Probability = 1.00, Count = 6
_ifMatch -> setIfMatch: Probability = 1.00, Count = 3
getWidth -> getWidth: Probability = 1.00, Count = 2
mBitmap.getWidth -> mImage.getWidth: Probability = 1.00, Count = 1
GetUntrackedFolders -> getUntrackedFolders: Probability = 1.00, Count = 1
toBeAdded -> toBeAdded: Probability = 0.60, Count = 3
toBeAdded -> ret.removeLast: Probability = 0.20, Count = 1
toBeAdded -> ret.addLast: Probability = 0.20, Count = 1
CredentialsProviderUserInfo -> CredentialsProviderUserInfo: Probability = 1.00, Count = 1
Session -> Session: Probability = 1.00, Count = 2
session, -> session,CredentialsProvider: Probability = 0.50, Count = 1
session, -> session,: Probability = 0.50, Count = 1
credentialsProvider -> credentialsProvider: Probability = 0.60, Count = 6
credentialsProvider -> profile: Probability = 0.10, Count = 1
credentialsProvider -> this.credentialsProvider: Probability = 0.20, Count = 2
credentialsProvider -> this.clientProfile.setCredentialsProvider: Probability = 0.10, Count = 1
this.uri -> this.uri: Probability = 1.00, Count = 3
CreateURI -> createURI: Probability = 1.00, Count = 1
IsCellInternalDateFormatted -> isCellInternalDateFormatted: Probability = 1.00, Count = 1
bDate -> bDate: Probability = 0.75, Count = 3
bDate -> style.getDataFormat: Probability = 0.25, Count = 1
ICellStyle -> CellStyle: Probability = 1.00, Count = 3
IsInternalDateFormat -> isInternalDateFormat: Probability = 1.00, Count = 2
allowEmpty -> files,: Probability = 0.33, Count = 1
allowEmpty -> allowEmpty: Probability = 0.67, Count = 2
"empty -> "empty: Probability = 1.00, Count = 2
segmentsFile -> segmentsFile: Probability = 0.50, Count = 2
segmentsFile -> segmentsFile+: Probability = 0.25, Count = 1
segmentsFile -> implementation!": Probability = 0.25, Count = 1
id: -> InvalidObjectIdException: Probability = 1.00, Count = 1
FromHexString -> fromHexString: Probability = 1.00, Count = 5
Constants.EncodeASCII -> Constants.encodeASCII: Probability = 1.00, Count = 5
GetReservedInstancesExchangeQuoteResponse -> GetReservedInstancesExchangeQuoteResult: Probability = 1.00, Count = 1
GetReservedInstancesExchangeQuote -> getReservedInstancesExchangeQuote: Probability = 1.00, Count = 1
GetReservedInstancesExchangeQuoteRequest -> GetReservedInstancesExchangeQuoteRequest: Probability = 1.00, Count = 1
Invoke<GetReservedInstancesExchangeQuoteResponse> -> executeGetReservedInstancesExchangeQuote: Probability = 1.00, Count = 1
GetFolderPathResponse -> GetFolderPathResult: Probability = 1.00, Count = 1
GetFolderPath -> getFolderPath: Probability = 1.00, Count = 1
GetFolderPathRequest -> GetFolderPathRequest: Probability = 1.00, Count = 1
Invoke<GetFolderPathResponse> -> executeGetFolderPath: Probability = 1.00, Count = 1
DeleteDirectConnectGatewayAssociationResponse -> DeleteDirectConnectGatewayAssociationResult: Probability = 1.00, Count = 1
DeleteDirectConnectGatewayAssociation -> deleteDirectConnectGatewayAssociation: Probability = 1.00, Count = 1
DeleteDirectConnectGatewayAssociationRequest -> DeleteDirectConnectGatewayAssociationRequest: Probability = 1.00, Count = 1
Invoke<DeleteDirectConnectGatewayAssociationResponse> -> executeDeleteDirectConnectGatewayAssociation: Probability = 1.00, Count = 1
Sharpen.Util.DoubleToRawLongBits -> Double.doubleToRawLongBits: Probability = 1.00, Count = 2
SearchContactsResponse -> SearchContactsResult: Probability = 1.00, Count = 1
SearchContacts -> searchContacts: Probability = 1.00, Count = 1
SearchContactsRequest -> SearchContactsRequest: Probability = 1.00, Count = 1
Invoke<SearchContactsResponse> -> executeSearchContacts: Probability = 1.00, Count = 1
CreatePartnerEventSourceResponse -> CreatePartnerEventSourceResult: Probability = 1.00, Count = 1
CreatePartnerEventSource -> createPartnerEventSource: Probability = 1.00, Count = 1
CreatePartnerEventSourceRequest -> CreatePartnerEventSourceRequest: Probability = 1.00, Count = 1
Invoke<CreatePartnerEventSourceResponse> -> executeCreatePartnerEventSource: Probability = 1.00, Count = 1
CreateNamespaceAuthorizationRequest -> CreateNamespaceAuthorizationRequest: Probability = 1.00, Count = 1
"CreateNamespaceAuthorization", -> "CreateNamespaceAuthorization",: Probability = 1.00, Count = 1
"/namespace/[Namespace]/authorizations" -> "/namespace/[Namespace]/authorizations": Probability = 1.00, Count = 2
SetPass -> setPass: Probability = 1.00, Count = 1
r.pass -> r.pass: Probability = 1.00, Count = 1
lexer.PushMode -> lexer.pushMode: Probability = 1.00, Count = 1
CreateModelVersionResponse -> CreateModelVersionResult: Probability = 1.00, Count = 1
CreateModelVersion -> createModelVersion: Probability = 1.00, Count = 1
CreateModelVersionRequest -> CreateModelVersionRequest: Probability = 1.00, Count = 1
Invoke<CreateModelVersionResponse> -> executeCreateModelVersion: Probability = 1.00, Count = 1
UpdateServicePrimaryTaskSetResponse -> UpdateServicePrimaryTaskSetResult: Probability = 1.00, Count = 1
UpdateServicePrimaryTaskSet -> updateServicePrimaryTaskSet: Probability = 1.00, Count = 1
UpdateServicePrimaryTaskSetRequest -> UpdateServicePrimaryTaskSetRequest: Probability = 1.00, Count = 1
Invoke<UpdateServicePrimaryTaskSetResponse> -> executeUpdateServicePrimaryTaskSet: Probability = 1.00, Count = 1
LinearRegressionFunction -> LinearRegressionFunction: Probability = 1.00, Count = 3
FUNCTION -> FUNCTION: Probability = 1.00, Count = 1
this.function -> this.function: Probability = 1.00, Count = 1
old -> old: Probability = 1.00, Count = 10
this.state -> this.state: Probability = 1.00, Count = 3
old.state -> old.state: Probability = 1.00, Count = 1
this.alt -> this.alt: Probability = 1.00, Count = 4
old.alt -> old.alt: Probability = 1.00, Count = 1
old.context -> old.context: Probability = 1.00, Count = 1
this.semanticContext -> this.semanticContext: Probability = 1.00, Count = 3
old.semanticContext -> old.semanticContext: Probability = 1.00, Count = 1
this.reachesIntoOuterContext -> this.reachesIntoOuterContext: Probability = 1.00, Count = 2
old.reachesIntoOuterContext -> old.reachesIntoOuterContext: Probability = 1.00, Count = 1
DescribeEntitiesDetectionJobResponse -> DescribeEntitiesDetectionJobResult: Probability = 1.00, Count = 1
DescribeEntitiesDetectionJob -> describeEntitiesDetectionJob: Probability = 1.00, Count = 1
DescribeEntitiesDetectionJobRequest -> DescribeEntitiesDetectionJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeEntitiesDetectionJobResponse> -> executeDescribeEntitiesDetectionJob: Probability = 1.00, Count = 1
ListChangedBlocksResponse -> ListChangedBlocksResult: Probability = 1.00, Count = 1
ListChangedBlocks -> listChangedBlocks: Probability = 1.00, Count = 1
ListChangedBlocksRequest -> ListChangedBlocksRequest: Probability = 1.00, Count = 1
Invoke<ListChangedBlocksResponse> -> executeListChangedBlocks: Probability = 1.00, Count = 1
removeFirstOccurrence -> removeFirstOccurrence: Probability = 1.00, Count = 1
removeFirstOccurrenceImpl -> removeFirstOccurrenceImpl: Probability = 1.00, Count = 2
IList<PerfTask> -> ArrayList<PerfTask>: Probability = 1.00, Count = 1
ExtractTasks -> extractTasks: Probability = 1.00, Count = 2
List<PerfTask> -> ArrayList<PerfTask>: Probability = 0.50, Count = 1
List<PerfTask> -> ArrayList<>: Probability = 0.50, Count = 1
res, -> res,: Probability = 1.00, Count = 1
sequence -> sequence: Probability = 0.86, Count = 6
sequence -> .duplicate: Probability = 0.14, Count = 1
FacetsCollector -> FacetsCollector: Probability = 1.00, Count = 1
keepScores -> keepScores: Probability = 1.00, Count = 2
this.keepScores -> this.keepScores: Probability = 1.00, Count = 1
UpdateNodegroupVersionResponse -> UpdateNodegroupVersionResult: Probability = 1.00, Count = 1
UpdateNodegroupVersion -> updateNodegroupVersion: Probability = 1.00, Count = 1
UpdateNodegroupVersionRequest -> UpdateNodegroupVersionRequest: Probability = 1.00, Count = 1
Invoke<UpdateNodegroupVersionResponse> -> executeUpdateNodegroupVersion: Probability = 1.00, Count = 1
ClearDFA -> clearDFA: Probability = 1.00, Count = 1
simulator -> simulator: Probability = 1.00, Count = 1
clearing -> clearing: Probability = 1.00, Count = 1
DFA." -> DFA.": Probability = 1.00, Count = 1
"Can -> "Can: Probability = 1.00, Count = 2
IPoint, -> Point,: Probability = 1.00, Count = 1
UntagResource -> untagResource: Probability = 1.00, Count = 2
UntagResourceRequest -> UntagResourceRequest: Probability = 1.00, Count = 2
UntagResourceResponseUnmarshaller.Instance -> executeUntagResource: Probability = 1.00, Count = 2
CreateDBSecurityGroupResponse -> DBSecurityGroup: Probability = 1.00, Count = 1
CreateDBSecurityGroup -> createDBSecurityGroup: Probability = 1.00, Count = 1
CreateDBSecurityGroupRequest -> CreateDBSecurityGroupRequest: Probability = 1.00, Count = 2
Invoke<CreateDBSecurityGroupResponse> -> executeCreateDBSecurityGroup: Probability = 1.00, Count = 1
ExpressionValueSource -> ExpressionValueSource: Probability = 1.00, Count = 2
expression -> expression: Probability = 0.75, Count = 3
expression -> map.put: Probability = 0.25, Count = 1
GetPreferredEncoding -> getPreferredEncoding: Probability = 1.00, Count = 1
ISO_8859_1.WebName -> ISO_8859_1.name: Probability = 1.00, Count = 1
GetIndexSearcher -> getIndexSearcher: Probability = 1.00, Count = 1
indexReader -> indexReader: Probability = 1.00, Count = 1
indexReader.IncRef -> indexReader.incRef: Probability = 1.00, Count = 1
indexSearcher -> indexSearcher: Probability = 1.00, Count = 1
German2Stemmer -> German2Stemmer: Probability = 1.00, Count = 1
FacetLabel -> FacetLabel: Probability = 1.00, Count = 7
components -> components: Probability = 1.00, Count = 3
this.Components -> this.components: Probability = 1.00, Count = 1
components.Length -> components.length: Probability = 1.00, Count = 1
CheckComponents -> checkComponents: Probability = 0.67, Count = 2
CheckComponents -> components.length: Probability = 0.33, Count = 1
rv.VisitRecord -> rv.visitRecord: Probability = 0.81, Count = 13
rv.VisitRecord -> rv::visitRecord: Probability = 0.12, Count = 2
rv.VisitRecord -> _validationList.forEach: Probability = 0.06, Count = 1
RecordBase -> RecordBase: Probability = 1.00, Count = 5
rb -> rb: Probability = 0.57, Count = 4
rb -> _recs.get: Probability = 0.14, Count = 1
rb -> .visitContainedRecords: Probability = 0.14, Count = 1
rb -> _end: Probability = 0.14, Count = 1
RecordAggregate -> RecordAggregate: Probability = 1.00, Count = 5
SetDirCache -> setDirCache: Probability = 1.00, Count = 1
DirCache -> DirCache: Probability = 1.00, Count = 5
dc -> dc: Probability = 0.89, Count = 8
dc -> this.dircache: Probability = 0.11, Count = 1
this.dircache -> implicitDirCache: Probability = 1.00, Count = 1
lo -> lo: Probability = 1.00, Count = 10
hi -> hi: Probability = 0.89, Count = 16
hi -> 1+hi: Probability = 0.06, Count = 1
hi -> hi*indexInterval: Probability = 0.06, Count = 1
mid -> mid: Probability = 0.82, Count = 14
mid -> mid*indexInterval: Probability = 0.06, Count = 1
mid -> docStarts[mid: Probability = 0.06, Count = 1
mid -> mid++: Probability = 0.06, Count = 1
nWritableChars -> nWritableChars: Probability = 1.00, Count = 2
_ulrOutput.AvailableSpace -> _ulrOutput.getAvailableSpace: Probability = 1.00, Count = 2
WriteContinue -> writeContinue: Probability = 1.00, Count = 3
FormatFlagsConversionMismatchException -> FormatFlagsConversionMismatchException: Probability = 1.00, Count = 1
this.f -> this.f: Probability = 1.00, Count = 1
GetNextHeads -> getNextHeads: Probability = 1.00, Count = 1
FileNameMatcher.EMPTY_HEAD_LIST -> FileNameMatcher.EMPTY_HEAD_LIST: Probability = 1.00, Count = 1
AddQueryBuilder -> addQueryBuilder: Probability = 1.00, Count = 1
nodeName, -> nodeName,: Probability = 1.00, Count = 4
builder -> builder: Probability = 0.73, Count = 16
builder -> builders.get: Probability = 0.09, Count = 2
builder -> n.getNodeName: Probability = 0.09, Count = 2
builder -> e.getNodeName: Probability = 0.09, Count = 2
m_queryFactory.AddBuilder -> queryFactory.addBuilder: Probability = 1.00, Count = 1
DefineDecisionState -> defineDecisionState: Probability = 1.00, Count = 1
DecisionState -> DecisionState: Probability = 1.00, Count = 3
decisionToState.Count -> decisionToState.add: Probability = 0.50, Count = 1
decisionToState.Count -> !decisionToState.isEmpty: Probability = 0.50, Count = 1
s.decision -> s.decision: Probability = 1.00, Count = 2
decisionToDFA[decisionToDFA.Length -> decisionToState.size: Probability = 1.00, Count = 1
AfterRefresh -> afterRefresh: Probability = 1.00, Count = 1
didRefresh -> didRefresh: Probability = 1.00, Count = 1
outerInstance.RefreshDone -> refreshDone: Probability = 1.00, Count = 1
PrevLF -> prevLF: Probability = 1.00, Count = 2
chrA -> chrA: Probability = 1.00, Count = 6
ConsumeContentSourceTask -> ConsumeContentSourceTask: Probability = 1.00, Count = 1
runData.ContentSource -> runData.getContentSource: Probability = 1.00, Count = 1
DescribeInstanceTypeOfferingsResponse -> DescribeInstanceTypeOfferingsResult: Probability = 1.00, Count = 1
DescribeInstanceTypeOfferings -> describeInstanceTypeOfferings: Probability = 1.00, Count = 1
DescribeInstanceTypeOfferingsRequest -> DescribeInstanceTypeOfferingsRequest: Probability = 1.00, Count = 1
Invoke<DescribeInstanceTypeOfferingsResponse> -> executeDescribeInstanceTypeOfferings: Probability = 1.00, Count = 1
ClearDrawingGroups -> clearDrawingGroups: Probability = 1.00, Count = 1
drawingGroups.Clear -> drawingGroups.clear: Probability = 1.00, Count = 1
offset2 -> offset2: Probability = 0.44, Count = 4
offset2 -> -offset: Probability = 0.11, Count = 1
offset2 -> elseoffset2: Probability = 0.11, Count = 1
offset2 -> hours: Probability = 0.11, Count = 1
offset2 -> minutes: Probability = 0.22, Count = 2
ident.GetWhen -> ident.getWhen: Probability = 1.00, Count = 6
tz -> SystemReader.getInstance: Probability = 0.14, Count = 3
tz -> .getTimeZone: Probability = 0.14, Count = 3
tz -> dateTimeInstance.format: Probability = 0.14, Count = 3
tz -> tz: Probability = 0.36, Count = 8
tz -> ident.getTimeZone: Probability = 0.14, Count = 3
tz -> dateTimeInstance.setTimeZone: Probability = 0.09, Count = 2
DeregisterStreamConsumerResponse -> DeregisterStreamConsumerResult: Probability = 1.00, Count = 1
DeregisterStreamConsumer -> deregisterStreamConsumer: Probability = 1.00, Count = 1
DeregisterStreamConsumerRequest -> DeregisterStreamConsumerRequest: Probability = 1.00, Count = 1
Invoke<DeregisterStreamConsumerResponse> -> executeDeregisterStreamConsumer: Probability = 1.00, Count = 1
java.nio.ReadOnlyHeapByteBuffer.copy -> ReadOnlyHeapByteBuffer.copy: Probability = 1.00, Count = 1
FieldIndexData -> FieldIndexData: Probability = 1.00, Count = 3
entry.RamBytesUsed -> entry.ramBytesUsed: Probability = 1.00, Count = 2
CreateTransitGatewayRouteTableResponse -> CreateTransitGatewayRouteTableResult: Probability = 1.00, Count = 1
CreateTransitGatewayRouteTable -> createTransitGatewayRouteTable: Probability = 1.00, Count = 1
CreateTransitGatewayRouteTableRequest -> CreateTransitGatewayRouteTableRequest: Probability = 1.00, Count = 1
Invoke<CreateTransitGatewayRouteTableResponse> -> executeCreateTransitGatewayRouteTable: Probability = 1.00, Count = 1
GetMultiFields -> CharSequence[]: Probability = 0.50, Count = 1
GetMultiFields -> getMultiFields: Probability = 0.50, Count = 1
QueryConfigHandler.Get -> getQueryConfigHandler: Probability = 0.50, Count = 1
QueryConfigHandler.Get -> .get: Probability = 0.50, Count = 1
ConfigurationKeys.MULTI_FIELDS -> ConfigurationKeys.MULTI_FIELDS: Probability = 1.00, Count = 1
HasNext -> hasNext: Probability = 1.00, Count = 6
this.returnedNumber -> returnedNumber: Probability = 1.00, Count = 1
this._enclosing.GetObjectCount -> getObjectCount: Probability = 1.00, Count = 1
SpatialArgsParser.WriteSpatialArgs -> SpatialArgsParser.writeSpatialArgs: Probability = 1.00, Count = 1
CreateRow -> createRow: Probability = 1.00, Count = 2
rowNumber -> rowNumber: Probability = 1.00, Count = 10
field_1_last_column_index -> field_1_last_column_index: Probability = 1.00, Count = 4
field_2_first_column_index -> field_2_first_column_index: Probability = 1.00, Count = 4
field_3_row_index -> field_3_row_index: Probability = 1.00, Count = 3
ConstantValueParser.Encode -> ConstantValueParser.encode: Probability = 1.00, Count = 2
field_4_constant_values -> field_4_constant_values: Probability = 1.00, Count = 2
DescribeHostReservationOfferingsResponse -> DescribeHostReservationOfferingsResult: Probability = 1.00, Count = 1
DescribeHostReservationOfferings -> describeHostReservationOfferings: Probability = 1.00, Count = 1
DescribeHostReservationOfferingsRequest -> DescribeHostReservationOfferingsRequest: Probability = 1.00, Count = 1
Invoke<DescribeHostReservationOfferingsResponse> -> executeDescribeHostReservationOfferings: Probability = 1.00, Count = 1
SetEmpty -> setEmpty: Probability = 1.00, Count = 1
field_2_first_col -> field_2_first_col: Probability = 1.00, Count = 5
field_3_last_col -> field_3_last_col: Probability = 1.00, Count = 1
CancelBundleTaskResponse -> CancelBundleTaskResult: Probability = 1.00, Count = 1
CancelBundleTask -> cancelBundleTask: Probability = 1.00, Count = 1
Invoke<CancelBundleTaskResponse> -> executeCancelBundleTask: Probability = 1.00, Count = 1
ShingleFilter -> ShingleFilter: Probability = 0.80, Count = 4
ShingleFilter -> minShingleSize,: Probability = 0.20, Count = 1
DEFAULT_MIN_SHINGLE_SIZE, -> DEFAULT_MIN_SHINGLE_SIZE,: Probability = 1.00, Count = 1
DEFAULT_MAX_SHINGLE_SIZE -> DEFAULT_MAX_SHINGLE_SIZE: Probability = 1.00, Count = 1
SetTokenType -> setTokenType: Probability = 1.00, Count = 2
MergeException -> MergeException: Probability = 1.00, Count = 2
TestDNSAnswerResponse -> TestDNSAnswerResult: Probability = 1.00, Count = 1
TestDNSAnswer -> testDNSAnswer: Probability = 1.00, Count = 1
TestDNSAnswerRequest -> TestDNSAnswerRequest: Probability = 1.00, Count = 1
Invoke<TestDNSAnswerResponse> -> executeTestDNSAnswer: Probability = 1.00, Count = 1
field.ToString -> field.toString: Probability = 1.00, Count = 2
GetMasterAccountResponse -> GetMasterAccountResult: Probability = 1.00, Count = 1
GetMasterAccount -> getMasterAccount: Probability = 1.00, Count = 1
GetMasterAccountRequest -> GetMasterAccountRequest: Probability = 1.00, Count = 1
Invoke<GetMasterAccountResponse> -> executeGetMasterAccount: Probability = 1.00, Count = 1
GetIndexVersion -> getIndexVersion: Probability = 1.00, Count = 1
indexVersion -> indexVersion: Probability = 1.00, Count = 2
GetAdmChannelResponse -> GetAdmChannelResult: Probability = 1.00, Count = 1
GetAdmChannel -> getAdmChannel: Probability = 1.00, Count = 1
GetAdmChannelRequest -> GetAdmChannelRequest: Probability = 1.00, Count = 1
Invoke<GetAdmChannelResponse> -> executeGetAdmChannel: Probability = 1.00, Count = 1
AtMax -> other.atMax: Probability = 1.00, Count = 1
DeletePolicyResponse -> DeletePolicyResult: Probability = 1.00, Count = 1
DeletePolicy -> deletePolicy: Probability = 1.00, Count = 1
DeletePolicyRequest -> DeletePolicyRequest: Probability = 1.00, Count = 1
Invoke<DeletePolicyResponse> -> executeDeletePolicy: Probability = 1.00, Count = 1
this[id] -> key: Probability = 0.67, Count = 2
this[id] -> idMap.get: Probability = 0.33, Count = 1
SetNonLocalizedMessage -> setNonLocalizedMessage: Probability = 1.00, Count = 1
IMessage -> Message: Probability = 1.00, Count = 3
this.m_message -> this.message: Probability = 1.00, Count = 2
OnPostReceive -> onPostReceive: Probability = 1.00, Count = 1
ReceivePack -> ReceivePack: Probability = 1.00, Count = 2
ICollection<ReceiveCommand> -> rp,Collection<ReceiveCommand>: Probability = 1.00, Count = 2
commands -> commands: Probability = 1.00, Count = 5
hooks[i].OnPostReceive -> hooks[i].onPostReceive: Probability = 1.00, Count = 1
rp, -> rp,: Probability = 1.00, Count = 2
len-- -> s[len-1]: Probability = 0.40, Count = 6
len-- -> len--: Probability = 0.60, Count = 9
RkRec[] -> RkRec[]: Probability = 0.67, Count = 2
RkRec[] -> parseRKs: Probability = 0.33, Count = 1
ENCODED_SIZE -> ENCODED_SIZE: Probability = 1.00, Count = 3
retval[i] -> retval[i]: Probability = 1.00, Count = 1
RkRec -> RkRec: Probability = 1.00, Count = 1
deliverSelfNotifications -> deliverSelfNotifications: Probability = 1.00, Count = 1
CreateWorkteamResponse -> CreateWorkteamResult: Probability = 1.00, Count = 1
CreateWorkteam -> createWorkteam: Probability = 1.00, Count = 1
CreateWorkteamRequest -> CreateWorkteamRequest: Probability = 1.00, Count = 1
Invoke<CreateWorkteamResponse> -> executeCreateWorkteam: Probability = 1.00, Count = 1
ProfilingATNSimulator -> ProfilingATNSimulator: Probability = 1.00, Count = 1
parser,parser.Interpreter.atn,parser.Interpreter.decisionToDFA,parser.Interpreter.getSharedContextCache -> parser,parser.getInterpreter: Probability = 1.00, Count = 1
numDecisions -> .decisionToDFA,parser.getInterpreter: Probability = 0.33, Count = 1
numDecisions -> numDecisions: Probability = 0.33, Count = 1
numDecisions -> i<numDecisions: Probability = 0.33, Count = 1
atn.decisionToState.Count -> .sharedContextCache: Probability = 1.00, Count = 1
DecisionInfo[numDecisions] -> atn.decisionToState.size: Probability = 1.00, Count = 1
decisions[i] -> decisions[i]: Probability = 1.00, Count = 1
DescribeDeliveryStreamResponse -> DescribeDeliveryStreamResult: Probability = 1.00, Count = 1
DescribeDeliveryStream -> describeDeliveryStream: Probability = 1.00, Count = 1
DescribeDeliveryStreamRequest -> DescribeDeliveryStreamRequest: Probability = 1.00, Count = 1
Invoke<DescribeDeliveryStreamResponse> -> executeDescribeDeliveryStream: Probability = 1.00, Count = 1
Product -> product: Probability = 1.00, Count = 3
values -> values: Probability = 0.81, Count = 21
values -> fieldInfo.name: Probability = 0.04, Count = 1
values -> List<LazyField>: Probability = 0.04, Count = 1
values -> fieldInfo.number: Probability = 0.08, Count = 2
values -> fieldInfo.number,: Probability = 0.04, Count = 1
iSize -> :: Probability = 0.38, Count = 5
iSize -> values: Probability = 0.38, Count = 5
iSize -> i=0,: Probability = 0.08, Count = 1
iSize -> iSize=cfs.length: Probability = 0.08, Count = 1
iSize -> i<iSize: Probability = 0.08, Count = 1
*= -> *=: Probability = 1.00, Count = 5
values[i] -> value: Probability = 1.00, Count = 6
NGit.Api.RebaseCommand -> RebaseCommand: Probability = 1.00, Count = 5
SetUpstream -> setUpstream: Probability = 1.00, Count = 3
upstream -> upstream: Probability = 0.64, Count = 9
upstream -> RefNotFoundException: Probability = 0.14, Count = 2
upstream -> repo.resolve: Probability = 0.14, Count = 2
upstream -> upstreamCommitName: Probability = 0.07, Count = 1
upstreamId -> upstreamId: Probability = 1.00, Count = 2
upstreamCommit -> upstreamCommit: Probability = 1.00, Count = 2
ioe -> ioe: Probability = 0.85, Count = 11
ioe -> ioe.getMessage: Probability = 0.15, Count = 2
ATNType -> ATNType: Probability = 1.00, Count = 1
grammarType, -> grammarType,: Probability = 1.00, Count = 1
maxTokenType -> maxTokenType: Probability = 1.00, Count = 2
this.grammarType -> this.grammarType: Probability = 1.00, Count = 1
grammarType -> grammarType: Probability = 1.00, Count = 1
this.maxTokenType -> this.maxTokenType: Probability = 1.00, Count = 1
HyphenatedWordsFilterFactory -> HyphenatedWordsFilterFactory: Probability = 1.00, Count = 1
GetBlueprintsResponse -> GetBlueprintsResult: Probability = 1.00, Count = 1
GetBlueprints -> getBlueprints: Probability = 1.00, Count = 1
GetBlueprintsRequest -> GetBlueprintsRequest: Probability = 1.00, Count = 1
Invoke<GetBlueprintsResponse> -> executeGetBlueprints: Probability = 1.00, Count = 1
DescribeEngineDefaultClusterParametersResponse -> EngineDefaults: Probability = 1.00, Count = 1
DescribeEngineDefaultClusterParameters -> describeEngineDefaultClusterParameters: Probability = 1.00, Count = 1
DescribeEngineDefaultClusterParametersRequest -> DescribeEngineDefaultClusterParametersRequest: Probability = 1.00, Count = 1
Invoke<DescribeEngineDefaultClusterParametersResponse> -> executeDescribeEngineDefaultClusterParameters: Probability = 1.00, Count = 1
DeleteLaunchTemplateResponse -> DeleteLaunchTemplateResult: Probability = 1.00, Count = 1
DeleteLaunchTemplate -> deleteLaunchTemplate: Probability = 1.00, Count = 1
DeleteLaunchTemplateRequest -> DeleteLaunchTemplateRequest: Probability = 1.00, Count = 1
Invoke<DeleteLaunchTemplateResponse> -> executeDeleteLaunchTemplate: Probability = 1.00, Count = 1
ToObject -> toObject: Probability = 0.67, Count = 4
ToObject -> assert: Probability = 0.33, Count = 2
Exists -> exists: Probability = 0.82, Count = 18
Exists -> ==: Probability = 0.09, Count = 2
Exists -> value.get: Probability = 0.09, Count = 2
NewObjectReader -> newObjectReader: Probability = 1.00, Count = 1
ObjectDatabase.NewReader -> getObjectDatabase: Probability = 0.50, Count = 1
ObjectDatabase.NewReader -> .newReader: Probability = 0.50, Count = 1
GetSnapshotBlockResponse -> GetSnapshotBlockResult: Probability = 1.00, Count = 1
GetSnapshotBlock -> getSnapshotBlock: Probability = 1.00, Count = 1
GetSnapshotBlockRequest -> GetSnapshotBlockRequest: Probability = 1.00, Count = 1
Invoke<GetSnapshotBlockResponse> -> executeGetSnapshotBlock: Probability = 1.00, Count = 1
HSSFComment -> HSSFComment: Probability = 1.00, Count = 4
OnCreate -> onCreate: Probability = 1.00, Count = 9
CopySnapshotResponse -> CopySnapshotResult: Probability = 0.50, Count = 1
CopySnapshotResponse -> Snapshot: Probability = 0.50, Count = 1
CopySnapshot -> copySnapshot: Probability = 1.00, Count = 2
CopySnapshotRequest -> CopySnapshotRequest: Probability = 1.00, Count = 2
Invoke<CopySnapshotResponse> -> executeCopySnapshot: Probability = 1.00, Count = 2
"<quotedfield -> "<quotedfield: Probability = 1.00, Count = 1
start='" -> start='": Probability = 1.00, Count = 3
this.m_begin -> this.begin: Probability = 1.00, Count = 2
end='" -> end='": Probability = 1.00, Count = 3
this.m_field -> this.field: Probability = 1.00, Count = 15
this.m_text -> this.text: Probability = 1.00, Count = 6
.writingNotPermitted -> .writingNotPermitted: Probability = 1.00, Count = 1
NumberMatcher -> NumberMatcher: Probability = 1.00, Count = 1
SetCachingInMB -> setCachingInMB: Probability = 1.00, Count = 1
maxCacheRAMMB, -> maxCacheRAMMB,: Probability = 1.00, Count = 1
maxCacheRAMMB -> maxCacheRAMMB: Probability = 1.00, Count = 1
DescribeRegionsResponse -> DescribeRegionsResult: Probability = 1.00, Count = 2
DescribeRegions -> describeRegions: Probability = 1.00, Count = 3
DescribeRegionsRequest -> DescribeRegionsRequest: Probability = 1.00, Count = 2
Invoke<DescribeRegionsResponse> -> executeDescribeRegions: Probability = 1.00, Count = 1
ListApplicationRevisionsResponse -> ListApplicationRevisionsResult: Probability = 1.00, Count = 1
ListApplicationRevisions -> listApplicationRevisions: Probability = 1.00, Count = 1
ListApplicationRevisionsRequest -> ListApplicationRevisionsRequest: Probability = 1.00, Count = 1
Invoke<ListApplicationRevisionsResponse> -> executeListApplicationRevisions: Probability = 1.00, Count = 1
EnsureCapacity -> ensureCapacity: Probability = 0.62, Count = 5
EnsureCapacity -> reserve: Probability = 0.38, Count = 3
current.Set -> current.set: Probability = 1.00, Count = 2
MutableValueDate -> MutableValueDate: Probability = 1.00, Count = 2
v.Value -> v.value: Probability = 1.00, Count = 3
this.Value -> this.value: Probability = 0.60, Count = 3
this.Value -> this.label: Probability = 0.40, Count = 2
DeleteUserResponse -> DeleteUserResult: Probability = 1.00, Count = 1
DeleteUser -> deleteUser: Probability = 1.00, Count = 1
DeleteUserRequest -> DeleteUserRequest: Probability = 1.00, Count = 2
Invoke<DeleteUserResponse> -> executeDeleteUser: Probability = 1.00, Count = 1
getPath -> getPath: Probability = 1.00, Count = 2
ListVerifiedEmailAddressesResponse -> ListVerifiedEmailAddressesResult: Probability = 1.00, Count = 2
ListVerifiedEmailAddresses -> listVerifiedEmailAddresses: Probability = 1.00, Count = 3
ListVerifiedEmailAddressesRequest -> ListVerifiedEmailAddressesRequest: Probability = 1.00, Count = 2
DescribeStackResourceResponse -> DescribeStackResourceResult: Probability = 1.00, Count = 1
DescribeStackResource -> describeStackResource: Probability = 1.00, Count = 1
DescribeStackResourceRequest -> DescribeStackResourceRequest: Probability = 1.00, Count = 1
Invoke<DescribeStackResourceResponse> -> executeDescribeStackResource: Probability = 1.00, Count = 1
MetricsTagPredicate -> MetricsTagPredicate: Probability = 1.00, Count = 1
Tag -> Tag: Probability = 0.88, Count = 7
Tag -> tag: Probability = 0.12, Count = 1
tag -> tag: Probability = 1.00, Count = 7
this.tag -> this.tag: Probability = 1.00, Count = 3
this.last -> last: Probability = 1.00, Count = 3
SetExecutor -> setExecutor: Probability = 1.00, Count = 1
Executor -> Executor: Probability = 1.00, Count = 2
executor -> executor: Probability = 1.00, Count = 3
this.executor -> this.executor: Probability = 1.00, Count = 1
HasDirectoryEntry -> hasDirectoryEntry: Probability = 1.00, Count = 1
EmbeddedObjectRefSubRecord -> EmbeddedObjectRefSubRecord: Probability = 1.00, Count = 3
subRecord -> subRecord: Probability = 1.00, Count = 4
FindObjectRecord -> findObjectRecord: Probability = 1.00, Count = 2
int? -> Integer: Probability = 1.00, Count = 2
streamId -> streamId: Probability = 0.57, Count = 4
streamId -> subRecord.getStreamId: Probability = 0.29, Count = 2
streamId -> streamId.intValue: Probability = 0.14, Count = 1
higherKey -> higherKey: Probability = 1.00, Count = 1
entry.getKey -> entry.getKey: Probability = 1.00, Count = 7
ExitRule -> exitRule: Probability = 1.00, Count = 3
_ctx.invokingState -> _ctx.invokingState: Probability = 1.00, Count = 1
DeleteTrafficPolicyInstanceResponse -> DeleteTrafficPolicyInstanceResult: Probability = 1.00, Count = 1
DeleteTrafficPolicyInstance -> deleteTrafficPolicyInstance: Probability = 1.00, Count = 1
DeleteTrafficPolicyInstanceRequest -> DeleteTrafficPolicyInstanceRequest: Probability = 1.00, Count = 1
Invoke<DeleteTrafficPolicyInstanceResponse> -> executeDeleteTrafficPolicyInstance: Probability = 1.00, Count = 1
Check -> check: Probability = 1.00, Count = 1
level -> level: Probability = 0.82, Count = 14
level -> MimeStreamParser: Probability = 0.12, Count = 2
level -> parser: Probability = 0.06, Count = 1
currentLevel -> currentLevel: Probability = 0.50, Count = 4
currentLevel -> "poi.log.level",: Probability = 0.12, Count = 1
currentLevel -> WARN: Probability = 0.12, Count = 1
currentLevel -> SecurityException: Probability = 0.12, Count = 1
currentLevel -> POILogger.DEBUG: Probability = 0.12, Count = 1
int.Parse -> Integer.parseInt: Probability = 1.00, Count = 9
DeletePublicKeyResponse -> DeletePublicKeyResult: Probability = 1.00, Count = 1
DeletePublicKey -> deletePublicKey: Probability = 1.00, Count = 1
DeletePublicKeyRequest -> DeletePublicKeyRequest: Probability = 0.50, Count = 2
DeletePublicKeyRequest -> deletePublicKeyRequest: Probability = 0.50, Count = 2
Invoke<DeletePublicKeyResponse> -> executeDeletePublicKey: Probability = 1.00, Count = 1
Delegate -> delegate: Probability = 1.00, Count = 3
.IdFor -> .idFor: Probability = 1.00, Count = 3
DeleteDBProxyResponse -> DeleteDBProxyResult: Probability = 1.00, Count = 1
DeleteDBProxy -> deleteDBProxy: Probability = 1.00, Count = 1
DeleteDBProxyRequest -> DeleteDBProxyRequest: Probability = 1.00, Count = 1
Invoke<DeleteDBProxyResponse> -> executeDeleteDBProxy: Probability = 1.00, Count = 1
entries.Length -> entries.length: Probability = 1.00, Count = 3
entries[count++] -> entries[count++]: Probability = 1.00, Count = 2
PortugueseStemFilterFactory -> PortugueseStemFilterFactory: Probability = 1.00, Count = 1
DisconnectParticipantResponse -> DisconnectParticipantResult: Probability = 1.00, Count = 1
DisconnectParticipant -> disconnectParticipant: Probability = 1.00, Count = 1
DisconnectParticipantRequest -> DisconnectParticipantRequest: Probability = 1.00, Count = 1
Invoke<DisconnectParticipantResponse> -> executeDisconnectParticipant: Probability = 1.00, Count = 1
GetPeeledObjectId -> getPeeledObjectId: Probability = 1.00, Count = 2
DeleteParameterGroupResponse -> DeleteParameterGroupResult: Probability = 1.00, Count = 1
DeleteParameterGroup -> deleteParameterGroup: Probability = 1.00, Count = 1
DeleteParameterGroupRequest -> DeleteParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteParameterGroupResponse> -> executeDeleteParameterGroup: Probability = 1.00, Count = 1
field_1_horizontalAlignment -> field_1_horizontalAlignment: Probability = 1.00, Count = 2
field_11_options2 -> field_11_options2: Probability = 1.00, Count = 2
field_12_textRotation -> field_12_textRotation: Probability = 1.00, Count = 2
NGit.Api.ReflogCommand -> ReflogCommand: Probability = 1.00, Count = 1
CreateFpgaImageResponse -> CreateFpgaImageResult: Probability = 1.00, Count = 1
CreateFpgaImage -> createFpgaImage: Probability = 1.00, Count = 1
CreateFpgaImageRequest -> CreateFpgaImageRequest: Probability = 1.00, Count = 1
Invoke<CreateFpgaImageResponse> -> executeCreateFpgaImage: Probability = 1.00, Count = 1
DescribeAggregateIdFormatResponse -> DescribeAggregateIdFormatResult: Probability = 1.00, Count = 1
DescribeAggregateIdFormat -> describeAggregateIdFormat: Probability = 1.00, Count = 1
DescribeAggregateIdFormatRequest -> DescribeAggregateIdFormatRequest: Probability = 1.00, Count = 1
Invoke<DescribeAggregateIdFormatResponse> -> executeDescribeAggregateIdFormat: Probability = 1.00, Count = 1
ListMultipartUploadsRequest -> ListMultipartUploadsRequest: Probability = 1.00, Count = 4
DeleteRepoRequest -> DeleteRepoRequest: Probability = 1.00, Count = 1
"DeleteRepo", -> "DeleteRepo",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]" -> "/repos/[RepoNamespace]/[RepoName]": Probability = 1.00, Count = 1
BOFRecord -> BOFRecord: Probability = 1.00, Count = 4
CreateSheetBOF -> createSheetBOF: Probability = 1.00, Count = 1
BOFRecordType.Worksheet -> TYPE_WORKSHEET: Probability = 1.00, Count = 1
libcore.io.SizeOf.FLOAT -> SizeOf.FLOAT: Probability = 1.00, Count = 7
lexer.PopMode -> lexer.popMode: Probability = 1.00, Count = 1
.GetProperty -> "DeleteImage",: Probability = 0.50, Count = 1
.GetProperty -> "/repos/[RepoNamespace]/[RepoName]/tags/[Tag]": Probability = 0.50, Count = 1
CreateImageBuilderResponse -> CreateImageBuilderResult: Probability = 1.00, Count = 1
CreateImageBuilder -> createImageBuilder: Probability = 1.00, Count = 1
CreateImageBuilderRequest -> CreateImageBuilderRequest: Probability = 1.00, Count = 1
Invoke<CreateImageBuilderResponse> -> executeCreateImageBuilder: Probability = 1.00, Count = 1
UpdateSegmentResponse -> UpdateSegmentResult: Probability = 1.00, Count = 1
UpdateSegment -> updateSegment: Probability = 1.00, Count = 1
UpdateSegmentRequest -> UpdateSegmentRequest: Probability = 1.00, Count = 1
Invoke<UpdateSegmentResponse> -> executeUpdateSegment: Probability = 1.00, Count = 1
GetMetricStatisticsResponse -> GetMetricStatisticsResult: Probability = 1.00, Count = 1
GetMetricStatistics -> getMetricStatistics: Probability = 1.00, Count = 1
GetMetricStatisticsRequest -> GetMetricStatisticsRequest: Probability = 1.00, Count = 1
Invoke<GetMetricStatisticsResponse> -> executeGetMetricStatistics: Probability = 1.00, Count = 1
DescribeAutoScalingInstancesResponse -> DescribeAutoScalingInstancesResult: Probability = 1.00, Count = 2
DescribeAutoScalingInstances -> describeAutoScalingInstances: Probability = 1.00, Count = 3
DescribeAutoScalingInstancesRequest -> DescribeAutoScalingInstancesRequest: Probability = 1.00, Count = 2
Invoke<DescribeAutoScalingInstancesResponse> -> executeDescribeAutoScalingInstances: Probability = 1.00, Count = 1
KStemFilter -> KStemFilter: Probability = 1.00, Count = 1
CreateEnvironmentRequest -> CreateEnvironmentRequest: Probability = 1.00, Count = 1
environmentName -> environmentName: Probability = 1.00, Count = 4
_environmentName -> setEnvironmentName: Probability = 1.00, Count = 2
GetIdentityMailFromDomainAttributesResponse -> GetIdentityMailFromDomainAttributesResult: Probability = 1.00, Count = 1
GetIdentityMailFromDomainAttributes -> getIdentityMailFromDomainAttributes: Probability = 1.00, Count = 1
GetIdentityMailFromDomainAttributesRequest -> GetIdentityMailFromDomainAttributesRequest: Probability = 1.00, Count = 1
Invoke<GetIdentityMailFromDomainAttributesResponse> -> executeGetIdentityMailFromDomainAttributes: Probability = 1.00, Count = 1
IsForce -> isForce: Probability = 1.00, Count = 1
DescribeImageScanFindingsResponse -> DescribeImageScanFindingsResult: Probability = 1.00, Count = 1
DescribeImageScanFindings -> describeImageScanFindings: Probability = 1.00, Count = 1
DescribeImageScanFindingsRequest -> DescribeImageScanFindingsRequest: Probability = 1.00, Count = 1
Invoke<DescribeImageScanFindingsResponse> -> executeDescribeImageScanFindings: Probability = 1.00, Count = 1
SendContactMethodVerificationResponse -> SendContactMethodVerificationResult: Probability = 1.00, Count = 1
SendContactMethodVerification -> sendContactMethodVerification: Probability = 1.00, Count = 1
SendContactMethodVerificationRequest -> SendContactMethodVerificationRequest: Probability = 1.00, Count = 1
Invoke<SendContactMethodVerificationResponse> -> executeSendContactMethodVerification: Probability = 1.00, Count = 1
DeleteReceiptFilterResponse -> DeleteReceiptFilterResult: Probability = 1.00, Count = 1
DeleteReceiptFilter -> deleteReceiptFilter: Probability = 1.00, Count = 1
DeleteReceiptFilterRequest -> DeleteReceiptFilterRequest: Probability = 1.00, Count = 1
Invoke<DeleteReceiptFilterResponse> -> executeDeleteReceiptFilter: Probability = 1.00, Count = 1
UpdateFormulaResult -> updateFormulaResult: Probability = 1.00, Count = 1
sensitiveInputCells, -> sensitiveInputCells,: Probability = 1.00, Count = 1
FormulaUsedBlankCellSet -> FormulaUsedBlankCellSet: Probability = 1.00, Count = 2
usedBlankAreas -> usedBlankAreas: Probability = 1.00, Count = 2
UpdateValue -> updateValue: Probability = 1.00, Count = 3
_usedBlankCellGroup -> _usedBlankCellGroup: Probability = 1.00, Count = 2
FrenchStemmer -> FrenchStemmer: Probability = 1.00, Count = 1
MergedCellsTable -> MergedCellsTable: Probability = 1.00, Count = 1
_mergedRegions -> _mergedRegions: Probability = 1.00, Count = 1
List<CellRangeAddress> -> ArrayList<>: Probability = 1.00, Count = 2
PrecedencePredicateTransition -> PrecedencePredicateTransition: Probability = 1.00, Count = 1
"Coding -> "Coding: Probability = 1.00, Count = 1
Expected -> Expected: Probability = 1.00, Count = 1
ExpPtg -> ExpPtg: Probability = 1.00, Count = 3
Converted -> converted: Probability = 1.00, Count = 1
Shared -> Shared: Probability = 1.00, Count = 1
Non-Shared -> Non-Shared: Probability = 1.00, Count = 1
by -> by: Probability = 1.00, Count = 9
ValueRecordsAggregate, -> ValueRecordsAggregate,: Probability = 1.00, Count = 1
wasn't" -> wasn't": Probability = 1.00, Count = 1
list.listIterator -> .listIterator: Probability = 0.50, Count = 2
list.listIterator -> list.listIterator: Probability = 0.50, Count = 2
getBuffer -> getBuffer: Probability = 1.00, Count = 1
BytesRefHash -> BytesRefHash: Probability = 1.00, Count = 2
pool, -> pool,: Probability = 1.00, Count = 2
hashSize -> capacity,: Probability = 0.11, Count = 1
hashSize -> BytesStartArray: Probability = 0.11, Count = 1
hashSize -> hashSize: Probability = 0.56, Count = 5
hashSize -> hashHalfSize: Probability = 0.11, Count = 1
hashSize -> hashMask: Probability = 0.11, Count = 1
bytesStartArray -> bytesStartArray: Probability = 1.00, Count = 2
ids -> ids: Probability = 1.00, Count = 3
bytesStartArray.BytesUsed -> bytesStartArray.bytesUsed: Probability = 0.50, Count = 2
bytesStartArray.BytesUsed -> null?: Probability = 0.25, Count = 1
bytesStartArray.BytesUsed -> Counter.newCounter: Probability = 0.25, Count = 1
GetIdentityDkimAttributesResponse -> GetIdentityDkimAttributesResult: Probability = 1.00, Count = 1
GetIdentityDkimAttributes -> getIdentityDkimAttributes: Probability = 1.00, Count = 1
GetIdentityDkimAttributesRequest -> GetIdentityDkimAttributesRequest: Probability = 1.00, Count = 1
Invoke<GetIdentityDkimAttributesResponse> -> executeGetIdentityDkimAttributes: Probability = 1.00, Count = 1
Invoke<DescribeSubnetsResponse> -> executeDescribeSubnets: Probability = 1.00, Count = 1
TextLength -> getTextLength: Probability = 1.00, Count = 2
field_2_hasMultibyte -> field_2_hasMultibyte: Probability = 1.00, Count = 2
field_3_text, -> field_3_text,: Probability = 1.00, Count = 2
m_root -> root: Probability = 1.00, Count = 4
0xFFFF -> 0xFFFF: Probability = 1.00, Count = 3
m_eq[p] -> eq[p]: Probability = 1.00, Count = 3
DescribeIdFormatResponse -> DescribeIdFormatResult: Probability = 1.00, Count = 1
DescribeIdFormat -> describeIdFormat: Probability = 1.00, Count = 1
DescribeIdFormatRequest -> DescribeIdFormatRequest: Probability = 1.00, Count = 1
Invoke<DescribeIdFormatResponse> -> executeDescribeIdFormat: Probability = 1.00, Count = 1
value[index] -> value[index]: Probability = 1.00, Count = 1
FieldFragList -> FieldFragList: Probability = 0.80, Count = 4
FieldFragList -> fieldPhraseList,int: Probability = 0.20, Count = 1
CreateFieldFragList -> createFieldFragList: Probability = 1.00, Count = 5
FieldPhraseList -> FieldPhraseList: Probability = 1.00, Count = 3
fragCharSize -> fragCharSize: Probability = 1.00, Count = 8
ffl -> ffl: Probability = 1.00, Count = 2
SimpleFieldFragList -> SimpleFieldFragList: Probability = 1.00, Count = 2
List<WeightedPhraseInfo> -> List<WeightedPhraseInfo>: Probability = 1.00, Count = 1
wpil -> wpil: Probability = 1.00, Count = 2
WeightedPhraseInfo -> WeightedPhraseInfo: Probability = 1.00, Count = 8
phraseInfo -> phraseInfo: Probability = 0.50, Count = 4
phraseInfo -> !ite.hasNext: Probability = 0.12, Count = 1
phraseInfo -> ite.next: Probability = 0.12, Count = 1
phraseInfo -> wpil.add: Probability = 0.12, Count = 1
phraseInfo -> wpil.size: Probability = 0.12, Count = 1
GetModifiedList -> getModifiedList: Probability = 1.00, Count = 1
modifiedList -> modifiedList: Probability = 1.00, Count = 1
elementData.Length -> elementData.length: Probability = 1.00, Count = 3
GermanLightStemFilterFactory -> GermanLightStemFilterFactory: Probability = 1.00, Count = 1
SetAnchor -> setAnchor: Probability = 1.00, Count = 2
col1, -> col1,: Probability = 1.00, Count = 3
row1, -> row1,: Probability = 1.00, Count = 3
col2, -> col2,: Probability = 1.00, Count = 3
255, -> ,: Probability = 1.00, Count = 7
this.Dx1 -> setDx1: Probability = 1.00, Count = 3
this.Dy1 -> setDy1: Probability = 1.00, Count = 3
this.Dx2 -> setDx2: Probability = 1.00, Count = 3
this.Dy2 -> setDy2: Probability = 1.00, Count = 3
CalculateChecksum -> calculateChecksum: Probability = 1.00, Count = 1
sum.ByteCRC -> sum.getValue: Probability = 1.00, Count = 1
CreateCommit -> createCommit: Probability = 1.00, Count = 2
QueryText -> QueryText: Probability = 1.00, Count = 2
this.values[0] -> this.values.get: Probability = 1.00, Count = 1
"<path -> "<path: Probability = 1.00, Count = 1
path='"+ -> path='"+: Probability = 1.00, Count = 1
StopFilter -> StopFilter: Probability = 1.00, Count = 2
stopFilter -> stopFilter: Probability = 1.00, Count = 2
stopFilter.SetEnablePositionIncrements -> input,stopWords: Probability = 1.00, Count = 1
DeleteStreamProcessorResponse -> DeleteStreamProcessorResult: Probability = 1.00, Count = 1
DeleteStreamProcessor -> deleteStreamProcessor: Probability = 1.00, Count = 1
DeleteStreamProcessorRequest -> DeleteStreamProcessorRequest: Probability = 1.00, Count = 1
Invoke<DeleteStreamProcessorResponse> -> executeDeleteStreamProcessor: Probability = 1.00, Count = 1
suffix, -> RuleWithSetExceptions: Probability = 0.07, Count = 1
suffix, -> suffix,: Probability = 0.36, Count = 5
suffix, -> replacement,String[]: Probability = 0.14, Count = 2
suffix, -> exceptions: Probability = 0.21, Count = 3
suffix, -> !exceptions[i].endsWith: Probability = 0.14, Count = 2
suffix, -> RuleWithSuffixExceptions: Probability = 0.07, Count = 1
min, -> min,: Probability = 0.92, Count = 12
min, -> input,min,max: Probability = 0.08, Count = 1
replacement -> replacement: Probability = 1.00, Count = 14
exceptions.Length -> exceptions.length: Probability = 1.00, Count = 3
CreateClientVpnRouteResponse -> CreateClientVpnRouteResult: Probability = 1.00, Count = 1
CreateClientVpnRoute -> createClientVpnRoute: Probability = 1.00, Count = 1
CreateClientVpnRouteRequest -> CreateClientVpnRouteRequest: Probability = 1.00, Count = 1
Invoke<CreateClientVpnRouteResponse> -> executeCreateClientVpnRoute: Probability = 1.00, Count = 1
RangeTransition -> RangeTransition: Probability = 1.00, Count = 1
this.from -> this.from: Probability = 0.67, Count = 2
this.from -> this.multiplier: Probability = 0.33, Count = 1
this.to -> this.to: Probability = 1.00, Count = 1
TypeAsPayloadTokenFilterFactory -> TypeAsPayloadTokenFilterFactory: Probability = 1.00, Count = 1
ints[p -> ints[p]: Probability = 0.20, Count = 1
ints[p -> ints[p: Probability = 0.80, Count = 4
Normalizer2 -> Normalizer2: Probability = 1.00, Count = 3
this.termAtt -> ;: Probability = 1.00, Count = 1
this.normalizer -> this.normalizer: Probability = 1.00, Count = 3
NGit.Treewalk.Filter.NotTreeFilter -> NotTreeFilter: Probability = 1.00, Count = 2
isMalformed -> isMalformed: Probability = 1.00, Count = 1
TYPE_MALFORMED_INPUT -> TYPE_MALFORMED_INPUT: Probability = 0.50, Count = 1
TYPE_MALFORMED_INPUT -> TYPE_MALFORMED_INPUT||: Probability = 0.50, Count = 1
EnterRecursionRule -> enterRecursionRule: Probability = 0.83, Count = 5
EnterRecursionRule -> getATN: Probability = 0.17, Count = 1
_parentContextStack.Push -> Pair<ParserRuleContext,: Probability = 0.50, Count = 2
_parentContextStack.Push -> Integer>: Probability = 0.50, Count = 2
base.EnterRecursionRule -> pair: Probability = 0.67, Count = 2
base.EnterRecursionRule -> super.enterRecursionRule: Probability = 0.33, Count = 1
RuleContext, -> _ctx,: Probability = 0.50, Count = 1
RuleContext, -> localctx.invokingState: Probability = 0.50, Count = 1
localctx.invokingState -> _parentContextStack.push: Probability = 1.00, Count = 1
Invoke<DescribeAddressesResponse> -> executeDescribeAddresses: Probability = 1.00, Count = 1
GetEstimatedUniqueValues -> getEstimatedUniqueValues: Probability = 1.00, Count = 1
GetEstimatedNumberUniqueValuesAllowingForCollisions -> getEstimatedNumberUniqueValuesAllowingForCollisions: Probability = 1.00, Count = 2
_bloomSize, -> bloomSize,: Probability = 1.00, Count = 1
_filter.Cardinality -> filter.cardinality: Probability = 1.00, Count = 2
DescribeTransformJobResponse -> DescribeTransformJobResult: Probability = 1.00, Count = 1
DescribeTransformJob -> describeTransformJob: Probability = 1.00, Count = 1
DescribeTransformJobRequest -> DescribeTransformJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeTransformJobResponse> -> executeDescribeTransformJob: Probability = 1.00, Count = 1
CloneViaReserialise -> copy: Probability = 1.00, Count = 7
block0 -> block0: Probability = 1.00, Count = 4
16777215L -> 16777215L: Probability = 1.00, Count = 5
block1 -> block1: Probability = 1.00, Count = 5
block2 -> block2: Probability = 1.00, Count = 4
fieldNumber -> fieldNumber: Probability = 1.00, Count = 6
DescribeIdentityPoolResponse -> DescribeIdentityPoolResult: Probability = 1.00, Count = 1
DescribeIdentityPool -> describeIdentityPool: Probability = 1.00, Count = 1
DescribeIdentityPoolRequest -> DescribeIdentityPoolRequest: Probability = 1.00, Count = 1
Invoke<DescribeIdentityPoolResponse> -> executeDescribeIdentityPool: Probability = 1.00, Count = 1
XmlNode -> Node: Probability = 1.00, Count = 2
GetTextBuffer -> getTextBuffer: Probability = 1.00, Count = 1
GetCurrentMetricDataResponse -> GetCurrentMetricDataResult: Probability = 1.00, Count = 1
GetCurrentMetricData -> getCurrentMetricData: Probability = 1.00, Count = 1
GetCurrentMetricDataRequest -> GetCurrentMetricDataRequest: Probability = 1.00, Count = 1
Invoke<GetCurrentMetricDataResponse> -> executeGetCurrentMetricData: Probability = 1.00, Count = 1
mode, -> mode,: Probability = 0.88, Count = 7
mode, -> pathMode,: Probability = 0.12, Count = 1
replacementChars -> replacementChars: Probability = 1.00, Count = 2
WindowProtectRecord -> WindowProtectRecord: Probability = 1.00, Count = 1
GetParent -> getParent: Probability = 1.00, Count = 6
System.Diagnostics.Debug.Assert -> assert: Probability = 1.00, Count = 2
"*:*" -> "*:*": Probability = 1.00, Count = 1
SeekStatus -> SeekStatus: Probability = 0.50, Count = 4
SeekStatus -> seekCeil: Probability = 0.50, Count = 4
seeking" -> +": Probability = 0.50, Count = 4
seeking" -> seeking": Probability = 0.50, Count = 4
BindInstance2VpcRequest -> BindInstance2VpcRequest: Probability = 1.00, Count = 1
"Ots", -> "Ots",: Probability = 1.00, Count = 4
"2016-06-20", -> "2016-06-20",: Probability = 1.00, Count = 4
"BindInstance2Vpc", -> "BindInstance2Vpc",: Probability = 1.00, Count = 1
"ots", -> "ots": Probability = 1.00, Count = 4
UpdateTableResponse -> UpdateTableResult: Probability = 1.00, Count = 1
UpdateTable -> updateTable: Probability = 1.00, Count = 2
ProvisionedThroughput -> ProvisionedThroughput: Probability = 1.00, Count = 3
provisionedThroughput -> provisionedThroughput: Probability = 0.80, Count = 4
provisionedThroughput -> .withProvisionedThroughput: Probability = 0.20, Count = 1
UpdateTableRequest -> UpdateTableRequest: Probability = 1.00, Count = 2
@in.Get -> in.get: Probability = 1.00, Count = 1
docMap.NewToOld -> docMap.newToOld: Probability = 1.00, Count = 1
GetQueueAttributesResponse -> GetQueueAttributesResult: Probability = 1.00, Count = 2
GetQueueAttributes -> getQueueAttributes: Probability = 1.00, Count = 3
GetQueueAttributesRequest -> GetQueueAttributesRequest: Probability = 1.00, Count = 2
Invoke<GetQueueAttributesResponse> -> executeGetQueueAttributes: Probability = 1.00, Count = 1
UpdateUserRoutingProfileResponse -> UpdateUserRoutingProfileResult: Probability = 1.00, Count = 1
UpdateUserRoutingProfile -> updateUserRoutingProfile: Probability = 1.00, Count = 1
UpdateUserRoutingProfileRequest -> UpdateUserRoutingProfileRequest: Probability = 1.00, Count = 1
Invoke<UpdateUserRoutingProfileResponse> -> executeUpdateUserRoutingProfile: Probability = 1.00, Count = 1
GetMidIx -> getMidIx: Probability = 1.00, Count = 1
ixDiff -> ixDiff: Probability = 1.00, Count = 3
_lowIx -> _lowIx: Probability = 1.00, Count = 5
MergeCommandResult -> MergeResult: Probability = 1.00, Count = 2
GetMergeResult -> getMergeResult: Probability = 1.00, Count = 1
this.mergeResult -> this.mergeResult: Probability = 1.00, Count = 1
SetAsActiveCell -> setAsActiveCell: Probability = 1.00, Count = 1
_record.Row -> row=_record.getRow: Probability = 0.50, Count = 3
_record.Row -> col=_record.getColumn: Probability = 0.50, Count = 3
_record.Column -> _sheet.getSheet: Probability = 0.67, Count = 2
_record.Column -> (: Probability = 0.33, Count = 1
this._sheet.Sheet.SetActiveCell -> _sheet.getSheet: Probability = 1.00, Count = 1
InviteMembersResponse -> InviteMembersResult: Probability = 1.00, Count = 1
InviteMembers -> inviteMembers: Probability = 1.00, Count = 1
InviteMembersRequest -> InviteMembersRequest: Probability = 1.00, Count = 1
Invoke<InviteMembersResponse> -> executeInviteMembers: Probability = 1.00, Count = 1
FormatTrackingHSSFListener -> FormatTrackingHSSFListener: Probability = 1.00, Count = 1
UpdateDistributionRequest -> UpdateDistributionRequest: Probability = 1.00, Count = 1
ifMatch, -> distributionConfig,: Probability = 1.00, Count = 1
GetLogEventsRequest -> GetLogEventsRequest: Probability = 1.00, Count = 1
"FlushInfo -> "FlushInfo: Probability = 1.00, Count = 1
[numDocs=" -> [numDocs=": Probability = 1.00, Count = 1
estimatedSegmentSize=" -> estimatedSegmentSize="+: Probability = 1.00, Count = 1
GrowableWriter -> GrowableWriter: Probability = 0.67, Count = 4
GrowableWriter -> getBitsPerValue: Probability = 0.17, Count = 1
GrowableWriter -> newSize,: Probability = 0.17, Count = 1
newSize -> newSize: Probability = 0.59, Count = 20
newSize -> bytesPerElement: Probability = 0.09, Count = 3
newSize -> newSize+7: Probability = 0.06, Count = 2
newSize -> Constants.JRE_IS_64BIT: Probability = 0.03, Count = 1
newSize -> 0x7ffffffe: Probability = 0.06, Count = 2
newSize -> 0x7ffffffc: Probability = 0.06, Count = 2
newSize -> 0x7ffffff8: Probability = 0.03, Count = 1
newSize -> 8:default:return: Probability = 0.06, Count = 2
newSize -> 4:case: Probability = 0.03, Count = 1
acceptableOverheadRatio -> acceptableOverheadRatio: Probability = 1.00, Count = 5
current, -> PackedInts.copy: Probability = 0.33, Count = 1
current, -> current,: Probability = 0.67, Count = 2
limit, -> limit,: Probability = 1.00, Count = 2
PackedInt32s.DEFAULT_BUFFER_SIZE -> PackedInts.DEFAULT_BUFFER_SIZE: Probability = 1.00, Count = 1
ReuseStrategy -> ReuseStrategy: Probability = 1.00, Count = 1
reuseStrategy -> reuseStrategy: Probability = 1.00, Count = 2
this.reuseStrategy -> this.reuseStrategy: Probability = 1.00, Count = 1
charPos -> charPositionInLine: Probability = 1.00, Count = 1
dfaState -> mode: Probability = 0.50, Count = 1
dfaState -> Lexer.DEFAULT_MODE: Probability = 0.50, Count = 1
field_2_unknownFormulaData -> field_2_unknownFormulaData: Probability = 1.00, Count = 2
0x6A, -> 0x02,: Probability = 1.00, Count = 1
0x16, -> 0x6C,: Probability = 1.00, Count = 1
0x01, -> 0x6A,: Probability = 0.50, Count = 1
0x01, -> 0x16,: Probability = 0.50, Count = 1
field_6_unknown -> 0x01,: Probability = 1.00, Count = 1
field_4_ole_classname -> field_6_unknown: Probability = 1.00, Count = 1
field_4_unknownByte -> field_4_ole_classname: Probability = 1.00, Count = 1
"doc=" -> "doc=": Probability = 1.00, Count = 1
score=" -> score=": Probability = 1.00, Count = 1
shardIndex=" -> shardIndex=": Probability = 1.00, Count = 2
ShardIndex -> shardIndex: Probability = 1.00, Count = 2
kthLargest -> kthLargest: Probability = 1.00, Count = 1
v, -> v,: Probability = 1.00, Count = 5
Array.Sort -> Arrays.sort: Probability = 1.00, Count = 4
forwardId, -> forwardId,: Probability = 0.25, Count = 2
forwardId, -> backwardId: Probability = 0.38, Count = 3
forwardId, -> offset: Probability = 0.25, Count = 2
forwardId, -> backwardId,: Probability = 0.12, Count = 1
backwardId -> *: Probability = 0.50, Count = 2
backwardId -> forwardSize: Probability = 0.25, Count = 1
backwardId -> forwardId: Probability = 0.25, Count = 1
costs[backwardId][forwardId] -> buffer.getShort: Probability = 0.50, Count = 1
costs[backwardId][forwardId] -> offset: Probability = 0.50, Count = 1
Arrays.Sort -> Arrays.sort: Probability = 1.00, Count = 2
entries, -> entries,: Probability = 1.00, Count = 2
LexerCustomAction -> LexerCustomAction: Probability = 1.00, Count = 1
DescribeDevicePolicyConfigurationResponse -> DescribeDevicePolicyConfigurationResult: Probability = 1.00, Count = 1
DescribeDevicePolicyConfiguration -> describeDevicePolicyConfiguration: Probability = 1.00, Count = 1
DescribeDevicePolicyConfigurationRequest -> DescribeDevicePolicyConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DescribeDevicePolicyConfigurationResponse> -> executeDescribeDevicePolicyConfiguration: Probability = 1.00, Count = 1
CreateSpace -> createSpace: Probability = 1.00, Count = 1
space.Set -> space.set: Probability = 1.00, Count = 1
setDSTSavings -> setDSTSavings: Probability = 0.50, Count = 1
setDSTSavings -> milliseconds: Probability = 0.50, Count = 1
milliseconds -> milliseconds: Probability = 0.67, Count = 2
milliseconds -> dstSavings: Probability = 0.33, Count = 1
DescribeAccountResponse -> DescribeAccountResult: Probability = 1.00, Count = 1
DescribeAccount -> describeAccount: Probability = 1.00, Count = 1
DescribeAccountRequest -> DescribeAccountRequest: Probability = 1.00, Count = 1
Invoke<DescribeAccountResponse> -> executeDescribeAccount: Probability = 1.00, Count = 1
GetCellsVal -> getCellsVal: Probability = 1.00, Count = 1
row.GetCellsVal -> row.getCellsVal: Probability = 1.00, Count = 1
EqualsSameType -> equalsSameType: Probability = 0.50, Count = 3
EqualsSameType -> assert: Probability = 0.50, Count = 3
MutableValueBool -> exists: Probability = 0.20, Count = 2
MutableValueBool -> MutableValueBool: Probability = 0.80, Count = 8
b.Value -> b.value: Probability = 0.44, Count = 4
b.Value -> exists: Probability = 0.22, Count = 2
b.Value -> b.exists: Probability = 0.11, Count = 1
b.Value -> b.value.get: Probability = 0.22, Count = 2
b.Exists -> b.exists: Probability = 1.00, Count = 5
CreateDBClusterResponse -> DBCluster: Probability = 1.00, Count = 1
CreateDBCluster -> createDBCluster: Probability = 1.00, Count = 1
CreateDBClusterRequest -> CreateDBClusterRequest: Probability = 1.00, Count = 1
Invoke<CreateDBClusterResponse> -> executeCreateDBCluster: Probability = 1.00, Count = 1
FormatRun -> FormatRun: Probability = 1.00, Count = 4
other._character -> other._character: Probability = 1.00, Count = 1
other._fontIndex -> other._fontIndex: Probability = 1.00, Count = 1
arg, -> arg,: Probability = 1.00, Count = 2
arg -> arg: Probability = 0.88, Count = 21
arg -> chooseSingleElementFromRef: Probability = 0.04, Count = 1
arg -> .getRelativeValue: Probability = 0.04, Count = 1
arg -> StringEval.EMPTY_INSTANCE: Probability = 0.04, Count = 1
GermanStemFilterFactory -> GermanStemFilterFactory: Probability = 1.00, Count = 1
ModifyClusterSubnetGroupResponse -> ClusterSubnetGroup: Probability = 1.00, Count = 1
ModifyClusterSubnetGroup -> modifyClusterSubnetGroup: Probability = 1.00, Count = 1
ModifyClusterSubnetGroupRequest -> ModifyClusterSubnetGroupRequest: Probability = 1.00, Count = 1
Invoke<ModifyClusterSubnetGroupResponse> -> executeModifyClusterSubnetGroup: Probability = 1.00, Count = 1
Subpath -> subpath: Probability = 1.00, Count = 1
CreateDecimalConstraint -> createDecimalConstraint: Probability = 1.00, Count = 1
ValidationType.DECIMAL, -> ValidationType.DECIMAL,: Probability = 1.00, Count = 1
DescribeUserProfileResponse -> DescribeUserProfileResult: Probability = 1.00, Count = 1
DescribeUserProfile -> describeUserProfile: Probability = 1.00, Count = 1
DescribeUserProfileRequest -> DescribeUserProfileRequest: Probability = 1.00, Count = 1
Invoke<DescribeUserProfileResponse> -> executeDescribeUserProfile: Probability = 1.00, Count = 1
firstKey -> firstKey: Probability = 1.00, Count = 1
Invoke<DescribeAutoScalingGroupsResponse> -> executeDescribeAutoScalingGroups: Probability = 1.00, Count = 1
GetListenerType -> Class<RefsChangedListener>: Probability = 0.17, Count = 1
GetListenerType -> getListenerType: Probability = 0.50, Count = 3
GetListenerType -> Class<ConfigChangedListener>: Probability = 0.17, Count = 1
GetListenerType -> Class<IndexChangedListener>: Probability = 0.17, Count = 1
GetWordCost -> getWordCost: Probability = 1.00, Count = 1
WORD_COST -> WORD_COST: Probability = 1.00, Count = 1
BRAIRecord -> LinkedDataRecord: Probability = 1.00, Count = 3
GetDataCategoryLabels -> getDataCategoryLabels: Probability = 1.00, Count = 1
dataCategoryLabels -> dataCategoryLabels: Probability = 1.00, Count = 2
SetStringValue -> setStringValue: Probability = 1.00, Count = 2
collator.GetRawCollationKey -> collator.getRawCollationKey: Probability = 1.00, Count = 1
key.Bytes -> key.bytes: Probability = 1.00, Count = 1
key.Length -> key.size: Probability = 0.12, Count = 1
key.Length -> key.length: Probability = 0.88, Count = 7
"FacetField -> "FacetField: Probability = 1.00, Count = 1
NGit.BatchRefUpdate -> BatchRefUpdate: Probability = 0.71, Count = 5
NGit.BatchRefUpdate -> addCommand: Probability = 0.29, Count = 2
CreateLoadBalancerTlsCertificateResponse -> CreateLoadBalancerTlsCertificateResult: Probability = 1.00, Count = 1
CreateLoadBalancerTlsCertificate -> createLoadBalancerTlsCertificate: Probability = 1.00, Count = 1
CreateLoadBalancerTlsCertificateRequest -> CreateLoadBalancerTlsCertificateRequest: Probability = 1.00, Count = 1
Invoke<CreateLoadBalancerTlsCertificateResponse> -> executeCreateLoadBalancerTlsCertificate: Probability = 1.00, Count = 1
GetDocumentationPartsResponse -> GetDocumentationPartsResult: Probability = 1.00, Count = 1
GetDocumentationParts -> getDocumentationParts: Probability = 1.00, Count = 1
GetDocumentationPartsRequest -> GetDocumentationPartsRequest: Probability = 1.00, Count = 1
Invoke<GetDocumentationPartsResponse> -> executeGetDocumentationParts: Probability = 1.00, Count = 1
Sharpen.Iterator<RevFlag> -> Iterator<RevFlag>: Probability = 1.00, Count = 3
Iterator -> iterator: Probability = 0.57, Count = 4
Iterator -> Iterator: Probability = 0.43, Count = 3
active.Iterator -> active.iterator: Probability = 1.00, Count = 1
this.fields, -> this.fields,: Probability = 1.00, Count = 1
other.fields -> other.fields: Probability = 1.00, Count = 1
POIFSDocumentPath -> POIFSDocumentPath: Probability = 1.00, Count = 2
this.components.Length -> this.components.length: Probability = 1.00, Count = 2
SearchImageRequest -> SearchImageRequest: Probability = 1.00, Count = 1
"SearchImage", -> "SearchImage",: Probability = 1.00, Count = 1
"/v2/image/search" -> "/v2/image/search": Probability = 1.00, Count = 1
active -> active: Probability = 1.00, Count = 2
AList<RevFlag> -> ArrayList<>: Probability = 1.00, Count = 1
BatchDisassociateUserStackResponse -> BatchDisassociateUserStackResult: Probability = 1.00, Count = 1
BatchDisassociateUserStack -> batchDisassociateUserStack: Probability = 1.00, Count = 1
BatchDisassociateUserStackRequest -> BatchDisassociateUserStackRequest: Probability = 1.00, Count = 1
Invoke<BatchDisassociateUserStackResponse> -> executeBatchDisassociateUserStack: Probability = 1.00, Count = 1
"[ftEnd]\n" -> "[ftEnd]\n": Probability = 1.00, Count = 1
"[/ftEnd]\n" -> "[/ftEnd]\n": Probability = 1.00, Count = 1
InputStreamDataInput -> InputStreamDataInput: Probability = 1.00, Count = 1
BinaryReader -> this.is: Probability = 1.00, Count = 1
ShowMessage -> showMessage: Probability = 1.00, Count = 1
CredentialItem.InformationalMessage -> CredentialItem.InformationalMessage: Probability = 1.00, Count = 2
DeregisterTypeResponse -> DeregisterTypeResult: Probability = 1.00, Count = 1
DeregisterType -> deregisterType: Probability = 1.00, Count = 1
DeregisterTypeRequest -> DeregisterTypeRequest: Probability = 1.00, Count = 1
Invoke<DeregisterTypeResponse> -> executeDeregisterType: Probability = 1.00, Count = 1
list._array.Length -> list._array.length: Probability = 1.00, Count = 1
list._array, -> list._array,: Probability = 1.00, Count = 1
_array.Length -> _array.length: Probability = 1.00, Count = 3
list._limit -> list._limit: Probability = 1.00, Count = 1
ConvertFromExternSheetIndex -> convertFromExternSheetIndex: Probability = 1.00, Count = 2
_iBook.GetFirstSheetIndexFromExternSheetIndex -> _iBook.getFirstSheetIndexFromExternSheetIndex: Probability = 1.00, Count = 1
firstSheetName, -> firstSheetName,: Probability = 1.00, Count = 4
lastSheetName, -> lastSheetName,: Probability = 1.00, Count = 1
references -> references: Probability = 1.00, Count = 3
Copy -> copy: Probability = 1.00, Count = 10
FirstRow, -> getFirstRow: Probability = 0.45, Count = 5
FirstRow, -> getLastRow: Probability = 0.18, Count = 2
FirstRow, -> getFirstColumn: Probability = 0.27, Count = 3
FirstRow, -> ,: Probability = 0.09, Count = 1
LastRow, -> ,: Probability = 0.78, Count = 7
LastRow, -> getLastRow: Probability = 0.22, Count = 2
FirstColumn, -> ,: Probability = 0.67, Count = 4
FirstColumn, -> getFirstColumn: Probability = 0.17, Count = 1
FirstColumn, -> getLastColumn: Probability = 0.17, Count = 1
otherDocument -> Document: Probability = 1.00, Count = 3
otherDocument[key] -> other.getS3Object: Probability = 1.00, Count = 2
!a.Equals -> other.getS3Object: Probability = 1.00, Count = 1
ListMembersResponse -> ListMembersResult: Probability = 1.00, Count = 1
ListMembers -> listMembers: Probability = 1.00, Count = 1
ListMembersRequest -> ListMembersRequest: Probability = 1.00, Count = 1
Invoke<ListMembersResponse> -> executeListMembers: Probability = 1.00, Count = 1
BlockRevQueue.Block -> Block: Probability = 1.00, Count = 2
q.next -> q.next: Probability = 1.00, Count = 2
Describe -> describe: Probability = 1.00, Count = 2
s.ToString -> s.toString: Probability = 1.00, Count = 4
!deleted -> !deleted: Probability = 1.00, Count = 1
deleted -> deleted: Probability = 1.00, Count = 1
commitsToDelete.Add -> commitsToDelete.add: Probability = 1.00, Count = 1
DeleteCampaignResponse -> DeleteCampaignResult: Probability = 1.00, Count = 1
DeleteCampaign -> deleteCampaign: Probability = 1.00, Count = 1
DeleteCampaignRequest -> DeleteCampaignRequest: Probability = 1.00, Count = 1
Invoke<DeleteCampaignResponse> -> executeDeleteCampaign: Probability = 1.00, Count = 1
FormatReferenceAsString -> formatReferenceAsString: Probability = 1.00, Count = 6
reference -> reference: Probability = 0.64, Count = 7
reference -> cell.formatAsString: Probability = 0.09, Count = 1
reference -> endRow,: Probability = 0.09, Count = 1
reference -> endColumn,: Probability = 0.09, Count = 1
reference -> reference+":"+cell.formatAsString: Probability = 0.09, Count = 1
ConvertFirstArg -> convertFirstArg: Probability = 1.00, Count = 2
columnIx -> columnIx: Probability = 0.56, Count = 5
columnIx -> getValueFromArea: Probability = 0.22, Count = 2
columnIx -> reference,: Probability = 0.22, Count = 2
ResolveIndexArg -> resolveIndexArg: Probability = 1.00, Count = 3
rowIx -> rowIx: Probability = 1.00, Count = 6
rowIx, -> rowIx,: Probability = 1.00, Count = 5
URISyntaxException -> URISyntaxException: Probability = 1.00, Count = 3
reason -> reason: Probability = 1.00, Count = 7
this.input -> this.input: Probability = 1.00, Count = 4
offsets -> offsets: Probability = 1.00, Count = 3
EscherAggregate -> EscherAggregate: Probability = 1.00, Count = 1
createDefaultTree -> createDefaultTree: Probability = 1.00, Count = 2
BuildBaseTree -> buildBaseTree: Probability = 1.00, Count = 1
NumericDocValuesField -> NumericDocValuesField: Probability = 1.00, Count = 2
field_1_index -> field_1_index: Probability = 1.00, Count = 1
AssociateDeviceWithNetworkProfileResponse -> AssociateDeviceWithNetworkProfileResult: Probability = 1.00, Count = 1
AssociateDeviceWithNetworkProfile -> associateDeviceWithNetworkProfile: Probability = 1.00, Count = 1
AssociateDeviceWithNetworkProfileRequest -> AssociateDeviceWithNetworkProfileRequest: Probability = 1.00, Count = 1
Invoke<AssociateDeviceWithNetworkProfileResponse> -> executeAssociateDeviceWithNetworkProfile: Probability = 1.00, Count = 1
newEntry -> newEntry: Probability = 0.75, Count = 3
newEntry -> fastAdd: Probability = 0.25, Count = 1
newEntry.RawMode -> newEntry.getRawMode: Probability = 1.00, Count = 1
.fileModeNotSetForPath, -> .fileModeNotSetForPath,newEntry.getPathString: Probability = 1.00, Count = 1
GetEvalForCell -> getEvalForCell: Probability = 1.00, Count = 2
_bookEvaluator.EvaluateReference -> _bookEvaluator.evaluateReference: Probability = 0.50, Count = 1
_bookEvaluator.EvaluateReference -> getSheet: Probability = 0.50, Count = 1
_sheetIndex, -> _sheetIndex,: Probability = 1.00, Count = 2
_tracker -> _tracker: Probability = 1.00, Count = 2
GetResultTreeId -> getResultTreeId: Probability = 1.00, Count = 2
sourceTrees[treeIndex] -> sourceTrees[treeIndex]: Probability = 1.00, Count = 1
MoPenQueryCanvasRequest -> MoPenQueryCanvasRequest: Probability = 1.00, Count = 1
"MoPenQueryCanvas", -> "MoPenQueryCanvas",: Probability = 1.00, Count = 1
DescribeTrialResponse -> DescribeTrialResult: Probability = 1.00, Count = 1
DescribeTrial -> describeTrial: Probability = 1.00, Count = 1
DescribeTrialRequest -> DescribeTrialRequest: Probability = 1.00, Count = 1
Invoke<DescribeTrialResponse> -> executeDescribeTrial: Probability = 1.00, Count = 1
DeleteCommentResponse -> DeleteCommentResult: Probability = 1.00, Count = 1
DeleteComment -> deleteComment: Probability = 1.00, Count = 1
DeleteCommentRequest -> DeleteCommentRequest: Probability = 1.00, Count = 1
Invoke<DeleteCommentResponse> -> executeDeleteComment: Probability = 1.00, Count = 1
ParseTreePatternMatcher -> ParseTreePatternMatcher: Probability = 1.00, Count = 4
matcher, -> matcher,String: Probability = 1.00, Count = 1
patternTree -> patternTree: Probability = 1.00, Count = 2
this.matcher -> this.matcher: Probability = 1.00, Count = 2
matcher -> matcher: Probability = 0.50, Count = 3
matcher -> Matcher: Probability = 0.17, Count = 1
matcher -> matcher.find: Probability = 0.33, Count = 2
this.patternRuleIndex -> this.patternRuleIndex: Probability = 1.00, Count = 1
this.patternTree -> this.patternTree: Probability = 1.00, Count = 1
PERCENT -> PERCENT: Probability = 1.00, Count = 1
GetVaultLockResponse -> GetVaultLockResult: Probability = 1.00, Count = 1
GetVaultLock -> getVaultLock: Probability = 1.00, Count = 1
GetVaultLockRequest -> GetVaultLockRequest: Probability = 1.00, Count = 1
Invoke<GetVaultLockResponse> -> executeGetVaultLock: Probability = 1.00, Count = 1
DecreaseStreamRetentionPeriodResponse -> DecreaseStreamRetentionPeriodResult: Probability = 1.00, Count = 1
DecreaseStreamRetentionPeriod -> decreaseStreamRetentionPeriod: Probability = 1.00, Count = 1
DecreaseStreamRetentionPeriodRequest -> DecreaseStreamRetentionPeriodRequest: Probability = 1.00, Count = 1
Invoke<DecreaseStreamRetentionPeriodResponse> -> executeDecreaseStreamRetentionPeriod: Probability = 1.00, Count = 1
GetSessionToken -> getSessionToken: Probability = 1.00, Count = 1
sessionToken -> sessionToken: Probability = 1.00, Count = 2
snapshot.Length -> snapshot.length: Probability = 0.50, Count = 8
snapshot.Length -> result.index: Probability = 0.06, Count = 1
snapshot.Length -> result: Probability = 0.12, Count = 2
snapshot.Length -> slice.from: Probability = 0.19, Count = 3
snapshot.Length -> -1: Probability = 0.12, Count = 2
Span[] -> Span[]: Probability = 0.78, Count = 7
Span[] -> Span[1]: Probability = 0.22, Count = 2
GetTerms -> getTerms: Probability = 1.00, Count = 3
sentence -> sentence: Probability = 0.67, Count = 4
sentence -> SegGraph: Probability = 0.17, Count = 1
sentence -> createSegGraph: Probability = 0.17, Count = 1
tokenizer -> tokenizer: Probability = 1.00, Count = 6
span1 -> span1: Probability = 0.50, Count = 2
span1 -> span1[0]: Probability = 0.25, Count = 1
span1 -> sentence.length: Probability = 0.25, Count = 1
Span -> Span: Probability = 1.00, Count = 2
tokenizer.tokenizePos -> tokenizer.tokenizePos: Probability = 1.00, Count = 1
DeleteRelationalDatabaseSnapshotResponse -> DeleteRelationalDatabaseSnapshotResult: Probability = 1.00, Count = 1
DeleteRelationalDatabaseSnapshot -> deleteRelationalDatabaseSnapshot: Probability = 1.00, Count = 1
DeleteRelationalDatabaseSnapshotRequest -> DeleteRelationalDatabaseSnapshotRequest: Probability = 1.00, Count = 1
Invoke<DeleteRelationalDatabaseSnapshotResponse> -> executeDeleteRelationalDatabaseSnapshot: Probability = 1.00, Count = 1
CheckDomainAvailabilityResponse -> CheckDomainAvailabilityResult: Probability = 1.00, Count = 1
CheckDomainAvailability -> checkDomainAvailability: Probability = 1.00, Count = 1
CheckDomainAvailabilityRequest -> CheckDomainAvailabilityRequest: Probability = 1.00, Count = 1
Invoke<CheckDomainAvailabilityResponse> -> executeCheckDomainAvailability: Probability = 1.00, Count = 1
DeleteVaultRequest -> DeleteVaultRequest: Probability = 1.00, Count = 2
GetInputStream -> getInputStream: Probability = 1.00, Count = 1
rawIn -> rawIn: Probability = 1.00, Count = 1
GetBytes -> getBytes: Probability = 1.00, Count = 1
sizeLimit -> sizeLimit: Probability = 0.67, Count = 4
sizeLimit -> LargeObjectException,MissingObjectException,: Probability = 0.33, Count = 2
cached -> cached: Probability = 0.80, Count = 4
cached -> cloneArray: Probability = 0.20, Count = 1
tooBig -> tooBig: Probability = 1.00, Count = 2
LargeObjectException.OutOfMemory -> LargeObjectException.OutOfMemory: Probability = 1.00, Count = 2
CreateSimpleShape -> createSimpleShape: Probability = 1.00, Count = 1
GetRelativeValue -> getRelativeValue: Probability = 0.86, Count = 6
GetRelativeValue -> getFirstSheetIndex: Probability = 0.14, Count = 1
SetIdentityNotificationTopicResponse -> SetIdentityNotificationTopicResult: Probability = 1.00, Count = 1
SetIdentityNotificationTopic -> setIdentityNotificationTopic: Probability = 1.00, Count = 1
SetIdentityNotificationTopicRequest -> SetIdentityNotificationTopicRequest: Probability = 1.00, Count = 1
Invoke<SetIdentityNotificationTopicResponse> -> executeSetIdentityNotificationTopic: Probability = 1.00, Count = 1
_rawData -> _rawData: Probability = 1.00, Count = 13
BlockJoinWeight -> BlockJoinWeight: Probability = 1.00, Count = 1
joinQuery, -> joinQuery,: Probability = 1.00, Count = 1
childWeight, -> Weight: Probability = 1.00, Count = 1
this.joinQuery -> joinQuery,: Probability = 1.00, Count = 1
joinQuery -> childWeight: Probability = 1.00, Count = 1
indexInterval -> ArrayList<>: Probability = 1.00, Count = 4
CreateGameSessionQueueResponse -> CreateGameSessionQueueResult: Probability = 1.00, Count = 1
CreateGameSessionQueue -> createGameSessionQueue: Probability = 1.00, Count = 1
CreateGameSessionQueueRequest -> CreateGameSessionQueueRequest: Probability = 1.00, Count = 1
Invoke<CreateGameSessionQueueResponse> -> executeCreateGameSessionQueue: Probability = 1.00, Count = 1
DescribeMetricCollectionTypesResponse -> DescribeMetricCollectionTypesResult: Probability = 1.00, Count = 1
DescribeMetricCollectionTypes -> describeMetricCollectionTypes: Probability = 1.00, Count = 2
DescribeMetricCollectionTypesRequest -> DescribeMetricCollectionTypesRequest: Probability = 1.00, Count = 1
this._enclosing.containsMapping -> ): Probability = 1.00, Count = 2
categoryPath -> categoryPath: Probability = 1.00, Count = 2
containsKey -> containsKey: Probability = 1.00, Count = 3
android.graphics.Point -> obj: Probability = 0.43, Count = 6
android.graphics.Point -> Point: Probability = 0.43, Count = 6
android.graphics.Point -> that: Probability = 0.07, Count = 1
android.graphics.Point -> rhs: Probability = 0.07, Count = 1
this.x -> this.x: Probability = 1.00, Count = 5
p.x -> that.x: Probability = 1.00, Count = 1
this.y -> this.y: Probability = 1.00, Count = 5
p.y -> that.y: Probability = 1.00, Count = 1
component, -> component,: Probability = 1.00, Count = 1
"message -> false:: Probability = 0.50, Count = 1
"message -> "message: Probability = 0.50, Count = 1
isEnabled -> isEnabled: Probability = 1.00, Count = 1
false" -> returns: Probability = 0.50, Count = 1
false" -> false": Probability = 0.50, Count = 1
ListWorkerBlocksResponse -> ListWorkerBlocksResult: Probability = 1.00, Count = 1
ListWorkerBlocks -> listWorkerBlocks: Probability = 1.00, Count = 1
ListWorkerBlocksRequest -> ListWorkerBlocksRequest: Probability = 1.00, Count = 1
Invoke<ListWorkerBlocksResponse> -> executeListWorkerBlocks: Probability = 1.00, Count = 1
ListProvisionedCapacityResponse -> ListProvisionedCapacityResult: Probability = 1.00, Count = 1
ListProvisionedCapacity -> listProvisionedCapacity: Probability = 1.00, Count = 1
ListProvisionedCapacityRequest -> ListProvisionedCapacityRequest: Probability = 1.00, Count = 1
Invoke<ListProvisionedCapacityResponse> -> executeListProvisionedCapacity: Probability = 1.00, Count = 1
this._enclosing.containsValue -> containsValue: Probability = 0.67, Count = 2
this._enclosing.containsValue -> Impl.this.containsValue: Probability = 0.33, Count = 1
ExitEveryRule -> exitEveryRule: Probability = 1.00, Count = 2
ctx.children -> ctx.children: Probability = 1.00, Count = 2
.TrimExcess -> .trimToSize: Probability = 1.00, Count = 1
Lookup -> lookup: Probability = 0.67, Count = 2
Lookup -> EscherProperty>: Probability = 0.33, Count = 1
text, -> text,: Probability = 0.89, Count = 17
text, -> text[],: Probability = 0.11, Count = 2
text[offset] -> text[offset]: Probability = 1.00, Count = 2
characterIdOfFirstCharacter -> characterIdOfFirstCharacter: Probability = 1.00, Count = 2
characterDefinition.GetCharacterClass -> characterDefinition.getCharacterClass: Probability = 1.00, Count = 2
GetJobOutputResponse -> GetJobOutputResult: Probability = 1.00, Count = 1
GetJobOutput -> getJobOutput: Probability = 1.00, Count = 1
Invoke<GetJobOutputResponse> -> executeGetJobOutput: Probability = 1.00, Count = 1
UnsafeWrite -> unsafeWrite: Probability = 1.00, Count = 4
"weight -> "weight: Probability = 1.00, Count = 1
postingsArray -> ParallelPostingsArray: Probability = 0.33, Count = 1
postingsArray -> postingsArray: Probability = 0.67, Count = 2
perField.postingsArray -> perField.postingsArray: Probability = 0.55, Count = 6
perField.postingsArray -> postingsArray.grow: Probability = 0.09, Count = 1
perField.postingsArray -> perField.newPostingsArray: Probability = 0.27, Count = 3
perField.postingsArray -> perField.createPostingsArray: Probability = 0.09, Count = 1
oldSize -> oldSize: Probability = 0.38, Count = 6
oldSize -> key: Probability = 0.25, Count = 4
oldSize -> count: Probability = 0.25, Count = 4
oldSize -> collection: Probability = 0.12, Count = 2
perField.postingsArray.size -> perField.postingsArray.size: Probability = 1.00, Count = 3
postingsArray.size -> postingsArray.size: Probability = 1.00, Count = 1
postingsArray.textStarts -> postingsArray.textStarts: Probability = 1.00, Count = 1
IsMatch -> isMatch: Probability = 1.00, Count = 1
ListIterator<Head> -> heads.isEmpty: Probability = 1.00, Count = 1
heads.Count -> heads.size: Probability = 1.00, Count = 2
LastHead.INSTANCE -> LastHead.INSTANCE: Probability = 1.00, Count = 1
CRNRecord[] -> CRNRecord[]: Probability = 1.00, Count = 2
GetCrns -> getCrns: Probability = 1.00, Count = 1
_crns.Clone -> _crns.clone: Probability = 1.00, Count = 1
"slot:" -> "slot:": Probability = 1.00, Count = 1
Slot -> slot: Probability = 1.00, Count = 1
Apply -> apply: Probability = 1.00, Count = 4
m_min -> min: Probability = 1.00, Count = 2
ModifyInstanceAttributeRequest -> ModifyInstanceAttributeRequest: Probability = 1.00, Count = 2
ListEventTrackersResponse -> ListEventTrackersResult: Probability = 1.00, Count = 1
ListEventTrackers -> listEventTrackers: Probability = 1.00, Count = 1
ListEventTrackersRequest -> ListEventTrackersRequest: Probability = 1.00, Count = 1
Invoke<ListEventTrackersResponse> -> executeListEventTrackers: Probability = 1.00, Count = 1
IsNewFragment -> isNewFragment: Probability = 1.00, Count = 2
isNewFrag -> isNewFrag: Probability = 0.60, Count = 6
isNewFrag -> fragmentSize: Probability = 0.10, Count = 1
isNewFrag -> currentNumFrags: Probability = 0.10, Count = 1
isNewFrag -> currentNumFrags++: Probability = 0.20, Count = 2
offsetAtt.EndOffset -> offsetAtt.endOffset: Probability = 1.00, Count = 3
BatchGetQueryExecutionResponse -> BatchGetQueryExecutionResult: Probability = 1.00, Count = 1
BatchGetQueryExecution -> batchGetQueryExecution: Probability = 1.00, Count = 1
BatchGetQueryExecutionRequest -> BatchGetQueryExecutionRequest: Probability = 1.00, Count = 1
Invoke<BatchGetQueryExecutionResponse> -> executeBatchGetQueryExecution: Probability = 1.00, Count = 1
indexCos -> indexCos: Probability = 1.00, Count = 3
ExternSheetIndex -> getExternSheetIndex: Probability = 1.00, Count = 3
STSAssumeRoleSessionCredentialsProvider -> STSAssumeRoleSessionCredentialsProvider: Probability = 1.00, Count = 1
roleArn,IClientProfile -> longLivedCredentials,String: Probability = 1.00, Count = 1
longLivedCredentialsProvider -> roleArn,: Probability = 0.50, Count = 2
longLivedCredentialsProvider -> clientProfile: Probability = 0.50, Count = 2
GetNewRoleSessionName -> longLivedCredentials: Probability = 0.50, Count = 1
GetNewRoleSessionName -> getNewRoleSessionName: Probability = 0.50, Count = 1
SessionToken -> SessionToken: Probability = 0.40, Count = 4
SessionToken -> sessionToken: Probability = 0.20, Count = 2
SessionToken -> sessionID,: Probability = 0.20, Count = 2
SessionToken -> timedSessionToken: Probability = 0.20, Count = 2
IRevision -> Revision: Probability = 1.00, Count = 5
revision -> revision: Probability = 1.00, Count = 8
Version -> revision.getVersion: Probability = 0.20, Count = 1
Version -> (: Probability = 0.40, Count = 2
Version -> version: Probability = 0.40, Count = 2
revision.Version -> this.sourceFiles: Probability = 1.00, Count = 1
revision.SourceFiles -> revision.getSourceFiles: Probability = 1.00, Count = 1
url -> url: Probability = 1.00, Count = 6
CreateVaultRequest -> CreateVaultRequest: Probability = 1.00, Count = 3
BooleanQueryNode -> BooleanQueryNode: Probability = 1.00, Count = 5
field_cbo_id -> field_cbo_id: Probability = 1.00, Count = 1
0xFFFFFFFF -> 0xFFFFFFFF: Probability = 0.50, Count = 1
0xFFFFFFFF -> field_5_dv_no: Probability = 0.50, Count = 1
ListConfigurationsResponse -> ListConfigurationsResult: Probability = 1.00, Count = 1
ListConfigurations -> listConfigurations: Probability = 1.00, Count = 1
ListConfigurationsRequest -> ListConfigurationsRequest: Probability = 1.00, Count = 1
Invoke<ListConfigurationsResponse> -> executeListConfigurations: Probability = 1.00, Count = 1
"3D -> "3D: Probability = 1.00, Count = 2
determine -> determine: Probability = 1.00, Count = 3
LA -> LA: Probability = 1.00, Count = 4
LT -> LT: Probability = 0.80, Count = 4
LT -> ]+",: Probability = 0.20, Count = 1
.Type -> .getType: Probability = 1.00, Count = 1
_record -> BoolErrRecord: Probability = 0.25, Count = 3
_record -> _record: Probability = 0.42, Count = 5
_record -> FORMULA:: Probability = 0.17, Count = 2
_record -> .setCachedBooleanResult: Probability = 0.17, Count = 2
.SetValue -> .setValue: Probability = 1.00, Count = 4
UntagDeliveryStreamResponse -> UntagDeliveryStreamResult: Probability = 1.00, Count = 1
UntagDeliveryStream -> untagDeliveryStream: Probability = 1.00, Count = 1
UntagDeliveryStreamRequest -> UntagDeliveryStreamRequest: Probability = 1.00, Count = 1
Invoke<UntagDeliveryStreamResponse> -> executeUntagDeliveryStream: Probability = 1.00, Count = 1
this.flags -> this.flags: Probability = 1.00, Count = 2
this.outputUnigrams -> this.outputUnigrams: Probability = 1.00, Count = 3
dest, -> dest,: Probability = 1.00, Count = 3
destOff -> destOff: Probability = 1.00, Count = 3
srcLen -> srcLen: Probability = 1.00, Count = 5
written -> written: Probability = 0.70, Count = 7
written -> Character.toChars: Probability = 0.10, Count = 1
written -> src[srcOff: Probability = 0.10, Count = 1
written -> i],: Probability = 0.10, Count = 1
Single -> fieldsData: Probability = 1.00, Count = 2
HSSFSheet -> HSSFSheet: Probability = 0.78, Count = 7
HSSFSheet -> sheet: Probability = 0.11, Count = 1
HSSFSheet -> sheet,: Probability = 0.11, Count = 1
formulaText1, -> comparisonOperation,String: Probability = 0.25, Count = 1
formulaText1, -> formulaText1,: Probability = 0.50, Count = 2
formulaText1, -> formulaText2: Probability = 0.25, Count = 1
ParseFormula -> parseFormula: Probability = 1.00, Count = 3
ComparisonOperator -> CONDITION_TYPE_CELL_VALUE_IS,: Probability = 1.00, Count = 1
comparisonOperation, -> comparisonOperation,: Probability = 1.00, Count = 1
NewSlice -> newSlice: Probability = 1.00, Count = 1
ByteUpto -> byteUpto: Probability = 0.89, Count = 8
ByteUpto -> BYTE_BLOCK_SIZE-size: Probability = 0.11, Count = 1
buffer[ByteUpto -> buffer[byteUpto-1]: Probability = 1.00, Count = 1
DescribeWorkspaceDirectoriesResponse -> DescribeWorkspaceDirectoriesResult: Probability = 1.00, Count = 2
DescribeWorkspaceDirectories -> describeWorkspaceDirectories: Probability = 1.00, Count = 2
DescribeWorkspaceDirectoriesRequest -> describeWorkspaceDirectories: Probability = 0.33, Count = 1
DescribeWorkspaceDirectoriesRequest -> DescribeWorkspaceDirectoriesRequest: Probability = 0.67, Count = 2
GetExportSnapshotRecordsResponse -> GetExportSnapshotRecordsResult: Probability = 1.00, Count = 1
GetExportSnapshotRecords -> getExportSnapshotRecords: Probability = 1.00, Count = 1
GetExportSnapshotRecordsRequest -> GetExportSnapshotRecordsRequest: Probability = 1.00, Count = 1
Invoke<GetExportSnapshotRecordsResponse> -> executeGetExportSnapshotRecords: Probability = 1.00, Count = 1
request.ReceiptHandle -> .withReceiptHandle: Probability = 1.00, Count = 2
ModifyInstanceAttributeResponse -> ModifyInstanceAttributeResult: Probability = 1.00, Count = 1
ModifyInstanceAttribute -> modifyInstanceAttribute: Probability = 1.00, Count = 1
Invoke<ModifyInstanceAttributeResponse> -> executeModifyInstanceAttribute: Probability = 1.00, Count = 1
program -> program: Probability = 1.00, Count = 2
GetPhotosByMd5sRequest -> GetPhotosByMd5sRequest: Probability = 1.00, Count = 1
"GetPhotosByMd5s", -> "GetPhotosByMd5s",: Probability = 1.00, Count = 1
StartOutboundVoiceContactResponse -> StartOutboundVoiceContactResult: Probability = 1.00, Count = 1
StartOutboundVoiceContact -> startOutboundVoiceContact: Probability = 1.00, Count = 1
StartOutboundVoiceContactRequest -> StartOutboundVoiceContactRequest: Probability = 1.00, Count = 1
Invoke<StartOutboundVoiceContactResponse> -> executeStartOutboundVoiceContact: Probability = 1.00, Count = 1
field_1_x -> field_1_x: Probability = 1.00, Count = 4
field_2_y -> field_2_y: Probability = 1.00, Count = 4
field_3_width -> field_3_width: Probability = 1.00, Count = 2
field_4_height -> field_4_height: Probability = 1.00, Count = 2
emailAddress -> emailAddress: Probability = 1.00, Count = 1
relativeRowIndex, -> relativeRowIndex,: Probability = 1.00, Count = 3
relativeColumnIndex -> relativeColumnIndex: Probability = 1.00, Count = 6
colIx -> colIx: Probability = 1.00, Count = 6
StopNow -> stopNow: Probability = 1.00, Count = 2
base.StopNow -> super.stopNow: Probability = 1.00, Count = 1
runningParallelTasks -> runningParallelTasks: Probability = 0.67, Count = 2
runningParallelTasks -> ParallelTask: Probability = 0.33, Count = 1
t.Task.StopNow -> t.task.stopNow: Probability = 1.00, Count = 1
UpdateLogPatternResponse -> UpdateLogPatternResult: Probability = 1.00, Count = 1
UpdateLogPattern -> updateLogPattern: Probability = 1.00, Count = 1
UpdateLogPatternRequest -> UpdateLogPatternRequest: Probability = 1.00, Count = 1
Invoke<UpdateLogPatternResponse> -> executeUpdateLogPattern: Probability = 1.00, Count = 1
GetMode -> getMode: Probability = 1.00, Count = 2
GetSheetEvaluator -> getSheetEvaluator: Probability = 1.00, Count = 3
.GetEvalForCell -> .getEvalForCell: Probability = 1.00, Count = 1
subReaders -> subReaders: Probability = 1.00, Count = 3
CreateTypedLinkFacetResponse -> CreateTypedLinkFacetResult: Probability = 1.00, Count = 1
CreateTypedLinkFacet -> createTypedLinkFacet: Probability = 1.00, Count = 1
CreateTypedLinkFacetRequest -> CreateTypedLinkFacetRequest: Probability = 1.00, Count = 1
Invoke<CreateTypedLinkFacetResponse> -> executeCreateTypedLinkFacet: Probability = 1.00, Count = 1
PutResolverRulePolicyResponse -> PutResolverRulePolicyResult: Probability = 1.00, Count = 1
PutResolverRulePolicy -> putResolverRulePolicy: Probability = 1.00, Count = 1
PutResolverRulePolicyRequest -> PutResolverRulePolicyRequest: Probability = 1.00, Count = 1
Invoke<PutResolverRulePolicyResponse> -> executePutResolverRulePolicy: Probability = 1.00, Count = 1
ConfirmPublicVirtualInterfaceResponse -> ConfirmPublicVirtualInterfaceResult: Probability = 1.00, Count = 1
ConfirmPublicVirtualInterface -> confirmPublicVirtualInterface: Probability = 1.00, Count = 1
ConfirmPublicVirtualInterfaceRequest -> ConfirmPublicVirtualInterfaceRequest: Probability = 1.00, Count = 1
Invoke<ConfirmPublicVirtualInterfaceResponse> -> executeConfirmPublicVirtualInterface: Probability = 1.00, Count = 1
AddOrUpdateInternal -> fi: Probability = 1.00, Count = 1
fi.HasPayloads, -> fi,: Probability = 1.00, Count = 1
AssociateFleetResponse -> AssociateFleetResult: Probability = 1.00, Count = 1
AssociateFleet -> associateFleet: Probability = 1.00, Count = 1
AssociateFleetRequest -> AssociateFleetRequest: Probability = 1.00, Count = 1
Invoke<AssociateFleetResponse> -> executeAssociateFleet: Probability = 1.00, Count = 1
wc.Release -> ctx.close: Probability = 1.00, Count = 1
InclusiveRange -> InclusiveRange: Probability = 1.00, Count = 1
UpdateProfilingGroupResponse -> UpdateProfilingGroupResult: Probability = 1.00, Count = 1
UpdateProfilingGroup -> updateProfilingGroup: Probability = 1.00, Count = 1
UpdateProfilingGroupRequest -> UpdateProfilingGroupRequest: Probability = 1.00, Count = 1
Invoke<UpdateProfilingGroupResponse> -> executeUpdateProfilingGroup: Probability = 1.00, Count = 1
DetectStackSetDriftResponse -> DetectStackSetDriftResult: Probability = 1.00, Count = 1
DetectStackSetDrift -> detectStackSetDrift: Probability = 1.00, Count = 1
DetectStackSetDriftRequest -> DetectStackSetDriftRequest: Probability = 1.00, Count = 1
Invoke<DetectStackSetDriftResponse> -> executeDetectStackSetDrift: Probability = 1.00, Count = 1
ListConfigurationProfilesResponse -> ListConfigurationProfilesResult: Probability = 1.00, Count = 1
ListConfigurationProfiles -> listConfigurationProfiles: Probability = 1.00, Count = 1
ListConfigurationProfilesRequest -> ListConfigurationProfilesRequest: Probability = 1.00, Count = 1
Invoke<ListConfigurationProfilesResponse> -> executeListConfigurationProfiles: Probability = 1.00, Count = 1
FORMAT_OTHER -> FORMAT_OTHER: Probability = 1.00, Count = 1
lastKey -> lastKey: Probability = 1.00, Count = 1
writeChars -> writeChars: Probability = 1.00, Count = 2
UpdateFleetPortSettingsResponse -> UpdateFleetPortSettingsResult: Probability = 1.00, Count = 1
UpdateFleetPortSettings -> updateFleetPortSettings: Probability = 1.00, Count = 1
UpdateFleetPortSettingsRequest -> UpdateFleetPortSettingsRequest: Probability = 1.00, Count = 1
Invoke<UpdateFleetPortSettingsResponse> -> executeUpdateFleetPortSettings: Probability = 1.00, Count = 1
RuleTransition -> RuleTransition: Probability = 1.00, Count = 3
RuleStartState -> RuleStartState: Probability = 1.00, Count = 2
ruleStart, -> ruleStart,int: Probability = 0.50, Count = 1
ruleStart, -> ruleIndex,int: Probability = 0.50, Count = 1
precedence, -> precedence,ATNState: Probability = 1.00, Count = 1
followState -> followState: Probability = 1.00, Count = 2
ruleStart -> ruleStart: Probability = 1.00, Count = 1
this.followState -> this.followState: Probability = 1.00, Count = 1
GetConferenceProviderResponse -> GetConferenceProviderResult: Probability = 1.00, Count = 1
GetConferenceProvider -> getConferenceProvider: Probability = 1.00, Count = 1
GetConferenceProviderRequest -> GetConferenceProviderRequest: Probability = 1.00, Count = 1
Invoke<GetConferenceProviderResponse> -> executeGetConferenceProvider: Probability = 1.00, Count = 1
field_1_data -> _data: Probability = 0.67, Count = 2
field_1_data -> data.clone: Probability = 0.33, Count = 1
commits -> Collection<IndexCommit>: Probability = 0.22, Count = 2
commits -> commits: Probability = 0.56, Count = 5
commits -> DirectoryReader.listCommits: Probability = 0.22, Count = 2
points, -> points,: Probability = 1.00, Count = 2
following -> following: Probability = 0.60, Count = 6
following -> states.get: Probability = 0.20, Count = 2
following -> expected.addAll: Probability = 0.20, Count = 2
InfoStream -> InfoStream: Probability = 1.00, Count = 2
infoStream -> infoStream: Probability = 1.00, Count = 3
Constants.LUCENE_MAIN_VERSION -> LOG_PREFIX: Probability = 0.27, Count = 3
Constants.LUCENE_MAIN_VERSION -> infoStream.message: Probability = 0.36, Count = 4
Constants.LUCENE_MAIN_VERSION -> LOG_PREFIX,: Probability = 0.36, Count = 4
segments -> segments: Probability = 0.83, Count = 5
segments -> info.info.maxDoc: Probability = 0.17, Count = 1
HPSFException -> HPSFException: Probability = 1.00, Count = 5
ClipboardFormatTag -> getClipboardFormatTag: Probability = 1.00, Count = 2
CFTAG_WINDOWS -> CFTAG_WINDOWS: Probability = 1.00, Count = 2
"Clipboard -> "Clipboard: Probability = 1.00, Count = 3
+"be -> +"be: Probability = 0.75, Count = 3
+"be -> getThumbnail: Probability = 0.25, Count = 1
CFTAG_WINDOWS." -> CFTAG_WINDOWS.": Probability = 1.00, Count = 2
GetClipboardFormat -> getClipboardFormat: Probability = 1.00, Count = 2
wmfImage -> OFFSET_WMFDATA: Probability = 0.20, Count = 1
wmfImage -> wmfImage: Probability = 0.40, Count = 2
wmfImage -> byte[wmfImageLength]: Probability = 0.20, Count = 1
wmfImage -> thumbnail,OFFSET_WMFDATA,wmfImage,0,wmfImageLength: Probability = 0.20, Count = 1
DescribeKeyPhrasesDetectionJobResponse -> DescribeKeyPhrasesDetectionJobResult: Probability = 1.00, Count = 1
DescribeKeyPhrasesDetectionJob -> describeKeyPhrasesDetectionJob: Probability = 1.00, Count = 1
DescribeKeyPhrasesDetectionJobRequest -> DescribeKeyPhrasesDetectionJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeKeyPhrasesDetectionJobResponse> -> executeDescribeKeyPhrasesDetectionJob: Probability = 1.00, Count = 1
this.Label -> Number: Probability = 1.00, Count = 2
this.TypeOfValue -> this.value: Probability = 1.00, Count = 2
SetUpstreamName -> setUpstreamName: Probability = 1.00, Count = 1
upstreamName -> upstreamName: Probability = 1.00, Count = 2
"setUpstreamName -> "setUpstreamName: Probability = 1.00, Count = 1
setUpstream." -> setUpstream.": Probability = 1.00, Count = 1
this.upstreamCommitName -> this.upstreamCommitName: Probability = 0.60, Count = 3
this.upstreamCommitName -> upstream.name: Probability = 0.40, Count = 2
SearchDashboardsResponse -> SearchDashboardsResult: Probability = 1.00, Count = 1
SearchDashboards -> searchDashboards: Probability = 1.00, Count = 1
SearchDashboardsRequest -> SearchDashboardsRequest: Probability = 1.00, Count = 1
Invoke<SearchDashboardsResponse> -> executeSearchDashboards: Probability = 1.00, Count = 1
CreateClusterSubnetGroupResponse -> ClusterSubnetGroup: Probability = 1.00, Count = 1
CreateClusterSubnetGroup -> createClusterSubnetGroup: Probability = 1.00, Count = 1
CreateClusterSubnetGroupRequest -> CreateClusterSubnetGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateClusterSubnetGroupResponse> -> executeCreateClusterSubnetGroup: Probability = 1.00, Count = 1
EndOfFooterLineKey -> endOfFooterLineKey: Probability = 1.00, Count = 1
GetSuffix -> GetSuffix: Probability = 1.00, Count = 2
char[len] -> char[len]: Probability = 1.00, Count = 2
bufferPosition -> bufferPosition: Probability = 0.89, Count = 8
bufferPosition -> buffer,: Probability = 0.11, Count = 1
CustomProperty -> CustomProperty: Probability = 1.00, Count = 5
cp -> cp: Probability = 0.61, Count = 11
cp -> props.values: Probability = 0.06, Count = 1
cp -> cp.getValue: Probability = 0.06, Count = 1
cp -> Character.codePointAt: Probability = 0.11, Count = 2
cp -> dest[destOff: Probability = 0.06, Count = 1
cp -> codePointCount++]: Probability = 0.06, Count = 1
cp -> s.codePointAt: Probability = 0.06, Count = 1
CreateDecryptingStream -> createDecryptingStream: Probability = 1.00, Count = 1
original -> original: Probability = 0.75, Count = 3
original -> quoteEscape: Probability = 0.25, Count = 1
userPassword -> userPassword: Probability = 0.50, Count = 3
userPassword -> Biff8EncryptionKey.getCurrentUserPassword: Probability = 0.17, Count = 1
userPassword -> Decryptor.DEFAULT_PASSWORD: Probability = 0.17, Count = 1
userPassword -> EncryptionInfo: Probability = 0.17, Count = 1
Biff8EncryptionKey.Create -> userPassword: Probability = 1.00, Count = 1
fpr.DocId -> userPassword: Probability = 1.00, Count = 1
invalid -> invalid: Probability = 1.00, Count = 15
UpdateComponentConfigurationResponse -> UpdateComponentConfigurationResult: Probability = 1.00, Count = 1
UpdateComponentConfiguration -> updateComponentConfiguration: Probability = 1.00, Count = 1
UpdateComponentConfigurationRequest -> UpdateComponentConfigurationRequest: Probability = 1.00, Count = 1
Invoke<UpdateComponentConfigurationResponse> -> executeUpdateComponentConfiguration: Probability = 1.00, Count = 1
crB -> crB: Probability = 0.50, Count = 7
crB -> crB.getFirstRow: Probability = 0.29, Count = 4
crB -> lt: Probability = 0.21, Count = 3
SetDesiredCapacityResponse -> SetDesiredCapacityResult: Probability = 1.00, Count = 1
SetDesiredCapacity -> setDesiredCapacity: Probability = 1.00, Count = 1
SetDesiredCapacityRequest -> SetDesiredCapacityRequest: Probability = 1.00, Count = 1
Invoke<SetDesiredCapacityResponse> -> executeSetDesiredCapacity: Probability = 1.00, Count = 1
getTotalLLATNLookaheadOps -> getTotalLLATNLookaheadOps: Probability = 1.00, Count = 1
decisions[i].LL_ATNTransitions -> decisions[i].LL_ATNTransitions: Probability = 1.00, Count = 2
ListQueuesResponse -> ListQueuesResult: Probability = 1.00, Count = 2
ListQueues -> listQueues: Probability = 1.00, Count = 3
ListQueuesRequest -> ListQueuesRequest: Probability = 1.00, Count = 3
Invoke<ListQueuesResponse> -> executeListQueues: Probability = 1.00, Count = 1
EnableVolumeIOResponse -> EnableVolumeIOResult: Probability = 1.00, Count = 1
EnableVolumeIO -> enableVolumeIO: Probability = 1.00, Count = 1
EnableVolumeIORequest -> EnableVolumeIORequest: Probability = 1.00, Count = 1
Invoke<EnableVolumeIOResponse> -> executeEnableVolumeIO: Probability = 1.00, Count = 1
current.Output.Value -> fstEnum.seekFloor: Probability = 1.00, Count = 1
"_current.Output -> current.output: Probability = 1.00, Count = 2
WordnetSynonymParser -> WordnetSynonymParser: Probability = 1.00, Count = 1
dedup, -> dedup,: Probability = 1.00, Count = 4
expand, -> expand,: Probability = 1.00, Count = 1
this.expand -> this.expand: Probability = 1.00, Count = 1
expand -> expand: Probability = 1.00, Count = 3
DescribeProblemResponse -> DescribeProblemResult: Probability = 1.00, Count = 1
DescribeProblem -> describeProblem: Probability = 1.00, Count = 1
DescribeProblemRequest -> DescribeProblemRequest: Probability = 1.00, Count = 1
Invoke<DescribeProblemResponse> -> executeDescribeProblem: Probability = 1.00, Count = 1
floor -> floor: Probability = 1.00, Count = 1
backingMap.floorKey -> backingMap.floorKey: Probability = 1.00, Count = 1
IrishLowerCaseFilterFactory -> IrishLowerCaseFilterFactory: Probability = 1.00, Count = 1
availabilityZones -> availabilityZones: Probability = 1.00, Count = 4
_availabilityZones -> setAvailabilityZones: Probability = 1.00, Count = 2
DescribeLoadBalancerTargetGroupsResponse -> DescribeLoadBalancerTargetGroupsResult: Probability = 1.00, Count = 1
DescribeLoadBalancerTargetGroups -> describeLoadBalancerTargetGroups: Probability = 1.00, Count = 1
DescribeLoadBalancerTargetGroupsRequest -> DescribeLoadBalancerTargetGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeLoadBalancerTargetGroupsResponse> -> executeDescribeLoadBalancerTargetGroups: Probability = 1.00, Count = 1
ReadForHideArrayItem -> readForHideArrayItem: Probability = 0.50, Count = 1
ReadForHideArrayItem -> readForHideItem: Probability = 0.50, Count = 1
LbsDropData -> LbsDropData: Probability = 1.00, Count = 2
"document -> define: Probability = 1.00, Count = 1
iw -> iw: Probability = 1.00, Count = 2
RunData.IndexWriter -> .getIndexWriter: Probability = 1.00, Count = 2
DocMaker.ID_FIELD, -> DocMaker.ID_FIELD,: Probability = 1.00, Count = 1
ListInstanceFleetsResponse -> ListInstanceFleetsResult: Probability = 1.00, Count = 1
ListInstanceFleets -> listInstanceFleets: Probability = 1.00, Count = 1
ListInstanceFleetsRequest -> ListInstanceFleetsRequest: Probability = 1.00, Count = 1
Invoke<ListInstanceFleetsResponse> -> executeListInstanceFleets: Probability = 1.00, Count = 1
srcColumnIndex,ValueEval -> srcColumnIndex,ValueEval: Probability = 1.00, Count = 3
func.Evaluate -> func.evaluate: Probability = 1.00, Count = 1
DescribeDBParametersResponse -> DescribeDBParametersResult: Probability = 1.00, Count = 1
DescribeDBParameters -> describeDBParameters: Probability = 1.00, Count = 1
DescribeDBParametersRequest -> DescribeDBParametersRequest: Probability = 1.00, Count = 2
Invoke<DescribeDBParametersResponse> -> executeDescribeDBParameters: Probability = 1.00, Count = 1
CreateFargateProfileResponse -> CreateFargateProfileResult: Probability = 1.00, Count = 1
CreateFargateProfile -> createFargateProfile: Probability = 1.00, Count = 1
CreateFargateProfileRequest -> CreateFargateProfileRequest: Probability = 1.00, Count = 1
Invoke<CreateFargateProfileResponse> -> executeCreateFargateProfile: Probability = 1.00, Count = 1
java.text.CharacterIteratorClass.DONE -> DONE: Probability = 0.60, Count = 6
java.text.CharacterIteratorClass.DONE -> string.charAt: Probability = 0.40, Count = 4
@string[--offset] -> --offset: Probability = 1.00, Count = 1
SetCallable -> setCallable: Probability = 1.00, Count = 5
tagName -> tagName: Probability = 0.75, Count = 3
tagName -> this.tags.addAll: Probability = 0.25, Count = 1
fullName -> fullName: Probability = 1.00, Count = 3
ok -> ok: Probability = 1.00, Count = 3
CreateSampleFindingsResponse -> CreateSampleFindingsResult: Probability = 1.00, Count = 1
CreateSampleFindings -> createSampleFindings: Probability = 1.00, Count = 1
CreateSampleFindingsRequest -> CreateSampleFindingsRequest: Probability = 1.00, Count = 1
Invoke<CreateSampleFindingsResponse> -> executeCreateSampleFindings: Probability = 1.00, Count = 1
lastDocID -> new: Probability = 0.43, Count = 3
lastDocID -> ArrayList<>: Probability = 0.29, Count = 2
lastDocID -> this.similarity: Probability = 0.14, Count = 1
lastDocID -> fstCompiler: Probability = 0.14, Count = 1
wordNum -> ArrayList<>: Probability = 0.33, Count = 2
wordNum -> 16,: Probability = 0.33, Count = 2
wordNum -> new: Probability = 0.33, Count = 2
Step -> step: Probability = 1.00, Count = 4
m_accept[p] -> accept.get: Probability = 1.00, Count = 3
"ERR#" -> "ERR#": Probability = 1.00, Count = 1
@out.close -> out.close: Probability = 1.00, Count = 4
propertiesCount -> propertiesCount: Probability = 1.00, Count = 2
EscherPropertyFactory -> EscherPropertyFactory: Probability = 0.40, Count = 2
EscherPropertyFactory -> properties.clear: Probability = 0.20, Count = 1
EscherPropertyFactory -> properties.addAll: Probability = 0.20, Count = 1
EscherPropertyFactory -> f.createProperties: Probability = 0.20, Count = 1
EveryNOrDocFreqTermSelector -> EveryNOrDocFreqTermSelector: Probability = 1.00, Count = 1
docFreqThresh, -> docFreqThresh,: Probability = 1.00, Count = 1
this.interval -> this.interval: Probability = 1.00, Count = 2
this.docFreqThresh -> this.docFreqThresh: Probability = 1.00, Count = 1
docFreqThresh -> docFreqThresh: Probability = 1.00, Count = 2
UpdateAvailabilityOptionsResponse -> UpdateAvailabilityOptionsResult: Probability = 1.00, Count = 1
UpdateAvailabilityOptions -> updateAvailabilityOptions: Probability = 1.00, Count = 1
UpdateAvailabilityOptionsRequest -> UpdateAvailabilityOptionsRequest: Probability = 1.00, Count = 1
Invoke<UpdateAvailabilityOptionsResponse> -> executeUpdateAvailabilityOptions: Probability = 1.00, Count = 1
AddInstanceFleetResponse -> AddInstanceFleetResult: Probability = 1.00, Count = 1
AddInstanceFleet -> addInstanceFleet: Probability = 1.00, Count = 1
AddInstanceFleetRequest -> AddInstanceFleetRequest: Probability = 1.00, Count = 1
Invoke<AddInstanceFleetResponse> -> executeAddInstanceFleet: Probability = 1.00, Count = 1
setMax -> setMax: Probability = 1.00, Count = 2
getMax -> getMax: Probability = 1.00, Count = 3
setKeyProgressIncrement -> setKeyProgressIncrement: Probability = 1.00, Count = 2
System.Math.Max -> Math.max: Probability = 1.00, Count = 5
absRowIx, -> absRowIx,: Probability = 1.00, Count = 2
_evaluator -> _evaluator: Probability = 1.00, Count = 5
stateNumber -> stateNumber: Probability = 1.00, Count = 3
NextTokens -> nextTokens: Probability = 1.00, Count = 5
TokenConstants.EPSILON -> Token.EPSILON: Probability = 0.50, Count = 6
TokenConstants.EPSILON -> expected.remove: Probability = 0.17, Count = 2
TokenConstants.EPSILON -> ctx.invokingState: Probability = 0.17, Count = 2
TokenConstants.EPSILON -> following.contains: Probability = 0.17, Count = 2
UntagResourceResponse -> UntagResourceResult: Probability = 1.00, Count = 1
GetInflectionForm -> getInflectionForm: Probability = 1.00, Count = 3
Ref3DPxg -> Ref3DPxg: Probability = 1.00, Count = 1
SheetRangeIdentifier -> SheetRangeIdentifier: Probability = 0.67, Count = 2
SheetRangeIdentifier -> .getLastSheetIdentifier: Probability = 0.33, Count = 1
this.lastSheetName -> this.lastSheetName: Probability = 1.00, Count = 2
ModifyJumpserverPasswordRequest -> ModifyJumpserverPasswordRequest: Probability = 1.00, Count = 1
"ModifyJumpserverPassword" -> "ModifyJumpserverPassword",: Probability = 1.00, Count = 1
SearchLocalGatewayRoutesResponse -> SearchLocalGatewayRoutesResult: Probability = 1.00, Count = 1
SearchLocalGatewayRoutes -> searchLocalGatewayRoutes: Probability = 1.00, Count = 1
SearchLocalGatewayRoutesRequest -> SearchLocalGatewayRoutesRequest: Probability = 1.00, Count = 1
Invoke<SearchLocalGatewayRoutesResponse> -> executeSearchLocalGatewayRoutes: Probability = 1.00, Count = 1
cchSubName -> _subtotalName: Probability = 0.40, Count = 2
cchSubName -> cchSubName: Probability = 0.60, Count = 3
"Unexpected -> "Unexpected: Probability = 1.00, Count = 8
Cosh -> cosh: Probability = 1.00, Count = 1
ePowX -> ePowX: Probability = 1.00, Count = 7
Math.E, -> Math.E,: Probability = 1.00, Count = 6
ePowNegX -> ePowNegX: Probability = 1.00, Count = 7
-d -> -d: Probability = 1.00, Count = 4
d++ -> _interp.decisionToDFA.length: Probability = 0.50, Count = 2
d++ -> d++: Probability = 0.50, Count = 2
DFA -> DFA: Probability = 1.00, Count = 4
dfa.ToString -> dfa.toString: Probability = 1.00, Count = 2
Vocabulary -> getVocabulary: Probability = 1.00, Count = 2
LexerChannelAction -> LexerChannelAction: Probability = 1.00, Count = 1
this.channel -> this.channel: Probability = 1.00, Count = 1
MappingCharFilter -> MappingCharFilter: Probability = 1.00, Count = 2
NormalizeCharMap -> NormalizeCharMap: Probability = 1.00, Count = 3
fstReader -> fstReader: Probability = 0.67, Count = 2
fstReader -> map.getBytesReader: Probability = 0.33, Count = 1
sequence.ToString -> sequence.toString: Probability = 1.00, Count = 1
field_2_bytes, -> field_2_bytes,: Probability = 1.00, Count = 2
codepage -> codepage: Probability = 1.00, Count = 3
SimpleDate -> SimpleDate: Probability = 0.50, Count = 1
SimpleDate -> cal: Probability = 0.50, Count = 1
date.Year -> year: Probability = 0.50, Count = 4
date.Year -> Calendar.YEAR: Probability = 0.38, Count = 3
date.Year -> month: Probability = 0.12, Count = 1
year -> cal.get: Probability = 1.00, Count = 2
month -> Calendar.MONTH: Probability = 1.00, Count = 1
day -> day: Probability = 1.00, Count = 1
date.Month -> cal.get: Probability = 1.00, Count = 1
date.Day -> Calendar.DAY_OF_MONTH: Probability = 1.00, Count = 1
ticks -> tsMilliseconds: Probability = 0.50, Count = 1
ticks -> cal.getTimeInMillis: Probability = 0.50, Count = 1
"Do -> "Do: Probability = 1.00, Count = 1
kind -> kind: Probability = 1.00, Count = 2
filter: -> filter:: Probability = 1.00, Count = 1
interval.a -> interval.a: Probability = 0.67, Count = 6
interval.a -> interval.b: Probability = 0.33, Count = 3
CancelStepsResponse -> CancelStepsResult: Probability = 1.00, Count = 1
CancelSteps -> cancelSteps: Probability = 1.00, Count = 1
CancelStepsRequest -> CancelStepsRequest: Probability = 1.00, Count = 1
Invoke<CancelStepsResponse> -> executeCancelSteps: Probability = 1.00, Count = 1
base.codePointBefore -> super.codePointBefore: Probability = 1.00, Count = 1
DeleteApplicationRequest -> DeleteApplicationRequest: Probability = 1.00, Count = 2
LazyDocument -> LazyDocument: Probability = 1.00, Count = 1
this.docID -> this.docID: Probability = 1.00, Count = 1
TrimLeadingWhitespace -> trimLeadingWhitespace: Probability = 1.00, Count = 1
IsWhitespace -> isWhitespace: Probability = 1.00, Count = 2
raw[start] -> raw[start]: Probability = 1.00, Count = 1
start++ -> start++: Probability = 1.00, Count = 2
GetMap -> getMap: Probability = 1.00, Count = 1
map.Clone -> map: Probability = 1.00, Count = 1
iterator.set -> iterator.set: Probability = 1.00, Count = 1
ModifyCurrentDBClusterCapacityResponse -> ModifyCurrentDBClusterCapacityResult: Probability = 1.00, Count = 1
ModifyCurrentDBClusterCapacity -> modifyCurrentDBClusterCapacity: Probability = 1.00, Count = 1
ModifyCurrentDBClusterCapacityRequest -> ModifyCurrentDBClusterCapacityRequest: Probability = 1.00, Count = 1
Invoke<ModifyCurrentDBClusterCapacityResponse> -> executeModifyCurrentDBClusterCapacity: Probability = 1.00, Count = 1
CancelRepoBuildRequest -> CancelRepoBuildRequest: Probability = 1.00, Count = 1
"CancelRepoBuild", -> "CancelRepoBuild",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/build/[BuildId]/cancel" -> "/repos/[RepoNamespace]/[RepoName]/build/[BuildId]/cancel": Probability = 1.00, Count = 1
longCount -> longCount: Probability = 1.00, Count = 20
SpreadsheetVersion -> SpreadsheetVersion: Probability = 0.75, Count = 3
SpreadsheetVersion -> ssVersion: Probability = 0.25, Count = 1
GetSpreadsheetVersion -> getSpreadsheetVersion: Probability = 1.00, Count = 2
SpreadsheetVersion.EXCEL97 -> SpreadsheetVersion.EXCEL97: Probability = 1.00, Count = 2
NumNodes -> numNodes: Probability = 1.00, Count = 2
rootNode -> rootNode: Probability = 1.00, Count = 3
EnglishPossessiveFilterFactory -> EnglishPossessiveFilterFactory: Probability = 1.00, Count = 1
Atanh -> atanh: Probability = 1.00, Count = 2
WindowsIndexInput -> WindowsIndexInput: Probability = 1.00, Count = 3
currentToken,int[][] -> currentTokenVal,int[][]: Probability = 1.00, Count = 1
expectedTokenSequences,string[] -> expectedTokenSequencesVal,String[]: Probability = 1.00, Count = 1
tokenImage -> tokenImageVal: Probability = 1.00, Count = 3
Initialize -> initialise: Probability = 0.38, Count = 3
Initialize -> currentTokenVal,: Probability = 0.38, Count = 3
Initialize -> expectedTokenSequencesVal,: Probability = 0.12, Count = 1
Initialize -> initialize: Probability = 0.12, Count = 1
this.CurrentToken -> currentToken: Probability = 0.33, Count = 2
this.CurrentToken -> currentTokenVal: Probability = 0.50, Count = 3
this.CurrentToken -> this.currentToken: Probability = 0.17, Count = 1
this.ExpectedTokenSequences -> expectedTokenSequences: Probability = 0.33, Count = 2
this.ExpectedTokenSequences -> expectedTokenSequencesVal: Probability = 0.50, Count = 3
this.ExpectedTokenSequences -> this.expectedTokenSequences: Probability = 0.17, Count = 1
this.TokenImage -> tokenImage: Probability = 1.00, Count = 2
getTotalATNLookaheadOps -> getTotalATNLookaheadOps: Probability = 1.00, Count = 1
DescribeLoadBalancersRequest -> DescribeLoadBalancersRequest: Probability = 1.00, Count = 3
loadBalancerNames -> loadBalancerNames: Probability = 1.00, Count = 2
_loadBalancerNames -> setLoadBalancerNames: Probability = 1.00, Count = 1
'~' -> '~'+super.toString: Probability = 1.00, Count = 1
RoaSignatureComposer -> RoaSignatureComposer: Probability = 1.00, Count = 1
ready -> ready: Probability = 1.00, Count = 1
"Reader -> "Reader: Probability = 1.00, Count = 1
closed" -> is: Probability = 0.50, Count = 5
closed" -> closed": Probability = 0.50, Count = 5
@in.ready -> in.ready: Probability = 1.00, Count = 1
GetClientCertificatesResponse -> GetClientCertificatesResult: Probability = 1.00, Count = 1
GetClientCertificates -> getClientCertificates: Probability = 1.00, Count = 1
GetClientCertificatesRequest -> GetClientCertificatesRequest: Probability = 1.00, Count = 1
Invoke<GetClientCertificatesResponse> -> executeGetClientCertificates: Probability = 1.00, Count = 1
NextLF -> nextLF: Probability = 1.00, Count = 6
GetInstanceStateResponse -> GetInstanceStateResult: Probability = 1.00, Count = 1
GetInstanceState -> getInstanceState: Probability = 1.00, Count = 1
GetInstanceStateRequest -> GetInstanceStateRequest: Probability = 1.00, Count = 1
Invoke<GetInstanceStateResponse> -> executeGetInstanceState: Probability = 1.00, Count = 1
c.isEmpty -> .isEmpty: Probability = 0.33, Count = 1
c.isEmpty -> c.isEmpty: Probability = 0.67, Count = 2
GetCount -> getCount: Probability = 1.00, Count = 1
DeleteConfigurationSetEventDestinationResponse -> DeleteConfigurationSetEventDestinationResult: Probability = 1.00, Count = 1
DeleteConfigurationSetEventDestination -> deleteConfigurationSetEventDestination: Probability = 1.00, Count = 1
DeleteConfigurationSetEventDestinationRequest -> DeleteConfigurationSetEventDestinationRequest: Probability = 1.00, Count = 1
Invoke<DeleteConfigurationSetEventDestinationResponse> -> executeDeleteConfigurationSetEventDestination: Probability = 1.00, Count = 1
DeleteNetworkInterfacePermissionResponse -> DeleteNetworkInterfacePermissionResult: Probability = 1.00, Count = 1
DeleteNetworkInterfacePermission -> deleteNetworkInterfacePermission: Probability = 1.00, Count = 1
DeleteNetworkInterfacePermissionRequest -> DeleteNetworkInterfacePermissionRequest: Probability = 1.00, Count = 1
Invoke<DeleteNetworkInterfacePermissionResponse> -> executeDeleteNetworkInterfacePermission: Probability = 1.00, Count = 1
_key -> this.key: Probability = 0.14, Count = 1
_key -> _key: Probability = 0.43, Count = 3
_key -> setKey: Probability = 0.43, Count = 3
CreateTrafficMirrorTargetResponse -> CreateTrafficMirrorTargetResult: Probability = 1.00, Count = 1
CreateTrafficMirrorTarget -> createTrafficMirrorTarget: Probability = 1.00, Count = 1
CreateTrafficMirrorTargetRequest -> CreateTrafficMirrorTargetRequest: Probability = 1.00, Count = 1
Invoke<CreateTrafficMirrorTargetResponse> -> executeCreateTrafficMirrorTarget: Probability = 1.00, Count = 1
GetGroupPolicyRequest -> GetGroupPolicyRequest: Probability = 1.00, Count = 1
DeleteVoiceChannelResponse -> DeleteVoiceChannelResult: Probability = 1.00, Count = 1
DeleteVoiceChannel -> deleteVoiceChannel: Probability = 1.00, Count = 1
DeleteVoiceChannelRequest -> DeleteVoiceChannelRequest: Probability = 1.00, Count = 1
Invoke<DeleteVoiceChannelResponse> -> executeDeleteVoiceChannel: Probability = 1.00, Count = 1
ModifyDBClusterSnapshotAttributeResponse -> DBClusterSnapshotAttributesResult: Probability = 1.00, Count = 1
ModifyDBClusterSnapshotAttribute -> modifyDBClusterSnapshotAttribute: Probability = 1.00, Count = 1
ModifyDBClusterSnapshotAttributeRequest -> ModifyDBClusterSnapshotAttributeRequest: Probability = 1.00, Count = 1
Invoke<ModifyDBClusterSnapshotAttributeResponse> -> executeModifyDBClusterSnapshotAttribute: Probability = 1.00, Count = 1
RegisterAVSDeviceResponse -> RegisterAVSDeviceResult: Probability = 1.00, Count = 1
RegisterAVSDevice -> registerAVSDevice: Probability = 1.00, Count = 1
RegisterAVSDeviceRequest -> RegisterAVSDeviceRequest: Probability = 1.00, Count = 1
Invoke<RegisterAVSDeviceResponse> -> executeRegisterAVSDevice: Probability = 1.00, Count = 1
char[newValue.Length] -> char[newValue.length]: Probability = 1.00, Count = 1
newValue.Length -> newValue.length: Probability = 1.00, Count = 1
MutableValueDouble -> exists: Probability = 0.14, Count = 2
MutableValueDouble -> 0.0D: Probability = 0.14, Count = 2
MutableValueDouble -> value: Probability = 0.14, Count = 2
MutableValueDouble -> MutableValueDouble: Probability = 0.57, Count = 8
UpdateCodeRepositoryResponse -> UpdateCodeRepositoryResult: Probability = 1.00, Count = 1
UpdateCodeRepository -> updateCodeRepository: Probability = 1.00, Count = 1
UpdateCodeRepositoryRequest -> UpdateCodeRepositoryRequest: Probability = 1.00, Count = 1
Invoke<UpdateCodeRepositoryResponse> -> executeUpdateCodeRepository: Probability = 1.00, Count = 1
ForString -> forString: Probability = 1.00, Count = 1
smap.ContainsKey -> smap.get: Probability = 1.00, Count = 1
code: -> code:: Probability = 1.00, Count = 1
UnmonitorInstancesResponse -> UnmonitorInstancesResult: Probability = 1.00, Count = 1
UnmonitorInstances -> unmonitorInstances: Probability = 1.00, Count = 1
UnmonitorInstancesRequest -> UnmonitorInstancesRequest: Probability = 1.00, Count = 2
Invoke<UnmonitorInstancesResponse> -> executeUnmonitorInstances: Probability = 1.00, Count = 1
IsInteractive -> isInteractive: Probability = 1.00, Count = 1
SetColor -> setColor: Probability = 0.67, Count = 4
SetColor -> background: Probability = 0.17, Count = 1
SetColor -> x,y,width,height: Probability = 0.17, Count = 1
byteIndex -> byteIndex: Probability = 0.60, Count = 3
byteIndex -> FIRST_COLOR_INDEX: Probability = 0.40, Count = 2
field_2_colors.Count -> _colors.size: Probability = 1.00, Count = 4
PColor -> PColor: Probability = 0.45, Count = 5
PColor -> _colors.get: Probability = 0.18, Count = 2
PColor -> i: Probability = 0.36, Count = 4
custColor -> custColor: Probability = 0.67, Count = 2
custColor -> _colors.set: Probability = 0.33, Count = 1
IsUser -> isUser: Probability = 1.00, Count = 1
JapaneseTokenizerType.USER -> Type.USER: Probability = 1.00, Count = 1
DeleteMeetingResponse -> DeleteMeetingResult: Probability = 1.00, Count = 1
DeleteMeeting -> deleteMeeting: Probability = 1.00, Count = 1
DeleteMeetingRequest -> DeleteMeetingRequest: Probability = 1.00, Count = 1
Invoke<DeleteMeetingResponse> -> executeDeleteMeeting: Probability = 1.00, Count = 1
SerializeTokens -> serializeTokens: Probability = 1.00, Count = 1
_byteEncoding, -> _byteEncoding,: Probability = 1.00, Count = 3
RebootDBInstanceResponse -> DBInstance: Probability = 1.00, Count = 1
RebootDBInstance -> rebootDBInstance: Probability = 1.00, Count = 1
RebootDBInstanceRequest -> RebootDBInstanceRequest: Probability = 1.00, Count = 2
Invoke<RebootDBInstanceResponse> -> executeRebootDBInstance: Probability = 1.00, Count = 1
RestoreDomainAccessResponse -> RestoreDomainAccessResult: Probability = 1.00, Count = 1
RestoreDomainAccess -> restoreDomainAccess: Probability = 1.00, Count = 1
RestoreDomainAccessRequest -> RestoreDomainAccessRequest: Probability = 1.00, Count = 1
Invoke<RestoreDomainAccessResponse> -> executeRestoreDomainAccess: Probability = 1.00, Count = 1
WasEscaped -> wasEscaped: Probability = 1.00, Count = 2
.wasEscaped[index] -> .wasEscaped[index]: Probability = 1.00, Count = 1
SetCmd -> setCmd: Probability = 1.00, Count = 1
way, -> way,: Probability = 1.00, Count = 2
cmd -> cmd: Probability = 0.88, Count = 14
cmd -> Arrays.asList: Probability = 0.12, Count = 2
At -> at: Probability = 1.00, Count = 6
way -> way: Probability = 0.73, Count = 8
way -> Character: Probability = 0.27, Count = 3
c.cmd -> c.cmd: Probability = 1.00, Count = 10
cells[way] -> cells.put: Probability = 0.50, Count = 2
cells[way] -> way,: Probability = 0.50, Count = 2
c.cnt -> c.cnt: Probability = 1.00, Count = 4
ValueRangeRecord -> ValueRangeRecord: Probability = 1.00, Count = 1
AddFiles -> addFiles: Probability = 0.50, Count = 1
AddFiles -> Collection<String>: Probability = 0.50, Count = 1
setFiles.UnionWith -> setFiles.add: Probability = 0.50, Count = 1
setFiles.UnionWith -> namedForThisSegment: Probability = 0.50, Count = 1
CreateClientVpnEndpointResponse -> CreateClientVpnEndpointResult: Probability = 1.00, Count = 1
CreateClientVpnEndpoint -> createClientVpnEndpoint: Probability = 1.00, Count = 1
CreateClientVpnEndpointRequest -> CreateClientVpnEndpointRequest: Probability = 1.00, Count = 1
Invoke<CreateClientVpnEndpointResponse> -> executeCreateClientVpnEndpoint: Probability = 1.00, Count = 1
java.nio.ReadWriteIntArrayBuffer -> ReadWriteIntArrayBuffer: Probability = 1.00, Count = 3
rs.GetNext -> rs.getNext: Probability = 1.00, Count = 17
CFHeaderRecord.sid -> CFHeaderRecord.sid: Probability = 1.00, Count = 2
header -> header: Probability = 0.89, Count = 8
header -> HeaderLineParser: Probability = 0.11, Count = 1
nRules -> nRules: Probability = 1.00, Count = 1
rules -> rules: Probability = 1.00, Count = 11
ToText -> toText: Probability = 1.00, Count = 2
ByteArrayOutputStream -> ByteArrayOutputStream: Probability = 1.00, Count = 4
bos.Write -> bos.write: Probability = 1.00, Count = 4
LockFailedException -> LockFailedException: Probability = 1.00, Count = 2
Hash -> hash: Probability = 1.00, Count = 3
DeleteTopicRequest -> DeleteTopicRequest: Probability = 1.00, Count = 1
topicArn -> topicArn: Probability = 0.56, Count = 10
topicArn -> ): Probability = 0.44, Count = 8
_topicArn -> setTopicArn: Probability = 1.00, Count = 8
crA, -> crA,: Probability = 1.00, Count = 5
crB.FirstRow -> (: Probability = 1.00, Count = 4
le -> &&ge: Probability = 0.67, Count = 2
le -> &&le: Probability = 0.33, Count = 1
ge -> ,: Probability = 1.00, Count = 3
crB.FirstColumn -> crB.getLastColumn: Probability = 1.00, Count = 4
java.util.Arrays.fill -> Arrays.fill: Probability = 1.00, Count = 3
_size, -> size,: Probability = 1.00, Count = 1
commits.AddItem -> commits.add: Probability = 1.00, Count = 2
"NO_MERGES" -> "NO_MERGES": Probability = 1.00, Count = 1
nthParent -> nthParent: Probability = 1.00, Count = 2
oldModes[nthParent] -> oldModes[nthParent]: Probability = 1.00, Count = 1
nextWrite -> nextWrite: Probability = 0.90, Count = 9
nextWrite -> positions[nextWrite--].reset: Probability = 0.10, Count = 1
IndexCode -> getIndexCode: Probability = 1.00, Count = 2
formatString, -> formatString,: Probability = 1.00, Count = 2
DescribePendingMaintenanceActionsResponse -> DescribePendingMaintenanceActionsResult: Probability = 1.00, Count = 1
DescribePendingMaintenanceActions -> describePendingMaintenanceActions: Probability = 1.00, Count = 1
DescribePendingMaintenanceActionsRequest -> DescribePendingMaintenanceActionsRequest: Probability = 1.00, Count = 1
Invoke<DescribePendingMaintenanceActionsResponse> -> executeDescribePendingMaintenanceActions: Probability = 1.00, Count = 1
DescribeServicesResponse -> DescribeServicesResult: Probability = 1.00, Count = 1
DescribeServices -> describeServices: Probability = 1.00, Count = 1
DescribeServicesRequest -> DescribeServicesRequest: Probability = 1.00, Count = 1
Invoke<DescribeServicesResponse> -> executeDescribeServices: Probability = 1.00, Count = 1
GetCachedResultType -> getCachedResultType: Probability = 1.00, Count = 1
CellType.Numeric -> CellType.NUMERIC.getCode: Probability = 1.00, Count = 1
specialCachedValue.GetValueType -> specialCachedValue.getValueType: Probability = 1.00, Count = 1
v_4 -> cursor: Probability = 1.00, Count = 10
v_5 -> cursor: Probability = 1.00, Count = 12
lab0:m_cursor -> cursor: Probability = 1.00, Count = 5
SetCachedResultErrorCode -> setCachedResultErrorCode: Probability = 1.00, Count = 1
SpecialCachedValue.CreateCachedErrorCode -> FormulaSpecialCachedValue.createCachedErrorCode: Probability = 1.00, Count = 1
"Min -> "Min: Probability = 1.00, Count = 4
shingle -> shingle: Probability = 0.67, Count = 8
shingle -> size": Probability = 0.17, Count = 2
shingle -> this.minShingleSize: Probability = 0.17, Count = 2
gramSize -> gramSize: Probability = 1.00, Count = 2
CircularSequence -> CircularSequence: Probability = 1.00, Count = 2
InputMismatchException -> InputMismatchException: Probability = 0.88, Count = 7
InputMismatchException -> recognizer,: Probability = 0.12, Count = 1
recognizer.RuleContext -> this.setOffendingToken: Probability = 1.00, Count = 1
Trec1MQReader -> Trec1MQReader: Probability = 1.00, Count = 1
this.name -> this.name: Probability = 1.00, Count = 4
"MergeInfo -> "MergeInfo: Probability = 1.00, Count = 1
[totalDocCount=" -> [totalMaxDoc=": Probability = 1.00, Count = 1
TotalDocCount+ -> totalMaxDoc+: Probability = 1.00, Count = 1
estimatedMergeBytes=" -> estimatedMergeBytes=": Probability = 1.00, Count = 1
EstimatedMergeBytes -> estimatedMergeBytes: Probability = 1.00, Count = 2
IsExternal -> isExternal: Probability = 1.00, Count = 2
mergeMaxNumSegments=" -> mergeMaxNumSegments=": Probability = 1.00, Count = 1
MergeMaxNumSegments -> mergeMaxNumSegments: Probability = 1.00, Count = 2
GetVaultNotificationsRequest -> GetVaultNotificationsRequest: Probability = 1.00, Count = 3
DisassociatePhoneNumbersFromVoiceConnectorGroupResponse -> DisassociatePhoneNumbersFromVoiceConnectorGroupResult: Probability = 1.00, Count = 1
DisassociatePhoneNumbersFromVoiceConnectorGroup -> disassociatePhoneNumbersFromVoiceConnectorGroup: Probability = 1.00, Count = 1
DisassociatePhoneNumbersFromVoiceConnectorGroupRequest -> DisassociatePhoneNumbersFromVoiceConnectorGroupRequest: Probability = 1.00, Count = 1
Invoke<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse> -> executeDisassociatePhoneNumbersFromVoiceConnectorGroup: Probability = 1.00, Count = 1
AddPattern -> addPattern: Probability = 1.00, Count = 1
ivalue -> ivalue: Probability = 0.75, Count = 3
ivalue -> ivalues.find: Probability = 0.25, Count = 1
Insert -> insert: Probability = 0.88, Count = 7
Insert -> root,: Probability = 0.12, Count = 1
IsSheetHidden -> isSheetHidden: Probability = 1.00, Count = 1
sheetnum -> sheetnum: Probability = 0.67, Count = 4
sheetnum -> .isHidden: Probability = 0.17, Count = 1
sheetnum -> .isVeryHidden: Probability = 0.17, Count = 1
GetBoundSheetRec -> getBoundSheetRec: Probability = 1.00, Count = 2
AddUserToGroupRequest -> AddUserToGroupRequest: Probability = 1.00, Count = 1
sumsq -> sumsq: Probability = 1.00, Count = 4
UserSViewEnd -> UserSViewEnd: Probability = 1.00, Count = 2
BatchPutScheduledUpdateGroupActionResponse -> BatchPutScheduledUpdateGroupActionResult: Probability = 1.00, Count = 1
BatchPutScheduledUpdateGroupAction -> batchPutScheduledUpdateGroupAction: Probability = 1.00, Count = 1
BatchPutScheduledUpdateGroupActionRequest -> BatchPutScheduledUpdateGroupActionRequest: Probability = 1.00, Count = 1
Invoke<BatchPutScheduledUpdateGroupActionResponse> -> executeBatchPutScheduledUpdateGroupAction: Probability = 1.00, Count = 1
NumberError -> numberError: Probability = 1.00, Count = 1
ISubscriptionOperations -> displayName: Probability = 1.00, Count = 1
DescribeSpotFleetRequestHistoryResponse -> DescribeSpotFleetRequestHistoryResult: Probability = 1.00, Count = 1
DescribeSpotFleetRequestHistory -> describeSpotFleetRequestHistory: Probability = 1.00, Count = 1
DescribeSpotFleetRequestHistoryRequest -> DescribeSpotFleetRequestHistoryRequest: Probability = 1.00, Count = 1
Invoke<DescribeSpotFleetRequestHistoryResponse> -> executeDescribeSpotFleetRequestHistory: Probability = 1.00, Count = 1
InventoryPrefixPredicate -> InventoryPrefixPredicate: Probability = 1.00, Count = 1
this.prefix -> this.prefix: Probability = 1.00, Count = 2
MergeStrategy[] -> MergeStrategy[]: Probability = 0.67, Count = 2
MergeStrategy[] -> MergeStrategy[STRATEGIES.size: Probability = 0.33, Count = 1
MergeStrategy[STRATEGIES.Count] -> STRATEGIES.values: Probability = 1.00, Count = 1
DeleteVoiceConnectorTerminationCredentialsResponse -> DeleteVoiceConnectorTerminationCredentialsResult: Probability = 1.00, Count = 1
DeleteVoiceConnectorTerminationCredentials -> deleteVoiceConnectorTerminationCredentials: Probability = 1.00, Count = 1
DeleteVoiceConnectorTerminationCredentialsRequest -> DeleteVoiceConnectorTerminationCredentialsRequest: Probability = 1.00, Count = 1
Invoke<DeleteVoiceConnectorTerminationCredentialsResponse> -> executeDeleteVoiceConnectorTerminationCredentials: Probability = 1.00, Count = 1
numMarkers -> numMarkers: Probability = 0.33, Count = 1
numMarkers -> numMarkers==0: Probability = 0.67, Count = 2
lastCharBufferStart -> lastCharBufferStart: Probability = 1.00, Count = 4
lastChar -> lastChar: Probability = 1.00, Count = 7
-numMarkers -> -numMarkers: Probability = 1.00, Count = 2
numMarkers++ -> numMarkers++: Probability = 1.00, Count = 1
ScoreCachingWrappingScorer -> ScoreCachingWrappingScorer: Probability = 1.00, Count = 1
scorer -> Scorable: Probability = 0.33, Count = 1
scorer -> scorer: Probability = 0.67, Count = 2
scorer.m_weight -> this.in: Probability = 1.00, Count = 1
skipBuffer -> skipBuffer: Probability = 1.00, Count = 6
packedIntsVersion, -> packedIntsVersion,: Probability = 0.60, Count = 6
packedIntsVersion, -> valueCount: Probability = 0.20, Count = 2
packedIntsVersion, -> bitsPerValue: Probability = 0.10, Count = 1
packedIntsVersion, -> longCount: Probability = 0.10, Count = 1
blockSize, -> blockSize,: Probability = 0.67, Count = 6
blockSize, -> MIN_BLOCK_SIZE,: Probability = 0.22, Count = 2
blockSize, -> MAX_BLOCK_SIZE: Probability = 0.11, Count = 1
GetDownloadUrlsRequest -> GetDownloadUrlsRequest: Probability = 1.00, Count = 1
"GetDownloadUrls", -> "GetDownloadUrls",: Probability = 1.00, Count = 1
ListSecurityProfilesResponse -> ListSecurityProfilesResult: Probability = 1.00, Count = 1
ListSecurityProfiles -> listSecurityProfiles: Probability = 1.00, Count = 1
ListSecurityProfilesRequest -> ListSecurityProfilesRequest: Probability = 1.00, Count = 1
Invoke<ListSecurityProfilesResponse> -> executeListSecurityProfiles: Probability = 1.00, Count = 1
ITerminalNode -> TerminalNode: Probability = 0.73, Count = 16
ITerminalNode -> tnode.getSymbol: Probability = 0.18, Count = 4
ITerminalNode -> ==ttype: Probability = 0.09, Count = 2
tnode -> tnode: Probability = 1.00, Count = 6
m_offset -> _offset: Probability = 1.00, Count = 1
m_fontIndex -> _fontIndex: Probability = 1.00, Count = 1
IncrementOpen -> incrementOpen: Probability = 1.00, Count = 1
useCnt.IncrementAndGet -> useCnt.incrementAndGet: Probability = 1.00, Count = 1
OneMerge -> OneMerge: Probability = 1.00, Count = 2
IList<SegmentCommitInfo> -> List<SegmentCommitInfo>: Probability = 1.00, Count = 1
include -> include: Probability = 1.00, Count = 3
info -> info: Probability = 0.80, Count = 4
info -> FuzzySet.createSetBasedOnQuality: Probability = 0.20, Count = 1
AssociateWebsiteCertificateAuthorityResponse -> AssociateWebsiteCertificateAuthorityResult: Probability = 1.00, Count = 1
AssociateWebsiteCertificateAuthority -> associateWebsiteCertificateAuthority: Probability = 1.00, Count = 1
AssociateWebsiteCertificateAuthorityRequest -> AssociateWebsiteCertificateAuthorityRequest: Probability = 1.00, Count = 1
Invoke<AssociateWebsiteCertificateAuthorityResponse> -> executeAssociateWebsiteCertificateAuthority: Probability = 1.00, Count = 1
vpnGatewayId, -> vpnGatewayId,: Probability = 1.00, Count = 2
OnUpdate -> onUpdate: Probability = 1.00, Count = 1
DocumentsWriterFlushControl -> DocumentsWriterFlushControl: Probability = 1.00, Count = 1
control, -> control,: Probability = 0.75, Count = 3
control, -> onInsert: Probability = 0.25, Count = 1
ThreadState -> ThreadState: Probability = 1.00, Count = 2
OnDelete -> onDelete: Probability = 1.00, Count = 1
UpdateComponentResponse -> UpdateComponentResult: Probability = 1.00, Count = 1
UpdateComponent -> updateComponent: Probability = 1.00, Count = 1
UpdateComponentRequest -> UpdateComponentRequest: Probability = 1.00, Count = 1
Invoke<UpdateComponentResponse> -> executeUpdateComponent: Probability = 1.00, Count = 1
DeleteDashboardResponse -> DeleteDashboardResult: Probability = 1.00, Count = 1
DeleteDashboard -> deleteDashboard: Probability = 1.00, Count = 1
DeleteDashboardRequest -> DeleteDashboardRequest: Probability = 1.00, Count = 1
Invoke<DeleteDashboardResponse> -> executeDeleteDashboard: Probability = 1.00, Count = 1
freeByteBlocks[freeBlocks] -> freeByteBlocks[freeBlocks]: Probability = 1.00, Count = 1
DisableLoggingResponse -> DisableLoggingResult: Probability = 1.00, Count = 1
DisableLogging -> disableLogging: Probability = 1.00, Count = 1
DisableLoggingRequest -> DisableLoggingRequest: Probability = 1.00, Count = 1
Invoke<DisableLoggingResponse> -> executeDisableLogging: Probability = 1.00, Count = 1
CJKWidthFilter -> CJKWidthFilter: Probability = 1.00, Count = 2
startOffset, -> startOffset,: Probability = 1.00, Count = 3
firstSize -> INT_BLOCK_MASK: Probability = 0.20, Count = 2
firstSize -> firstSize: Probability = 0.20, Count = 2
firstSize -> IntBlockPool.LEVEL_SIZE_ARRAY[0]: Probability = 0.10, Count = 1
firstSize -> upto+firstSize-1: Probability = 0.10, Count = 1
firstSize -> ByteBlockPool.LEVEL_SIZE_ARRAY[0]: Probability = 0.10, Count = 1
firstSize -> startIndex+firstSize: Probability = 0.10, Count = 1
firstSize -> elselimit: Probability = 0.10, Count = 1
firstSize -> upto+firstSize-4: Probability = 0.10, Count = 1
offsets.RamBytesUsed -> Long.BYTES+: Probability = 0.33, Count = 2
offsets.RamBytesUsed -> RamUsageEstimator.NUM_BYTES_OBJECT_REF: Probability = 0.33, Count = 2
offsets.RamBytesUsed -> RamUsageEstimator.NUM_BYTES_OBJECT_REF+: Probability = 0.17, Count = 1
offsets.RamBytesUsed -> values.bytes: Probability = 0.17, Count = 1
PutItem -> PutItemOutcome: Probability = 0.20, Count = 1
PutItem -> putItem: Probability = 0.20, Count = 1
PutItem -> item: Probability = 0.40, Count = 2
PutItem -> putItemDelegate.putItem: Probability = 0.20, Count = 1
Document -> Item: Probability = 0.50, Count = 1
Document -> Document: Probability = 0.50, Count = 1
MaxChange -> getMaxChange: Probability = 1.00, Count = 2
"[/DELTA]\n" -> "[/DELTA]\n": Probability = 1.00, Count = 1
StartFaceDetectionResponse -> StartFaceDetectionResult: Probability = 1.00, Count = 1
StartFaceDetection -> startFaceDetection: Probability = 1.00, Count = 1
StartFaceDetectionRequest -> StartFaceDetectionRequest: Probability = 1.00, Count = 1
Invoke<StartFaceDetectionResponse> -> executeStartFaceDetection: Probability = 1.00, Count = 1
IDataValidation -> DataValidation: Probability = 1.00, Count = 1
CreateValidation -> createValidation: Probability = 1.00, Count = 1
constraint, -> constraint,: Probability = 1.00, Count = 1
cellRangeAddressList -> cellRangeAddressList: Probability = 1.00, Count = 1
HSSFDataValidation -> HSSFDataValidation: Probability = 1.00, Count = 2
cellRangeAddressList, -> cellRangeAddressList,: Probability = 1.00, Count = 1
constraint -> constraint: Probability = 1.00, Count = 3
DocumentStoredFieldVisitor -> DocumentStoredFieldVisitor: Probability = 1.00, Count = 3
ISet<string> -> Set<String>: Probability = 1.00, Count = 6
fieldsToAdd -> fieldsToAdd: Probability = 1.00, Count = 3
this.fieldsToAdd -> this.fieldsToAdd: Probability = 1.00, Count = 2
HunspellStemFilter -> HunspellStemFilter: Probability = 1.00, Count = 2
tokenStream, -> tokenStream,: Probability = 1.00, Count = 2
longestOnly -> longestOnly: Probability = 1.00, Count = 5
GetRepository -> getRepository: Probability = 1.00, Count = 4
DeleteMLModelResponse -> DeleteMLModelResult: Probability = 1.00, Count = 1
DeleteMLModel -> deleteMLModel: Probability = 1.00, Count = 1
DeleteMLModelRequest -> DeleteMLModelRequest: Probability = 1.00, Count = 1
Invoke<DeleteMLModelResponse> -> executeDeleteMLModel: Probability = 1.00, Count = 1
GetAccountLimitResponse -> GetAccountLimitResult: Probability = 1.00, Count = 1
GetAccountLimit -> getAccountLimit: Probability = 1.00, Count = 1
GetAccountLimitRequest -> GetAccountLimitRequest: Probability = 1.00, Count = 1
Invoke<GetAccountLimitResponse> -> executeGetAccountLimit: Probability = 1.00, Count = 1
value_Renamed -> value: Probability = 1.00, Count = 2
ModifyClientVpnEndpointResponse -> ModifyClientVpnEndpointResult: Probability = 1.00, Count = 1
ModifyClientVpnEndpoint -> modifyClientVpnEndpoint: Probability = 1.00, Count = 1
ModifyClientVpnEndpointRequest -> ModifyClientVpnEndpointRequest: Probability = 1.00, Count = 1
Invoke<ModifyClientVpnEndpointResponse> -> executeModifyClientVpnEndpoint: Probability = 1.00, Count = 1
ContainsRow -> containsRow: Probability = 1.00, Count = 1
_firstRow -> _firstRow: Probability = 1.00, Count = 3
_lastRow -> _lastRow: Probability = 1.00, Count = 2
delegate1.Available -> remainingBytes: Probability = 1.00, Count = 1
RequestEnvironmentInfoRequest -> RequestEnvironmentInfoRequest: Probability = 1.00, Count = 1
EnvironmentInfoType -> EnvironmentInfoType: Probability = 0.50, Count = 1
EnvironmentInfoType -> infoType: Probability = 0.50, Count = 1
infoType -> ): Probability = 0.75, Count = 3
infoType -> setInfoType: Probability = 0.25, Count = 1
_infoType -> infoType.toString: Probability = 1.00, Count = 1
ResetDBClusterParameterGroupResponse -> ResetDBClusterParameterGroupResult: Probability = 1.00, Count = 1
ResetDBClusterParameterGroup -> resetDBClusterParameterGroup: Probability = 1.00, Count = 1
ResetDBClusterParameterGroupRequest -> ResetDBClusterParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<ResetDBClusterParameterGroupResponse> -> executeResetDBClusterParameterGroup: Probability = 1.00, Count = 1
UnwriteProtectWorkbook -> unwriteProtectWorkbook: Probability = 1.00, Count = 1
this.workbook.UnwriteProtectWorkbook -> this.workbook.unwriteProtectWorkbook: Probability = 1.00, Count = 1
AntlrInputStream -> ANTLRInputStream: Probability = 1.00, Count = 1
input.ToCharArray -> input.toCharArray: Probability = 1.00, Count = 1
input.Length -> input.length: Probability = 0.88, Count = 7
input.Length -> i<input.length: Probability = 0.12, Count = 1
ReplaceIamInstanceProfileAssociationResponse -> ReplaceIamInstanceProfileAssociationResult: Probability = 1.00, Count = 1
ReplaceIamInstanceProfileAssociation -> replaceIamInstanceProfileAssociation: Probability = 1.00, Count = 1
ReplaceIamInstanceProfileAssociationRequest -> ReplaceIamInstanceProfileAssociationRequest: Probability = 1.00, Count = 1
Invoke<ReplaceIamInstanceProfileAssociationResponse> -> executeReplaceIamInstanceProfileAssociation: Probability = 1.00, Count = 1
Expression -> Expression: Probability = 1.00, Count = 1
Ref3DPtg -> Ref3DPtg: Probability = 0.80, Count = 8
Ref3DPtg -> r3p: Probability = 0.20, Count = 2
cr, -> c,: Probability = 0.20, Count = 1
cr, -> areaRef,: Probability = 0.40, Count = 2
cr, -> cr,: Probability = 0.40, Count = 2
externIdx -> externIdx: Probability = 0.67, Count = 6
externIdx -> setExternSheetIndex: Probability = 0.33, Count = 3
ReadUShort -> readUShort: Probability = 1.00, Count = 3
ch2 -> buf: Probability = 1.00, Count = 5
ch1 -> byte[LittleEndianConsts.SHORT_SIZE]: Probability = 0.25, Count = 1
ch1 -> buf: Probability = 0.25, Count = 1
ch1 -> ch1: Probability = 0.50, Count = 2
RemoveCase -> removeCase: Probability = 1.00, Count = 2
GetNearestSetSize -> getNearestSetSize: Probability = 0.20, Count = 1
GetNearestSetSize -> int: Probability = 0.40, Count = 2
GetNearestSetSize -> setSize=getNearestSetSize: Probability = 0.40, Count = 2
maxNumberOfBits -> maxNumberOfBits: Probability = 1.00, Count = 1
_usableBitSetSizes[0] -> result=usableBitSetSizes[0]: Probability = 1.00, Count = 1
"AbbreviatedObjectId[" -> "AbbreviatedObjectId[": Probability = 1.00, Count = 1
ListFacesRequest -> ListFacesRequest: Probability = 1.00, Count = 1
"ListFaces", -> "ListFaces",: Probability = 1.00, Count = 1
this.bytes -> this.bytes: Probability = 1.00, Count = 6
byte[capacity] -> byte[capacity]: Probability = 1.00, Count = 1
DescribeFargateProfileResponse -> DescribeFargateProfileResult: Probability = 1.00, Count = 1
DescribeFargateProfile -> describeFargateProfile: Probability = 1.00, Count = 1
DescribeFargateProfileRequest -> DescribeFargateProfileRequest: Probability = 1.00, Count = 1
Invoke<DescribeFargateProfileResponse> -> executeDescribeFargateProfile: Probability = 1.00, Count = 1
GetOpenIdTokenForDeveloperIdentityResponse -> GetOpenIdTokenForDeveloperIdentityResult: Probability = 1.00, Count = 1
GetOpenIdTokenForDeveloperIdentity -> getOpenIdTokenForDeveloperIdentity: Probability = 1.00, Count = 1
GetOpenIdTokenForDeveloperIdentityRequest -> GetOpenIdTokenForDeveloperIdentityRequest: Probability = 1.00, Count = 1
Invoke<GetOpenIdTokenForDeveloperIdentityResponse> -> executeGetOpenIdTokenForDeveloperIdentity: Probability = 1.00, Count = 1
CountBytesWritten -> countBytesWritten: Probability = 1.00, Count = 1
_countBytesWritten -> _countBytesWritten: Probability = 1.00, Count = 2
ContainsAll -> containsAll: Probability = 1.00, Count = 1
c._limit -> c._limit: Probability = 0.78, Count = 7
c._limit -> c._array,: Probability = 0.11, Count = 1
c._limit -> _limit,: Probability = 0.11, Count = 1
c._array[j] -> c._array[: Probability = 1.00, Count = 2
SetTreeFilter -> setTreeFilter: Probability = 1.00, Count = 1
treeFilter -> treeFilter: Probability = 1.00, Count = 1
TreeFilter.ALL -> TreeFilter.ALL: Probability = 1.00, Count = 2
PromoteReadReplicaResponse -> DBInstance: Probability = 1.00, Count = 1
PromoteReadReplica -> promoteReadReplica: Probability = 1.00, Count = 1
PromoteReadReplicaRequest -> PromoteReadReplicaRequest: Probability = 1.00, Count = 1
Invoke<PromoteReadReplicaResponse> -> executePromoteReadReplica: Probability = 1.00, Count = 1
AttachClassicLinkVpcResponse -> AttachClassicLinkVpcResult: Probability = 1.00, Count = 1
AttachClassicLinkVpc -> attachClassicLinkVpc: Probability = 1.00, Count = 1
AttachClassicLinkVpcRequest -> AttachClassicLinkVpcRequest: Probability = 1.00, Count = 1
Invoke<AttachClassicLinkVpcResponse> -> executeAttachClassicLinkVpc: Probability = 1.00, Count = 1
ByteArrayDataOutput -> ByteArrayDataOutput: Probability = 1.00, Count = 2
BytesRef.EMPTY_BYTES -> BytesRef.EMPTY_BYTES: Probability = 1.00, Count = 2
Balance -> balance: Probability = 1.00, Count = 2
char[n] -> char[n]: Probability = 1.00, Count = 2
iter -> iter: Probability = 1.00, Count = 7
MultiPhraseQueryNode -> MultiPhraseQueryNode: Probability = 1.00, Count = 1
PublishRequest -> PublishRequest: Probability = 1.00, Count = 2
topicArn, -> topicArn,: Probability = 1.00, Count = 6
subject -> subject: Probability = 1.00, Count = 3
_message -> setMessage: Probability = 1.00, Count = 3
_subject -> setSubject: Probability = 1.00, Count = 2
SendCommandResponse -> SendCommandResult: Probability = 1.00, Count = 1
SendCommand -> sendCommand: Probability = 1.00, Count = 1
SendCommandRequest -> SendCommandRequest: Probability = 1.00, Count = 1
Invoke<SendCommandResponse> -> executeSendCommand: Probability = 1.00, Count = 1
ListDeploymentInstancesResponse -> ListDeploymentInstancesResult: Probability = 1.00, Count = 1
ListDeploymentInstances -> listDeploymentInstances: Probability = 1.00, Count = 1
ListDeploymentInstancesRequest -> ListDeploymentInstancesRequest: Probability = 1.00, Count = 1
Invoke<ListDeploymentInstancesResponse> -> executeListDeploymentInstances: Probability = 1.00, Count = 1
c.iterator -> .iterator: Probability = 0.50, Count = 1
c.iterator -> c.iterator: Probability = 0.50, Count = 1
readCapacityUnits, -> Long: Probability = 0.67, Count = 2
readCapacityUnits, -> readCapacityUnits,: Probability = 0.33, Count = 1
writeCapacityUnits -> writeCapacityUnits: Probability = 1.00, Count = 2
_readCapacityUnits -> setReadCapacityUnits: Probability = 1.00, Count = 1
readCapacityUnits -> readCapacityUnits: Probability = 1.00, Count = 1
_writeCapacityUnits -> setWriteCapacityUnits: Probability = 1.00, Count = 1
DeprovisionByoipCidrResponse -> DeprovisionByoipCidrResult: Probability = 1.00, Count = 1
DeprovisionByoipCidr -> deprovisionByoipCidr: Probability = 1.00, Count = 1
DeprovisionByoipCidrRequest -> DeprovisionByoipCidrRequest: Probability = 1.00, Count = 1
Invoke<DeprovisionByoipCidrResponse> -> executeDeprovisionByoipCidr: Probability = 1.00, Count = 1
IsDone -> isDone: Probability = 1.00, Count = 1
pathRaw.Length -> pathRaw.length: Probability = 1.00, Count = 1
walker.GetPathLength -> walker.getPathLength: Probability = 1.00, Count = 1
BuildExtensionField -> buildExtensionField: Probability = 1.00, Count = 3
extensionKey, -> extensionKey,: Probability = 1.00, Count = 2
builder.Append -> builder.append: Probability = 1.00, Count = 3
builder.ToString -> builder.toString: Probability = 1.00, Count = 2
Loc -> Loc: Probability = 1.00, Count = 4
_bookSheetColumn -> _bookSheetColumn: Probability = 1.00, Count = 2
other._bookSheetColumn -> other._bookSheetColumn: Probability = 1.00, Count = 1
_rowIndex -> _rowIndex: Probability = 1.00, Count = 5
other._rowIndex -> other._rowIndex: Probability = 1.00, Count = 2
DeleteDeploymentConfigResponse -> DeleteDeploymentConfigResult: Probability = 1.00, Count = 1
DeleteDeploymentConfig -> deleteDeploymentConfig: Probability = 1.00, Count = 1
DeleteDeploymentConfigRequest -> DeleteDeploymentConfigRequest: Probability = 1.00, Count = 1
Invoke<DeleteDeploymentConfigResponse> -> executeDeleteDeploymentConfig: Probability = 1.00, Count = 1
StartQueryExecutionResponse -> StartQueryExecutionResult: Probability = 1.00, Count = 1
StartQueryExecution -> startQueryExecution: Probability = 1.00, Count = 1
StartQueryExecutionRequest -> StartQueryExecutionRequest: Probability = 1.00, Count = 1
Invoke<StartQueryExecutionResponse> -> executeStartQueryExecution: Probability = 1.00, Count = 1
GetRepoListRequest -> GetRepoListRequest: Probability = 1.00, Count = 1
"GetRepoList", -> "GetRepoList",: Probability = 1.00, Count = 1
"/repos" -> "/repos": Probability = 1.00, Count = 1
CreateDistributionResponse -> CreateDistributionResult: Probability = 1.00, Count = 1
CreateDistribution -> createDistribution: Probability = 1.00, Count = 1
Invoke<CreateDistributionResponse> -> executeCreateDistribution: Probability = 1.00, Count = 1
LongField -> LongField: Probability = 1.00, Count = 2
offset: -> offset:: Probability = 1.00, Count = 2
Flag -> flag: Probability = 1.00, Count = 6
NextFinalOutput -> bytesPerArc: Probability = 1.00, Count = 3
BytesPerArc -> arcIdx: Probability = 0.50, Count = 2
BytesPerArc -> numArcs: Probability = 0.50, Count = 2
GetRefCount -> getRefCount: Probability = 1.00, Count = 1
ReadInt -> readInt: Probability = 1.00, Count = 2
BatchCreateAttendeeResponse -> BatchCreateAttendeeResult: Probability = 1.00, Count = 1
BatchCreateAttendee -> batchCreateAttendee: Probability = 1.00, Count = 1
BatchCreateAttendeeRequest -> BatchCreateAttendeeRequest: Probability = 1.00, Count = 1
Invoke<BatchCreateAttendeeResponse> -> executeBatchCreateAttendee: Probability = 1.00, Count = 1
DetachInstancesFromLoadBalancerResponse -> DetachInstancesFromLoadBalancerResult: Probability = 1.00, Count = 1
DetachInstancesFromLoadBalancer -> detachInstancesFromLoadBalancer: Probability = 1.00, Count = 1
DetachInstancesFromLoadBalancerRequest -> DetachInstancesFromLoadBalancerRequest: Probability = 1.00, Count = 1
Invoke<DetachInstancesFromLoadBalancerResponse> -> executeDetachInstancesFromLoadBalancer: Probability = 1.00, Count = 1
GetSourceStart -> getSourceStart: Probability = 1.00, Count = 1
currentSource.regionList.sourceStart -> outRegion.sourceStart: Probability = 1.00, Count = 1
"<boolean -> "<boolean: Probability = 1.00, Count = 4
child.ToString -> child.toString: Probability = 1.00, Count = 4
"\n</boolean>" -> "\n</boolean>": Probability = 1.00, Count = 2
GetPartOfSpeech -> getPartOfSpeech: Probability = 1.00, Count = 2
GetFeature -> getFeature: Probability = 1.00, Count = 2
wordId, -> wordId,: Probability = 1.00, Count = 8
BatchWriteResponse -> BatchWriteResult: Probability = 1.00, Count = 1
BatchWrite -> batchWrite: Probability = 1.00, Count = 1
BatchWriteRequest -> BatchWriteRequest: Probability = 1.00, Count = 1
Invoke<BatchWriteResponse> -> executeBatchWrite: Probability = 1.00, Count = 1
ConfirmTransitVirtualInterfaceResponse -> ConfirmTransitVirtualInterfaceResult: Probability = 1.00, Count = 1
ConfirmTransitVirtualInterface -> confirmTransitVirtualInterface: Probability = 1.00, Count = 1
ConfirmTransitVirtualInterfaceRequest -> ConfirmTransitVirtualInterfaceRequest: Probability = 1.00, Count = 1
Invoke<ConfirmTransitVirtualInterfaceResponse> -> executeConfirmTransitVirtualInterface: Probability = 1.00, Count = 1
GetFileUploadURLResponse -> GetFileUploadURLResult: Probability = 1.00, Count = 1
GetFileUploadURL -> getFileUploadURL: Probability = 1.00, Count = 1
GetFileUploadURLRequest -> GetFileUploadURLRequest: Probability = 1.00, Count = 1
Invoke<GetFileUploadURLResponse> -> executeGetFileUploadURL: Probability = 1.00, Count = 1
KeywordRepeatFilter -> KeywordRepeatFilter: Probability = 1.00, Count = 1
StartWorkspacesResponse -> StartWorkspacesResult: Probability = 1.00, Count = 1
StartWorkspaces -> startWorkspaces: Probability = 1.00, Count = 1
StartWorkspacesRequest -> StartWorkspacesRequest: Probability = 1.00, Count = 1
Invoke<StartWorkspacesResponse> -> executeStartWorkspaces: Probability = 1.00, Count = 1
GetDeltaCacheLimit -> getDeltaCacheLimit: Probability = 1.00, Count = 1
RebootJumpserverRequest -> RebootJumpserverRequest: Probability = 1.00, Count = 1
"RebootJumpserver" -> "RebootJumpserver",: Probability = 1.00, Count = 1
GetResultEnd -> getResultEnd: Probability = 1.00, Count = 1
Region -> Region: Probability = 1.00, Count = 2
currentSource.regionList -> outRegion: Probability = 1.00, Count = 2
r.resultStart -> r.resultStart: Probability = 1.00, Count = 1
r.length -> r.length: Probability = 1.00, Count = 2
CreateLagResponse -> CreateLagResult: Probability = 1.00, Count = 1
CreateLag -> createLag: Probability = 1.00, Count = 1
CreateLagRequest -> CreateLagRequest: Probability = 1.00, Count = 1
Invoke<CreateLagResponse> -> executeCreateLag: Probability = 1.00, Count = 1
MergeChunk.ConflictState -> ConflictState: Probability = 1.00, Count = 1
GetConflictState -> getConflictState: Probability = 1.00, Count = 1
conflictState -> conflictState: Probability = 1.00, Count = 1
UpdateRelationalDatabaseResponse -> UpdateRelationalDatabaseResult: Probability = 1.00, Count = 1
UpdateRelationalDatabase -> updateRelationalDatabase: Probability = 1.00, Count = 1
UpdateRelationalDatabaseRequest -> UpdateRelationalDatabaseRequest: Probability = 1.00, Count = 1
Invoke<UpdateRelationalDatabaseResponse> -> executeUpdateRelationalDatabase: Probability = 1.00, Count = 1
lowerEntry -> lowerEntry: Probability = 1.00, Count = 1
java.util.TreeMap.Relation.LOWER -> LOWER: Probability = 1.00, Count = 2
ExternalNameRecord -> ExternalNameRecord: Probability = 1.00, Count = 4
field_2_ixals -> field_2_ixals: Probability = 1.00, Count = 3
StemPrefix -> stemPrefix: Probability = 1.00, Count = 2
StemSuffix -> stemSuffix: Probability = 1.00, Count = 2
IllegalFormatFlagsException -> IllegalFormatFlagsException: Probability = 1.00, Count = 1
CapitalizationFilter -> CapitalizationFilter: Probability = 1.00, Count = 2
keep, -> onlyFirstWord,: Probability = 1.00, Count = 1
forceFirstLetter, -> keep,forceFirstLetter,: Probability = 1.00, Count = 1
okPrefix, -> okPrefix,: Probability = 1.00, Count = 1
minWordLength, -> minWordLength,: Probability = 1.00, Count = 1
maxWordCount, -> maxWordCount,: Probability = 1.00, Count = 1
culture -> maxTokenLength: Probability = 1.00, Count = 1
GetAppliedSchemaVersionResponse -> GetAppliedSchemaVersionResult: Probability = 1.00, Count = 1
GetAppliedSchemaVersion -> getAppliedSchemaVersion: Probability = 1.00, Count = 1
GetAppliedSchemaVersionRequest -> GetAppliedSchemaVersionRequest: Probability = 1.00, Count = 1
Invoke<GetAppliedSchemaVersionResponse> -> executeGetAppliedSchemaVersion: Probability = 1.00, Count = 1
DescribeLabelingJobResponse -> DescribeLabelingJobResult: Probability = 1.00, Count = 1
DescribeLabelingJob -> describeLabelingJob: Probability = 1.00, Count = 1
DescribeLabelingJobRequest -> DescribeLabelingJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeLabelingJobResponse> -> executeDescribeLabelingJob: Probability = 1.00, Count = 1
DeleteAttendeeResponse -> DeleteAttendeeResult: Probability = 1.00, Count = 1
DeleteAttendee -> deleteAttendee: Probability = 1.00, Count = 1
DeleteAttendeeRequest -> DeleteAttendeeRequest: Probability = 1.00, Count = 1
Invoke<DeleteAttendeeResponse> -> executeDeleteAttendee: Probability = 1.00, Count = 1
ruleNames -> ruleNames: Probability = 0.75, Count = 9
ruleNames -> getNodeText: Probability = 0.25, Count = 3
ruleNames, -> ruleNames,: Probability = 1.00, Count = 1
RejectAssignmentResponse -> RejectAssignmentResult: Probability = 1.00, Count = 1
RejectAssignment -> rejectAssignment: Probability = 1.00, Count = 1
RejectAssignmentRequest -> RejectAssignmentRequest: Probability = 1.00, Count = 1
Invoke<RejectAssignmentResponse> -> executeRejectAssignment: Probability = 1.00, Count = 1
UnsubscribeFromEventResponse -> UnsubscribeFromEventResult: Probability = 1.00, Count = 1
UnsubscribeFromEvent -> unsubscribeFromEvent: Probability = 1.00, Count = 1
UnsubscribeFromEventRequest -> UnsubscribeFromEventRequest: Probability = 1.00, Count = 1
Invoke<UnsubscribeFromEventResponse> -> executeUnsubscribeFromEvent: Probability = 1.00, Count = 1
GetNextToken -> getNextToken: Probability = 1.00, Count = 2
format.Length -> format.length: Probability = 1.00, Count = 4
curChar -> subStart: Probability = 0.14, Count = 1
curChar -> curChar: Probability = 0.43, Count = 3
curChar -> format.charAt: Probability = 0.43, Count = 3
++pos -> ++pos: Probability = 1.00, Count = 4
WithId -> withId: Probability = 1.00, Count = 1
arearef, -> arearef,: Probability = 1.00, Count = 2
arearef -> AreaReference: Probability = 0.14, Count = 1
arearef -> arearef,: Probability = 0.29, Count = 2
arearef -> SpreadsheetVersion.EXCEL97: Probability = 0.14, Count = 1
arearef -> arearef: Probability = 0.29, Count = 2
arearef -> SpreadsheetVersion.EXCEL2007: Probability = 0.14, Count = 1
ExternSheetIndex=externIdx -> externIdx: Probability = 1.00, Count = 2
empty -> empty: Probability = 1.00, Count = 2
DeleteMemberResponse -> DeleteMemberResult: Probability = 1.00, Count = 1
DeleteMember -> deleteMember: Probability = 1.00, Count = 1
DeleteMemberRequest -> DeleteMemberRequest: Probability = 1.00, Count = 1
Invoke<DeleteMemberResponse> -> executeDeleteMember: Probability = 1.00, Count = 1
DeleteRepositoryResponse -> DeleteRepositoryResult: Probability = 1.00, Count = 1
DeleteRepository -> deleteRepository: Probability = 1.00, Count = 1
DeleteRepositoryRequest -> DeleteRepositoryRequest: Probability = 1.00, Count = 1
Invoke<DeleteRepositoryResponse> -> executeDeleteRepository: Probability = 1.00, Count = 1
GetChangeResponse -> GetChangeResult: Probability = 1.00, Count = 1
GetChange -> getChange: Probability = 1.00, Count = 1
GetChangeRequest -> GetChangeRequest: Probability = 1.00, Count = 3
Invoke<GetChangeResponse> -> executeGetChange: Probability = 1.00, Count = 1
byName.Values.ToArray -> output.toBufferList: Probability = 1.00, Count = 1
java.nio.LongToByteBufferAdapter -> LongToByteBufferAdapter: Probability = 1.00, Count = 5
StyleRecord -> StyleRecord: Probability = 1.00, Count = 1
field_1_xf_index -> field_1_xf_index: Probability = 1.00, Count = 5
isBuiltinFlag.Set -> isBuiltinFlag.set: Probability = 1.00, Count = 2
NGit.AbbreviatedObjectId -> AbbreviatedObjectId: Probability = 0.67, Count = 6
NGit.AbbreviatedObjectId -> final: Probability = 0.33, Count = 3
GetExFormatAt -> getExFormatAt: Probability = 1.00, Count = 1
xfptr -> xfptr: Probability = 1.00, Count = 5
records.Xfpos -> records.getXfpos: Probability = 1.00, Count = 4
numxfs -> numxfs: Probability = 1.00, Count = 2
records[xfptr] -> records.get: Probability = 1.00, Count = 1
Resource -> Resource: Probability = 1.00, Count = 1
resource -> resource: Probability = 1.00, Count = 4
this.resource -> this.resource: Probability = 1.00, Count = 1
UpdateTypedLinkFacetResponse -> UpdateTypedLinkFacetResult: Probability = 1.00, Count = 1
UpdateTypedLinkFacet -> updateTypedLinkFacet: Probability = 1.00, Count = 1
UpdateTypedLinkFacetRequest -> UpdateTypedLinkFacetRequest: Probability = 1.00, Count = 1
Invoke<UpdateTypedLinkFacetResponse> -> executeUpdateTypedLinkFacet: Probability = 1.00, Count = 1
higher -> higher: Probability = 1.00, Count = 1
backingMap.higherKey -> backingMap.higherKey: Probability = 1.00, Count = 1
ListReceiptFiltersResponse -> ListReceiptFiltersResult: Probability = 1.00, Count = 1
ListReceiptFilters -> listReceiptFilters: Probability = 1.00, Count = 1
ListReceiptFiltersRequest -> ListReceiptFiltersRequest: Probability = 1.00, Count = 1
Invoke<ListReceiptFiltersResponse> -> executeListReceiptFilters: Probability = 1.00, Count = 1
outputs -> outputs: Probability = 1.00, Count = 8
CharsRef[1] -> CharsRefBuilder[1]: Probability = 1.00, Count = 1
endOffsets -> endOffsets: Probability = 1.00, Count = 1
posLengths -> posLengths: Probability = 1.00, Count = 1
GetExcelDate -> getExcelDate: Probability = 0.75, Count = 9
GetExcelDate -> LocalDateTime: Probability = 0.17, Count = 2
GetExcelDate -> LocalDate: Probability = 0.08, Count = 1
use1904windowing -> use1904windowing: Probability = 0.42, Count = 8
use1904windowing -> calStart: Probability = 0.05, Count = 1
use1904windowing -> calStart.setTime: Probability = 0.05, Count = 1
use1904windowing -> dayOfYear,: Probability = 0.16, Count = 3
use1904windowing -> hour,: Probability = 0.16, Count = 3
use1904windowing -> int: Probability = 0.11, Count = 2
use1904windowing -> date.getYear: Probability = 0.05, Count = 1
date -> date: Probability = 1.00, Count = 10
startdate -> int: Probability = 0.30, Count = 16
startdate -> calStart.get: Probability = 0.11, Count = 6
startdate -> dayOfYear: Probability = 0.06, Count = 3
startdate -> Calendar.DAY_OF_YEAR: Probability = 0.04, Count = 2
startdate -> hour: Probability = 0.06, Count = 3
startdate -> Calendar.HOUR_OF_DAY: Probability = 0.04, Count = 2
startdate -> minute: Probability = 0.06, Count = 3
startdate -> second: Probability = 0.06, Count = 3
startdate -> Calendar.SECOND: Probability = 0.04, Count = 2
startdate -> milliSecond: Probability = 0.06, Count = 3
startdate -> date.get: Probability = 0.11, Count = 6
startdate -> date.getDayOfYear: Probability = 0.02, Count = 1
startdate -> date.getHour: Probability = 0.02, Count = 1
startdate -> date.getMinute: Probability = 0.02, Count = 1
startdate -> date.getSecond: Probability = 0.02, Count = 1
value++ -> internalGetExcelDate: Probability = 0.50, Count = 3
value++ -> year,: Probability = 0.50, Count = 3
value-- -> minute,: Probability = 0.33, Count = 3
value-- -> second,: Probability = 0.33, Count = 3
value-- -> milliSecond,: Probability = 0.33, Count = 3
nIncomingArgs -> nIncomingArgs: Probability = 1.00, Count = 3
argument -> argument: Probability = 1.00, Count = 3
nameArg -> nameArg: Probability = 1.00, Count = 3
nOutGoingArgs -> nOutGoingArgs: Probability = 1.00, Count = 2
outGoingArgs, -> outGoingArgs,: Probability = 1.00, Count = 2
DescribeVpcClassicLinkResponse -> DescribeVpcClassicLinkResult: Probability = 1.00, Count = 1
DescribeVpcClassicLink -> describeVpcClassicLink: Probability = 1.00, Count = 1
DescribeVpcClassicLinkRequest -> DescribeVpcClassicLinkRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpcClassicLinkResponse> -> executeDescribeVpcClassicLink: Probability = 1.00, Count = 1
use -> use: Probability = 1.00, Count = 8
RevSort.TOPO -> RevSort.TOPO: Probability = 1.00, Count = 1
!use -> !use: Probability = 1.00, Count = 1
.topologicalSortRequired -> .topologicalSortRequired: Probability = 1.00, Count = 1
base.Sort -> super.sort: Probability = 0.67, Count = 2
base.Sort -> RevSort.TOPO,: Probability = 0.33, Count = 1
delete0 -> delete0: Probability = 1.00, Count = 2
rawMode -> isModeDifferent: Probability = 0.14, Count = 1
rawMode -> rawMode: Probability = 0.43, Count = 3
rawMode -> getEntryRawMode: Probability = 0.14, Count = 1
rawMode -> .getSymLinks: Probability = 0.14, Count = 1
rawMode -> SymLinks.FALSE: Probability = 0.14, Count = 1
modeDiff -> modeDiff: Probability = 0.67, Count = 4
modeDiff -> !state.options.isFileMode: Probability = 0.17, Count = 1
modeDiff -> ~FileMode.EXECUTABLE_FILE.getBits: Probability = 0.17, Count = 1
DescribeReservedInstancesModificationsResponse -> DescribeReservedInstancesModificationsResult: Probability = 1.00, Count = 2
DescribeReservedInstancesModifications -> describeReservedInstancesModifications: Probability = 1.00, Count = 3
DescribeReservedInstancesModificationsRequest -> DescribeReservedInstancesModificationsRequest: Probability = 1.00, Count = 2
Invoke<DescribeReservedInstancesModificationsResponse> -> executeDescribeReservedInstancesModifications: Probability = 1.00, Count = 1
AddSourceIdentifierToSubscriptionResponse -> EventSubscription: Probability = 1.00, Count = 1
AddSourceIdentifierToSubscription -> addSourceIdentifierToSubscription: Probability = 1.00, Count = 1
AddSourceIdentifierToSubscriptionRequest -> AddSourceIdentifierToSubscriptionRequest: Probability = 1.00, Count = 1
Invoke<AddSourceIdentifierToSubscriptionResponse> -> executeAddSourceIdentifierToSubscription: Probability = 1.00, Count = 1
PagedBytesDataOutput -> PagedBytesDataOutput: Probability = 1.00, Count = 2
GetDataOutput -> getDataOutput: Probability = 1.00, Count = 1
DataOutput -> DataOutput: Probability = 0.83, Count = 5
DataOutput -> IndexOutput: Probability = 0.17, Count = 1
RemoveURI -> removeURI: Probability = 1.00, Count = 1
toRemove -> toRemove: Probability = 0.57, Count = 4
toRemove -> _record.getColumn: Probability = 0.14, Count = 1
toRemove -> link.getFirstRow: Probability = 0.14, Count = 1
toRemove -> _record.getRow: Probability = 0.14, Count = 1
uris.Remove -> uris.remove: Probability = 1.00, Count = 1
DescribeGameServerResponse -> DescribeGameServerResult: Probability = 1.00, Count = 1
DescribeGameServer -> describeGameServer: Probability = 1.00, Count = 1
DescribeGameServerRequest -> DescribeGameServerRequest: Probability = 1.00, Count = 1
Invoke<DescribeGameServerResponse> -> executeDescribeGameServer: Probability = 1.00, Count = 1
this.next_Renamed -> pos: Probability = 0.50, Count = 1
this.next_Renamed -> keys.length: Probability = 0.50, Count = 1
displayName -> displayName: Probability = 0.57, Count = 4
displayName -> vocabulary.getDisplayName: Probability = 0.14, Count = 1
displayName -> displayName.equals: Probability = 0.14, Count = 1
displayName -> "<": Probability = 0.14, Count = 1
this.canonicalName -> this.canonicalName: Probability = 1.00, Count = 3
field_2_data -> _data: Probability = 1.00, Count = 7
jumpTable -> jumpTable: Probability = 1.00, Count = 2
_jumpTable -> _jumpTable: Probability = 1.00, Count = 3
_chooseFuncOffset -> _chooseFuncOffset: Probability = 1.00, Count = 3
DescribeTrafficMirrorFiltersResponse -> DescribeTrafficMirrorFiltersResult: Probability = 1.00, Count = 1
DescribeTrafficMirrorFilters -> describeTrafficMirrorFilters: Probability = 1.00, Count = 1
DescribeTrafficMirrorFiltersRequest -> DescribeTrafficMirrorFiltersRequest: Probability = 1.00, Count = 1
Invoke<DescribeTrafficMirrorFiltersResponse> -> executeDescribeTrafficMirrorFilters: Probability = 1.00, Count = 1
DescribeReservedNodeOfferingsResponse -> DescribeReservedNodeOfferingsResult: Probability = 1.00, Count = 2
DescribeReservedNodeOfferings -> describeReservedNodeOfferings: Probability = 1.00, Count = 3
DescribeReservedNodeOfferingsRequest -> DescribeReservedNodeOfferingsRequest: Probability = 1.00, Count = 2
CreateLogStreamRequest -> CreateLogStreamRequest: Probability = 1.00, Count = 1
DetachStaticIpResponse -> DetachStaticIpResult: Probability = 1.00, Count = 1
DetachStaticIp -> detachStaticIp: Probability = 1.00, Count = 1
DetachStaticIpRequest -> DetachStaticIpRequest: Probability = 1.00, Count = 1
Invoke<DetachStaticIpResponse> -> executeDetachStaticIp: Probability = 1.00, Count = 1
EMPTY_SET -> EMPTY_SET: Probability = 1.00, Count = 2
set.map -> set.map: Probability = 0.50, Count = 2
set.map -> CharArrayMap.UnmodifiableCharArrayMap: Probability = 0.25, Count = 1
set.map -> CharArrayMap.unmodifiableMap: Probability = 0.25, Count = 1
BatchDetectKeyPhrasesResponse -> BatchDetectKeyPhrasesResult: Probability = 1.00, Count = 1
BatchDetectKeyPhrases -> batchDetectKeyPhrases: Probability = 1.00, Count = 1
BatchDetectKeyPhrasesRequest -> BatchDetectKeyPhrasesRequest: Probability = 1.00, Count = 1
Invoke<BatchDetectKeyPhrasesResponse> -> executeBatchDetectKeyPhrases: Probability = 1.00, Count = 1
RemoveWordCount -> removeWordCount: Probability = 1.00, Count = 1
PropertyIDMap.PID_WORDCOUNT -> PropertyIDMap.PID_WORDCOUNT: Probability = 1.00, Count = 1
Antlr4.Runtime.Atn.SingletonPredictionContext -> SingletonPredictionContext: Probability = 0.50, Count = 3
Antlr4.Runtime.Atn.SingletonPredictionContext -> s.returnState: Probability = 0.17, Count = 1
Antlr4.Runtime.Atn.SingletonPredictionContext -> parent.equals: Probability = 0.17, Count = 1
Antlr4.Runtime.Atn.SingletonPredictionContext -> s.parent: Probability = 0.17, Count = 1
Sharpen.ResourceBundle -> ResourceBundle: Probability = 1.00, Count = 1
ResourceBundle -> resourceBundle: Probability = 1.00, Count = 1
resourceBundle -> resourceBundle: Probability = 1.00, Count = 1
stopTags -> stopTags: Probability = 1.00, Count = 2
JapanesePartOfSpeechStopFilter -> JapanesePartOfSpeechStopFilter: Probability = 1.00, Count = 1
GetBreaks -> getBreaks: Probability = 1.00, Count = 1
breakItem.main -> breakItem.main: Probability = 1.00, Count = 1
CreateEventSubscriptionResponse -> EventSubscription: Probability = 1.00, Count = 1
CreateEventSubscription -> createEventSubscription: Probability = 1.00, Count = 1
CreateEventSubscriptionRequest -> CreateEventSubscriptionRequest: Probability = 1.00, Count = 1
Invoke<CreateEventSubscriptionResponse> -> executeCreateEventSubscription: Probability = 1.00, Count = 1
dx1, -> dx1,: Probability = 1.00, Count = 9
dy1, -> dy1,: Probability = 1.00, Count = 9
dx2, -> dx2,: Probability = 1.00, Count = 5
dy2 -> dy2: Probability = 0.90, Count = 9
dy2 -> _isHorizontallyFlipped: Probability = 0.10, Count = 1
dx2 -> dx2: Probability = 1.00, Count = 6
Last -> last: Probability = 1.00, Count = 6
UpdateGcmChannelResponse -> UpdateGcmChannelResult: Probability = 1.00, Count = 1
UpdateGcmChannel -> updateGcmChannel: Probability = 1.00, Count = 1
UpdateGcmChannelRequest -> UpdateGcmChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateGcmChannelResponse> -> executeUpdateGcmChannel: Probability = 1.00, Count = 1
"XSSF-only -> "XSSF-only: Probability = 1.00, Count = 1
Ptg, -> Ptg,: Probability = 1.00, Count = 1
serialised" -> serialised": Probability = 1.00, Count = 1
PlacementGroup -> PlacementGroup: Probability = 1.00, Count = 1
SendCustomVerificationEmailResponse -> SendCustomVerificationEmailResult: Probability = 1.00, Count = 1
SendCustomVerificationEmail -> sendCustomVerificationEmail: Probability = 1.00, Count = 1
SendCustomVerificationEmailRequest -> SendCustomVerificationEmailRequest: Probability = 1.00, Count = 1
Invoke<SendCustomVerificationEmailResponse> -> executeSendCustomVerificationEmail: Probability = 1.00, Count = 1
"CreateCollection", -> "CreateCollection",: Probability = 1.00, Count = 1
"/collections" -> "/collections": Probability = 1.00, Count = 2
char.IsDigit -> Character.isDigit: Probability = 1.00, Count = 1
WSBool2 -> getWSBool1: Probability = 1.00, Count = 2
SubmitGenerateTaskRequest -> SubmitGenerateTaskRequest: Probability = 1.00, Count = 1
"SubmitGenerateTask", -> "SubmitGenerateTask",: Probability = 1.00, Count = 1
ceiling -> ceiling: Probability = 1.00, Count = 1
backingMap.ceilingKey -> backingMap.ceilingKey: Probability = 1.00, Count = 1
BatchApplyUpdateActionResponse -> BatchApplyUpdateActionResult: Probability = 1.00, Count = 1
BatchApplyUpdateAction -> batchApplyUpdateAction: Probability = 1.00, Count = 1
BatchApplyUpdateActionRequest -> BatchApplyUpdateActionRequest: Probability = 1.00, Count = 1
Invoke<BatchApplyUpdateActionResponse> -> executeBatchApplyUpdateAction: Probability = 1.00, Count = 1
NGit.Fnmatch.FileNameMatcher -> FileNameMatcher: Probability = 1.00, Count = 2
CreateMatcherForSuffix -> createMatcherForSuffix: Probability = 1.00, Count = 1
copyOfHeads -> copyOfHeads: Probability = 1.00, Count = 2
copyOfHeads, -> copyOfHeads.addAll: Probability = 1.00, Count = 1
heads -> heads: Probability = 1.00, Count = 3
IsEmptyOrNull -> isEmptyOrNull: Probability = 1.00, Count = 1
stringValue -> stringValue: Probability = 0.55, Count = 12
stringValue -> toBooleanOrNull: Probability = 0.05, Count = 1
stringValue -> "yes",: Probability = 0.05, Count = 1
stringValue -> "true",: Probability = 0.05, Count = 1
stringValue -> "1",: Probability = 0.05, Count = 1
stringValue -> "on",: Probability = 0.05, Count = 1
stringValue -> Boolean.TRUE: Probability = 0.05, Count = 1
stringValue -> "false",: Probability = 0.05, Count = 1
stringValue -> "0",: Probability = 0.05, Count = 1
stringValue -> "off",: Probability = 0.05, Count = 1
stringValue -> Boolean.FALSE: Probability = 0.05, Count = 1
stringValue.Length -> stringValue.length: Probability = 1.00, Count = 1
ModifySubnetAttributeResponse -> ModifySubnetAttributeResult: Probability = 1.00, Count = 1
ModifySubnetAttribute -> modifySubnetAttribute: Probability = 1.00, Count = 1
ModifySubnetAttributeRequest -> ModifySubnetAttributeRequest: Probability = 1.00, Count = 1
Invoke<ModifySubnetAttributeResponse> -> executeModifySubnetAttribute: Probability = 1.00, Count = 1
GetProxySessionResponse -> GetProxySessionResult: Probability = 1.00, Count = 1
GetProxySession -> getProxySession: Probability = 1.00, Count = 1
GetProxySessionRequest -> GetProxySessionRequest: Probability = 1.00, Count = 1
Invoke<GetProxySessionResponse> -> executeGetProxySession: Probability = 1.00, Count = 1
"TermStats: -> "TermStats: Probability = 0.33, Count = 1
"TermStats: -> +"decodedTermText='": Probability = 0.33, Count = 1
"TermStats: -> "TermStats:: Probability = 0.33, Count = 1
termtext.Utf8ToString -> decodedTermText: Probability = 0.50, Count = 1
termtext.Utf8ToString -> termtext.utf8ToString: Probability = 0.50, Count = 1
DocFreq=" -> '\'': Probability = 0.50, Count = 2
DocFreq=" -> docFreq=": Probability = 0.50, Count = 2
TotalTermFreq=" -> +: Probability = 1.00, Count = 1
DocFreq -> docFreq: Probability = 1.00, Count = 4
GetSignificantDecimalDigitsLastDigitRounded -> getSignificantDecimalDigitsLastDigitRounded: Probability = 1.00, Count = 1
wp -> wp: Probability = 0.67, Count = 2
wp -> sb.setCharAt: Probability = 0.33, Count = 1
docIn, -> docIn,: Probability = 1.00, Count = 2
fieldInfo -> fieldInfo: Probability = 0.89, Count = 8
fieldInfo -> fi,: Probability = 0.11, Count = 1
docIn -> docIn: Probability = 0.33, Count = 2
docIn -> startDocIn: Probability = 0.33, Count = 2
docIn -> &&indexHasFreq: Probability = 0.17, Count = 1
docIn -> &&indexHasOffsets: Probability = 0.17, Count = 1
startDocIn -> fieldInfo.getIndexOptions: Probability = 1.00, Count = 2
fieldInfo.IndexOptions.CompareTo -> .compareTo: Probability = 0.50, Count = 3
fieldInfo.IndexOptions.CompareTo -> IndexOptions.DOCS_AND_FREQS: Probability = 0.17, Count = 1
fieldInfo.IndexOptions.CompareTo -> &&indexHasPos: Probability = 0.17, Count = 1
fieldInfo.IndexOptions.CompareTo -> fieldInfo.getIndexOptions: Probability = 0.17, Count = 1
IndexOptions.DOCS_AND_FREQS_AND_POSITIONS -> IndexOptions.DOCS_AND_FREQS_AND_POSITIONS: Probability = 1.00, Count = 1
&&indexHasPayloads -> &&indexHasPayloads: Probability = 1.00, Count = 2
fieldInfo.HasPayloads -> fieldInfo.hasPayloads: Probability = 1.00, Count = 2
EncodeASCII -> encodeASCII: Probability = 1.00, Count = 3
PurgeQueueResponse -> PurgeQueueResult: Probability = 1.00, Count = 1
PurgeQueue -> purgeQueue: Probability = 1.00, Count = 1
PurgeQueueRequest -> PurgeQueueRequest: Probability = 1.00, Count = 1
Invoke<PurgeQueueResponse> -> executePurgeQueue: Probability = 1.00, Count = 1
Sempred -> sempred: Probability = 1.00, Count = 1
_localctx, -> _localctx,: Probability = 1.00, Count = 1
ListStreamsResponse -> ListStreamsResult: Probability = 1.00, Count = 2
ListStreams -> listStreams: Probability = 1.00, Count = 3
ListStreamsRequest -> ListStreamsRequest: Probability = 1.00, Count = 2
GetSurfaceFormString -> getSurfaceFormString: Probability = 1.00, Count = 1
surfaceForm, -> surfaceForm,: Probability = 1.00, Count = 4
GetVaultNotificationsResponse -> GetVaultNotificationsResult: Probability = 1.00, Count = 1
GetVaultNotifications -> getVaultNotifications: Probability = 1.00, Count = 1
Invoke<GetVaultNotificationsResponse> -> executeGetVaultNotifications: Probability = 1.00, Count = 1
DeleteTypedLinkFacetResponse -> DeleteTypedLinkFacetResult: Probability = 1.00, Count = 1
DeleteTypedLinkFacet -> deleteTypedLinkFacet: Probability = 1.00, Count = 1
DeleteTypedLinkFacetRequest -> DeleteTypedLinkFacetRequest: Probability = 1.00, Count = 1
Invoke<DeleteTypedLinkFacetResponse> -> executeDeleteTypedLinkFacet: Probability = 1.00, Count = 1
docIDs.RamBytesUsed -> 2: Probability = 0.60, Count = 3
docIDs.RamBytesUsed -> Integer.BYTES+: Probability = 0.40, Count = 2
PushCommand -> PushCommand: Probability = 1.00, Count = 2
Push -> push: Probability = 1.00, Count = 2
SelectResponse -> SelectResult: Probability = 1.00, Count = 1
Select -> select: Probability = 1.00, Count = 1
SelectRequest -> SelectRequest: Probability = 1.00, Count = 3
Invoke<SelectResponse> -> executeSelect: Probability = 1.00, Count = 1
RenameTo -> renameTo: Probability = 1.00, Count = 1
directory.RenameTo -> directory.renameTo: Probability = 1.00, Count = 1
IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS -> IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS: Probability = 1.00, Count = 1
DanishStemmer -> DanishStemmer: Probability = 1.00, Count = 1
BooleanQuery -> BooleanQuery.Builder: Probability = 0.67, Count = 8
BooleanQuery -> bQuery: Probability = 0.17, Count = 2
BooleanQuery -> bq: Probability = 0.17, Count = 2
UpdateApnsChannelResponse -> UpdateApnsChannelResult: Probability = 1.00, Count = 1
UpdateApnsChannel -> updateApnsChannel: Probability = 1.00, Count = 1
UpdateApnsChannelRequest -> UpdateApnsChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateApnsChannelResponse> -> executeUpdateApnsChannel: Probability = 1.00, Count = 1
getInput -> getInput: Probability = 1.00, Count = 1
HEADER_SIZE -> HEADER_SIZE: Probability = 1.00, Count = 4
DescribeFolderContentsResponse -> DescribeFolderContentsResult: Probability = 1.00, Count = 1
DescribeFolderContents -> describeFolderContents: Probability = 1.00, Count = 1
DescribeFolderContentsRequest -> DescribeFolderContentsRequest: Probability = 1.00, Count = 1
Invoke<DescribeFolderContentsResponse> -> executeDescribeFolderContents: Probability = 1.00, Count = 1
sourceDBInstanceIdentifier -> sourceDBInstanceIdentifier: Probability = 1.00, Count = 3
_sourceDBInstanceIdentifier -> setSourceDBInstanceIdentifier: Probability = 1.00, Count = 2
CreateDefaultSubnetResponse -> CreateDefaultSubnetResult: Probability = 1.00, Count = 1
CreateDefaultSubnet -> createDefaultSubnet: Probability = 1.00, Count = 1
CreateDefaultSubnetRequest -> CreateDefaultSubnetRequest: Probability = 1.00, Count = 1
Invoke<CreateDefaultSubnetResponse> -> executeCreateDefaultSubnet: Probability = 1.00, Count = 1
newId -> newId: Probability = 1.00, Count = 2
setValue -> setValue: Probability = 1.00, Count = 6
oldValue -> oldValue: Probability = 1.00, Count = 13
rewind -> rewind: Probability = 1.00, Count = 1
GetHideObj -> getHideObj: Probability = 1.00, Count = 3
field_1_print_gridlines -> field_1_print_gridlines: Probability = 1.00, Count = 1
CreateEventTrackerResponse -> CreateEventTrackerResult: Probability = 1.00, Count = 1
CreateEventTracker -> createEventTracker: Probability = 1.00, Count = 1
CreateEventTrackerRequest -> CreateEventTrackerRequest: Probability = 1.00, Count = 1
Invoke<CreateEventTrackerResponse> -> executeCreateEventTracker: Probability = 1.00, Count = 1
RemoveExFormatRecord -> removeExFormatRecord: Probability = 1.00, Count = 2
records.Remove -> records.remove: Probability = 1.00, Count = 5
numxfs-- -> numxfs--: Probability = 1.00, Count = 2
Publish -> publish: Probability = 1.00, Count = 3
currentRevision -> currentRevision: Probability = 0.75, Count = 6
currentRevision -> oldRevision: Probability = 0.25, Count = 2
compare -> compare: Probability = 0.57, Count = 8
compare -> field.equals: Probability = 0.07, Count = 1
compare -> other.field: Probability = 0.14, Count = 2
compare -> bytes.compareTo: Probability = 0.07, Count = 1
compare -> other.bytes: Probability = 0.07, Count = 1
compare -> field.compareTo: Probability = 0.07, Count = 1
"Cannot -> "Cannot: Probability = 1.00, Count = 7
RefCountedRevision -> RefCountedRevision: Probability = 1.00, Count = 3
DeleteBGPPeerResponse -> DeleteBGPPeerResult: Probability = 1.00, Count = 1
DeleteBGPPeer -> deleteBGPPeer: Probability = 1.00, Count = 1
DeleteBGPPeerRequest -> DeleteBGPPeerRequest: Probability = 1.00, Count = 1
Invoke<DeleteBGPPeerResponse> -> executeDeleteBGPPeer: Probability = 1.00, Count = 1
DeleteVpcPeeringConnectionResponse -> DeleteVpcPeeringConnectionResult: Probability = 1.00, Count = 1
DeleteVpcPeeringConnection -> deleteVpcPeeringConnection: Probability = 1.00, Count = 1
DeleteVpcPeeringConnectionRequest -> DeleteVpcPeeringConnectionRequest: Probability = 1.00, Count = 1
Invoke<DeleteVpcPeeringConnectionResponse> -> executeDeleteVpcPeeringConnection: Probability = 1.00, Count = 1
UpdateIdentityPoolResponse -> UpdateIdentityPoolResult: Probability = 1.00, Count = 1
UpdateIdentityPool -> updateIdentityPool: Probability = 1.00, Count = 1
UpdateIdentityPoolRequest -> UpdateIdentityPoolRequest: Probability = 1.00, Count = 1
Invoke<UpdateIdentityPoolResponse> -> executeUpdateIdentityPool: Probability = 1.00, Count = 1
SignString -> signString: Probability = 1.00, Count = 4
stringToSign, -> stringToSign,: Probability = 1.00, Count = 4
credentials.GetAccessKeySecret -> credentials.getAccessKeySecret: Probability = 1.00, Count = 1
GetDeviceResponse -> GetDeviceResult: Probability = 1.00, Count = 1
GetDevice -> getDevice: Probability = 1.00, Count = 1
GetDeviceRequest -> GetDeviceRequest: Probability = 1.00, Count = 1
Invoke<GetDeviceResponse> -> executeGetDevice: Probability = 1.00, Count = 1
isSuccess -> isSuccess: Probability = 1.00, Count = 1
200 -> 200: Probability = 1.00, Count = 1
300 -> this.status: Probability = 1.00, Count = 2
Status -> 300: Probability = 1.00, Count = 1
CredentialsProvider -> CredentialsProvider: Probability = 1.00, Count = 2
GetDefault -> getDefault: Probability = 1.00, Count = 1
defaultProvider -> defaultProvider: Probability = 1.00, Count = 2
Antlr4.Runtime.Atn.LexerPushModeAction -> LexerPushModeAction: Probability = 1.00, Count = 2
.mode -> .mode: Probability = 1.00, Count = 3
DumpDFA -> dumpDFA: Probability = 1.00, Count = 1
seenOne -> seenOne: Probability = 1.00, Count = 3
Output.WriteLine -> System.out.println: Probability = 0.67, Count = 4
Output.WriteLine -> "Decision: Probability = 0.17, Count = 1
Output.WriteLine -> "enter: Probability = 0.17, Count = 1
CancelClusterResponse -> CancelClusterResult: Probability = 1.00, Count = 1
CancelCluster -> cancelCluster: Probability = 1.00, Count = 1
CancelClusterRequest -> CancelClusterRequest: Probability = 1.00, Count = 1
Invoke<CancelClusterResponse> -> executeCancelCluster: Probability = 1.00, Count = 1
DeletePhoneNumberResponse -> DeletePhoneNumberResult: Probability = 1.00, Count = 1
DeletePhoneNumber -> deletePhoneNumber: Probability = 1.00, Count = 1
DeletePhoneNumberRequest -> DeletePhoneNumberRequest: Probability = 1.00, Count = 1
Invoke<DeletePhoneNumberResponse> -> executeDeletePhoneNumber: Probability = 1.00, Count = 1
AddPushURI -> addPushURI: Probability = 1.00, Count = 1
pushURIs.Contains -> pushURIs.contains: Probability = 1.00, Count = 1
pushURIs.AddItem -> pushURIs.add: Probability = 1.00, Count = 1
RemoveCreateDateTime -> removeCreateDateTime: Probability = 1.00, Count = 1
PropertyIDMap.PID_Create_DTM -> PropertyIDMap.PID_CREATE_DTM: Probability = 1.00, Count = 1
CreateHealthCheckResponse -> CreateHealthCheckResult: Probability = 1.00, Count = 1
CreateHealthCheck -> createHealthCheck: Probability = 1.00, Count = 1
CreateHealthCheckRequest -> CreateHealthCheckRequest: Probability = 1.00, Count = 1
Invoke<CreateHealthCheckResponse> -> executeCreateHealthCheck: Probability = 1.00, Count = 1
EnableVgwRoutePropagationResponse -> EnableVgwRoutePropagationResult: Probability = 1.00, Count = 1
EnableVgwRoutePropagation -> enableVgwRoutePropagation: Probability = 1.00, Count = 1
EnableVgwRoutePropagationRequest -> EnableVgwRoutePropagationRequest: Probability = 1.00, Count = 1
Invoke<EnableVgwRoutePropagationResponse> -> executeEnableVgwRoutePropagation: Probability = 1.00, Count = 1
RemoveByteCount -> removeByteCount: Probability = 1.00, Count = 1
PropertyIDMap.PID_BYTECOUNT -> PropertyIDMap.PID_BYTECOUNT: Probability = 1.00, Count = 1
UpdateAutoScalingGroupResponse -> UpdateAutoScalingGroupResult: Probability = 1.00, Count = 1
UpdateAutoScalingGroup -> updateAutoScalingGroup: Probability = 1.00, Count = 1
UpdateAutoScalingGroupRequest -> UpdateAutoScalingGroupRequest: Probability = 1.00, Count = 1
Invoke<UpdateAutoScalingGroupResponse> -> executeUpdateAutoScalingGroup: Probability = 1.00, Count = 1
CreateNotebookInstanceResponse -> CreateNotebookInstanceResult: Probability = 1.00, Count = 1
CreateNotebookInstance -> createNotebookInstance: Probability = 1.00, Count = 1
CreateNotebookInstanceRequest -> CreateNotebookInstanceRequest: Probability = 1.00, Count = 1
Invoke<CreateNotebookInstanceResponse> -> executeCreateNotebookInstance: Probability = 1.00, Count = 1
CreateMLModelResponse -> CreateMLModelResult: Probability = 1.00, Count = 1
CreateMLModel -> createMLModel: Probability = 1.00, Count = 1
CreateMLModelRequest -> CreateMLModelRequest: Probability = 1.00, Count = 1
Invoke<CreateMLModelResponse> -> executeCreateMLModel: Probability = 1.00, Count = 1
ContinueRecord -> ContinueRecord: Probability = 1.00, Count = 2
getParser -> getParser: Probability = 1.00, Count = 1
DeleteSolutionResponse -> DeleteSolutionResult: Probability = 1.00, Count = 1
DeleteSolution -> deleteSolution: Probability = 1.00, Count = 1
DeleteSolutionRequest -> DeleteSolutionRequest: Probability = 1.00, Count = 1
Invoke<DeleteSolutionResponse> -> executeDeleteSolution: Probability = 1.00, Count = 1
IsDelete -> isDelete: Probability = 1.00, Count = 1
ObjectId.ZeroId.Equals -> ObjectId.zeroId: Probability = 0.50, Count = 1
ObjectId.ZeroId.Equals -> .equals: Probability = 0.50, Count = 1
GetNextPos -> getNextPos: Probability = 1.00, Count = 1
DescribeSpotFleetInstancesResponse -> DescribeSpotFleetInstancesResult: Probability = 1.00, Count = 1
DescribeSpotFleetInstances -> describeSpotFleetInstances: Probability = 1.00, Count = 1
DescribeSpotFleetInstancesRequest -> DescribeSpotFleetInstancesRequest: Probability = 1.00, Count = 1
Invoke<DescribeSpotFleetInstancesResponse> -> executeDescribeSpotFleetInstances: Probability = 1.00, Count = 1
ResetPasswordResponse -> ResetPasswordResult: Probability = 1.00, Count = 1
ResetPassword -> resetPassword: Probability = 1.00, Count = 1
ResetPasswordRequest -> ResetPasswordRequest: Probability = 1.00, Count = 1
Invoke<ResetPasswordResponse> -> executeResetPassword: Probability = 1.00, Count = 1
recordData.Length -> "DrawingRecord["+recordData.length+"]": Probability = 1.00, Count = 1
workingTreeIt -> workingTreeIt: Probability = 0.62, Count = 5
workingTreeIt -> IndexDiff: Probability = 0.25, Count = 2
workingTreeIt -> Constants.HEAD,: Probability = 0.12, Count = 1
FileTreeIterator -> FileTreeIterator: Probability = 1.00, Count = 2
diff -> diff: Probability = 0.72, Count = 13
diff -> !=: Probability = 0.11, Count = 2
diff -> Math.signum: Probability = 0.06, Count = 1
diff -> getBoost: Probability = 0.06, Count = 1
diff -> other.getBoost: Probability = 0.06, Count = 1
IndexDiff -> ignoreSubmoduleMode: Probability = 0.50, Count = 2
IndexDiff -> diff.setIgnoreSubmoduleMode: Probability = 0.25, Count = 1
IndexDiff -> diff.setFilter: Probability = 0.25, Count = 1
PathHierarchyTokenizerFactory -> PathHierarchyTokenizerFactory: Probability = 1.00, Count = 1
delimiter -> delimiter: Probability = 1.00, Count = 4
lockName -> lockName: Probability = 1.00, Count = 1
CreateFieldLevelEncryptionConfigResponse -> CreateFieldLevelEncryptionConfigResult: Probability = 1.00, Count = 1
CreateFieldLevelEncryptionConfig -> createFieldLevelEncryptionConfig: Probability = 1.00, Count = 1
CreateFieldLevelEncryptionConfigRequest -> CreateFieldLevelEncryptionConfigRequest: Probability = 1.00, Count = 1
Invoke<CreateFieldLevelEncryptionConfigResponse> -> executeCreateFieldLevelEncryptionConfig: Probability = 1.00, Count = 1
java.io.Reader -> Reader: Probability = 1.00, Count = 3
_reader -> reader: Probability = 1.00, Count = 1
DeleteHealthCheckResponse -> DeleteHealthCheckResult: Probability = 1.00, Count = 1
DeleteHealthCheck -> deleteHealthCheck: Probability = 1.00, Count = 1
DeleteHealthCheckRequest -> DeleteHealthCheckRequest: Probability = 1.00, Count = 1
Invoke<DeleteHealthCheckResponse> -> executeDeleteHealthCheck: Probability = 1.00, Count = 1
_complexData -> resizeComplexData: Probability = 1.00, Count = 2
sizeOfElements -> cdLen: Probability = 1.00, Count = 2
GetActualSizeOfElements -> getActualSizeOfElements: Probability = 1.00, Count = 3
ErrorEval.REF_INVALID -> ErrorEval.REF_INVALID: Probability = 1.00, Count = 2
GetSmsTemplateResponse -> GetSmsTemplateResult: Probability = 1.00, Count = 1
GetSmsTemplate -> getSmsTemplate: Probability = 1.00, Count = 1
GetSmsTemplateRequest -> GetSmsTemplateRequest: Probability = 1.00, Count = 1
Invoke<GetSmsTemplateResponse> -> executeGetSmsTemplate: Probability = 1.00, Count = 1
this.m_field.ToString -> this.field.toString: Probability = 1.00, Count = 1
byteOffset, -> byteOffset,: Probability = 1.00, Count = 6
NPOI.SS.UserModel.IHyperlink -> HSSFHyperlink: Probability = 1.00, Count = 1
CreateHyperlink -> createHyperlink: Probability = 1.00, Count = 1
HyperlinkType -> HyperlinkType: Probability = 1.00, Count = 1
HSSFHyperlink -> HSSFHyperlink: Probability = 1.00, Count = 1
UpdateGlobalSettingsResponse -> UpdateGlobalSettingsResult: Probability = 1.00, Count = 1
UpdateGlobalSettings -> updateGlobalSettings: Probability = 1.00, Count = 1
UpdateGlobalSettingsRequest -> UpdateGlobalSettingsRequest: Probability = 1.00, Count = 1
Invoke<UpdateGlobalSettingsResponse> -> executeUpdateGlobalSettings: Probability = 1.00, Count = 1
ext -> ext: Probability = 1.00, Count = 5
ext.Length -> ext.length: Probability = 1.00, Count = 5
segmentSuffix.Length -> segmentSuffix.length: Probability = 1.00, Count = 3
JGitText -> JGitText: Probability = 1.00, Count = 1
NLS.GetBundleFor<JGitText> -> NLS.getBundleFor: Probability = 0.50, Count = 1
NLS.GetBundleFor<JGitText> -> JGitText.class: Probability = 0.50, Count = 1
m_freenode -> freenode: Probability = 1.00, Count = 3
m_eq.Length -> eq.length: Probability = 1.00, Count = 4
RedimNodeArrays -> redimNodeArrays: Probability = 1.00, Count = 3
BLOCK_SIZE -> BLOCK_SIZE: Probability = 1.00, Count = 3
strkey -> strkey[]: Probability = 1.00, Count = 2
strkey, -> key.getChars: Probability = 0.33, Count = 2
strkey, -> strkey,: Probability = 0.67, Count = 4
strkey[len] -> strkey[len]: Probability = 1.00, Count = 2
m_root, -> root,: Probability = 1.00, Count = 2
CreateBuiltInName -> createBuiltInName: Probability = 1.00, Count = 2
builtInName, -> sheetNumber: Probability = 1.00, Count = 4
rstartIndex -> lstartIndex,: Probability = 0.25, Count = 2
rstartIndex -> rarray,int: Probability = 0.12, Count = 1
rstartIndex -> rstartIndex: Probability = 0.38, Count = 3
rstartIndex -> rarray: Probability = 0.25, Count = 2
rarray.Length -> rarray.length: Probability = 1.00, Count = 4
larray.Length -> larray.length: Probability = 1.00, Count = 3
ri -> ri: Probability = 0.50, Count = 4
ri -> larray[li]: Probability = 0.25, Count = 2
ri -> rarray[ri]: Probability = 0.25, Count = 2
GetVoiceConnectorResponse -> GetVoiceConnectorResult: Probability = 1.00, Count = 1
GetVoiceConnector -> getVoiceConnector: Probability = 1.00, Count = 1
GetVoiceConnectorRequest -> GetVoiceConnectorRequest: Probability = 1.00, Count = 1
Invoke<GetVoiceConnectorResponse> -> executeGetVoiceConnector: Probability = 1.00, Count = 1
SetValueAt -> setValueAt: Probability = 1.00, Count = 1
relativeOffset, -> relativeOffset,: Probability = 1.00, Count = 1
_values[relativeOffset] -> _values[relativeOffset]: Probability = 1.00, Count = 3
POIFSConstants.UNUSED_BLOCK -> POIFSConstants.UNUSED_BLOCK: Probability = 1.00, Count = 2
_has_free_sectors -> _has_free_sectors: Probability = 1.00, Count = 1
RecomputeFree -> recomputeFree: Probability = 1.00, Count = 1
IsBinary -> isBinary: Probability = 1.00, Count = 3
IInputIterator -> InputIterator: Probability = 1.00, Count = 6
suggester -> iterator.hasPayloads: Probability = 0.20, Count = 3
suggester -> suggester: Probability = 0.40, Count = 6
suggester -> payloads": Probability = 0.20, Count = 3
suggester -> iterator.hasContexts: Probability = 0.20, Count = 3
doesn't -> doesn't: Probability = 1.00, Count = 8
trie -> trie: Probability = 1.00, Count = 3
charsSpare -> spare: Probability = 1.00, Count = 6
verticalBorder.IsSet -> verticalBorder.isSet: Probability = 1.00, Count = 1
CreateDBInstanceRequest -> CreateDBInstanceRequest: Probability = 1.00, Count = 2
masterUserPassword -> masterUserPassword: Probability = 1.00, Count = 2
engine -> engine: Probability = 1.00, Count = 2
_masterUserPassword -> setMasterUserPassword: Probability = 1.00, Count = 1
DescribeCapacityProvidersResponse -> DescribeCapacityProvidersResult: Probability = 1.00, Count = 1
DescribeCapacityProviders -> describeCapacityProviders: Probability = 1.00, Count = 1
DescribeCapacityProvidersRequest -> DescribeCapacityProvidersRequest: Probability = 1.00, Count = 1
Invoke<DescribeCapacityProvidersResponse> -> executeDescribeCapacityProviders: Probability = 1.00, Count = 1
CreateQualificationTypeResponse -> CreateQualificationTypeResult: Probability = 1.00, Count = 1
CreateQualificationType -> createQualificationType: Probability = 1.00, Count = 1
CreateQualificationTypeRequest -> CreateQualificationTypeRequest: Probability = 1.00, Count = 1
Invoke<CreateQualificationTypeResponse> -> executeCreateQualificationType: Probability = 1.00, Count = 1
addLast -> addLast: Probability = 1.00, Count = 1
Patch -> Patch: Probability = 1.00, Count = 1
AList<FileHeader> -> ArrayList<>: Probability = 1.00, Count = 1
errors -> errors: Probability = 1.00, Count = 5
AList<FormatError> -> ArrayList<>: Probability = 1.00, Count = 1
GetSdkTypesResponse -> GetSdkTypesResult: Probability = 1.00, Count = 1
GetSdkTypes -> getSdkTypes: Probability = 1.00, Count = 1
GetSdkTypesRequest -> GetSdkTypesRequest: Probability = 1.00, Count = 1
Invoke<GetSdkTypesResponse> -> executeGetSdkTypes: Probability = 1.00, Count = 1
NotImplementedException -> RuntimeException: Probability = 0.67, Count = 2
NotImplementedException -> NotImplementedException: Probability = 0.33, Count = 1
ListPhotoFacesRequest -> ListPhotoFacesRequest: Probability = 1.00, Count = 1
"ListPhotoFaces", -> "ListPhotoFaces",: Probability = 1.00, Count = 1
IsBatchMode -> isBatchMode: Probability = 1.00, Count = 1
batchMode -> batchMode: Probability = 1.00, Count = 1
batchMode.Value -> batchMode.booleanValue: Probability = 1.00, Count = 1
V>> -> @Override: Probability = 0.06, Count = 1
V>> -> V>>: Probability = 0.81, Count = 13
V>> -> Iterator<Map.Entry<E,: Probability = 0.12, Count = 2
java.util.Set<java.util.MapClass.Entry<K, -> Set<Entry<K,: Probability = 1.00, Count = 6
entrySet -> entrySet: Probability = 0.75, Count = 6
entrySet -> AbstractSet<Entry<String,: Probability = 0.12, Count = 1
entrySet -> Ref>>: Probability = 0.12, Count = 1
V>.BoundedMap.BoundedEntrySet -> BoundedEntrySet: Probability = 1.00, Count = 2
this._entrySet -> entrySet: Probability = 1.00, Count = 2
formulaText -> formulaText: Probability = 1.00, Count = 1
formulaText, -> formulaText,: Probability = 1.00, Count = 1
CONDITION_TYPE_FORMULA, -> CONDITION_TYPE_FORMULA,: Probability = 1.00, Count = 1
ComparisonOperator.NoComparison,formula1, -> ComparisonOperator.NO_COMPARISON,formula1,: Probability = 1.00, Count = 1
DeleteAlbumsRequest -> DeleteAlbumsRequest: Probability = 1.00, Count = 1
"DeleteAlbums", -> "DeleteAlbums",: Probability = 1.00, Count = 1
MissingFormatArgumentException -> MissingFormatArgumentException: Probability = 1.00, Count = 1
DeleteApplicationOutputResponse -> DeleteApplicationOutputResult: Probability = 1.00, Count = 1
DeleteApplicationOutput -> deleteApplicationOutput: Probability = 1.00, Count = 1
DeleteApplicationOutputRequest -> DeleteApplicationOutputRequest: Probability = 1.00, Count = 1
Invoke<DeleteApplicationOutputResponse> -> executeDeleteApplicationOutput: Probability = 1.00, Count = 1
PredictionContextCache -> PredictionContextCache: Probability = 1.00, Count = 1
getSharedContextCache -> getSharedContextCache: Probability = 1.00, Count = 1
sharedContextCache -> sharedContextCache: Probability = 0.75, Count = 6
sharedContextCache -> sharedContextCache==null: Probability = 0.12, Count = 1
sharedContextCache -> atn,: Probability = 0.12, Count = 1
GetDecisionState -> getDecisionState: Probability = 1.00, Count = 1
decisionToState[decision] -> decisionToState.get: Probability = 1.00, Count = 1
RemoveSheet -> removeSheet: Probability = 1.00, Count = 1
sheetIdx -> sheetIdx: Probability = 1.00, Count = 2
_externSheetRecord.RemoveSheet -> _externSheetRecord.removeSheet: Probability = 1.00, Count = 1
HSSFRequest -> HSSFRequest: Probability = 1.00, Count = 1
records -> _records: Probability = 1.00, Count = 1
50 -> 50: Probability = 1.00, Count = 1
TopLevelQuery -> TopLevelQuery: Probability = 1.00, Count = 1
DescribeUpdateResponse -> DescribeUpdateResult: Probability = 1.00, Count = 1
DescribeUpdate -> describeUpdate: Probability = 1.00, Count = 1
DescribeUpdateRequest -> DescribeUpdateRequest: Probability = 1.00, Count = 1
Invoke<DescribeUpdateResponse> -> executeDescribeUpdate: Probability = 1.00, Count = 1
0x7 -> 0x7: Probability = 1.00, Count = 1
byteBuffer.putDouble -> byteBuffer.putDouble: Probability = 1.00, Count = 2
libcore.io.SizeOf.DOUBLE, -> SizeOf.DOUBLE,: Probability = 1.00, Count = 2
nFrames -> endEvaluate: Probability = 0.11, Count = 1
nFrames -> CellCacheEntry: Probability = 0.11, Count = 1
nFrames -> nFrames: Probability = 0.56, Count = 5
nFrames -> _evaluationFrames.size: Probability = 0.22, Count = 2
cce -> cce: Probability = 0.62, Count = 8
cce -> startEvaluate: Probability = 0.08, Count = 1
cce -> "cellLoc: Probability = 0.08, Count = 1
cce -> _currentlyEvaluatingCells.contains: Probability = 0.08, Count = 1
cce -> _currentlyEvaluatingCells.add: Probability = 0.08, Count = 1
cce -> _evaluationFrames.add: Probability = 0.08, Count = 1
To -> "Call: Probability = 0.17, Count = 2
To -> to: Probability = 0.50, Count = 6
To -> endEvaluate: Probability = 0.17, Count = 2
To -> startEvaluate": Probability = 0.17, Count = 2
CellEvaluationFrame -> nFrames--: Probability = 0.08, Count = 1
CellEvaluationFrame -> CellEvaluationFrame: Probability = 0.25, Count = 3
CellEvaluationFrame -> frame: Probability = 0.17, Count = 2
CellEvaluationFrame -> _evaluationFrames.get: Probability = 0.17, Count = 2
CellEvaluationFrame -> nFrames: Probability = 0.17, Count = 2
CellEvaluationFrame -> nFrames-1: Probability = 0.08, Count = 1
CellEvaluationFrame -> ErrorEval.CIRCULAR_REF_ERROR: Probability = 0.08, Count = 1
NumberPtg -> NumberPtg: Probability = 1.00, Count = 1
SetGroupSort -> setGroupSort: Probability = 1.00, Count = 1
this.groupSort -> this.groupSort: Probability = 1.00, Count = 1
IBorderFormatting -> HSSFBorderFormatting: Probability = 1.00, Count = 2
CreateBorderFormatting -> createBorderFormatting: Probability = 1.00, Count = 1
GetBorderFormatting -> getBorderFormatting: Probability = 1.00, Count = 3
shape.Anchor -> shape.setAnchor: Probability = 1.00, Count = 3
shapes.Add -> shapes.add: Probability = 1.00, Count = 3
EscherSpRecord -> EscherSpRecord: Probability = 0.33, Count = 2
EscherSpRecord -> sp: Probability = 0.33, Count = 2
EscherSpRecord -> EscherSpRecord.RECORD_ID: Probability = 0.33, Count = 2
shape.GetEscherContainer -> shape.getEscherContainer: Probability = 1.00, Count = 4
.GetChildById -> .getChildById: Probability = 1.00, Count = 3
sp.Flags -> shape.getAnchor: Probability = 0.20, Count = 4
sp.Flags -> .isHorizontallyFlipped: Probability = 0.10, Count = 2
sp.Flags -> sp.setFlags: Probability = 0.20, Count = 4
sp.Flags -> sp.getFlags: Probability = 0.20, Count = 4
sp.Flags -> EscherSpRecord.FLAG_FLIPHORIZ: Probability = 0.10, Count = 2
sp.Flags -> .isVerticallyFlipped: Probability = 0.10, Count = 2
sp.Flags -> EscherSpRecord.FLAG_FLIPVERT: Probability = 0.10, Count = 2
GetLifecyclePolicyResponse -> GetLifecyclePolicyResult: Probability = 1.00, Count = 1
GetLifecyclePolicy -> getLifecyclePolicy: Probability = 1.00, Count = 1
GetLifecyclePolicyRequest -> GetLifecyclePolicyRequest: Probability = 1.00, Count = 1
Invoke<GetLifecyclePolicyResponse> -> executeGetLifecyclePolicy: Probability = 1.00, Count = 1
IntegerValue -> integerValue: Probability = 1.00, Count = 1
backingMap.size -> backingMap.size: Probability = 1.00, Count = 1
a.ShouldBeRecursive -> a.shouldBeRecursive: Probability = 1.00, Count = 2
GetRepoAuthorizationListRequest -> GetRepoAuthorizationListRequest: Probability = 1.00, Count = 1
"GetRepoAuthorizationList", -> "GetRepoAuthorizationList",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/authorizations" -> "/repos/[RepoNamespace]/[RepoName]/authorizations": Probability = 1.00, Count = 1
LexerATNConfig -> LexerATNConfig: Probability = 0.92, Count = 11
LexerATNConfig -> lexerOther: Probability = 0.08, Count = 1
c.context, -> c.context,: Probability = 1.00, Count = 2
c.semanticContext -> c.semanticContext: Probability = 1.00, Count = 3
this.lexerActionExecutor -> this.lexerActionExecutor: Probability = 1.00, Count = 5
c.lexerActionExecutor -> c.lexerActionExecutor: Probability = 1.00, Count = 2
this.passedThroughNonGreedyDecision -> this.passedThroughNonGreedyDecision: Probability = 1.00, Count = 5
checkNonGreedyDecision -> checkNonGreedyDecision: Probability = 1.00, Count = 3
IQueryNodeProcessor -> QueryNodeProcessor: Probability = 1.00, Count = 5
processor -> processor: Probability = 0.86, Count = 6
processor -> this.processors.add: Probability = 0.14, Count = 1
oldProcessor -> oldProcessor: Probability = 1.00, Count = 3
this.processors[index] -> this.processors.set: Probability = 1.00, Count = 1
processor.SetQueryConfigHandler -> processor.setQueryConfigHandler: Probability = 1.00, Count = 3
this.queryConfig -> this.queryConfig: Probability = 1.00, Count = 5
GetRuleName -> getRuleName: Probability = 1.00, Count = 1
parser.RuleNames[index] -> parser.getRuleNames: Probability = 1.00, Count = 1
"<rule -> [index]: Probability = 1.00, Count = 1
DirCacheBuilder -> DirCacheBuilder: Probability = 1.00, Count = 2
DirCacheBuildIterator -> DirCacheBuildIterator: Probability = 1.00, Count = 2
DeleteGatewayResponseResponse -> DeleteGatewayResponseResult: Probability = 1.00, Count = 1
DeleteGatewayResponse -> deleteGatewayResponse: Probability = 1.00, Count = 1
DeleteGatewayResponseRequest -> DeleteGatewayResponseRequest: Probability = 1.00, Count = 1
Invoke<DeleteGatewayResponseResponse> -> executeDeleteGatewayResponse: Probability = 1.00, Count = 1
NorwegianLightStemFilter -> NorwegianLightStemFilter: Probability = 1.00, Count = 1
GetUserSourceRepoListRequest -> GetUserSourceRepoListRequest: Probability = 1.00, Count = 1
"GetUserSourceRepoList", -> "GetUserSourceRepoList",: Probability = 1.00, Count = 1
"/users/sourceAccount/[SourceAccountId]/repos" -> "/users/sourceAccount/[SourceAccountId]/repos": Probability = 1.00, Count = 1
DescribeEventBusResponse -> DescribeEventBusResult: Probability = 1.00, Count = 1
DescribeEventBus -> describeEventBus: Probability = 1.00, Count = 1
DescribeEventBusRequest -> DescribeEventBusRequest: Probability = 1.00, Count = 1
Invoke<DescribeEventBusResponse> -> executeDescribeEventBus: Probability = 1.00, Count = 1
this.credentialsProvider -> this.endpointResolver: Probability = 0.17, Count = 1
this.credentialsProvider -> DefaultEndpointResolver: Probability = 0.17, Count = 1
this.credentialsProvider -> this.appendUserAgent: Probability = 0.17, Count = 1
this.credentialsProvider -> "HTTPClient",: Probability = 0.17, Count = 1
this.credentialsProvider -> this.httpClient.getClass: Probability = 0.17, Count = 1
this.credentialsProvider -> .getSimpleName: Probability = 0.17, Count = 1
result.append -> result.append: Probability = 0.86, Count = 12
result.append -> '?': Probability = 0.07, Count = 1
result.append -> '#': Probability = 0.07, Count = 1
replacementBytes -> replacementBytes: Probability = 1.00, Count = 2
SeriesToChartGroupRecord -> SeriesToChartGroupRecord: Probability = 1.00, Count = 1
AttributeValue -> AttributeValue: Probability = 1.00, Count = 4
ss -> sS: Probability = 0.50, Count = 2
ss -> ss: Probability = 0.50, Count = 2
_ss -> setSS: Probability = 1.00, Count = 1
objRecord, -> objRecord,: Probability = 1.00, Count = 3
TextObjectRecord -> TextObjectRecord: Probability = 1.00, Count = 1
textObjectRecord, -> textObjectRecord,: Probability = 1.00, Count = 1
_note -> note: Probability = 1.00, Count = 2
textObjectRecord -> textObjectRecord: Probability = 1.00, Count = 1
this._note -> _note: Probability = 1.00, Count = 1
FilteredDocIdSetIterator -> FilteredDocIdSetIterator: Probability = 1.00, Count = 1
innerIter -> DocIdSetIterator: Probability = 0.25, Count = 1
innerIter -> innerIter: Probability = 0.75, Count = 3
"null -> "null: Probability = 1.00, Count = 2
iterator" -> iterator": Probability = 1.00, Count = 1
m_innerIter -> _innerIter: Probability = 1.00, Count = 1
DeleteDBClusterParameterGroupResponse -> DeleteDBClusterParameterGroupResult: Probability = 1.00, Count = 1
DeleteDBClusterParameterGroup -> deleteDBClusterParameterGroup: Probability = 1.00, Count = 1
DeleteDBClusterParameterGroupRequest -> DeleteDBClusterParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteDBClusterParameterGroupResponse> -> executeDeleteDBClusterParameterGroup: Probability = 1.00, Count = 1
Int64sRef -> LongsRef: Probability = 1.00, Count = 2
nextValues.Length -> nextValues.length: Probability = 1.00, Count = 6
nextValues.Offset -> nextValues.offset: Probability = 0.57, Count = 4
nextValues.Offset -> nextValues.longs.length: Probability = 0.43, Count = 3
remaining, -> remaining,: Probability = 1.00, Count = 3
blocksToRead -> blocksToRead: Probability = 0.60, Count = 3
blocksToRead -> nextBlocks.length: Probability = 0.40, Count = 2
nextBlocks, -> nextBlocks,: Probability = 1.00, Count = 3
UpdateServiceAccessPoliciesResponse -> UpdateServiceAccessPoliciesResult: Probability = 1.00, Count = 1
UpdateServiceAccessPolicies -> updateServiceAccessPolicies: Probability = 1.00, Count = 1
UpdateServiceAccessPoliciesRequest -> UpdateServiceAccessPoliciesRequest: Probability = 1.00, Count = 1
Invoke<UpdateServiceAccessPoliciesResponse> -> executeUpdateServiceAccessPolicies: Probability = 1.00, Count = 1
GetApplicationSettingsResponse -> GetApplicationSettingsResult: Probability = 1.00, Count = 1
GetApplicationSettings -> getApplicationSettings: Probability = 1.00, Count = 1
GetApplicationSettingsRequest -> GetApplicationSettingsRequest: Probability = 1.00, Count = 1
Invoke<GetApplicationSettingsResponse> -> executeGetApplicationSettings: Probability = 1.00, Count = 1
Codepage -> getCodepage: Probability = 1.00, Count = 2
field_5_reserved -> field_5_reserved: Probability = 1.00, Count = 2
field_6_expression_len -> field_6_expression_len: Probability = 1.00, Count = 1
nAvailableBytes -> nAvailableBytes: Probability = 1.00, Count = 2
field_7_parsed_expr -> field_7_parsed_expr: Probability = 1.00, Count = 1
NPOI.SS.Formula.Formula.Read -> Formula.read: Probability = 1.00, Count = 2
field_6_expression_len, -> field_6_expression_len,: Probability = 1.00, Count = 1
c.@ref -> c.ref: Probability = 1.00, Count = 8
ceilingKey -> ceilingKey: Probability = 1.00, Count = 1
PathCompare -> pathCompare: Probability = 1.00, Count = 2
DescribeContainerInstancesResponse -> DescribeContainerInstancesResult: Probability = 1.00, Count = 1
DescribeContainerInstances -> describeContainerInstances: Probability = 1.00, Count = 1
DescribeContainerInstancesRequest -> DescribeContainerInstancesRequest: Probability = 1.00, Count = 1
Invoke<DescribeContainerInstancesResponse> -> executeDescribeContainerInstances: Probability = 1.00, Count = 1
tabids.Length -> tabid: Probability = 1.00, Count = 1
tabids[i] -> tabid: Probability = 1.00, Count = 1
ListIAMPolicyAssignmentsForUserResponse -> ListIAMPolicyAssignmentsForUserResult: Probability = 1.00, Count = 1
ListIAMPolicyAssignmentsForUser -> listIAMPolicyAssignmentsForUser: Probability = 1.00, Count = 1
ListIAMPolicyAssignmentsForUserRequest -> ListIAMPolicyAssignmentsForUserRequest: Probability = 1.00, Count = 1
Invoke<ListIAMPolicyAssignmentsForUserResponse> -> executeListIAMPolicyAssignmentsForUser: Probability = 1.00, Count = 1
DictionaryEntry -> Map.Entry: Probability = 1.00, Count = 3
RemoveFacetFromObjectResponse -> RemoveFacetFromObjectResult: Probability = 1.00, Count = 1
RemoveFacetFromObject -> removeFacetFromObject: Probability = 1.00, Count = 1
RemoveFacetFromObjectRequest -> RemoveFacetFromObjectRequest: Probability = 1.00, Count = 1
Invoke<RemoveFacetFromObjectResponse> -> executeRemoveFacetFromObject: Probability = 1.00, Count = 1
AssociateRouteTableResponse -> AssociateRouteTableResult: Probability = 1.00, Count = 1
AssociateRouteTable -> associateRouteTable: Probability = 1.00, Count = 1
AssociateRouteTableRequest -> AssociateRouteTableRequest: Probability = 1.00, Count = 1
Invoke<AssociateRouteTableResponse> -> executeAssociateRouteTable: Probability = 1.00, Count = 1
CreateInformationProperties -> createInformationProperties: Probability = 1.00, Count = 1
!initialized -> !initialized: Probability = 1.00, Count = 1
ReadProperties -> readProperties: Probability = 1.00, Count = 1
sInf -> sInf: Probability = 0.67, Count = 2
sInf -> PropertySetFactory.newSummaryInformation: Probability = 0.33, Count = 1
dsInf -> dsInf: Probability = 0.67, Count = 2
dsInf -> newDocumentSummaryInformation: Probability = 0.33, Count = 1
DescribeCommentsResponse -> DescribeCommentsResult: Probability = 1.00, Count = 1
DescribeComments -> describeComments: Probability = 1.00, Count = 1
DescribeCommentsRequest -> DescribeCommentsRequest: Probability = 1.00, Count = 1
Invoke<DescribeCommentsResponse> -> executeDescribeComments: Probability = 1.00, Count = 1
MoPenCreateDeviceRequest -> MoPenCreateDeviceRequest: Probability = 1.00, Count = 1
"MoPenCreateDevice", -> "MoPenCreateDevice",: Probability = 1.00, Count = 1
ApplySchemaResponse -> ApplySchemaResult: Probability = 1.00, Count = 1
ApplySchema -> applySchema: Probability = 1.00, Count = 1
ApplySchemaRequest -> ApplySchemaRequest: Probability = 1.00, Count = 1
Invoke<ApplySchemaResponse> -> executeApplySchema: Probability = 1.00, Count = 1
MMSRecord -> MMSRecord: Probability = 1.00, Count = 1
field_2_delMenuCount -> field_2_delMenuCount: Probability = 1.00, Count = 1
UserInputQueryBuilder -> UserInputQueryBuilder: Probability = 1.00, Count = 2
this.unSafeParser -> this.unSafeParser: Probability = 1.00, Count = 1
MergedGroup -> MergedGroup: Probability = 1.00, Count = 1
groupValue -> groupValue: Probability = 1.00, Count = 2
this.groupValue -> this.groupValue: Probability = 1.00, Count = 1
GetQuery -> getQuery: Probability = 1.00, Count = 3
DOMUtils.GetAttribute -> DOMUtils.getAttribute: Probability = 0.45, Count = 5
DOMUtils.GetAttribute -> boost: Probability = 0.55, Count = 6
Occur.SHOULD -> BooleanClause.Occur.SHOULD: Probability = 1.00, Count = 3
UpdateMailboxQuotaResponse -> UpdateMailboxQuotaResult: Probability = 1.00, Count = 1
UpdateMailboxQuota -> updateMailboxQuota: Probability = 1.00, Count = 1
UpdateMailboxQuotaRequest -> UpdateMailboxQuotaRequest: Probability = 1.00, Count = 1
Invoke<UpdateMailboxQuotaResponse> -> executeUpdateMailboxQuota: Probability = 1.00, Count = 1
"/" -> "/": Probability = 0.80, Count = 8
"/" -> "/"+text+"/":: Probability = 0.10, Count = 1
"/" -> ":/": Probability = 0.10, Count = 1
RemoveApplicationName -> removeApplicationName: Probability = 1.00, Count = 1
PropertyIDMap.PID_APPNAME -> PropertyIDMap.PID_APPNAME: Probability = 1.00, Count = 1
"workbook=" -> sb.append: Probability = 1.00, Count = 2
"sheet=" -> "sheet=": Probability = 1.00, Count = 5
GetRecommenderConfigurationResponse -> GetRecommenderConfigurationResult: Probability = 1.00, Count = 1
GetRecommenderConfiguration -> getRecommenderConfiguration: Probability = 1.00, Count = 1
GetRecommenderConfigurationRequest -> GetRecommenderConfigurationRequest: Probability = 1.00, Count = 1
Invoke<GetRecommenderConfigurationResponse> -> executeGetRecommenderConfiguration: Probability = 1.00, Count = 1
Previous -> previous: Probability = 1.00, Count = 4
Average -> average: Probability = 1.00, Count = 2
ave -> ave: Probability = 1.00, Count = 3
GetCheckerIpRangesResponse -> GetCheckerIpRangesResult: Probability = 1.00, Count = 1
GetCheckerIpRanges -> getCheckerIpRanges: Probability = 1.00, Count = 1
GetCheckerIpRangesRequest -> GetCheckerIpRangesRequest: Probability = 1.00, Count = 1
Invoke<GetCheckerIpRangesResponse> -> executeGetCheckerIpRanges: Probability = 1.00, Count = 1
GetRegionLength -> getRegionLength: Probability = 1.00, Count = 1
currentSource.regionList.length -> outRegion.length: Probability = 1.00, Count = 1
java.util.Iterator<java.util.MapClass.Entry<K, -> @Override: Probability = 0.37, Count = 7
java.util.Iterator<java.util.MapClass.Entry<K, -> Iterator<Multiset.Entry<E>>: Probability = 0.11, Count = 2
java.util.Iterator<java.util.MapClass.Entry<K, -> iterator: Probability = 0.11, Count = 2
java.util.Iterator<java.util.MapClass.Entry<K, -> Iterator<Entry<K,: Probability = 0.37, Count = 7
java.util.Iterator<java.util.MapClass.Entry<K, -> Iterator<Map.Entry<K,V>>: Probability = 0.05, Count = 1
V>.EntryIterator -> new: Probability = 0.40, Count = 4
V>.EntryIterator -> EntryIterator: Probability = 0.30, Count = 3
V>.EntryIterator -> MapBasedMultisetIterator: Probability = 0.10, Count = 1
V>.EntryIterator -> MultisetKeyIterator: Probability = 0.10, Count = 1
V>.EntryIterator -> newEntryIterator: Probability = 0.10, Count = 1
WeightedSpanTerm -> WeightedSpanTerm: Probability = 1.00, Count = 4
weight, -> weight,: Probability = 1.00, Count = 2
positionSensitive -> positionSensitive: Probability = 1.00, Count = 2
_positionSensitive -> this.positionSensitive: Probability = 1.00, Count = 1
UploadServerCertificateRequest -> UploadServerCertificateRequest: Probability = 1.00, Count = 1
serverCertificateName, -> serverCertificateName,: Probability = 1.00, Count = 2
privateKey -> privateKey: Probability = 1.00, Count = 2
_serverCertificateName -> setServerCertificateName: Probability = 1.00, Count = 4
serverCertificateName -> serverCertificateName: Probability = 0.75, Count = 6
serverCertificateName -> ): Probability = 0.25, Count = 2
_privateKey -> setPrivateKey: Probability = 1.00, Count = 1
stack -> stack: Probability = 1.00, Count = 3
p.RuleIndex -> p.getRuleIndex: Probability = 1.00, Count = 2
stack.Add -> ruleIndex<0: Probability = 0.20, Count = 1
stack.Add -> stack.add: Probability = 0.40, Count = 2
stack.Add -> "n/a": Probability = 0.20, Count = 1
stack.Add -> ruleNames[ruleIndex]: Probability = 0.20, Count = 1
p.Parent -> p.parent: Probability = 1.00, Count = 2
fv -> fv: Probability = 1.00, Count = 6
fv, -> fv,: Probability = 1.00, Count = 7
CountRanges -> countRanges: Probability = 1.00, Count = 1
r._character -> r._character: Probability = 1.00, Count = 3
r._fontIndex -> r._fontIndex: Probability = 1.00, Count = 2
workbookName, -> workbookName,: Probability = 1.00, Count = 5
lastSheetName -> lastSheetName: Probability = 1.00, Count = 12
OrCreateLinkTable.GetExternalSheetIndex -> getOrCreateLinkTable: Probability = 0.50, Count = 1
OrCreateLinkTable.GetExternalSheetIndex -> .getExternalSheetIndex: Probability = 0.50, Count = 1
GetDeliverabilityTestReportResponse -> GetDeliverabilityTestReportResult: Probability = 1.00, Count = 1
GetDeliverabilityTestReport -> getDeliverabilityTestReport: Probability = 1.00, Count = 1
GetDeliverabilityTestReportRequest -> GetDeliverabilityTestReportRequest: Probability = 1.00, Count = 1
Invoke<GetDeliverabilityTestReportResponse> -> executeGetDeliverabilityTestReport: Probability = 1.00, Count = 1
IsPeeled -> isPeeled: Probability = 1.00, Count = 3
GetLeaf -> getLeaf: Probability = 1.00, Count = 3
.IsPeeled -> .isPeeled: Probability = 1.00, Count = 1
GetRenameCallback -> getRenameCallback: Probability = 1.00, Count = 1
"EditList[]" -> "EditList": Probability = 0.50, Count = 1
"EditList[]" -> super.toString: Probability = 0.50, Count = 1
PutVoiceConnectorTerminationCredentialsResponse -> PutVoiceConnectorTerminationCredentialsResult: Probability = 1.00, Count = 1
PutVoiceConnectorTerminationCredentials -> putVoiceConnectorTerminationCredentials: Probability = 1.00, Count = 1
PutVoiceConnectorTerminationCredentialsRequest -> PutVoiceConnectorTerminationCredentialsRequest: Probability = 1.00, Count = 1
Invoke<PutVoiceConnectorTerminationCredentialsResponse> -> executePutVoiceConnectorTerminationCredentials: Probability = 1.00, Count = 1
CreateGroupResponse -> CreateGroupResult: Probability = 1.00, Count = 1
CreateGroup -> createGroup: Probability = 1.00, Count = 2
Invoke<CreateGroupResponse> -> executeCreateGroup: Probability = 1.00, Count = 1
typeHint -> typeHint: Probability = 0.55, Count = 6
typeHint -> OBJ_ANY: Probability = 0.18, Count = 2
typeHint -> ,JGitText.get: Probability = 0.09, Count = 1
typeHint -> .unknownObjectType2: Probability = 0.09, Count = 1
typeHint -> ldr.getType: Probability = 0.09, Count = 1
ldr -> ldr: Probability = 0.75, Count = 3
ldr -> db.openObject: Probability = 0.25, Count = 1
objectId.Copy -> objectId.copy: Probability = 1.00, Count = 3
parameterName, -> parameterName,: Probability = 1.00, Count = 1
parameterValue -> parameterValue: Probability = 1.00, Count = 2
_parameterValue -> setParameterValue: Probability = 1.00, Count = 1
AssociateIamInstanceProfileResponse -> AssociateIamInstanceProfileResult: Probability = 1.00, Count = 1
AssociateIamInstanceProfile -> associateIamInstanceProfile: Probability = 1.00, Count = 1
AssociateIamInstanceProfileRequest -> AssociateIamInstanceProfileRequest: Probability = 1.00, Count = 1
Invoke<AssociateIamInstanceProfileResponse> -> executeAssociateIamInstanceProfile: Probability = 1.00, Count = 1
CreateHostedZoneRequest -> CreateHostedZoneRequest: Probability = 1.00, Count = 2
GetPronunciation -> getPronunciation: Probability = 1.00, Count = 1
dictionary.GetPronunciation -> dictionary.getPronunciation: Probability = 1.00, Count = 1
Knows -> knows: Probability = 1.00, Count = 1
ServerException -> ServerException: Probability = 1.00, Count = 2
errorCode, -> errorCode,: Probability = 1.00, Count = 3
errorMessage -> errorMessage: Probability = 1.00, Count = 2
ErrorType -> this.setErrorType: Probability = 1.00, Count = 2
ErrorType.Server -> ErrorType.Server: Probability = 1.00, Count = 1
"3 -> "3: Probability = 1.00, Count = 1
mu -> mu: Probability = 1.00, Count = 1
CreateDiskResponse -> CreateDiskResult: Probability = 1.00, Count = 1
CreateDisk -> createDisk: Probability = 1.00, Count = 1
CreateDiskRequest -> CreateDiskRequest: Probability = 1.00, Count = 1
Invoke<CreateDiskResponse> -> executeCreateDisk: Probability = 1.00, Count = 1
map.Put -> map.put: Probability = 0.20, Count = 8
map.Put -> text,: Probability = 0.17, Count = 7
map.Put -> PLACEHOLDER: Probability = 0.20, Count = 8
map.Put -> ==: Probability = 0.20, Count = 8
map.Put -> null: Probability = 0.20, Count = 8
map.Put -> o,: Probability = 0.03, Count = 1
QueryLicensesRequest -> QueryLicensesRequest: Probability = 1.00, Count = 1
"QueryLicenses" -> "QueryLicenses": Probability = 1.00, Count = 1
ExpectedAttributeValue -> ExpectedAttributeValue: Probability = 1.00, Count = 2
.Length -> .length: Probability = 1.00, Count = 1
DescribeImageAttributeRequest -> DescribeImageAttributeRequest: Probability = 1.00, Count = 2
ImageAttributeName -> ImageAttributeName: Probability = 1.00, Count = 1
CreateEscherAnchor -> createEscherAnchor: Probability = 1.00, Count = 2
CancelDomainTransferToAnotherAwsAccountResponse -> CancelDomainTransferToAnotherAwsAccountResult: Probability = 1.00, Count = 1
CancelDomainTransferToAnotherAwsAccount -> cancelDomainTransferToAnotherAwsAccount: Probability = 1.00, Count = 1
CancelDomainTransferToAnotherAwsAccountRequest -> CancelDomainTransferToAnotherAwsAccountRequest: Probability = 1.00, Count = 1
Invoke<CancelDomainTransferToAnotherAwsAccountResponse> -> executeCancelDomainTransferToAnotherAwsAccount: Probability = 1.00, Count = 1
RecognizeCelebritiesResponse -> RecognizeCelebritiesResult: Probability = 1.00, Count = 1
RecognizeCelebrities -> recognizeCelebrities: Probability = 1.00, Count = 1
RecognizeCelebritiesRequest -> RecognizeCelebritiesRequest: Probability = 1.00, Count = 1
Invoke<RecognizeCelebritiesResponse> -> executeRecognizeCelebrities: Probability = 1.00, Count = 1
chan -> sz,: Probability = 0.20, Count = 1
chan -> chan: Probability = 0.80, Count = 4
HDR_SIZE -> HDR_SIZE: Probability = 1.00, Count = 3
state,int -> state,int: Probability = 1.00, Count = 3
alt,PredictionContext -> alt,PredictionContext: Probability = 1.00, Count = 3
context,LexerActionExecutor -> context,LexerActionExecutor: Probability = 1.00, Count = 1
alt, -> alt,: Probability = 0.40, Count = 2
alt, -> SemanticContext.NONE: Probability = 0.40, Count = 2
alt, -> context,: Probability = 0.20, Count = 1
context, -> context,: Probability = 1.00, Count = 2
TermsQueryBuilder -> TermsQueryBuilder: Probability = 1.00, Count = 1
CreateDomainRequest -> CreateDomainRequest: Probability = 1.00, Count = 1
merged -> merged: Probability = 1.00, Count = 3
rows.Add -> rows.add: Probability = 1.00, Count = 2
root -> root: Probability = 0.92, Count = 12
root -> hi,: Probability = 0.08, Count = 1
IsFirstCell -> isFirstCell: Probability = 1.00, Count = 1
r.FirstRow -> r.getFirstRow: Probability = 1.00, Count = 2
r.FirstColumn -> r.getFirstColumn: Probability = 1.00, Count = 2
CompleteLayerUploadResponse -> CompleteLayerUploadResult: Probability = 1.00, Count = 1
CompleteLayerUpload -> completeLayerUpload: Probability = 1.00, Count = 1
CompleteLayerUploadRequest -> CompleteLayerUploadRequest: Probability = 1.00, Count = 1
Invoke<CompleteLayerUploadResponse> -> executeCompleteLayerUpload: Probability = 1.00, Count = 1
StopHumanLoopResponse -> StopHumanLoopResult: Probability = 1.00, Count = 1
StopHumanLoop -> stopHumanLoop: Probability = 1.00, Count = 1
StopHumanLoopRequest -> StopHumanLoopRequest: Probability = 1.00, Count = 1
Invoke<StopHumanLoopResponse> -> executeStopHumanLoop: Probability = 1.00, Count = 1
currentSource.sourceCommit -> outCandidate.sourceCommit: Probability = 1.00, Count = 1
GetPerfObject -> getPerfObject: Probability = 1.00, Count = 1
perfObjects.TryGetValue -> perfObjects.get: Probability = 1.00, Count = 1
HindiStemFilter -> HindiStemFilter: Probability = 1.00, Count = 1
java.text.BreakIterator -> BreakIterator: Probability = 1.00, Count = 4
getWordInstance -> getWordInstance: Probability = 1.00, Count = 2
System.Globalization.CultureInfo.CurrentCulture -> Locale.getDefault: Probability = 1.00, Count = 4
UpdatePublicKeyResponse -> UpdatePublicKeyResult: Probability = 1.00, Count = 1
UpdatePublicKey -> updatePublicKey: Probability = 1.00, Count = 1
UpdatePublicKeyRequest -> UpdatePublicKeyRequest: Probability = 1.00, Count = 1
Invoke<UpdatePublicKeyResponse> -> executeUpdatePublicKey: Probability = 1.00, Count = 1
c.ParentCount -> c.getParentCount: Probability = 1.00, Count = 1
DefaultCountry -> getDefaultCountry: Probability = 1.00, Count = 2
CurrentCountry -> getCurrentCountry: Probability = 1.00, Count = 2
DefaultColWidthRecord -> DefaultColWidthRecord: Probability = 1.00, Count = 3
useAnchoringBounds -> useAnchoringBounds: Probability = 1.00, Count = 1
anchoringBounds -> anchoringBounds: Probability = 1.00, Count = 2
useAnchoringBoundsImpl -> useAnchoringBoundsImpl: Probability = 1.00, Count = 1
-2 -> -2: Probability = 1.00, Count = 5
"Error: -> "Error:: Probability = 1.00, Count = 5
Ignoring -> Ignoring: Probability = 1.00, Count = 5
lexical -> lexical: Probability = 1.00, Count = 5
unchanged.", -> unchanged.",: Probability = 1.00, Count = 5
TokenMgrError.INVALID_LEXICAL_STATE -> TokenMgrError.INVALID_LEXICAL_STATE: Probability = 1.00, Count = 5
elsecurLexState -> elsecurLexState: Probability = 1.00, Count = 5
growArray -> growArray: Probability = 1.00, Count = 2
_array[_limit++] -> _limit++: Probability = 1.00, Count = 1
ramBudget -> computeIterations: Probability = 0.25, Count = 1
ramBudget -> ramBudget: Probability = 0.50, Count = 2
ramBudget -> byteBlockCount: Probability = 0.25, Count = 1
valueCount, -> valueCount,: Probability = 1.00, Count = 9
ByteValueCount -> byteValueCount: Probability = 1.00, Count = 3
GetNameRecord -> getNameRecord: Probability = 1.00, Count = 6
Workbook.GetNameRecord -> getWorkbook: Probability = 0.50, Count = 1
Workbook.GetNameRecord -> .getNameRecord: Probability = 0.50, Count = 1
DescribeJobResponse -> DescribeJobResult: Probability = 1.00, Count = 1
DescribeJob -> describeJob: Probability = 1.00, Count = 1
DescribeJobRequest -> DescribeJobRequest: Probability = 1.00, Count = 2
Invoke<DescribeJobResponse> -> executeDescribeJob: Probability = 1.00, Count = 1
EscherPropertyMetaData -> EscherPropertyMetaData: Probability = 1.00, Count = 2
this.description -> this.description: Probability = 1.00, Count = 2
minColorDistance -> minColorDistance: Probability = 1.00, Count = 3
colorDistance -> colorDistance: Probability = 0.38, Count = 3
colorDistance -> unsignedInt: Probability = 0.38, Count = 3
colorDistance -> +Math.abs: Probability = 0.25, Count = 2
GetColor -> getColor: Probability = 1.00, Count = 3
deleteCharAt -> deleteCharAt: Probability = 1.00, Count = 2
deleteCharAt0 -> deleteCharAt0: Probability = 1.00, Count = 2
buffer.append -> buffer.append: Probability = 0.86, Count = 6
buffer.append -> Collection: Probability = 0.14, Count = 1
"ShardIter -> "ShardIter: Probability = 1.00, Count = 1
shard=" -> shard=": Probability = 1.00, Count = 1
shardIndex -> shardIndex: Probability = 1.00, Count = 5
JobParameters -> JobParameters: Probability = 1.00, Count = 2
SeriesLabelsRecord -> SeriesLabelsRecord: Probability = 1.00, Count = 2
field_1_formatFlags -> field_1_formatFlags: Probability = 1.00, Count = 2
DescribeAssessmentRunsResponse -> DescribeAssessmentRunsResult: Probability = 1.00, Count = 1
DescribeAssessmentRuns -> describeAssessmentRuns: Probability = 1.00, Count = 1
DescribeAssessmentRunsRequest -> DescribeAssessmentRunsRequest: Probability = 1.00, Count = 1
Invoke<DescribeAssessmentRunsResponse> -> executeDescribeAssessmentRuns: Probability = 1.00, Count = 1
DescribeClassicLinkInstancesResponse -> DescribeClassicLinkInstancesResult: Probability = 1.00, Count = 1
DescribeClassicLinkInstances -> describeClassicLinkInstances: Probability = 1.00, Count = 1
DescribeClassicLinkInstancesRequest -> DescribeClassicLinkInstancesRequest: Probability = 1.00, Count = 1
Invoke<DescribeClassicLinkInstancesResponse> -> executeDescribeClassicLinkInstances: Probability = 1.00, Count = 1
SeriesIndexRecord -> SeriesIndexRecord: Probability = 1.00, Count = 1
RegisterToWorkMailResponse -> RegisterToWorkMailResult: Probability = 1.00, Count = 1
RegisterToWorkMail -> registerToWorkMail: Probability = 1.00, Count = 1
RegisterToWorkMailRequest -> RegisterToWorkMailRequest: Probability = 1.00, Count = 1
Invoke<RegisterToWorkMailResponse> -> executeRegisterToWorkMail: Probability = 1.00, Count = 1
DeleteCollectionRequest -> DeleteCollectionRequest: Probability = 1.00, Count = 2
"DeleteCollection", -> "DeleteCollection",: Probability = 1.00, Count = 1
"/collections/[CollectionId]" -> "/collections/[CollectionId]": Probability = 1.00, Count = 1
DeleteClusterResponse -> Cluster: Probability = 1.00, Count = 1
DeleteCluster -> deleteCluster: Probability = 1.00, Count = 1
DeleteClusterRequest -> DeleteClusterRequest: Probability = 1.00, Count = 1
Invoke<DeleteClusterResponse> -> executeDeleteCluster: Probability = 1.00, Count = 1
output2 -> common: Probability = 0.20, Count = 2
output2 -> output1,: Probability = 0.20, Count = 2
output2 -> output2: Probability = 0.60, Count = 6
pos1 -> output1: Probability = 0.12, Count = 4
pos1 -> pos2: Probability = 0.12, Count = 4
pos1 -> output2.offset: Probability = 0.12, Count = 4
pos1 -> stopAt1: Probability = 0.12, Count = 4
pos1 -> output1.length,: Probability = 0.06, Count = 2
pos1 -> output2.length: Probability = 0.12, Count = 4
pos1 -> output1.chars[pos1]: Probability = 0.03, Count = 1
pos1 -> output2.chars[pos2]: Probability = 0.03, Count = 1
pos1 -> pos1++: Probability = 0.06, Count = 2
pos1 -> pos2++: Probability = 0.06, Count = 2
pos1 -> output1.chars,: Probability = 0.03, Count = 1
pos1 -> output1.bytes[pos1]: Probability = 0.03, Count = 1
pos1 -> output2.bytes[pos2]: Probability = 0.03, Count = 1
pos1 -> output1.bytes,: Probability = 0.03, Count = 1
stopAt1 -> pos1: Probability = 1.00, Count = 6
output1.Offset -> output1.offset: Probability = 0.38, Count = 6
output1.Offset -> pos1: Probability = 0.25, Count = 4
output1.Offset -> output1.length: Probability = 0.12, Count = 2
output1.Offset -> output1.offset,: Probability = 0.12, Count = 2
output1.Offset -> pos1-output1.offset: Probability = 0.12, Count = 2
GetExclusionsPreviewResponse -> GetExclusionsPreviewResult: Probability = 1.00, Count = 1
GetExclusionsPreview -> getExclusionsPreview: Probability = 1.00, Count = 1
GetExclusionsPreviewRequest -> GetExclusionsPreviewRequest: Probability = 1.00, Count = 1
Invoke<GetExclusionsPreviewResponse> -> executeGetExclusionsPreview: Probability = 1.00, Count = 1
KeepWordFilterFactory -> KeepWordFilterFactory: Probability = 1.00, Count = 1
wordFiles -> wordFiles: Probability = 1.00, Count = 3
uniformSkip -> uniformSkip: Probability = 1.00, Count = 3
c.skip -> c.skip: Probability = 0.62, Count = 8
c.skip -> to.uniformSkip: Probability = 0.23, Count = 3
c.skip -> to.uniformCnt: Probability = 0.15, Count = 2
uniformCnt++ -> uniformCnt++: Probability = 1.00, Count = 2
ListTypedLinkFacetNamesResponse -> ListTypedLinkFacetNamesResult: Probability = 1.00, Count = 1
ListTypedLinkFacetNames -> listTypedLinkFacetNames: Probability = 1.00, Count = 1
ListTypedLinkFacetNamesRequest -> ListTypedLinkFacetNamesRequest: Probability = 1.00, Count = 1
Invoke<ListTypedLinkFacetNamesResponse> -> executeListTypedLinkFacetNames: Probability = 1.00, Count = 1
T[] -> T[]: Probability = 1.00, Count = 5
blockIdx -> blockIdx: Probability = 1.00, Count = 3
blockRef[blockIdx] -> blockRef[blockIdx]: Probability = 1.00, Count = 4
tailBlkIdx -> tailBlkIdx: Probability = 1.00, Count = 4
WillSoonExpire -> willSoonExpire: Probability = 1.00, Count = 2
roleSessionDurationSeconds -> this.roleSessionDurationSeconds: Probability = 0.15, Count = 2
roleSessionDurationSeconds -> roleSessionDurationSeconds: Probability = 0.46, Count = 6
roleSessionDurationSeconds -> 0.95: Probability = 0.08, Count = 1
roleSessionDurationSeconds -> STSAssumeRoleSessionCredentialsProvider: Probability = 0.08, Count = 1
roleSessionDurationSeconds -> withRoleSessionDurationSeconds: Probability = 0.08, Count = 1
roleSessionDurationSeconds -> 900: Probability = 0.08, Count = 1
roleSessionDurationSeconds -> "Assume: Probability = 0.08, Count = 1
expireFact -> expireFact: Probability = 1.00, Count = 3
RemainTicks -> expiration: Probability = 0.33, Count = 2
RemainTicks -> -: Probability = 0.33, Count = 2
RemainTicks -> now: Probability = 0.33, Count = 2
SetSortWithinGroup -> setSortWithinGroup: Probability = 1.00, Count = 1
sortWithinGroup -> sortWithinGroup: Probability = 1.00, Count = 2
this.sortWithinGroup -> this.sortWithinGroup: Probability = 1.00, Count = 1
_iBook.GetExternalName -> _iBook.getExternalName: Probability = 1.00, Count = 1
StrDocValues -> StrDocValues: Probability = 1.00, Count = 1
GetFunctionIndex -> getFunctionIndex: Probability = 1.00, Count = 2
name.GetHashCode -> name.hashCode: Probability = 1.00, Count = 1
body -> body: Probability = 1.00, Count = 9
FileInfo -> Path: Probability = 0.75, Count = 6
FileInfo -> pendingDeletes.contains: Probability = 0.12, Count = 1
FileInfo -> categoriesLineFile: Probability = 0.12, Count = 1
contents.Append -> d.resolve: Probability = 0.09, Count = 1
contents.Append -> ".txt": Probability = 0.09, Count = 1
contents.Append -> contents: Probability = 0.09, Count = 1
contents.Append -> contents.append: Probability = 0.55, Count = 6
contents.Append -> "\n\n": Probability = 0.18, Count = 2
TextWriter -> Writer: Probability = 1.00, Count = 3
Encoding.UTF8 -> StandardCharsets.UTF_8: Probability = 1.00, Count = 3
writer.Write -> writer.write: Probability = 1.00, Count = 2
csq, -> csq,: Probability = 0.57, Count = 4
csq, -> csq.length: Probability = 0.43, Count = 3
PutAccountDedicatedIpWarmupAttributesResponse -> PutAccountDedicatedIpWarmupAttributesResult: Probability = 1.00, Count = 1
PutAccountDedicatedIpWarmupAttributes -> putAccountDedicatedIpWarmupAttributes: Probability = 1.00, Count = 1
PutAccountDedicatedIpWarmupAttributesRequest -> PutAccountDedicatedIpWarmupAttributesRequest: Probability = 1.00, Count = 1
Invoke<PutAccountDedicatedIpWarmupAttributesResponse> -> executePutAccountDedicatedIpWarmupAttributes: Probability = 1.00, Count = 1
equal -> equal: Probability = 1.00, Count = 3
a.Equals -> a.equals: Probability = 1.00, Count = 1
GetUnshallowFlag -> getUnshallowFlag: Probability = 1.00, Count = 1
UNSHALLOW -> UNSHALLOW: Probability = 1.00, Count = 1
DescribeSolutionVersionResponse -> DescribeSolutionVersionResult: Probability = 1.00, Count = 1
DescribeSolutionVersion -> describeSolutionVersion: Probability = 1.00, Count = 1
DescribeSolutionVersionRequest -> DescribeSolutionVersionRequest: Probability = 1.00, Count = 1
Invoke<DescribeSolutionVersionResponse> -> executeDescribeSolutionVersion: Probability = 1.00, Count = 1
GetBuffer -> getBuffer: Probability = 1.00, Count = 2
file.buf -> file.buf: Probability = 1.00, Count = 1
"[/WriteACCESS]\n" -> "[/WRITEACCESS]\n": Probability = 1.00, Count = 1
ModifyFpgaImageAttributeResponse -> ModifyFpgaImageAttributeResult: Probability = 1.00, Count = 1
ModifyFpgaImageAttribute -> modifyFpgaImageAttribute: Probability = 1.00, Count = 1
ModifyFpgaImageAttributeRequest -> ModifyFpgaImageAttributeRequest: Probability = 1.00, Count = 1
Invoke<ModifyFpgaImageAttributeResponse> -> executeModifyFpgaImageAttribute: Probability = 1.00, Count = 1
SubmoduleUpdateCommand -> SubmoduleUpdateCommand: Probability = 1.00, Count = 3
IsKnown -> isKnown: Probability = 1.00, Count = 1
JapaneseTokenizerType.KNOWN -> Type.KNOWN: Probability = 1.00, Count = 1
63L -> 63L: Probability = 1.00, Count = 2
getCodePoint -> getCodePoint: Probability = 1.00, Count = 1
GetDocumentationVersionsResponse -> GetDocumentationVersionsResult: Probability = 1.00, Count = 1
GetDocumentationVersions -> getDocumentationVersions: Probability = 1.00, Count = 1
GetDocumentationVersionsRequest -> GetDocumentationVersionsRequest: Probability = 1.00, Count = 1
Invoke<GetDocumentationVersionsResponse> -> executeGetDocumentationVersions: Probability = 1.00, Count = 1
indexOfKey -> indexOfKey: Probability = 1.00, Count = 1
InErrorRecoveryMode -> inErrorRecoveryMode: Probability = 1.00, Count = 3
NoViableAltException -> NoViableAltException: Probability = 1.00, Count = 3
type: -> type:: Probability = 1.00, Count = 3
ConstantStringFormat -> ConstantStringFormat: Probability = 1.00, Count = 1
java.nio.ReadOnlyDoubleArrayBuffer.copy -> ReadOnlyDoubleArrayBuffer.copy: Probability = 1.00, Count = 1
DeleteCacheClusterResponse -> CacheCluster: Probability = 1.00, Count = 1
DeleteCacheCluster -> deleteCacheCluster: Probability = 1.00, Count = 1
DeleteCacheClusterRequest -> DeleteCacheClusterRequest: Probability = 1.00, Count = 2
Invoke<DeleteCacheClusterResponse> -> executeDeleteCacheCluster: Probability = 1.00, Count = 1
ModifyClusterSnapshotScheduleResponse -> ModifyClusterSnapshotScheduleResult: Probability = 1.00, Count = 1
ModifyClusterSnapshotSchedule -> modifyClusterSnapshotSchedule: Probability = 1.00, Count = 1
ModifyClusterSnapshotScheduleRequest -> ModifyClusterSnapshotScheduleRequest: Probability = 1.00, Count = 1
Invoke<ModifyClusterSnapshotScheduleResponse> -> executeModifyClusterSnapshotSchedule: Probability = 1.00, Count = 1
SetBare -> setBare: Probability = 1.00, Count = 1
bare -> bare: Probability = 0.20, Count = 1
bare -> validateDirs: Probability = 0.20, Count = 1
bare -> directory,: Probability = 0.20, Count = 1
bare -> gitDir,: Probability = 0.20, Count = 1
bare -> this.bare: Probability = 0.20, Count = 1
this.bare -> bare: Probability = 1.00, Count = 2
TermsEnumWithSlice -> TermsEnumWithSlice: Probability = 1.00, Count = 2
ReaderSlice -> ReaderSlice: Probability = 1.00, Count = 3
subSlice -> subSlice: Probability = 0.67, Count = 2
subSlice -> this.subSlice: Probability = 0.33, Count = 1
subSlice.Length -> subSlice.length: Probability = 1.00, Count = 2
SetIdentityPoolRolesResponse -> SetIdentityPoolRolesResult: Probability = 1.00, Count = 1
SetIdentityPoolRoles -> setIdentityPoolRoles: Probability = 1.00, Count = 1
SetIdentityPoolRolesRequest -> SetIdentityPoolRolesRequest: Probability = 1.00, Count = 1
Invoke<SetIdentityPoolRolesResponse> -> executeSetIdentityPoolRoles: Probability = 1.00, Count = 1
this._type -> this._type: Probability = 0.25, Count = 1
this._type -> this.type: Probability = 0.75, Count = 3
GetEndpointResponse -> GetEndpointResult: Probability = 1.00, Count = 1
GetEndpoint -> getEndpoint: Probability = 1.00, Count = 1
GetEndpointRequest -> GetEndpointRequest: Probability = 1.00, Count = 1
Invoke<GetEndpointResponse> -> executeGetEndpoint: Probability = 1.00, Count = 1
added -> added: Probability = 1.00, Count = 5
which -> which: Probability = 1.00, Count = 2
DescribeClustersResponse -> DescribeClustersResult: Probability = 1.00, Count = 2
DescribeClusters -> describeClusters: Probability = 1.00, Count = 3
DescribeClustersRequest -> DescribeClustersRequest: Probability = 1.00, Count = 2
Invoke<DescribeClustersResponse> -> executeDescribeClusters: Probability = 1.00, Count = 1
Reduce -> reduce: Probability = 0.50, Count = 3
Reduce -> Reduce: Probability = 0.50, Count = 3
List<Trie> -> List<Trie>: Probability = 0.50, Count = 2
List<Trie> -> ArrayList<>: Probability = 0.50, Count = 2
h -> h: Probability = 1.00, Count = 4
m_tries -> tries: Probability = 1.00, Count = 2
h.Add -> h.add: Probability = 1.00, Count = 2
trie.Reduce -> trie.reduce: Probability = 1.00, Count = 2
MultiTrie2 -> MultiTrie2: Probability = 1.00, Count = 2
forward -> forward: Probability = 1.00, Count = 6
m.m_tries -> m.tries: Probability = 1.00, Count = 2
GetCategoryLabelsCellRange -> getCategoryLabelsCellRange: Probability = 1.00, Count = 1
GetCellRange -> getCellRange: Probability = 1.00, Count = 2
GetPass -> getPass: Probability = 1.00, Count = 2
es -> es: Probability = 1.00, Count = 6
_entrySet -> entrySet: Probability = 1.00, Count = 4
V>.EntrySet -> EntrySet: Probability = 1.00, Count = 2
FormulaRenderer.ToFormulaString -> FormulaRenderer.toFormulaString: Probability = 1.00, Count = 1
HSSFEvaluationWorkbook.Create -> HSSFEvaluationWorkbook.create: Probability = 1.00, Count = 1
java.nio.CharSequenceAdapter -> CharSequenceAdapter: Probability = 1.00, Count = 2
sequence.SubSequence -> sequence.subSequence: Probability = 1.00, Count = 1
UpdateBusinessReportScheduleResponse -> UpdateBusinessReportScheduleResult: Probability = 1.00, Count = 1
UpdateBusinessReportSchedule -> updateBusinessReportSchedule: Probability = 1.00, Count = 1
UpdateBusinessReportScheduleRequest -> UpdateBusinessReportScheduleRequest: Probability = 1.00, Count = 1
Invoke<UpdateBusinessReportScheduleResponse> -> executeUpdateBusinessReportSchedule: Probability = 1.00, Count = 1
nameBuf, -> nameBuf,: Probability = 0.50, Count = 3
nameBuf, -> namePos,: Probability = 0.50, Count = 3
namePos, -> nameLen,: Probability = 1.00, Count = 3
nameLen, -> mode,byte[]: Probability = 0.33, Count = 1
nameLen, -> idPos: Probability = 0.33, Count = 1
nameLen, -> fmtBuf: Probability = 0.33, Count = 1
idBuf, -> idBuf,: Probability = 0.60, Count = 3
idBuf, -> idPos,: Probability = 0.40, Count = 2
badBuffer -> badBuffer: Probability = 1.00, Count = 2
CreateSpotDatafeedSubscriptionResponse -> CreateSpotDatafeedSubscriptionResult: Probability = 1.00, Count = 1
CreateSpotDatafeedSubscription -> createSpotDatafeedSubscription: Probability = 1.00, Count = 1
Invoke<CreateSpotDatafeedSubscriptionResponse> -> executeCreateSpotDatafeedSubscription: Probability = 1.00, Count = 1
CreateSkillGroupResponse -> CreateSkillGroupResult: Probability = 1.00, Count = 1
CreateSkillGroup -> createSkillGroup: Probability = 1.00, Count = 1
CreateSkillGroupRequest -> CreateSkillGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateSkillGroupResponse> -> executeCreateSkillGroup: Probability = 1.00, Count = 1
GetRightId -> getRightId: Probability = 1.00, Count = 2
RIGHT_ID -> RIGHT_ID: Probability = 0.50, Count = 1
RIGHT_ID -> rightIds[wordId]: Probability = 0.50, Count = 1
SetRetainBody -> setRetainBody: Probability = 1.00, Count = 1
retain -> retain: Probability = 1.00, Count = 2
retainBody -> retainBody: Probability = 1.00, Count = 2
DescribeSessionsResponse -> DescribeSessionsResult: Probability = 1.00, Count = 1
DescribeSessions -> describeSessions: Probability = 1.00, Count = 1
DescribeSessionsRequest -> DescribeSessionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeSessionsResponse> -> executeDescribeSessions: Probability = 1.00, Count = 1
DescribeLocalGatewayVirtualInterfaceGroupsResponse -> DescribeLocalGatewayVirtualInterfaceGroupsResult: Probability = 1.00, Count = 1
DescribeLocalGatewayVirtualInterfaceGroups -> describeLocalGatewayVirtualInterfaceGroups: Probability = 1.00, Count = 1
DescribeLocalGatewayVirtualInterfaceGroupsRequest -> DescribeLocalGatewayVirtualInterfaceGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeLocalGatewayVirtualInterfaceGroupsResponse> -> executeDescribeLocalGatewayVirtualInterfaceGroups: Probability = 1.00, Count = 1
dim, -> dim,: Probability = 1.00, Count = 2
fullPath -> fullPath: Probability = 1.00, Count = 1
string[1 -> String[1+path.length]: Probability = 1.00, Count = 2
fullPath[0] -> fullPath[0]: Probability = 1.00, Count = 1
dim -> dim: Probability = 1.00, Count = 2
fullPath, -> fullPath,: Probability = 0.67, Count = 2
fullPath, -> fullPath.length: Probability = 0.33, Count = 1
SignalResourceResponse -> SignalResourceResult: Probability = 1.00, Count = 1
SignalResource -> signalResource: Probability = 1.00, Count = 1
SignalResourceRequest -> SignalResourceRequest: Probability = 1.00, Count = 1
Invoke<SignalResourceResponse> -> executeSignalResource: Probability = 1.00, Count = 1
GetPasswordVerifier -> getPasswordVerifier: Probability = 1.00, Count = 1
s.Value -> s.value: Probability = 1.00, Count = 3
s.Exists -> s.exists: Probability = 1.00, Count = 3
GetPathFilter -> getPathFilter: Probability = 1.00, Count = 1
CalcCountRecord -> CalcCountRecord: Probability = 1.00, Count = 2
field_1_iterations -> field_1_iterations: Probability = 1.00, Count = 1
DescribeVaultRequest -> DescribeVaultRequest: Probability = 1.00, Count = 2
DeleteTagsForDomainResponse -> DeleteTagsForDomainResult: Probability = 1.00, Count = 1
DeleteTagsForDomain -> deleteTagsForDomain: Probability = 1.00, Count = 1
DeleteTagsForDomainRequest -> DeleteTagsForDomainRequest: Probability = 1.00, Count = 1
Invoke<DeleteTagsForDomainResponse> -> executeDeleteTagsForDomain: Probability = 1.00, Count = 1
SetMeRequest -> SetMeRequest: Probability = 1.00, Count = 1
"SetMe", -> "SetMe",: Probability = 1.00, Count = 1
byteBuffer.putLong -> byteBuffer.putLong: Probability = 1.00, Count = 2
libcore.io.SizeOf.LONG, -> SizeOf.LONG,: Probability = 1.00, Count = 2
DisassociateFleetResponse -> DisassociateFleetResult: Probability = 1.00, Count = 1
DisassociateFleet -> disassociateFleet: Probability = 1.00, Count = 1
DisassociateFleetRequest -> DisassociateFleetRequest: Probability = 1.00, Count = 1
Invoke<DisassociateFleetResponse> -> executeDisassociateFleet: Probability = 1.00, Count = 1
m_input.ToString -> in.toString: Probability = 1.00, Count = 1
FromLong -> fromLong: Probability = 1.00, Count = 1
BytesRefArray -> BytesRefArray: Probability = 1.00, Count = 1
ByteBlockPool.DirectTrackingAllocator -> ByteBlockPool.DirectTrackingAllocator: Probability = 1.00, Count = 1
pool.NextBuffer -> pool.nextBuffer: Probability = 1.00, Count = 1
numBytes -> numBytes: Probability = 0.83, Count = 5
numBytes -> "numBytes: Probability = 0.17, Count = 1
skipped -> SKIP_BUFFER_SIZE: Probability = 0.08, Count = 1
skipped -> skipped: Probability = 0.50, Count = 6
skipped -> step: Probability = 0.17, Count = 2
skipped -> SKIP_BUFFER_SIZE,: Probability = 0.08, Count = 1
skipped -> skipBuffer,: Probability = 0.08, Count = 1
skipped -> step,: Probability = 0.08, Count = 1
list.remove -> list.remove: Probability = 0.50, Count = 1
list.remove -> .remove: Probability = 0.50, Count = 1
CJKBigramFilter -> CJKBigramFilter: Probability = 1.00, Count = 1
flags, -> flags,: Probability = 1.00, Count = 1
FuzzySet -> FuzzySet: Probability = 1.00, Count = 8
GetSetForField -> getSetForField: Probability = 0.50, Count = 1
GetSetForField -> state,FieldInfo: Probability = 0.50, Count = 1
FuzzySet.CreateSetBasedOnQuality -> state.segmentInfo.maxDoc: Probability = 1.00, Count = 1
0.10f -> 0.10f: Probability = 1.00, Count = 1
setLength -> setLength: Probability = 1.00, Count = 2
java.lang.StringIndexOutOfBoundsException -> StringIndexOutOfBoundsException: Probability = 1.00, Count = 4
0: -> 0:: Probability = 1.00, Count = 4
enlargeBuffer -> enlargeBuffer: Probability = 1.00, Count = 2
newData -> newData: Probability = 1.00, Count = 2
Sync -> sync: Probability = 1.00, Count = 8
interrupted -> interrupted: Probability = 1.00, Count = 3
MergeThread -> MergeThread: Probability = 1.00, Count = 2
toSync -> toSync: Probability = 1.00, Count = 3
DescribeIdentityPoolUsageResponse -> DescribeIdentityPoolUsageResult: Probability = 1.00, Count = 1
DescribeIdentityPoolUsage -> describeIdentityPoolUsage: Probability = 1.00, Count = 1
DescribeIdentityPoolUsageRequest -> DescribeIdentityPoolUsageRequest: Probability = 1.00, Count = 1
Invoke<DescribeIdentityPoolUsageResponse> -> executeDescribeIdentityPoolUsage: Probability = 1.00, Count = 1
CreateClusterSecurityGroupResponse -> ClusterSecurityGroup: Probability = 1.00, Count = 1
CreateClusterSecurityGroup -> createClusterSecurityGroup: Probability = 1.00, Count = 1
CreateClusterSecurityGroupRequest -> CreateClusterSecurityGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateClusterSecurityGroupResponse> -> executeCreateClusterSecurityGroup: Probability = 1.00, Count = 1
HSSFShapeGroup -> HSSFShapeGroup: Probability = 1.00, Count = 5
spgrContainer, -> spgrContainer,: Probability = 1.00, Count = 2
_spgrRecord -> _spgrRecord: Probability = 1.00, Count = 2
EscherClientAnchorRecord -> EscherClientAnchorRecord: Probability = 1.00, Count = 2
SoraniStemFilterFactory -> SoraniStemFilterFactory: Probability = 1.00, Count = 1
SetAlbumCoverRequest -> SetAlbumCoverRequest: Probability = 1.00, Count = 1
"SetAlbumCover", -> "SetAlbumCover",: Probability = 1.00, Count = 1
DocumentDescriptor -> DocumentDescriptor: Probability = 0.67, Count = 2
DocumentDescriptor -> descriptor: Probability = 0.33, Count = 1
!sorted -> !sorted: Probability = 1.00, Count = 1
Resort -> resort: Probability = 1.00, Count = 1
Replace -> replace: Probability = 1.00, Count = 4
elementsForKey -> List<V>: Probability = 0.12, Count = 1
elementsForKey -> elementsForKey: Probability = 0.38, Count = 3
elementsForKey -> elementsForKey==null: Probability = 0.12, Count = 1
elementsForKey -> ArrayList<V>: Probability = 0.12, Count = 1
elementsForKey -> super.put: Probability = 0.12, Count = 1
elementsForKey -> elementsForKey.add: Probability = 0.12, Count = 1
DescribeImportSnapshotTasksResponse -> DescribeImportSnapshotTasksResult: Probability = 1.00, Count = 1
DescribeImportSnapshotTasks -> describeImportSnapshotTasks: Probability = 1.00, Count = 1
DescribeImportSnapshotTasksRequest -> DescribeImportSnapshotTasksRequest: Probability = 1.00, Count = 1
Invoke<DescribeImportSnapshotTasksResponse> -> executeDescribeImportSnapshotTasks: Probability = 1.00, Count = 1
ListEventSourcesResponse -> ListEventSourcesResult: Probability = 1.00, Count = 1
ListEventSources -> listEventSources: Probability = 1.00, Count = 1
ListEventSourcesRequest -> ListEventSourcesRequest: Probability = 1.00, Count = 1
Invoke<ListEventSourcesResponse> -> executeListEventSources: Probability = 1.00, Count = 1
factor -> factor: Probability = 1.00, Count = 2
this.factor -> this.factor: Probability = 1.00, Count = 1
modBy -> modBy: Probability = 1.00, Count = 1
DeleteApiMappingResponse -> DeleteApiMappingResult: Probability = 1.00, Count = 1
DeleteApiMapping -> deleteApiMapping: Probability = 1.00, Count = 1
DeleteApiMappingRequest -> DeleteApiMappingRequest: Probability = 1.00, Count = 1
Invoke<DeleteApiMappingResponse> -> executeDeleteApiMapping: Probability = 1.00, Count = 1
AddAndGet -> addAndGet: Probability = 1.00, Count = 2
count.AddAndGet -> count.addAndGet: Probability = 1.00, Count = 1
UpdateTemplateActiveVersionResponse -> UpdateTemplateActiveVersionResult: Probability = 1.00, Count = 1
UpdateTemplateActiveVersion -> updateTemplateActiveVersion: Probability = 1.00, Count = 1
UpdateTemplateActiveVersionRequest -> UpdateTemplateActiveVersionRequest: Probability = 1.00, Count = 1
Invoke<UpdateTemplateActiveVersionResponse> -> executeUpdateTemplateActiveVersion: Probability = 1.00, Count = 1
other.Length -> other.length: Probability = 1.00, Count = 3
char[len -> char[len: Probability = 1.00, Count = 2
ListNodesResponse -> ListNodesResult: Probability = 1.00, Count = 1
ListNodes -> listNodes: Probability = 1.00, Count = 1
ListNodesRequest -> ListNodesRequest: Probability = 1.00, Count = 1
Invoke<ListNodesResponse> -> executeListNodes: Probability = 1.00, Count = 1
DeleteVoiceConnectorStreamingConfigurationResponse -> DeleteVoiceConnectorStreamingConfigurationResult: Probability = 1.00, Count = 1
DeleteVoiceConnectorStreamingConfiguration -> deleteVoiceConnectorStreamingConfiguration: Probability = 1.00, Count = 1
DeleteVoiceConnectorStreamingConfigurationRequest -> DeleteVoiceConnectorStreamingConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DeleteVoiceConnectorStreamingConfigurationResponse> -> executeDeleteVoiceConnectorStreamingConfiguration: Probability = 1.00, Count = 1
"offset -> "offset: Probability = 1.00, Count = 4
bounds" -> bounds": Probability = 1.00, Count = 2
GetSshSessionFactory -> getSshSessionFactory: Probability = 1.00, Count = 1
sch -> sch: Probability = 1.00, Count = 2
CommonGramsFilter -> CommonGramsFilter: Probability = 1.00, Count = 2
commonGrams -> commonGrams: Probability = 1.00, Count = 2
commonWords -> commonWords: Probability = 1.00, Count = 1
DescribeWorkspaceImagesResponse -> DescribeWorkspaceImagesResult: Probability = 1.00, Count = 1
DescribeWorkspaceImages -> describeWorkspaceImages: Probability = 1.00, Count = 1
DescribeWorkspaceImagesRequest -> DescribeWorkspaceImagesRequest: Probability = 1.00, Count = 1
Invoke<DescribeWorkspaceImagesResponse> -> executeDescribeWorkspaceImages: Probability = 1.00, Count = 1
GetItemInternal -> getItemInternal: Probability = 1.00, Count = 1
ListEventBusesResponse -> ListEventBusesResult: Probability = 1.00, Count = 1
ListEventBuses -> listEventBuses: Probability = 1.00, Count = 1
ListEventBusesRequest -> ListEventBusesRequest: Probability = 1.00, Count = 1
Invoke<ListEventBusesResponse> -> executeListEventBuses: Probability = 1.00, Count = 1
QualityStats -> QualityStats: Probability = 0.80, Count = 4
QualityStats -> QualityStats[]: Probability = 0.20, Count = 1
maxGoodPoints, -> maxGoodPoints,: Probability = 1.00, Count = 1
searchTime -> searchTime: Probability = 0.50, Count = 2
searchTime -> maxGoodPoints: Probability = 0.25, Count = 1
searchTime -> this.searchTime: Probability = 0.25, Count = 1
this.maxGoodPoints -> this.maxGoodPoints: Probability = 1.00, Count = 1
this.recallPoints -> this.recallPoints: Probability = 1.00, Count = 1
pAt -> pAt: Probability = 1.00, Count = 1
double[MAX_POINTS -> double[MAX_POINTS+1]: Probability = 1.00, Count = 1
ScoreTerm -> ScoreTerm: Probability = 1.00, Count = 3
this.Boost -> this.boost: Probability = 0.75, Count = 3
this.Boost -> term.bytesEquals: Probability = 0.25, Count = 1
other.Boost -> other.boost: Probability = 0.60, Count = 6
other.Boost -> other.term.compareTo: Probability = 0.20, Count = 2
other.Boost -> this.term: Probability = 0.20, Count = 2
TermComp.Compare -> other.bytes.get: Probability = 1.00, Count = 1
this.Bytes -> this.bytes.get: Probability = 1.00, Count = 1
this.Boost.CompareTo -> Float.compare: Probability = 0.50, Count = 3
this.Boost.CompareTo -> this.boost,: Probability = 0.50, Count = 3
RegenerateSecurityTokenResponse -> RegenerateSecurityTokenResult: Probability = 1.00, Count = 1
RegenerateSecurityToken -> regenerateSecurityToken: Probability = 1.00, Count = 1
RegenerateSecurityTokenRequest -> RegenerateSecurityTokenRequest: Probability = 1.00, Count = 1
Invoke<RegenerateSecurityTokenResponse> -> executeRegenerateSecurityToken: Probability = 1.00, Count = 1
DescribeRootFoldersResponse -> DescribeRootFoldersResult: Probability = 1.00, Count = 1
DescribeRootFolders -> describeRootFolders: Probability = 1.00, Count = 1
DescribeRootFoldersRequest -> DescribeRootFoldersRequest: Probability = 1.00, Count = 1
Invoke<DescribeRootFoldersResponse> -> executeDescribeRootFolders: Probability = 1.00, Count = 1
DeactivateUserResponse -> DeactivateUserResult: Probability = 1.00, Count = 1
DeactivateUser -> deactivateUser: Probability = 1.00, Count = 1
DeactivateUserRequest -> DeactivateUserRequest: Probability = 1.00, Count = 1
Invoke<DeactivateUserResponse> -> executeDeactivateUser: Probability = 1.00, Count = 1
el -> el: Probability = 0.11, Count = 3
el -> l: Probability = 0.15, Count = 4
el -> m: Probability = 0.15, Count = 4
el -> b<el: Probability = 0.04, Count = 1
el -> a>el: Probability = 0.04, Count = 1
el -> el<a: Probability = 0.04, Count = 1
el -> el==a: Probability = 0.07, Count = 2
el -> el==b: Probability = 0.07, Count = 2
el -> intervals.remove: Probability = 0.04, Count = 1
el -> I.a++: Probability = 0.04, Count = 1
el -> I.b--: Probability = 0.04, Count = 1
el -> el>a: Probability = 0.04, Count = 1
el -> el<b: Probability = 0.04, Count = 1
el -> oldb: Probability = 0.07, Count = 2
el -> el-1: Probability = 0.04, Count = 1
el -> el+1,: Probability = 0.04, Count = 1
intervals.Count -> intervals.size: Probability = 1.00, Count = 4
intervals[i] -> intervals.get: Probability = 1.00, Count = 4
ListJobsResponse -> ListJobsResult: Probability = 1.00, Count = 2
ListJobs -> listJobs: Probability = 1.00, Count = 3
Invoke<ListJobsResponse> -> executeListJobs: Probability = 1.00, Count = 1
RussianLightStemFilterFactory -> RussianLightStemFilterFactory: Probability = 1.00, Count = 1
SearchSkillGroupsResponse -> SearchSkillGroupsResult: Probability = 1.00, Count = 1
SearchSkillGroups -> searchSkillGroups: Probability = 1.00, Count = 1
SearchSkillGroupsRequest -> SearchSkillGroupsRequest: Probability = 1.00, Count = 1
Invoke<SearchSkillGroupsResponse> -> executeSearchSkillGroups: Probability = 1.00, Count = 1
GetSortField -> getSortField: Probability = 1.00, Count = 1
bindings, -> bindings,: Probability = 1.00, Count = 1
GetValueSource -> getDoubleValuesSource: Probability = 1.00, Count = 1
.GetSortField -> .getSortField: Probability = 1.00, Count = 1
ModifyHostsResponse -> ModifyHostsResult: Probability = 1.00, Count = 1
ModifyHosts -> modifyHosts: Probability = 1.00, Count = 1
ModifyHostsRequest -> ModifyHostsRequest: Probability = 1.00, Count = 1
Invoke<ModifyHostsResponse> -> executeModifyHosts: Probability = 1.00, Count = 1
SetDate -> setDate: Probability = 1.00, Count = 1
this.date -> this.date: Probability = 1.00, Count = 1
GetAreaEval -> getAreaEval: Probability = 1.00, Count = 1
firstRowIndex, -> firstRowIndex,: Probability = 1.00, Count = 4
firstColumnIndex,int -> firstColumnIndex,int: Probability = 1.00, Count = 1
lastRowIndex, -> lastRowIndex,: Probability = 1.00, Count = 3
lastColumnIndex -> lastColumnIndex: Probability = 1.00, Count = 4
GetRefEvaluatorForCurrentSheet -> getRefEvaluatorForCurrentSheet: Probability = 1.00, Count = 3
firstColumnIndex, -> firstColumnIndex,: Probability = 1.00, Count = 4
lastColumnIndex, -> lastColumnIndex,: Probability = 1.00, Count = 2
CreateContactMethodResponse -> CreateContactMethodResult: Probability = 1.00, Count = 1
CreateContactMethod -> createContactMethod: Probability = 1.00, Count = 1
CreateContactMethodRequest -> CreateContactMethodRequest: Probability = 1.00, Count = 1
Invoke<CreateContactMethodResponse> -> executeCreateContactMethod: Probability = 1.00, Count = 1
ts.GetTime -> ts.getTime: Probability = 0.33, Count = 2
ts.GetTime -> Before: Probability = 0.17, Count = 1
ts.GetTime -> ts: Probability = 0.33, Count = 2
ts.GetTime -> After: Probability = 0.17, Count = 1
Vocabulary.EmptyVocabulary -> VocabularyImpl.EMPTY_VOCABULARY: Probability = 1.00, Count = 2
UpdateFormulasAfterCellShift -> updateFormulasAfterCellShift: Probability = 1.00, Count = 2
shifter, -> shifter,: Probability = 1.00, Count = 5
_cfHeaders.RemoveAt -> _cfHeaders.remove: Probability = 1.00, Count = 2
InsertCell -> insertCell: Probability = 1.00, Count = 1
_valuesAgg.InsertCell -> _valuesAgg.insertCell: Probability = 1.00, Count = 1
r.SetOutputUnigrams -> r.setOutputUnigrams: Probability = 1.00, Count = 1
r.SetTokenSeparator -> r.setTokenSeparator: Probability = 1.00, Count = 1
r.SetFillerToken -> r.setFillerToken: Probability = 1.00, Count = 1
SlopQueryNode -> SlopQueryNode: Probability = 1.00, Count = 1
ReplaceRouteTableAssociationResponse -> ReplaceRouteTableAssociationResult: Probability = 1.00, Count = 1
ReplaceRouteTableAssociation -> replaceRouteTableAssociation: Probability = 1.00, Count = 1
ReplaceRouteTableAssociationRequest -> ReplaceRouteTableAssociationRequest: Probability = 1.00, Count = 1
Invoke<ReplaceRouteTableAssociationResponse> -> executeReplaceRouteTableAssociation: Probability = 1.00, Count = 1
SetObjectIdFromRaw -> setObjectIdFromRaw: Probability = 1.00, Count = 1
ListTablesResponse -> ListTablesResult: Probability = 1.00, Count = 4
ListTables -> listTables: Probability = 1.00, Count = 5
ListTablesRequest -> listTables: Probability = 0.38, Count = 3
ListTablesRequest -> ListTablesRequest: Probability = 0.62, Count = 5
request.Limit -> .withLimit: Probability = 1.00, Count = 2
DeleteDeviceGroupRequest -> DeleteDeviceGroupRequest: Probability = 1.00, Count = 1
"DeleteDeviceGroup" -> "DeleteDeviceGroup": Probability = 1.00, Count = 1
AddRecords -> addRecords: Probability = 1.00, Count = 2
!ReadARecord -> !readARecord: Probability = 1.00, Count = 1
List<String> -> Collection<String>: Probability = 0.67, Count = 8
List<String> -> TreeSet<>: Probability = 0.33, Count = 4
GetSupportedFunctionNames -> getSupportedFunctionNames: Probability = 1.00, Count = 2
lst -> lst: Probability = 0.67, Count = 8
lst -> Collections.unmodifiableCollection: Probability = 0.33, Count = 4
func -> functions.length: Probability = 0.08, Count = 2
func -> func: Probability = 0.76, Count = 19
func -> functions[i]: Probability = 0.08, Count = 2
func -> super.findFunction: Probability = 0.04, Count = 1
func -> Function: Probability = 0.04, Count = 1
Function -> Function: Probability = 1.00, Count = 6
metaData -> metaData: Probability = 1.00, Count = 4
NotImplementedFunction -> NotImplementedFunction: Probability = 1.00, Count = 4
lst.Add -> lst.add: Probability = 0.60, Count = 3
lst.Add -> metaData.getName: Probability = 0.40, Count = 2
"INDIRECT" -> "INDIRECT": Probability = 1.00, Count = 2
CountPendingActivityTasksResponse -> PendingTaskCount: Probability = 1.00, Count = 1
CountPendingActivityTasks -> countPendingActivityTasks: Probability = 1.00, Count = 1
CountPendingActivityTasksRequest -> CountPendingActivityTasksRequest: Probability = 1.00, Count = 1
Invoke<CountPendingActivityTasksResponse> -> executeCountPendingActivityTasks: Probability = 1.00, Count = 1
IList<SegToken> -> List<SegToken>: Probability = 1.00, Count = 2
segGraph -> segGraph: Probability = 1.00, Count = 2
BiSegGraph -> BiSegGraph: Probability = 0.67, Count = 2
BiSegGraph -> biSegGraph: Probability = 0.33, Count = 1
shortPath -> shortPath: Probability = 0.67, Count = 2
shortPath -> biSegGraph.getShortPath: Probability = 0.33, Count = 1
AreaReference -> AreaReference: Probability = 1.00, Count = 3
EnableRuleResponse -> EnableRuleResult: Probability = 1.00, Count = 1
EnableRule -> enableRule: Probability = 1.00, Count = 1
EnableRuleRequest -> EnableRuleRequest: Probability = 1.00, Count = 1
Invoke<EnableRuleResponse> -> executeEnableRule: Probability = 1.00, Count = 1
IsExpectDataAfterPackFooter -> isExpectDataAfterPackFooter: Probability = 1.00, Count = 1
ListIncomingTypedLinksResponse -> ListIncomingTypedLinksResult: Probability = 1.00, Count = 1
ListIncomingTypedLinks -> listIncomingTypedLinks: Probability = 1.00, Count = 1
ListIncomingTypedLinksRequest -> ListIncomingTypedLinksRequest: Probability = 1.00, Count = 1
Invoke<ListIncomingTypedLinksResponse> -> executeListIncomingTypedLinks: Probability = 1.00, Count = 1
RemoveRevNumber -> removeRevNumber: Probability = 1.00, Count = 1
PropertyIDMap.PID_REVNUMBER -> PropertyIDMap.PID_REVNUMBER: Probability = 1.00, Count = 1
DeleteMonitoringScheduleResponse -> DeleteMonitoringScheduleResult: Probability = 1.00, Count = 1
DeleteMonitoringSchedule -> deleteMonitoringSchedule: Probability = 1.00, Count = 1
DeleteMonitoringScheduleRequest -> DeleteMonitoringScheduleRequest: Probability = 1.00, Count = 1
Invoke<DeleteMonitoringScheduleResponse> -> executeDeleteMonitoringSchedule: Probability = 1.00, Count = 1
categoryPath, -> categoryPath,: Probability = 1.00, Count = 2
ordinal -> ordinal: Probability = 0.38, Count = 6
ordinal -> Objects.checkIndex: Probability = 0.06, Count = 1
ordinal -> ordinal,: Probability = 0.06, Count = 1
ordinal -> nextID: Probability = 0.06, Count = 1
ordinal -> getTaxoArrays: Probability = 0.06, Count = 1
ordinal -> .parents: Probability = 0.06, Count = 1
ordinal -> parents.length: Probability = 0.19, Count = 3
ordinal -> "requested: Probability = 0.06, Count = 1
ordinal -> parents[ordinal]: Probability = 0.06, Count = 1
cache.MakeRoomLRU -> cache.makeRoomLRU: Probability = 1.00, Count = 1
PushNewRecursionContext -> pushNewRecursionContext: Probability = 1.00, Count = 1
Writer -> Writer: Probability = 1.00, Count = 1
internal -> (: Probability = 1.00, Count = 2
_ptgs[_offset] -> _ptgs[_offset]: Probability = 1.00, Count = 1
FileRepository -> FileRepository: Probability = 1.00, Count = 4
.Exists -> .exists: Probability = 0.80, Count = 4
.Exists -> Constants.REFTABLE: Probability = 0.20, Count = 1
RepositoryNotFoundException -> RepositoryNotFoundException: Probability = 1.00, Count = 8
GetWeightedFragInfoList -> List<WeightedFragInfo>: Probability = 1.00, Count = 1
CollectionUtil.TimSort -> Collections.sort: Probability = 1.00, Count = 1
ScoreComparer -> ScoreComparator: Probability = 1.00, Count = 1
"epsilon" -> "epsilon": Probability = 1.00, Count = 1
DescribeDBLogFilesResponse -> DescribeDBLogFilesResult: Probability = 1.00, Count = 1
DescribeDBLogFiles -> describeDBLogFiles: Probability = 1.00, Count = 1
DescribeDBLogFilesRequest -> DescribeDBLogFilesRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBLogFilesResponse> -> executeDescribeDBLogFiles: Probability = 1.00, Count = 1
field_1_row -> field_1_row: Probability = 1.00, Count = 4
field_5_hasMultibyte -> field_5_hasMultibyte: Probability = 1.00, Count = 2
StringUtil.ReadCompressedUnicode -> StringUtil.readUnicodeLE: Probability = 0.31, Count = 4
StringUtil.ReadCompressedUnicode -> StringUtil.readCompressedUnicode: Probability = 0.31, Count = 4
StringUtil.ReadCompressedUnicode -> ris,: Probability = 0.23, Count = 3
StringUtil.ReadCompressedUnicode -> field_7_comment_text: Probability = 0.15, Count = 2
SetOurCommitName -> setOurCommitName: Probability = 1.00, Count = 1
ourCommitName -> ourCommitName: Probability = 1.00, Count = 2
this.ourCommitName -> this.ourCommitName: Probability = 1.00, Count = 1
GetCloudFormationStackRecordsResponse -> GetCloudFormationStackRecordsResult: Probability = 1.00, Count = 1
GetCloudFormationStackRecords -> getCloudFormationStackRecords: Probability = 1.00, Count = 1
GetCloudFormationStackRecordsRequest -> GetCloudFormationStackRecordsRequest: Probability = 1.00, Count = 1
Invoke<GetCloudFormationStackRecordsResponse> -> executeGetCloudFormationStackRecords: Probability = 1.00, Count = 1
XPathTokenAnywhereElement -> XPathTokenAnywhereElement: Probability = 1.00, Count = 1
tokenName, -> tokenName,: Probability = 1.00, Count = 3
tokenName -> tokenName: Probability = 1.00, Count = 6
this.tokenType -> this.tokenType: Probability = 1.00, Count = 3
ListDetectorsResponse -> ListDetectorsResult: Probability = 1.00, Count = 1
ListDetectors -> listDetectors: Probability = 1.00, Count = 1
ListDetectorsRequest -> ListDetectorsRequest: Probability = 1.00, Count = 1
Invoke<ListDetectorsResponse> -> executeListDetectors: Probability = 1.00, Count = 1
oldIdx -> oldIdx: Probability = 0.80, Count = 4
oldIdx -> oldIdx--: Probability = 0.20, Count = 1
Intersect -> intersect: Probability = 1.00, Count = 2
crB.LastRow -> crB.getFirstColumn: Probability = 1.00, Count = 3
gt -> gt: Probability = 1.00, Count = 4
_xfs[coffset] -> _xfs[coffset]: Probability = 1.00, Count = 1
IsId -> isId: Probability = 0.67, Count = 2
IsId -> @Nullable: Probability = 0.33, Count = 1
id.Length -> id.length: Probability = 1.00, Count = 4
id[i] -> id.charAt: Probability = 1.00, Count = 2
oneByte -> oneByte: Probability = 1.00, Count = 7
Info -> info: Probability = 1.00, Count = 1
segments[i] -> segments.get: Probability = 0.50, Count = 1
segments[i] -> i: Probability = 0.50, Count = 1
ListDistributionsByWebACLIdResponse -> ListDistributionsByWebACLIdResult: Probability = 1.00, Count = 1
ListDistributionsByWebACLId -> listDistributionsByWebACLId: Probability = 1.00, Count = 1
ListDistributionsByWebACLIdRequest -> ListDistributionsByWebACLIdRequest: Probability = 1.00, Count = 1
Invoke<ListDistributionsByWebACLIdResponse> -> executeListDistributionsByWebACLId: Probability = 1.00, Count = 1
CreateDeliveryStreamResponse -> CreateDeliveryStreamResult: Probability = 1.00, Count = 1
CreateDeliveryStream -> createDeliveryStream: Probability = 1.00, Count = 1
CreateDeliveryStreamRequest -> CreateDeliveryStreamRequest: Probability = 1.00, Count = 1
Invoke<CreateDeliveryStreamResponse> -> executeCreateDeliveryStream: Probability = 1.00, Count = 1
ResetDBParameterGroupResponse -> ResetDBParameterGroupResult: Probability = 1.00, Count = 1
ResetDBParameterGroup -> resetDBParameterGroup: Probability = 1.00, Count = 1
ResetDBParameterGroupRequest -> ResetDBParameterGroupRequest: Probability = 1.00, Count = 2
Invoke<ResetDBParameterGroupResponse> -> executeResetDBParameterGroup: Probability = 1.00, Count = 1
DescribeDocumentClassificationJobResponse -> DescribeDocumentClassificationJobResult: Probability = 1.00, Count = 1
DescribeDocumentClassificationJob -> describeDocumentClassificationJob: Probability = 1.00, Count = 1
DescribeDocumentClassificationJobRequest -> DescribeDocumentClassificationJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeDocumentClassificationJobResponse> -> executeDescribeDocumentClassificationJob: Probability = 1.00, Count = 1
DescribeSecurityGroupsResponse -> DescribeSecurityGroupsResult: Probability = 1.00, Count = 2
DescribeSecurityGroups -> describeSecurityGroups: Probability = 1.00, Count = 3
DescribeSecurityGroupsRequest -> DescribeSecurityGroupsRequest: Probability = 1.00, Count = 2
Invoke<DescribeSecurityGroupsResponse> -> executeDescribeSecurityGroups: Probability = 1.00, Count = 1
UpdateTrafficPolicyInstanceResponse -> UpdateTrafficPolicyInstanceResult: Probability = 1.00, Count = 1
UpdateTrafficPolicyInstance -> updateTrafficPolicyInstance: Probability = 1.00, Count = 1
UpdateTrafficPolicyInstanceRequest -> UpdateTrafficPolicyInstanceRequest: Probability = 1.00, Count = 1
Invoke<UpdateTrafficPolicyInstanceResponse> -> executeUpdateTrafficPolicyInstance: Probability = 1.00, Count = 1
BinaryHunk -> BinaryHunk: Probability = 1.00, Count = 2
GetForwardBinaryHunk -> getForwardBinaryHunk: Probability = 1.00, Count = 1
forwardBinaryHunk -> forwardBinaryHunk: Probability = 1.00, Count = 1
allocateDirect -> allocateDirect: Probability = 1.00, Count = 1
Font -> Font: Probability = 1.00, Count = 4
excelFont -> excelFont: Probability = 1.00, Count = 5
verticalPixelsPerPoint -> font.getSize: Probability = 0.44, Count = 4
verticalPixelsPerPoint -> verticalPixelsPerPoint: Probability = 0.56, Count = 5
FontDetails -> FontDetails: Probability = 1.00, Count = 5
HSSFTextbox -> HSSFTextbox: Probability = 1.00, Count = 7
HSSFFont -> HSSFFont: Probability = 1.00, Count = 3
hssfFont -> hssfFont: Probability = 1.00, Count = 2
luceneSubQueries -> List<Query>: Probability = 0.25, Count = 1
luceneSubQueries -> luceneSubQueries: Probability = 0.75, Count = 3
MakeLuceneSubQueriesField -> makeLuceneSubQueriesField: Probability = 1.00, Count = 4
Occur.MUST -> BooleanClause.Occur.MUST: Probability = 1.00, Count = 2
treeData -> treeData: Probability = 0.67, Count = 2
treeData -> attributesNode: Probability = 0.33, Count = 1
Eof -> eof: Probability = 1.00, Count = 2
EqualsIgnoreCase -> equalsIgnoreCase: Probability = 0.90, Count = 9
EqualsIgnoreCase -> "no",: Probability = 0.10, Count = 1
LookupOrNull -> lookupOrNull: Probability = 1.00, Count = 1
CloneStyleFrom -> cloneStyleFrom: Probability = 1.00, Count = 4
field_1_font_height -> field_1_font_height: Probability = 1.00, Count = 2
field_2_attributes -> field_2_attributes: Probability = 1.00, Count = 2
field_9_zero -> field_9_zero: Probability = 1.00, Count = 3
field_11_font_name -> field_11_font_name: Probability = 1.00, Count = 5
source.field_11_font_name -> source.field_11_font_name: Probability = 1.00, Count = 1
BrazilianStemFilterFactory -> BrazilianStemFilterFactory: Probability = 1.00, Count = 1
LookupCharacterClass -> lookupCharacterClass: Probability = 1.00, Count = 1
characterClassName -> characterClassName: Probability = 1.00, Count = 1
CharacterClass -> CharacterClass.valueOf: Probability = 0.50, Count = 1
CharacterClass -> characterClassName: Probability = 0.50, Count = 1
characterClassName, -> .ordinal: Probability = 1.00, Count = 1
object[capacity] -> Object[capacity]: Probability = 1.00, Count = 1
CreateHumanTaskUiResponse -> CreateHumanTaskUiResult: Probability = 1.00, Count = 1
CreateHumanTaskUi -> createHumanTaskUi: Probability = 1.00, Count = 1
CreateHumanTaskUiRequest -> CreateHumanTaskUiRequest: Probability = 1.00, Count = 1
Invoke<CreateHumanTaskUiResponse> -> executeCreateHumanTaskUi: Probability = 1.00, Count = 1
GetSoftwareUpdatesResponse -> GetSoftwareUpdatesResult: Probability = 1.00, Count = 1
GetSoftwareUpdates -> getSoftwareUpdates: Probability = 1.00, Count = 1
GetSoftwareUpdatesRequest -> GetSoftwareUpdatesRequest: Probability = 1.00, Count = 1
Invoke<GetSoftwareUpdatesResponse> -> executeGetSoftwareUpdates: Probability = 1.00, Count = 1
_index -> _index: Probability = 1.00, Count = 2
ListFlowDefinitionsResponse -> ListFlowDefinitionsResult: Probability = 1.00, Count = 1
ListFlowDefinitions -> listFlowDefinitions: Probability = 1.00, Count = 1
ListFlowDefinitionsRequest -> ListFlowDefinitionsRequest: Probability = 1.00, Count = 1
Invoke<ListFlowDefinitionsResponse> -> executeListFlowDefinitions: Probability = 1.00, Count = 1
CreateDelayedOutput -> createDelayedOutput: Probability = 1.00, Count = 2
LittleEndianByteArrayOutputStream -> LittleEndianByteArrayOutputStream: Probability = 1.00, Count = 6
_buf, -> _buf,: Probability = 1.00, Count = 2
_writeIndex, -> _writeIndex,: Probability = 1.00, Count = 2
_writeIndex -> _writeIndex: Probability = 1.00, Count = 8
current.Get -> current.get: Probability = 1.00, Count = 2
StemmerOverrideFilterFactory -> StemmerOverrideFilterFactory: Probability = 1.00, Count = 1
dictionaryFiles -> dictionaryFiles: Probability = 1.00, Count = 2
31L -> 31L: Probability = 1.00, Count = 2
DeleteDeploymentGroupResponse -> DeleteDeploymentGroupResult: Probability = 1.00, Count = 1
DeleteDeploymentGroup -> deleteDeploymentGroup: Probability = 1.00, Count = 1
DeleteDeploymentGroupRequest -> DeleteDeploymentGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteDeploymentGroupResponse> -> executeDeleteDeploymentGroup: Probability = 1.00, Count = 1
setNamespaceAware -> setNamespaceAware: Probability = 1.00, Count = 1
awareness -> awareness: Probability = 1.00, Count = 2
features.put -> features.put: Probability = 1.00, Count = 2
org.xmlpull.v1.XmlPullParserClass.FEATURE_PROCESS_NAMESPACES, -> XmlPullParser.FEATURE_PROCESS_NAMESPACES,: Probability = 1.00, Count = 1
GetBuiltinFormats -> getBuiltinFormats: Probability = 1.00, Count = 1
builtinFormats -> Arrays.asList: Probability = 0.50, Count = 1
builtinFormats -> _builtinFormats: Probability = 0.50, Count = 1
AuthorizeSnapshotAccessResponse -> Snapshot: Probability = 1.00, Count = 1
AuthorizeSnapshotAccess -> authorizeSnapshotAccess: Probability = 1.00, Count = 1
AuthorizeSnapshotAccessRequest -> AuthorizeSnapshotAccessRequest: Probability = 1.00, Count = 1
Invoke<AuthorizeSnapshotAccessResponse> -> executeAuthorizeSnapshotAccess: Probability = 1.00, Count = 1
Split -> split: Probability = 1.00, Count = 3
CreateIndex -> createIndex: Probability = 0.60, Count = 3
CreateIndex -> config1,: Probability = 0.20, Count = 1
CreateIndex -> dir1,: Probability = 0.20, Count = 1
docsInFirstIndex, -> docsInFirstIndex,: Probability = 0.50, Count = 2
docsInFirstIndex, -> config2,: Probability = 0.25, Count = 1
docsInFirstIndex, -> dir2,: Probability = 0.25, Count = 1
IOUtils.Dispose -> IOUtils.close: Probability = 1.00, Count = 5
java.util.EmptyStackException -> EmptyStackException: Probability = 1.00, Count = 2
elementData[index] -> elementData[index]: Probability = 1.00, Count = 2
ListHealthChecksResponse -> ListHealthChecksResult: Probability = 1.00, Count = 2
ListHealthChecks -> listHealthChecks: Probability = 1.00, Count = 3
ListHealthChecksRequest -> ListHealthChecksRequest: Probability = 1.00, Count = 2
path.Equals -> path.equals: Probability = 1.00, Count = 3
.getPath -> .getPath: Probability = 1.00, Count = 1
ListPhotoStoresRequest -> ListPhotoStoresRequest: Probability = 1.00, Count = 1
"ListPhotoStores", -> "ListPhotoStores",: Probability = 1.00, Count = 1
PutAccessControlRuleResponse -> PutAccessControlRuleResult: Probability = 1.00, Count = 1
PutAccessControlRule -> putAccessControlRule: Probability = 1.00, Count = 1
PutAccessControlRuleRequest -> PutAccessControlRuleRequest: Probability = 1.00, Count = 1
Invoke<PutAccessControlRuleResponse> -> executePutAccessControlRule: Probability = 1.00, Count = 1
StopTrainingEntityRecognizerResponse -> StopTrainingEntityRecognizerResult: Probability = 1.00, Count = 1
StopTrainingEntityRecognizer -> stopTrainingEntityRecognizer: Probability = 1.00, Count = 1
StopTrainingEntityRecognizerRequest -> StopTrainingEntityRecognizerRequest: Probability = 1.00, Count = 1
Invoke<StopTrainingEntityRecognizerResponse> -> executeStopTrainingEntityRecognizer: Probability = 1.00, Count = 1
GetRevisionResponse -> GetRevisionResult: Probability = 1.00, Count = 1
GetRevision -> getRevision: Probability = 1.00, Count = 1
GetRevisionRequest -> GetRevisionRequest: Probability = 1.00, Count = 1
Invoke<GetRevisionResponse> -> executeGetRevision: Probability = 1.00, Count = 1
CreatePicture -> createPicture: Probability = 1.00, Count = 5
anchor, -> anchor,: Probability = 0.83, Count = 5
anchor, -> ClientAnchor: Probability = 0.17, Count = 1
pictureIndex -> pictureIndex: Probability = 0.86, Count = 12
pictureIndex -> createPicture: Probability = 0.07, Count = 1
pictureIndex -> anchor,: Probability = 0.07, Count = 1
RecordSizingVisitor -> RecordSizingVisitor: Probability = 1.00, Count = 1
_totalSize -> _totalSize: Probability = 1.00, Count = 2
UpdateApplicationSettingsResponse -> UpdateApplicationSettingsResult: Probability = 1.00, Count = 1
UpdateApplicationSettings -> updateApplicationSettings: Probability = 1.00, Count = 1
UpdateApplicationSettingsRequest -> UpdateApplicationSettingsRequest: Probability = 1.00, Count = 1
Invoke<UpdateApplicationSettingsResponse> -> executeUpdateApplicationSettings: Probability = 1.00, Count = 1
AddPath -> addPath: Probability = 0.71, Count = 5
AddPath -> path: Probability = 0.29, Count = 2
pathFilters.AddItem -> pathFilters.add: Probability = 1.00, Count = 1
GetRelationalDatabaseLogStreamsResponse -> GetRelationalDatabaseLogStreamsResult: Probability = 1.00, Count = 1
GetRelationalDatabaseLogStreams -> getRelationalDatabaseLogStreams: Probability = 1.00, Count = 1
GetRelationalDatabaseLogStreamsRequest -> GetRelationalDatabaseLogStreamsRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseLogStreamsResponse> -> executeGetRelationalDatabaseLogStreams: Probability = 1.00, Count = 1
DeleteDBInstanceAutomatedBackupResponse -> DBInstanceAutomatedBackup: Probability = 1.00, Count = 1
DeleteDBInstanceAutomatedBackup -> deleteDBInstanceAutomatedBackup: Probability = 1.00, Count = 1
DeleteDBInstanceAutomatedBackupRequest -> DeleteDBInstanceAutomatedBackupRequest: Probability = 1.00, Count = 1
Invoke<DeleteDBInstanceAutomatedBackupResponse> -> executeDeleteDBInstanceAutomatedBackup: Probability = 1.00, Count = 1
MultiSimilarity -> MultiSimilarity: Probability = 1.00, Count = 1
Similarity[] -> Similarity: Probability = 1.00, Count = 1
sims -> sims[]: Probability = 0.50, Count = 1
sims -> sims: Probability = 0.50, Count = 1
this.m_sims -> this.sims: Probability = 1.00, Count = 1
GetNodeResponse -> GetNodeResult: Probability = 1.00, Count = 1
GetNodeRequest -> GetNodeRequest: Probability = 1.00, Count = 1
Invoke<GetNodeResponse> -> executeGetNode: Probability = 1.00, Count = 1
CreateCapacityProviderResponse -> CreateCapacityProviderResult: Probability = 1.00, Count = 1
CreateCapacityProvider -> createCapacityProvider: Probability = 1.00, Count = 1
CreateCapacityProviderRequest -> CreateCapacityProviderRequest: Probability = 1.00, Count = 1
Invoke<CreateCapacityProviderResponse> -> executeCreateCapacityProvider: Probability = 1.00, Count = 1
exc -> NoSuchFileException: Probability = 0.17, Count = 3
exc -> exc: Probability = 0.39, Count = 7
exc -> ext: Probability = 0.22, Count = 4
exc -> primaryExtensions.contains: Probability = 0.11, Count = 2
exc -> files.isEmpty: Probability = 0.11, Count = 2
files.Add -> files.add: Probability = 1.00, Count = 4
files.ToArray -> result: Probability = 1.00, Count = 6
_rc4.XorByte -> readByte: Probability = 1.00, Count = 1
this._value -> _value: Probability = 1.00, Count = 1
GetDeliverabilityDashboardOptionsResponse -> GetDeliverabilityDashboardOptionsResult: Probability = 1.00, Count = 1
GetDeliverabilityDashboardOptions -> getDeliverabilityDashboardOptions: Probability = 1.00, Count = 1
GetDeliverabilityDashboardOptionsRequest -> GetDeliverabilityDashboardOptionsRequest: Probability = 1.00, Count = 1
Invoke<GetDeliverabilityDashboardOptionsResponse> -> executeGetDeliverabilityDashboardOptions: Probability = 1.00, Count = 1
GetBaseForm -> getBaseForm: Probability = 1.00, Count = 2
surface, -> surface[],: Probability = 1.00, Count = 3
DescribeDhcpOptionsResponse -> DescribeDhcpOptionsResult: Probability = 1.00, Count = 2
DescribeDhcpOptions -> describeDhcpOptions: Probability = 1.00, Count = 3
DescribeDhcpOptionsRequest -> DescribeDhcpOptionsRequest: Probability = 1.00, Count = 2
indexCode, -> indexCode,: Probability = 1.00, Count = 1
indexCode -> indexCode: Probability = 1.00, Count = 1
GetPrintArea -> getPrintArea: Probability = 1.00, Count = 1
workbook.GetSpecificBuiltinRecord -> workbook.getSpecificBuiltinRecord: Probability = 1.00, Count = 2
HSSFFormulaParser.ToFormulaString -> HSSFFormulaParser.toFormulaString: Probability = 0.50, Count = 1
HSSFFormulaParser.ToFormulaString -> name.getNameDefinition: Probability = 0.50, Count = 1
CreateLoadBalancerResponse -> CreateLoadBalancerResult: Probability = 1.00, Count = 1
CreateLoadBalancer -> createLoadBalancer: Probability = 1.00, Count = 1
CreateLoadBalancerRequest -> CreateLoadBalancerRequest: Probability = 1.00, Count = 1
Invoke<CreateLoadBalancerResponse> -> executeCreateLoadBalancer: Probability = 1.00, Count = 1
GetVoiceConnectorTerminationHealthResponse -> GetVoiceConnectorTerminationHealthResult: Probability = 1.00, Count = 1
GetVoiceConnectorTerminationHealth -> getVoiceConnectorTerminationHealth: Probability = 1.00, Count = 1
GetVoiceConnectorTerminationHealthRequest -> GetVoiceConnectorTerminationHealthRequest: Probability = 1.00, Count = 1
Invoke<GetVoiceConnectorTerminationHealthResponse> -> executeGetVoiceConnectorTerminationHealth: Probability = 1.00, Count = 1
CRNCountRecord -> CRNCountRecord: Probability = 1.00, Count = 2
field_1_number_crn_records -> field_1_number_crn_records: Probability = 1.00, Count = 4
-field_1_number_crn_records -> -field_1_number_crn_records: Probability = 1.00, Count = 1
field_2_sheet_table_index -> field_2_sheet_table_index: Probability = 1.00, Count = 2
AcsRequest<CommonResponse> -> AcsRequest: Probability = 1.00, Count = 1
BuildRequest -> buildRequest: Probability = 1.00, Count = 1
CommonRoaRequest -> CommonRoaRequest: Probability = 1.00, Count = 3
FillParams -> fillParams: Probability = 1.00, Count = 2
UndeleteAll -> undeleteAll: Probability = 1.00, Count = 1
FakeDeleteAtomicIndexReader -> FakeDeleteLeafIndexReader: Probability = 1.00, Count = 1
r.UndeleteAll -> r.undeleteAll: Probability = 1.00, Count = 1
GetImage -> GetImage: Probability = 1.00, Count = 1
tokenStart, -> tokenStart,: Probability = 1.00, Count = 1
tokenStart -> tokenStart: Probability = 1.00, Count = 1
DescribeComponentResponse -> DescribeComponentResult: Probability = 1.00, Count = 1
DescribeComponent -> describeComponent: Probability = 1.00, Count = 1
DescribeComponentRequest -> DescribeComponentRequest: Probability = 1.00, Count = 1
Invoke<DescribeComponentResponse> -> executeDescribeComponent: Probability = 1.00, Count = 1
GermanNormalizationFilter -> GermanNormalizationFilter: Probability = 1.00, Count = 2
DrillSideways -> DrillSideways: Probability = 1.00, Count = 1
searcher, -> searcher,: Probability = 1.00, Count = 3
FacetsConfig -> FacetsConfig: Probability = 1.00, Count = 3
config, -> config,: Probability = 0.88, Count = 7
config, -> baseQuery,: Probability = 0.12, Count = 1
TaxonomyReader -> TaxonomyReader: Probability = 1.00, Count = 2
this.m_searcher -> taxoReader,SortedSetDocValuesReaderState: Probability = 1.00, Count = 1
taxoReader -> taxoReader,: Probability = 1.00, Count = 1
DescribeAnalysisSchemesResponse -> DescribeAnalysisSchemesResult: Probability = 1.00, Count = 1
DescribeAnalysisSchemes -> describeAnalysisSchemes: Probability = 1.00, Count = 1
DescribeAnalysisSchemesRequest -> DescribeAnalysisSchemesRequest: Probability = 1.00, Count = 1
Invoke<DescribeAnalysisSchemesResponse> -> executeDescribeAnalysisSchemes: Probability = 1.00, Count = 1
PutTargetsResponse -> PutTargetsResult: Probability = 1.00, Count = 1
PutTargets -> putTargets: Probability = 1.00, Count = 1
PutTargetsRequest -> PutTargetsRequest: Probability = 1.00, Count = 1
Invoke<PutTargetsResponse> -> executePutTargets: Probability = 1.00, Count = 1
RevokeIpRulesResponse -> RevokeIpRulesResult: Probability = 1.00, Count = 1
RevokeIpRules -> revokeIpRules: Probability = 1.00, Count = 1
RevokeIpRulesRequest -> RevokeIpRulesRequest: Probability = 1.00, Count = 1
Invoke<RevokeIpRulesResponse> -> executeRevokeIpRules: Probability = 1.00, Count = 1
RegisterGameServerResponse -> RegisterGameServerResult: Probability = 1.00, Count = 1
RegisterGameServer -> registerGameServer: Probability = 1.00, Count = 1
RegisterGameServerRequest -> RegisterGameServerRequest: Probability = 1.00, Count = 1
Invoke<RegisterGameServerResponse> -> executeRegisterGameServer: Probability = 1.00, Count = 1
jt -> jt: Probability = 1.00, Count = 2
size++ -> size++: Probability = 1.00, Count = 2
removeFirst -> removeFirst: Probability = 1.00, Count = 2
CreateContactResponse -> CreateContactResult: Probability = 1.00, Count = 1
CreateContact -> createContact: Probability = 1.00, Count = 1
CreateContactRequest -> CreateContactRequest: Probability = 1.00, Count = 1
Invoke<CreateContactResponse> -> executeCreateContact: Probability = 1.00, Count = 1
Transition[][] -> Transition[][]: Probability = 0.22, Count = 2
Transition[][] -> getSortedTransitions: Probability = 0.11, Count = 1
Transition[][] -> numStates: Probability = 0.11, Count = 1
Transition[][] -> getNumStates: Probability = 0.11, Count = 1
Transition[][] -> Transition[numStates][]: Probability = 0.11, Count = 1
Transition[][] -> s=0: Probability = 0.11, Count = 1
Transition[][] -> s<numStates: Probability = 0.11, Count = 1
Transition[][] -> s++: Probability = 0.11, Count = 1
s.TransitionsArray -> Transition: Probability = 0.29, Count = 2
s.TransitionsArray -> transition: Probability = 0.43, Count = 3
s.TransitionsArray -> getTransition: Probability = 0.14, Count = 1
s.TransitionsArray -> transitions[s][t]: Probability = 0.14, Count = 1
DescribeAccountModificationsResponse -> DescribeAccountModificationsResult: Probability = 1.00, Count = 1
DescribeAccountModifications -> describeAccountModifications: Probability = 1.00, Count = 1
DescribeAccountModificationsRequest -> DescribeAccountModificationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeAccountModificationsResponse> -> executeDescribeAccountModifications: Probability = 1.00, Count = 1
ListSolutionVersionsResponse -> ListSolutionVersionsResult: Probability = 1.00, Count = 1
ListSolutionVersions -> listSolutionVersions: Probability = 1.00, Count = 1
ListSolutionVersionsRequest -> ListSolutionVersionsRequest: Probability = 1.00, Count = 1
Invoke<ListSolutionVersionsResponse> -> executeListSolutionVersions: Probability = 1.00, Count = 1
_numDocsWritten -> numDocsWritten: Probability = 1.00, Count = 3
+" -> +: Probability = 1.00, Count = 5
aborting -> aborting: Probability = 1.00, Count = 2
merge -> merge: Probability = 1.00, Count = 4
prevent -> prevent: Probability = 1.00, Count = 2
corruption" -> corruption": Probability = 1.00, Count = 2
END -> END: Probability = 1.00, Count = 4
NewLine -> newLine: Probability = 1.00, Count = 2
SimpleTextUtil.WriteChecksum -> SimpleTextUtil.writeChecksum: Probability = 1.00, Count = 2
_output -> out,: Probability = 0.40, Count = 4
_output -> _output: Probability = 0.20, Count = 2
_output -> this.maxDoc: Probability = 0.10, Count = 1
_output -> TERMS_CODEC_NAME,: Probability = 0.10, Count = 1
_output -> TERMS_VERSION_CURRENT,state.segmentInfo.getId: Probability = 0.10, Count = 1
_output -> this.postingsWriter.init: Probability = 0.10, Count = 1
VaultNotificationConfig -> VaultNotificationConfig: Probability = 1.00, Count = 3
vaultNotificationConfig -> vaultNotificationConfig: Probability = 1.00, Count = 4
_vaultNotificationConfig -> setVaultNotificationConfig: Probability = 1.00, Count = 2
MultiTrie -> MultiTrie: Probability = 1.00, Count = 2
System.Environment.NewLine -> System.lineSeparator: Probability = 1.00, Count = 1
autoFlush -> autoFlush: Probability = 1.00, Count = 3
UpdateDeploymentResponse -> UpdateDeploymentResult: Probability = 1.00, Count = 1
UpdateDeployment -> updateDeployment: Probability = 1.00, Count = 1
UpdateDeploymentRequest -> UpdateDeploymentRequest: Probability = 1.00, Count = 1
Invoke<UpdateDeploymentResponse> -> executeUpdateDeployment: Probability = 1.00, Count = 1
ListRoutingProfilesResponse -> ListRoutingProfilesResult: Probability = 1.00, Count = 1
ListRoutingProfiles -> listRoutingProfiles: Probability = 1.00, Count = 1
ListRoutingProfilesRequest -> ListRoutingProfilesRequest: Probability = 1.00, Count = 1
Invoke<ListRoutingProfilesResponse> -> executeListRoutingProfiles: Probability = 1.00, Count = 1
IsFormulaSame -> isFormulaSame: Probability = 1.00, Count = 1
field_7_parsed_expr.IsSame -> field_7_parsed_expr.isSame: Probability = 1.00, Count = 1
other.field_7_parsed_expr -> other.field_7_parsed_expr: Probability = 1.00, Count = 1
WordDelimiterFilter.DIGIT -> DIGIT: Probability = 0.25, Count = 1
WordDelimiterFilter.DIGIT -> Character.SURROGATE:: Probability = 0.25, Count = 1
WordDelimiterFilter.DIGIT -> ALPHA|DIGIT: Probability = 0.25, Count = 1
WordDelimiterFilter.DIGIT -> SUBWORD_DELIM: Probability = 0.25, Count = 1
CreateImageResponse -> CreateImageResult: Probability = 1.00, Count = 1
CreateImage -> createImage: Probability = 1.00, Count = 1
CreateImageRequest -> CreateImageRequest: Probability = 1.00, Count = 2
Invoke<CreateImageResponse> -> executeCreateImage: Probability = 1.00, Count = 1
Assume -> assume: Probability = 1.00, Count = 1
assume.AddItem -> assume.add: Probability = 1.00, Count = 1
DeleteTagsResponse -> DeleteTagsResult: Probability = 1.00, Count = 1
DeleteTags -> deleteTags: Probability = 1.00, Count = 1
DeleteTagsRequest -> DeleteTagsRequest: Probability = 1.00, Count = 3
Invoke<DeleteTagsResponse> -> executeDeleteTags: Probability = 1.00, Count = 1
ListTemplateVersionsResponse -> ListTemplateVersionsResult: Probability = 1.00, Count = 1
ListTemplateVersions -> listTemplateVersions: Probability = 1.00, Count = 1
ListTemplateVersionsRequest -> ListTemplateVersionsRequest: Probability = 1.00, Count = 1
Invoke<ListTemplateVersionsResponse> -> executeListTemplateVersions: Probability = 1.00, Count = 1
"Point -> ": Probability = 1.00, Count = 3
DisjunctionMaxQueryBuilder -> DisjunctionMaxQueryBuilder: Probability = 1.00, Count = 1
PutNotificationConfigurationResponse -> PutNotificationConfigurationResult: Probability = 1.00, Count = 1
PutNotificationConfiguration -> putNotificationConfiguration: Probability = 1.00, Count = 1
PutNotificationConfigurationRequest -> PutNotificationConfigurationRequest: Probability = 1.00, Count = 1
Invoke<PutNotificationConfigurationResponse> -> executePutNotificationConfiguration: Probability = 1.00, Count = 1
RecognizeFlowerRequest -> RecognizeFlowerRequest: Probability = 1.00, Count = 1
"RecognizeFlower" -> "RecognizeFlower": Probability = 1.00, Count = 1
resourceDesc, -> resourceDescription,: Probability = 0.40, Count = 2
resourceDesc, -> resourceDesc,: Probability = 0.60, Count = 3
resourceDesc -> resourceDescription: Probability = 0.33, Count = 4
resourceDesc -> minVersion: Probability = 0.33, Count = 4
resourceDesc -> this.maxVersion: Probability = 0.17, Count = 2
resourceDesc -> this.reason: Probability = 0.08, Count = 1
resourceDesc -> resourceDesc: Probability = 0.08, Count = 1
@readonly -> readonly: Probability = 1.00, Count = 3
"can't -> "can't: Probability = 1.00, Count = 3
alter -> alter: Probability = 1.00, Count = 3
readonly -> readonly: Probability = 1.00, Count = 3
IntervalSet" -> IntervalSet": Probability = 1.00, Count = 3
el, -> el,el: Probability = 1.00, Count = 1
DescribeClusterSecurityGroupsResponse -> DescribeClusterSecurityGroupsResult: Probability = 1.00, Count = 1
DescribeClusterSecurityGroups -> describeClusterSecurityGroups: Probability = 1.00, Count = 1
DescribeClusterSecurityGroupsRequest -> DescribeClusterSecurityGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeClusterSecurityGroupsResponse> -> executeDescribeClusterSecurityGroups: Probability = 1.00, Count = 1
ScandinavianFoldingFilter -> ScandinavianFoldingFilter: Probability = 1.00, Count = 2
DeleteNotebookInstanceLifecycleConfigResponse -> DeleteNotebookInstanceLifecycleConfigResult: Probability = 1.00, Count = 1
DeleteNotebookInstanceLifecycleConfig -> deleteNotebookInstanceLifecycleConfig: Probability = 1.00, Count = 1
DeleteNotebookInstanceLifecycleConfigRequest -> DeleteNotebookInstanceLifecycleConfigRequest: Probability = 1.00, Count = 1
Invoke<DeleteNotebookInstanceLifecycleConfigResponse> -> executeDeleteNotebookInstanceLifecycleConfig: Probability = 1.00, Count = 1
DescribeComponentConfigurationRecommendationResponse -> DescribeComponentConfigurationRecommendationResult: Probability = 1.00, Count = 1
DescribeComponentConfigurationRecommendation -> describeComponentConfigurationRecommendation: Probability = 1.00, Count = 1
DescribeComponentConfigurationRecommendationRequest -> DescribeComponentConfigurationRecommendationRequest: Probability = 1.00, Count = 1
Invoke<DescribeComponentConfigurationRecommendationResponse> -> executeDescribeComponentConfigurationRecommendation: Probability = 1.00, Count = 1
SimpleMergedSegmentWarmer -> SimpleMergedSegmentWarmer: Probability = 1.00, Count = 1
this.infoStream -> this.infoStream: Probability = 1.00, Count = 1
ThaiTokenizerFactory -> ThaiTokenizerFactory: Probability = 1.00, Count = 1
or -> or: Probability = 1.00, Count = 13
value: -> value:: Probability = 1.00, Count = 2
SetPrintArea -> setPrintArea: Probability = 1.00, Count = 3
GetSheetName -> getSheetName: Probability = 1.00, Count = 6
"!" -> "!": Probability = 1.00, Count = 3
dictionary.GetPartOfSpeech -> dictionary.getPartOfSpeech: Probability = 1.00, Count = 1
regionId -> regionId: Probability = 1.00, Count = 3
TurkishLowerCaseFilterFactory -> TurkishLowerCaseFilterFactory: Probability = 1.00, Count = 1
Sharpen.Util.DoubleToLongBits -> Double.doubleToLongBits: Probability = 1.00, Count = 2
ShortField -> ShortField: Probability = 1.00, Count = 5
getEffectivePort -> getEffectivePort: Probability = 1.00, Count = 2
GetDiskSnapshotsResponse -> GetDiskSnapshotsResult: Probability = 1.00, Count = 1
GetDiskSnapshots -> getDiskSnapshots: Probability = 1.00, Count = 1
GetDiskSnapshotsRequest -> GetDiskSnapshotsRequest: Probability = 1.00, Count = 1
Invoke<GetDiskSnapshotsResponse> -> executeGetDiskSnapshots: Probability = 1.00, Count = 1
this.lexer -> this.lexer: Probability = 1.00, Count = 1
this.parser -> this.parser: Probability = 1.00, Count = 2
PassageScorer -> PassageScorer: Probability = 1.00, Count = 1
pivot -> pivot: Probability = 1.00, Count = 5
this.k1 -> this.k1: Probability = 1.00, Count = 1
k1 -> k1: Probability = 0.93, Count = 14
k1 -> k2: Probability = 0.07, Count = 1
this.b -> this.b: Probability = 1.00, Count = 1
this.pivot -> this.pivot: Probability = 1.00, Count = 1
CreateTicketRequest -> CreateTicketRequest: Probability = 1.00, Count = 1
"Ccs", -> "Ccs",: Probability = 1.00, Count = 1
"2017-10-01", -> "2017-10-01",: Probability = 1.00, Count = 1
"CreateTicket", -> "CreateTicket",: Probability = 1.00, Count = 1
"ccs", -> "ccs": Probability = 1.00, Count = 1
RejectTransitGatewayVpcAttachmentResponse -> RejectTransitGatewayVpcAttachmentResult: Probability = 1.00, Count = 1
RejectTransitGatewayVpcAttachment -> rejectTransitGatewayVpcAttachment: Probability = 1.00, Count = 1
RejectTransitGatewayVpcAttachmentRequest -> RejectTransitGatewayVpcAttachmentRequest: Probability = 1.00, Count = 1
Invoke<RejectTransitGatewayVpcAttachmentResponse> -> executeRejectTransitGatewayVpcAttachment: Probability = 1.00, Count = 1
DeleteApnsChannelResponse -> DeleteApnsChannelResult: Probability = 1.00, Count = 1
DeleteApnsChannel -> deleteApnsChannel: Probability = 1.00, Count = 1
DeleteApnsChannelRequest -> DeleteApnsChannelRequest: Probability = 1.00, Count = 1
Invoke<DeleteApnsChannelResponse> -> executeDeleteApnsChannel: Probability = 1.00, Count = 1
Entry -> Entry: Probability = 0.50, Count = 4
Entry -> getEntry: Probability = 0.12, Count = 1
Entry -> _byname.get: Probability = 0.12, Count = 1
Entry -> "Workbook": Probability = 0.12, Count = 1
Entry -> document: Probability = 0.12, Count = 1
such -> "The: Probability = 0.25, Count = 2
such -> really: Probability = 0.25, Count = 2
such -> file": Probability = 0.25, Count = 2
such -> document: Probability = 0.25, Count = 2
entry: -> "The: Probability = 0.33, Count = 1
entry: -> really: Probability = 0.33, Count = 1
entry: -> file": Probability = 0.33, Count = 1
FrenchMinimalStemFilter -> FrenchMinimalStemFilter: Probability = 1.00, Count = 1
EXPONENT_OFFSET -> _relativeDecimalExponent+EXPONENT_OFFSET: Probability = 1.00, Count = 1
DescribeInstanceCreditSpecificationsResponse -> DescribeInstanceCreditSpecificationsResult: Probability = 1.00, Count = 1
DescribeInstanceCreditSpecifications -> describeInstanceCreditSpecifications: Probability = 1.00, Count = 1
DescribeInstanceCreditSpecificationsRequest -> DescribeInstanceCreditSpecificationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeInstanceCreditSpecificationsResponse> -> executeDescribeInstanceCreditSpecifications: Probability = 1.00, Count = 1
GetSendQuotaResponse -> GetSendQuotaResult: Probability = 1.00, Count = 2
GetSendQuota -> getSendQuota: Probability = 1.00, Count = 3
GetSendQuotaRequest -> GetSendQuotaRequest: Probability = 1.00, Count = 2
Term.Utf8ToString -> "TERM:: Probability = 0.20, Count = 1
Term.Utf8ToString -> brToString: Probability = 0.40, Count = 2
Term.Utf8ToString -> termBytes: Probability = 0.40, Count = 2
ListFacetNamesResponse -> ListFacetNamesResult: Probability = 1.00, Count = 1
ListFacetNames -> listFacetNames: Probability = 1.00, Count = 1
ListFacetNamesRequest -> ListFacetNamesRequest: Probability = 1.00, Count = 1
Invoke<ListFacetNamesResponse> -> executeListFacetNames: Probability = 1.00, Count = 1
PlainValueCellCacheEntry -> PlainValueCellCacheEntry: Probability = 1.00, Count = 1
PutEmailIdentityFeedbackAttributesResponse -> PutEmailIdentityFeedbackAttributesResult: Probability = 1.00, Count = 1
PutEmailIdentityFeedbackAttributes -> putEmailIdentityFeedbackAttributes: Probability = 1.00, Count = 1
PutEmailIdentityFeedbackAttributesRequest -> PutEmailIdentityFeedbackAttributesRequest: Probability = 1.00, Count = 1
Invoke<PutEmailIdentityFeedbackAttributesResponse> -> executePutEmailIdentityFeedbackAttributes: Probability = 1.00, Count = 1
dbParameterGroupName -> dBParameterGroupName: Probability = 0.70, Count = 7
dbParameterGroupName -> ): Probability = 0.30, Count = 3
_dbParameterGroupName -> setDBParameterGroupName: Probability = 1.00, Count = 4
CreateAnchor -> createAnchor: Probability = 1.00, Count = 1
dy2, -> dy2,: Probability = 1.00, Count = 2
UpdateCacheResult -> updateCacheResult: Probability = 1.00, Count = 1
frame.UpdateFormulaResult -> frame.updateFormulaResult: Probability = 1.00, Count = 1
IEnumerator<string> -> Enumeration<String>: Probability = 0.50, Count = 1
IEnumerator<string> -> keys: Probability = 0.50, Count = 1
base.Init -> super.init: Probability = 1.00, Count = 2
ord.Length, -> ord.length,: Probability = 0.86, Count = 6
ord.Length, -> float[ArrayUtil.oversize: Probability = 0.14, Count = 1
AddFetchRefSpec -> addFetchRefSpec: Probability = 1.00, Count = 1
RefSpec -> RefSpec: Probability = 1.00, Count = 8
fetch.Contains -> fetch.contains: Probability = 1.00, Count = 1
fetch.AddItem -> fetch.add: Probability = 1.00, Count = 1
@string[offset] -> offset: Probability = 0.67, Count = 4
@string[offset] -> string.charAt: Probability = 0.33, Count = 2
LogByteSizeMergePolicy -> LogByteSizeMergePolicy: Probability = 1.00, Count = 1
m_minMergeSize -> minMergeSize: Probability = 1.00, Count = 3
m_maxMergeSize -> maxMergeSize: Probability = 1.00, Count = 3
m_maxMergeSizeForForcedMerge -> maxMergeSizeForForcedMerge: Probability = 1.00, Count = 3
DescribeNetworkInterfacePermissionsResponse -> DescribeNetworkInterfacePermissionsResult: Probability = 1.00, Count = 1
DescribeNetworkInterfacePermissions -> describeNetworkInterfacePermissions: Probability = 1.00, Count = 1
DescribeNetworkInterfacePermissionsRequest -> DescribeNetworkInterfacePermissionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeNetworkInterfacePermissionsResponse> -> executeDescribeNetworkInterfacePermissions: Probability = 1.00, Count = 1
"<wildcard -> "<wildcard: Probability = 1.00, Count = 1
DeleteImageBuilderResponse -> DeleteImageBuilderResult: Probability = 1.00, Count = 1
DeleteImageBuilder -> deleteImageBuilder: Probability = 1.00, Count = 1
DeleteImageBuilderRequest -> DeleteImageBuilderRequest: Probability = 1.00, Count = 1
Invoke<DeleteImageBuilderResponse> -> executeDeleteImageBuilder: Probability = 1.00, Count = 1
requiresCommitBody -> requiresCommitBody: Probability = 1.00, Count = 1
RemoveDocparts -> removeDocparts: Probability = 1.00, Count = 1
PropertyIDMap.PID_DOCPARTS -> PropertyIDMap.PID_DOCPARTS: Probability = 1.00, Count = 1
DescribeConfigurationSetResponse -> DescribeConfigurationSetResult: Probability = 1.00, Count = 1
DescribeConfigurationSet -> describeConfigurationSet: Probability = 1.00, Count = 1
DescribeConfigurationSetRequest -> DescribeConfigurationSetRequest: Probability = 1.00, Count = 1
Invoke<DescribeConfigurationSetResponse> -> executeDescribeConfigurationSet: Probability = 1.00, Count = 1
BufferSize -> BufferSize: Probability = 1.00, Count = 2
Megabytes -> megabytes: Probability = 1.00, Count = 1
mb -> mb: Probability = 1.00, Count = 2
MB -> MB: Probability = 0.80, Count = 4
MB -> useStrongRefs: Probability = 0.20, Count = 1
ListLabelingJobsForWorkteamResponse -> ListLabelingJobsForWorkteamResult: Probability = 1.00, Count = 1
ListLabelingJobsForWorkteam -> listLabelingJobsForWorkteam: Probability = 1.00, Count = 1
ListLabelingJobsForWorkteamRequest -> ListLabelingJobsForWorkteamRequest: Probability = 1.00, Count = 1
Invoke<ListLabelingJobsForWorkteamResponse> -> executeListLabelingJobsForWorkteam: Probability = 1.00, Count = 1
GetKeyPairResponse -> GetKeyPairResult: Probability = 1.00, Count = 1
GetKeyPair -> getKeyPair: Probability = 1.00, Count = 1
GetKeyPairRequest -> GetKeyPairRequest: Probability = 1.00, Count = 1
Invoke<GetKeyPairResponse> -> executeGetKeyPair: Probability = 1.00, Count = 1
EveryNTermSelector -> EveryNTermSelector: Probability = 1.00, Count = 1
DirectTrackingAllocator -> DirectTrackingAllocator: Probability = 1.00, Count = 1
java.nio.ReadWriteShortArrayBuffer -> ReadWriteShortArrayBuffer: Probability = 1.00, Count = 2
DescribeDatasetImportJobResponse -> DescribeDatasetImportJobResult: Probability = 1.00, Count = 1
DescribeDatasetImportJob -> describeDatasetImportJob: Probability = 1.00, Count = 1
DescribeDatasetImportJobRequest -> DescribeDatasetImportJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeDatasetImportJobResponse> -> executeDescribeDatasetImportJob: Probability = 1.00, Count = 1
DescribeClusterSnapshotsResponse -> DescribeClusterSnapshotsResult: Probability = 1.00, Count = 2
DescribeClusterSnapshots -> describeClusterSnapshots: Probability = 1.00, Count = 3
DescribeClusterSnapshotsRequest -> DescribeClusterSnapshotsRequest: Probability = 1.00, Count = 2
PushbackReader -> PushbackReader: Probability = 1.00, Count = 2
char[size] -> char[size]: Probability = 1.00, Count = 3
SingleCellValueArray -> SingleCellValueArray: Probability = 1.00, Count = 1
GetCherryPickedRefs -> getCherryPickedRefs: Probability = 1.00, Count = 1
cherryPickedRefs -> cherryPickedRefs: Probability = 1.00, Count = 3
Destination -> Destination: Probability = 1.00, Count = 2
toAddresses -> toAddresses: Probability = 1.00, Count = 2
_toAddresses -> setToAddresses: Probability = 1.00, Count = 1
GetHostName -> getHostname: Probability = 0.50, Count = 1
GetHostName -> getHostName: Probability = 0.50, Count = 1
hostName -> Host.this.getHostName: Probability = 0.50, Count = 1
hostName -> hostName: Probability = 0.50, Count = 1
SetSize -> setSize: Probability = 1.00, Count = 1
taxonomySize -> taxonomySize: Probability = 1.00, Count = 1
int[taxonomySize] -> int[taxonomySize]: Probability = 1.00, Count = 1
b1 -> b1: Probability = 1.00, Count = 6
b0 -> b0: Probability = 0.50, Count = 6
b0 -> out.write: Probability = 0.50, Count = 6
PathQueryNode -> PathQueryNode: Probability = 1.00, Count = 1
pathElements -> List<QueryText>: Probability = 0.33, Count = 1
pathElements -> pathElements: Probability = 0.67, Count = 2
this.values -> this.values: Probability = 1.00, Count = 2
pathElements.Count -> pathElements.size: Probability = 1.00, Count = 1
more -> "PathQuerynode: Probability = 0.25, Count = 1
more -> more: Probability = 0.75, Count = 3
elements." -> elements.": Probability = 1.00, Count = 1
GetMaxDeltaDepth -> getMaxDeltaDepth: Probability = 1.00, Count = 1
maxDeltaDepth -> maxDeltaDepth: Probability = 1.00, Count = 3
Invoke<ListDomainsResponse> -> executeListDomains: Probability = 1.00, Count = 2
contentLength, -> contentLength,: Probability = 1.00, Count = 1
0.5D -> 0.5D: Probability = 1.00, Count = 2
PutIdentityPolicyResponse -> PutIdentityPolicyResult: Probability = 1.00, Count = 1
PutIdentityPolicy -> putIdentityPolicy: Probability = 1.00, Count = 1
PutIdentityPolicyRequest -> PutIdentityPolicyRequest: Probability = 1.00, Count = 1
Invoke<PutIdentityPolicyResponse> -> executePutIdentityPolicy: Probability = 1.00, Count = 1
java.io.File[] -> File[]: Probability = 1.00, Count = 6
listRoots -> listRoots: Probability = 1.00, Count = 1
java.nio.ReadOnlyCharArrayBuffer -> ReadOnlyCharArrayBuffer: Probability = 1.00, Count = 1
this.keywordAttr -> this.minimumKatakanaLength: Probability = 1.00, Count = 1
this.m_len, -> this.len,: Probability = 1.00, Count = 1
this.m_len -> this.len: Probability = 1.00, Count = 2
nColumns -> nColumns: Probability = 1.00, Count = 5
nRows -> nRows: Probability = 1.00, Count = 5
ConstantValueParser.Parse -> ConstantValueParser.parse: Probability = 1.00, Count = 3
field_5_name_definition -> field_5_name_definition: Probability = 1.00, Count = 4
PorterStemFilter -> PorterStemFilter: Probability = 1.00, Count = 2
LoginProfile -> LoginProfile: Probability = 1.00, Count = 1
SetUnknownFormulaData -> setUnknownFormulaData: Probability = 1.00, Count = 1
formularData -> formularData: Probability = 1.00, Count = 2
m_normMap -> normMap: Probability = 1.00, Count = 1
m_normMap, -> normMap,input: Probability = 1.00, Count = 1
GetNameIx -> getNameIx: Probability = 1.00, Count = 1
_externalNameRecords[definedNameIndex].Ix -> _externalNameRecords[definedNameIndex].getIx: Probability = 1.00, Count = 1
DeleteReceiptRuleResponse -> DeleteReceiptRuleResult: Probability = 1.00, Count = 1
DeleteReceiptRule -> deleteReceiptRule: Probability = 1.00, Count = 1
DeleteReceiptRuleRequest -> DeleteReceiptRuleRequest: Probability = 1.00, Count = 1
Invoke<DeleteReceiptRuleResponse> -> executeDeleteReceiptRule: Probability = 1.00, Count = 1
SortedSetSortField -> SortedSetSortField: Probability = 1.00, Count = 2
selector -> selector: Probability = 1.00, Count = 2
JobFlowDetail -> JobFlowDetail: Probability = 1.00, Count = 1
JobFlowExecutionStatusDetail -> JobFlowExecutionStatusDetail: Probability = 1.00, Count = 2
executionStatusDetail, -> executionStatusDetail,: Probability = 1.00, Count = 1
JobFlowInstancesDetail -> JobFlowInstancesDetail: Probability = 1.00, Count = 2
instances -> instances: Probability = 0.73, Count = 8
instances -> ): Probability = 0.27, Count = 3
_instances -> setInstances: Probability = 1.00, Count = 4
PutVoiceConnectorOriginationResponse -> PutVoiceConnectorOriginationResult: Probability = 1.00, Count = 1
PutVoiceConnectorOrigination -> putVoiceConnectorOrigination: Probability = 1.00, Count = 1
PutVoiceConnectorOriginationRequest -> PutVoiceConnectorOriginationRequest: Probability = 1.00, Count = 1
Invoke<PutVoiceConnectorOriginationResponse> -> executePutVoiceConnectorOrigination: Probability = 1.00, Count = 1
StartDBInstanceResponse -> DBInstance: Probability = 1.00, Count = 1
StartDBInstance -> startDBInstance: Probability = 1.00, Count = 1
StartDBInstanceRequest -> StartDBInstanceRequest: Probability = 1.00, Count = 1
Invoke<StartDBInstanceResponse> -> executeStartDBInstance: Probability = 1.00, Count = 1
DeleteChangeSetResponse -> DeleteChangeSetResult: Probability = 1.00, Count = 1
DeleteChangeSet -> deleteChangeSet: Probability = 1.00, Count = 1
DeleteChangeSetRequest -> DeleteChangeSetRequest: Probability = 1.00, Count = 1
Invoke<DeleteChangeSetResponse> -> executeDeleteChangeSet: Probability = 1.00, Count = 1
DescribeGameSessionDetailsResponse -> DescribeGameSessionDetailsResult: Probability = 1.00, Count = 1
DescribeGameSessionDetails -> describeGameSessionDetails: Probability = 1.00, Count = 1
DescribeGameSessionDetailsRequest -> DescribeGameSessionDetailsRequest: Probability = 1.00, Count = 1
Invoke<DescribeGameSessionDetailsResponse> -> executeDescribeGameSessionDetails: Probability = 1.00, Count = 1
ListDatasetImportJobsResponse -> ListDatasetImportJobsResult: Probability = 1.00, Count = 1
ListDatasetImportJobs -> listDatasetImportJobs: Probability = 1.00, Count = 1
ListDatasetImportJobsRequest -> ListDatasetImportJobsRequest: Probability = 1.00, Count = 1
Invoke<ListDatasetImportJobsResponse> -> executeListDatasetImportJobs: Probability = 1.00, Count = 1
CharBlockArray -> CharBlockArray: Probability = 1.00, Count = 5
this.current.length -> this.current.length: Probability = 1.00, Count = 8
AddBlock -> addBlock: Probability = 1.00, Count = 3
this.current.chars[this.current.length++] -> this.current.chars[this.current.length++]: Probability = 1.00, Count = 1
this.length++ -> this.length++: Probability = 1.00, Count = 1
SimpleBoolFunction -> SimpleBoolFunction: Probability = 1.00, Count = 1
this.m_source -> this.source: Probability = 1.00, Count = 1
ToStringUnquoted -> toStringUnquoted: Probability = 1.00, Count = 3
.URINotSupported, -> .URINotSupported,: Probability = 1.00, Count = 2
readAheadLimit -> readAheadLimit: Probability = 1.00, Count = 1
DeleteClusterSecurityGroupResponse -> DeleteClusterSecurityGroupResult: Probability = 1.00, Count = 1
DeleteClusterSecurityGroup -> deleteClusterSecurityGroup: Probability = 1.00, Count = 1
DeleteClusterSecurityGroupRequest -> DeleteClusterSecurityGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteClusterSecurityGroupResponse> -> executeDeleteClusterSecurityGroup: Probability = 1.00, Count = 1
RebalanceSlotsInGlobalReplicationGroupResponse -> GlobalReplicationGroup: Probability = 1.00, Count = 1
RebalanceSlotsInGlobalReplicationGroup -> rebalanceSlotsInGlobalReplicationGroup: Probability = 1.00, Count = 1
RebalanceSlotsInGlobalReplicationGroupRequest -> RebalanceSlotsInGlobalReplicationGroupRequest: Probability = 1.00, Count = 1
Invoke<RebalanceSlotsInGlobalReplicationGroupResponse> -> executeRebalanceSlotsInGlobalReplicationGroup: Probability = 1.00, Count = 1
DeleteLocalGatewayRouteResponse -> DeleteLocalGatewayRouteResult: Probability = 1.00, Count = 1
DeleteLocalGatewayRoute -> deleteLocalGatewayRoute: Probability = 1.00, Count = 1
DeleteLocalGatewayRouteRequest -> DeleteLocalGatewayRouteRequest: Probability = 1.00, Count = 1
Invoke<DeleteLocalGatewayRouteResponse> -> executeDeleteLocalGatewayRoute: Probability = 1.00, Count = 1
RestoreDBClusterFromSnapshotResponse -> DBCluster: Probability = 1.00, Count = 1
RestoreDBClusterFromSnapshot -> restoreDBClusterFromSnapshot: Probability = 1.00, Count = 1
RestoreDBClusterFromSnapshotRequest -> RestoreDBClusterFromSnapshotRequest: Probability = 1.00, Count = 1
Invoke<RestoreDBClusterFromSnapshotResponse> -> executeRestoreDBClusterFromSnapshot: Probability = 1.00, Count = 1
GetReading -> getReading: Probability = 1.00, Count = 3
CreateDBSnapshotRequest -> CreateDBSnapshotRequest: Probability = 1.00, Count = 2
dbSnapshotIdentifier, -> dBSnapshotIdentifier,: Probability = 1.00, Count = 1
RemoveRoleFromDBInstanceResponse -> RemoveRoleFromDBInstanceResult: Probability = 1.00, Count = 1
RemoveRoleFromDBInstance -> removeRoleFromDBInstance: Probability = 1.00, Count = 1
RemoveRoleFromDBInstanceRequest -> RemoveRoleFromDBInstanceRequest: Probability = 1.00, Count = 1
Invoke<RemoveRoleFromDBInstanceResponse> -> executeRemoveRoleFromDBInstance: Probability = 1.00, Count = 1
eofToken -> eofToken: Probability = 1.00, Count = 4
previousStop -> previousStop: Probability = 0.75, Count = 3
previousStop -> .getStopIndex: Probability = 0.25, Count = 1
_factory.Create -> _factory.create: Probability = 1.00, Count = 2
ITokenSource -> CharStream>: Probability = 1.00, Count = 3
GC -> GC: Probability = 1.00, Count = 2
this.repo -> this.pconfig: Probability = 1.00, Count = 1
this.pm -> this.pm: Probability = 1.00, Count = 3
NullProgressMonitor.INSTANCE -> NullProgressMonitor.INSTANCE: Probability = 1.00, Count = 2
base.setLength -> super.setLength: Probability = 1.00, Count = 1
CancelImportTaskResponse -> CancelImportTaskResult: Probability = 1.00, Count = 1
CancelImportTask -> cancelImportTask: Probability = 1.00, Count = 1
CancelImportTaskRequest -> CancelImportTaskRequest: Probability = 1.00, Count = 1
Invoke<CancelImportTaskResponse> -> executeCancelImportTask: Probability = 1.00, Count = 1
DeleteDiskResponse -> DeleteDiskResult: Probability = 1.00, Count = 1
DeleteDisk -> deleteDisk: Probability = 1.00, Count = 1
DeleteDiskRequest -> DeleteDiskRequest: Probability = 1.00, Count = 1
Invoke<DeleteDiskResponse> -> executeDeleteDisk: Probability = 1.00, Count = 1
DeleteVpcEndpointConnectionNotificationsResponse -> DeleteVpcEndpointConnectionNotificationsResult: Probability = 1.00, Count = 1
DeleteVpcEndpointConnectionNotifications -> deleteVpcEndpointConnectionNotifications: Probability = 1.00, Count = 1
DeleteVpcEndpointConnectionNotificationsRequest -> DeleteVpcEndpointConnectionNotificationsRequest: Probability = 1.00, Count = 1
Invoke<DeleteVpcEndpointConnectionNotificationsResponse> -> executeDeleteVpcEndpointConnectionNotifications: Probability = 1.00, Count = 1
DescribeConfigurationSettingsRequest -> DescribeConfigurationSettingsRequest: Probability = 1.00, Count = 1
next_1 -> LinkedList.Link<ET>: Probability = 0.17, Count = 1
next_1 -> next: Probability = 0.83, Count = 5
CreateConfigurationResponse -> CreateConfigurationResult: Probability = 1.00, Count = 1
CreateConfiguration -> createConfiguration: Probability = 1.00, Count = 1
CreateConfigurationRequest -> CreateConfigurationRequest: Probability = 1.00, Count = 1
Invoke<CreateConfigurationResponse> -> executeCreateConfiguration: Probability = 1.00, Count = 1
ResetClusterParameterGroupResponse -> ResetClusterParameterGroupResult: Probability = 1.00, Count = 1
ResetClusterParameterGroup -> resetClusterParameterGroup: Probability = 1.00, Count = 1
ResetClusterParameterGroupRequest -> ResetClusterParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<ResetClusterParameterGroupResponse> -> executeResetClusterParameterGroup: Probability = 1.00, Count = 1
@in.Mark -> in.mark: Probability = 1.00, Count = 1
SendTemplatedEmailResponse -> SendTemplatedEmailResult: Probability = 1.00, Count = 1
SendTemplatedEmail -> sendTemplatedEmail: Probability = 1.00, Count = 1
SendTemplatedEmailRequest -> SendTemplatedEmailRequest: Probability = 1.00, Count = 1
Invoke<SendTemplatedEmailResponse> -> executeSendTemplatedEmail: Probability = 1.00, Count = 1
SemanticContext.Predicate -> Predicate: Probability = 1.00, Count = 3
p.isCtxDependent -> p.isCtxDependent: Probability = 1.00, Count = 1
positionSpan -> positionSpanIt.hasNext: Probability = 1.00, Count = 1
"base -> "base: Probability = 1.00, Count = 1
ExportRepository -> exportRepository: Probability = 1.00, Count = 1
exports.Put -> exports.put: Probability = 1.00, Count = 1
NameWithDotGit -> nameWithDotGit: Probability = 1.00, Count = 2
l.ToString -> l: Probability = 1.00, Count = 2
NPOI.SS.UserModel.IFormulaEvaluator -> HSSFFormulaEvaluator: Probability = 1.00, Count = 1
CreateFormulaEvaluator -> createFormulaEvaluator: Probability = 1.00, Count = 1
HSSFFormulaEvaluator -> HSSFFormulaEvaluator: Probability = 1.00, Count = 2
this.intervals.SequenceEqual -> this.intervals.equals: Probability = 1.00, Count = 1
other.intervals -> other.intervals: Probability = 1.00, Count = 1
indexIter -> indexIter: Probability = 0.67, Count = 2
indexIter -> getEntryFileMode: Probability = 0.33, Count = 1
wtMode -> wtMode: Probability = 0.40, Count = 6
wtMode -> iMode: Probability = 0.20, Count = 3
wtMode -> indexIter.getEntryFileMode: Probability = 0.07, Count = 1
wtMode -> .isFileMode: Probability = 0.13, Count = 2
wtMode -> FileMode.GITLINK: Probability = 0.07, Count = 1
wtMode -> !getOptions: Probability = 0.13, Count = 2
GetOptions -> getOptions: Probability = 1.00, Count = 2
iMode -> FileMode.TREE: Probability = 0.21, Count = 3
iMode -> FileMode.REGULAR_FILE: Probability = 0.14, Count = 2
iMode -> wtMode&&: Probability = 0.14, Count = 2
iMode -> FileMode.EXECUTABLE_FILE: Probability = 0.14, Count = 2
iMode -> FileMode.GITLINK: Probability = 0.14, Count = 2
iMode -> iMode&&: Probability = 0.14, Count = 2
iMode -> .isDirNoGitLinks: Probability = 0.07, Count = 1
FileMode.REGULAR_FILE -> iMode: Probability = 1.00, Count = 4
FileMode.EXECUTABLE_FILE -> iMode: Probability = 1.00, Count = 2
CreateScheduledActionResponse -> CreateScheduledActionResult: Probability = 1.00, Count = 1
CreateScheduledAction -> createScheduledAction: Probability = 1.00, Count = 1
CreateScheduledActionRequest -> CreateScheduledActionRequest: Probability = 1.00, Count = 1
Invoke<CreateScheduledActionResponse> -> executeCreateScheduledAction: Probability = 1.00, Count = 1
GetConfig -> getConfig: Probability = 1.00, Count = 1
this._enclosing.config -> config: Probability = 1.00, Count = 1
DeleteDistributionRequest -> DeleteDistributionRequest: Probability = 1.00, Count = 2
Pop_AndNot -> pop_andnot: Probability = 1.00, Count = 1
DescribeReservedDBInstancesOfferingsResponse -> DescribeReservedDBInstancesOfferingsResult: Probability = 1.00, Count = 2
DescribeReservedDBInstancesOfferings -> describeReservedDBInstancesOfferings: Probability = 1.00, Count = 3
DescribeReservedDBInstancesOfferingsRequest -> DescribeReservedDBInstancesOfferingsRequest: Probability = 1.00, Count = 2
GetLookaheadName -> getLookaheadName: Probability = 1.00, Count = 1
GetTokenName -> getTokenName: Probability = 1.00, Count = 2
input.LA -> input.LA: Probability = 1.00, Count = 1
GutsRecord -> GutsRecord: Probability = 1.00, Count = 1
field_1_left_row_gutter -> field_1_left_row_gutter: Probability = 1.00, Count = 1
field_2_top_col_gutter -> field_2_top_col_gutter: Probability = 1.00, Count = 1
field_3_row_level_max -> field_3_row_level_max: Probability = 1.00, Count = 1
field_4_col_level_max -> field_4_col_level_max: Probability = 1.00, Count = 1
GermanMinimalStemFilterFactory -> GermanMinimalStemFilterFactory: Probability = 1.00, Count = 1
DescribeActiveReceiptRuleSetResponse -> DescribeActiveReceiptRuleSetResult: Probability = 1.00, Count = 1
DescribeActiveReceiptRuleSet -> describeActiveReceiptRuleSet: Probability = 1.00, Count = 1
DescribeActiveReceiptRuleSetRequest -> DescribeActiveReceiptRuleSetRequest: Probability = 1.00, Count = 1
Invoke<DescribeActiveReceiptRuleSetResponse> -> executeDescribeActiveReceiptRuleSet: Probability = 1.00, Count = 1
GetGeoLocationResponse -> GetGeoLocationResult: Probability = 1.00, Count = 1
GetGeoLocation -> getGeoLocation: Probability = 1.00, Count = 1
GetGeoLocationRequest -> GetGeoLocationRequest: Probability = 1.00, Count = 1
Invoke<GetGeoLocationResponse> -> executeGetGeoLocation: Probability = 1.00, Count = 1
KStemFilterFactory -> KStemFilterFactory: Probability = 1.00, Count = 1
charsLen -> limit,: Probability = 0.27, Count = 4
charsLen -> charsLen: Probability = 0.33, Count = 5
charsLen -> shiftForReplace: Probability = 0.13, Count = 2
charsLen -> text.getChars: Probability = 0.07, Count = 1
charsLen -> charsLen,: Probability = 0.07, Count = 1
charsLen -> charsStart,int: Probability = 0.07, Count = 1
charsLen -> charsStart,: Probability = 0.07, Count = 1
token.Length -> token.setLength: Probability = 1.00, Count = 2
DescribeInternetGatewaysResponse -> DescribeInternetGatewaysResult: Probability = 1.00, Count = 2
DescribeInternetGateways -> describeInternetGateways: Probability = 1.00, Count = 3
DescribeInternetGatewaysRequest -> DescribeInternetGatewaysRequest: Probability = 1.00, Count = 2
ListQualificationTypesResponse -> ListQualificationTypesResult: Probability = 1.00, Count = 1
ListQualificationTypes -> listQualificationTypes: Probability = 1.00, Count = 1
ListQualificationTypesRequest -> ListQualificationTypesRequest: Probability = 1.00, Count = 1
Invoke<ListQualificationTypesResponse> -> executeListQualificationTypes: Probability = 1.00, Count = 1
DetachInstancesResponse -> DetachInstancesResult: Probability = 1.00, Count = 1
DetachInstances -> detachInstances: Probability = 1.00, Count = 1
DetachInstancesRequest -> DetachInstancesRequest: Probability = 1.00, Count = 1
Invoke<DetachInstancesResponse> -> executeDetachInstances: Probability = 1.00, Count = 1
walker.GetRawMode -> walker.getRawMode: Probability = 0.50, Count = 2
walker.GetRawMode -> baseTree: Probability = 0.50, Count = 2
IList<MatchingDocs> -> List<MatchingDocs>: Probability = 0.75, Count = 3
IList<MatchingDocs> -> getMatchingDocs: Probability = 0.25, Count = 1
matchingDocs -> matchingDocs: Probability = 1.00, Count = 4
base.GetMatchingDocs -> super.getMatchingDocs: Probability = 1.00, Count = 2
totalHits -> totalHits: Probability = 0.50, Count = 5
totalHits -> NOT_CALCULATED: Probability = 0.10, Count = 1
totalHits -> MatchingDocs: Probability = 0.10, Count = 1
totalHits -> md.totalHits: Probability = 0.10, Count = 1
totalHits -> sampleSize: Probability = 0.20, Count = 2
md -> md: Probability = 1.00, Count = 3
sampledDocs -> sampledDocs: Probability = 0.60, Count = 3
sampledDocs -> samplingRate: Probability = 0.20, Count = 1
sampledDocs -> createSampledDocs: Probability = 0.20, Count = 1
CreateDataSourceFromS3Response -> CreateDataSourceFromS3Result: Probability = 1.00, Count = 1
CreateDataSourceFromS3 -> createDataSourceFromS3: Probability = 1.00, Count = 1
CreateDataSourceFromS3Request -> CreateDataSourceFromS3Request: Probability = 1.00, Count = 1
Invoke<CreateDataSourceFromS3Response> -> executeCreateDataSourceFromS3: Probability = 1.00, Count = 1
UpdateFleetMetadataResponse -> UpdateFleetMetadataResult: Probability = 1.00, Count = 1
UpdateFleetMetadata -> updateFleetMetadata: Probability = 1.00, Count = 1
UpdateFleetMetadataRequest -> UpdateFleetMetadataRequest: Probability = 1.00, Count = 1
Invoke<UpdateFleetMetadataResponse> -> executeUpdateFleetMetadata: Probability = 1.00, Count = 1
unread -> unread: Probability = 1.00, Count = 5
"Pushback -> "Pushback: Probability = 1.00, Count = 4
full" -> full": Probability = 1.00, Count = 4
buf[--pos] -> buf[--pos]: Probability = 1.00, Count = 2
QueryFaceRequest -> QueryFaceRequest: Probability = 1.00, Count = 1
"QueryFace" -> "QueryFace": Probability = 1.00, Count = 1
ProductDomain -> ProductDomain: Probability = 1.00, Count = 1
product, -> product,: Probability = 1.00, Count = 1
domain -> domain: Probability = 1.00, Count = 2
ProductName -> this.productName: Probability = 1.00, Count = 1
DomainName -> this.domainName: Probability = 1.00, Count = 1
ITaxonomyWriterCache -> TaxonomyWriterCache: Probability = 1.00, Count = 1
DefaultTaxonomyWriterCache -> defaultTaxonomyWriterCache: Probability = 1.00, Count = 1
1024, -> UTF8TaxonomyWriterCache: Probability = 1.00, Count = 1
RunInShell -> runInShell: Probability = 1.00, Count = 1
cmd, -> cmd,: Probability = 1.00, Count = 3
argv -> argv: Probability = 1.00, Count = 2
argv.AddItem -> argv.add: Probability = 0.50, Count = 3
argv.AddItem -> "cmd.exe": Probability = 0.17, Count = 1
argv.AddItem -> "/c": Probability = 0.17, Count = 1
argv.AddItem -> argv.addAll: Probability = 0.17, Count = 1
proc -> proc: Probability = 0.67, Count = 2
proc -> proc.command: Probability = 0.33, Count = 1
NameCommentRecord -> NameCommentRecord: Probability = 1.00, Count = 3
field_4_name_length -> field_4_name_length: Probability = 0.30, Count = 3
field_4_name_length -> field_5_comment_length: Probability = 0.20, Count = 2
field_4_name_length -> ris.readByte: Probability = 0.20, Count = 2
field_4_name_length -> field_6_name_text: Probability = 0.30, Count = 3
field_5_comment_length -> ris,: Probability = 0.14, Count = 1
field_5_comment_length -> field_4_name_length: Probability = 0.29, Count = 2
field_5_comment_length -> field_5_comment_length: Probability = 0.43, Count = 3
field_5_comment_length -> field_7_comment_text: Probability = 0.14, Count = 1
deltaDistance -> deltaDistance: Probability = 1.00, Count = 5
mState -> mState: Probability = 0.57, Count = 8
mState -> STATE_PULL_DECAY: Probability = 0.14, Count = 2
mState -> STATE_PULL: Probability = 0.21, Count = 3
mState -> STATE_RECEDE: Probability = 0.07, Count = 1
mStartTime -> mStartTime: Probability = 1.00, Count = 3
mDuration -> mDuration: Probability = 1.00, Count = 3
mGlowScaleY -> mGlowScaleY: Probability = 0.67, Count = 6
mGlowScaleY -> mGlowAlpha: Probability = 0.33, Count = 3
mPullDistance -> mPullDistance: Probability = 1.00, Count = 5
mEdgeAlpha -> =: Probability = 1.00, Count = 1
mEdgeScaleY -> =: Probability = 1.00, Count = 3
mGlowAlpha -> =: Probability = 1.00, Count = 8
glowChange -> glowChange: Probability = 1.00, Count = 3
SetPath -> setPath: Probability = 1.00, Count = 1
r.path -> r.path: Probability = 1.00, Count = 1
r.rawPath -> r.rawPath: Probability = 1.00, Count = 1
UpdateTemplateResponse -> UpdateTemplateResult: Probability = 1.00, Count = 1
UpdateTemplate -> updateTemplate: Probability = 1.00, Count = 1
UpdateTemplateRequest -> UpdateTemplateRequest: Probability = 1.00, Count = 1
Invoke<UpdateTemplateResponse> -> executeUpdateTemplate: Probability = 1.00, Count = 1
ListDomainDeliverabilityCampaignsResponse -> ListDomainDeliverabilityCampaignsResult: Probability = 1.00, Count = 1
ListDomainDeliverabilityCampaigns -> listDomainDeliverabilityCampaigns: Probability = 1.00, Count = 1
ListDomainDeliverabilityCampaignsRequest -> ListDomainDeliverabilityCampaignsRequest: Probability = 1.00, Count = 1
Invoke<ListDomainDeliverabilityCampaignsResponse> -> executeListDomainDeliverabilityCampaigns: Probability = 1.00, Count = 1
SetReuseObjects -> setReuseObjects: Probability = 1.00, Count = 1
reuseObjects -> reuseObjects: Probability = 1.00, Count = 2
this.reuseObjects -> this.reuseObjects: Probability = 1.00, Count = 1
DiffFormatter -> DiffFormatter: Probability = 1.00, Count = 1
FieldsProducer -> FieldsProducer: Probability = 0.50, Count = 2
FieldsProducer -> fieldsProducer: Probability = 0.25, Count = 1
FieldsProducer -> Lucene84PostingsReader: Probability = 0.25, Count = 1
ListSubscribedWorkteamsResponse -> ListSubscribedWorkteamsResult: Probability = 1.00, Count = 1
ListSubscribedWorkteams -> listSubscribedWorkteams: Probability = 1.00, Count = 1
ListSubscribedWorkteamsRequest -> ListSubscribedWorkteamsRequest: Probability = 1.00, Count = 1
Invoke<ListSubscribedWorkteamsResponse> -> executeListSubscribedWorkteams: Probability = 1.00, Count = 1
BatchDeleteAttributesRequest -> BatchDeleteAttributesRequest: Probability = 1.00, Count = 2
List<DeletableItem> -> java.util.List<DeletableItem>: Probability = 1.00, Count = 1
_items -> setItems: Probability = 1.00, Count = 3
descendingMap -> descendingMap: Probability = 1.00, Count = 1
V>.BoundedMap -> BoundedMap: Probability = 1.00, Count = 2
this._enclosing, -> !ascending,: Probability = 1.00, Count = 2
!this.ascending, -> from,: Probability = 1.00, Count = 2
this.from, -> fromBound,: Probability = 1.00, Count = 2
this.to, -> to,: Probability = 1.00, Count = 1
this.toBound -> toBound: Probability = 1.00, Count = 2
libcore.io.Memory.pokeLong -> Memory.pokeLong: Probability = 1.00, Count = 2
CheckIndex -> checkIndex: Probability = 1.00, Count = 4
127L -> 127L: Probability = 1.00, Count = 2
GetSegmentsResponse -> GetSegmentsResult: Probability = 1.00, Count = 1
GetSegments -> getSegments: Probability = 1.00, Count = 1
GetSegmentsRequest -> GetSegmentsRequest: Probability = 1.00, Count = 1
Invoke<GetSegmentsResponse> -> executeGetSegments: Probability = 1.00, Count = 1
DeleteVpcEndpointsResponse -> DeleteVpcEndpointsResult: Probability = 1.00, Count = 1
DeleteVpcEndpoints -> deleteVpcEndpoints: Probability = 1.00, Count = 1
DeleteVpcEndpointsRequest -> DeleteVpcEndpointsRequest: Probability = 1.00, Count = 1
Invoke<DeleteVpcEndpointsResponse> -> executeDeleteVpcEndpoints: Probability = 1.00, Count = 1
DataFormatter -> sdf.format: Probability = 0.50, Count = 1
DataFormatter -> getDateCellValue: Probability = 0.50, Count = 1
Sharpen.Collections.EmptyList<HunkHeader> -> Collections.emptyList: Probability = 1.00, Count = 1
idBuffer.ToObjectId -> idBuffer.toObjectId: Probability = 1.00, Count = 1
queueNamePrefix -> queueNamePrefix: Probability = 0.80, Count = 4
queueNamePrefix -> .withQueueNamePrefix: Probability = 0.20, Count = 1
_queueNamePrefix -> setQueueNamePrefix: Probability = 1.00, Count = 1
AcceptTransitGatewayPeeringAttachmentResponse -> AcceptTransitGatewayPeeringAttachmentResult: Probability = 1.00, Count = 1
AcceptTransitGatewayPeeringAttachment -> acceptTransitGatewayPeeringAttachment: Probability = 1.00, Count = 1
AcceptTransitGatewayPeeringAttachmentRequest -> AcceptTransitGatewayPeeringAttachmentRequest: Probability = 1.00, Count = 1
Invoke<AcceptTransitGatewayPeeringAttachmentResponse> -> executeAcceptTransitGatewayPeeringAttachment: Probability = 1.00, Count = 1
CharAt -> charAt: Probability = 1.00, Count = 2
subquery -> subquery: Probability = 1.00, Count = 3
0.0f -> 0.0f: Probability = 0.40, Count = 6
0.0f -> 0.f: Probability = 0.27, Count = 4
0.0f -> mEdgeScaleYFinish: Probability = 0.07, Count = 1
0.0f -> mGlowAlphaFinish: Probability = 0.07, Count = 1
0.0f -> mGlowScaleYFinish: Probability = 0.07, Count = 1
0.0f -> AnimationUtils.currentAnimationTimeMillis: Probability = 0.07, Count = 1
0.0f -> RECEDE_TIME: Probability = 0.07, Count = 1
"~" -> "~": Probability = 1.00, Count = 3
ServiceEndpoint -> getContentDisposition: Probability = 1.00, Count = 1
DescribeHsmClientCertificatesResponse -> DescribeHsmClientCertificatesResult: Probability = 1.00, Count = 2
DescribeHsmClientCertificates -> describeHsmClientCertificates: Probability = 1.00, Count = 3
DescribeHsmClientCertificatesRequest -> DescribeHsmClientCertificatesRequest: Probability = 1.00, Count = 2
HighlightTerm -> highlightTerm: Probability = 1.00, Count = 3
originalText, -> originalText,: Probability = 1.00, Count = 5
TokenGroup -> TokenGroup: Probability = 1.00, Count = 4
tokenGroup -> tokenGroup: Probability = 1.00, Count = 3
tokenGroup.TotalScore -> tokenGroup.getTotalScore: Probability = 1.00, Count = 5
originalText.Length -> originalText.length: Probability = 1.00, Count = 3
returnBuffer.Append -> postTag.length: Probability = 0.20, Count = 1
returnBuffer.Append -> returnBuffer.append: Probability = 0.60, Count = 3
returnBuffer.Append -> returnBuffer.toString: Probability = 0.20, Count = 1
preTag -> preTag: Probability = 0.80, Count = 4
preTag -> this.preTag: Probability = 0.20, Count = 1
postTag -> postTag: Probability = 0.83, Count = 5
postTag -> this.postTag: Probability = 0.17, Count = 1
LimitTokenCountFilter -> LimitTokenCountFilter: Probability = 1.00, Count = 2
maxTokenCount, -> maxTokenCount,: Probability = 1.00, Count = 2
"maxTokenCount -> "maxTokenCount: Probability = 1.00, Count = 1
this.maxTokenCount -> this.maxTokenCount: Probability = 1.00, Count = 1
ClassicFilter -> ClassicFilter: Probability = 1.00, Count = 1
IsAllowThin -> isAllowThin: Probability = 1.00, Count = 1
allowThin -> allowThin: Probability = 1.00, Count = 2
m_valueCount -> "Writing: Probability = 1.00, Count = 1
past -> past: Probability = 1.00, Count = 4
GetOnlineServiceResultRequest -> GetOnlineServiceResultRequest: Probability = 1.00, Count = 1
"GetOnlineServiceResult" -> "GetOnlineServiceResult": Probability = 1.00, Count = 1
SetBigFileThreshold -> setBigFileThreshold: Probability = 1.00, Count = 1
bigFileThreshold -> bigFileThreshold: Probability = 1.00, Count = 3
this.bigFileThreshold -> this.bigFileThreshold: Probability = 1.00, Count = 1
codePointCount -> codePointCount: Probability = 1.00, Count = 7
GetCommitNames -> getCommitNames: Probability = 1.00, Count = 1
commitNames -> commitNames: Probability = 1.00, Count = 3
.IsEmpty -> !iterator: Probability = 0.33, Count = 1
.IsEmpty -> .hasNext: Probability = 0.33, Count = 1
.IsEmpty -> .isEmpty: Probability = 0.33, Count = 1
border.IsSet -> border.isSet: Probability = 1.00, Count = 1
DeleteLaunchTemplateVersionsResponse -> DeleteLaunchTemplateVersionsResult: Probability = 1.00, Count = 1
DeleteLaunchTemplateVersions -> deleteLaunchTemplateVersions: Probability = 1.00, Count = 1
DeleteLaunchTemplateVersionsRequest -> DeleteLaunchTemplateVersionsRequest: Probability = 1.00, Count = 1
Invoke<DeleteLaunchTemplateVersionsResponse> -> executeDeleteLaunchTemplateVersions: Probability = 1.00, Count = 1
DescribeDeviceResponse -> DescribeDeviceResult: Probability = 1.00, Count = 1
DescribeDevice -> describeDevice: Probability = 1.00, Count = 1
DescribeDeviceRequest -> DescribeDeviceRequest: Probability = 1.00, Count = 1
Invoke<DescribeDeviceResponse> -> executeDescribeDevice: Probability = 1.00, Count = 1
LookupClass -> TokenizerFactory>: Probability = 0.25, Count = 1
LookupClass -> lookupClass: Probability = 0.50, Count = 2
LookupClass -> TokenFilterFactory>: Probability = 0.25, Count = 1
loader.LookupClass -> loader.lookupClass: Probability = 1.00, Count = 2
CreateParameterGroupResponse -> CreateParameterGroupResult: Probability = 1.00, Count = 1
CreateParameterGroup -> createParameterGroup: Probability = 1.00, Count = 1
CreateParameterGroupRequest -> CreateParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateParameterGroupResponse> -> executeCreateParameterGroup: Probability = 1.00, Count = 1
DescribeReservedCacheNodesOfferingsResponse -> DescribeReservedCacheNodesOfferingsResult: Probability = 1.00, Count = 1
DescribeReservedCacheNodesOfferings -> describeReservedCacheNodesOfferings: Probability = 1.00, Count = 1
DescribeReservedCacheNodesOfferingsRequest -> DescribeReservedCacheNodesOfferingsRequest: Probability = 1.00, Count = 1
Invoke<DescribeReservedCacheNodesOfferingsResponse> -> executeDescribeReservedCacheNodesOfferings: Probability = 1.00, Count = 1
s.Append -> s.append: Probability = 1.00, Count = 6
UpdateTableReplicaAutoScalingResponse -> UpdateTableReplicaAutoScalingResult: Probability = 1.00, Count = 1
UpdateTableReplicaAutoScaling -> updateTableReplicaAutoScaling: Probability = 1.00, Count = 1
UpdateTableReplicaAutoScalingRequest -> UpdateTableReplicaAutoScalingRequest: Probability = 1.00, Count = 1
Invoke<UpdateTableReplicaAutoScalingResponse> -> executeUpdateTableReplicaAutoScaling: Probability = 1.00, Count = 1
ValidateConfigurationResponse -> ValidateConfigurationResult: Probability = 1.00, Count = 1
ValidateConfiguration -> validateConfiguration: Probability = 1.00, Count = 1
ValidateConfigurationRequest -> ValidateConfigurationRequest: Probability = 1.00, Count = 1
Invoke<ValidateConfigurationResponse> -> executeValidateConfiguration: Probability = 1.00, Count = 1
ModifyReservedInstancesResponse -> ModifyReservedInstancesResult: Probability = 1.00, Count = 1
ModifyReservedInstances -> modifyReservedInstances: Probability = 1.00, Count = 1
ModifyReservedInstancesRequest -> ModifyReservedInstancesRequest: Probability = 1.00, Count = 1
Invoke<ModifyReservedInstancesResponse> -> executeModifyReservedInstances: Probability = 1.00, Count = 1
DeleteIdentityResponse -> DeleteIdentityResult: Probability = 1.00, Count = 1
DeleteIdentity -> deleteIdentity: Probability = 1.00, Count = 1
DeleteIdentityRequest -> DeleteIdentityRequest: Probability = 1.00, Count = 1
Invoke<DeleteIdentityResponse> -> executeDeleteIdentity: Probability = 1.00, Count = 1
Config -> Config: Probability = 1.00, Count = 9
cfg -> cfg: Probability = 1.00, Count = 2
FromConfig -> fromConfig: Probability = 1.00, Count = 2
DeleteBrokerResponse -> DeleteBrokerResult: Probability = 1.00, Count = 1
DeleteBroker -> deleteBroker: Probability = 1.00, Count = 1
DeleteBrokerRequest -> DeleteBrokerRequest: Probability = 1.00, Count = 1
Invoke<DeleteBrokerResponse> -> executeDeleteBroker: Probability = 1.00, Count = 1
Idf -> idfExplain: Probability = 1.00, Count = 3
collectionStats, -> collectionStats,: Probability = 1.00, Count = 2
df, -> idfExplain: Probability = 1.00, Count = 3
idf -> idf: Probability = 1.00, Count = 4
idf, -> idfExplain.getValue: Probability = 1.00, Count = 1
docFreq=" -> .floatValue: Probability = 1.00, Count = 2
AddConditionalFormatting -> addConditionalFormatting: Probability = 0.67, Count = 14
AddConditionalFormatting -> regions,HSSFConditionalFormattingRule: Probability = 0.10, Count = 2
AddConditionalFormatting -> regions,: Probability = 0.14, Count = 3
AddConditionalFormatting -> HSSFConditionalFormattingRule[]: Probability = 0.05, Count = 1
AddConditionalFormatting -> regions,ConditionalFormattingRule: Probability = 0.05, Count = 1
CellRangeAddress[] -> CellRangeAddress[]: Probability = 1.00, Count = 13
rule1 -> rule1: Probability = 1.00, Count = 7
HSSFConditionalFormattingRule[] -> HSSFConditionalFormattingRule[]: Probability = 0.67, Count = 2
HSSFConditionalFormattingRule[] -> HSSFConditionalFormattingRule: Probability = 0.33, Count = 1
Hash1 -> hash1: Probability = 1.00, Count = 3
PutAnomalyDetectorResponse -> PutAnomalyDetectorResult: Probability = 1.00, Count = 1
PutAnomalyDetector -> putAnomalyDetector: Probability = 1.00, Count = 1
PutAnomalyDetectorRequest -> PutAnomalyDetectorRequest: Probability = 1.00, Count = 1
Invoke<PutAnomalyDetectorResponse> -> executePutAnomalyDetector: Probability = 1.00, Count = 1
AssociateTransitGatewayRouteTableResponse -> AssociateTransitGatewayRouteTableResult: Probability = 1.00, Count = 1
AssociateTransitGatewayRouteTable -> associateTransitGatewayRouteTable: Probability = 1.00, Count = 1
AssociateTransitGatewayRouteTableRequest -> AssociateTransitGatewayRouteTableRequest: Probability = 1.00, Count = 1
Invoke<AssociateTransitGatewayRouteTableResponse> -> executeAssociateTransitGatewayRouteTable: Probability = 1.00, Count = 1
GetIpV4Association -> List<String>: Probability = 0.50, Count = 1
GetIpV4Association -> getIPv4Association: Probability = 0.50, Count = 1
publicIp -> publicIp: Probability = 0.82, Count = 9
publicIp -> ): Probability = 0.18, Count = 2
CultureInfo.InvariantCulture, -> EC2MetadataUtils.getItems: Probability = 1.00, Count = 1
ipv4-associations/ -> EC2_METADATA_ROOT: Probability = 0.50, Count = 1
ipv4-associations/ -> path+: Probability = 0.50, Count = 1
_path, -> "ipv4-associations/": Probability = 1.00, Count = 1
field_1_recalc -> field_1_recalc: Probability = 1.00, Count = 2
AddConsumingCell -> addConsumingCell: Probability = 1.00, Count = 1
FormulaCellCacheEntry -> FormulaCellCacheEntry: Probability = 0.71, Count = 5
FormulaCellCacheEntry -> getOrCreateFormulaCellEntry: Probability = 0.14, Count = 1
FormulaCellCacheEntry -> _formulaCellCache.get: Probability = 0.14, Count = 1
cellLoc -> cellLoc: Probability = 1.00, Count = 2
_consumingCells.Add -> _consumingCells.add: Probability = 1.00, Count = 1
SingleValueVector -> SingleValueVector: Probability = 1.00, Count = 1
DeleteMethod -> deleteMethod: Probability = 1.00, Count = 1
DeleteMethodRequest -> DeleteMethodRequest: Probability = 1.00, Count = 1
Invoke<DeleteMethodResponse> -> executeDeleteMethod: Probability = 1.00, Count = 1
simpleCompareResult -> simpleCompareResult: Probability = 1.00, Count = 3
LessThan -> LESS_THAN: Probability = 1.00, Count = 2
GreaterThan -> GREATER_THAN: Probability = 1.00, Count = 1
Equal -> EQUAL: Probability = 1.00, Count = 2
CreatePresetResponse -> CreatePresetResult: Probability = 1.00, Count = 1
CreatePreset -> createPreset: Probability = 1.00, Count = 1
CreatePresetRequest -> CreatePresetRequest: Probability = 1.00, Count = 1
Invoke<CreatePresetResponse> -> executeCreatePreset: Probability = 1.00, Count = 1
HTMLStripCharFilter -> HTMLStripCharFilter: Probability = 1.00, Count = 4
charFilter -> charFilter: Probability = 1.00, Count = 4
escapedTags -> escapedTags: Probability = 1.00, Count = 2
SetCurrent -> setCurrent: Probability = 1.00, Count = 2
m_current -> current: Probability = 1.00, Count = 2
m_bra -> bra: Probability = 1.00, Count = 2
m_ket -> ket: Probability = 1.00, Count = 2
DisableTransitGatewayRouteTablePropagationResponse -> DisableTransitGatewayRouteTablePropagationResult: Probability = 1.00, Count = 1
DisableTransitGatewayRouteTablePropagation -> disableTransitGatewayRouteTablePropagation: Probability = 1.00, Count = 1
DisableTransitGatewayRouteTablePropagationRequest -> DisableTransitGatewayRouteTablePropagationRequest: Probability = 1.00, Count = 1
Invoke<DisableTransitGatewayRouteTablePropagationResponse> -> executeDisableTransitGatewayRouteTablePropagation: Probability = 1.00, Count = 1
UpdateTagsForDomainResponse -> UpdateTagsForDomainResult: Probability = 1.00, Count = 1
UpdateTagsForDomain -> updateTagsForDomain: Probability = 1.00, Count = 1
UpdateTagsForDomainRequest -> UpdateTagsForDomainRequest: Probability = 1.00, Count = 1
Invoke<UpdateTagsForDomainResponse> -> executeUpdateTagsForDomain: Probability = 1.00, Count = 1
peeledObjectId -> peeledObjectId: Probability = 1.00, Count = 1
ILexerAction[] -> LexerAction[]: Probability = 1.00, Count = 2
MurmurHash.Finish -> MurmurHash.finish: Probability = 1.00, Count = 1
lexerActions.Length -> lexerActions.length: Probability = 1.00, Count = 2
SetAlarmStateResponse -> SetAlarmStateResult: Probability = 1.00, Count = 1
SetAlarmState -> setAlarmState: Probability = 1.00, Count = 1
SetAlarmStateRequest -> SetAlarmStateRequest: Probability = 1.00, Count = 1
Invoke<SetAlarmStateResponse> -> executeSetAlarmState: Probability = 1.00, Count = 1
configFile -> configFile: Probability = 1.00, Count = 1
DescribeUsersResponse -> DescribeUsersResult: Probability = 1.00, Count = 1
DescribeUsers -> describeUsers: Probability = 1.00, Count = 1
DescribeUsersRequest -> DescribeUsersRequest: Probability = 1.00, Count = 1
Invoke<DescribeUsersResponse> -> executeDescribeUsers: Probability = 1.00, Count = 1
PagedMutable -> PagedMutable: Probability = 1.00, Count = 1
pageSize, -> pageSize,: Probability = 0.75, Count = 3
pageSize, -> PackedInts.fastestFormatAndBits: Probability = 0.25, Count = 1
bitsPerValue, -> bitsPerValue,: Probability = 1.00, Count = 4
FillPages -> fillPages: Probability = 1.00, Count = 1
field_4_cell_ranges -> createEmpty: Probability = 1.00, Count = 1
GetDataSourceResponse -> GetDataSourceResult: Probability = 1.00, Count = 1
GetDataSource -> getDataSource: Probability = 1.00, Count = 1
GetDataSourceRequest -> GetDataSourceRequest: Probability = 1.00, Count = 1
Invoke<GetDataSourceResponse> -> executeGetDataSource: Probability = 1.00, Count = 1
field_1_margin -> field_1_margin: Probability = 1.00, Count = 4
DeleteProfilingGroupResponse -> DeleteProfilingGroupResult: Probability = 1.00, Count = 1
DeleteProfilingGroup -> deleteProfilingGroup: Probability = 1.00, Count = 1
DeleteProfilingGroupRequest -> DeleteProfilingGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteProfilingGroupResponse> -> executeDeleteProfilingGroup: Probability = 1.00, Count = 1
setup -> setup: Probability = 1.00, Count = 1
progress, -> progress,: Probability = 1.00, Count = 1
fromUser -> fromUser: Probability = 1.00, Count = 2
this.mId -> mId: Probability = 1.00, Count = 1
this.mProgress -> mProgress: Probability = 1.00, Count = 1
progress -> progress: Probability = 1.00, Count = 1
this.mFromUser -> mFromUser: Probability = 1.00, Count = 1
FuncVarPtg -> FuncVarPtg: Probability = 0.71, Count = 5
FuncVarPtg -> "SUBTOTAL".equals: Probability = 0.14, Count = 1
FuncVarPtg -> f.getName: Probability = 0.14, Count = 1
CreateAttendeeResponse -> CreateAttendeeResult: Probability = 1.00, Count = 1
CreateAttendee -> createAttendee: Probability = 1.00, Count = 1
CreateAttendeeRequest -> CreateAttendeeRequest: Probability = 1.00, Count = 1
Invoke<CreateAttendeeResponse> -> executeCreateAttendee: Probability = 1.00, Count = 1
DescribeDBClusterParameterGroupsResponse -> DescribeDBClusterParameterGroupsResult: Probability = 1.00, Count = 1
DescribeDBClusterParameterGroups -> describeDBClusterParameterGroups: Probability = 1.00, Count = 1
DescribeDBClusterParameterGroupsRequest -> DescribeDBClusterParameterGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBClusterParameterGroupsResponse> -> executeDescribeDBClusterParameterGroups: Probability = 1.00, Count = 1
PropertyTable -> PropertyTable: Probability = 1.00, Count = 1
HeaderBlock -> HeaderBlock: Probability = 1.00, Count = 4
headerBlock -> headerBlock: Probability = 0.40, Count = 2
headerBlock -> _header_block: Probability = 0.20, Count = 1
headerBlock -> _bigBigBlockSize: Probability = 0.20, Count = 1
headerBlock -> headerBlock.getBigBlockSize: Probability = 0.20, Count = 1
headerBlock.BigBlockSize -> addProperty: Probability = 1.00, Count = 1
_blocks -> RootProperty: Probability = 1.00, Count = 1
GetIndexOfName -> getIndexOfName: Probability = 1.00, Count = 1
_externalNameRecords.Length -> _externalNameRecords.length: Probability = 1.00, Count = 1
_externalNameRecords[i].Text.Equals -> _externalNameRecords[i].getText: Probability = 0.50, Count = 1
_externalNameRecords[i].Text.Equals -> .equalsIgnoreCase: Probability = 0.50, Count = 1
AbortVaultLockResponse -> AbortVaultLockResult: Probability = 1.00, Count = 1
AbortVaultLock -> abortVaultLock: Probability = 1.00, Count = 1
AbortVaultLockRequest -> AbortVaultLockRequest: Probability = 1.00, Count = 1
Invoke<AbortVaultLockResponse> -> executeAbortVaultLock: Probability = 1.00, Count = 1
CreateBatchPredictionResponse -> CreateBatchPredictionResult: Probability = 1.00, Count = 1
CreateBatchPrediction -> createBatchPrediction: Probability = 1.00, Count = 1
CreateBatchPredictionRequest -> CreateBatchPredictionRequest: Probability = 1.00, Count = 1
Invoke<CreateBatchPredictionResponse> -> executeCreateBatchPrediction: Probability = 1.00, Count = 1
ListHostedZonesByNameResponse -> ListHostedZonesByNameResult: Probability = 1.00, Count = 1
ListHostedZonesByName -> listHostedZonesByName: Probability = 1.00, Count = 1
ListHostedZonesByNameRequest -> ListHostedZonesByNameRequest: Probability = 1.00, Count = 1
Invoke<ListHostedZonesByNameResponse> -> executeListHostedZonesByName: Probability = 1.00, Count = 1
GetAuthorIdent -> getAuthorIdent: Probability = 1.00, Count = 1
nameB -> final: Probability = 0.20, Count = 3
nameB -> nameB: Probability = 0.60, Count = 9
nameB -> RawParseUtils.author: Probability = 0.07, Count = 1
nameB -> RawParseUtils.committer: Probability = 0.07, Count = 1
nameB -> RawParseUtils.tagger: Probability = 0.07, Count = 1
RawParseUtils.ParsePersonIdent -> RawParseUtils.parsePersonIdent: Probability = 1.00, Count = 3
RecordLifecycleActionHeartbeatResponse -> RecordLifecycleActionHeartbeatResult: Probability = 1.00, Count = 1
RecordLifecycleActionHeartbeat -> recordLifecycleActionHeartbeat: Probability = 1.00, Count = 1
RecordLifecycleActionHeartbeatRequest -> RecordLifecycleActionHeartbeatRequest: Probability = 1.00, Count = 1
Invoke<RecordLifecycleActionHeartbeatResponse> -> executeRecordLifecycleActionHeartbeat: Probability = 1.00, Count = 1
logger -> logger!=null: Probability = 1.00, Count = 1
logger.Flush -> logger.flush: Probability = 1.00, Count = 1
GetLoadBalancerTlsCertificatesResponse -> GetLoadBalancerTlsCertificatesResult: Probability = 1.00, Count = 1
GetLoadBalancerTlsCertificates -> getLoadBalancerTlsCertificates: Probability = 1.00, Count = 1
GetLoadBalancerTlsCertificatesRequest -> GetLoadBalancerTlsCertificatesRequest: Probability = 1.00, Count = 1
Invoke<GetLoadBalancerTlsCertificatesResponse> -> executeGetLoadBalancerTlsCertificates: Probability = 1.00, Count = 1
ExtSSTRecord -> ExtSSTRecord: Probability = 0.60, Count = 3
ExtSSTRecord -> createExtSSTRecord: Probability = 0.20, Count = 1
ExtSSTRecord -> serialized.": Probability = 0.20, Count = 1
sstOffset -> sstOffset: Probability = 1.00, Count = 2
bucketAbsoluteOffsets -> bucketAbsoluteOffsets: Probability = 0.50, Count = 1
bucketAbsoluteOffsets -> bucketRelativeOffsets: Probability = 0.50, Count = 1
been -> been: Probability = 1.00, Count = 2
extSST -> extSST: Probability = 1.00, Count = 2
relativeOffsets -> relativeOffsets: Probability = 1.00, Count = 2
ListMultipartUploadsResponse -> ListMultipartUploadsResult: Probability = 1.00, Count = 1
ListMultipartUploads -> listMultipartUploads: Probability = 1.00, Count = 1
Invoke<ListMultipartUploadsResponse> -> executeListMultipartUploads: Probability = 1.00, Count = 1
doWait -> Boolean.valueOf: Probability = 1.00, Count = 1
RunBackgroundTask -> RunBackgroundTask: Probability = 1.00, Count = 1
task, -> task,: Probability = 1.00, Count = 1
this.task -> this.task: Probability = 1.00, Count = 1
this.letChildReport -> this.letChildReport: Probability = 1.00, Count = 1
sheetname -> sheetname: Probability = 1.00, Count = 4
this.Sheetname=sheetname -> setSheetname: Probability = 0.50, Count = 1
this.Sheetname=sheetname -> sheetname: Probability = 0.50, Count = 1
MFADevice -> MFADevice: Probability = 1.00, Count = 1
serialNumber, -> serialNumber,: Probability = 1.00, Count = 1
enableDate -> enableDate: Probability = 1.00, Count = 2
_enableDate -> setEnableDate: Probability = 1.00, Count = 1
DescribeStreamSummaryResponse -> DescribeStreamSummaryResult: Probability = 1.00, Count = 1
DescribeStreamSummary -> describeStreamSummary: Probability = 1.00, Count = 1
DescribeStreamSummaryRequest -> DescribeStreamSummaryRequest: Probability = 1.00, Count = 1
Invoke<DescribeStreamSummaryResponse> -> executeDescribeStreamSummary: Probability = 1.00, Count = 1
ListClusterJobsResponse -> ListClusterJobsResult: Probability = 1.00, Count = 1
ListClusterJobs -> listClusterJobs: Probability = 1.00, Count = 1
ListClusterJobsRequest -> ListClusterJobsRequest: Probability = 1.00, Count = 1
Invoke<ListClusterJobsResponse> -> executeListClusterJobs: Probability = 1.00, Count = 1
NumberStyles.HexNumber -> RADIX: Probability = 1.00, Count = 3
commitGen -> commitGen: Probability = 0.38, Count = 3
commitGen -> commit.getGeneration: Probability = 0.12, Count = 1
commitGen -> IndexRevision: Probability = 0.25, Count = 2
commitGen -> commit.compareTo: Probability = 0.12, Count = 1
commitGen -> other.commit: Probability = 0.12, Count = 1
"]]" -> "]]": Probability = 1.00, Count = 2
readFloat -> readFloat: Probability = 1.00, Count = 2
IsSubTotal -> isSubTotal: Probability = 1.00, Count = 2
subtotal -> subtotal: Probability = 1.00, Count = 3
CreateMonitoringScheduleResponse -> CreateMonitoringScheduleResult: Probability = 1.00, Count = 1
CreateMonitoringSchedule -> createMonitoringSchedule: Probability = 1.00, Count = 1
CreateMonitoringScheduleRequest -> CreateMonitoringScheduleRequest: Probability = 1.00, Count = 1
Invoke<CreateMonitoringScheduleResponse> -> executeCreateMonitoringSchedule: Probability = 1.00, Count = 1
CzechStemFilter -> CzechStemFilter: Probability = 1.00, Count = 1
GetSpeechSynthesisTaskResponse -> GetSpeechSynthesisTaskResult: Probability = 1.00, Count = 1
GetSpeechSynthesisTask -> getSpeechSynthesisTask: Probability = 1.00, Count = 1
GetSpeechSynthesisTaskRequest -> GetSpeechSynthesisTaskRequest: Probability = 1.00, Count = 1
Invoke<GetSpeechSynthesisTaskResponse> -> executeGetSpeechSynthesisTask: Probability = 1.00, Count = 1
Downsize -> downsize: Probability = 1.00, Count = 1
initialSet -> initialSet: Probability = 1.00, Count = 1
targetMaxSaturation -> targetMaxSaturation: Probability = 1.00, Count = 2
initialSet.Downsize -> initialSet.downsize: Probability = 1.00, Count = 1
MonitorInstancesResponse -> MonitorInstancesResult: Probability = 1.00, Count = 1
MonitorInstances -> monitorInstances: Probability = 1.00, Count = 1
MonitorInstancesRequest -> MonitorInstancesRequest: Probability = 1.00, Count = 2
Invoke<MonitorInstancesResponse> -> executeMonitorInstances: Probability = 1.00, Count = 1
ListDocumentClassifiersResponse -> ListDocumentClassifiersResult: Probability = 1.00, Count = 1
ListDocumentClassifiers -> listDocumentClassifiers: Probability = 1.00, Count = 1
ListDocumentClassifiersRequest -> ListDocumentClassifiersRequest: Probability = 1.00, Count = 1
Invoke<ListDocumentClassifiersResponse> -> executeListDocumentClassifiers: Probability = 1.00, Count = 1
fields.Length -> fields.length: Probability = 1.00, Count = 7
field_1_axisType -> field_1_axisType: Probability = 1.00, Count = 3
field_5_reserved4 -> field_5_reserved4: Probability = 1.00, Count = 1
SetStashRef -> setStashRef: Probability = 1.00, Count = 1
stashRef -> stashRef: Probability = 1.00, Count = 3
stashRefEntry -> stashRefEntry: Probability = 1.00, Count = 1
CreateHITWithHITTypeResponse -> CreateHITWithHITTypeResult: Probability = 1.00, Count = 1
CreateHITWithHITType -> createHITWithHITType: Probability = 1.00, Count = 1
CreateHITWithHITTypeRequest -> CreateHITWithHITTypeRequest: Probability = 1.00, Count = 1
Invoke<CreateHITWithHITTypeResponse> -> executeCreateHITWithHITType: Probability = 1.00, Count = 1
SetPlaceholder -> setPlaceholder: Probability = 1.00, Count = 1
_ptgs[index] -> _ptgs[index]: Probability = 1.00, Count = 2
placeholder -> placeholder: Probability = 1.00, Count = 1
ReadCoordinates -> readCoordinates: Probability = 1.00, Count = 2
UpdateNotebookInstanceResponse -> UpdateNotebookInstanceResult: Probability = 1.00, Count = 1
UpdateNotebookInstance -> updateNotebookInstance: Probability = 1.00, Count = 1
UpdateNotebookInstanceRequest -> UpdateNotebookInstanceRequest: Probability = 1.00, Count = 1
Invoke<UpdateNotebookInstanceResponse> -> executeUpdateNotebookInstance: Probability = 1.00, Count = 1
FindFirstRecordBySid -> findFirstRecordBySid: Probability = 1.00, Count = 1
AttachInstancesResponse -> AttachInstancesResult: Probability = 1.00, Count = 1
AttachInstances -> attachInstances: Probability = 1.00, Count = 1
AttachInstancesRequest -> AttachInstancesRequest: Probability = 1.00, Count = 1
Invoke<AttachInstancesResponse> -> executeAttachInstances: Probability = 1.00, Count = 1
NotifyWorkersResponse -> NotifyWorkersResult: Probability = 1.00, Count = 1
NotifyWorkers -> notifyWorkers: Probability = 1.00, Count = 1
NotifyWorkersRequest -> NotifyWorkersRequest: Probability = 1.00, Count = 1
Invoke<NotifyWorkersResponse> -> executeNotifyWorkers: Probability = 1.00, Count = 1
CommitCommand -> CommitCommand: Probability = 1.00, Count = 2
Commit -> commit: Probability = 1.00, Count = 1
BufferedIndexInput -> BufferedIndexInput: Probability = 1.00, Count = 4
clone.m_buffer -> clone.buffer: Probability = 1.00, Count = 1
clone.bufferLength -> clone.bufferLength: Probability = 1.00, Count = 1
clone.bufferPosition -> clone.bufferPosition: Probability = 1.00, Count = 1
clone.bufferStart -> clone.bufferStart: Probability = 1.00, Count = 1
_byname.ContainsKey -> _byname.containsKey: Probability = 1.00, Count = 1
DICTIONARY_RESOURCE_ATTRIBUTE -> DICTIONARY_RESOURCE_ATTRIBUTE: Probability = 0.50, Count = 3
DICTIONARY_RESOURCE_ATTRIBUTE -> "dictionary-resource": Probability = 0.17, Count = 1
DICTIONARY_RESOURCE_ATTRIBUTE -> dictionaryResource: Probability = 0.33, Count = 2
DICTIONARY_ATTRIBUTE -> DICTIONARY_ATTRIBUTE: Probability = 1.00, Count = 2
resourceName -> resourceName: Probability = 1.00, Count = 3
UpdateUsageResponse -> UpdateUsageResult: Probability = 1.00, Count = 1
UpdateUsage -> updateUsage: Probability = 1.00, Count = 1
UpdateUsageRequest -> UpdateUsageRequest: Probability = 1.00, Count = 1
Invoke<UpdateUsageResponse> -> executeUpdateUsage: Probability = 1.00, Count = 1
UpdateEvaluationResponse -> UpdateEvaluationResult: Probability = 1.00, Count = 1
UpdateEvaluation -> updateEvaluation: Probability = 1.00, Count = 1
UpdateEvaluationRequest -> UpdateEvaluationRequest: Probability = 1.00, Count = 1
Invoke<UpdateEvaluationResponse> -> executeUpdateEvaluation: Probability = 1.00, Count = 1
ProtectRecord -> ProtectRecord: Probability = 1.00, Count = 3
isProtected -> isProtected: Probability = 1.00, Count = 2
this.Protect -> setProtect: Probability = 1.00, Count = 1
recordType -> recordType: Probability = 1.00, Count = 3
GetDocumentPathResponse -> GetDocumentPathResult: Probability = 1.00, Count = 1
GetDocumentPath -> getDocumentPath: Probability = 1.00, Count = 1
GetDocumentPathRequest -> GetDocumentPathRequest: Probability = 1.00, Count = 1
Invoke<GetDocumentPathResponse> -> executeGetDocumentPath: Probability = 1.00, Count = 1
CreateTransitGatewayVpcAttachmentResponse -> CreateTransitGatewayVpcAttachmentResult: Probability = 1.00, Count = 1
CreateTransitGatewayVpcAttachment -> createTransitGatewayVpcAttachment: Probability = 1.00, Count = 1
CreateTransitGatewayVpcAttachmentRequest -> CreateTransitGatewayVpcAttachmentRequest: Probability = 1.00, Count = 1
Invoke<CreateTransitGatewayVpcAttachmentResponse> -> executeCreateTransitGatewayVpcAttachment: Probability = 1.00, Count = 1
DisassociateSubnetCidrBlockResponse -> DisassociateSubnetCidrBlockResult: Probability = 1.00, Count = 1
DisassociateSubnetCidrBlock -> disassociateSubnetCidrBlock: Probability = 1.00, Count = 1
DisassociateSubnetCidrBlockRequest -> DisassociateSubnetCidrBlockRequest: Probability = 1.00, Count = 1
Invoke<DisassociateSubnetCidrBlockResponse> -> executeDisassociateSubnetCidrBlock: Probability = 1.00, Count = 1
arr -> arr: Probability = 1.00, Count = 3
arr_1 -> arr: Probability = 0.60, Count = 3
arr_1 -> byte[len]: Probability = 0.20, Count = 1
arr_1 -> bb.get: Probability = 0.20, Count = 1
DescribePlacementGroupsResponse -> DescribePlacementGroupsResult: Probability = 1.00, Count = 2
DescribePlacementGroups -> describePlacementGroups: Probability = 1.00, Count = 3
DescribePlacementGroupsRequest -> DescribePlacementGroupsRequest: Probability = 1.00, Count = 2
UpdateTrialResponse -> UpdateTrialResult: Probability = 1.00, Count = 1
UpdateTrial -> updateTrial: Probability = 1.00, Count = 1
UpdateTrialRequest -> UpdateTrialRequest: Probability = 1.00, Count = 1
Invoke<UpdateTrialResponse> -> executeUpdateTrial: Probability = 1.00, Count = 1
DeleteTransitGatewayPeeringAttachmentResponse -> DeleteTransitGatewayPeeringAttachmentResult: Probability = 1.00, Count = 1
DeleteTransitGatewayPeeringAttachment -> deleteTransitGatewayPeeringAttachment: Probability = 1.00, Count = 1
DeleteTransitGatewayPeeringAttachmentRequest -> DeleteTransitGatewayPeeringAttachmentRequest: Probability = 1.00, Count = 1
Invoke<DeleteTransitGatewayPeeringAttachmentResponse> -> executeDeleteTransitGatewayPeeringAttachment: Probability = 1.00, Count = 1
LargeObjectException -> LargeObjectException: Probability = 0.80, Count = 4
LargeObjectException -> tooBig: Probability = 0.20, Count = 1
java.util.Collection<V> -> Collection<V>: Probability = 1.00, Count = 4
V>.Values -> Values: Probability = 1.00, Count = 2
EscherComplexProperty -> EscherComplexProperty: Probability = 0.89, Count = 8
EscherComplexProperty -> escherComplexProperty: Probability = 0.11, Count = 1
propertyNumber, -> propertyNumber,: Probability = 1.00, Count = 4
isBlipId, -> isBlipId,: Probability = 1.00, Count = 3
this._complexData -> complexData.length: Probability = 0.33, Count = 2
this._complexData -> setComplexData: Probability = 0.33, Count = 2
this._complexData -> complexData: Probability = 0.17, Count = 1
this._complexData -> IOUtils.safelyAllocate: Probability = 0.17, Count = 1
DeleteMatchmakingRuleSetResponse -> DeleteMatchmakingRuleSetResult: Probability = 1.00, Count = 1
DeleteMatchmakingRuleSet -> deleteMatchmakingRuleSet: Probability = 1.00, Count = 1
DeleteMatchmakingRuleSetRequest -> DeleteMatchmakingRuleSetRequest: Probability = 1.00, Count = 1
Invoke<DeleteMatchmakingRuleSetResponse> -> executeDeleteMatchmakingRuleSet: Probability = 1.00, Count = 1
UnassignIpv6AddressesResponse -> UnassignIpv6AddressesResult: Probability = 1.00, Count = 1
UnassignIpv6Addresses -> unassignIpv6Addresses: Probability = 1.00, Count = 1
UnassignIpv6AddressesRequest -> UnassignIpv6AddressesRequest: Probability = 1.00, Count = 1
Invoke<UnassignIpv6AddressesResponse> -> executeUnassignIpv6Addresses: Probability = 1.00, Count = 1
FacetResult -> _other: Probability = 0.50, Count = 3
FacetResult -> FacetResult: Probability = 0.50, Count = 3
Value.Equals -> value.equals: Probability = 0.50, Count = 2
Value.Equals -> other.value: Probability = 0.50, Count = 2
other2.ChildCount -> other.childCount: Probability = 1.00, Count = 1
LabelValues, -> labelValues,: Probability = 1.00, Count = 1
other2.LabelValues -> other.labelValues: Probability = 1.00, Count = 1
ConfirmSubscriptionRequest -> ConfirmSubscriptionRequest: Probability = 1.00, Count = 2
_token -> setToken: Probability = 1.00, Count = 2
keyName, -> keyName,: Probability = 1.00, Count = 2
ToRefName -> toRefName: Probability = 1.00, Count = 3
keyName -> keyName: Probability = 1.00, Count = 11
resolved -> resolved: Probability = 1.00, Count = 4
loose -> loose: Probability = 1.00, Count = 5
RefList.EmptyList -> RefList.emptyList: Probability = 1.00, Count = 4
sizeIsValid -> sizeIsValid: Probability = 1.00, Count = 4
RespondActivityTaskCanceled -> respondActivityTaskCanceled: Probability = 1.00, Count = 1
RespondActivityTaskCanceledRequest -> RespondActivityTaskCanceledRequest: Probability = 1.00, Count = 1
RespondActivityTaskCanceledResponseUnmarshaller.Instance -> executeRespondActivityTaskCanceled: Probability = 1.00, Count = 1
DocumentInputStream -> DocumentInputStream: Probability = 1.00, Count = 2
CreateDocumentInputStream -> createDocumentInputStream: Probability = 1.00, Count = 1
document -> document: Probability = 1.00, Count = 2
!document.IsDocumentEntry -> !document.isDocumentEntry: Probability = 1.00, Count = 1
"Entry -> "Entry: Probability = 1.00, Count = 1
document.Name+ -> document.getName: Probability = 1.00, Count = 1
DocumentEntry -> DocumentEntry": Probability = 0.33, Count = 1
DocumentEntry -> DocumentEntry: Probability = 0.67, Count = 2
DescribeInstanceStatusResponse -> DescribeInstanceStatusResult: Probability = 1.00, Count = 2
DescribeInstanceStatus -> describeInstanceStatus: Probability = 1.00, Count = 3
DescribeInstanceStatusRequest -> DescribeInstanceStatusRequest: Probability = 1.00, Count = 2
GetReverseBinaryHunk -> getReverseBinaryHunk: Probability = 1.00, Count = 1
reverseBinaryHunk -> reverseBinaryHunk: Probability = 1.00, Count = 1
java.nio.charset.CoderResult -> CoderResult: Probability = 1.00, Count = 10
nthPosition -> nthPosition: Probability = 0.71, Count = 5
nthPosition -> u31: Probability = 0.29, Count = 2
UpdateRoomMembershipResponse -> UpdateRoomMembershipResult: Probability = 1.00, Count = 1
UpdateRoomMembership -> updateRoomMembership: Probability = 1.00, Count = 1
UpdateRoomMembershipRequest -> UpdateRoomMembershipRequest: Probability = 1.00, Count = 1
Invoke<UpdateRoomMembershipResponse> -> executeUpdateRoomMembership: Probability = 1.00, Count = 1
FormatValue -> formatValue: Probability = 1.00, Count = 3
toAppendTo, -> toAppendTo,: Probability = 1.00, Count = 4
elapsed -> elapsed: Probability = 1.00, Count = 6
_ulrOutput.WriteDouble -> _ulrOutput.writeDouble: Probability = 1.00, Count = 1
CancelExportTaskResponse -> CancelExportTaskResult: Probability = 1.00, Count = 1
CancelExportTask -> cancelExportTask: Probability = 1.00, Count = 1
CancelExportTaskRequest -> CancelExportTaskRequest: Probability = 1.00, Count = 1
Invoke<CancelExportTaskResponse> -> executeCancelExportTask: Probability = 1.00, Count = 1
"FacetLabel: -> "FacetLabel:: Probability = 0.67, Count = 2
"FacetLabel: -> []": Probability = 0.33, Count = 1
string[Length] -> String[length]: Probability = 1.00, Count = 1
Components, -> components,: Probability = 1.00, Count = 2
parts, -> parts,: Probability = 1.00, Count = 1
DescribeEventTrackerResponse -> DescribeEventTrackerResult: Probability = 1.00, Count = 1
DescribeEventTracker -> describeEventTracker: Probability = 1.00, Count = 1
DescribeEventTrackerRequest -> DescribeEventTrackerRequest: Probability = 1.00, Count = 1
Invoke<DescribeEventTrackerResponse> -> executeDescribeEventTracker: Probability = 1.00, Count = 1
UpdateJourneyResponse -> UpdateJourneyResult: Probability = 1.00, Count = 1
UpdateJourney -> updateJourney: Probability = 1.00, Count = 1
UpdateJourneyRequest -> UpdateJourneyRequest: Probability = 1.00, Count = 1
Invoke<UpdateJourneyResponse> -> executeUpdateJourney: Probability = 1.00, Count = 1
RemoveTagsFromVaultResponse -> RemoveTagsFromVaultResult: Probability = 1.00, Count = 1
RemoveTagsFromVault -> removeTagsFromVault: Probability = 1.00, Count = 1
RemoveTagsFromVaultRequest -> RemoveTagsFromVaultRequest: Probability = 1.00, Count = 1
Invoke<RemoveTagsFromVaultResponse> -> executeRemoveTagsFromVault: Probability = 1.00, Count = 1
NGit.Api.RevertCommand -> RevertCommand: Probability = 1.00, Count = 3
DeleteFargateProfileResponse -> DeleteFargateProfileResult: Probability = 1.00, Count = 1
DeleteFargateProfile -> deleteFargateProfile: Probability = 1.00, Count = 1
DeleteFargateProfileRequest -> DeleteFargateProfileRequest: Probability = 1.00, Count = 1
Invoke<DeleteFargateProfileResponse> -> executeDeleteFargateProfile: Probability = 1.00, Count = 1
_code -> cmpResult: Probability = 1.00, Count = 3
cmpResult -> _code: Probability = 0.09, Count = 3
cmpResult -> NONE:case: Probability = 0.09, Count = 3
cmpResult -> EQ:return: Probability = 0.09, Count = 3
cmpResult -> NE:: Probability = 0.06, Count = 2
cmpResult -> cmpResult: Probability = 0.22, Count = 7
cmpResult -> LT:: Probability = 0.06, Count = 2
cmpResult -> LE:: Probability = 0.06, Count = 2
cmpResult -> GT:: Probability = 0.06, Count = 2
cmpResult -> GE:: Probability = 0.06, Count = 2
cmpResult -> 0: Probability = 0.19, Count = 6
EQ:return -> cmpResult: Probability = 1.00, Count = 6
non-equality -> non-equality: Probability = 1.00, Count = 3
operator -> operator: Probability = 1.00, Count = 3
'"+ -> '"+: Probability = 1.00, Count = 4
SeriesRecord -> SeriesRecord: Probability = 1.00, Count = 1
GetSeries -> getSeries: Probability = 1.00, Count = 1
series -> series: Probability = 1.00, Count = 1
"[/UNCALCED]\n" -> "[/UNCALCED]\n": Probability = 1.00, Count = 1
ListBotsResponse -> ListBotsResult: Probability = 1.00, Count = 1
ListBots -> listBots: Probability = 1.00, Count = 1
ListBotsRequest -> ListBotsRequest: Probability = 1.00, Count = 1
Invoke<ListBotsResponse> -> executeListBots: Probability = 1.00, Count = 1
getPort -> getPort: Probability = 1.00, Count = 1
writeLong -> writeLong: Probability = 1.00, Count = 2
IMatchPredicate -> I_MatchPredicate: Probability = 1.00, Count = 4
mp -> mp: Probability = 0.75, Count = 3
mp -> createCriteriaPredicate: Probability = 0.25, Count = 1
CountMatchingCellsInArea -> countMatchingCellsInArea: Probability = 1.00, Count = 2
DeleteVpcResponse -> DeleteVpcResult: Probability = 1.00, Count = 1
DeleteVpc -> deleteVpc: Probability = 1.00, Count = 1
DeleteVpcRequest -> DeleteVpcRequest: Probability = 1.00, Count = 2
Invoke<DeleteVpcResponse> -> executeDeleteVpc: Probability = 1.00, Count = 1
VoteOnProposalResponse -> VoteOnProposalResult: Probability = 1.00, Count = 1
VoteOnProposal -> voteOnProposal: Probability = 1.00, Count = 1
VoteOnProposalRequest -> VoteOnProposalRequest: Probability = 1.00, Count = 1
Invoke<VoteOnProposalResponse> -> executeVoteOnProposal: Probability = 1.00, Count = 1
backPos, -> 1+count: Probability = 1.00, Count = 1
"MERGE_BASE" -> "MERGE_BASE": Probability = 1.00, Count = 1
field_2_cell_offsets[i] -> field_2_cell_offsets[: Probability = 1.00, Count = 1
FindStartOffset -> findStartOffset: Probability = 1.00, Count = 2
buffer.Length -> buffer.length: Probability = 1.00, Count = 8
count-- -> count--: Probability = 1.00, Count = 2
BufferedTokenStream -> BufferedTokenStream: Probability = 1.00, Count = 1
tokenSource -> TokenSource: Probability = 0.29, Count = 2
tokenSource -> tokenSource: Probability = 0.71, Count = 5
"tokenSource -> "tokenSource: Probability = 1.00, Count = 1
this._tokenSource -> this.tokenSource: Probability = 1.00, Count = 2
isDirect -> isDirect: Probability = 1.00, Count = 2
GetCells -> getCells: Probability = 1.00, Count = 1
row.GetCells -> row.getCells: Probability = 1.00, Count = 1
FindStartOfRowOutlineGroup -> findStartOfRowOutlineGroup: Probability = 1.00, Count = 2
this.GetRow -> rowRecord: Probability = 0.40, Count = 2
this.GetRow -> this.getRow: Probability = 0.60, Count = 3
dcb -> dcb: Probability = 1.00, Count = 2
dcb.GetDirCache -> dcb.getDirCache: Probability = 1.00, Count = 1
DeleteGraphResponse -> DeleteGraphResult: Probability = 1.00, Count = 1
DeleteGraph -> deleteGraph: Probability = 1.00, Count = 1
DeleteGraphRequest -> DeleteGraphRequest: Probability = 1.00, Count = 1
Invoke<DeleteGraphResponse> -> executeDeleteGraph: Probability = 1.00, Count = 1
"id= -> "id=": Probability = 1.00, Count = 1
version= -> +: Probability = 1.00, Count = 3
Id, -> +: Probability = 1.00, Count = 1
SourceFiles -> files=": Probability = 0.33, Count = 1
SourceFiles -> sourceFiles: Probability = 0.67, Count = 2
Version, -> +: Probability = 1.00, Count = 1
f0 -> part2: Probability = 0.50, Count = 3
f0 -> f1: Probability = 0.50, Count = 3
spacePos -> spacePos: Probability = 1.00, Count = 3
f2 -> f0: Probability = 0.83, Count = 5
f2 -> f1: Probability = 0.17, Count = 1
f1 -> f2: Probability = 0.83, Count = 5
f1 -> f0: Probability = 0.17, Count = 1
RemoveMMClipCount -> removeMMClipCount: Probability = 1.00, Count = 1
PropertyIDMap.PID_MMCLIPCOUNT -> PropertyIDMap.PID_MMCLIPCOUNT: Probability = 1.00, Count = 1
SetDeltaCacheSize -> setDeltaCacheSize: Probability = 1.00, Count = 1
deltaCacheSize -> deltaCacheSize: Probability = 1.00, Count = 2
UpdateKnowledgeRequest -> UpdateKnowledgeRequest: Probability = 1.00, Count = 1
"Chatbot", -> "Chatbot",: Probability = 1.00, Count = 1
"2017-10-11", -> "2017-10-11",: Probability = 1.00, Count = 1
"UpdateKnowledge", -> "UpdateKnowledge",: Probability = 1.00, Count = 1
"beebot", -> "beebot": Probability = 1.00, Count = 1
b[offset -> b[offset+i]: Probability = 1.00, Count = 1
bytes[pos--] -> bytes[pos--]: Probability = 1.00, Count = 1
FillArc -> fillArc: Probability = 1.00, Count = 1
"FillArc -> POILogger.WARN,"fillArc: Probability = 1.00, Count = 1
CreateValueVector -> createValueVector: Probability = 0.67, Count = 2
CreateValueVector -> vvX: Probability = 0.33, Count = 1
ErrorEval.NA -> ErrorEval.NA: Probability = 1.00, Count = 2
CopyUpdatedCells -> copyUpdatedCells: Probability = 1.00, Count = 1
IWorkbook -> Workbook: Probability = 0.50, Count = 1
IWorkbook -> HSSFWorkbook: Probability = 0.50, Count = 1
_sewb.CopyUpdatedCells -> _sewb.copyUpdatedCells: Probability = 1.00, Count = 1
CreateCacheParameterGroupResponse -> CacheParameterGroup: Probability = 1.00, Count = 1
CreateCacheParameterGroup -> createCacheParameterGroup: Probability = 1.00, Count = 1
CreateCacheParameterGroupRequest -> CreateCacheParameterGroupRequest: Probability = 1.00, Count = 2
Invoke<CreateCacheParameterGroupResponse> -> executeCreateCacheParameterGroup: Probability = 1.00, Count = 1
OldStringRecord -> OldStringRecord: Probability = 1.00, Count = 1
field_1_string_len -> field_1_string_len: Probability = 0.60, Count = 3
field_1_string_len -> field_2_bytes: Probability = 0.20, Count = 1
field_1_string_len -> field_1_string_len,: Probability = 0.20, Count = 1
_fst -> fst.ramBytesUsed: Probability = 1.00, Count = 1
_fst.GetSizeInBytes -> RamUsageEstimator.sizeOf: Probability = 0.67, Count = 2
_fst.GetSizeInBytes -> scratch.bytes: Probability = 0.33, Count = 1
FillRect -> fillRect: Probability = 1.00, Count = 2
shape.SetFillColor -> ): Probability = 1.00, Count = 2
Merges.Add -> merges.add: Probability = 1.00, Count = 1
ComputeNorm -> computeNorm: Probability = 1.00, Count = 3
FieldInvertState -> FieldInvertState: Probability = 1.00, Count = 3
m_sims[0].ComputeNorm -> sims[0].computeNorm: Probability = 1.00, Count = 1
PolicyAttribute -> PolicyAttribute: Probability = 1.00, Count = 1
attributeName, -> attributeName,: Probability = 1.00, Count = 2
attributeValue -> attributeValue: Probability = 1.00, Count = 4
_attributeName -> setAttributeName: Probability = 1.00, Count = 2
attributeName -> attributeName: Probability = 1.00, Count = 2
_attributeValue -> setAttributeValue: Probability = 1.00, Count = 2
publicKeyId -> publicKeyId: Probability = 1.00, Count = 3
ListJourneysResponse -> ListJourneysResult: Probability = 1.00, Count = 1
ListJourneys -> listJourneys: Probability = 1.00, Count = 1
ListJourneysRequest -> ListJourneysRequest: Probability = 1.00, Count = 1
Invoke<ListJourneysResponse> -> executeListJourneys: Probability = 1.00, Count = 1
_formulaCellCache.Put -> _formulaCellCache.put: Probability = 1.00, Count = 1
StartHumanLoopResponse -> StartHumanLoopResult: Probability = 1.00, Count = 1
StartHumanLoop -> startHumanLoop: Probability = 1.00, Count = 1
StartHumanLoopRequest -> StartHumanLoopRequest: Probability = 1.00, Count = 1
Invoke<StartHumanLoopResponse> -> executeStartHumanLoop: Probability = 1.00, Count = 1
GetRefSpecs -> getRefSpecs: Probability = 1.00, Count = 1
refSpecs -> refSpecs: Probability = 1.00, Count = 1
cost -> cost: Probability = 0.67, Count = 4
cost -> forwardSize: Probability = 0.17, Count = 1
cost -> costs.putShort: Probability = 0.17, Count = 1
java.util.Comparator<K> -> K>: Probability = 1.00, Count = 1
this.ascending -> ascending: Probability = 1.00, Count = 1
this._enclosing.comparator -> TreeMap.this.comparator: Probability = 1.00, Count = 1
java.util.Collections.reverseOrder<K> -> Collections.reverseOrder: Probability = 1.00, Count = 1
PrintHeadersRecord -> PrintHeadersRecord: Probability = 1.00, Count = 2
field_1_print_headers -> field_1_print_headers: Probability = 1.00, Count = 2
DeleteBranchCommand -> DeleteBranchCommand: Probability = 1.00, Count = 2
BranchDelete -> branchDelete: Probability = 1.00, Count = 1
DetectLabelsResponse -> DetectLabelsResult: Probability = 1.00, Count = 1
DetectLabels -> detectLabels: Probability = 1.00, Count = 1
DetectLabelsRequest -> DetectLabelsRequest: Probability = 1.00, Count = 1
Invoke<DetectLabelsResponse> -> executeDetectLabels: Probability = 1.00, Count = 1
FnGroupCountRecord -> FnGroupCountRecord: Probability = 1.00, Count = 1
field_1_count -> field_1_count: Probability = 1.00, Count = 1
IsDefaultField -> isDefaultField: Probability = 1.00, Count = 4
GetTermEscaped -> getTermEscaped: Probability = 1.00, Count = 4
this.similarity -> this.similarity: Probability = 1.00, Count = 2
AbstractBlockPackedWriter -> AbstractBlockPackedWriter: Probability = 1.00, Count = 1
PackedInt32s.CheckBlockSize -> checkBlockSize: Probability = 1.00, Count = 2
MAX_BLOCK_SIZE -> MAX_BLOCK_SIZE: Probability = 1.00, Count = 1
m_values -> values: Probability = 1.00, Count = 1
long[blockSize] -> long[blockSize]: Probability = 1.00, Count = 2
GetMessage -> getMessage: Probability = 1.00, Count = 4
ListAttendeesResponse -> ListAttendeesResult: Probability = 1.00, Count = 1
ListAttendees -> listAttendees: Probability = 1.00, Count = 1
ListAttendeesRequest -> ListAttendeesRequest: Probability = 1.00, Count = 1
Invoke<ListAttendeesResponse> -> executeListAttendees: Probability = 1.00, Count = 1
posIncr -> posIncr: Probability = 1.00, Count = 2
addElement -> addElement: Probability = 1.00, Count = 1
growByOne -> growByOne: Probability = 1.00, Count = 2
elementData[elementCount++] -> elementData[elementCount++]: Probability = 1.00, Count = 2
PutExternalModelResponse -> PutExternalModelResult: Probability = 1.00, Count = 1
PutExternalModel -> putExternalModel: Probability = 1.00, Count = 1
PutExternalModelRequest -> PutExternalModelRequest: Probability = 1.00, Count = 1
Invoke<PutExternalModelResponse> -> executePutExternalModel: Probability = 1.00, Count = 1
PutConferencePreferenceResponse -> PutConferencePreferenceResult: Probability = 1.00, Count = 1
PutConferencePreference -> putConferencePreference: Probability = 1.00, Count = 1
PutConferencePreferenceRequest -> PutConferencePreferenceRequest: Probability = 1.00, Count = 1
Invoke<PutConferencePreferenceResponse> -> executePutConferencePreference: Probability = 1.00, Count = 1
CreateApiMappingResponse -> CreateApiMappingResult: Probability = 1.00, Count = 1
CreateApiMapping -> createApiMapping: Probability = 1.00, Count = 1
CreateApiMappingRequest -> CreateApiMappingRequest: Probability = 1.00, Count = 1
Invoke<CreateApiMappingResponse> -> executeCreateApiMapping: Probability = 1.00, Count = 1
UpdateAdmChannelResponse -> UpdateAdmChannelResult: Probability = 1.00, Count = 1
UpdateAdmChannel -> updateAdmChannel: Probability = 1.00, Count = 1
UpdateAdmChannelRequest -> UpdateAdmChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateAdmChannelResponse> -> executeUpdateAdmChannel: Probability = 1.00, Count = 1
cache -> cache: Probability = 1.00, Count = 4
dc.GetCacheTree -> dc.getCacheTree: Probability = 1.00, Count = 1
treeStart -> treeStart: Probability = 0.67, Count = 2
treeStart -> currentEntry: Probability = 0.33, Count = 1
treeEnd -> treeEnd: Probability = 1.00, Count = 1
tree.GetEntrySpan -> tree.getEntrySpan: Probability = 1.00, Count = 1
subtreeId -> subtreeId: Probability = 1.00, Count = 1
byte[Constants.OBJECT_ID_LENGTH] -> byte[Constants.OBJECT_ID_LENGTH]: Probability = 1.00, Count = 1
textStart -> setBytesRef: Probability = 0.25, Count = 1
textStart -> textStart: Probability = 0.50, Count = 2
textStart -> BYTE_BLOCK_SHIFT]: Probability = 0.25, Count = 1
bytes[pos] -> BYTE_BLOCK_MASK: Probability = 0.20, Count = 1
bytes[pos] -> bytes[pos]: Probability = 0.60, Count = 3
bytes[pos] -> pos+1: Probability = 0.20, Count = 1
term.Length -> term.length: Probability = 0.50, Count = 3
term.Length -> term.offset: Probability = 0.33, Count = 2
term.Length -> pos+2: Probability = 0.17, Count = 1
Restrictions -> Restrictions: Probability = 1.00, Count = 1
GeoRestriction -> GeoRestriction: Probability = 1.00, Count = 2
geoRestriction -> geoRestriction: Probability = 1.00, Count = 2
_geoRestriction -> setGeoRestriction: Probability = 1.00, Count = 1
DisableRuleResponse -> DisableRuleResult: Probability = 1.00, Count = 1
DisableRule -> disableRule: Probability = 1.00, Count = 1
DisableRuleRequest -> DisableRuleRequest: Probability = 1.00, Count = 1
Invoke<DisableRuleResponse> -> executeDisableRule: Probability = 1.00, Count = 1
GetSuppressedDestinationResponse -> GetSuppressedDestinationResult: Probability = 1.00, Count = 1
GetSuppressedDestination -> getSuppressedDestination: Probability = 1.00, Count = 1
GetSuppressedDestinationRequest -> GetSuppressedDestinationRequest: Probability = 1.00, Count = 1
Invoke<GetSuppressedDestinationResponse> -> executeGetSuppressedDestination: Probability = 1.00, Count = 1
StartLifecyclePolicyPreviewResponse -> StartLifecyclePolicyPreviewResult: Probability = 1.00, Count = 1
StartLifecyclePolicyPreview -> startLifecyclePolicyPreview: Probability = 1.00, Count = 1
StartLifecyclePolicyPreviewRequest -> StartLifecyclePolicyPreviewRequest: Probability = 1.00, Count = 1
Invoke<StartLifecyclePolicyPreviewResponse> -> executeStartLifecyclePolicyPreview: Probability = 1.00, Count = 1
CreateDiskFromSnapshotResponse -> CreateDiskFromSnapshotResult: Probability = 1.00, Count = 1
CreateDiskFromSnapshot -> createDiskFromSnapshot: Probability = 1.00, Count = 1
CreateDiskFromSnapshotRequest -> CreateDiskFromSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CreateDiskFromSnapshotResponse> -> executeCreateDiskFromSnapshot: Probability = 1.00, Count = 1
SubmoduleSyncCommand -> SubmoduleSyncCommand: Probability = 1.00, Count = 3
SubmoduleSync -> submoduleSync: Probability = 1.00, Count = 1
DeleteConfigurationSetTrackingOptionsResponse -> DeleteConfigurationSetTrackingOptionsResult: Probability = 1.00, Count = 1
DeleteConfigurationSetTrackingOptions -> deleteConfigurationSetTrackingOptions: Probability = 1.00, Count = 1
DeleteConfigurationSetTrackingOptionsRequest -> DeleteConfigurationSetTrackingOptionsRequest: Probability = 1.00, Count = 1
Invoke<DeleteConfigurationSetTrackingOptionsResponse> -> executeDeleteConfigurationSetTrackingOptions: Probability = 1.00, Count = 1
TValue -> V: Probability = 1.00, Count = 3
!allowModify -> !allowModify: Probability = 1.00, Count = 1
outerInstance.values[lastPos].Value -> values[lastPos]: Probability = 1.00, Count = 2
]\n" -> ]\n": Probability = 1.00, Count = 4
ipmt -> ipmt: Probability = 0.75, Count = 3
ipmt -> type==1: Probability = 0.25, Count = 1
per -> per: Probability = 1.00, Count = 2
PMT -> pmt: Probability = 1.00, Count = 8
FileDictionary -> FileDictionary: Probability = 1.00, Count = 1
fieldDelimiter -> fieldDelimiter: Probability = 1.00, Count = 2
IOUtils.GetDecodingReader -> BufferedReader: Probability = 0.50, Count = 2
IOUtils.GetDecodingReader -> IOUtils.getDecodingReader: Probability = 0.50, Count = 2
this.fieldDelimiter -> this.fieldDelimiter: Probability = 1.00, Count = 1
DocumentSummaryInformation -> DocumentSummaryInformation: Probability = 1.00, Count = 1
PropertySet -> final: Probability = 0.40, Count = 4
PropertySet -> PropertySet: Probability = 0.50, Count = 5
PropertySet -> ps.getByteOrder: Probability = 0.10, Count = 1
ps -> ps: Probability = 0.56, Count = 5
ps -> throws: Probability = 0.22, Count = 2
ps -> UnexpectedPropertySetTypeException: Probability = 0.22, Count = 2
!IsDocumentSummaryInformation -> !isDocumentSummaryInformation: Probability = 1.00, Count = 1
UnexpectedPropertySetTypeException -> UnexpectedPropertySetTypeException: Probability = 1.00, Count = 2
"Not -> "Not: Probability = 1.00, Count = 4
GetBSERecord -> getBSERecord: Probability = 1.00, Count = 1
escherBSERecords[pictureIndex -> pictureIndex-1: Probability = 1.00, Count = 1
CreateDetectorVersionResponse -> CreateDetectorVersionResult: Probability = 1.00, Count = 1
CreateDetectorVersion -> createDetectorVersion: Probability = 1.00, Count = 1
CreateDetectorVersionRequest -> CreateDetectorVersionRequest: Probability = 1.00, Count = 1
Invoke<CreateDetectorVersionResponse> -> executeCreateDetectorVersion: Probability = 1.00, Count = 1
explicitListValues -> explicitListValues: Probability = 1.00, Count = 2
ListGroupsResponse -> ListGroupsResult: Probability = 1.00, Count = 1
ListGroups -> listGroups: Probability = 1.00, Count = 1
ListGroupsRequest -> ListGroupsRequest: Probability = 1.00, Count = 1
Invoke<ListGroupsResponse> -> executeListGroups: Probability = 1.00, Count = 1
DeleteScriptResponse -> DeleteScriptResult: Probability = 1.00, Count = 1
DeleteScript -> deleteScript: Probability = 1.00, Count = 1
DeleteScriptRequest -> DeleteScriptRequest: Probability = 1.00, Count = 1
Invoke<DeleteScriptResponse> -> executeDeleteScript: Probability = 1.00, Count = 1
DescribeSpotDatafeedSubscriptionResponse -> DescribeSpotDatafeedSubscriptionResult: Probability = 1.00, Count = 2
DescribeSpotDatafeedSubscription -> describeSpotDatafeedSubscription: Probability = 1.00, Count = 3
DescribeSpotDatafeedSubscriptionRequest -> DescribeSpotDatafeedSubscriptionRequest: Probability = 1.00, Count = 2
Invoke<DescribeSpotDatafeedSubscriptionResponse> -> executeDescribeSpotDatafeedSubscription: Probability = 1.00, Count = 1
CharArrayReader -> CharArrayReader: Probability = 1.00, Count = 2
this.buf -> this.buf: Probability = 1.00, Count = 3
this.count -> this.count: Probability = 1.00, Count = 9
SetPerfObject -> setPerfObject: Probability = 1.00, Count = 1
perfObjects[key] -> perfObjects.put: Probability = 1.00, Count = 1
ExitStandbyResponse -> ExitStandbyResult: Probability = 1.00, Count = 1
ExitStandby -> exitStandby: Probability = 1.00, Count = 1
ExitStandbyRequest -> ExitStandbyRequest: Probability = 1.00, Count = 1
Invoke<ExitStandbyResponse> -> executeExitStandby: Probability = 1.00, Count = 1
exc, -> Throwable: Probability = 0.50, Count = 1
exc, -> exc,: Probability = 0.50, Count = 1
remaining_1 -> remaining: Probability = 0.60, Count = 6
remaining_1 -> target.remaining: Probability = 0.20, Count = 2
remaining_1 -> char[remaining]: Probability = 0.10, Count = 1
remaining_1 -> target.put: Probability = 0.10, Count = 1
getFloat -> getFloat: Probability = 1.00, Count = 2
Sharpen.Util.IntBitsToFloat -> Float.intBitsToFloat: Probability = 1.00, Count = 2
getInt -> getInt: Probability = 1.00, Count = 3
UpdateApplicationRequest -> UpdateApplicationRequest: Probability = 1.00, Count = 2
InitReader -> initReader: Probability = 1.00, Count = 1
ByteSliceReader -> ByteSliceReader: Probability = 1.00, Count = 1
intStart -> streamCount: Probability = 0.17, Count = 1
intStart -> intStart: Probability = 0.33, Count = 2
intStart -> postingsArray.intStarts[termID]: Probability = 0.17, Count = 1
intStart -> intPool.buffers[intStart: Probability = 0.17, Count = 1
intStart -> IntBlockPool.INT_BLOCK_SHIFT]: Probability = 0.17, Count = 1
postingsArray.byteStarts[termID] -> IntBlockPool.INT_BLOCK_MASK: Probability = 1.00, Count = 1
ByteBlockPool.FIRST_LEVEL_SIZE, -> reader.init: Probability = 1.00, Count = 1
stream] -> bytePool,postingsArray.byteStarts[termID]+stream*ByteBlockPool.FIRST_LEVEL_SIZE,ints[upto+stream]: Probability = 1.00, Count = 1
NoSuchElementException -> NoSuchElementException: Probability = 1.00, Count = 2
this.block -> ++dirIdx: Probability = 0.20, Count = 1
this.block -> directory.length: Probability = 0.20, Count = 1
this.block -> block: Probability = 0.40, Count = 2
this.block -> elseblock: Probability = 0.20, Count = 1
this._enclosing.directory[this.dirIdx] -> directory[dirIdx]: Probability = 1.00, Count = 2
this.blkIdx -> blkIdx: Probability = 1.00, Count = 2
DescribeOptionGroupOptionsResponse -> DescribeOptionGroupOptionsResult: Probability = 1.00, Count = 1
DescribeOptionGroupOptions -> describeOptionGroupOptions: Probability = 1.00, Count = 1
DescribeOptionGroupOptionsRequest -> DescribeOptionGroupOptionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeOptionGroupOptionsResponse> -> executeDescribeOptionGroupOptions: Probability = 1.00, Count = 1
Alloc -> alloc: Probability = 1.00, Count = 2
blockSize] -> blockSize]: Probability = 1.00, Count = 2
aux, -> aux,: Probability = 1.00, Count = 4
ti -> ti:: Probability = 0.50, Count = 1
ti -> termsInfos: Probability = 0.50, Count = 1
text.Append -> text.append: Probability = 0.75, Count = 3
text.Append -> ti.getText: Probability = 0.25, Count = 1
text.ToString -> text.toString: Probability = 1.00, Count = 2
ListContactFlowsResponse -> ListContactFlowsResult: Probability = 1.00, Count = 1
ListContactFlows -> listContactFlows: Probability = 1.00, Count = 1
ListContactFlowsRequest -> ListContactFlowsRequest: Probability = 1.00, Count = 1
Invoke<ListContactFlowsResponse> -> executeListContactFlows: Probability = 1.00, Count = 1
analyzerName -> analyzerName: Probability = 0.29, Count = 8
analyzerName -> analyzerNames.size: Probability = 0.04, Count = 1
analyzerName -> analyzerNames.get: Probability = 0.04, Count = 1
analyzerName -> current++: Probability = 0.04, Count = 1
analyzerName -> analyzerName.length: Probability = 0.04, Count = 1
analyzerName -> "org.apache.lucene.analysis.standard.StandardAnalyzer": Probability = 0.04, Count = 1
analyzerName -> getRunData: Probability = 0.07, Count = 2
analyzerName -> .getAnalyzerFactories: Probability = 0.04, Count = 1
analyzerName -> factory.create: Probability = 0.04, Count = 1
analyzerName -> analyzerName.contains: Probability = 0.04, Count = 1
analyzerName -> analyzerName.startsWith: Probability = 0.04, Count = 1
analyzerName -> "standard.": Probability = 0.04, Count = 1
analyzerName -> "org.apache.lucene.analysis.": Probability = 0.07, Count = 2
analyzerName -> coreClassName: Probability = 0.11, Count = 3
analyzerName -> "org.apache.lucene.analysis.core.": Probability = 0.04, Count = 1
analyzerName -> ClassNotFoundException: Probability = 0.04, Count = 1
analyzerName -> analyzerName,: Probability = 0.04, Count = 1
AnalyzerFactory -> AnalyzerFactory: Probability = 1.00, Count = 2
coreClassName -> analyzerName: Probability = 1.00, Count = 5
PrefixQuery -> PrefixQuery: Probability = 1.00, Count = 2
IsSheetVeryHidden -> isSheetVeryHidden: Probability = 1.00, Count = 1
UpdateAccessKeyRequest -> UpdateAccessKeyRequest: Probability = 1.00, Count = 1
_accessKeyId -> setAccessKeyId: Probability = 1.00, Count = 3
ThreeDEval -> ThreeDEval: Probability = 1.00, Count = 5
criteriaPredicate -> criteriaPredicate: Probability = 1.00, Count = 7
sIx -> firstSheetIndex: Probability = 0.22, Count = 4
sIx -> lastSheetIndex: Probability = 0.22, Count = 4
sIx -> sIx: Probability = 0.28, Count = 5
sIx -> sIx++: Probability = 0.11, Count = 2
sIx -> refEval.getFirstSheetIndex: Probability = 0.06, Count = 1
sIx -> refEval.getLastSheetIndex: Probability = 0.06, Count = 1
sIx -> refEval.getInnerValueEval: Probability = 0.06, Count = 1
rcIx -> rrIx=0: Probability = 0.11, Count = 1
rcIx -> rrIx<height: Probability = 0.11, Count = 1
rcIx -> rrIx++: Probability = 0.11, Count = 1
rcIx -> rcIx=0: Probability = 0.11, Count = 1
rcIx -> rcIx<width: Probability = 0.11, Count = 1
rcIx -> rcIx++: Probability = 0.11, Count = 1
rcIx -> areaEval.getValue: Probability = 0.11, Count = 1
rcIx -> sIx,: Probability = 0.11, Count = 1
rcIx -> rrIx,: Probability = 0.11, Count = 1
I_MatchAreaPredicate -> rrIx,: Probability = 0.14, Count = 1
I_MatchAreaPredicate -> rcIx: Probability = 0.29, Count = 2
I_MatchAreaPredicate -> I_MatchAreaPredicate: Probability = 0.43, Count = 3
I_MatchAreaPredicate -> areaPredicate: Probability = 0.14, Count = 1
criteriaPredicate.Matches -> criteriaPredicate.matches: Probability = 1.00, Count = 3
result++ -> result++: Probability = 1.00, Count = 2
Sharpen.Collections.AddAll -> this.refSpecs.addAll: Probability = 1.00, Count = 2
CreateNodeResponse -> CreateNodeResult: Probability = 1.00, Count = 1
CreateNode -> createNode: Probability = 1.00, Count = 1
CreateNodeRequest -> CreateNodeRequest: Probability = 1.00, Count = 1
Invoke<CreateNodeResponse> -> executeCreateNode: Probability = 1.00, Count = 1
Note -> Note: Probability = 1.00, Count = 4
jjmatchedPos -> jjmatchedPos: Probability = 1.00, Count = 2
jjnewStateCnt -> jjnewStateCnt: Probability = 1.00, Count = 2
curLexState -> curLexState: Probability = 1.00, Count = 2
defaultLexState -> defaultLexState: Probability = 1.00, Count = 2
m_input_stream -> input_stream: Probability = 1.00, Count = 4
ReInitRounds -> ReInitRounds: Probability = 1.00, Count = 2
SetDeltaBaseCacheLimit -> setDeltaBaseCacheLimit: Probability = 1.00, Count = 1
errorMessage, -> errCode,: Probability = 0.67, Count = 2
errorMessage, -> errMsg,: Probability = 0.33, Count = 1
requestId -> requestId: Probability = 0.50, Count = 2
requestId -> errMsg: Probability = 0.25, Count = 1
requestId -> this.setRequestId: Probability = 0.25, Count = 1
MoreLikeThisQuery -> MoreLikeThisQuery: Probability = 1.00, Count = 1
likeText, -> likeText,: Probability = 0.50, Count = 1
likeText, -> moreLikeFields,: Probability = 0.50, Count = 1
likeText -> Objects.requireNonNull: Probability = 1.00, Count = 2
this.LikeText -> likeText: Probability = 0.50, Count = 1
this.LikeText -> this.moreLikeFields: Probability = 0.50, Count = 1
this.MoreLikeFields -> moreLikeFields: Probability = 1.00, Count = 1
moreLikeFields -> Objects.requireNonNull: Probability = 1.00, Count = 2
DescribeImageAttributeResponse -> DescribeImageAttributeResult: Probability = 1.00, Count = 1
DescribeImageAttribute -> describeImageAttribute: Probability = 1.00, Count = 1
Invoke<DescribeImageAttributeResponse> -> executeDescribeImageAttribute: Probability = 1.00, Count = 1
DeregisterFromWorkMailResponse -> DeregisterFromWorkMailResult: Probability = 1.00, Count = 1
DeregisterFromWorkMail -> deregisterFromWorkMail: Probability = 1.00, Count = 1
DeregisterFromWorkMailRequest -> DeregisterFromWorkMailRequest: Probability = 1.00, Count = 1
Invoke<DeregisterFromWorkMailResponse> -> executeDeregisterFromWorkMail: Probability = 1.00, Count = 1
PutClusterCapacityProvidersResponse -> PutClusterCapacityProvidersResult: Probability = 1.00, Count = 1
PutClusterCapacityProviders -> putClusterCapacityProviders: Probability = 1.00, Count = 1
PutClusterCapacityProvidersRequest -> PutClusterCapacityProvidersRequest: Probability = 1.00, Count = 1
Invoke<PutClusterCapacityProvidersResponse> -> executePutClusterCapacityProviders: Probability = 1.00, Count = 1
ChangeMessageVisibilityBatchRequestEntry -> ChangeMessageVisibilityBatchRequestEntry: Probability = 1.00, Count = 1
cmp.compare -> cmp.compare: Probability = 1.00, Count = 1
o2, -> o2,: Probability = 1.00, Count = 1
o1 -> o1: Probability = 1.00, Count = 2
GetAttributesRequest -> GetAttributesRequest: Probability = 1.00, Count = 2
_amountToMove -> +_amountToMove: Probability = 1.00, Count = 1
DescribeFpgaImagesResponse -> DescribeFpgaImagesResult: Probability = 1.00, Count = 1
DescribeFpgaImages -> describeFpgaImages: Probability = 1.00, Count = 1
DescribeFpgaImagesRequest -> DescribeFpgaImagesRequest: Probability = 1.00, Count = 1
Invoke<DescribeFpgaImagesResponse> -> executeDescribeFpgaImages: Probability = 1.00, Count = 1
NewInserter -> ObjectDirectoryInserter: Probability = 0.50, Count = 1
NewInserter -> newInserter: Probability = 0.50, Count = 1
ObjectDirectoryInserter -> ObjectDirectoryInserter: Probability = 1.00, Count = 1
IsRetainBody -> isRetainBody: Probability = 1.00, Count = 1
AddApplicationVpcConfigurationResponse -> AddApplicationVpcConfigurationResult: Probability = 1.00, Count = 1
AddApplicationVpcConfiguration -> addApplicationVpcConfiguration: Probability = 1.00, Count = 1
AddApplicationVpcConfigurationRequest -> AddApplicationVpcConfigurationRequest: Probability = 1.00, Count = 1
Invoke<AddApplicationVpcConfigurationResponse> -> executeAddApplicationVpcConfiguration: Probability = 1.00, Count = 1
SpreadsheetVersion.EXCEL2007 -> SpreadsheetVersion.EXCEL97: Probability = 1.00, Count = 1
destination, -> destination,: Probability = 1.00, Count = 2
MergeStrategy -> MergeStrategy: Probability = 1.00, Count = 1
STRATEGIES.Get -> STRATEGIES.get: Probability = 1.00, Count = 1
AssociateConnectionWithLagResponse -> AssociateConnectionWithLagResult: Probability = 1.00, Count = 1
AssociateConnectionWithLag -> associateConnectionWithLag: Probability = 1.00, Count = 1
AssociateConnectionWithLagRequest -> AssociateConnectionWithLagRequest: Probability = 1.00, Count = 1
Invoke<AssociateConnectionWithLagResponse> -> executeAssociateConnectionWithLag: Probability = 1.00, Count = 1
GetShortValue -> getShortValue: Probability = 1.00, Count = 1
this.GetValue -> getValue: Probability = 1.00, Count = 1
getSentenceInstance -> getSentenceInstance: Probability = 1.00, Count = 2
PipedReader -> PipedReader: Probability = 1.00, Count = 2
java.io.PipedWriter -> PipedWriter: Probability = 1.00, Count = 3
pipeSize -> pipeSize: Probability = 0.50, Count = 4
pipeSize -> throws: Probability = 0.25, Count = 2
pipeSize -> IOException: Probability = 0.25, Count = 2
ImportKeyPairRequest -> ImportKeyPairRequest: Probability = 1.00, Count = 2
publicKeyMaterial -> publicKeyMaterial: Probability = 1.00, Count = 2
_keyName -> setKeyName: Probability = 1.00, Count = 3
_publicKeyMaterial -> setPublicKeyMaterial: Probability = 1.00, Count = 1
DeleteFaceRequest -> DeleteFaceRequest: Probability = 1.00, Count = 1
"DeleteFace" -> "DeleteFace": Probability = 1.00, Count = 1
CreateReceiptRuleSetResponse -> CreateReceiptRuleSetResult: Probability = 1.00, Count = 1
CreateReceiptRuleSet -> createReceiptRuleSet: Probability = 1.00, Count = 1
CreateReceiptRuleSetRequest -> CreateReceiptRuleSetRequest: Probability = 1.00, Count = 1
Invoke<CreateReceiptRuleSetResponse> -> executeCreateReceiptRuleSet: Probability = 1.00, Count = 1
RemovePermissionRequest -> RemovePermissionRequest: Probability = 1.00, Count = 4
_label -> setLabel: Probability = 1.00, Count = 2
"DFR -> "DFR: Probability = 1.00, Count = 1
m_basicModel.ToString -> basicModel.toString: Probability = 1.00, Count = 1
m_afterEffect.ToString -> afterEffect.toString: Probability = 1.00, Count = 1
DeleteMatchmakingConfigurationResponse -> DeleteMatchmakingConfigurationResult: Probability = 1.00, Count = 1
DeleteMatchmakingConfiguration -> deleteMatchmakingConfiguration: Probability = 1.00, Count = 1
DeleteMatchmakingConfigurationRequest -> DeleteMatchmakingConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DeleteMatchmakingConfigurationResponse> -> executeDeleteMatchmakingConfiguration: Probability = 1.00, Count = 1
ResolveDistErr -> resolveDistErr: Probability = 1.00, Count = 1
defaultDistErrPct -> defaultDistErrPct: Probability = 1.00, Count = 2
DistErr -> distErr: Probability = 0.57, Count = 4
DistErr -> distErrPct: Probability = 0.43, Count = 3
distErrPct -> this.distErrPct: Probability = 1.00, Count = 1
this.distErrPct -> this.distErrPct: Probability = 1.00, Count = 1
CalcDistanceFromErrPct -> calcDistanceFromErrPct: Probability = 1.00, Count = 1
Shape, -> shape,: Probability = 1.00, Count = 1
distErrPct, -> distErrPct,: Probability = 1.00, Count = 1
replacement_1 -> replaceWith: Probability = 0.12, Count = 2
replacement_1 -> replacement: Probability = 0.65, Count = 11
replacement_1 -> this.replacementBytes: Probability = 0.06, Count = 1
replacement_1 -> implReplaceWith: Probability = 0.12, Count = 2
replacement_1 -> CharsetDecoder: Probability = 0.06, Count = 1
"replacement -> "replacement: Probability = 1.00, Count = 4
replacement_1.Length -> replacement.length: Probability = 0.43, Count = 3
replacement_1.Length -> maxBytesPerChar: Probability = 0.29, Count = 2
replacement_1.Length -> +replacement.length: Probability = 0.29, Count = 2
CreateApplicationSnapshotResponse -> CreateApplicationSnapshotResult: Probability = 1.00, Count = 1
CreateApplicationSnapshot -> createApplicationSnapshot: Probability = 1.00, Count = 1
CreateApplicationSnapshotRequest -> CreateApplicationSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CreateApplicationSnapshotResponse> -> executeCreateApplicationSnapshot: Probability = 1.00, Count = 1
MoPenBindIsvRequest -> MoPenBindIsvRequest: Probability = 1.00, Count = 1
"MoPenBindIsv", -> "MoPenBindIsv",: Probability = 1.00, Count = 1
AssociateIpGroupsResponse -> AssociateIpGroupsResult: Probability = 1.00, Count = 1
AssociateIpGroups -> associateIpGroups: Probability = 1.00, Count = 1
AssociateIpGroupsRequest -> AssociateIpGroupsRequest: Probability = 1.00, Count = 1
Invoke<AssociateIpGroupsResponse> -> executeAssociateIpGroups: Probability = 1.00, Count = 1
TestEventPatternResponse -> TestEventPatternResult: Probability = 1.00, Count = 1
TestEventPattern -> testEventPattern: Probability = 1.00, Count = 1
TestEventPatternRequest -> TestEventPatternRequest: Probability = 1.00, Count = 1
Invoke<TestEventPatternResponse> -> executeTestEventPattern: Probability = 1.00, Count = 1
file, -> file,: Probability = 0.75, Count = 3
file, -> FileNotFoundException: Probability = 0.25, Count = 1
this.file -> this.file: Probability = 1.00, Count = 1
DeleteSkillGroupResponse -> DeleteSkillGroupResult: Probability = 1.00, Count = 1
DeleteSkillGroup -> deleteSkillGroup: Probability = 1.00, Count = 1
DeleteSkillGroupRequest -> DeleteSkillGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteSkillGroupResponse> -> executeDeleteSkillGroup: Probability = 1.00, Count = 1
SortedDocValuesField -> SortedDocValuesField: Probability = 1.00, Count = 1
TYPE -> TYPE: Probability = 1.00, Count = 2
CreateNetworkResponse -> CreateNetworkResult: Probability = 1.00, Count = 1
CreateNetwork -> createNetwork: Probability = 1.00, Count = 1
CreateNetworkRequest -> CreateNetworkRequest: Probability = 1.00, Count = 1
Invoke<CreateNetworkResponse> -> executeCreateNetwork: Probability = 1.00, Count = 1
DeleteGroupRequest -> DeleteGroupRequest: Probability = 1.00, Count = 1
DescribeCacheEngineVersionsResponse -> DescribeCacheEngineVersionsResult: Probability = 1.00, Count = 2
DescribeCacheEngineVersions -> describeCacheEngineVersions: Probability = 1.00, Count = 3
DescribeCacheEngineVersionsRequest -> DescribeCacheEngineVersionsRequest: Probability = 1.00, Count = 2
Invoke<DescribeCacheEngineVersionsResponse> -> executeDescribeCacheEngineVersions: Probability = 1.00, Count = 1
LineParser -> LineParser: Probability = 1.00, Count = 1
this.m_header -> this.header: Probability = 1.00, Count = 1
RestoreDBInstanceFromDBSnapshotResponse -> DBInstance: Probability = 1.00, Count = 1
RestoreDBInstanceFromDBSnapshot -> restoreDBInstanceFromDBSnapshot: Probability = 1.00, Count = 1
Invoke<RestoreDBInstanceFromDBSnapshotResponse> -> executeRestoreDBInstanceFromDBSnapshot: Probability = 1.00, Count = 1
push -> push: Probability = 1.00, Count = 1
"Stream -> "Stream: Probability = 1.00, Count = 2
"Mark -> "Mark: Probability = 1.00, Count = 2
invalidated." -> invalidated.": Probability = 1.00, Count = 1
UpdateUsagePlanResponse -> UpdateUsagePlanResult: Probability = 1.00, Count = 1
UpdateUsagePlan -> updateUsagePlan: Probability = 1.00, Count = 1
UpdateUsagePlanRequest -> UpdateUsagePlanRequest: Probability = 1.00, Count = 1
Invoke<UpdateUsagePlanResponse> -> executeUpdateUsagePlan: Probability = 1.00, Count = 1
other.position -> other.position: Probability = 1.00, Count = 3
StringPtg -> StringPtg: Probability = 1.00, Count = 1
formulas -> "String: Probability = 0.50, Count = 1
formulas -> literals: Probability = 0.50, Count = 1
bigger -> bigger: Probability = 0.83, Count = 5
bigger -> this.intSet.size: Probability = 0.17, Count = 1
field_1_Length -> field_3_string: Probability = 1.00, Count = 1
DiffEntry.ChangeType -> ChangeType: Probability = 1.00, Count = 1
GetChangeType -> getChangeType: Probability = 1.00, Count = 1
AsFormulaString -> asFormulaString: Probability = 1.00, Count = 3
DataSize -> getDataSize: Probability = 1.00, Count = 3
field_6_reserved3 -> field_6_reserved3: Probability = 1.00, Count = 1
DescribeAppResponse -> DescribeAppResult: Probability = 1.00, Count = 1
DescribeApp -> describeApp: Probability = 1.00, Count = 1
DescribeAppRequest -> DescribeAppRequest: Probability = 1.00, Count = 1
Invoke<DescribeAppResponse> -> executeDescribeApp: Probability = 1.00, Count = 1
DirCacheEntry> -> DirCacheEntry>: Probability = 1.00, Count = 1
GetToBeCheckedOut -> getToBeCheckedOut: Probability = 1.00, Count = 1
toBeCheckedOut -> toBeCheckedOut: Probability = 1.00, Count = 1
CreatePublicVirtualInterfaceResponse -> CreatePublicVirtualInterfaceResult: Probability = 1.00, Count = 1
CreatePublicVirtualInterface -> createPublicVirtualInterface: Probability = 1.00, Count = 1
CreatePublicVirtualInterfaceRequest -> CreatePublicVirtualInterfaceRequest: Probability = 1.00, Count = 1
Invoke<CreatePublicVirtualInterfaceResponse> -> executeCreatePublicVirtualInterface: Probability = 1.00, Count = 1
CreateQueueResponse -> CreateQueueResult: Probability = 1.00, Count = 2
CreateQueue -> createQueue: Probability = 1.00, Count = 3
queueName -> queueName: Probability = 1.00, Count = 6
CreateQueueRequest -> CreateQueueRequest: Probability = 1.00, Count = 2
request.QueueName -> .withQueueName: Probability = 1.00, Count = 2
CreateFieldLevelEncryptionProfileResponse -> CreateFieldLevelEncryptionProfileResult: Probability = 1.00, Count = 1
CreateFieldLevelEncryptionProfile -> createFieldLevelEncryptionProfile: Probability = 1.00, Count = 1
CreateFieldLevelEncryptionProfileRequest -> CreateFieldLevelEncryptionProfileRequest: Probability = 1.00, Count = 1
Invoke<CreateFieldLevelEncryptionProfileResponse> -> executeCreateFieldLevelEncryptionProfile: Probability = 1.00, Count = 1
getSmileyResource -> getSmileyResource: Probability = 1.00, Count = 1
sIconIds[which] -> sIconIds[which]: Probability = 1.00, Count = 1
m_buffer -> setBufferSize: Probability = 0.11, Count = 1
m_buffer -> buffer: Probability = 0.44, Count = 4
m_buffer -> buffer.length:: Probability = 0.11, Count = 1
m_buffer -> "buffer=": Probability = 0.11, Count = 1
m_buffer -> bufferSize=": Probability = 0.11, Count = 1
m_buffer -> buffer.length=": Probability = 0.11, Count = 1
CheckBufferSize -> checkBufferSize: Probability = 1.00, Count = 2
numToCopy -> newBuffer: Probability = 0.27, Count = 3
numToCopy -> bufferLength-bufferPosition: Probability = 0.09, Count = 1
numToCopy -> numToCopy: Probability = 0.36, Count = 4
numToCopy -> elsenumToCopy: Probability = 0.09, Count = 1
numToCopy -> bufferPosition,: Probability = 0.09, Count = 1
numToCopy -> newBuffer,: Probability = 0.09, Count = 1
leftInBuffer -> leftInBuffer: Probability = 1.00, Count = 3
bufferStart -> bufferStart: Probability = 1.00, Count = 2
bufferLength -> bufferLength: Probability = 1.00, Count = 4
DisassociateSigninDelegateGroupsFromAccountResponse -> DisassociateSigninDelegateGroupsFromAccountResult: Probability = 1.00, Count = 1
DisassociateSigninDelegateGroupsFromAccount -> disassociateSigninDelegateGroupsFromAccount: Probability = 1.00, Count = 1
DisassociateSigninDelegateGroupsFromAccountRequest -> DisassociateSigninDelegateGroupsFromAccountRequest: Probability = 1.00, Count = 1
Invoke<DisassociateSigninDelegateGroupsFromAccountResponse> -> executeDisassociateSigninDelegateGroupsFromAccount: Probability = 1.00, Count = 1
IndicNormalizationFilter -> IndicNormalizationFilter: Probability = 1.00, Count = 2
field_12_zero5 -> field_12_zero5: Probability = 1.00, Count = 2
GetPackedGitLimit -> getPackedGitLimit: Probability = 1.00, Count = 1
DisassociateContactFromAddressBookResponse -> DisassociateContactFromAddressBookResult: Probability = 1.00, Count = 1
DisassociateContactFromAddressBook -> disassociateContactFromAddressBook: Probability = 1.00, Count = 1
DisassociateContactFromAddressBookRequest -> DisassociateContactFromAddressBookRequest: Probability = 1.00, Count = 1
Invoke<DisassociateContactFromAddressBookResponse> -> executeDisassociateContactFromAddressBook: Probability = 1.00, Count = 1
_buf[i++] -> _buf[i++]: Probability = 1.00, Count = 6
s.CopyTo -> s.getChars: Probability = 1.00, Count = 5
AssociateSkillWithUsersResponse -> AssociateSkillWithUsersResult: Probability = 1.00, Count = 1
AssociateSkillWithUsers -> associateSkillWithUsers: Probability = 1.00, Count = 1
AssociateSkillWithUsersRequest -> AssociateSkillWithUsersRequest: Probability = 1.00, Count = 1
Invoke<AssociateSkillWithUsersResponse> -> executeAssociateSkillWithUsers: Probability = 1.00, Count = 1
DoPrune -> doPrune: Probability = 1.00, Count = 1
ageSec, -> ageSec,: Probability = 1.00, Count = 1
ageSec -> ageSec: Probability = 1.00, Count = 1
maxAgeSec -> maxAgeSec: Probability = 1.00, Count = 5
DescribeObservationResponse -> DescribeObservationResult: Probability = 1.00, Count = 1
DescribeObservation -> describeObservation: Probability = 1.00, Count = 1
DescribeObservationRequest -> DescribeObservationRequest: Probability = 1.00, Count = 1
Invoke<DescribeObservationResponse> -> executeDescribeObservation: Probability = 1.00, Count = 1
DeletePresetResponse -> DeletePresetResult: Probability = 1.00, Count = 1
DeletePreset -> deletePreset: Probability = 1.00, Count = 1
DeletePresetRequest -> DeletePresetRequest: Probability = 1.00, Count = 1
Invoke<DeletePresetResponse> -> executeDeletePreset: Probability = 1.00, Count = 1
KeyValuePair<string, -> Map.Entry<String,DocValuesProducer>: Probability = 0.17, Count = 2
KeyValuePair<string, -> formats.entrySet: Probability = 0.17, Count = 2
KeyValuePair<string, -> *: Probability = 0.33, Count = 4
KeyValuePair<string, -> RamUsageEstimator.NUM_BYTES_OBJECT_REF: Probability = 0.17, Count = 2
KeyValuePair<string, -> ramBytesUsed: Probability = 0.17, Count = 2
entry.Key.Length -> .length: Probability = 0.30, Count = 3
entry.Key.Length -> entry:: Probability = 0.30, Count = 3
entry.Key.Length -> Map.Entry<String,FieldsProducer>: Probability = 0.20, Count = 2
entry.Key.Length -> formats.entrySet: Probability = 0.20, Count = 2
entry.Value.RamBytesUsed -> entry.getValue: Probability = 0.40, Count = 6
entry.Value.RamBytesUsed -> .ramBytesUsed: Probability = 0.40, Count = 6
entry.Value.RamBytesUsed -> ramBytesUsed: Probability = 0.20, Count = 3
RebuildWorkspacesResponse -> RebuildWorkspacesResult: Probability = 1.00, Count = 1
RebuildWorkspaces -> rebuildWorkspaces: Probability = 1.00, Count = 1
RebuildWorkspacesRequest -> RebuildWorkspacesRequest: Probability = 1.00, Count = 1
Invoke<RebuildWorkspacesResponse> -> executeRebuildWorkspaces: Probability = 1.00, Count = 1
GetLexiconResponse -> GetLexiconResult: Probability = 1.00, Count = 1
GetLexicon -> getLexicon: Probability = 1.00, Count = 1
GetLexiconRequest -> GetLexiconRequest: Probability = 1.00, Count = 1
Invoke<GetLexiconResponse> -> executeGetLexicon: Probability = 1.00, Count = 1
UpdateDeploymentStrategyResponse -> UpdateDeploymentStrategyResult: Probability = 1.00, Count = 1
UpdateDeploymentStrategy -> updateDeploymentStrategy: Probability = 1.00, Count = 1
UpdateDeploymentStrategyRequest -> UpdateDeploymentStrategyRequest: Probability = 1.00, Count = 1
Invoke<UpdateDeploymentStrategyResponse> -> executeUpdateDeploymentStrategy: Probability = 1.00, Count = 1
GetAlgorithmListRequest -> GetAlgorithmListRequest: Probability = 1.00, Count = 1
"GetAlgorithmList" -> "GetAlgorithmList": Probability = 1.00, Count = 1
IsForceUpdate -> isForceUpdate: Probability = 1.00, Count = 2
ListGameServersResponse -> ListGameServersResult: Probability = 1.00, Count = 1
ListGameServers -> listGameServers: Probability = 1.00, Count = 1
ListGameServersRequest -> ListGameServersRequest: Probability = 1.00, Count = 1
Invoke<ListGameServersResponse> -> executeListGameServers: Probability = 1.00, Count = 1
!IsRoot -> !isRoot: Probability = 1.00, Count = 1
IsDeleteOK -> isDeleteOK: Probability = 1.00, Count = 1
_parent.DeleteEntry -> _parent.deleteEntry: Probability = 1.00, Count = 1
TableRecord -> TableRecord: Probability = 1.00, Count = 1
field_10_colInputCol -> field_10_colInputCol: Probability = 1.00, Count = 2
AllocateHostsResponse -> AllocateHostsResult: Probability = 1.00, Count = 1
AllocateHosts -> allocateHosts: Probability = 1.00, Count = 1
AllocateHostsRequest -> AllocateHostsRequest: Probability = 1.00, Count = 1
Invoke<AllocateHostsResponse> -> executeAllocateHosts: Probability = 1.00, Count = 1
_ulrOutput.Terminate -> _ulrOutput.terminate: Probability = 1.00, Count = 1
_totalPreviousRecordsSize -> _totalPreviousRecordsSize: Probability = 1.00, Count = 1
_ulrOutput.TotalSize -> _ulrOutput.getTotalSize: Probability = 1.00, Count = 1
_ulrOutput -> _ulrOutput: Probability = 1.00, Count = 1
UnknownLengthRecordOutput -> UnknownLengthRecordOutput: Probability = 1.00, Count = 1
_out, -> _out,: Probability = 1.00, Count = 1
ContinueRecord.sid -> ContinueRecord.sid: Probability = 1.00, Count = 2
BlankCellSheetGroup -> BlankCellSheetGroup: Probability = 0.50, Count = 1
BlankCellSheetGroup -> _sheetGroupsByBookSheet.get: Probability = 0.50, Count = 1
bcsg -> bcsg: Probability = 1.00, Count = 2
bcsg.ContainsCell -> bcsg.containsCell: Probability = 1.00, Count = 1
DescribeTextTranslationJobResponse -> DescribeTextTranslationJobResult: Probability = 1.00, Count = 1
DescribeTextTranslationJob -> describeTextTranslationJob: Probability = 1.00, Count = 1
DescribeTextTranslationJobRequest -> DescribeTextTranslationJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeTextTranslationJobResponse> -> executeDescribeTextTranslationJob: Probability = 1.00, Count = 1
remainingData -> remainingData: Probability = 1.00, Count = 5
byte[0] -> byte[0]: Probability = 1.00, Count = 5
remainingData.Length -> remainingData.length: Probability = 1.00, Count = 6
remainingData, -> remainingData,: Probability = 1.00, Count = 3
nBreaks -> nBreaks: Probability = 0.50, Count = 5
nBreaks -> _breaks.size: Probability = 0.10, Count = 1
nBreaks -> Break: Probability = 0.10, Count = 1
nBreaks -> aBreak: Probability = 0.10, Count = 1
nBreaks -> _breaks: Probability = 0.10, Count = 1
nBreaks -> _breaks.ensureCapacity: Probability = 0.10, Count = 1
_breaks[i].Serialize -> aBreak.serialize: Probability = 1.00, Count = 1
BaselineTf -> baselineTf: Probability = 1.00, Count = 2
tf_min -> tf_min: Probability = 1.00, Count = 3
tf_base -> tf_base:: Probability = 0.25, Count = 1
tf_base -> tf_base: Probability = 0.75, Count = 3
Math.Sqrt -> Math.sqrt: Probability = 1.00, Count = 6
isError -> isError: Probability = 1.00, Count = 2
TYPE_UNMAPPABLE_CHAR -> TYPE_UNMAPPABLE_CHAR: Probability = 1.00, Count = 2
GetLastSheetIndexFromExternSheetIndex -> getLastSheetIndexFromExternSheetIndex: Probability = 1.00, Count = 1
externSheetNumber -> externSheetNumber: Probability = 1.00, Count = 2
linkTable.GetLastInternalSheetIndexForExtIndex -> linkTable.getLastInternalSheetIndexForExtIndex: Probability = 1.00, Count = 2
PlainTextDictionary -> PlainTextDictionary: Probability = 1.00, Count = 1
allowable -> allowable: Probability = 1.00, Count = 4
_endIndex -> _endIndex: Probability = 1.00, Count = 3
MergeCellsRecord[] -> MergeCellsRecord[]: Probability = 1.00, Count = 1
mcrs -> mcrs: Probability = 1.00, Count = 1
mcrs.Length -> mcrs.length: Probability = 1.00, Count = 1
AddMergeCellsRecord -> addMergeCellsRecord: Probability = 1.00, Count = 1
mcrs[i] -> mcrs[i]: Probability = 1.00, Count = 1
Invoke<DescribeInternetGatewaysResponse> -> executeDescribeInternetGateways: Probability = 1.00, Count = 1
RemoveLastSaveDateTime -> removeLastSaveDateTime: Probability = 1.00, Count = 1
PropertyIDMap.PID_LASTSAVE_DTM -> PropertyIDMap.PID_LASTSAVE_DTM: Probability = 1.00, Count = 1
hitEnd -> hitEnd: Probability = 1.00, Count = 1
hitEndImpl -> hitEndImpl: Probability = 1.00, Count = 1
address -> address: Probability = 1.00, Count = 3
ListSkillsResponse -> ListSkillsResult: Probability = 1.00, Count = 1
ListSkills -> listSkills: Probability = 1.00, Count = 1
ListSkillsRequest -> ListSkillsRequest: Probability = 1.00, Count = 1
Invoke<ListSkillsResponse> -> executeListSkills: Probability = 1.00, Count = 1
"popMode" -> "popMode": Probability = 1.00, Count = 1
GetCloudFrontOriginAccessIdentityResponse -> GetCloudFrontOriginAccessIdentityResult: Probability = 1.00, Count = 1
GetCloudFrontOriginAccessIdentity -> getCloudFrontOriginAccessIdentity: Probability = 1.00, Count = 1
GetCloudFrontOriginAccessIdentityRequest -> GetCloudFrontOriginAccessIdentityRequest: Probability = 1.00, Count = 2
Invoke<GetCloudFrontOriginAccessIdentityResponse> -> executeGetCloudFrontOriginAccessIdentity: Probability = 1.00, Count = 1
regions, -> regions,: Probability = 1.00, Count = 5
regions -> regions: Probability = 1.00, Count = 4
cfRules.Length -> "cfRules: Probability = 0.40, Count = 2
cfRules.Length -> cfRules.length: Probability = 0.60, Count = 3
empty" -> empty": Probability = 1.00, Count = 4
cfra -> cfra: Probability = 1.00, Count = 2
_conditionalFormattingTable.Add -> _conditionalFormattingTable.add: Probability = 1.00, Count = 2
Rewind -> rewind: Probability = 1.00, Count = 2
walker.IsPathPrefix -> walker.isPathPrefix: Probability = 0.50, Count = 1
walker.IsPathPrefix -> matchFilter: Probability = 0.50, Count = 1
TagDeliveryStreamResponse -> TagDeliveryStreamResult: Probability = 1.00, Count = 1
TagDeliveryStream -> tagDeliveryStream: Probability = 1.00, Count = 1
TagDeliveryStreamRequest -> TagDeliveryStreamRequest: Probability = 1.00, Count = 1
Invoke<TagDeliveryStreamResponse> -> executeTagDeliveryStream: Probability = 1.00, Count = 1
NormaliseBaseTen -> normaliseBaseTen: Probability = 1.00, Count = 1
NormalisedDecimal.Create -> NormalisedDecimal.create: Probability = 1.00, Count = 1
java.util.NavigableSet<K> -> NavigableSet<K>: Probability = 1.00, Count = 2
descendingKeySet -> descendingKeySet: Probability = 1.00, Count = 1
this.fromBound, -> to,: Probability = 1.00, Count = 1
.navigableKeySet -> .navigableKeySet: Probability = 1.00, Count = 1
LittleEndian.INT_SIZE, -> byte[LONG_SIZE]: Probability = 0.25, Count = 1
LittleEndian.INT_SIZE, -> fileTime: Probability = 0.25, Count = 1
LittleEndian.INT_SIZE, -> _format: Probability = 0.25, Count = 1
LittleEndian.INT_SIZE, -> IOUtils.closeQuietly: Probability = 0.25, Count = 1
_dwLowDateTime -> LittleEndian.putLong: Probability = 1.00, Count = 1
DiffCommand -> DiffCommand: Probability = 1.00, Count = 2
Diff -> diff: Probability = 1.00, Count = 1
ModifySnapshotAttributeResponse -> ModifySnapshotAttributeResult: Probability = 1.00, Count = 1
ModifySnapshotAttribute -> modifySnapshotAttribute: Probability = 1.00, Count = 1
ModifySnapshotAttributeRequest -> ModifySnapshotAttributeRequest: Probability = 1.00, Count = 1
Invoke<ModifySnapshotAttributeResponse> -> executeModifySnapshotAttribute: Probability = 1.00, Count = 1
CreateSubnetResponse -> CreateSubnetResult: Probability = 1.00, Count = 1
CreateSubnet -> createSubnet: Probability = 1.00, Count = 1
Invoke<CreateSubnetResponse> -> executeCreateSubnet: Probability = 1.00, Count = 1
java.util.Collections.UnmodifiableRandomAccessList<E> -> UnmodifiableRandomAccessList<E>: Probability = 1.00, Count = 1
this.ThumbnailData, -> getThumbnail: Probability = 1.00, Count = 1
OFFSet_CF -> OFFSET_CF: Probability = 1.00, Count = 1
_regions -> _regions: Probability = 1.00, Count = 3
_constraint -> _constraint: Probability = 1.00, Count = 1
DeleteSegmentResponse -> DeleteSegmentResult: Probability = 1.00, Count = 1
DeleteSegment -> deleteSegment: Probability = 1.00, Count = 1
DeleteSegmentRequest -> DeleteSegmentRequest: Probability = 1.00, Count = 1
Invoke<DeleteSegmentResponse> -> executeDeleteSegment: Probability = 1.00, Count = 1
AcceptVpcPeeringConnectionResponse -> AcceptVpcPeeringConnectionResult: Probability = 1.00, Count = 1
AcceptVpcPeeringConnection -> acceptVpcPeeringConnection: Probability = 1.00, Count = 1
AcceptVpcPeeringConnectionRequest -> AcceptVpcPeeringConnectionRequest: Probability = 1.00, Count = 1
Invoke<AcceptVpcPeeringConnectionResponse> -> executeAcceptVpcPeeringConnection: Probability = 1.00, Count = 1
PortugueseLightStemFilterFactory -> PortugueseLightStemFilterFactory: Probability = 1.00, Count = 1
RefPtg -> RefPtg: Probability = 1.00, Count = 1
isColumnRelative -> isRowRelative,: Probability = 0.50, Count = 2
isColumnRelative -> isColumnRelative: Probability = 0.50, Count = 2
ExportJournalToS3Response -> ExportJournalToS3Result: Probability = 1.00, Count = 1
ExportJournalToS3 -> exportJournalToS3: Probability = 1.00, Count = 1
ExportJournalToS3Request -> ExportJournalToS3Request: Probability = 1.00, Count = 1
Invoke<ExportJournalToS3Response> -> executeExportJournalToS3: Probability = 1.00, Count = 1
AssociatePhoneNumbersWithVoiceConnectorGroupResponse -> AssociatePhoneNumbersWithVoiceConnectorGroupResult: Probability = 1.00, Count = 1
AssociatePhoneNumbersWithVoiceConnectorGroup -> associatePhoneNumbersWithVoiceConnectorGroup: Probability = 1.00, Count = 1
AssociatePhoneNumbersWithVoiceConnectorGroupRequest -> AssociatePhoneNumbersWithVoiceConnectorGroupRequest: Probability = 1.00, Count = 1
Invoke<AssociatePhoneNumbersWithVoiceConnectorGroupResponse> -> executeAssociatePhoneNumbersWithVoiceConnectorGroup: Probability = 1.00, Count = 1
RecursivePrefixTreeStrategy -> RecursivePrefixTreeStrategy: Probability = 1.00, Count = 1
SpatialPrefixTree -> SpatialPrefixTree: Probability = 1.00, Count = 3
grid, -> grid,: Probability = 1.00, Count = 3
prefixGridScanLevel -> prefixGridScanLevel: Probability = 0.50, Count = 1
prefixGridScanLevel -> grid.getMaxLevels: Probability = 0.50, Count = 1
GetAlbumsByNamesRequest -> GetAlbumsByNamesRequest: Probability = 1.00, Count = 1
"GetAlbumsByNames", -> "GetAlbumsByNames",: Probability = 1.00, Count = 1
SendRawEmailRequest -> SendRawEmailRequest: Probability = 1.00, Count = 2
RawMessage -> RawMessage: Probability = 1.00, Count = 1
rawMessage -> rawMessage: Probability = 1.00, Count = 2
_rawMessage -> setRawMessage: Probability = 1.00, Count = 1
NGramPhraseQuery -> sameClassAs: Probability = 0.50, Count = 1
NGramPhraseQuery -> &&equalsTo: Probability = 0.50, Count = 1
Rule -> Rule: Probability = 1.00, Count = 3
this.m_suffix -> this.suffix: Probability = 1.00, Count = 1
suffix.ToCharArray -> suffix.toCharArray: Probability = 1.00, Count = 1
this.m_replacement -> this.replacement: Probability = 1.00, Count = 1
replacement.ToCharArray -> replacement.toCharArray: Probability = 1.00, Count = 1
this.m_min -> this.min: Probability = 1.00, Count = 2
ListDataSetsResponse -> ListDataSetsResult: Probability = 1.00, Count = 1
ListDataSets -> listDataSets: Probability = 1.00, Count = 1
ListDataSetsRequest -> ListDataSetsRequest: Probability = 1.00, Count = 1
Invoke<ListDataSetsResponse> -> executeListDataSets: Probability = 1.00, Count = 1
lastIndexOf -> lastIndexOf: Probability = 1.00, Count = 7
StopDBClusterResponse -> DBCluster: Probability = 1.00, Count = 1
StopDBCluster -> stopDBCluster: Probability = 1.00, Count = 1
StopDBClusterRequest -> StopDBClusterRequest: Probability = 1.00, Count = 1
Invoke<StopDBClusterResponse> -> executeStopDBCluster: Probability = 1.00, Count = 1
ListRuleNamesByTargetResponse -> ListRuleNamesByTargetResult: Probability = 1.00, Count = 1
ListRuleNamesByTarget -> listRuleNamesByTarget: Probability = 1.00, Count = 1
ListRuleNamesByTargetRequest -> ListRuleNamesByTargetRequest: Probability = 1.00, Count = 1
Invoke<ListRuleNamesByTargetResponse> -> executeListRuleNamesByTarget: Probability = 1.00, Count = 1
field_1_num_strings -> field_1_num_strings: Probability = 1.00, Count = 3
field_2_num_unique_strings -> field_2_num_unique_strings: Probability = 1.00, Count = 2
field_3_strings -> field_3_strings: Probability = 0.80, Count = 4
field_3_strings -> field_2_num_unique_strings: Probability = 0.20, Count = 1
IntMapper<UnicodeString> -> IntMapper<>: Probability = 1.00, Count = 2
deserializer -> deserializer: Probability = 1.00, Count = 2
SSTDeserializer -> SSTDeserializer: Probability = 1.00, Count = 2
field_2_num_unique_strings, -> deserializer.manufactureStrings: Probability = 0.50, Count = 1
field_2_num_unique_strings, -> field_2_num_unique_strings,: Probability = 0.50, Count = 1
DeleteBatchPredictionResponse -> DeleteBatchPredictionResult: Probability = 1.00, Count = 1
DeleteBatchPrediction -> deleteBatchPrediction: Probability = 1.00, Count = 1
DeleteBatchPredictionRequest -> DeleteBatchPredictionRequest: Probability = 1.00, Count = 1
Invoke<DeleteBatchPredictionResponse> -> executeDeleteBatchPrediction: Probability = 1.00, Count = 1
SetReceiptRulePositionResponse -> SetReceiptRulePositionResult: Probability = 1.00, Count = 1
SetReceiptRulePosition -> setReceiptRulePosition: Probability = 1.00, Count = 1
SetReceiptRulePositionRequest -> SetReceiptRulePositionRequest: Probability = 1.00, Count = 1
Invoke<SetReceiptRulePositionResponse> -> executeSetReceiptRulePosition: Probability = 1.00, Count = 1
cellref, -> cellref,: Probability = 1.00, Count = 1
Column=c.Col -> cellref: Probability = 1.00, Count = 1
posStart -> posStart: Probability = 0.80, Count = 4
posStart -> "posStart=": Probability = 0.20, Count = 1
GetIndex -> getIndex: Probability = 1.00, Count = 4
endIndex -> endIndex: Probability = 0.76, Count = 19
endIndex -> endIndex-startIndex+1: Probability = 0.04, Count = 1
endIndex -> "Start: Probability = 0.08, Count = 2
endIndex -> currentFont: Probability = 0.12, Count = 3
char[length] -> char[length]: Probability = 1.00, Count = 3
part1 -> part1: Probability = 0.40, Count = 2
part1 -> buffer.length-startIndex: Probability = 0.20, Count = 1
part1 -> buffer.length-startIndex,: Probability = 0.20, Count = 1
part1 -> length-part1: Probability = 0.20, Count = 1
DescribeHumanLoopResponse -> DescribeHumanLoopResult: Probability = 1.00, Count = 1
DescribeHumanLoop -> describeHumanLoop: Probability = 1.00, Count = 1
DescribeHumanLoopRequest -> DescribeHumanLoopRequest: Probability = 1.00, Count = 1
Invoke<DescribeHumanLoopResponse> -> executeDescribeHumanLoop: Probability = 1.00, Count = 1
PutDedicatedIpInPoolResponse -> PutDedicatedIpInPoolResult: Probability = 1.00, Count = 1
PutDedicatedIpInPool -> putDedicatedIpInPool: Probability = 1.00, Count = 1
PutDedicatedIpInPoolRequest -> PutDedicatedIpInPoolRequest: Probability = 1.00, Count = 1
Invoke<PutDedicatedIpInPoolResponse> -> executePutDedicatedIpInPool: Probability = 1.00, Count = 1
objectType, -> objectType,: Probability = 1.00, Count = 2
List<Search.Query> -> List<Query>: Probability = 1.00, Count = 2
fn, -> fn,: Probability = 1.00, Count = 2
sqi -> Iterator<SrndQuery>: Probability = 0.40, Count = 2
sqi -> sqi: Probability = 0.60, Count = 3
GetSubQueriesEnumerator -> getSubQueriesIterator: Probability = 1.00, Count = 3
sqi.MoveNext -> sqi.hasNext: Probability = 1.00, Count = 3
sqi.Current -> sqi.next: Probability = 1.00, Count = 3
"[SHARED -> "[SHARED: Probability = 1.00, Count = 2
FEATURE]\n" -> FEATURE]\n": Probability = 1.00, Count = 2
"[/SHARED -> "[/SHARED: Probability = 1.00, Count = 2
ProcessIteration -> processIteration: Probability = 1.00, Count = 1
StartDBClusterResponse -> DBCluster: Probability = 1.00, Count = 1
StartDBCluster -> startDBCluster: Probability = 1.00, Count = 1
StartDBClusterRequest -> StartDBClusterRequest: Probability = 1.00, Count = 1
Invoke<StartDBClusterResponse> -> executeStartDBCluster: Probability = 1.00, Count = 1
GetParsedExpression -> getParsedExpression: Probability = 1.00, Count = 1
Formula.GetTokens -> Formula.getTokens: Probability = 1.00, Count = 1
ListDevicesResponse -> ListDevicesResult: Probability = 1.00, Count = 1
ListDevices -> listDevices: Probability = 1.00, Count = 1
ListDevicesRequest -> ListDevicesRequest: Probability = 1.00, Count = 1
Invoke<ListDevicesResponse> -> executeListDevices: Probability = 1.00, Count = 1
ApplyTokenRequest -> ApplyTokenRequest: Probability = 1.00, Count = 1
"ApplyToken", -> "ApplyToken",: Probability = 1.00, Count = 1
EnableVpcClassicLinkDnsSupportResponse -> EnableVpcClassicLinkDnsSupportResult: Probability = 1.00, Count = 1
EnableVpcClassicLinkDnsSupport -> enableVpcClassicLinkDnsSupport: Probability = 1.00, Count = 1
EnableVpcClassicLinkDnsSupportRequest -> EnableVpcClassicLinkDnsSupportRequest: Probability = 1.00, Count = 1
Invoke<EnableVpcClassicLinkDnsSupportResponse> -> executeEnableVpcClassicLinkDnsSupport: Probability = 1.00, Count = 1
ModifyClusterDbRevisionResponse -> Cluster: Probability = 1.00, Count = 1
ModifyClusterDbRevision -> modifyClusterDbRevision: Probability = 1.00, Count = 1
ModifyClusterDbRevisionRequest -> ModifyClusterDbRevisionRequest: Probability = 1.00, Count = 1
Invoke<ModifyClusterDbRevisionResponse> -> executeModifyClusterDbRevision: Probability = 1.00, Count = 1
LinkFaceRequest -> LinkFaceRequest: Probability = 1.00, Count = 1
"LinkFace" -> "LinkFace": Probability = 1.00, Count = 1
RemoveAttributesResponse -> RemoveAttributesResult: Probability = 1.00, Count = 1
RemoveAttributes -> removeAttributes: Probability = 1.00, Count = 1
RemoveAttributesRequest -> RemoveAttributesRequest: Probability = 1.00, Count = 1
Invoke<RemoveAttributesResponse> -> executeRemoveAttributes: Probability = 1.00, Count = 1
PostingsAndFreq -> PostingsAndFreq: Probability = 1.00, Count = 3
other.terms -> other.terms: Probability = 1.00, Count = 2
terms, -> terms,: Probability = 1.00, Count = 3
ModifyMountTargetSecurityGroupsResponse -> ModifyMountTargetSecurityGroupsResult: Probability = 1.00, Count = 1
ModifyMountTargetSecurityGroups -> modifyMountTargetSecurityGroups: Probability = 1.00, Count = 1
ModifyMountTargetSecurityGroupsRequest -> ModifyMountTargetSecurityGroupsRequest: Probability = 1.00, Count = 1
Invoke<ModifyMountTargetSecurityGroupsResponse> -> executeModifyMountTargetSecurityGroups: Probability = 1.00, Count = 1
ListBatchInferenceJobsResponse -> ListBatchInferenceJobsResult: Probability = 1.00, Count = 1
ListBatchInferenceJobs -> listBatchInferenceJobs: Probability = 1.00, Count = 1
ListBatchInferenceJobsRequest -> ListBatchInferenceJobsRequest: Probability = 1.00, Count = 1
Invoke<ListBatchInferenceJobsResponse> -> executeListBatchInferenceJobs: Probability = 1.00, Count = 1
entries[i] -> entries[i]: Probability = 1.00, Count = 2
LimitTokenPositionFilterFactory -> LimitTokenPositionFilterFactory: Probability = 1.00, Count = 1
SaveRecalcRecord -> SaveRecalcRecord: Probability = 1.00, Count = 2
DeleteSecurityGroupResponse -> DeleteSecurityGroupResult: Probability = 1.00, Count = 1
DeleteSecurityGroup -> deleteSecurityGroup: Probability = 1.00, Count = 1
DeleteSecurityGroupRequest -> DeleteSecurityGroupRequest: Probability = 1.00, Count = 2
Invoke<DeleteSecurityGroupResponse> -> executeDeleteSecurityGroup: Probability = 1.00, Count = 1
Atn.GetExpectedTokens -> .getExpectedTokens: Probability = 0.50, Count = 1
Atn.GetExpectedTokens -> getState: Probability = 0.50, Count = 1
State, -> ,: Probability = 1.00, Count = 1
Context -> getContext: Probability = 1.00, Count = 1
ResetPersonalPINResponse -> ResetPersonalPINResult: Probability = 1.00, Count = 1
ResetPersonalPIN -> resetPersonalPIN: Probability = 1.00, Count = 1
ResetPersonalPINRequest -> ResetPersonalPINRequest: Probability = 1.00, Count = 1
Invoke<ResetPersonalPINResponse> -> executeResetPersonalPIN: Probability = 1.00, Count = 1
StartSmartHomeApplianceDiscoveryResponse -> StartSmartHomeApplianceDiscoveryResult: Probability = 1.00, Count = 1
StartSmartHomeApplianceDiscovery -> startSmartHomeApplianceDiscovery: Probability = 1.00, Count = 1
StartSmartHomeApplianceDiscoveryRequest -> StartSmartHomeApplianceDiscoveryRequest: Probability = 1.00, Count = 1
Invoke<StartSmartHomeApplianceDiscoveryResponse> -> executeStartSmartHomeApplianceDiscovery: Probability = 1.00, Count = 1
queryText -> queryText.trim: Probability = 1.00, Count = 1
state.Top -> state.top: Probability = 1.00, Count = 2
this.val -> this.val: Probability = 1.00, Count = 1
returned -> returned: Probability = 1.00, Count = 2
GetRequiredFields -> getRequiredFields: Probability = 1.00, Count = 1
EnumSet.Of -> EnumSet.of: Probability = 1.00, Count = 1
TransportProtocol.URIishField.PATH -> URIishField.PATH: Probability = 1.00, Count = 1
NGit.Config -> Config: Probability = 1.00, Count = 1
defaultConfig -> defaultConfig: Probability = 1.00, Count = 2
baseConfig -> baseConfig: Probability = 1.00, Count = 1
AtomicReference<ConfigSnapshot> -> AtomicReference<>: Probability = 1.00, Count = 1
NewState -> newState: Probability = 1.00, Count = 1
PutAccountSuppressionAttributesResponse -> PutAccountSuppressionAttributesResult: Probability = 1.00, Count = 1
PutAccountSuppressionAttributes -> putAccountSuppressionAttributes: Probability = 1.00, Count = 1
PutAccountSuppressionAttributesRequest -> PutAccountSuppressionAttributesRequest: Probability = 1.00, Count = 1
Invoke<PutAccountSuppressionAttributesResponse> -> executePutAccountSuppressionAttributes: Probability = 1.00, Count = 1
DescribeDocumentClassifierResponse -> DescribeDocumentClassifierResult: Probability = 1.00, Count = 1
DescribeDocumentClassifier -> describeDocumentClassifier: Probability = 1.00, Count = 1
DescribeDocumentClassifierRequest -> DescribeDocumentClassifierRequest: Probability = 1.00, Count = 1
Invoke<DescribeDocumentClassifierResponse> -> executeDescribeDocumentClassifier: Probability = 1.00, Count = 1
GetBasicFunction -> getBasicFunction: Probability = 1.00, Count = 1
FunctionID.INDIRECT:case -> FunctionID.INDIRECT:case: Probability = 1.00, Count = 1
FunctionID.EXTERNAL_FUNC:return -> FunctionID.EXTERNAL_FUNC:return: Probability = 1.00, Count = 1
functions[functionIndex] -> functions[functionIndex]: Probability = 1.00, Count = 1
"FuncIx=" -> "FuncIx=": Probability = 1.00, Count = 1
DeleteFacetResponse -> DeleteFacetResult: Probability = 1.00, Count = 1
DeleteFacet -> deleteFacet: Probability = 1.00, Count = 1
DeleteFacetRequest -> DeleteFacetRequest: Probability = 1.00, Count = 1
Invoke<DeleteFacetResponse> -> executeDeleteFacet: Probability = 1.00, Count = 1
udf -> udf: Probability = 1.00, Count = 3
LinkTable -> LinkTable: Probability = 1.00, Count = 2
lnk -> lnk: Probability = 1.00, Count = 1
xptg -> xptg: Probability = 0.57, Count = 4
xptg -> lnk.getNameXPtg: Probability = 0.14, Count = 1
xptg -> udf.findFunction: Probability = 0.14, Count = 1
xptg -> lnk.addNameXPtg: Probability = 0.14, Count = 1
AllocateTransitVirtualInterfaceResponse -> AllocateTransitVirtualInterfaceResult: Probability = 1.00, Count = 1
AllocateTransitVirtualInterface -> allocateTransitVirtualInterface: Probability = 1.00, Count = 1
AllocateTransitVirtualInterfaceRequest -> AllocateTransitVirtualInterfaceRequest: Probability = 1.00, Count = 1
Invoke<AllocateTransitVirtualInterfaceResponse> -> executeAllocateTransitVirtualInterface: Probability = 1.00, Count = 1
PushbackInputStream -> PushbackInputStream: Probability = 1.00, Count = 1
java.io.InputStream -> InputStream: Probability = 1.00, Count = 3
byte[1] -> byte[1]: Probability = 1.00, Count = 1
other.docFreq -> other.position: Probability = 1.00, Count = 1
nTerms -> nTerms: Probability = 0.60, Count = 3
nTerms -> other.nTerms: Probability = 0.40, Count = 2
NotifyUpdateCell -> notifyUpdateCell: Probability = 1.00, Count = 3
_cache.NotifyUpdateCell -> _cache.notifyUpdateCell: Probability = 1.00, Count = 1
SetAllowNonFastForwards -> setAllowNonFastForwards: Probability = 1.00, Count = 1
allow -> allow: Probability = 1.00, Count = 5
allowNonFastForwards -> allowNonFastForwards: Probability = 1.00, Count = 1
UpdateRouteResponse -> UpdateRouteResult: Probability = 0.50, Count = 1
UpdateRouteResponse -> updateRouteResponse: Probability = 0.50, Count = 1
UpdateRoute -> updateRoute: Probability = 1.00, Count = 1
UpdateRouteRequest -> UpdateRouteRequest: Probability = 1.00, Count = 1
Invoke<UpdateRouteResponse> -> executeUpdateRoute: Probability = 1.00, Count = 1
DoubleConstValueSource -> DoubleConstValueSource: Probability = 1.00, Count = 1
this.lv -> this.lv: Probability = 1.00, Count = 1
YyPushBack -> yypushback: Probability = 1.00, Count = 2
YyLength -> yylength: Probability = 1.00, Count = 2
ZzScanError -> zzScanError: Probability = 1.00, Count = 2
ZZ_PUSHBACK_2BIG -> ZZ_PUSHBACK_2BIG: Probability = 1.00, Count = 2
zzMarkedPos -> zzMarkedPos: Probability = 1.00, Count = 4
GetReturnState -> getReturnState: Probability = 1.00, Count = 3
returnStates[index] -> returnStates[index]: Probability = 1.00, Count = 1
ListHITsResponse -> ListHITsResult: Probability = 1.00, Count = 1
ListHITs -> listHITs: Probability = 1.00, Count = 1
ListHITsRequest -> ListHITsRequest: Probability = 1.00, Count = 1
Invoke<ListHITsResponse> -> executeListHITs: Probability = 1.00, Count = 1
GetSubsections -> getSubsections: Probability = 1.00, Count = 1
GetState -> getState: Probability = 1.00, Count = 2
.GetSubsections -> .getSubsections: Probability = 1.00, Count = 1
AttachDiskResponse -> AttachDiskResult: Probability = 1.00, Count = 1
AttachDisk -> attachDisk: Probability = 1.00, Count = 1
AttachDiskRequest -> AttachDiskRequest: Probability = 1.00, Count = 1
Invoke<AttachDiskResponse> -> executeAttachDisk: Probability = 1.00, Count = 1
DescribePoliciesResponse -> DescribePoliciesResult: Probability = 1.00, Count = 2
DescribePolicies -> describePolicies: Probability = 1.00, Count = 3
DescribePoliciesRequest -> DescribePoliciesRequest: Probability = 1.00, Count = 2
Invoke<DescribePoliciesResponse> -> executeDescribePolicies: Probability = 1.00, Count = 1
HSSFCombobox -> HSSFCombobox: Probability = 1.00, Count = 1
CommonObjectType.ComboBox -> CommonObjectDataSubRecord.OBJECT_TYPE_COMBO_BOX: Probability = 1.00, Count = 1
SetCalcMode -> setCalcMode: Probability = 1.00, Count = 1
calcmode -> calcmode: Probability = 1.00, Count = 2
scale -> scale: Probability = 0.75, Count = 3
scale -> scale,scale: Probability = 0.25, Count = 1
AssociateAddressResponse -> AssociateAddressResult: Probability = 1.00, Count = 1
AssociateAddress -> associateAddress: Probability = 1.00, Count = 1
AssociateAddressRequest -> AssociateAddressRequest: Probability = 1.00, Count = 2
Invoke<AssociateAddressResponse> -> executeAssociateAddress: Probability = 1.00, Count = 1
ConfirmConnectionResponse -> ConfirmConnectionResult: Probability = 1.00, Count = 1
ConfirmConnection -> confirmConnection: Probability = 1.00, Count = 1
ConfirmConnectionRequest -> ConfirmConnectionRequest: Probability = 1.00, Count = 1
Invoke<ConfirmConnectionResponse> -> executeConfirmConnection: Probability = 1.00, Count = 1
UseSelFSRecord -> UseSelFSRecord: Probability = 0.40, Count = 2
UseSelFSRecord -> boolean: Probability = 0.20, Count = 1
UseSelFSRecord -> b: Probability = 0.40, Count = 2
useNaturalLanguageFormulasFlag.SetBoolean -> useNaturalLanguageFormulasFlag.setBoolean: Probability = 1.00, Count = 1
_options, -> _options,: Probability = 1.00, Count = 1
Start -> start: Probability = 1.00, Count = 4
offsetAtt -> offsetAtt: Probability = 0.75, Count = 3
offsetAtt -> OffsetAttribute.class: Probability = 0.25, Count = 1
stream.AddAttribute<IOffsetAttribute> -> stream.addAttribute: Probability = 1.00, Count = 1
currentNumFrags -> currentNumFrags: Probability = 1.00, Count = 3
fieldPhraseList, -> fieldPhraseList,: Probability = 1.00, Count = 4
StopImageBuilderResponse -> StopImageBuilderResult: Probability = 1.00, Count = 1
StopImageBuilder -> stopImageBuilder: Probability = 1.00, Count = 1
StopImageBuilderRequest -> StopImageBuilderRequest: Probability = 1.00, Count = 1
Invoke<StopImageBuilderResponse> -> executeStopImageBuilder: Probability = 1.00, Count = 1
readUnsignedShort -> readUnsignedShort: Probability = 1.00, Count = 1
Pop_Xor -> pop_xor: Probability = 1.00, Count = 1
GetDocumentResponse -> GetDocumentResult: Probability = 1.00, Count = 1
GetDocument -> getDocument: Probability = 1.00, Count = 1
GetDocumentRequest -> GetDocumentRequest: Probability = 1.00, Count = 1
Invoke<GetDocumentResponse> -> executeGetDocument: Probability = 1.00, Count = 1
partial -> AutocompletePagedResponse: Probability = 1.00, Count = 1
interface -> SimpleResponse<AutocompleteResult>: Probability = 1.00, Count = 1
IOperations -> autocompleteResponse: Probability = 1.00, Count = 1
ListWithHttpMessagesAsync -> autocompleteResponse.getRequest: Probability = 1.00, Count = 1
List<string>> -> (: Probability = 1.00, Count = 6
customHeaders -> ,autocompleteResponse.getStatusCode: Probability = 0.50, Count = 1
customHeaders -> page.setItems: Probability = 0.50, Count = 1
CancellationToken -> ,autocompleteResponse.getHeaders: Probability = 0.06, Count = 1
CancellationToken -> ,autocompleteResponse.getValue: Probability = 0.06, Count = 1
CancellationToken -> .getResults: Probability = 0.06, Count = 1
CancellationToken -> ,null,null: Probability = 0.06, Count = 1
CancellationToken -> resourceGroupName,: Probability = 0.19, Count = 3
CancellationToken -> listByResourceGroupWithServiceResponseAsync: Probability = 0.06, Count = 1
CancellationToken -> .toBlocking: Probability = 0.19, Count = 3
CancellationToken -> page.setNextPageLink: Probability = 0.06, Count = 1
CancellationToken -> createWithServiceResponseAsync: Probability = 0.06, Count = 1
CancellationToken -> dedicatedCapacityName: Probability = 0.12, Count = 2
CancellationToken -> getByResourceGroupWithServiceResponseAsync: Probability = 0.06, Count = 1
PutPermissionResponse -> PutPermissionResult: Probability = 1.00, Count = 1
PutPermission -> putPermission: Probability = 1.00, Count = 1
PutPermissionRequest -> PutPermissionRequest: Probability = 1.00, Count = 1
Invoke<PutPermissionResponse> -> executePutPermission: Probability = 1.00, Count = 1
GetDbcellAt -> getDbcellAt: Probability = 1.00, Count = 3
this.workbook -> workbook,: Probability = 1.00, Count = 1
FillRoundRect -> fillRoundRect: Probability = 1.00, Count = 1
arcWidth, -> arcWidth,: Probability = 1.00, Count = 2
arcHeight -> arcHeight: Probability = 1.00, Count = 2
"FillRoundRect -> POILogger.WARN,"fillRoundRect: Probability = 1.00, Count = 1
BuildFractionExactDenominator -> buildFractionExactDenominator: Probability = 1.00, Count = 1
val, -> val,: Probability = 1.00, Count = 3
exactDenom -> exactDenom: Probability = 1.00, Count = 1
exactDenom, -> val*exactDenom: Probability = 1.00, Count = 1
num, -> num,exactDenom: Probability = 1.00, Count = 1
DescribeInsightRulesResponse -> DescribeInsightRulesResult: Probability = 1.00, Count = 1
DescribeInsightRules -> describeInsightRules: Probability = 1.00, Count = 1
DescribeInsightRulesRequest -> DescribeInsightRulesRequest: Probability = 1.00, Count = 1
Invoke<DescribeInsightRulesResponse> -> executeDescribeInsightRules: Probability = 1.00, Count = 1
ListMFADevicesRequest -> ListMFADevicesRequest: Probability = 1.00, Count = 1
row.RowNumber -> row.getRowNumber: Probability = 1.00, Count = 6
_rowRecordValues -> _rowRecordValues: Probability = 1.00, Count = 2
DeleteRepositoryPolicyResponse -> DeleteRepositoryPolicyResult: Probability = 1.00, Count = 1
DeleteRepositoryPolicy -> deleteRepositoryPolicy: Probability = 1.00, Count = 1
DeleteRepositoryPolicyRequest -> DeleteRepositoryPolicyRequest: Probability = 1.00, Count = 1
Invoke<DeleteRepositoryPolicyResponse> -> executeDeleteRepositoryPolicy: Probability = 1.00, Count = 1
BackupRecord -> BackupRecord: Probability = 1.00, Count = 1
field_1_backup -> field_1_backup: Probability = 1.00, Count = 1
SetNewTree -> setNewTree: Probability = 1.00, Count = 1
newTree -> newTree: Probability = 1.00, Count = 2
this.newTree -> this.newTree: Probability = 1.00, Count = 1
action.Execute -> action.execute: Probability = 1.00, Count = 1
DeleteModelPackageResponse -> DeleteModelPackageResult: Probability = 1.00, Count = 1
DeleteModelPackage -> deleteModelPackage: Probability = 1.00, Count = 1
DeleteModelPackageRequest -> DeleteModelPackageRequest: Probability = 1.00, Count = 1
Invoke<DeleteModelPackageResponse> -> executeDeleteModelPackage: Probability = 1.00, Count = 1
getValue -> getValue: Probability = 1.00, Count = 4
mValue -> value: Probability = 1.00, Count = 1
ApplyFont -> applyFont: Probability = 0.62, Count = 5
ApplyFont -> _string.getCharCount: Probability = 0.25, Count = 2
ApplyFont -> Font: Probability = 0.12, Count = 1
fontIndex -> fontIndex: Probability = 0.67, Count = 4
fontIndex -> font: Probability = 0.33, Count = 2
_string.CharCount, -> ,: Probability = 1.00, Count = 2
SliceWriter -> SliceWriter: Probability = 1.00, Count = 1
DisableVgwRoutePropagationResponse -> DisableVgwRoutePropagationResult: Probability = 1.00, Count = 1
DisableVgwRoutePropagation -> disableVgwRoutePropagation: Probability = 1.00, Count = 1
DisableVgwRoutePropagationRequest -> DisableVgwRoutePropagationRequest: Probability = 1.00, Count = 1
Invoke<DisableVgwRoutePropagationResponse> -> executeDisableVgwRoutePropagation: Probability = 1.00, Count = 1
AttachObjectResponse -> AttachObjectResult: Probability = 1.00, Count = 1
AttachObject -> attachObject: Probability = 1.00, Count = 1
AttachObjectRequest -> AttachObjectRequest: Probability = 1.00, Count = 1
Invoke<AttachObjectResponse> -> executeAttachObject: Probability = 1.00, Count = 1
CopyDBClusterParameterGroupResponse -> DBClusterParameterGroup: Probability = 1.00, Count = 1
CopyDBClusterParameterGroup -> copyDBClusterParameterGroup: Probability = 1.00, Count = 1
CopyDBClusterParameterGroupRequest -> CopyDBClusterParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<CopyDBClusterParameterGroupResponse> -> executeCopyDBClusterParameterGroup: Probability = 1.00, Count = 1
GetRoutesResponse -> GetRoutesResult: Probability = 1.00, Count = 1
GetRoutes -> getRoutes: Probability = 1.00, Count = 1
GetRoutesRequest -> GetRoutesRequest: Probability = 1.00, Count = 1
Invoke<GetRoutesResponse> -> executeGetRoutes: Probability = 1.00, Count = 1
this.HasNext -> Entry<String,: Probability = 1.00, Count = 1
Ent -> Entry<String,: Probability = 1.00, Count = 1
this.next -> next: Probability = 1.00, Count = 5
this.Peek -> peek: Probability = 1.00, Count = 2
dictionaryNameToID[ -> dictionary.containsValue: Probability = 1.00, Count = 1
UpdateNamespaceRequest -> UpdateNamespaceRequest: Probability = 1.00, Count = 1
"UpdateNamespace", -> "UpdateNamespace",: Probability = 1.00, Count = 1
"/namespace/[Namespace]" -> "/namespace/[Namespace]": Probability = 1.00, Count = 3
ListNotebookInstancesResponse -> ListNotebookInstancesResult: Probability = 1.00, Count = 1
ListNotebookInstances -> listNotebookInstances: Probability = 1.00, Count = 1
ListNotebookInstancesRequest -> ListNotebookInstancesRequest: Probability = 1.00, Count = 1
Invoke<ListNotebookInstancesResponse> -> executeListNotebookInstances: Probability = 1.00, Count = 1
DescribeGroupsResponse -> DescribeGroupsResult: Probability = 1.00, Count = 1
DescribeGroups -> describeGroups: Probability = 1.00, Count = 1
DescribeGroupsRequest -> DescribeGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeGroupsResponse> -> executeDescribeGroups: Probability = 1.00, Count = 1
GetShippingLabelResponse -> GetShippingLabelResult: Probability = 1.00, Count = 1
GetShippingLabel -> getShippingLabel: Probability = 1.00, Count = 1
GetShippingLabelRequest -> GetShippingLabelRequest: Probability = 1.00, Count = 1
Invoke<GetShippingLabelResponse> -> executeGetShippingLabel: Probability = 1.00, Count = 1
instanceIds -> instanceIds: Probability = 0.67, Count = 12
instanceIds -> ): Probability = 0.33, Count = 6
_instanceIds -> setInstanceIds: Probability = 1.00, Count = 6
AtomTransition -> AtomTransition: Probability = 1.00, Count = 4
this.token -> this.label: Probability = 0.50, Count = 1
this.token -> this.token: Probability = 0.50, Count = 1
MulRKRecord -> MulRKRecord: Probability = 0.67, Count = 4
MulRKRecord -> convertRKRecords: Probability = 0.33, Count = 2
field_3_rks -> field_3_rks: Probability = 1.00, Count = 1
RkRec.ParseRKs -> RkRec.parseRKs: Probability = 1.00, Count = 1
Complete -> complete: Probability = 1.00, Count = 1
this.stateRegistry -> this.stateRegistry: Probability = 1.00, Count = 1
root.HasChildren -> root.hasChildren: Probability = 1.00, Count = 1
ReplaceOrRegister -> replaceOrRegister: Probability = 1.00, Count = 1
stateRegistry -> stateRegistry: Probability = 1.00, Count = 1
Invoke<DescribeWorkspaceDirectoriesResponse> -> executeDescribeWorkspaceDirectories: Probability = 1.00, Count = 1
removed -> removed: Probability = 1.00, Count = 7
StreamTokenizer -> StreamTokenizer: Probability = 1.00, Count = 1
ModifyVpcPeeringConnectionOptionsResponse -> ModifyVpcPeeringConnectionOptionsResult: Probability = 1.00, Count = 1
ModifyVpcPeeringConnectionOptions -> modifyVpcPeeringConnectionOptions: Probability = 1.00, Count = 1
ModifyVpcPeeringConnectionOptionsRequest -> ModifyVpcPeeringConnectionOptionsRequest: Probability = 1.00, Count = 1
Invoke<ModifyVpcPeeringConnectionOptionsResponse> -> executeModifyVpcPeeringConnectionOptions: Probability = 1.00, Count = 1
GetAppResponse -> GetAppResult: Probability = 1.00, Count = 1
GetApp -> getApp: Probability = 1.00, Count = 1
GetAppRequest -> GetAppRequest: Probability = 1.00, Count = 1
Invoke<GetAppResponse> -> executeGetApp: Probability = 1.00, Count = 1
totalTasks -> totalTasks: Probability = 1.00, Count = 2
pm.Start -> pm.start: Probability = 1.00, Count = 1
ModifyFleetResponse -> ModifyFleetResult: Probability = 1.00, Count = 1
ModifyFleet -> modifyFleet: Probability = 1.00, Count = 1
ModifyFleetRequest -> ModifyFleetRequest: Probability = 1.00, Count = 1
Invoke<ModifyFleetResponse> -> executeModifyFleet: Probability = 1.00, Count = 1
UpdateFolderResponse -> UpdateFolderResult: Probability = 1.00, Count = 1
UpdateFolder -> updateFolder: Probability = 1.00, Count = 1
UpdateFolderRequest -> UpdateFolderRequest: Probability = 1.00, Count = 1
Invoke<UpdateFolderResponse> -> executeUpdateFolder: Probability = 1.00, Count = 1
CreateAppResponse -> CreateAppResult: Probability = 1.00, Count = 1
CreateApp -> createApp: Probability = 1.00, Count = 1
CreateAppRequest -> CreateAppRequest: Probability = 1.00, Count = 1
Invoke<CreateAppResponse> -> executeCreateApp: Probability = 1.00, Count = 1
CreateDateConstraint -> createDateConstraint: Probability = 1.00, Count = 2
dateFormat -> dateFormat: Probability = 1.00, Count = 4
ConvertDate -> convertDate: Probability = 1.00, Count = 2
ModifyDefaultCreditSpecificationResponse -> ModifyDefaultCreditSpecificationResult: Probability = 1.00, Count = 1
ModifyDefaultCreditSpecification -> modifyDefaultCreditSpecification: Probability = 1.00, Count = 1
ModifyDefaultCreditSpecificationRequest -> ModifyDefaultCreditSpecificationRequest: Probability = 1.00, Count = 1
Invoke<ModifyDefaultCreditSpecificationResponse> -> executeModifyDefaultCreditSpecification: Probability = 1.00, Count = 1
Sharpen.Iterator<Note> -> Iterator<Note>: Probability = 1.00, Count = 1
root.Iterator -> root.iterator: Probability = 1.00, Count = 1
TreeFormatter -> TreeFormatter: Probability = 1.00, Count = 5
formatter -> formatter: Probability = 0.90, Count = 9
formatter -> formatter.computeId: Probability = 0.10, Count = 1
formatter.ComputeId -> .idFor: Probability = 0.50, Count = 1
formatter.ComputeId -> formatter.computeId: Probability = 0.50, Count = 1
getInputLength -> getInputLength: Probability = 1.00, Count = 1
this.inputLength -> this.inputLength: Probability = 1.00, Count = 2
onInvalidated -> onInvalidated: Probability = 1.00, Count = 1
this._enclosing.notifyDataSetInvalidated -> mSrc: Probability = 0.33, Count = 1
this._enclosing.notifyDataSetInvalidated -> ":: Probability = 0.33, Count = 1
this._enclosing.notifyDataSetInvalidated -> invalidated": Probability = 0.33, Count = 1
matchedToken -> matchedToken: Probability = 0.67, Count = 2
matchedToken -> addAnyChild: Probability = 0.33, Count = 1
TerminalNodeImpl -> TerminalNodeImpl: Probability = 1.00, Count = 2
IsUnknown -> isUnknown: Probability = 1.00, Count = 1
JapaneseTokenizerType.UNKNOWN -> Type.UNKNOWN: Probability = 1.00, Count = 1
PromptPassword -> promptPassword: Probability = 1.00, Count = 1
CreateTransitGatewayResponse -> CreateTransitGatewayResult: Probability = 1.00, Count = 1
CreateTransitGateway -> createTransitGateway: Probability = 1.00, Count = 1
CreateTransitGatewayRequest -> CreateTransitGatewayRequest: Probability = 1.00, Count = 1
Invoke<CreateTransitGatewayResponse> -> executeCreateTransitGateway: Probability = 1.00, Count = 1
CreateCampaignResponse -> CreateCampaignResult: Probability = 1.00, Count = 1
CreateCampaign -> createCampaign: Probability = 1.00, Count = 1
CreateCampaignRequest -> CreateCampaignRequest: Probability = 1.00, Count = 1
Invoke<CreateCampaignResponse> -> executeCreateCampaign: Probability = 1.00, Count = 1
errCode, -> errCode,: Probability = 1.00, Count = 1
errMsg -> errMsg: Probability = 0.60, Count = 3
errMsg -> this.errCode: Probability = 0.20, Count = 1
errMsg -> this.errMsg: Probability = 0.20, Count = 1
errCode -> errCode: Probability = 1.00, Count = 2
ErrorMessage -> ErrorType.Client: Probability = 0.67, Count = 2
ErrorMessage -> this.setErrorType: Probability = 0.33, Count = 1
RemoveConditionalFormatting -> removeConditionalFormatting: Probability = 1.00, Count = 1
_conditionalFormattingTable.Remove -> _conditionalFormattingTable.remove: Probability = 1.00, Count = 1
StemmerOverrideFilter -> StemmerOverrideFilter: Probability = 1.00, Count = 1
ListS3ResourcesResponse -> ListS3ResourcesResult: Probability = 1.00, Count = 1
ListS3Resources -> listS3Resources: Probability = 1.00, Count = 1
ListS3ResourcesRequest -> ListS3ResourcesRequest: Probability = 1.00, Count = 1
Invoke<ListS3ResourcesResponse> -> executeListS3Resources: Probability = 1.00, Count = 1
"'..'" -> .appendCodePoint: Probability = 0.67, Count = 2
"'..'" -> "'..'": Probability = 0.33, Count = 1
CreatePresignedNotebookInstanceUrlResponse -> CreatePresignedNotebookInstanceUrlResult: Probability = 1.00, Count = 1
CreatePresignedNotebookInstanceUrl -> createPresignedNotebookInstanceUrl: Probability = 1.00, Count = 1
CreatePresignedNotebookInstanceUrlRequest -> CreatePresignedNotebookInstanceUrlRequest: Probability = 1.00, Count = 1
Invoke<CreatePresignedNotebookInstanceUrlResponse> -> executeCreatePresignedNotebookInstanceUrl: Probability = 1.00, Count = 1
CreateUserInfoRequest -> CreateUserInfoRequest: Probability = 1.00, Count = 1
"CreateUserInfo", -> "CreateUserInfo",: Probability = 1.00, Count = 1
NotifyUpdatedBlankCell -> notifyUpdatedBlankCell: Probability = 1.00, Count = 1
bsk, -> bsk,: Probability = 1.00, Count = 2
IEvaluationListener -> IEvaluationListener: Probability = 1.00, Count = 2
evaluationListener -> evaluationListener: Probability = 1.00, Count = 2
_usedBlankCellGroup.ContainsCell -> _usedBlankCellGroup.containsCell: Probability = 1.00, Count = 1
ClearFormulaEntry -> clearFormulaEntry: Probability = 1.00, Count = 2
RecurseClearCachedFormulaResults -> recurseClearCachedFormulaResults: Probability = 1.00, Count = 4
AddAll -> addAll: Probability = 1.00, Count = 3
IsRefLogIncludingResult -> isRefLogIncludingResult: Probability = 1.00, Count = 2
HeaderFooterRecord -> HeaderFooterRecord: Probability = 1.00, Count = 3
GetPath -> getPath: Probability = 1.00, Count = 4
Arrays.CopyOf -> Arrays.copyOf: Probability = 1.00, Count = 2
_escherChildAnchor -> _escherChildAnchor: Probability = 1.00, Count = 1
isRegistered -> isRegistered: Probability = 1.00, Count = 1
!canonicalName.StartsWith -> !canonicalName.startsWith: Probability = 1.00, Count = 2
"x-" -> "x-": Probability = 1.00, Count = 1
"X-" -> "X-": Probability = 1.00, Count = 1
NewToken -> newToken: Probability = 1.00, Count = 4
ofKind, -> ofKind,: Probability = 1.00, Count = 5
image -> image: Probability = 1.00, Count = 6
ofKind -> ofKind: Probability = 1.00, Count = 3
OverheadPerValue -> overheadPerValue: Probability = 1.00, Count = 3
IsSupported -> isSupported: Probability = 1.00, Count = 6
0f -> valuesPerBlock: Probability = 0.29, Count = 2
0f -> overhead: Probability = 0.29, Count = 2
0f -> /: Probability = 0.14, Count = 1
0f -> 0f: Probability = 0.29, Count = 2
backingMap.clear -> backingMap.clear: Probability = 1.00, Count = 1
CompoundException -> CompoundException: Probability = 1.00, Count = 1
ICollection<Exception> -> Collection<Throwable>: Probability = 1.00, Count = 1
causeList -> causeList: Probability = 1.00, Count = 1
DeleteEnvironmentConfigurationRequest -> DeleteEnvironmentConfigurationRequest: Probability = 1.00, Count = 1
imageId -> imageId: Probability = 1.00, Count = 1
LastCellOfRowDummyRecord -> LastCellOfRowDummyRecord: Probability = 1.00, Count = 1
lastColumnNumber -> lastColumnNumber: Probability = 1.00, Count = 2
this.row -> this.row: Probability = 1.00, Count = 2
this.lastColumnNumber -> this.lastColumnNumber: Probability = 1.00, Count = 1
path.ToString -> path.toString: Probability = 1.00, Count = 3
Abort -> abort: Probability = 1.00, Count = 1
nextTermsHash -> nextTermsHash: Probability = 1.00, Count = 1
nextTermsHash.Abort -> nextTermsHash.abort: Probability = 1.00, Count = 1
CreateUsagePlanKeyResponse -> CreateUsagePlanKeyResult: Probability = 1.00, Count = 1
CreateUsagePlanKey -> createUsagePlanKey: Probability = 1.00, Count = 1
CreateUsagePlanKeyRequest -> CreateUsagePlanKeyRequest: Probability = 1.00, Count = 1
Invoke<CreateUsagePlanKeyResponse> -> executeCreateUsagePlanKey: Probability = 1.00, Count = 1
IsOutOfBounds -> isOutOfBounds: Probability = 1.00, Count = 1
lowValidIx, -> lowValidIx,: Probability = 1.00, Count = 1
highValidIx -> highValidIx: Probability = 1.00, Count = 2
lowValidIx -> lowValidIx: Probability = 1.00, Count = 1
LastIndex -> getLastIndex: Probability = 1.00, Count = 2
CherryPickResult.CherryPickStatus -> CherryPickStatus: Probability = 1.00, Count = 1
GetRomanization -> getRomanization: Probability = 1.00, Count = 2
bogus -> bogus: Probability = 1.00, Count = 4
addIfAbsent -> addIfAbsent: Probability = 1.00, Count = 1
EnableTransitGatewayRouteTablePropagationResponse -> EnableTransitGatewayRouteTablePropagationResult: Probability = 1.00, Count = 1
EnableTransitGatewayRouteTablePropagation -> enableTransitGatewayRouteTablePropagation: Probability = 1.00, Count = 1
EnableTransitGatewayRouteTablePropagationRequest -> EnableTransitGatewayRouteTablePropagationRequest: Probability = 1.00, Count = 1
Invoke<EnableTransitGatewayRouteTablePropagationResponse> -> executeEnableTransitGatewayRouteTablePropagation: Probability = 1.00, Count = 1
pattern.Match -> pattern.matcher: Probability = 1.00, Count = 1
AddInstanceGroupsRequest -> AddInstanceGroupsRequest: Probability = 0.67, Count = 2
AddInstanceGroupsRequest -> java.util.List<InstanceGroupConfig>: Probability = 0.33, Count = 1
List<InstanceGroupConfig> -> instanceGroups,: Probability = 1.00, Count = 1
numTerms -> numTerms: Probability = 0.36, Count = 5
numTerms -> IndexOptions.DOCS: Probability = 0.14, Count = 2
numTerms -> state.getIndexOptions: Probability = 0.07, Count = 1
numTerms -> state.getIndexCreatedVersionMajor: Probability = 0.07, Count = 1
numTerms -> state.getUniqueTermCount: Probability = 0.07, Count = 1
numTerms -> state.getLength: Probability = 0.14, Count = 2
numTerms -> state.getNumOverlap: Probability = 0.07, Count = 1
numTerms -> SmallFloat.intToByte4: Probability = 0.07, Count = 1
@in.ReadVInt64 -> in.readVLong: Probability = 1.00, Count = 2
@in.ReadVInt32 -> in.readVLong: Probability = 1.00, Count = 1
DescribeVpcEndpointsResponse -> DescribeVpcEndpointsResult: Probability = 1.00, Count = 1
DescribeVpcEndpoints -> describeVpcEndpoints: Probability = 1.00, Count = 1
DescribeVpcEndpointsRequest -> DescribeVpcEndpointsRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpcEndpointsResponse> -> executeDescribeVpcEndpoints: Probability = 1.00, Count = 1
SetNewPrefix -> setNewPrefix: Probability = 1.00, Count = 1
newPrefix -> newPrefix: Probability = 1.00, Count = 1
GetHostedZoneRequest -> GetHostedZoneRequest: Probability = 1.00, Count = 2
IList<FilePath> -> List<File>: Probability = 1.00, Count = 1
GetUpdatedFiles -> getUpdatedFiles: Probability = 1.00, Count = 1
updatedFiles -> updatedFiles: Probability = 1.00, Count = 1
dhcpOptionsId -> dhcpOptionsId: Probability = 1.00, Count = 2
_dhcpOptionsId -> setDhcpOptionsId: Probability = 1.00, Count = 1
GetTermMap -> getTermMap: Probability = 1.00, Count = 1
subMap.TryGetValue -> subMap.get: Probability = 1.00, Count = 1
PutConfigurationSetDeliveryOptionsResponse -> PutConfigurationSetDeliveryOptionsResult: Probability = 1.00, Count = 1
PutConfigurationSetDeliveryOptions -> putConfigurationSetDeliveryOptions: Probability = 1.00, Count = 1
PutConfigurationSetDeliveryOptionsRequest -> PutConfigurationSetDeliveryOptionsRequest: Probability = 1.00, Count = 1
Invoke<PutConfigurationSetDeliveryOptionsResponse> -> executePutConfigurationSetDeliveryOptions: Probability = 1.00, Count = 1
ChartRecord -> ChartRecord: Probability = 1.00, Count = 1
ListTaskDefinitionsResponse -> ListTaskDefinitionsResult: Probability = 1.00, Count = 1
ListTaskDefinitions -> listTaskDefinitions: Probability = 1.00, Count = 1
ListTaskDefinitionsRequest -> ListTaskDefinitionsRequest: Probability = 1.00, Count = 1
Invoke<ListTaskDefinitionsResponse> -> executeListTaskDefinitions: Probability = 1.00, Count = 1
GetRawPath -> getRawPath: Probability = 1.00, Count = 1
rawPath -> rawPath: Probability = 1.00, Count = 1
field_1_zero -> IndexRecord: Probability = 0.25, Count = 1
field_1_zero -> field_1_zero: Probability = 0.75, Count = 3
nCells -> nCells: Probability = 0.67, Count = 2
nCells -> i<nCells: Probability = 0.33, Count = 1
System.Type -> Class<?: Probability = 0.33, Count = 1
System.Type -> extends: Probability = 0.33, Count = 1
System.Type -> Class<?>: Probability = 0.33, Count = 1
enumType -> Enum>: Probability = 0.50, Count = 1
enumType -> enumType: Probability = 0.50, Count = 1
_enumType -> enumType: Probability = 1.00, Count = 1
IsSupportedType -> isSupportedType: Probability = 1.00, Count = 1
variantType -> variantType: Probability = 0.57, Count = 4
variantType -> st: Probability = 0.29, Count = 2
variantType -> getVariantLength: Probability = 0.14, Count = 1
SUPPORTED_TYPES.Length -> SUPPORTED_TYPES: Probability = 1.00, Count = 1
GetSourceCommitter -> getSourceCommitter: Probability = 1.00, Count = 1
sourceCommitters[idx] -> sourceCommitters[idx]: Probability = 1.00, Count = 1
RemoveTagsRequest -> RemoveTagsRequest: Probability = 1.00, Count = 2
resourceId, -> resourceId,: Probability = 1.00, Count = 2
tagKeys -> tagKeys: Probability = 1.00, Count = 2
_resourceId -> setResourceId: Probability = 1.00, Count = 3
resourceId -> resourceId: Probability = 1.00, Count = 4
_tagKeys -> setTagKeys: Probability = 1.00, Count = 1
stemDerivational -> stemDerivational: Probability = 1.00, Count = 5
numSyllables -> numSyllables: Probability = 1.00, Count = 3
state.Length -> numTerms: Probability = 1.00, Count = 3
discountOverlaps -> discountOverlaps: Probability = 1.00, Count = 3
chunkerOp -> OpenNLPChunkerFilter: Probability = 0.29, Count = 2
chunkerOp -> NLPChunkerOp: Probability = 0.14, Count = 1
chunkerOp -> chunkerOp: Probability = 0.43, Count = 3
chunkerOp -> OpenNLPOpsFactory.getChunker: Probability = 0.14, Count = 1
IList<PackedObjectInfo> -> List<PackedObjectInfo>: Probability = 0.67, Count = 2
IList<PackedObjectInfo> -> getSortedObjectList: Probability = 0.33, Count = 1
IComparer<PackedObjectInfo> -> Comparator<PackedObjectInfo>: Probability = 1.00, Count = 1
entryCount, -> entryCount,: Probability = 1.00, Count = 1
GetSecurityToken -> getSecurityToken: Probability = 1.00, Count = 1
GetCredentials -> getCredentials: Probability = 1.00, Count = 5
sessionCredentials -> BasicSessionCredentials: Probability = 0.50, Count = 1
sessionCredentials -> .getSessionToken: Probability = 0.50, Count = 1
StopAutoMLJobResponse -> StopAutoMLJobResult: Probability = 1.00, Count = 1
StopAutoMLJob -> stopAutoMLJob: Probability = 1.00, Count = 1
StopAutoMLJobRequest -> StopAutoMLJobRequest: Probability = 1.00, Count = 1
Invoke<StopAutoMLJobResponse> -> executeStopAutoMLJob: Probability = 1.00, Count = 1
bi.Last -> bi.last: Probability = 1.00, Count = 1
bi.Previous -> bi.previous: Probability = 1.00, Count = 1
StartImageBuilderResponse -> StartImageBuilderResult: Probability = 1.00, Count = 1
StartImageBuilder -> startImageBuilder: Probability = 1.00, Count = 1
StartImageBuilderRequest -> StartImageBuilderRequest: Probability = 1.00, Count = 1
Invoke<StartImageBuilderResponse> -> executeStartImageBuilder: Probability = 1.00, Count = 1
"Did -> "Did: Probability = 1.00, Count = 2
expect -> expect: Probability = 1.00, Count = 2
NaN" -> NaN": Probability = 1.00, Count = 3
_in.ReadDouble -> _in.readDouble: Probability = 1.00, Count = 1
string.CompareOrdinal -> Double.compare: Probability = 1.00, Count = 2
TokenString, -> distanceSquared,: Probability = 0.50, Count = 1
TokenString, -> distanceSortKey,: Probability = 0.50, Count = 1
o.TokenString -> other.distanceSquared: Probability = 0.50, Count = 1
o.TokenString -> other.distanceSortKey: Probability = 0.50, Count = 1
GetCampaignDateRangeKpiResponse -> GetCampaignDateRangeKpiResult: Probability = 1.00, Count = 1
GetCampaignDateRangeKpi -> getCampaignDateRangeKpi: Probability = 1.00, Count = 1
GetCampaignDateRangeKpiRequest -> GetCampaignDateRangeKpiRequest: Probability = 1.00, Count = 1
Invoke<GetCampaignDateRangeKpiResponse> -> executeGetCampaignDateRangeKpi: Probability = 1.00, Count = 1
_array[_Count] -> _array[_count]: Probability = 1.00, Count = 1
_Count++ -> _count++: Probability = 1.00, Count = 1
.SheetName -> .getSheetName: Probability = 1.00, Count = 1
TransferDomainToAnotherAwsAccountResponse -> TransferDomainToAnotherAwsAccountResult: Probability = 1.00, Count = 1
TransferDomainToAnotherAwsAccount -> transferDomainToAnotherAwsAccount: Probability = 1.00, Count = 1
TransferDomainToAnotherAwsAccountRequest -> TransferDomainToAnotherAwsAccountRequest: Probability = 1.00, Count = 1
Invoke<TransferDomainToAnotherAwsAccountResponse> -> executeTransferDomainToAnotherAwsAccount: Probability = 1.00, Count = 1
weakCompareAndSet -> weakCompareAndSet: Probability = 1.00, Count = 1
expect, -> expect,: Probability = 0.50, Count = 2
expect, -> this,: Probability = 0.25, Count = 1
expect, -> valueOffset,: Probability = 0.25, Count = 1
compareAndSet -> unsafe.compareAndSwapObject: Probability = 1.00, Count = 1
status, -> status,: Probability = 1.00, Count = 4
this.Decode -> decode: Probability = 1.00, Count = 2
"skip" -> "skip": Probability = 1.00, Count = 1
GetModifiedFiles -> getModifiedFiles: Probability = 1.00, Count = 1
modifiedFiles -> modifiedFiles: Probability = 1.00, Count = 1
SerializeValue -> serializeValue: Probability = 1.00, Count = 1
"NotIgnored -> "NotIgnored: Probability = 1.00, Count = 1
DescribeDBClusterParametersResponse -> DescribeDBClusterParametersResult: Probability = 1.00, Count = 1
DescribeDBClusterParameters -> describeDBClusterParameters: Probability = 1.00, Count = 1
DescribeDBClusterParametersRequest -> DescribeDBClusterParametersRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBClusterParametersResponse> -> executeDescribeDBClusterParameters: Probability = 1.00, Count = 1
HasAny -> hasAny: Probability = 1.00, Count = 1
set.mask -> set.mask: Probability = 1.00, Count = 2
GetPolicyResponse -> GetPolicyResult: Probability = 1.00, Count = 1
GetPolicy -> getPolicy: Probability = 1.00, Count = 1
Invoke<GetPolicyResponse> -> executeGetPolicy: Probability = 1.00, Count = 1
SetRate -> setRate: Probability = 1.00, Count = 1
rate, -> rate,: Probability = 1.00, Count = 2
this.rate -> this.rate: Probability = 1.00, Count = 1
this.perMin -> this.perMin: Probability = 1.00, Count = 1
SetSequenceName -> setSequenceName: Probability = 1.00, Count = 2
DescribeVpcEndpointConnectionsResponse -> DescribeVpcEndpointConnectionsResult: Probability = 1.00, Count = 1
DescribeVpcEndpointConnections -> describeVpcEndpointConnections: Probability = 1.00, Count = 1
DescribeVpcEndpointConnectionsRequest -> DescribeVpcEndpointConnectionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpcEndpointConnectionsResponse> -> executeDescribeVpcEndpointConnections: Probability = 1.00, Count = 1
GetHostedZoneResponse -> GetHostedZoneResult: Probability = 1.00, Count = 1
GetHostedZone -> getHostedZone: Probability = 1.00, Count = 1
Invoke<GetHostedZoneResponse> -> executeGetHostedZone: Probability = 1.00, Count = 1
ChangeBatch -> ChangeBatch: Probability = 1.00, Count = 2
List<Change> -> java.util.List<Change>: Probability = 1.00, Count = 1
changes -> changes: Probability = 1.00, Count = 2
_changes -> setChanges: Probability = 1.00, Count = 1
_externSheetRecord.GetExtbookIndexFromRefIndex -> _externSheetRecord.getExtbookIndexFromRefIndex: Probability = 1.00, Count = 3
shIx1 -> shIx1: Probability = 1.00, Count = 3
shIx2 -> shIx2: Probability = 0.60, Count = 3
shIx2 -> ebr.getSheetNames: Probability = 0.40, Count = 2
_externSheetRecord.GetLastSheetIndexFromRefIndex -> _externSheetRecord.getLastSheetIndexFromRefIndex: Probability = 1.00, Count = 2
firstSheetName -> firstSheetName: Probability = 1.00, Count = 4
ChartEndBlockRecord -> ChartEndBlockRecord: Probability = 1.00, Count = 1
Invoke<CreateQueueResponse> -> executeCreateQueue: Probability = 1.00, Count = 1
SetMaxDocCharsToAnalyze -> setMaxDocCharsToAnalyze: Probability = 1.00, Count = 1
maxDocCharsToAnalyze -> maxDocCharsToAnalyze: Probability = 1.00, Count = 2
this.maxCharsToAnalyze -> this.maxCharsToAnalyze: Probability = 1.00, Count = 1
CreateCodeRepositoryResponse -> CreateCodeRepositoryResult: Probability = 1.00, Count = 1
CreateCodeRepository -> createCodeRepository: Probability = 1.00, Count = 1
CreateCodeRepositoryRequest -> CreateCodeRepositoryRequest: Probability = 1.00, Count = 1
Invoke<CreateCodeRepositoryResponse> -> executeCreateCodeRepository: Probability = 1.00, Count = 1
GetLastCommitSegmentsFileName -> getLastCommitSegmentsFileName: Probability = 1.00, Count = 1
IndexFileNames.FileNameFromGeneration -> IndexFileNames.fileNameFromGeneration: Probability = 1.00, Count = 3
ModifyCertificatesResponse -> Certificate: Probability = 1.00, Count = 1
ModifyCertificates -> modifyCertificates: Probability = 1.00, Count = 1
ModifyCertificatesRequest -> ModifyCertificatesRequest: Probability = 1.00, Count = 1
Invoke<ModifyCertificatesResponse> -> executeModifyCertificates: Probability = 1.00, Count = 1
UpdateCell -> updateCell: Probability = 1.00, Count = 1
ForkedEvaluationCell -> ForkedEvaluationCell: Probability = 1.00, Count = 1
_sewb.GetOrCreateUpdatableCell -> _sewb.getOrCreateUpdatableCell: Probability = 1.00, Count = 1
cell.SetValue -> cell.setValue: Probability = 1.00, Count = 1
_evaluator.NotifyUpdateCell -> _evaluator.notifyUpdateCell: Probability = 1.00, Count = 1
DisassociateMemberAccountResponse -> DisassociateMemberAccountResult: Probability = 1.00, Count = 1
DisassociateMemberAccount -> disassociateMemberAccount: Probability = 1.00, Count = 1
DisassociateMemberAccountRequest -> DisassociateMemberAccountRequest: Probability = 1.00, Count = 1
Invoke<DisassociateMemberAccountResponse> -> executeDisassociateMemberAccount: Probability = 1.00, Count = 1
DeleteTrafficPolicyResponse -> DeleteTrafficPolicyResult: Probability = 1.00, Count = 1
DeleteTrafficPolicy -> deleteTrafficPolicy: Probability = 1.00, Count = 1
DeleteTrafficPolicyRequest -> DeleteTrafficPolicyRequest: Probability = 1.00, Count = 1
Invoke<DeleteTrafficPolicyResponse> -> executeDeleteTrafficPolicy: Probability = 1.00, Count = 1
hdr -> IOException,CorruptObjectException: Probability = 0.25, Count = 1
hdr -> hdr: Probability = 0.75, Count = 3
ToArray -> toArray: Probability = 0.80, Count = 4
ToArray -> []: Probability = 0.20, Count = 1
EMPTY_DOUBLE_ARRAY -> EMPTY_DOUBLE_ARRAY: Probability = 1.00, Count = 1
double[_Count] -> double[_count]: Probability = 1.00, Count = 1
GetHostReservationPurchasePreviewResponse -> GetHostReservationPurchasePreviewResult: Probability = 1.00, Count = 1
GetHostReservationPurchasePreview -> getHostReservationPurchasePreview: Probability = 1.00, Count = 1
GetHostReservationPurchasePreviewRequest -> GetHostReservationPurchasePreviewRequest: Probability = 1.00, Count = 1
Invoke<GetHostReservationPurchasePreviewResponse> -> executeGetHostReservationPurchasePreview: Probability = 1.00, Count = 1
CreateCustomAvailabilityZoneResponse -> CustomAvailabilityZone: Probability = 1.00, Count = 1
CreateCustomAvailabilityZone -> createCustomAvailabilityZone: Probability = 1.00, Count = 1
CreateCustomAvailabilityZoneRequest -> CreateCustomAvailabilityZoneRequest: Probability = 1.00, Count = 1
Invoke<CreateCustomAvailabilityZoneResponse> -> executeCreateCustomAvailabilityZone: Probability = 1.00, Count = 1
EvaluationCache -> EvaluationCache: Probability = 1.00, Count = 1
_cache -> _cache: Probability = 1.00, Count = 2
_evaluationFrames -> _evaluationFrames: Probability = 1.00, Count = 1
_currentlyEvaluatingCells -> _currentlyEvaluatingCells: Probability = 1.00, Count = 1
AcceptQualificationRequestResponse -> AcceptQualificationRequestResult: Probability = 1.00, Count = 1
AcceptQualificationRequest -> acceptQualificationRequest: Probability = 1.00, Count = 1
AcceptQualificationRequestRequest -> AcceptQualificationRequestRequest: Probability = 1.00, Count = 1
Invoke<AcceptQualificationRequestResponse> -> executeAcceptQualificationRequest: Probability = 1.00, Count = 1
appendTail -> appendTail: Probability = 1.00, Count = 3
appendPos -> appendPos: Probability = 1.00, Count = 1
_regionEnd -> regionEnd: Probability = 1.00, Count = 3
appendPos, -> appendPos,: Probability = 1.00, Count = 1
GetSignificantDecimalDigits -> getSignificantDecimalDigits: Probability = 1.00, Count = 1
SetVerticalBorder -> setVerticalBorder: Probability = 1.00, Count = 1
verticalBorder.SetShortBoolean -> verticalBorder.setShortBoolean: Probability = 1.00, Count = 1
field_1_options, -> field_1_options,: Probability = 1.00, Count = 4
CRNRecord -> CRNRecord: Probability = 1.00, Count = 2
nValues -> nValues: Probability = 1.00, Count = 2
RevokeDBSecurityGroupIngressResponse -> DBSecurityGroup: Probability = 1.00, Count = 1
RevokeDBSecurityGroupIngress -> revokeDBSecurityGroupIngress: Probability = 1.00, Count = 1
Invoke<RevokeDBSecurityGroupIngressResponse> -> executeRevokeDBSecurityGroupIngress: Probability = 1.00, Count = 1
remain -> remain: Probability = 1.00, Count = 8
toCopy -> toCopy: Probability = 0.76, Count = 13
toCopy -> this.current.chars,: Probability = 0.12, Count = 2
toCopy -> this.current.length,: Probability = 0.06, Count = 1
toCopy -> toCopy,: Probability = 0.06, Count = 1
remainingInBlock -> remainingInBlock: Probability = 1.00, Count = 6
value[i] -> retVal.append: Probability = 1.00, Count = 8
ListIPSetsResponse -> ListIPSetsResult: Probability = 1.00, Count = 1
ListIPSets -> listIPSets: Probability = 1.00, Count = 1
ListIPSetsRequest -> ListIPSetsRequest: Probability = 1.00, Count = 1
Invoke<ListIPSetsResponse> -> executeListIPSets: Probability = 1.00, Count = 1
IIndexableField[] -> IndexableField[]: Probability = 1.00, Count = 1
GetFields -> getFields: Probability = 1.00, Count = 1
IIndexableField -> IndexableField: Probability = 1.00, Count = 10
field.Name.Equals -> field.name: Probability = 0.37, Count = 7
field.Name.Equals -> .equals: Probability = 0.26, Count = 5
field.Name.Equals -> name: Probability = 0.37, Count = 7
GetTrafficPolicyResponse -> GetTrafficPolicyResult: Probability = 1.00, Count = 1
GetTrafficPolicy -> getTrafficPolicy: Probability = 1.00, Count = 1
GetTrafficPolicyRequest -> GetTrafficPolicyRequest: Probability = 1.00, Count = 1
Invoke<GetTrafficPolicyResponse> -> executeGetTrafficPolicy: Probability = 1.00, Count = 1
idBuffer.Name -> idBuffer.name: Probability = 1.00, Count = 1
DeleteExperimentResponse -> DeleteExperimentResult: Probability = 1.00, Count = 1
DeleteExperiment -> deleteExperiment: Probability = 1.00, Count = 1
DeleteExperimentRequest -> DeleteExperimentRequest: Probability = 1.00, Count = 1
Invoke<DeleteExperimentResponse> -> executeDeleteExperiment: Probability = 1.00, Count = 1
field_3_username_value.Length -> field_3_username_value.length: Probability = 1.00, Count = 2
field_3_username_unicode_options -> field_3_username_unicode_options: Probability = 1.00, Count = 2
BulgarianStemFilterFactory -> BulgarianStemFilterFactory: Probability = 1.00, Count = 1
GetMirrorListRequest -> GetMirrorListRequest: Probability = 1.00, Count = 1
"GetMirrorList", -> "GetMirrorList",: Probability = 1.00, Count = 1
"/mirrors" -> "/mirrors": Probability = 1.00, Count = 1
DescribeDomainEndpointOptionsResponse -> DescribeDomainEndpointOptionsResult: Probability = 1.00, Count = 1
DescribeDomainEndpointOptions -> describeDomainEndpointOptions: Probability = 1.00, Count = 1
DescribeDomainEndpointOptionsRequest -> DescribeDomainEndpointOptionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDomainEndpointOptionsResponse> -> executeDescribeDomainEndpointOptions: Probability = 1.00, Count = 1
this.source -> this.source: Probability = 1.00, Count = 4
this._channel -> this.channel: Probability = 1.00, Count = 2
this.stop -> this.stop: Probability = 1.00, Count = 2
source.Item1.Line -> this.charPositionInLine: Probability = 1.00, Count = 1
this.charPositionInLine -> source.a.getCharPositionInLine: Probability = 1.00, Count = 1
UpdateDocumentationVersionResponse -> UpdateDocumentationVersionResult: Probability = 1.00, Count = 1
UpdateDocumentationVersion -> updateDocumentationVersion: Probability = 1.00, Count = 1
UpdateDocumentationVersionRequest -> UpdateDocumentationVersionRequest: Probability = 1.00, Count = 1
Invoke<UpdateDocumentationVersionResponse> -> executeUpdateDocumentationVersion: Probability = 1.00, Count = 1
DeleteApplicationInputProcessingConfigurationResponse -> DeleteApplicationInputProcessingConfigurationResult: Probability = 1.00, Count = 1
DeleteApplicationInputProcessingConfiguration -> deleteApplicationInputProcessingConfiguration: Probability = 1.00, Count = 1
DeleteApplicationInputProcessingConfigurationRequest -> DeleteApplicationInputProcessingConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DeleteApplicationInputProcessingConfigurationResponse> -> executeDeleteApplicationInputProcessingConfiguration: Probability = 1.00, Count = 1
PurchaseScheduledInstancesResponse -> PurchaseScheduledInstancesResult: Probability = 1.00, Count = 1
PurchaseScheduledInstances -> purchaseScheduledInstances: Probability = 1.00, Count = 1
PurchaseScheduledInstancesRequest -> PurchaseScheduledInstancesRequest: Probability = 1.00, Count = 1
Invoke<PurchaseScheduledInstancesResponse> -> executePurchaseScheduledInstances: Probability = 1.00, Count = 1
GetHost -> getHost: Probability = 1.00, Count = 3
DeleteNetworkProfileResponse -> DeleteNetworkProfileResult: Probability = 1.00, Count = 1
DeleteNetworkProfile -> deleteNetworkProfile: Probability = 1.00, Count = 1
DeleteNetworkProfileRequest -> DeleteNetworkProfileRequest: Probability = 1.00, Count = 1
Invoke<DeleteNetworkProfileResponse> -> executeDeleteNetworkProfile: Probability = 1.00, Count = 1
ListSchemasResponse -> ListSchemasResult: Probability = 1.00, Count = 1
ListSchemas -> listSchemas: Probability = 1.00, Count = 1
ListSchemasRequest -> ListSchemasRequest: Probability = 1.00, Count = 1
Invoke<ListSchemasResponse> -> executeListSchemas: Probability = 1.00, Count = 1
ByteSliceWriter -> ByteSliceWriter: Probability = 1.00, Count = 1
getChars -> getChars: Probability = 1.00, Count = 2
base.getChars -> super.getChars: Probability = 1.00, Count = 1
RestoreAddressToClassicResponse -> RestoreAddressToClassicResult: Probability = 1.00, Count = 1
RestoreAddressToClassic -> restoreAddressToClassic: Probability = 1.00, Count = 1
RestoreAddressToClassicRequest -> RestoreAddressToClassicRequest: Probability = 1.00, Count = 1
Invoke<RestoreAddressToClassicResponse> -> executeRestoreAddressToClassic: Probability = 1.00, Count = 1
0xFFL -> 0xFFL: Probability = 1.00, Count = 2
CreateNamespaceRequest -> CreateNamespaceRequest: Probability = 1.00, Count = 1
"CreateNamespace", -> "CreateNamespace",: Probability = 1.00, Count = 1
"/namespace" -> "/namespace": Probability = 1.00, Count = 2
GetEventsConfigurationResponse -> GetEventsConfigurationResult: Probability = 1.00, Count = 1
GetEventsConfiguration -> getEventsConfiguration: Probability = 1.00, Count = 1
GetEventsConfigurationRequest -> GetEventsConfigurationRequest: Probability = 1.00, Count = 1
Invoke<GetEventsConfigurationResponse> -> executeGetEventsConfiguration: Probability = 1.00, Count = 1
"docFreq=" -> "docFreq=": Probability = 1.00, Count = 1
TotalTermFreq -> totalTermFreq=": Probability = 0.40, Count = 2
TotalTermFreq -> totalTermFreq: Probability = 0.60, Count = 3
termBlockOrd=" -> termBlockOrd=": Probability = 1.00, Count = 1
TermBlockOrd -> termBlockOrd: Probability = 1.00, Count = 2
blockFP=" -> blockFP=": Probability = 1.00, Count = 1
BlockFilePointer -> blockFilePointer: Probability = 1.00, Count = 2
EstimateTemplateCostResponse -> EstimateTemplateCostResult: Probability = 1.00, Count = 1
EstimateTemplateCost -> estimateTemplateCost: Probability = 1.00, Count = 1
EstimateTemplateCostRequest -> EstimateTemplateCostRequest: Probability = 1.00, Count = 1
Invoke<EstimateTemplateCostResponse> -> executeEstimateTemplateCost: Probability = 1.00, Count = 1
OrTreeFilter.Binary -> Binary: Probability = 1.00, Count = 3
java.nio.ByteOrder.nativeOrder -> ByteOrder.nativeOrder: Probability = 1.00, Count = 1
StrLen -> strlen: Probability = 1.00, Count = 4
GetPrecedenceStartState -> getPrecedenceStartState: Probability = 1.00, Count = 1
!IsPrecedenceDfa -> !isPrecedenceDfa: Probability = 1.00, Count = 2
"Only -> "Only: Probability = 1.00, Count = 4
may -> may: Probability = 1.00, Count = 3
contain -> contain: Probability = 1.00, Count = 5
s0.edges[precedence] -> s0.edges[precedence]: Probability = 1.00, Count = 2
SetActiveReceiptRuleSetResponse -> SetActiveReceiptRuleSetResult: Probability = 1.00, Count = 1
SetActiveReceiptRuleSet -> setActiveReceiptRuleSet: Probability = 1.00, Count = 1
SetActiveReceiptRuleSetRequest -> SetActiveReceiptRuleSetRequest: Probability = 1.00, Count = 1
Invoke<SetActiveReceiptRuleSetResponse> -> executeSetActiveReceiptRuleSet: Probability = 1.00, Count = 1
CreateLaunchTemplateResponse -> CreateLaunchTemplateResult: Probability = 1.00, Count = 1
CreateLaunchTemplate -> createLaunchTemplate: Probability = 1.00, Count = 1
CreateLaunchTemplateRequest -> CreateLaunchTemplateRequest: Probability = 1.00, Count = 1
Invoke<CreateLaunchTemplateResponse> -> executeCreateLaunchTemplate: Probability = 1.00, Count = 1
ListTrafficPolicyVersionsResponse -> ListTrafficPolicyVersionsResult: Probability = 1.00, Count = 1
ListTrafficPolicyVersions -> listTrafficPolicyVersions: Probability = 1.00, Count = 1
ListTrafficPolicyVersionsRequest -> ListTrafficPolicyVersionsRequest: Probability = 1.00, Count = 1
Invoke<ListTrafficPolicyVersionsResponse> -> executeListTrafficPolicyVersions: Probability = 1.00, Count = 1
EffectiveLocale -> effectiveLocale: Probability = 1.00, Count = 1
effectiveLocale -> effectiveLocale: Probability = 1.00, Count = 1
commit.Generation.ToString -> commit.getGeneration: Probability = 1.00, Count = 1
"X" -> RADIX: Probability = 1.00, Count = 1
ListServicesResponse -> ListServicesResult: Probability = 1.00, Count = 1
ListServices -> listServices: Probability = 1.00, Count = 1
ListServicesRequest -> ListServicesRequest: Probability = 1.00, Count = 1
Invoke<ListServicesResponse> -> executeListServices: Probability = 1.00, Count = 1
BatchModifyClusterSnapshotsResponse -> BatchModifyClusterSnapshotsResult: Probability = 1.00, Count = 1
BatchModifyClusterSnapshots -> batchModifyClusterSnapshots: Probability = 1.00, Count = 1
BatchModifyClusterSnapshotsRequest -> BatchModifyClusterSnapshotsRequest: Probability = 1.00, Count = 1
Invoke<BatchModifyClusterSnapshotsResponse> -> executeBatchModifyClusterSnapshots: Probability = 1.00, Count = 1
DeleteBackupResponse -> DeleteBackupResult: Probability = 1.00, Count = 1
DeleteBackup -> deleteBackup: Probability = 1.00, Count = 1
DeleteBackupRequest -> DeleteBackupRequest: Probability = 1.00, Count = 1
Invoke<DeleteBackupResponse> -> executeDeleteBackup: Probability = 1.00, Count = 1
DescribeDBParameterGroupsResponse -> DescribeDBParameterGroupsResult: Probability = 1.00, Count = 2
DescribeDBParameterGroups -> describeDBParameterGroups: Probability = 1.00, Count = 3
DescribeDBParameterGroupsRequest -> DescribeDBParameterGroupsRequest: Probability = 1.00, Count = 2
reuseFirst -> reuseFirst: Probability = 1.00, Count = 6
DeregisterImageResponse -> DeregisterImageResult: Probability = 1.00, Count = 1
DeregisterImage -> deregisterImage: Probability = 1.00, Count = 1
DeregisterImageRequest -> DeregisterImageRequest: Probability = 1.00, Count = 1
Invoke<DeregisterImageResponse> -> executeDeregisterImage: Probability = 1.00, Count = 1
ModifyDBSnapshotResponse -> DBSnapshot: Probability = 1.00, Count = 1
ModifyDBSnapshot -> modifyDBSnapshot: Probability = 1.00, Count = 1
ModifyDBSnapshotRequest -> ModifyDBSnapshotRequest: Probability = 1.00, Count = 1
Invoke<ModifyDBSnapshotResponse> -> executeModifyDBSnapshot: Probability = 1.00, Count = 1
StringTokenizer -> StringTokenizer: Probability = 0.46, Count = 6
StringTokenizer -> params,: Probability = 0.15, Count = 2
StringTokenizer -> tokenizer.hasMoreTokens: Probability = 0.08, Count = 1
StringTokenizer -> st.hasMoreTokens: Probability = 0.08, Count = 1
StringTokenizer -> st.nextToken: Probability = 0.08, Count = 1
StringTokenizer -> expr: Probability = 0.08, Count = 1
StringTokenizer -> param,: Probability = 0.08, Count = 1
m_fieldsToLoad.Add -> fieldsToLoad.add: Probability = 1.00, Count = 1
GetNamedQueryResponse -> GetNamedQueryResult: Probability = 1.00, Count = 1
GetNamedQuery -> getNamedQuery: Probability = 1.00, Count = 1
GetNamedQueryRequest -> GetNamedQueryRequest: Probability = 1.00, Count = 1
Invoke<GetNamedQueryResponse> -> executeGetNamedQuery: Probability = 1.00, Count = 1
GermanStemFilter -> GermanStemFilter: Probability = 1.00, Count = 2
CreateCellXF -> createCellXF: Probability = 1.00, Count = 1
numxfs++ -> numxfs++: Probability = 1.00, Count = 1
ModifyClusterMaintenanceResponse -> Cluster: Probability = 1.00, Count = 1
ModifyClusterMaintenance -> modifyClusterMaintenance: Probability = 1.00, Count = 1
ModifyClusterMaintenanceRequest -> ModifyClusterMaintenanceRequest: Probability = 1.00, Count = 1
Invoke<ModifyClusterMaintenanceResponse> -> executeModifyClusterMaintenance: Probability = 1.00, Count = 1
DeleteDBSecurityGroupResponse -> DeleteDBSecurityGroupResult: Probability = 1.00, Count = 1
DeleteDBSecurityGroup -> deleteDBSecurityGroup: Probability = 1.00, Count = 1
Invoke<DeleteDBSecurityGroupResponse> -> executeDeleteDBSecurityGroup: Probability = 1.00, Count = 1
ForInt -> forInt: Probability = 1.00, Count = 2
bmap.ContainsKey -> err: Probability = 0.60, Count = 3
bmap.ContainsKey -> bmap.get: Probability = 0.40, Count = 2
bmap[type] -> err: Probability = 1.00, Count = 5
toAppendTo -> toAppendTo: Probability = 1.00, Count = 1
hStart -> hStart: Probability = 1.00, Count = 1
!_formatter.ShowAmPm -> !showAmPm: Probability = 1.00, Count = 1
hLen -> hLen: Probability = 1.00, Count = 1
toAppendTo[hStart -> toAppendTo.setCharAt: Probability = 0.50, Count = 1
toAppendTo[hStart -> hStart: Probability = 0.50, Count = 1
'H' -> 'H': Probability = 1.00, Count = 1
SendRawEmailResponse -> SendRawEmailResult: Probability = 1.00, Count = 1
SendRawEmail -> sendRawEmail: Probability = 1.00, Count = 1
Invoke<SendRawEmailResponse> -> executeSendRawEmail: Probability = 1.00, Count = 1
intervals.Clear -> intervals.clear: Probability = 1.00, Count = 1
DeleteDocumentClassifierResponse -> DeleteDocumentClassifierResult: Probability = 1.00, Count = 1
DeleteDocumentClassifier -> deleteDocumentClassifier: Probability = 1.00, Count = 1
DeleteDocumentClassifierRequest -> DeleteDocumentClassifierRequest: Probability = 1.00, Count = 1
Invoke<DeleteDocumentClassifierResponse> -> executeDeleteDocumentClassifier: Probability = 1.00, Count = 1
DeleteDeviceAllGroupRequest -> DeleteDeviceAllGroupRequest: Probability = 1.00, Count = 1
"DeleteDeviceAllGroup" -> "DeleteDeviceAllGroup": Probability = 1.00, Count = 1
CreateBGPPeerResponse -> CreateBGPPeerResult: Probability = 1.00, Count = 1
CreateBGPPeer -> createBGPPeer: Probability = 1.00, Count = 1
CreateBGPPeerRequest -> CreateBGPPeerRequest: Probability = 1.00, Count = 1
Invoke<CreateBGPPeerResponse> -> executeCreateBGPPeer: Probability = 1.00, Count = 1
toASCIIString -> toASCIIString: Probability = 1.00, Count = 1
ASCII_ONLY.appendEncoded -> ASCII_ONLY.appendEncoded: Probability = 1.00, Count = 1
Subsequence -> subSequence: Probability = 1.00, Count = 2
indexInBlock -> indexInBlock: Probability = 1.00, Count = 4
numToAppend -> blockIdx++: Probability = 0.20, Count = 1
numToAppend -> numToAppend: Probability = 0.60, Count = 3
numToAppend -> indexInBlock,: Probability = 0.20, Count = 1
b.chars, -> b.chars,: Probability = 1.00, Count = 2
GetNotSupportedFunctionNames -> getNotSupportedFunctionNames: Probability = 1.00, Count = 2
ItalianLightStemFilterFactory -> ItalianLightStemFilterFactory: Probability = 1.00, Count = 1
_functionIndex -> getFunctionIndex: Probability = 1.00, Count = 2
s.Replace -> s.replace: Probability = 0.75, Count = 3
s.Replace -> "\r","\\r": Probability = 0.25, Count = 1
NumericPayloadTokenFilter -> NumericPayloadTokenFilter: Probability = 1.00, Count = 2
payload, -> input,payload,typeMatch: Probability = 1.00, Count = 1
IncrementDrawingsSaved -> incrementDrawingsSaved: Probability = 1.00, Count = 1
dgg.DrawingsSaved -> dgg.setDrawingsSaved: Probability = 0.33, Count = 1
dgg.DrawingsSaved -> dgg.getDrawingsSaved: Probability = 0.33, Count = 1
dgg.DrawingsSaved -> +1: Probability = 0.33, Count = 1
UploadSigningCertificateRequest -> UploadSigningCertificateRequest: Probability = 1.00, Count = 1
DeleteJourneyResponse -> DeleteJourneyResult: Probability = 1.00, Count = 1
DeleteJourney -> deleteJourney: Probability = 1.00, Count = 1
DeleteJourneyRequest -> DeleteJourneyRequest: Probability = 1.00, Count = 1
Invoke<DeleteJourneyResponse> -> executeDeleteJourney: Probability = 1.00, Count = 1
DescribeInstanceHealthRequest -> DescribeInstanceHealthRequest: Probability = 1.00, Count = 1
Automaton -> Automaton: Probability = 0.62, Count = 5
Automaton -> Automaton.Builder: Probability = 0.38, Count = 3
nextChar -> nextChar: Probability = 0.60, Count = 3
nextChar -> Automata.makeChar: Probability = 0.40, Count = 2
field_1_font_index -> field_1_font_index: Probability = 1.00, Count = 3
field_2_format_index -> field_2_format_index: Probability = 1.00, Count = 3
field_3_cell_options -> field_3_cell_options: Probability = 1.00, Count = 3
field_4_alignment_options -> field_4_alignment_options: Probability = 1.00, Count = 3
field_5_indention_options -> field_5_indention_options: Probability = 1.00, Count = 3
field_6_border_options -> field_6_border_options: Probability = 1.00, Count = 3
field_7_palette_options -> field_7_palette_options: Probability = 1.00, Count = 3
field_8_adtl_palette_options -> field_8_adtl_palette_options: Probability = 1.00, Count = 3
field_9_fill_palette_options -> field_9_fill_palette_options: Probability = 1.00, Count = 3
GetTriplet -> short[]: Probability = 0.67, Count = 2
GetTriplet -> getTriplet: Probability = 0.33, Count = 1
follow -> follow: Probability = 0.80, Count = 4
follow -> Boolean.valueOf: Probability = 0.20, Count = 1
StringMatcher -> StringMatcher: Probability = 1.00, Count = 1
CmpOp.EQ:case -> CmpOp.EQ:case: Probability = 1.00, Count = 2
CmpOp.NE:_pattern -> CmpOp.NE:_pattern: Probability = 1.00, Count = 1
GetWildCardPattern -> getWildCardPattern: Probability = 1.00, Count = 1
field_1_col_width -> field_1_col_width: Probability = 1.00, Count = 2
DEFAULT_COLUMN_WIDTH -> DEFAULT_COLUMN_WIDTH: Probability = 1.00, Count = 1
GetIndustryInfoListRequest -> GetIndustryInfoListRequest: Probability = 1.00, Count = 1
"GetIndustryInfoList" -> "GetIndustryInfoList": Probability = 1.00, Count = 1
AssociateTrialComponentResponse -> AssociateTrialComponentResult: Probability = 1.00, Count = 1
AssociateTrialComponent -> associateTrialComponent: Probability = 1.00, Count = 1
AssociateTrialComponentRequest -> AssociateTrialComponentRequest: Probability = 1.00, Count = 1
Invoke<AssociateTrialComponentResponse> -> executeAssociateTrialComponent: Probability = 1.00, Count = 1
AddCluster -> FileIdCluster: Probability = 0.33, Count = 1
AddCluster -> addCluster: Probability = 0.67, Count = 2
numShapedUsed -> numShapedUsed: Probability = 1.00, Count = 1
numShapedUsed, -> numShapedUsed,: Probability = 1.00, Count = 1
GetFieldLevelEncryptionResponse -> GetFieldLevelEncryptionResult: Probability = 1.00, Count = 1
GetFieldLevelEncryption -> getFieldLevelEncryption: Probability = 1.00, Count = 1
GetFieldLevelEncryptionRequest -> GetFieldLevelEncryptionRequest: Probability = 1.00, Count = 1
Invoke<GetFieldLevelEncryptionResponse> -> executeGetFieldLevelEncryption: Probability = 1.00, Count = 1
UpdateServiceResponse -> UpdateServiceResult: Probability = 1.00, Count = 1
UpdateService -> updateService: Probability = 1.00, Count = 1
UpdateServiceRequest -> UpdateServiceRequest: Probability = 1.00, Count = 1
Invoke<UpdateServiceResponse> -> executeUpdateService: Probability = 1.00, Count = 1
FlushStageCacheResponse -> FlushStageCacheResult: Probability = 1.00, Count = 1
FlushStageCache -> flushStageCache: Probability = 1.00, Count = 1
FlushStageCacheRequest -> FlushStageCacheRequest: Probability = 1.00, Count = 1
Invoke<FlushStageCacheResponse> -> executeFlushStageCache: Probability = 1.00, Count = 1
ModifyInstanceMetadataOptionsResponse -> ModifyInstanceMetadataOptionsResult: Probability = 1.00, Count = 1
ModifyInstanceMetadataOptions -> modifyInstanceMetadataOptions: Probability = 1.00, Count = 1
ModifyInstanceMetadataOptionsRequest -> ModifyInstanceMetadataOptionsRequest: Probability = 1.00, Count = 1
Invoke<ModifyInstanceMetadataOptionsResponse> -> executeModifyInstanceMetadataOptions: Probability = 1.00, Count = 1
ListModelPackagesResponse -> ListModelPackagesResult: Probability = 1.00, Count = 1
ListModelPackages -> listModelPackages: Probability = 1.00, Count = 1
ListModelPackagesRequest -> ListModelPackagesRequest: Probability = 1.00, Count = 1
Invoke<ListModelPackagesResponse> -> executeListModelPackages: Probability = 1.00, Count = 1
StopFleetActionsResponse -> StopFleetActionsResult: Probability = 1.00, Count = 1
StopFleetActions -> stopFleetActions: Probability = 1.00, Count = 1
StopFleetActionsRequest -> StopFleetActionsRequest: Probability = 1.00, Count = 1
Invoke<StopFleetActionsResponse> -> executeStopFleetActions: Probability = 1.00, Count = 1
.cannotBeCombined -> .cannotBeCombined: Probability = 1.00, Count = 1
LongList -> LongList: Probability = 1.00, Count = 1
long[capacity] -> long[capacity]: Probability = 1.00, Count = 1
DeleteRouteRequestParameterResponse -> DeleteRouteRequestParameterResult: Probability = 1.00, Count = 1
DeleteRouteRequestParameter -> deleteRouteRequestParameter: Probability = 1.00, Count = 1
DeleteRouteRequestParameterRequest -> DeleteRouteRequestParameterRequest: Probability = 1.00, Count = 1
Invoke<DeleteRouteRequestParameterResponse> -> executeDeleteRouteRequestParameter: Probability = 1.00, Count = 1
GetRowCountForBlock -> getRowCountForBlock: Probability = 1.00, Count = 1
DBCellRecord.BLOCK_SIZE -> DBCellRecord.BLOCK_SIZE: Probability = 1.00, Count = 2
_rowRecords.Count -> _rowRecords.size: Probability = 1.00, Count = 2
FSTCompletion -> FSTCompletion: Probability = 1.00, Count = 1
FST<object> -> FST<Object>: Probability = 1.00, Count = 1
automaton -> automaton,: Probability = 0.20, Count = 2
automaton -> this.automaton: Probability = 0.10, Count = 1
automaton -> automaton: Probability = 0.40, Count = 4
automaton -> cacheRootArcs: Probability = 0.10, Count = 1
automaton -> term,: Probability = 0.10, Count = 1
automaton -> Operations.DEFAULT_MAX_DETERMINIZED_STATES: Probability = 0.10, Count = 1
higherWeightsFirst, -> higherWeightsFirst,: Probability = 1.00, Count = 1
exactFirst -> exactFirst: Probability = 1.00, Count = 2
this.rootArcs -> this.rootArcs: Probability = 1.00, Count = 2
FST.Arc<object>[0] -> Arc[0]: Probability = 1.00, Count = 1
this.higherWeightsFirst -> this.higherWeightsFirst: Probability = 1.00, Count = 1
higherWeightsFirst -> higherWeightsFirst: Probability = 1.00, Count = 1
this.exactFirst -> this.exactFirst: Probability = 1.00, Count = 1
"idf -> idfExplain.getValue: Probability = 1.00, Count = 1
CreateEndpointResponse -> CreateEndpointResult: Probability = 1.00, Count = 1
CreateEndpoint -> createEndpoint: Probability = 1.00, Count = 1
CreateEndpointRequest -> CreateEndpointRequest: Probability = 1.00, Count = 1
Invoke<CreateEndpointResponse> -> executeCreateEndpoint: Probability = 1.00, Count = 1
rawData -> rawData: Probability = 0.70, Count = 7
rawData -> getRawData: Probability = 0.30, Count = 3
NullEscherSerializationListener -> NullEscherSerializationListener: Probability = 1.00, Count = 3
IsBelowMaxRep -> isBelowMaxRep: Probability = 1.00, Count = 1
sc -> sc: Probability = 0.62, Count = 13
sc -> normalise64bit: Probability = 0.05, Count = 1
sc -> enough: Probability = 0.05, Count = 1
sc -> precision": Probability = 0.05, Count = 1
sc -> sc-1: Probability = 0.05, Count = 1
sc -> 0xFFFFE0: Probability = 0.05, Count = 1
sc -> Rounder.round: Probability = 0.05, Count = 1
sc -> sc++: Probability = 0.05, Count = 1
sc -> _binaryExponent++: Probability = 0.05, Count = 1
_significand.BitLength -> _significand.bitLength: Probability = 1.00, Count = 5
C_64 -> C_64: Probability = 1.00, Count = 4
_significand.CompareTo -> _significand.compareTo: Probability = 1.00, Count = 2
BI_MAX_BASE.ShiftLeft -> BI_MAX_BASE.shiftLeft: Probability = 1.00, Count = 1
FieldIndexEnum -> FieldIndexEnum: Probability = 1.00, Count = 1
GetFieldEnum -> getFieldEnum: Probability = 1.00, Count = 1
fieldData -> fieldData: Probability = 0.50, Count = 1
fieldData -> fieldInfo.name: Probability = 0.50, Count = 1
!fields.TryGetValue -> fields.get: Probability = 1.00, Count = 2
fieldData.fst -> fieldData.fst: Probability = 1.00, Count = 2
IndexEnum -> IndexEnum: Probability = 1.00, Count = 2
AssociationsFacetsExample -> AssociationsFacetsExample: Probability = 1.00, Count = 1
config.SetMultiValued -> config.setMultiValued: Probability = 1.00, Count = 3
"tags", -> "tags",: Probability = 0.67, Count = 2
"tags", -> "$tags": Probability = 0.33, Count = 1
config.SetIndexFieldName -> config.setIndexFieldName: Probability = 1.00, Count = 4
"genre", -> "genre",: Probability = 0.67, Count = 2
"genre", -> "$genre": Probability = 0.33, Count = 1
current.Fill -> current.fill: Probability = 1.00, Count = 1
ListDeploymentConfigsResponse -> ListDeploymentConfigsResult: Probability = 1.00, Count = 1
ListDeploymentConfigs -> listDeploymentConfigs: Probability = 1.00, Count = 1
ListDeploymentConfigsRequest -> ListDeploymentConfigsRequest: Probability = 1.00, Count = 1
Invoke<ListDeploymentConfigsResponse> -> executeListDeploymentConfigs: Probability = 1.00, Count = 1
ListUserPoliciesRequest -> ListUserPoliciesRequest: Probability = 1.00, Count = 1
FinnishLightStemFilter -> FinnishLightStemFilter: Probability = 1.00, Count = 1
GetLastOnPath -> CharSequence: Probability = 0.71, Count = 5
GetLastOnPath -> getLastOnPath: Probability = 0.29, Count = 2
m_tries.Count -> tries.size: Probability = 1.00, Count = 2
externalBookIndex -> externalBookIndex: Probability = 0.67, Count = 2
externalBookIndex -> getExternalWorkbookIndex: Probability = 0.33, Count = 1
workbookName -> workbookName: Probability = 1.00, Count = 2
ebrTarget.SheetNames, -> ebrTarget.getSheetNames: Probability = 1.00, Count = 2
externalBookIndex, -> externalBookIndex,: Probability = 1.00, Count = 2
FindSheetLastNameFromExternSheet -> findSheetLastNameFromExternSheet: Probability = 1.00, Count = 1
indexToSheet -> indexToSheet: Probability = 1.00, Count = 4
FindSheetNameFromIndex -> findSheetNameFromIndex: Probability = 1.00, Count = 2
ImportImageResponse -> ImportImageResult: Probability = 1.00, Count = 1
ImportImage -> importImage: Probability = 1.00, Count = 1
ImportImageRequest -> ImportImageRequest: Probability = 1.00, Count = 1
Invoke<ImportImageResponse> -> executeImportImage: Probability = 1.00, Count = 1
PruneByAge -> PruneByAge: Probability = 1.00, Count = 1
"maxAgeSec -> "maxAgeSec: Probability = 1.00, Count = 1
this.maxAgeSec -> this.maxAgeSec: Probability = 1.00, Count = 1
GetRoomSkillParameterResponse -> GetRoomSkillParameterResult: Probability = 1.00, Count = 1
GetRoomSkillParameter -> getRoomSkillParameter: Probability = 1.00, Count = 1
GetRoomSkillParameterRequest -> GetRoomSkillParameterRequest: Probability = 1.00, Count = 1
Invoke<GetRoomSkillParameterResponse> -> executeGetRoomSkillParameter: Probability = 1.00, Count = 1
startRuleIndex -> startRuleIndex: Probability = 0.43, Count = 3
startRuleIndex -> rootContext,: Probability = 0.29, Count = 2
startRuleIndex -> startRuleStartState.stateNumber,: Probability = 0.29, Count = 2
int> -> Integer>: Probability = 0.67, Count = 4
int> -> toMap: Probability = 0.17, Count = 1
int> -> HashMap<String,: Probability = 0.17, Count = 1
DeleteInstallationMediaResponse -> DeleteInstallationMediaResult: Probability = 1.00, Count = 1
DeleteInstallationMedia -> deleteInstallationMedia: Probability = 1.00, Count = 1
DeleteInstallationMediaRequest -> DeleteInstallationMediaRequest: Probability = 1.00, Count = 1
Invoke<DeleteInstallationMediaResponse> -> executeDeleteInstallationMedia: Probability = 1.00, Count = 1
Accept -> accept: Probability = 1.00, Count = 1
minIncl -> min: Probability = 1.00, Count = 2
maxIncl -> max: Probability = 1.00, Count = 2
GetVariablesResponse -> GetVariablesResult: Probability = 1.00, Count = 1
GetVariables -> getVariables: Probability = 1.00, Count = 1
GetVariablesRequest -> GetVariablesRequest: Probability = 1.00, Count = 1
Invoke<GetVariablesResponse> -> executeGetVariables: Probability = 1.00, Count = 1
checkStartEndRemaining -> checkStartEndRemaining: Probability = 1.00, Count = 1
result.limit -> result.limit: Probability = 1.00, Count = 1
result.position -> result.position: Probability = 1.00, Count = 1
DescribeInstallationMediaResponse -> DescribeInstallationMediaResult: Probability = 1.00, Count = 1
DescribeInstallationMedia -> describeInstallationMedia: Probability = 1.00, Count = 1
DescribeInstallationMediaRequest -> DescribeInstallationMediaRequest: Probability = 1.00, Count = 1
Invoke<DescribeInstallationMediaResponse> -> executeDescribeInstallationMedia: Probability = 1.00, Count = 1
UpdateConferenceProviderResponse -> UpdateConferenceProviderResult: Probability = 1.00, Count = 1
UpdateConferenceProvider -> updateConferenceProvider: Probability = 1.00, Count = 1
UpdateConferenceProviderRequest -> UpdateConferenceProviderRequest: Probability = 1.00, Count = 1
Invoke<UpdateConferenceProviderResponse> -> executeUpdateConferenceProvider: Probability = 1.00, Count = 1
marker -> marker: Probability = 1.00, Count = 1
expectedMark -> expectedMark: Probability = 0.50, Count = 1
expectedMark -> marker!=expectedMark: Probability = 0.50, Count = 1
GetDataSize -> getDataSize: Probability = 1.00, Count = 1
UpperCaseFilter -> UpperCaseFilter: Probability = 1.00, Count = 1
CreateHITResponse -> CreateHITResult: Probability = 1.00, Count = 1
CreateHIT -> createHIT: Probability = 1.00, Count = 1
CreateHITRequest -> CreateHITRequest: Probability = 1.00, Count = 1
Invoke<CreateHITResponse> -> executeCreateHIT: Probability = 1.00, Count = 1
escapeLeft -> escapeLeft: Probability = 1.00, Count = 2
"start -> "start: Probability = 1.00, Count = 3
recSize -> recSize: Probability = 0.56, Count = 5
recSize -> out.getWriteIndex: Probability = 0.22, Count = 2
recSize -> ioe: Probability = 0.22, Count = 2
libcore.io.Memory.pokeInt -> Memory.pokeInt: Probability = 1.00, Count = 2
Invoke<ListGeoLocationsResponse> -> executeListGeoLocations: Probability = 1.00, Count = 1
Invoke<DescribeClusterSnapshotsResponse> -> executeDescribeClusterSnapshots: Probability = 1.00, Count = 1
DeleteDirectConnectGatewayAssociationProposalResponse -> DeleteDirectConnectGatewayAssociationProposalResult: Probability = 1.00, Count = 1
DeleteDirectConnectGatewayAssociationProposal -> deleteDirectConnectGatewayAssociationProposal: Probability = 1.00, Count = 1
DeleteDirectConnectGatewayAssociationProposalRequest -> DeleteDirectConnectGatewayAssociationProposalRequest: Probability = 1.00, Count = 1
Invoke<DeleteDirectConnectGatewayAssociationProposalResponse> -> executeDeleteDirectConnectGatewayAssociationProposal: Probability = 1.00, Count = 1
Prev -> prev: Probability = 1.00, Count = 1
GetVoiceConnectorTerminationResponse -> GetVoiceConnectorTerminationResult: Probability = 1.00, Count = 1
GetVoiceConnectorTermination -> getVoiceConnectorTermination: Probability = 1.00, Count = 1
GetVoiceConnectorTerminationRequest -> GetVoiceConnectorTerminationRequest: Probability = 1.00, Count = 1
Invoke<GetVoiceConnectorTerminationResponse> -> executeGetVoiceConnectorTermination: Probability = 1.00, Count = 1
DescribeHsmConfigurationsResponse -> DescribeHsmConfigurationsResult: Probability = 1.00, Count = 2
DescribeHsmConfigurations -> describeHsmConfigurations: Probability = 1.00, Count = 3
DescribeHsmConfigurationsRequest -> DescribeHsmConfigurationsRequest: Probability = 1.00, Count = 2
DeleteInternetGatewayResponse -> DeleteInternetGatewayResult: Probability = 1.00, Count = 1
DeleteInternetGateway -> deleteInternetGateway: Probability = 1.00, Count = 1
DeleteInternetGatewayRequest -> DeleteInternetGatewayRequest: Probability = 1.00, Count = 1
Invoke<DeleteInternetGatewayResponse> -> executeDeleteInternetGateway: Probability = 1.00, Count = 1
SwedishStemmer -> SwedishStemmer: Probability = 1.00, Count = 1
GetNameOffset -> getNameOffset: Probability = 1.00, Count = 1
tenum, -> tenum,: Probability = 1.00, Count = 1
tenum -> tenum: Probability = 1.00, Count = 1
singleRef -> singleRef: Probability = 1.00, Count = 1
SetInitialSeekTerm -> setInitialSeekTerm: Probability = 1.00, Count = 1
ListAllowedNodeTypeModificationsResponse -> ListAllowedNodeTypeModificationsResult: Probability = 1.00, Count = 1
ListAllowedNodeTypeModifications -> listAllowedNodeTypeModifications: Probability = 1.00, Count = 1
ListAllowedNodeTypeModificationsRequest -> ListAllowedNodeTypeModificationsRequest: Probability = 1.00, Count = 1
Invoke<ListAllowedNodeTypeModificationsResponse> -> executeListAllowedNodeTypeModifications: Probability = 1.00, Count = 1
form -> form: Probability = 0.75, Count = 6
form -> this.integerToRoman: Probability = 0.12, Count = 1
form -> makeConcise: Probability = 0.12, Count = 1
RegisterDomain -> registerDomain: Probability = 1.00, Count = 2
RegisterDomainRequest -> RegisterDomainRequest: Probability = 1.00, Count = 2
RegisterDomainResponseUnmarshaller.Instance -> executeRegisterDomain: Probability = 1.00, Count = 2
ToStringEscaped -> toStringEscaped: Probability = 1.00, Count = 2
TrustedSigners -> TrustedSigners: Probability = 1.00, Count = 1
ModifyVpnTunnelCertificateResponse -> ModifyVpnTunnelCertificateResult: Probability = 1.00, Count = 1
ModifyVpnTunnelCertificate -> modifyVpnTunnelCertificate: Probability = 1.00, Count = 1
ModifyVpnTunnelCertificateRequest -> ModifyVpnTunnelCertificateRequest: Probability = 1.00, Count = 1
Invoke<ModifyVpnTunnelCertificateResponse> -> executeModifyVpnTunnelCertificate: Probability = 1.00, Count = 1
AuthorizeClientVpnIngressResponse -> AuthorizeClientVpnIngressResult: Probability = 1.00, Count = 1
AuthorizeClientVpnIngress -> authorizeClientVpnIngress: Probability = 1.00, Count = 1
AuthorizeClientVpnIngressRequest -> AuthorizeClientVpnIngressRequest: Probability = 1.00, Count = 1
Invoke<AuthorizeClientVpnIngressResponse> -> executeAuthorizeClientVpnIngress: Probability = 1.00, Count = 1
DeprecateWorkflowType -> deprecateWorkflowType: Probability = 1.00, Count = 1
DeprecateWorkflowTypeRequest -> DeprecateWorkflowTypeRequest: Probability = 1.00, Count = 1
DeprecateWorkflowTypeResponseUnmarshaller.Instance -> executeDeprecateWorkflowType: Probability = 1.00, Count = 1
"~"+ -> "~"+: Probability = 1.00, Count = 1
GetResolverRuleAssociationResponse -> GetResolverRuleAssociationResult: Probability = 1.00, Count = 1
GetResolverRuleAssociation -> getResolverRuleAssociation: Probability = 1.00, Count = 1
GetResolverRuleAssociationRequest -> GetResolverRuleAssociationRequest: Probability = 1.00, Count = 1
Invoke<GetResolverRuleAssociationResponse> -> executeGetResolverRuleAssociation: Probability = 1.00, Count = 1
GetRemoved -> getRemoved: Probability = 1.00, Count = 1
diff.GetRemoved -> diff.getRemoved: Probability = 1.00, Count = 1
field5_grbit -> field5_grbit: Probability = 1.00, Count = 3
field6_icrt -> field6_unknown: Probability = 1.00, Count = 2
BulgarianStemFilter -> BulgarianStemFilter: Probability = 1.00, Count = 1
GetClientCertificateResponse -> GetClientCertificateResult: Probability = 1.00, Count = 1
GetClientCertificate -> getClientCertificate: Probability = 1.00, Count = 1
GetClientCertificateRequest -> GetClientCertificateRequest: Probability = 1.00, Count = 1
Invoke<GetClientCertificateResponse> -> executeGetClientCertificate: Probability = 1.00, Count = 1
PorterStemmer -> PorterStemmer: Probability = 1.00, Count = 1
this._enclosing.clear -> filteredEntrySet.clear: Probability = 0.14, Count = 1
this._enclosing.clear -> HashMap.this.clear: Probability = 0.14, Count = 1
this._enclosing.clear -> Impl.this.clear: Probability = 0.14, Count = 1
this._enclosing.clear -> AbstractBiMap.this.clear: Probability = 0.14, Count = 1
this._enclosing.clear -> countMap.clear: Probability = 0.14, Count = 1
this._enclosing.clear -> AbstractMultimap.this.clear: Probability = 0.14, Count = 1
this._enclosing.clear -> ConcurrentHashMap.this.clear: Probability = 0.14, Count = 1
readLong -> readLong: Probability = 1.00, Count = 1
FileInputStream -> FileInputStream: Probability = 1.00, Count = 3
CheckDNSAvailabilityRequest -> CheckDNSAvailabilityRequest: Probability = 1.00, Count = 1
cnamePrefix -> cNAMEPrefix: Probability = 1.00, Count = 2
_cnamePrefix -> setCNAMEPrefix: Probability = 1.00, Count = 1
DescribeVpcAttributeResponse -> DescribeVpcAttributeResult: Probability = 1.00, Count = 1
DescribeVpcAttribute -> describeVpcAttribute: Probability = 1.00, Count = 1
DescribeVpcAttributeRequest -> DescribeVpcAttributeRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpcAttributeResponse> -> executeDescribeVpcAttribute: Probability = 1.00, Count = 1
AddResourcePermissionsResponse -> AddResourcePermissionsResult: Probability = 1.00, Count = 1
AddResourcePermissions -> addResourcePermissions: Probability = 1.00, Count = 1
AddResourcePermissionsRequest -> AddResourcePermissionsRequest: Probability = 1.00, Count = 1
Invoke<AddResourcePermissionsResponse> -> executeAddResourcePermissions: Probability = 1.00, Count = 1
DisassociateTrialComponentResponse -> DisassociateTrialComponentResult: Probability = 1.00, Count = 1
DisassociateTrialComponent -> disassociateTrialComponent: Probability = 1.00, Count = 1
DisassociateTrialComponentRequest -> DisassociateTrialComponentRequest: Probability = 1.00, Count = 1
Invoke<DisassociateTrialComponentResponse> -> executeDisassociateTrialComponent: Probability = 1.00, Count = 1
RemoveCategory -> removeCategory: Probability = 1.00, Count = 1
PropertyIDMap.PID_CATEGORY -> PropertyIDMap.PID_CATEGORY: Probability = 1.00, Count = 1
PutConfigurationSetSendingOptionsResponse -> PutConfigurationSetSendingOptionsResult: Probability = 1.00, Count = 1
PutConfigurationSetSendingOptions -> putConfigurationSetSendingOptions: Probability = 1.00, Count = 1
PutConfigurationSetSendingOptionsRequest -> PutConfigurationSetSendingOptionsRequest: Probability = 1.00, Count = 1
Invoke<PutConfigurationSetSendingOptionsResponse> -> executePutConfigurationSetSendingOptions: Probability = 1.00, Count = 1
DisableEbsEncryptionByDefaultResponse -> DisableEbsEncryptionByDefaultResult: Probability = 1.00, Count = 1
DisableEbsEncryptionByDefault -> disableEbsEncryptionByDefault: Probability = 1.00, Count = 1
DisableEbsEncryptionByDefaultRequest -> DisableEbsEncryptionByDefaultRequest: Probability = 1.00, Count = 1
Invoke<DisableEbsEncryptionByDefaultResponse> -> executeDisableEbsEncryptionByDefault: Probability = 1.00, Count = 1
DeprecateDomain -> deprecateDomain: Probability = 1.00, Count = 1
DeprecateDomainRequest -> DeprecateDomainRequest: Probability = 1.00, Count = 1
DeprecateDomainResponseUnmarshaller.Instance -> executeDeprecateDomain: Probability = 1.00, Count = 1
GetSegmentExportJobsResponse -> GetSegmentExportJobsResult: Probability = 1.00, Count = 1
GetSegmentExportJobs -> getSegmentExportJobs: Probability = 1.00, Count = 1
GetSegmentExportJobsRequest -> GetSegmentExportJobsRequest: Probability = 1.00, Count = 1
Invoke<GetSegmentExportJobsResponse> -> executeGetSegmentExportJobs: Probability = 1.00, Count = 1
GetEndOffset -> getEndOffset: Probability = 1.00, Count = 1
Atn.ruleToStartState[ruleIndex].stateNumber, -> .ruleToStartState[ruleIndex].stateNumber,: Probability = 1.00, Count = 1
GetEntryFile -> getEntryFile: Probability = 1.00, Count = 1
FileTreeIterator.FileEntry -> FileEntry: Probability = 1.00, Count = 1
.GetFile -> .getFile: Probability = 1.00, Count = 1
SetEnabled -> setEnabled: Probability = 1.00, Count = 1
UpdatePushTemplateResponse -> UpdatePushTemplateResult: Probability = 1.00, Count = 1
UpdatePushTemplate -> updatePushTemplate: Probability = 1.00, Count = 1
UpdatePushTemplateRequest -> UpdatePushTemplateRequest: Probability = 1.00, Count = 1
Invoke<UpdatePushTemplateResponse> -> executeUpdatePushTemplate: Probability = 1.00, Count = 1
"SimpleFSLock@" -> +: Probability = 0.60, Count = 3
"SimpleFSLock@" -> ",creationTime=": Probability = 0.20, Count = 1
"SimpleFSLock@" -> creationTime: Probability = 0.20, Count = 1
lockFile -> ": Probability = 1.00, Count = 2
GetStageResponse -> GetStageResult: Probability = 1.00, Count = 1
GetStage -> getStage: Probability = 1.00, Count = 1
GetStageRequest -> GetStageRequest: Probability = 1.00, Count = 1
Invoke<GetStageResponse> -> executeGetStage: Probability = 1.00, Count = 1
nArgs -> nArgs: Probability = 0.83, Count = 5
nArgs -> 30: Probability = 0.17, Count = 1
BoolEval.FALSE,srcRowIndex, -> BoolEval.FALSE,srcRowIndex,: Probability = 1.00, Count = 2
IEnumerator<ThreadState> -> Iterator<ThreadState>: Probability = 1.00, Count = 1
AllActiveThreadStates -> allActiveThreadStates: Probability = 1.00, Count = 1
GetPerThreadsIterator -> getPerThreadsIterator: Probability = 0.50, Count = 1
GetPerThreadsIterator -> perThreadPool.getActiveThreadStateCount: Probability = 0.50, Count = 1
EnglishMinimalStemFilterFactory -> EnglishMinimalStemFilterFactory: Probability = 1.00, Count = 1
linkTable.GetNameRecord -> linkTable.getNameRecord: Probability = 1.00, Count = 1
PrintQueries -> printQueries: Probability = 1.00, Count = 1
SkipWaitTimeForInstanceTerminationResponse -> SkipWaitTimeForInstanceTerminationResult: Probability = 1.00, Count = 1
SkipWaitTimeForInstanceTermination -> skipWaitTimeForInstanceTermination: Probability = 1.00, Count = 1
SkipWaitTimeForInstanceTerminationRequest -> SkipWaitTimeForInstanceTerminationRequest: Probability = 1.00, Count = 1
Invoke<SkipWaitTimeForInstanceTerminationResponse> -> executeSkipWaitTimeForInstanceTermination: Probability = 1.00, Count = 1
DrawRoundRect -> drawRoundRect: Probability = 1.00, Count = 1
"DrawRoundRect -> POILogger.WARN,"drawRoundRect: Probability = 1.00, Count = 1
EdgeNGramFilterFactory -> EdgeNGramFilterFactory: Probability = 1.00, Count = 1
GetApplicationRevisionResponse -> GetApplicationRevisionResult: Probability = 1.00, Count = 1
GetApplicationRevision -> getApplicationRevision: Probability = 1.00, Count = 1
GetApplicationRevisionRequest -> GetApplicationRevisionRequest: Probability = 1.00, Count = 1
Invoke<GetApplicationRevisionResponse> -> executeGetApplicationRevision: Probability = 1.00, Count = 1
delta, -> delta,: Probability = 1.00, Count = 2
ICollection<PathFilter> -> Collection<PathFilter>: Probability = 1.00, Count = 1
paths.IsEmpty -> paths.isEmpty: Probability = 1.00, Count = 2
.atLeastOnePathIsRequired -> .atLeastOnePathIsRequired: Probability = 1.00, Count = 3
PathFilter[] -> PathFilter[]: Probability = 1.00, Count = 3
PathFilter[paths.Count] -> PathFilter[paths.size: Probability = 1.00, Count = 2
java.util.ArrayList<E>.ArrayListIterator -> ArrayListIterator: Probability = 1.00, Count = 1
IsClean -> isClean: Probability = 1.00, Count = 1
clean -> clean: Probability = 1.00, Count = 1
StartsWith -> startsWith: Probability = 0.67, Count = 4
StartsWith -> ref,: Probability = 0.33, Count = 2
SliceEquals -> Arrays.equals: Probability = 1.00, Count = 2
UpdateStackInstancesResponse -> UpdateStackInstancesResult: Probability = 1.00, Count = 1
UpdateStackInstances -> updateStackInstances: Probability = 1.00, Count = 1
UpdateStackInstancesRequest -> UpdateStackInstancesRequest: Probability = 1.00, Count = 1
Invoke<UpdateStackInstancesResponse> -> executeUpdateStackInstances: Probability = 1.00, Count = 1
_re.GetInnerValueEval -> _re.getInnerValueEval: Probability = 1.00, Count = 1
GetApiMappingsResponse -> GetApiMappingsResult: Probability = 1.00, Count = 1
GetApiMappings -> getApiMappings: Probability = 1.00, Count = 1
GetApiMappingsRequest -> GetApiMappingsRequest: Probability = 1.00, Count = 1
Invoke<GetApiMappingsResponse> -> executeGetApiMappings: Probability = 1.00, Count = 1
_serverCertificateId -> setServerCertificateId: Probability = 1.00, Count = 1
serverCertificateId -> serverCertificateId: Probability = 1.00, Count = 1
ListLedgersResponse -> ListLedgersResult: Probability = 1.00, Count = 1
ListLedgers -> listLedgers: Probability = 1.00, Count = 1
ListLedgersRequest -> ListLedgersRequest: Probability = 1.00, Count = 1
Invoke<ListLedgersResponse> -> executeListLedgers: Probability = 1.00, Count = 1
UnknownFormatConversionException -> UnknownFormatConversionException: Probability = 1.00, Count = 1
isFirstLine -> isFirstLine: Probability = 1.00, Count = 2
spare.CopyChars -> spare.copyChars: Probability = 1.00, Count = 4
hasPayloads -> hasPayloads: Probability = 1.00, Count = 4
GetRemote -> getRemote: Probability = 1.00, Count = 1
DefaultUDFFinder -> DefaultUDFFinder: Probability = 1.00, Count = 1
nFuncs -> functionNames,: Probability = 0.10, Count = 1
nFuncs -> FreeRefFunction[]: Probability = 0.10, Count = 1
nFuncs -> functionImpls: Probability = 0.10, Count = 1
nFuncs -> nFuncs: Probability = 0.30, Count = 3
nFuncs -> functionNames.length: Probability = 0.10, Count = 1
nFuncs -> functionImpls.length: Probability = 0.20, Count = 2
nFuncs -> "Mismatch: Probability = 0.10, Count = 1
Dictionary<String, -> implementations": Probability = 0.50, Count = 1
Dictionary<String, -> FreeRefFunction>: Probability = 0.50, Count = 1
DrawOval -> drawOval: Probability = 1.00, Count = 1
shape.LineWidth -> shape.setLineWidth: Probability = 1.00, Count = 3
FontUnderline -> FontUnderline: Probability = 1.00, Count = 1
ListExportsResponse -> ListExportsResult: Probability = 1.00, Count = 1
ListExports -> listExports: Probability = 1.00, Count = 1
ListExportsRequest -> ListExportsRequest: Probability = 1.00, Count = 1
Invoke<ListExportsResponse> -> executeListExports: Probability = 1.00, Count = 1
m_buf -> buf: Probability = 1.00, Count = 1
StopTextTranslationJobResponse -> StopTextTranslationJobResult: Probability = 1.00, Count = 1
StopTextTranslationJob -> stopTextTranslationJob: Probability = 1.00, Count = 1
StopTextTranslationJobRequest -> StopTextTranslationJobRequest: Probability = 1.00, Count = 1
Invoke<StopTextTranslationJobResponse> -> executeStopTextTranslationJob: Probability = 1.00, Count = 1
lexer.Action -> lexer.action: Probability = 1.00, Count = 1
TestInvokeAuthorizerResponse -> TestInvokeAuthorizerResult: Probability = 1.00, Count = 1
TestInvokeAuthorizer -> testInvokeAuthorizer: Probability = 1.00, Count = 1
TestInvokeAuthorizerRequest -> TestInvokeAuthorizerRequest: Probability = 1.00, Count = 1
Invoke<TestInvokeAuthorizerResponse> -> executeTestInvokeAuthorizer: Probability = 1.00, Count = 1
DescribeTableReplicaAutoScalingResponse -> DescribeTableReplicaAutoScalingResult: Probability = 1.00, Count = 1
DescribeTableReplicaAutoScaling -> describeTableReplicaAutoScaling: Probability = 1.00, Count = 1
DescribeTableReplicaAutoScalingRequest -> DescribeTableReplicaAutoScalingRequest: Probability = 1.00, Count = 1
Invoke<DescribeTableReplicaAutoScalingResponse> -> executeDescribeTableReplicaAutoScaling: Probability = 1.00, Count = 1
_rc4.Xorshort -> readShort: Probability = 0.50, Count = 1
_rc4.Xorshort -> LittleEndian.getShort: Probability = 0.50, Count = 1
groupCount -> groupCount: Probability = 1.00, Count = 1
groupCountImpl -> groupCountImpl: Probability = 1.00, Count = 1
DeleteHITResponse -> DeleteHITResult: Probability = 1.00, Count = 1
DeleteHIT -> deleteHIT: Probability = 1.00, Count = 1
DeleteHITRequest -> DeleteHITRequest: Probability = 1.00, Count = 1
Invoke<DeleteHITResponse> -> executeDeleteHIT: Probability = 1.00, Count = 1
CreateFormulaListConstraint -> createFormulaListConstraint: Probability = 1.00, Count = 2
listFormula -> listFormula: Probability = 1.00, Count = 3
listFormula, -> listFormula,: Probability = 1.00, Count = 1
UnbufferedCharStream -> UnbufferedCharStream: Probability = 0.67, Count = 2
UnbufferedCharStream -> Reader: Probability = 0.33, Count = 1
"LimitTokenCountAnalyzer -> "LimitTokenCountAnalyzer: Probability = 1.00, Count = 1
@delegate.ToString -> delegate.toString: Probability = 1.00, Count = 1
consumeAllTokens=" -> consumeAllTokens=": Probability = 1.00, Count = 1
CreateRecommenderConfigurationResponse -> CreateRecommenderConfigurationResult: Probability = 1.00, Count = 1
CreateRecommenderConfiguration -> createRecommenderConfiguration: Probability = 1.00, Count = 1
CreateRecommenderConfigurationRequest -> CreateRecommenderConfigurationRequest: Probability = 1.00, Count = 1
Invoke<CreateRecommenderConfigurationResponse> -> executeCreateRecommenderConfiguration: Probability = 1.00, Count = 1
GetNamespaceListRequest -> GetNamespaceListRequest: Probability = 1.00, Count = 1
"GetNamespaceList", -> "GetNamespaceList",: Probability = 1.00, Count = 1
CreateDefaultVpcResponse -> CreateDefaultVpcResult: Probability = 1.00, Count = 1
CreateDefaultVpc -> createDefaultVpc: Probability = 1.00, Count = 1
CreateDefaultVpcRequest -> CreateDefaultVpcRequest: Probability = 1.00, Count = 1
Invoke<CreateDefaultVpcResponse> -> executeCreateDefaultVpc: Probability = 1.00, Count = 1
CreateTemplateResponse -> CreateTemplateResult: Probability = 1.00, Count = 1
CreateTemplate -> createTemplate: Probability = 1.00, Count = 1
CreateTemplateRequest -> CreateTemplateRequest: Probability = 1.00, Count = 1
Invoke<CreateTemplateResponse> -> executeCreateTemplate: Probability = 1.00, Count = 1
ReflogReader -> ReflogReader: Probability = 0.50, Count = 1
ReflogReader -> repo.getReflogReader: Probability = 0.50, Count = 1
_sheetGroupsByBookSheet -> _sheetGroupsByBookSheet: Probability = 1.00, Count = 1
this.m_ctx -> this.ctx: Probability = 1.00, Count = 1
this.m_maxLevels -> this.maxLevels: Probability = 1.00, Count = 1
ListObjectParentsResponse -> ListObjectParentsResult: Probability = 1.00, Count = 1
ListObjectParents -> listObjectParents: Probability = 1.00, Count = 1
ListObjectParentsRequest -> ListObjectParentsRequest: Probability = 1.00, Count = 1
Invoke<ListObjectParentsResponse> -> executeListObjectParents: Probability = 1.00, Count = 1
PPMT -> ppmt: Probability = 1.00, Count = 3
Header -> Header: Probability = 0.33, Count = 1
Header -> InputStream: Probability = 0.33, Count = 1
Header -> is: Probability = 0.33, Count = 1
DescribeSpotInstanceRequestsResponse -> DescribeSpotInstanceRequestsResult: Probability = 1.00, Count = 2
DescribeSpotInstanceRequests -> describeSpotInstanceRequests: Probability = 1.00, Count = 3
DescribeSpotInstanceRequestsRequest -> DescribeSpotInstanceRequestsRequest: Probability = 1.00, Count = 2
SetTransition -> SetTransition: Probability = 1.00, Count = 4
IntervalSet.Of -> IntervalSet.of: Probability = 1.00, Count = 1
TokenConstants.InvalidType -> Token.INVALID_TYPE: Probability = 1.00, Count = 3
this.set -> this.set: Probability = 1.00, Count = 1
cbuf, -> cbuf,: Probability = 1.00, Count = 8
"off -> "off: Probability = 1.00, Count = 2
retLen -> resultBuffer.length: Probability = 0.15, Count = 2
retLen -> retLen: Probability = 0.54, Count = 7
retLen -> outputFromResultBuffer: Probability = 0.15, Count = 2
retLen -> readAndNormalizeFromInput: Probability = 0.08, Count = 1
retLen -> readInputToBuffer: Probability = 0.08, Count = 1
SetBaselineTfFactors -> setBaselineTfFactors: Probability = 1.00, Count = 1
DatasetSplitter -> DatasetSplitter: Probability = 1.00, Count = 1
testRatio, -> testRatio,: Probability = 1.00, Count = 1
crossValidationRatio -> crossValidationRatio: Probability = 1.00, Count = 2
this._crossValidationRatio -> this.crossValidationRatio: Probability = 1.00, Count = 1
this._testRatio -> this.testRatio: Probability = 1.00, Count = 1
testRatio -> testRatio: Probability = 1.00, Count = 1
ListBuildsResponse -> ListBuildsResult: Probability = 1.00, Count = 1
ListBuilds -> listBuilds: Probability = 1.00, Count = 1
ListBuildsRequest -> ListBuildsRequest: Probability = 1.00, Count = 1
Invoke<ListBuildsResponse> -> executeListBuilds: Probability = 1.00, Count = 1
GetStartLine -> getStartLine: Probability = 1.00, Count = 1
startLine -> startLine: Probability = 1.00, Count = 1
rtFirst -> rtFirst: Probability = 1.00, Count = 1
rtLast -> rtLast: Probability = 1.00, Count = 1
RestoreDBClusterFromS3Response -> DBCluster: Probability = 1.00, Count = 1
RestoreDBClusterFromS3 -> restoreDBClusterFromS3: Probability = 1.00, Count = 1
RestoreDBClusterFromS3Request -> RestoreDBClusterFromS3Request: Probability = 1.00, Count = 1
Invoke<RestoreDBClusterFromS3Response> -> executeRestoreDBClusterFromS3: Probability = 1.00, Count = 1
ThrowingPrintWriter -> ThrowingPrintWriter: Probability = 1.00, Count = 1
LF -> PrivilegedAction<String>: Probability = 1.00, Count = 1
AccessController.DoPrivileged -> ->: Probability = 1.00, Count = 1
_PrivilegedAction_69 -> SystemReader.getInstance: Probability = 0.50, Count = 1
_PrivilegedAction_69 -> .getProperty: Probability = 0.50, Count = 1
DescribeResourceResponse -> DescribeResourceResult: Probability = 1.00, Count = 1
DescribeResource -> describeResource: Probability = 1.00, Count = 1
DescribeResourceRequest -> DescribeResourceRequest: Probability = 1.00, Count = 1
Invoke<DescribeResourceResponse> -> executeDescribeResource: Probability = 1.00, Count = 1
getFlags -> getFlags: Probability = 1.00, Count = 2
GetAccountSettingsResponse -> GetAccountSettingsResult: Probability = 1.00, Count = 1
GetAccountSettings -> getAccountSettings: Probability = 1.00, Count = 1
GetAccountSettingsRequest -> GetAccountSettingsRequest: Probability = 1.00, Count = 1
Invoke<GetAccountSettingsResponse> -> executeGetAccountSettings: Probability = 1.00, Count = 1
UpdateClusterSettingsResponse -> UpdateClusterSettingsResult: Probability = 1.00, Count = 1
UpdateClusterSettings -> updateClusterSettings: Probability = 1.00, Count = 1
UpdateClusterSettingsRequest -> UpdateClusterSettingsRequest: Probability = 1.00, Count = 1
Invoke<UpdateClusterSettingsResponse> -> executeUpdateClusterSettings: Probability = 1.00, Count = 1
GetRelationalDatabaseSnapshotsResponse -> GetRelationalDatabaseSnapshotsResult: Probability = 1.00, Count = 1
GetRelationalDatabaseSnapshots -> getRelationalDatabaseSnapshots: Probability = 1.00, Count = 1
GetRelationalDatabaseSnapshotsRequest -> GetRelationalDatabaseSnapshotsRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseSnapshotsResponse> -> executeGetRelationalDatabaseSnapshots: Probability = 1.00, Count = 1
DescribeProcessingJobResponse -> DescribeProcessingJobResult: Probability = 1.00, Count = 1
DescribeProcessingJob -> describeProcessingJob: Probability = 1.00, Count = 1
DescribeProcessingJobRequest -> DescribeProcessingJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeProcessingJobResponse> -> executeDescribeProcessingJob: Probability = 1.00, Count = 1
UnbindInstance2VpcRequest -> UnbindInstance2VpcRequest: Probability = 1.00, Count = 1
"UnbindInstance2Vpc", -> "UnbindInstance2Vpc",: Probability = 1.00, Count = 1
ByteArrayBackedDataSource -> ByteArrayBackedDataSource: Probability = 1.00, Count = 1
this.buffer -> this.buffer: Probability = 1.00, Count = 2
GetSchemes -> getSchemes: Probability = 1.00, Count = 1
Sharpen.Collections.EmptySet<string> -> Collections.emptySet: Probability = 1.00, Count = 1
termOrd -> termOrd: Probability = 1.00, Count = 5
SetTerm -> setTerm: Probability = 1.00, Count = 5
queryConfigHandler -> queryConfigHandler: Probability = 1.00, Count = 7
UpdateDocumentationPartResponse -> UpdateDocumentationPartResult: Probability = 1.00, Count = 1
UpdateDocumentationPart -> updateDocumentationPart: Probability = 1.00, Count = 1
UpdateDocumentationPartRequest -> UpdateDocumentationPartRequest: Probability = 1.00, Count = 1
Invoke<UpdateDocumentationPartResponse> -> executeUpdateDocumentationPart: Probability = 1.00, Count = 1
DeleteDBClusterResponse -> DBCluster: Probability = 1.00, Count = 1
DeleteDBCluster -> deleteDBCluster: Probability = 1.00, Count = 1
DeleteDBClusterRequest -> DeleteDBClusterRequest: Probability = 1.00, Count = 1
Invoke<DeleteDBClusterResponse> -> executeDeleteDBCluster: Probability = 1.00, Count = 1
android.graphics.drawable.Drawable -> Drawable: Probability = 1.00, Count = 2
getProgressDrawable -> getProgressDrawable: Probability = 1.00, Count = 1
mProgressDrawable -> mProgressDrawable: Probability = 1.00, Count = 3
ConfigureHealthCheckRequest -> ConfigureHealthCheckRequest: Probability = 1.00, Count = 2
HealthCheck -> HealthCheck: Probability = 1.00, Count = 1
healthCheck -> healthCheck: Probability = 1.00, Count = 2
_healthCheck -> setHealthCheck: Probability = 1.00, Count = 1
old.cells -> old.cells: Probability = 1.00, Count = 1
IncrementShapeCount -> incrementShapeCount: Probability = 1.00, Count = 1
this.field_1_numShapes++ -> this.field_1_numShapes++: Probability = 1.00, Count = 1
EnableEbsEncryptionByDefaultResponse -> EnableEbsEncryptionByDefaultResult: Probability = 1.00, Count = 1
EnableEbsEncryptionByDefault -> enableEbsEncryptionByDefault: Probability = 1.00, Count = 1
EnableEbsEncryptionByDefaultRequest -> EnableEbsEncryptionByDefaultRequest: Probability = 1.00, Count = 1
Invoke<EnableEbsEncryptionByDefaultResponse> -> executeEnableEbsEncryptionByDefault: Probability = 1.00, Count = 1
SetValueNoCopy -> setValueNoCopy: Probability = 1.00, Count = 1
DeleteIntegrationResponseResponse -> DeleteIntegrationResponseResult: Probability = 1.00, Count = 1
DeleteIntegrationResponse -> deleteIntegrationResponse: Probability = 0.50, Count = 1
DeleteIntegrationResponse -> DeleteIntegrationResult: Probability = 0.50, Count = 1
DeleteIntegrationResponseRequest -> DeleteIntegrationResponseRequest: Probability = 1.00, Count = 1
Invoke<DeleteIntegrationResponseResponse> -> executeDeleteIntegrationResponse: Probability = 1.00, Count = 1
cs -> cs: Probability = 0.50, Count = 2
cs -> o: Probability = 0.50, Count = 2
map.ContainsKey -> map.containsKey: Probability = 0.80, Count = 4
map.ContainsKey -> o: Probability = 0.20, Count = 1
this.m_message.GetLocalizedMessage -> this.message.getLocalizedMessage: Probability = 1.00, Count = 1
CreateTransitGatewayMulticastDomainResponse -> CreateTransitGatewayMulticastDomainResult: Probability = 1.00, Count = 1
CreateTransitGatewayMulticastDomain -> createTransitGatewayMulticastDomain: Probability = 1.00, Count = 1
CreateTransitGatewayMulticastDomainRequest -> CreateTransitGatewayMulticastDomainRequest: Probability = 1.00, Count = 1
Invoke<CreateTransitGatewayMulticastDomainResponse> -> executeCreateTransitGatewayMulticastDomain: Probability = 1.00, Count = 1
DisassociateDomainResponse -> DisassociateDomainResult: Probability = 1.00, Count = 1
DisassociateDomain -> disassociateDomain: Probability = 1.00, Count = 1
DisassociateDomainRequest -> DisassociateDomainRequest: Probability = 1.00, Count = 1
Invoke<DisassociateDomainResponse> -> executeDisassociateDomain: Probability = 1.00, Count = 1
CellWalk -> CellWalk: Probability = 1.00, Count = 1
this.sheet -> this.sheet: Probability = 1.00, Count = 1
this.range -> this.range: Probability = 1.00, Count = 1
SendMessageBatchResponse -> SendMessageBatchResult: Probability = 1.00, Count = 2
SendMessageBatch -> sendMessageBatch: Probability = 1.00, Count = 3
GetImportJobsResponse -> GetImportJobsResult: Probability = 1.00, Count = 1
GetImportJobs -> getImportJobs: Probability = 1.00, Count = 1
GetImportJobsRequest -> GetImportJobsRequest: Probability = 1.00, Count = 1
Invoke<GetImportJobsResponse> -> executeGetImportJobs: Probability = 1.00, Count = 1
DocScore -> docScore: Probability = 1.00, Count = 1
docId, -> docId,: Probability = 1.00, Count = 3
numPayloadsSeen, -> numPayloadsSeen,: Probability = 1.00, Count = 3
payloadScore -> payloadScore: Probability = 1.00, Count = 2
numPayloadsSeen -> numPayloadsSeen: Probability = 1.00, Count = 2
CreateRelationalDatabaseResponse -> CreateRelationalDatabaseResult: Probability = 1.00, Count = 1
CreateRelationalDatabase -> createRelationalDatabase: Probability = 1.00, Count = 1
CreateRelationalDatabaseRequest -> CreateRelationalDatabaseRequest: Probability = 1.00, Count = 1
Invoke<CreateRelationalDatabaseResponse> -> executeCreateRelationalDatabase: Probability = 1.00, Count = 1
Arc<T> -> Arc<T>: Probability = 0.67, Count = 2
Arc<T> -> other.label: Probability = 0.33, Count = 1
ContinueUpdateRollbackResponse -> ContinueUpdateRollbackResult: Probability = 1.00, Count = 1
ContinueUpdateRollback -> continueUpdateRollback: Probability = 1.00, Count = 1
ContinueUpdateRollbackRequest -> ContinueUpdateRollbackRequest: Probability = 1.00, Count = 1
Invoke<ContinueUpdateRollbackResponse> -> executeContinueUpdateRollback: Probability = 1.00, Count = 1
ListDataSourcesResponse -> ListDataSourcesResult: Probability = 1.00, Count = 1
ListDataSources -> listDataSources: Probability = 1.00, Count = 1
ListDataSourcesRequest -> ListDataSourcesRequest: Probability = 1.00, Count = 1
Invoke<ListDataSourcesResponse> -> executeListDataSources: Probability = 1.00, Count = 1
lexer.Channel -> lexer.setChannel: Probability = 1.00, Count = 1
IntStreamConstants.EOF -> IntStream.EOF: Probability = 0.75, Count = 3
IntStreamConstants.EOF -> getInterpreter: Probability = 0.25, Count = 1
data[index] -> data[index]: Probability = 1.00, Count = 1
RefWriter -> RefWriter: Probability = 1.00, Count = 3
RefList<Ref> -> RefList<Ref>: Probability = 1.00, Count = 1
this.refs -> this.refs: Probability = 0.60, Count = 3
this.refs -> elsethis.refs: Probability = 0.20, Count = 1
this.refs -> RefComparator.sort: Probability = 0.20, Count = 1
refs.AsList -> refs.asList: Probability = 1.00, Count = 1
1023L -> 1023L: Probability = 1.00, Count = 2
NGit.Api.SubmoduleUpdateCommand -> SubmoduleUpdateCommand: Probability = 1.00, Count = 1
DescribeDatasetGroupResponse -> DescribeDatasetGroupResult: Probability = 1.00, Count = 1
DescribeDatasetGroup -> describeDatasetGroup: Probability = 1.00, Count = 1
DescribeDatasetGroupRequest -> DescribeDatasetGroupRequest: Probability = 1.00, Count = 1
Invoke<DescribeDatasetGroupResponse> -> executeDescribeDatasetGroup: Probability = 1.00, Count = 1
ListGameServerGroupsResponse -> ListGameServerGroupsResult: Probability = 1.00, Count = 1
ListGameServerGroups -> listGameServerGroups: Probability = 1.00, Count = 1
ListGameServerGroupsRequest -> ListGameServerGroupsRequest: Probability = 1.00, Count = 1
Invoke<ListGameServerGroupsResponse> -> executeListGameServerGroups: Probability = 1.00, Count = 1
OrCreateLinkTable.GetSpecificBuiltinRecord -> getOrCreateLinkTable: Probability = 0.50, Count = 1
OrCreateLinkTable.GetSpecificBuiltinRecord -> .getSpecificBuiltinRecord: Probability = 0.50, Count = 1
_in.ReadUByte -> _in.readUByte: Probability = 0.57, Count = 13
_in.ReadUByte -> b4: Probability = 0.09, Count = 2
_in.ReadUByte -> b5: Probability = 0.09, Count = 2
_in.ReadUByte -> b6: Probability = 0.09, Count = 2
_in.ReadUByte -> b7: Probability = 0.09, Count = 2
_in.ReadUByte -> ch2: Probability = 0.09, Count = 2
b2 -> b2: Probability = 1.00, Count = 4
b3 -> b3: Probability = 1.00, Count = 4
ae -> ae: Probability = 1.00, Count = 5
ae.IsColumn -> ae.isColumn: Probability = 1.00, Count = 2
CreateColumnVector -> createColumnVector: Probability = 1.00, Count = 2
ae.IsRow -> ae.isRow: Probability = 1.00, Count = 2
RemoveNoteCommand -> RemoveNoteCommand: Probability = 1.00, Count = 2
NotesRemove -> notesRemove: Probability = 1.00, Count = 1
_thedata.Length -> thedata.length: Probability = 0.50, Count = 4
_thedata.Length -> offset+8,: Probability = 0.25, Count = 2
_thedata.Length -> offset+8+thedata.length: Probability = 0.25, Count = 2
_thedata, -> thedata,: Probability = 0.80, Count = 4
_thedata, -> b,start,thedata,0,length: Probability = 0.20, Count = 1
stopWordFiles, -> stopWordFiles,: Probability = 1.00, Count = 2
'words' -> 'words': Probability = 1.00, Count = 2
can -> can: Probability = 1.00, Count = 2
CharFilter -> CharFilter: Probability = 0.60, Count = 3
CharFilter -> input: Probability = 0.40, Count = 2
AssociateVpcCidrBlockResponse -> AssociateVpcCidrBlockResult: Probability = 1.00, Count = 1
AssociateVpcCidrBlock -> associateVpcCidrBlock: Probability = 1.00, Count = 1
AssociateVpcCidrBlockRequest -> AssociateVpcCidrBlockRequest: Probability = 1.00, Count = 1
Invoke<AssociateVpcCidrBlockResponse> -> executeAssociateVpcCidrBlock: Probability = 1.00, Count = 1
GetJavaDate -> getJavaDate: Probability = 1.00, Count = 2
use1904windowing, -> use1904windowing,: Probability = 0.55, Count = 6
use1904windowing, -> tz,: Probability = 0.27, Count = 3
use1904windowing, -> null,: Probability = 0.18, Count = 2
TimeZone -> TimeZone: Probability = 1.00, Count = 2
roundSeconds -> roundSeconds: Probability = 0.29, Count = 2
roundSeconds -> calendar: Probability = 0.29, Count = 2
roundSeconds -> null: Probability = 0.29, Count = 2
roundSeconds -> calendar.getTime: Probability = 0.14, Count = 1
GetJavaCalendar -> getJavaCalendar: Probability = 0.60, Count = 3
GetJavaCalendar -> getJavaDate: Probability = 0.40, Count = 2
AttachTypedLinkResponse -> AttachTypedLinkResult: Probability = 1.00, Count = 1
AttachTypedLink -> attachTypedLink: Probability = 1.00, Count = 1
AttachTypedLinkRequest -> AttachTypedLinkRequest: Probability = 1.00, Count = 1
Invoke<AttachTypedLinkResponse> -> executeAttachTypedLink: Probability = 1.00, Count = 1
GetError -> getError: Probability = 1.00, Count = 1
CellType.Error, -> CellType.ERROR,: Probability = 1.00, Count = 1
0.0, -> 0.0,: Probability = 1.00, Count = 1
GetHeaderValue -> getHeaderValue: Probability = 1.00, Count = 1
headerValue -> headerValue: Probability = 1.00, Count = 1
DescribeFindingsResponse -> DescribeFindingsResult: Probability = 1.00, Count = 1
DescribeFindings -> describeFindings: Probability = 1.00, Count = 1
DescribeFindingsRequest -> DescribeFindingsRequest: Probability = 1.00, Count = 1
Invoke<DescribeFindingsResponse> -> executeDescribeFindings: Probability = 1.00, Count = 1
GetSdkTypeResponse -> GetSdkTypeResult: Probability = 1.00, Count = 1
GetSdkType -> getSdkType: Probability = 1.00, Count = 1
GetSdkTypeRequest -> GetSdkTypeRequest: Probability = 1.00, Count = 1
Invoke<GetSdkTypeResponse> -> executeGetSdkType: Probability = 1.00, Count = 1
PutLifecycleConfigurationResponse -> PutLifecycleConfigurationResult: Probability = 1.00, Count = 1
PutLifecycleConfiguration -> putLifecycleConfiguration: Probability = 1.00, Count = 1
PutLifecycleConfigurationRequest -> PutLifecycleConfigurationRequest: Probability = 1.00, Count = 1
Invoke<PutLifecycleConfigurationResponse> -> executePutLifecycleConfiguration: Probability = 1.00, Count = 1
CommitBuilder -> CommitBuilder: Probability = 1.00, Count = 1
EMPTY_OBJECTID_LIST -> EMPTY_OBJECTID_LIST: Probability = 1.00, Count = 1
Constants.CHARSET -> UTF_8: Probability = 1.00, Count = 2
_lastCell -> _lastCell: Probability = 1.00, Count = 1
UpHeap -> upHeap: Probability = 1.00, Count = 1
ListTagCommand -> ListTagCommand: Probability = 1.00, Count = 2
TagList -> tagList: Probability = 1.00, Count = 1
DescribeLoadBalancerPoliciesResponse -> DescribeLoadBalancerPoliciesResult: Probability = 1.00, Count = 2
DescribeLoadBalancerPolicies -> describeLoadBalancerPolicies: Probability = 1.00, Count = 3
DescribeLoadBalancerPoliciesRequest -> DescribeLoadBalancerPoliciesRequest: Probability = 1.00, Count = 2
LikePhotoRequest -> LikePhotoRequest: Probability = 1.00, Count = 1
"LikePhoto", -> "LikePhoto",: Probability = 1.00, Count = 1
pollLast -> pollLast: Probability = 1.00, Count = 1
LogoutUserResponse -> LogoutUserResult: Probability = 1.00, Count = 1
LogoutUser -> logoutUser: Probability = 1.00, Count = 1
LogoutUserRequest -> LogoutUserRequest: Probability = 1.00, Count = 1
Invoke<LogoutUserResponse> -> executeLogoutUser: Probability = 1.00, Count = 1
char.IsLetter -> Character.isLetter: Probability = 1.00, Count = 1
ListResolverEndpointIpAddressesResponse -> ListResolverEndpointIpAddressesResult: Probability = 1.00, Count = 1
ListResolverEndpointIpAddresses -> listResolverEndpointIpAddresses: Probability = 1.00, Count = 1
ListResolverEndpointIpAddressesRequest -> ListResolverEndpointIpAddressesRequest: Probability = 1.00, Count = 1
Invoke<ListResolverEndpointIpAddressesResponse> -> executeListResolverEndpointIpAddresses: Probability = 1.00, Count = 1
Invoke<ListHealthChecksResponse> -> executeListHealthChecks: Probability = 1.00, Count = 1
GetQualificationScoreResponse -> GetQualificationScoreResult: Probability = 1.00, Count = 1
GetQualificationScore -> getQualificationScore: Probability = 1.00, Count = 1
GetQualificationScoreRequest -> GetQualificationScoreRequest: Probability = 1.00, Count = 1
Invoke<GetQualificationScoreResponse> -> executeGetQualificationScore: Probability = 1.00, Count = 1
ListMeetingsResponse -> ListMeetingsResult: Probability = 1.00, Count = 1
ListMeetings -> listMeetings: Probability = 1.00, Count = 1
ListMeetingsRequest -> ListMeetingsRequest: Probability = 1.00, Count = 1
Invoke<ListMeetingsResponse> -> executeListMeetings: Probability = 1.00, Count = 1
LookupPolicyResponse -> LookupPolicyResult: Probability = 1.00, Count = 1
LookupPolicy -> lookupPolicy: Probability = 1.00, Count = 1
LookupPolicyRequest -> LookupPolicyRequest: Probability = 1.00, Count = 1
Invoke<LookupPolicyResponse> -> executeLookupPolicy: Probability = 1.00, Count = 1
ListAssessmentRunAgentsResponse -> ListAssessmentRunAgentsResult: Probability = 1.00, Count = 1
ListAssessmentRunAgents -> listAssessmentRunAgents: Probability = 1.00, Count = 1
ListAssessmentRunAgentsRequest -> ListAssessmentRunAgentsRequest: Probability = 1.00, Count = 1
Invoke<ListAssessmentRunAgentsResponse> -> executeListAssessmentRunAgents: Probability = 1.00, Count = 1
UpdateEndpointWeightsAndCapacitiesResponse -> UpdateEndpointWeightsAndCapacitiesResult: Probability = 1.00, Count = 1
UpdateEndpointWeightsAndCapacities -> updateEndpointWeightsAndCapacities: Probability = 1.00, Count = 1
UpdateEndpointWeightsAndCapacitiesRequest -> UpdateEndpointWeightsAndCapacitiesRequest: Probability = 1.00, Count = 1
Invoke<UpdateEndpointWeightsAndCapacitiesResponse> -> executeUpdateEndpointWeightsAndCapacities: Probability = 1.00, Count = 1
UpdateCloudFrontOriginAccessIdentityResponse -> UpdateCloudFrontOriginAccessIdentityResult: Probability = 1.00, Count = 1
UpdateCloudFrontOriginAccessIdentity -> updateCloudFrontOriginAccessIdentity: Probability = 1.00, Count = 1
UpdateCloudFrontOriginAccessIdentityRequest -> UpdateCloudFrontOriginAccessIdentityRequest: Probability = 1.00, Count = 1
Invoke<UpdateCloudFrontOriginAccessIdentityResponse> -> executeUpdateCloudFrontOriginAccessIdentity: Probability = 1.00, Count = 1
BatchPutAttributesRequest -> BatchPutAttributesRequest: Probability = 1.00, Count = 2
List<ReplaceableItem> -> java.util.List<ReplaceableItem>: Probability = 1.00, Count = 1
DeleteAnomalyDetectorResponse -> DeleteAnomalyDetectorResult: Probability = 1.00, Count = 1
DeleteAnomalyDetector -> deleteAnomalyDetector: Probability = 1.00, Count = 1
DeleteAnomalyDetectorRequest -> DeleteAnomalyDetectorRequest: Probability = 1.00, Count = 1
Invoke<DeleteAnomalyDetectorResponse> -> executeDeleteAnomalyDetector: Probability = 1.00, Count = 1
DeleteSpotDatafeedSubscriptionResponse -> DeleteSpotDatafeedSubscriptionResult: Probability = 1.00, Count = 2
DeleteSpotDatafeedSubscription -> deleteSpotDatafeedSubscription: Probability = 1.00, Count = 3
DeleteSpotDatafeedSubscriptionRequest -> DeleteSpotDatafeedSubscriptionRequest: Probability = 1.00, Count = 2
GetOldPrefix -> getOldPrefix: Probability = 1.00, Count = 1
this.oldPrefix -> this.oldPrefix: Probability = 1.00, Count = 1
CommonGramsFilterFactory -> CommonGramsFilterFactory: Probability = 1.00, Count = 1
DeleteCorsConfigurationResponse -> DeleteCorsConfigurationResult: Probability = 1.00, Count = 1
DeleteCorsConfiguration -> deleteCorsConfiguration: Probability = 1.00, Count = 1
DeleteCorsConfigurationRequest -> DeleteCorsConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DeleteCorsConfigurationResponse> -> executeDeleteCorsConfiguration: Probability = 1.00, Count = 1
GetMethod -> getMethod: Probability = 1.00, Count = 1
GetMethodRequest -> GetMethodRequest: Probability = 1.00, Count = 1
Invoke<GetMethodResponse> -> executeGetMethod: Probability = 1.00, Count = 1
DeleteTrafficMirrorFilterRuleResponse -> DeleteTrafficMirrorFilterRuleResult: Probability = 1.00, Count = 1
DeleteTrafficMirrorFilterRule -> deleteTrafficMirrorFilterRule: Probability = 1.00, Count = 1
DeleteTrafficMirrorFilterRuleRequest -> DeleteTrafficMirrorFilterRuleRequest: Probability = 1.00, Count = 1
Invoke<DeleteTrafficMirrorFilterRuleResponse> -> executeDeleteTrafficMirrorFilterRule: Probability = 1.00, Count = 1
CreateLabelingJobResponse -> CreateLabelingJobResult: Probability = 1.00, Count = 1
CreateLabelingJob -> createLabelingJob: Probability = 1.00, Count = 1
CreateLabelingJobRequest -> CreateLabelingJobRequest: Probability = 1.00, Count = 1
Invoke<CreateLabelingJobResponse> -> executeCreateLabelingJob: Probability = 1.00, Count = 1
!i.hasNext -> !i.hasNext: Probability = 1.00, Count = 2
o, -> o,: Probability = 1.00, Count = 3
DeleteCustomMetadataResponse -> DeleteCustomMetadataResult: Probability = 1.00, Count = 1
DeleteCustomMetadata -> deleteCustomMetadata: Probability = 1.00, Count = 1
DeleteCustomMetadataRequest -> DeleteCustomMetadataRequest: Probability = 1.00, Count = 1
Invoke<DeleteCustomMetadataResponse> -> executeDeleteCustomMetadata: Probability = 1.00, Count = 1
DescribeNetworkAclsResponse -> DescribeNetworkAclsResult: Probability = 1.00, Count = 2
DescribeNetworkAcls -> describeNetworkAcls: Probability = 1.00, Count = 3
DescribeNetworkAclsRequest -> DescribeNetworkAclsRequest: Probability = 1.00, Count = 2
Invoke<DescribeNetworkAclsResponse> -> executeDescribeNetworkAcls: Probability = 1.00, Count = 1
RECORD]\n" -> RECORD]\n": Probability = 1.00, Count = 6
UnsubscribeRequest -> UnsubscribeRequest: Probability = 1.00, Count = 1
subscriptionArn -> subscriptionArn: Probability = 0.71, Count = 5
subscriptionArn -> ): Probability = 0.29, Count = 2
_subscriptionArn -> setSubscriptionArn: Probability = 1.00, Count = 3
ListRulesPackagesResponse -> ListRulesPackagesResult: Probability = 1.00, Count = 1
ListRulesPackages -> listRulesPackages: Probability = 1.00, Count = 1
ListRulesPackagesRequest -> ListRulesPackagesRequest: Probability = 1.00, Count = 1
Invoke<ListRulesPackagesResponse> -> executeListRulesPackages: Probability = 1.00, Count = 1
DisableMetricsCollectionResponse -> DisableMetricsCollectionResult: Probability = 1.00, Count = 1
DisableMetricsCollection -> disableMetricsCollection: Probability = 1.00, Count = 1
DisableMetricsCollectionRequest -> DisableMetricsCollectionRequest: Probability = 1.00, Count = 1
Invoke<DisableMetricsCollectionResponse> -> executeDisableMetricsCollection: Probability = 1.00, Count = 1
System.Exception -> Throwable: Probability = 1.00, Count = 7
thrown -> thrown: Probability = 0.86, Count = 12
thrown -> SneakyThrow.sneakyThrow: Probability = 0.14, Count = 2
GetConflictList -> getConflictList: Probability = 1.00, Count = 1
conflictList -> conflictList: Probability = 1.00, Count = 1
ListOrganizationAdminAccountsResponse -> ListOrganizationAdminAccountsResult: Probability = 1.00, Count = 1
ListOrganizationAdminAccounts -> listOrganizationAdminAccounts: Probability = 1.00, Count = 1
ListOrganizationAdminAccountsRequest -> ListOrganizationAdminAccountsRequest: Probability = 1.00, Count = 1
Invoke<ListOrganizationAdminAccountsResponse> -> executeListOrganizationAdminAccounts: Probability = 1.00, Count = 1
double.PositiveInfinity -> Double.POSITIVE_INFINITY: Probability = 1.00, Count = 2
RemoveLineCount -> removeLineCount: Probability = 1.00, Count = 1
PropertyIDMap.PID_LINECOUNT -> PropertyIDMap.PID_LINECOUNT: Probability = 1.00, Count = 1
svm -> svm: Probability = 1.00, Count = 3
UnknownRecord -> UnknownRecord: Probability = 1.00, Count = 3
rs.PeekNextSid -> rs.peekNextSid: Probability = 1.00, Count = 6
CreateRepoSyncTaskRequest -> CreateRepoSyncTaskRequest: Probability = 1.00, Count = 1
"CreateRepoSyncTask", -> "CreateRepoSyncTask",: Probability = 1.00, Count = 1
SharedFormula -> SharedFormula: Probability = 0.38, Count = 3
SharedFormula -> Conversion:: Probability = 0.12, Count = 1
SharedFormula -> Coding: Probability = 0.12, Count = 1
SharedFormula -> Error": Probability = 0.12, Count = 1
SharedFormula -> sf: Probability = 0.12, Count = 1
SharedFormula -> sf.convertSharedFormulas: Probability = 0.12, Count = 1
ssVersion -> _columnWrappingMask: Probability = 1.00, Count = 1
_columnWrappingMask -> ssVersion.getLastColumnIndex: Probability = 1.00, Count = 1
ssVersion.LastColumnIndex -> _rowWrappingMask: Probability = 1.00, Count = 1
ssVersion.LastRowIndex -> ssVersion.getLastRowIndex: Probability = 1.00, Count = 1
LexerTypeAction -> LexerTypeAction: Probability = 1.00, Count = 1
java.nio.ReadOnlyShortArrayBuffer -> ReadOnlyShortArrayBuffer: Probability = 1.00, Count = 1
NGit.Api.RenameBranchCommand -> RenameBranchCommand: Probability = 0.50, Count = 1
NGit.Api.RenameBranchCommand -> setNewName: Probability = 0.50, Count = 1
this.newName -> this.newName: Probability = 1.00, Count = 1
SheetBuilder -> SheetBuilder: Probability = 1.00, Count = 2
SetCreateEmptyCells -> setCreateEmptyCells: Probability = 1.00, Count = 1
this.shouldCreateEmptyCells -> this.shouldCreateEmptyCells: Probability = 1.00, Count = 1
serialNumVE, -> serialNumVE,: Probability = 1.00, Count = 2
serialNum -> serialNum: Probability = 1.00, Count = 2
returnType -> returnType: Probability = 0.62, Count = 5
returnType -> returnTypeVE,: Probability = 0.12, Count = 1
returnType -> this.getWeekNo: Probability = 0.12, Count = 1
returnType -> serialNumCalendar,: Probability = 0.12, Count = 1
actualHeader -> actualHeader: Probability = 1.00, Count = 3
CODEC_MAGIC -> CODEC_MAGIC: Probability = 1.00, Count = 2
header=" -> header=": Probability = 1.00, Count = 2
codePoint -> c: Probability = 0.19, Count = 3
codePoint -> case: Probability = 0.25, Count = 4
codePoint -> :s: Probability = 0.25, Count = 4
codePoint -> break: Probability = 0.25, Count = 4
codePoint -> '\t': Probability = 0.06, Count = 1
termUpto -> termUpto: Probability = 0.58, Count = 7
termUpto -> info.terms.get: Probability = 0.17, Count = 2
termUpto -> info.sortedTerms[termUpto],: Probability = 0.17, Count = 2
termUpto -> -termUpto-1: Probability = 0.08, Count = 1
BinarySearch -> binarySearch: Probability = 1.00, Count = 2
br, -> br,: Probability = 1.00, Count = 2
info.terms.Count -> info.terms.size: Probability = 1.00, Count = 4
info.terms, -> -1,: Probability = 1.00, Count = 2
info.sortedTerms, -> info.terms,: Probability = 0.50, Count = 2
info.sortedTerms, -> info.sortedTerms: Probability = 0.50, Count = 2
CreateCacheSecurityGroupResponse -> CacheSecurityGroup: Probability = 1.00, Count = 1
CreateCacheSecurityGroup -> createCacheSecurityGroup: Probability = 1.00, Count = 1
Invoke<CreateCacheSecurityGroupResponse> -> executeCreateCacheSecurityGroup: Probability = 1.00, Count = 1
FetchMomentPhotosRequest -> FetchMomentPhotosRequest: Probability = 1.00, Count = 1
"FetchMomentPhotos", -> "FetchMomentPhotos",: Probability = 1.00, Count = 1
GetRuleIndex -> getRuleIndex: Probability = 1.00, Count = 1
RevokeClientVpnIngressResponse -> RevokeClientVpnIngressResult: Probability = 1.00, Count = 1
RevokeClientVpnIngress -> revokeClientVpnIngress: Probability = 1.00, Count = 1
RevokeClientVpnIngressRequest -> RevokeClientVpnIngressRequest: Probability = 1.00, Count = 1
Invoke<RevokeClientVpnIngressResponse> -> executeRevokeClientVpnIngress: Probability = 1.00, Count = 1
SupportsExecute -> supportsExecute: Probability = 1.00, Count = 1
LexerPushModeAction -> LexerPushModeAction: Probability = 1.00, Count = 1
this.mode -> this.mode: Probability = 1.00, Count = 2
CreateClusterParameterGroupResponse -> ClusterParameterGroup: Probability = 1.00, Count = 1
CreateClusterParameterGroup -> createClusterParameterGroup: Probability = 1.00, Count = 1
CreateClusterParameterGroupRequest -> CreateClusterParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateClusterParameterGroupResponse> -> executeCreateClusterParameterGroup: Probability = 1.00, Count = 1
DistanceSubQueryNotAllowed -> distanceSubQueryNotAllowed: Probability = 1.00, Count = 2
leq -> leq: Probability = 1.00, Count = 6
IDistanceSubQuery -> DistanceSubQuery: Probability = 0.83, Count = 5
IDistanceSubQuery -> dsq: Probability = 0.17, Count = 1
leq.ToString -> leq.toString: Probability = 1.00, Count = 2
DescribeBrokerEngineTypesResponse -> DescribeBrokerEngineTypesResult: Probability = 1.00, Count = 1
DescribeBrokerEngineTypes -> describeBrokerEngineTypes: Probability = 1.00, Count = 1
DescribeBrokerEngineTypesRequest -> DescribeBrokerEngineTypesRequest: Probability = 1.00, Count = 1
Invoke<DescribeBrokerEngineTypesResponse> -> executeDescribeBrokerEngineTypes: Probability = 1.00, Count = 1
Invoke<DescribeReservedDBInstancesOfferingsResponse> -> executeDescribeReservedDBInstancesOfferings: Probability = 1.00, Count = 1
GetCollectionRequest -> GetCollectionRequest: Probability = 1.00, Count = 1
"GetCollection", -> "GetCollection",: Probability = 1.00, Count = 1
DeleteApplicationVersionRequest -> DeleteApplicationVersionRequest: Probability = 1.00, Count = 1
versionLabel -> versionLabel: Probability = 1.00, Count = 6
_versionLabel -> setVersionLabel: Probability = 1.00, Count = 3
DeleteFleetResponse -> DeleteFleetResult: Probability = 1.00, Count = 1
DeleteFleet -> deleteFleet: Probability = 1.00, Count = 1
DeleteFleetRequest -> DeleteFleetRequest: Probability = 1.00, Count = 1
Invoke<DeleteFleetResponse> -> executeDeleteFleet: Probability = 1.00, Count = 1
DescribeWorkteamResponse -> DescribeWorkteamResult: Probability = 1.00, Count = 1
DescribeWorkteam -> describeWorkteam: Probability = 1.00, Count = 1
DescribeWorkteamRequest -> DescribeWorkteamRequest: Probability = 1.00, Count = 1
Invoke<DescribeWorkteamResponse> -> executeDescribeWorkteam: Probability = 1.00, Count = 1
StatusCommand -> StatusCommand: Probability = 0.67, Count = 2
StatusCommand -> status: Probability = 0.33, Count = 1
StopInstancesResponse -> StopInstancesResult: Probability = 1.00, Count = 1
StopInstances -> stopInstances: Probability = 1.00, Count = 1
StopInstancesRequest -> StopInstancesRequest: Probability = 1.00, Count = 2
Invoke<StopInstancesResponse> -> executeStopInstances: Probability = 1.00, Count = 1
anchor.Dx2 -> ): Probability = 1.00, Count = 1
anchor.Dy1 -> ): Probability = 1.00, Count = 1
anchor.Dy2 -> ): Probability = 0.75, Count = 3
anchor.Dy2 -> (: Probability = 0.25, Count = 1
DescribeDBSubnetGroupsResponse -> DescribeDBSubnetGroupsResult: Probability = 1.00, Count = 2
DescribeDBSubnetGroups -> describeDBSubnetGroups: Probability = 1.00, Count = 3
DescribeDBSubnetGroupsRequest -> DescribeDBSubnetGroupsRequest: Probability = 1.00, Count = 2
docID_Renamed -> docID: Probability = 1.00, Count = 1
ListTagsForResourceResponse -> ListTagsForResourceResult: Probability = 0.50, Count = 1
ListTagsForResourceResponse -> ListTagsForResourceOutput: Probability = 0.50, Count = 1
ListTagsForResource -> listTagsForResource: Probability = 1.00, Count = 2
ListTagsForResourceRequest -> ListTagsForResourceRequest: Probability = 1.00, Count = 2
Invoke<ListTagsForResourceResponse> -> executeListTagsForResource: Probability = 1.00, Count = 2
GetBuiltinFormat -> getBuiltinFormat: Probability = 0.33, Count = 4
GetBuiltinFormat -> pFmt: Probability = 0.50, Count = 6
GetBuiltinFormat -> "TEXT".equalsIgnoreCase: Probability = 0.17, Count = 2
_formats.Length -> >=_formats.length: Probability = 0.20, Count = 1
_formats.Length -> _formats: Probability = 0.40, Count = 2
_formats.Length -> f.equals: Probability = 0.40, Count = 2
_formats[index] -> _formats[index]: Probability = 1.00, Count = 1
biasedExp -> biasedExp: Probability = 1.00, Count = 4
expAdj -> expAdj: Probability = 1.00, Count = 3
0x07FF -> 0x07FF: Probability = 1.00, Count = 2
1023 -> 1023: Probability = 1.00, Count = 2
GetFormattingRanges -> getFormattingRanges: Probability = 0.50, Count = 1
GetFormattingRanges -> cfAggregate.getHeader: Probability = 0.50, Count = 1
cfAggregate.Header.CellRanges -> .getCellRanges: Probability = 1.00, Count = 1
charSequence -> charSequence: Probability = 1.00, Count = 2
charSequence.ToString -> charSequence.toString: Probability = 1.00, Count = 1
GetSkillGroupResponse -> GetSkillGroupResult: Probability = 1.00, Count = 1
GetSkillGroup -> getSkillGroup: Probability = 1.00, Count = 1
GetSkillGroupRequest -> GetSkillGroupRequest: Probability = 1.00, Count = 1
Invoke<GetSkillGroupResponse> -> executeGetSkillGroup: Probability = 1.00, Count = 1
DeleteObjectResponse -> DeleteObjectResult: Probability = 1.00, Count = 1
DeleteObject -> deleteObject: Probability = 1.00, Count = 1
DeleteObjectRequest -> DeleteObjectRequest: Probability = 1.00, Count = 1
Invoke<DeleteObjectResponse> -> executeDeleteObject: Probability = 1.00, Count = 1
RemoveAll -> removeAll: Probability = 1.00, Count = 1
RemoveValue -> removeValue: Probability = 1.00, Count = 2
CreateCustomerGatewayResponse -> CreateCustomerGatewayResult: Probability = 1.00, Count = 1
CreateCustomerGateway -> createCustomerGateway: Probability = 1.00, Count = 1
CreateCustomerGatewayRequest -> CreateCustomerGatewayRequest: Probability = 1.00, Count = 2
Invoke<CreateCustomerGatewayResponse> -> executeCreateCustomerGateway: Probability = 1.00, Count = 1
GetDirCache -> getDirCache: Probability = 1.00, Count = 1
PatternReplaceCharFilterFactory -> PatternReplaceCharFilterFactory: Probability = 1.00, Count = 1
GetCreateEmptyCells -> getCreateEmptyCells: Probability = 1.00, Count = 1
SizeOf -> sizeOf: Probability = 1.00, Count = 3
GetGatewayResponseResponse -> GetGatewayResponseResult: Probability = 1.00, Count = 1
GetGatewayResponseRequest -> GetGatewayResponseRequest: Probability = 1.00, Count = 1
Invoke<GetGatewayResponseResponse> -> executeGetGatewayResponse: Probability = 1.00, Count = 1
SubscribeRequest -> SubscribeRequest: Probability = 1.00, Count = 1
protocol, -> protocol,: Probability = 1.00, Count = 2
_protocol -> setProtocol: Probability = 1.00, Count = 2
protocol -> protocol: Probability = 1.00, Count = 2
_endpoint -> setEndpoint: Probability = 1.00, Count = 1
SetLengthNormFactors -> setLengthNormFactors: Probability = 1.00, Count = 1
max, -> max,: Probability = 1.00, Count = 2
steepness, -> steepness,: Probability = 1.00, Count = 1
this.ln_min -> this.ln_min: Probability = 1.00, Count = 1
this.ln_max -> this.ln_max: Probability = 1.00, Count = 1
this.ln_steep -> this.ln_steep: Probability = 1.00, Count = 1
steepness -> steepness: Probability = 1.00, Count = 1
this.DiscountOverlaps -> this.discountOverlaps: Probability = 1.00, Count = 1
setStartTime -> mStartTime: Probability = 0.50, Count = 1
setStartTime -> ANIMATION_START: Probability = 0.50, Count = 1
DeleteLaunchConfigurationResponse -> DeleteLaunchConfigurationResult: Probability = 1.00, Count = 1
DeleteLaunchConfiguration -> deleteLaunchConfiguration: Probability = 1.00, Count = 1
DeleteLaunchConfigurationRequest -> DeleteLaunchConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DeleteLaunchConfigurationResponse> -> executeDeleteLaunchConfiguration: Probability = 1.00, Count = 1
records.IndexOf -> r: Probability = 0.67, Count = 2
records.IndexOf -> records: Probability = 0.33, Count = 1
fld, -> fld,: Probability = 1.00, Count = 1
fld -> null: Probability = 1.00, Count = 2
RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ -> RamUsageEstimator.NUM_BYTES_OBJECT_REF+: Probability = 1.00, Count = 1
RamUsageEstimator.NUM_BYTES_INT64+ -> Long.BYTES+: Probability = 1.00, Count = 1
RamUsageEstimator.NUM_BYTES_SINGLE -> Float.BYTES: Probability = 1.00, Count = 3
current.RamBytesUsed -> current.ramBytesUsed: Probability = 1.00, Count = 1
wasted -> wasted: Probability = 0.67, Count = 4
wasted -> 256||: Probability = 0.17, Count = 1
wasted -> INITIAL_CAPACITY: Probability = 0.17, Count = 1
field_1_protect -> field_1_protect: Probability = 1.00, Count = 3
AssociateResolverEndpointIpAddressResponse -> AssociateResolverEndpointIpAddressResult: Probability = 1.00, Count = 1
AssociateResolverEndpointIpAddress -> associateResolverEndpointIpAddress: Probability = 1.00, Count = 1
AssociateResolverEndpointIpAddressRequest -> AssociateResolverEndpointIpAddressRequest: Probability = 1.00, Count = 1
Invoke<AssociateResolverEndpointIpAddressResponse> -> executeAssociateResolverEndpointIpAddress: Probability = 1.00, Count = 1
RemoveSecurity -> removeSecurity: Probability = 1.00, Count = 1
PropertyIDMap.PID_SECURITY -> PropertyIDMap.PID_SECURITY: Probability = 1.00, Count = 1
ImportVolumeResponse -> ImportVolumeResult: Probability = 1.00, Count = 1
ImportVolume -> importVolume: Probability = 1.00, Count = 1
ImportVolumeRequest -> ImportVolumeRequest: Probability = 1.00, Count = 1
Invoke<ImportVolumeResponse> -> executeImportVolume: Probability = 1.00, Count = 1
IsDetectRenames -> isDetectRenames: Probability = 1.00, Count = 1
renameDetector -> renameDetector: Probability = 0.60, Count = 6
renameDetector -> elserenameDetector: Probability = 0.10, Count = 1
renameDetector -> assertHaveReader: Probability = 0.10, Count = 1
renameDetector -> diffCfg: Probability = 0.10, Count = 1
renameDetector -> !on: Probability = 0.10, Count = 1
RebootCacheClusterResponse -> CacheCluster: Probability = 1.00, Count = 1
RebootCacheCluster -> rebootCacheCluster: Probability = 1.00, Count = 1
RebootCacheClusterRequest -> RebootCacheClusterRequest: Probability = 1.00, Count = 1
Invoke<RebootCacheClusterResponse> -> executeRebootCacheCluster: Probability = 1.00, Count = 1
DescribeTemplateAliasResponse -> DescribeTemplateAliasResult: Probability = 1.00, Count = 1
DescribeTemplateAlias -> describeTemplateAlias: Probability = 1.00, Count = 1
DescribeTemplateAliasRequest -> DescribeTemplateAliasRequest: Probability = 1.00, Count = 1
Invoke<DescribeTemplateAliasResponse> -> executeDescribeTemplateAlias: Probability = 1.00, Count = 1
blocks.AddItem -> inCoreLimit,: Probability = 1.00, Count = 1
TemporaryBuffer.Block -> Block.SZ: Probability = 1.00, Count = 1
DescribeWorkspaceSnapshotsResponse -> DescribeWorkspaceSnapshotsResult: Probability = 1.00, Count = 1
DescribeWorkspaceSnapshots -> describeWorkspaceSnapshots: Probability = 1.00, Count = 1
DescribeWorkspaceSnapshotsRequest -> DescribeWorkspaceSnapshotsRequest: Probability = 1.00, Count = 1
Invoke<DescribeWorkspaceSnapshotsResponse> -> executeDescribeWorkspaceSnapshots: Probability = 1.00, Count = 1
Title -> title: Probability = 1.00, Count = 1
Props -> props: Probability = 1.00, Count = 1
DeleteDistributionResponse -> DeleteDistributionResult: Probability = 1.00, Count = 1
DeleteDistribution -> deleteDistribution: Probability = 1.00, Count = 1
Invoke<DeleteDistributionResponse> -> executeDeleteDistribution: Probability = 1.00, Count = 1
pOff -> currentValues[pOff++]: Probability = 0.50, Count = 1
pOff -> currentCount: Probability = 0.50, Count = 1
vOff -> pOff: Probability = 0.67, Count = 2
vOff -> vOff: Probability = 0.33, Count = 1
currentCount -> fillBlock: Probability = 1.00, Count = 1
AttachInstancesToLoadBalancerResponse -> AttachInstancesToLoadBalancerResult: Probability = 1.00, Count = 1
AttachInstancesToLoadBalancer -> attachInstancesToLoadBalancer: Probability = 1.00, Count = 1
AttachInstancesToLoadBalancerRequest -> AttachInstancesToLoadBalancerRequest: Probability = 1.00, Count = 1
Invoke<AttachInstancesToLoadBalancerResponse> -> executeAttachInstancesToLoadBalancer: Probability = 1.00, Count = 1
UpdateNotificationSettingsResponse -> UpdateNotificationSettingsResult: Probability = 1.00, Count = 1
UpdateNotificationSettings -> updateNotificationSettings: Probability = 1.00, Count = 1
UpdateNotificationSettingsRequest -> UpdateNotificationSettingsRequest: Probability = 1.00, Count = 1
Invoke<UpdateNotificationSettingsResponse> -> executeUpdateNotificationSettings: Probability = 1.00, Count = 1
DescribeSnapshotAttributeResponse -> DescribeSnapshotAttributeResult: Probability = 1.00, Count = 1
DescribeSnapshotAttribute -> describeSnapshotAttribute: Probability = 1.00, Count = 1
DescribeSnapshotAttributeRequest -> DescribeSnapshotAttributeRequest: Probability = 1.00, Count = 2
Invoke<DescribeSnapshotAttributeResponse> -> executeDescribeSnapshotAttribute: Probability = 1.00, Count = 1
ListDocumentClassificationJobsResponse -> ListDocumentClassificationJobsResult: Probability = 1.00, Count = 1
ListDocumentClassificationJobs -> listDocumentClassificationJobs: Probability = 1.00, Count = 1
ListDocumentClassificationJobsRequest -> ListDocumentClassificationJobsRequest: Probability = 1.00, Count = 1
Invoke<ListDocumentClassificationJobsResponse> -> executeListDocumentClassificationJobs: Probability = 1.00, Count = 1
FromObjectId -> fromObjectId: Probability = 1.00, Count = 2
id.w1, -> Constants.OBJECT_ID_STRING_LENGTH,id.w1,: Probability = 1.00, Count = 1
id.w2, -> id.w2,: Probability = 1.00, Count = 1
id.w3, -> id.w3,: Probability = 1.00, Count = 1
id.w4, -> id.w4,: Probability = 1.00, Count = 1
id.w5 -> id.w5: Probability = 1.00, Count = 1
ProcessContinueRecord -> processContinueRecord: Probability = 1.00, Count = 1
ListenerHandle -> ListenerHandle: Probability = 1.00, Count = 5
AddChangeListener -> addChangeListener: Probability = 1.00, Count = 1
ConfigChangedListener -> ConfigChangedListener: Probability = 0.75, Count = 3
ConfigChangedListener -> ConfigChangedListener.class: Probability = 0.25, Count = 1
listeners.AddConfigChangedListener -> listeners.addConfigChangedListener: Probability = 1.00, Count = 1
SetFlagByBit -> setFlagByBit: Probability = 1.00, Count = 1
Calculate -> calculate: Probability = 1.00, Count = 2
basis -> pStartDateVal,: Probability = 0.17, Count = 1
basis -> pEndDateVal,: Probability = 0.17, Count = 1
basis -> basis: Probability = 0.67, Count = 4
startDateVal -> startDateVal: Probability = 1.00, Count = 5
endDateVal -> Math.floor: Probability = 0.11, Count = 2
endDateVal -> pStartDateVal: Probability = 0.05, Count = 1
endDateVal -> endDateVal: Probability = 0.26, Count = 5
endDateVal -> pEndDateVal: Probability = 0.05, Count = 1
endDateVal -> basis0: Probability = 0.05, Count = 1
endDateVal -> 1:: Probability = 0.05, Count = 1
endDateVal -> basis1: Probability = 0.05, Count = 1
endDateVal -> 2:: Probability = 0.05, Count = 1
endDateVal -> basis2: Probability = 0.05, Count = 1
endDateVal -> 3:: Probability = 0.05, Count = 1
endDateVal -> basis3: Probability = 0.05, Count = 1
endDateVal -> 4:: Probability = 0.05, Count = 1
endDateVal -> basis4: Probability = 0.05, Count = 1
endDateVal -> happen": Probability = 0.05, Count = 1
startDateVal, -> startDateVal,: Probability = 0.50, Count = 5
startDateVal, -> endDateVal: Probability = 0.50, Count = 5
GetVoiceConnectorGroupResponse -> GetVoiceConnectorGroupResult: Probability = 1.00, Count = 1
GetVoiceConnectorGroup -> getVoiceConnectorGroup: Probability = 1.00, Count = 1
GetVoiceConnectorGroupRequest -> GetVoiceConnectorGroupRequest: Probability = 1.00, Count = 1
Invoke<GetVoiceConnectorGroupResponse> -> executeGetVoiceConnectorGroup: Probability = 1.00, Count = 1
BatchUpdateUserResponse -> BatchUpdateUserResult: Probability = 1.00, Count = 1
BatchUpdateUser -> batchUpdateUser: Probability = 1.00, Count = 1
BatchUpdateUserRequest -> BatchUpdateUserRequest: Probability = 1.00, Count = 1
Invoke<BatchUpdateUserResponse> -> executeBatchUpdateUser: Probability = 1.00, Count = 1
DescribeStorageResponse -> DescribeStorageResult: Probability = 1.00, Count = 1
DescribeStorage -> describeStorage: Probability = 1.00, Count = 1
DescribeStorageRequest -> DescribeStorageRequest: Probability = 1.00, Count = 1
Invoke<DescribeStorageResponse> -> executeDescribeStorage: Probability = 1.00, Count = 1
BackUp -> final: Probability = 0.50, Count = 2
BackUp -> backup: Probability = 0.50, Count = 2
amount -> amount: Probability = 1.00, Count = 4
UpdateDashboardPublishedVersionResponse -> UpdateDashboardPublishedVersionResult: Probability = 1.00, Count = 1
UpdateDashboardPublishedVersion -> updateDashboardPublishedVersion: Probability = 1.00, Count = 1
UpdateDashboardPublishedVersionRequest -> UpdateDashboardPublishedVersionRequest: Probability = 1.00, Count = 1
Invoke<UpdateDashboardPublishedVersionResponse> -> executeUpdateDashboardPublishedVersion: Probability = 1.00, Count = 1
fieldsToAdd.Add -> fieldsToAdd.add: Probability = 1.00, Count = 1
ResumeGameServerGroupResponse -> ResumeGameServerGroupResult: Probability = 1.00, Count = 1
ResumeGameServerGroup -> resumeGameServerGroup: Probability = 1.00, Count = 1
ResumeGameServerGroupRequest -> ResumeGameServerGroupRequest: Probability = 1.00, Count = 1
Invoke<ResumeGameServerGroupResponse> -> executeResumeGameServerGroup: Probability = 1.00, Count = 1
SetPushAll -> setPushAll: Probability = 1.00, Count = 1
NGit.Transport.Transport.REFSPEC_PUSH_ALL -> Transport.REFSPEC_PUSH_ALL: Probability = 1.00, Count = 1
CreateDBSnapshotResponse -> DBSnapshot: Probability = 1.00, Count = 1
CreateDBSnapshot -> createDBSnapshot: Probability = 1.00, Count = 1
Invoke<CreateDBSnapshotResponse> -> executeCreateDBSnapshot: Probability = 1.00, Count = 1
DateTime.UtcNow.currentTimeMillis -> System.currentTimeMillis: Probability = 1.00, Count = 2
sessionStartedTimeInMilliSeconds -> sessionStartedTimeInMilliSeconds: Probability = 1.00, Count = 1
1000.0 -> 1000.0: Probability = 1.00, Count = 1
IList<Interval> -> List<Interval>: Probability = 1.00, Count = 2
GetIntervals -> getIntervals: Probability = 1.00, Count = 1
GetNamespaceRequest -> GetNamespaceRequest: Probability = 1.00, Count = 1
"GetNamespace", -> "GetNamespace",: Probability = 1.00, Count = 1
fst.GetSizeInBytes -> bytesUsed: Probability = 0.30, Count = 3
fst.GetSizeInBytes -> +=: Probability = 0.20, Count = 2
fst.GetSizeInBytes -> dict.ramBytesUsed: Probability = 0.10, Count = 1
fst.GetSizeInBytes -> sizeInBytes: Probability = 0.20, Count = 2
fst.GetSizeInBytes -> entry.ramBytesUsed: Probability = 0.10, Count = 1
fst.GetSizeInBytes -> fst.ramBytesUsed: Probability = 0.10, Count = 1
srcRow, -> srcRow,: Probability = 1.00, Count = 1
srcCol -> srcCol: Probability = 1.00, Count = 1
boolResult -> boolResult: Probability = 1.00, Count = 3
TypedPropertyValue -> TypedPropertyValue: Probability = 1.00, Count = 1
java.nio.FloatToByteBufferAdapter -> FloatToByteBufferAdapter: Probability = 1.00, Count = 2
MigrateWorkspaceResponse -> MigrateWorkspaceResult: Probability = 1.00, Count = 1
MigrateWorkspace -> migrateWorkspace: Probability = 1.00, Count = 1
MigrateWorkspaceRequest -> MigrateWorkspaceRequest: Probability = 1.00, Count = 1
Invoke<MigrateWorkspaceResponse> -> executeMigrateWorkspace: Probability = 1.00, Count = 1
GetRequestValidatorResponse -> GetRequestValidatorResult: Probability = 1.00, Count = 1
GetRequestValidator -> getRequestValidator: Probability = 1.00, Count = 1
GetRequestValidatorRequest -> GetRequestValidatorRequest: Probability = 1.00, Count = 1
Invoke<GetRequestValidatorResponse> -> executeGetRequestValidator: Probability = 1.00, Count = 1
ForgetSmartHomeAppliancesResponse -> ForgetSmartHomeAppliancesResult: Probability = 1.00, Count = 1
ForgetSmartHomeAppliances -> forgetSmartHomeAppliances: Probability = 1.00, Count = 1
ForgetSmartHomeAppliancesRequest -> ForgetSmartHomeAppliancesRequest: Probability = 1.00, Count = 1
Invoke<ForgetSmartHomeAppliancesResponse> -> executeForgetSmartHomeAppliances: Probability = 1.00, Count = 1
DeleteApiResponse -> DeleteApiResult: Probability = 1.00, Count = 1
DeleteApi -> deleteApi: Probability = 1.00, Count = 1
DeleteApiRequest -> DeleteApiRequest: Probability = 1.00, Count = 1
Invoke<DeleteApiResponse> -> executeDeleteApi: Probability = 1.00, Count = 1
increment -> increment: Probability = 1.00, Count = 3
-increment -> -increment: Probability = 1.00, Count = 1
CreateDVRecord -> createDVRecord: Probability = 1.00, Count = 1
NPOI.HSSF.UserModel.DVConstraint.FormulaPair -> _constraint.createFormulas: Probability = 1.00, Count = 1
_constraint.GetValidationType -> ,_errorStyle,: Probability = 0.50, Count = 1
_constraint.GetValidationType -> _emptyCellAllowed,: Probability = 0.50, Count = 1
_emptyCellAllowed, -> ,_constraint.getValidationType: Probability = 1.00, Count = 1
SuppressDropDownArrow,_constraint.GetValidationType -> ==ValidationType.LIST: Probability = 1.00, Count = 1
ValidationType.LIST -> _constraint.getExplicitListValues: Probability = 0.50, Count = 1
ValidationType.LIST -> !=null,_showPromptBox,: Probability = 0.50, Count = 1
_constraint.ExplicitListValues -> _prompt_title,: Probability = 0.50, Count = 1
_constraint.ExplicitListValues -> _prompt_text,_showErrorBox,: Probability = 0.50, Count = 1
null,_ShowPromptBox, -> _error_title,: Probability = 0.50, Count = 1
null,_ShowPromptBox, -> _error_text,fp.getFormula1: Probability = 0.50, Count = 1
_error_title, -> fp.getFormula2: Probability = 1.00, Count = 1
fp.Formula2,_regions -> ,_regions: Probability = 1.00, Count = 1
ListHoursOfOperationsResponse -> ListHoursOfOperationsResult: Probability = 1.00, Count = 1
ListHoursOfOperations -> listHoursOfOperations: Probability = 1.00, Count = 1
ListHoursOfOperationsRequest -> ListHoursOfOperationsRequest: Probability = 1.00, Count = 1
Invoke<ListHoursOfOperationsResponse> -> executeListHoursOfOperations: Probability = 1.00, Count = 1
"Label -> "Label: Probability = 1.00, Count = 1
ONLY...Convert -> ONLY...convert: Probability = 1.00, Count = 1
LabelSST" -> LabelSST": Probability = 1.00, Count = 1
normalizedPath -> normalizedPath: Probability = 1.00, Count = 3
_udfFinder.FindFunction -> _udfFinder.findFunction: Probability = 1.00, Count = 1
UpdateGatewayResponseResponse -> UpdateGatewayResponseResult: Probability = 1.00, Count = 1
UpdateGatewayResponse -> updateGatewayResponse: Probability = 0.50, Count = 1
UpdateGatewayResponse -> UpdateGatewayResult: Probability = 0.50, Count = 1
UpdateGatewayResponseRequest -> UpdateGatewayResponseRequest: Probability = 1.00, Count = 1
Invoke<UpdateGatewayResponseResponse> -> executeUpdateGatewayResponse: Probability = 1.00, Count = 1
GetOperationDetailResponse -> GetOperationDetailResult: Probability = 1.00, Count = 1
GetOperationDetail -> getOperationDetail: Probability = 1.00, Count = 1
GetOperationDetailRequest -> GetOperationDetailRequest: Probability = 1.00, Count = 1
Invoke<GetOperationDetailResponse> -> executeGetOperationDetail: Probability = 1.00, Count = 1
ToStringUtils.Boost -> term.text: Probability = 0.80, Count = 4
ToStringUtils.Boost -> buffer.append: Probability = 0.20, Count = 1
getCharsetName -> getCharsetName: Probability = 1.00, Count = 1
charsetName -> charsetName: Probability = 1.00, Count = 1
DescribeWebsiteCertificateAuthorityResponse -> DescribeWebsiteCertificateAuthorityResult: Probability = 1.00, Count = 1
DescribeWebsiteCertificateAuthority -> describeWebsiteCertificateAuthority: Probability = 1.00, Count = 1
DescribeWebsiteCertificateAuthorityRequest -> DescribeWebsiteCertificateAuthorityRequest: Probability = 1.00, Count = 1
Invoke<DescribeWebsiteCertificateAuthorityResponse> -> executeDescribeWebsiteCertificateAuthority: Probability = 1.00, Count = 1
workbookRecordList -> numberOfSheets,: Probability = 0.17, Count = 1
workbookRecordList -> WorkbookRecordList: Probability = 0.17, Count = 1
workbookRecordList -> workbookRecordList: Probability = 0.33, Count = 2
workbookRecordList -> _workbookRecordList: Probability = 0.17, Count = 1
workbookRecordList -> _definedNames: Probability = 0.17, Count = 1
_externSheetRecord -> _externSheetRecord: Probability = 1.00, Count = 2
supbook -> supbook: Probability = 1.00, Count = 2
FindFirstRecordLocBySid -> findFirstRecordLocBySid: Probability = 1.00, Count = 7
_workbookRecordList.Add -> _workbookRecordList.add: Probability = 1.00, Count = 5
srcIdx, -> srcIdx,: Probability = 1.00, Count = 2
srcCnt -> srcCnt: Probability = 1.00, Count = 3
RenewDomainResponse -> RenewDomainResult: Probability = 1.00, Count = 1
RenewDomain -> renewDomain: Probability = 1.00, Count = 1
RenewDomainRequest -> RenewDomainRequest: Probability = 1.00, Count = 1
Invoke<RenewDomainResponse> -> executeRenewDomain: Probability = 1.00, Count = 1
IsInRange -> isInRange: Probability = 1.00, Count = 2
MIN_VALUE -> MIN_VALUE: Probability = 1.00, Count = 1
MAX_VALUE -> MAX_VALUE: Probability = 1.00, Count = 1
AddApplicationInputResponse -> AddApplicationInputResult: Probability = 1.00, Count = 1
AddApplicationInput -> addApplicationInput: Probability = 1.00, Count = 1
AddApplicationInputRequest -> AddApplicationInputRequest: Probability = 1.00, Count = 1
Invoke<AddApplicationInputResponse> -> executeAddApplicationInput: Probability = 1.00, Count = 1
matcher.Match -> matcher.match: Probability = 1.00, Count = 1
.Succeeded -> .succeeded: Probability = 1.00, Count = 1
CreateDetectorResponse -> CreateDetectorResult: Probability = 1.00, Count = 1
CreateDetector -> createDetector: Probability = 1.00, Count = 1
CreateDetectorRequest -> CreateDetectorRequest: Probability = 1.00, Count = 1
Invoke<CreateDetectorResponse> -> executeCreateDetector: Probability = 1.00, Count = 1
otherCommit.Generation -> otherCommit.getGeneration: Probability = 1.00, Count = 1
Generation -> getGeneration: Probability = 1.00, Count = 2
RevisionSyntaxException -> RevisionSyntaxException: Probability = 1.00, Count = 2
revstr -> revstr: Probability = 1.00, Count = 5
this.revstr -> this.revstr: Probability = 1.00, Count = 2
FloatValue -> floatValue: Probability = 1.00, Count = 1
ModifyClusterResponse -> ModifyClusterResult: Probability = 1.00, Count = 1
DescribeSolutionResponse -> DescribeSolutionResult: Probability = 1.00, Count = 1
DescribeSolution -> describeSolution: Probability = 1.00, Count = 1
DescribeSolutionRequest -> DescribeSolutionRequest: Probability = 1.00, Count = 1
Invoke<DescribeSolutionResponse> -> executeDescribeSolution: Probability = 1.00, Count = 1
BootstrapActionConfig -> BootstrapActionConfig: Probability = 1.00, Count = 5
"Configure -> .withName: Probability = 0.50, Count = 2
"Configure -> "Configure: Probability = 0.50, Count = 2
Hadoop",ScriptBootstrapAction -> Hadoop": Probability = 1.00, Count = 1
"s3:" -> .withPath: Probability = 0.50, Count = 2
"s3:" -> "s3:": Probability = 0.50, Count = 2
Args -> .withArgs: Probability = 1.00, Count = 2
FileMode.GITLINK, -> GITLINK,: Probability = 1.00, Count = 1
SetOutputUnigramsIfNoShingles -> setOutputUnigramsIfNoShingles: Probability = 1.00, Count = 1
this.outputUnigramsIfNoShingles -> this.outputUnigramsIfNoShingles: Probability = 1.00, Count = 2
UpdateFormulasAfterRowShift -> updateFormulasAfterRowShift: Probability = 1.00, Count = 2
currentExternSheetIndex -> currentExternSheetIndex: Probability = 1.00, Count = 4
ptgs, -> ptgs,: Probability = 1.00, Count = 8
UpdateGroupRequest -> UpdateGroupRequest: Probability = 1.00, Count = 2
ListBrokersResponse -> ListBrokersResult: Probability = 1.00, Count = 1
ListBrokers -> listBrokers: Probability = 1.00, Count = 1
ListBrokersRequest -> ListBrokersRequest: Probability = 1.00, Count = 1
Invoke<ListBrokersResponse> -> executeListBrokers: Probability = 1.00, Count = 1
FormulaCellCacheEntry[] -> final: Probability = 1.00, Count = 1
GetConsumingCells -> FormulaCellCacheEntry[]: Probability = 0.50, Count = 1
GetConsumingCells -> getConsumingCells: Probability = 0.50, Count = 1
_consumingCells.ToArray -> _consumingCells.toArray: Probability = 1.00, Count = 1
Cardinality -> cardinality: Probability = 1.00, Count = 1
cardinality -> cardinality: Probability = 1.00, Count = 1
WeightedTerm[] -> WeightedTerm[]: Probability = 1.00, Count = 2
prohibited -> prohibited: Probability = 1.00, Count = 1
prohibited, -> query,prohibited,null: Probability = 1.00, Count = 1
ColWidth -> getColWidth: Probability = 1.00, Count = 2
FSTTermsWriter -> FSTTermsWriter: Probability = 1.00, Count = 2
getThumbOffset -> getThumbOffset: Probability = 1.00, Count = 1
mThumbOffset -> mThumbOffset: Probability = 1.00, Count = 2
GetApnsChannelResponse -> GetApnsChannelResult: Probability = 1.00, Count = 1
GetApnsChannel -> getApnsChannel: Probability = 1.00, Count = 1
GetApnsChannelRequest -> GetApnsChannelRequest: Probability = 1.00, Count = 1
Invoke<GetApnsChannelResponse> -> executeGetApnsChannel: Probability = 1.00, Count = 1
NGramDistance -> NGramDistance: Probability = 1.00, Count = 3
o.n -> o.n: Probability = 1.00, Count = 1
GetDomainDetailResponse -> GetDomainDetailResult: Probability = 1.00, Count = 1
GetDomainDetail -> getDomainDetail: Probability = 1.00, Count = 1
GetDomainDetailRequest -> GetDomainDetailRequest: Probability = 1.00, Count = 1
Invoke<GetDomainDetailResponse> -> executeGetDomainDetail: Probability = 1.00, Count = 1
UpdateConfigurationSetReputationMetricsEnabledResponse -> UpdateConfigurationSetReputationMetricsEnabledResult: Probability = 1.00, Count = 1
UpdateConfigurationSetReputationMetricsEnabled -> updateConfigurationSetReputationMetricsEnabled: Probability = 1.00, Count = 1
UpdateConfigurationSetReputationMetricsEnabledRequest -> UpdateConfigurationSetReputationMetricsEnabledRequest: Probability = 1.00, Count = 1
Invoke<UpdateConfigurationSetReputationMetricsEnabledResponse> -> executeUpdateConfigurationSetReputationMetricsEnabled: Probability = 1.00, Count = 1
PackedDataInput -> PackedDataInput: Probability = 1.00, Count = 1
AssociateQualificationWithWorkerResponse -> AssociateQualificationWithWorkerResult: Probability = 1.00, Count = 1
AssociateQualificationWithWorker -> associateQualificationWithWorker: Probability = 1.00, Count = 1
AssociateQualificationWithWorkerRequest -> AssociateQualificationWithWorkerRequest: Probability = 1.00, Count = 1
Invoke<AssociateQualificationWithWorkerResponse> -> executeAssociateQualificationWithWorker: Probability = 1.00, Count = 1
SignalWorkflowExecution -> signalWorkflowExecution: Probability = 1.00, Count = 1
SignalWorkflowExecutionRequest -> SignalWorkflowExecutionRequest: Probability = 1.00, Count = 1
SignalWorkflowExecutionResponseUnmarshaller.Instance -> executeSignalWorkflowExecution: Probability = 1.00, Count = 1
IVocabulary -> Vocabulary: Probability = 1.00, Count = 2
vocabulary -> vocabulary: Probability = 0.70, Count = 7
vocabulary -> vocabulary==null: Probability = 0.10, Count = 1
vocabulary -> vocabulary.isNil: Probability = 0.10, Count = 1
vocabulary -> vocabularyIS.addAll: Probability = 0.10, Count = 1
CJKWidthFilterFactory -> CJKWidthFilterFactory: Probability = 1.00, Count = 1
GetHLSStreamingSessionURLResponse -> GetHLSStreamingSessionURLResult: Probability = 1.00, Count = 1
GetHLSStreamingSessionURL -> getHLSStreamingSessionURL: Probability = 1.00, Count = 1
GetHLSStreamingSessionURLRequest -> GetHLSStreamingSessionURLRequest: Probability = 1.00, Count = 1
Invoke<GetHLSStreamingSessionURLResponse> -> executeGetHLSStreamingSessionURL: Probability = 1.00, Count = 1
currentExternSheetIx -> currentExternSheetIx: Probability = 1.00, Count = 7
changed -> changed: Probability = 0.40, Count = 2
changed -> newRanges: Probability = 0.60, Count = 3
craNew -> craOld: Probability = 0.20, Count = 2
craNew -> craNew: Probability = 0.40, Count = 4
craNew -> changed: Probability = 0.20, Count = 2
craNew -> nRanges: Probability = 0.20, Count = 2
temp.Add -> temp.add: Probability = 1.00, Count = 7
temp.ToArray -> temp.toArray: Probability = 1.00, Count = 4
rule -> rule: Probability = 1.00, Count = 6
keyAt -> keyAt: Probability = 1.00, Count = 2
mKeys[index] -> mKeys[index]: Probability = 1.00, Count = 2
JapaneseKatakanaStemFilterFactory -> JapaneseKatakanaStemFilterFactory: Probability = 1.00, Count = 1
ByteArray -> byteArray: Probability = 1.00, Count = 1
bytes[i] -> bytes[i]: Probability = 1.00, Count = 2
_in.Available -> _in.available: Probability = 1.00, Count = 1
DeleteDatasetGroupResponse -> DeleteDatasetGroupResult: Probability = 1.00, Count = 1
DeleteDatasetGroup -> deleteDatasetGroup: Probability = 1.00, Count = 1
DeleteDatasetGroupRequest -> DeleteDatasetGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteDatasetGroupResponse> -> executeDeleteDatasetGroup: Probability = 1.00, Count = 1
DescribeBuildResponse -> DescribeBuildResult: Probability = 1.00, Count = 1
DescribeBuild -> describeBuild: Probability = 1.00, Count = 1
DescribeBuildRequest -> DescribeBuildRequest: Probability = 1.00, Count = 1
Invoke<DescribeBuildResponse> -> executeDescribeBuild: Probability = 1.00, Count = 1
peekLast -> peekLast: Probability = 1.00, Count = 1
last -> last: Probability = 1.00, Count = 10
last.data -> last.data: Probability = 1.00, Count = 2
DescribeVpnGatewaysResponse -> DescribeVpnGatewaysResult: Probability = 1.00, Count = 2
DescribeVpnGateways -> describeVpnGateways: Probability = 1.00, Count = 3
DescribeVpnGatewaysRequest -> DescribeVpnGatewaysRequest: Probability = 1.00, Count = 2
backingMap.keySet -> backingMap.keySet: Probability = 1.00, Count = 1
k2 -> k2: Probability = 0.17, Count = 5
k2 -> line.indexOf: Probability = 0.13, Count = 4
k2 -> WriteLineDocTask.SEP,: Probability = 0.13, Count = 4
k2 -> k1,k2: Probability = 0.10, Count = 3
k2 -> k2<0: Probability = 0.07, Count = 2
k2 -> "line:: Probability = 0.10, Count = 3
k2 -> missing:: Probability = 0.07, Count = 2
k2 -> title::date: Probability = 0.03, Count = 1
k2 -> docData.setTitle: Probability = 0.03, Count = 1
k2 -> k2+1: Probability = 0.07, Count = 2
k2 -> date::body: Probability = 0.03, Count = 1
k2 -> docData.setDate: Probability = 0.03, Count = 1
k2 -> k2>=0: Probability = 0.03, Count = 1
line.Substring -> line.substring: Probability = 1.00, Count = 6
getTotalLLLookaheadOps -> getTotalLLLookaheadOps: Probability = 1.00, Count = 1
decisions[i].LL_TotalLook -> decisions[i].LL_TotalLook: Probability = 1.00, Count = 1
matches -> matches: Probability = 1.00, Count = 7
regularExpression, -> regularExpression,: Probability = 1.00, Count = 1
regularExpression,0 -> regularExpression,: Probability = 1.00, Count = 1
.matches -> .matches: Probability = 1.00, Count = 1
dx1 -> dx1: Probability = 1.00, Count = 2
dy1 -> dy1: Probability = 1.00, Count = 2
_isVerticallyFlipped -> _isVerticallyFlipped: Probability = 1.00, Count = 1
StartExportTaskResponse -> StartExportTaskResult: Probability = 1.00, Count = 1
StartExportTask -> startExportTask: Probability = 1.00, Count = 1
StartExportTaskRequest -> StartExportTaskRequest: Probability = 1.00, Count = 1
Invoke<StartExportTaskResponse> -> executeStartExportTask: Probability = 1.00, Count = 1
UpdateUserHierarchyResponse -> UpdateUserHierarchyResult: Probability = 1.00, Count = 1
UpdateUserHierarchy -> updateUserHierarchy: Probability = 1.00, Count = 1
UpdateUserHierarchyRequest -> UpdateUserHierarchyRequest: Probability = 1.00, Count = 1
Invoke<UpdateUserHierarchyResponse> -> executeUpdateUserHierarchy: Probability = 1.00, Count = 1
findIndex -> findIndex: Probability = 1.00, Count = 4
_key, -> _key,: Probability = 1.00, Count = 2
keys -> keys: Probability = 1.00, Count = 5
keys[index] -> keys[index]: Probability = 1.00, Count = 6
values[index] -> values[index]: Probability = 0.88, Count = 7
values[index] -> values.get: Probability = 0.12, Count = 1
DeleteIndexFieldResponse -> DeleteIndexFieldResult: Probability = 1.00, Count = 1
DeleteIndexField -> deleteIndexField: Probability = 1.00, Count = 1
DeleteIndexFieldRequest -> DeleteIndexFieldRequest: Probability = 1.00, Count = 1
Invoke<DeleteIndexFieldResponse> -> executeDeleteIndexField: Probability = 1.00, Count = 1
GetAbbreviatedObjectId -> getAbbreviatedObjectId: Probability = 1.00, Count = 1
GetInvokingContext -> getInvokingContext: Probability = 1.00, Count = 1
DisassociateS3ResourcesResponse -> DisassociateS3ResourcesResult: Probability = 1.00, Count = 1
DisassociateS3Resources -> disassociateS3Resources: Probability = 1.00, Count = 1
DisassociateS3ResourcesRequest -> DisassociateS3ResourcesRequest: Probability = 1.00, Count = 1
Invoke<DisassociateS3ResourcesResponse> -> executeDisassociateS3Resources: Probability = 1.00, Count = 1
numfonts++ -> numfonts++: Probability = 1.00, Count = 1
SpanishStemmer -> SpanishStemmer: Probability = 1.00, Count = 1
System.Char.IsLower -> Character.isLowerCase: Probability = 1.00, Count = 1
DeleteVolumeRequest -> DeleteVolumeRequest: Probability = 1.00, Count = 2
volumeId -> volumeId: Probability = 0.67, Count = 6
volumeId -> ): Probability = 0.33, Count = 3
_volumeId -> setVolumeId: Probability = 1.00, Count = 4
GetDataSecondaryCategoryLabels -> getDataSecondaryCategoryLabels: Probability = 1.00, Count = 1
dataSecondaryCategoryLabels -> dataSecondaryCategoryLabels: Probability = 1.00, Count = 1
Antlr4.Runtime.RuleContext -> RuleContext: Probability = 1.00, Count = 2
n++ -> n++: Probability = 1.00, Count = 2
GetTagger -> getTagger: Probability = 1.00, Count = 3
tagger -> tagger: Probability = 1.00, Count = 5
utf32State -> utf32State: Probability = 1.00, Count = 2
utf8State -> utf8State: Probability = 0.57, Count = 4
utf8State -> utf32State: Probability = 0.43, Count = 3
destUTF8 -> destUTF32: Probability = 0.27, Count = 3
destUTF8 -> destUTF8: Probability = 0.36, Count = 4
destUTF8 -> map[destUTF32]: Probability = 0.18, Count = 2
destUTF8 -> destUTF8,: Probability = 0.18, Count = 2
listServices -> listServices: Probability = 1.00, Count = 1
StartWorkers -> startWorkers: Probability = 1.00, Count = 2
workers.AddAndGet -> workers.addAndGet: Probability = 1.00, Count = 1
FacetEntry -> FacetEntry: Probability = 1.00, Count = 2
inv -> inv: Probability = 1.00, Count = 1
OrQuery -> OrQuery: Probability = 0.80, Count = 4
OrQuery -> oq: Probability = 0.20, Count = 1
DescribeParametersResponse -> DescribeParametersResult: Probability = 1.00, Count = 1
DescribeParameters -> describeParameters: Probability = 1.00, Count = 1
DescribeParametersRequest -> DescribeParametersRequest: Probability = 1.00, Count = 1
Invoke<DescribeParametersResponse> -> executeDescribeParameters: Probability = 1.00, Count = 1
currentTokenVal,int[][] -> currentTokenVal,int[][]: Probability = 1.00, Count = 2
expectedTokenSequencesVal, -> expectedTokenSequencesVal,: Probability = 0.75, Count = 3
expectedTokenSequencesVal, -> expectedTokenSequencesVal,String[]: Probability = 0.25, Count = 1
tokenImageVal -> tokenImageVal: Probability = 0.86, Count = 6
tokenImageVal -> this.tokenImage: Probability = 0.14, Count = 1
QueryParserMessages.INVALID_SYNTAX, -> QueryParserMessages.INVALID_SYNTAX,: Probability = 1.00, Count = 1
ListHumanTaskUisResponse -> ListHumanTaskUisResult: Probability = 1.00, Count = 1
ListHumanTaskUis -> listHumanTaskUis: Probability = 1.00, Count = 1
ListHumanTaskUisRequest -> ListHumanTaskUisRequest: Probability = 1.00, Count = 1
Invoke<ListHumanTaskUisResponse> -> executeListHumanTaskUis: Probability = 1.00, Count = 1
dedup -> dedup: Probability = 1.00, Count = 2
ObjectProtectRecord -> ObjectProtectRecord: Probability = 1.00, Count = 3
_reserved0Int -> _reserved0Int: Probability = 1.00, Count = 1
_reserved1Short -> _reserved1Short: Probability = 1.00, Count = 1
_reserved2Byte -> _reserved2Byte: Probability = 1.00, Count = 1
decimal -> BigDecimal: Probability = 1.00, Count = 2
GetFractionalPart -> getFractionalPart: Probability = 1.00, Count = 1
BD_2_POW_24 -> .divide: Probability = 0.50, Count = 1
BD_2_POW_24 -> BD_2_POW_24: Probability = 0.50, Count = 1
AttachLoadBalancerTlsCertificateResponse -> AttachLoadBalancerTlsCertificateResult: Probability = 1.00, Count = 1
AttachLoadBalancerTlsCertificate -> attachLoadBalancerTlsCertificate: Probability = 1.00, Count = 1
AttachLoadBalancerTlsCertificateRequest -> AttachLoadBalancerTlsCertificateRequest: Probability = 1.00, Count = 1
Invoke<AttachLoadBalancerTlsCertificateResponse> -> executeAttachLoadBalancerTlsCertificate: Probability = 1.00, Count = 1
m_transitions[state -> classmap.length: Probability = 0.25, Count = 1
m_transitions[state -> transitions[state: Probability = 0.50, Count = 2
m_transitions[state -> getCharClass: Probability = 0.25, Count = 1
_points.Length -> points.length: Probability = 1.00, Count = 5
_classmap[c]] -> classmap[c]]: Probability = 1.00, Count = 1
UpdateVoiceChannelResponse -> UpdateVoiceChannelResult: Probability = 1.00, Count = 1
UpdateVoiceChannel -> updateVoiceChannel: Probability = 1.00, Count = 1
UpdateVoiceChannelRequest -> UpdateVoiceChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateVoiceChannelResponse> -> executeUpdateVoiceChannel: Probability = 1.00, Count = 1
OnPreReceive -> onPreReceive: Probability = 1.00, Count = 1
hooks[i].OnPreReceive -> hooks[i].onPreReceive: Probability = 1.00, Count = 1
GetTimeZoneOffset -> getTimeZoneOffset: Probability = 1.00, Count = 1
tzOffset -> tzOffset: Probability = 1.00, Count = 1
allocationSite -> allocationSite: Probability = 1.00, Count = 4
AssociateClientVpnTargetNetworkResponse -> AssociateClientVpnTargetNetworkResult: Probability = 1.00, Count = 1
AssociateClientVpnTargetNetwork -> associateClientVpnTargetNetwork: Probability = 1.00, Count = 1
AssociateClientVpnTargetNetworkRequest -> AssociateClientVpnTargetNetworkRequest: Probability = 1.00, Count = 1
Invoke<AssociateClientVpnTargetNetworkResponse> -> executeAssociateClientVpnTargetNetwork: Probability = 1.00, Count = 1
ListEnvironmentsResponse -> ListEnvironmentsResult: Probability = 1.00, Count = 1
ListEnvironments -> listEnvironments: Probability = 1.00, Count = 1
ListEnvironmentsRequest -> ListEnvironmentsRequest: Probability = 1.00, Count = 1
Invoke<ListEnvironmentsResponse> -> executeListEnvironments: Probability = 1.00, Count = 1
postInvalidate -> postInvalidate: Probability = 1.00, Count = 2
mProgress -> mProgress: Probability = 1.00, Count = 3
java.nio.ReadOnlyFloatArrayBuffer.copy -> ReadOnlyFloatArrayBuffer.copy: Probability = 1.00, Count = 1
MissingResourceException -> MissingResourceException: Probability = 1.00, Count = 1
detailMessage, -> detailMessage,: Probability = 1.00, Count = 1
className, -> className,String: Probability = 0.50, Count = 1
className, -> className,: Probability = 0.50, Count = 1
this.className -> this.className: Probability = 1.00, Count = 1
ListRoomMembershipsResponse -> ListRoomMembershipsResult: Probability = 1.00, Count = 1
ListRoomMemberships -> listRoomMemberships: Probability = 1.00, Count = 1
ListRoomMembershipsRequest -> ListRoomMembershipsRequest: Probability = 1.00, Count = 1
Invoke<ListRoomMembershipsResponse> -> executeListRoomMemberships: Probability = 1.00, Count = 1
RegisterActivityType -> registerActivityType: Probability = 1.00, Count = 1
RegisterActivityTypeRequest -> RegisterActivityTypeRequest: Probability = 1.00, Count = 1
RegisterActivityTypeResponseUnmarshaller.Instance -> executeRegisterActivityType: Probability = 1.00, Count = 1
DescribeSuggestersResponse -> DescribeSuggestersResult: Probability = 1.00, Count = 1
DescribeSuggesters -> describeSuggesters: Probability = 1.00, Count = 1
DescribeSuggestersRequest -> DescribeSuggestersRequest: Probability = 1.00, Count = 1
Invoke<DescribeSuggestersResponse> -> executeDescribeSuggesters: Probability = 1.00, Count = 1
AcceptRow -> acceptRow: Probability = 1.00, Count = 1
firstColumnIndex -> firstColumnIndex: Probability = 1.00, Count = 1
FinnishStemmer -> FinnishStemmer: Probability = 1.00, Count = 1
StopDeploymentResponse -> StopDeploymentResult: Probability = 1.00, Count = 1
StopDeployment -> stopDeployment: Probability = 1.00, Count = 1
StopDeploymentRequest -> StopDeploymentRequest: Probability = 1.00, Count = 1
Invoke<StopDeploymentResponse> -> executeStopDeployment: Probability = 1.00, Count = 1
ListGitHubAccountTokenNamesResponse -> ListGitHubAccountTokenNamesResult: Probability = 1.00, Count = 1
ListGitHubAccountTokenNames -> listGitHubAccountTokenNames: Probability = 1.00, Count = 1
ListGitHubAccountTokenNamesRequest -> ListGitHubAccountTokenNamesRequest: Probability = 1.00, Count = 1
Invoke<ListGitHubAccountTokenNamesResponse> -> executeListGitHubAccountTokenNames: Probability = 1.00, Count = 1
CreateBackupResponse -> CreateBackupResult: Probability = 1.00, Count = 1
CreateBackup -> createBackup: Probability = 1.00, Count = 1
CreateBackupRequest -> CreateBackupRequest: Probability = 1.00, Count = 1
Invoke<CreateBackupResponse> -> executeCreateBackup: Probability = 1.00, Count = 1
ModifyTransitGatewayVpcAttachmentResponse -> ModifyTransitGatewayVpcAttachmentResult: Probability = 1.00, Count = 1
ModifyTransitGatewayVpcAttachment -> modifyTransitGatewayVpcAttachment: Probability = 1.00, Count = 1
ModifyTransitGatewayVpcAttachmentRequest -> ModifyTransitGatewayVpcAttachmentRequest: Probability = 1.00, Count = 1
Invoke<ModifyTransitGatewayVpcAttachmentResponse> -> executeModifyTransitGatewayVpcAttachment: Probability = 1.00, Count = 1
RejectSkillResponse -> RejectSkillResult: Probability = 1.00, Count = 1
RejectSkill -> rejectSkill: Probability = 1.00, Count = 1
RejectSkillRequest -> RejectSkillRequest: Probability = 1.00, Count = 1
Invoke<RejectSkillResponse> -> executeRejectSkill: Probability = 1.00, Count = 1
GetHexString -> getHexString: Probability = 1.00, Count = 1
GetGnumericPart -> getGnumericPart: Probability = 0.43, Count = 3
GetGnumericPart -> +: Probability = 0.57, Count = 4
"<prefixWildcard -> "<prefixWildcard: Probability = 1.00, Count = 1
this.m_text+ -> this.text+: Probability = 1.00, Count = 1
GetOSSImageAccessRequest -> GetOSSImageAccessRequest: Probability = 1.00, Count = 1
"GetOSSImageAccess" -> "GetOSSImageAccess": Probability = 1.00, Count = 1
DeleteFleetsResponse -> DeleteFleetsResult: Probability = 1.00, Count = 1
DeleteFleets -> deleteFleets: Probability = 1.00, Count = 1
DeleteFleetsRequest -> DeleteFleetsRequest: Probability = 1.00, Count = 1
Invoke<DeleteFleetsResponse> -> executeDeleteFleets: Probability = 1.00, Count = 1
this._enclosing.set -> AbstractList.this.set: Probability = 1.00, Count = 1
this.lastPosition, -> lastPosition,: Probability = 1.00, Count = 1
Paths -> Paths: Probability = 0.50, Count = 1
Paths -> paths,: Probability = 0.50, Count = 1
_paths -> setPaths: Probability = 1.00, Count = 1
getPrecision -> getPrecision: Probability = 1.00, Count = 1
AddSubRecord -> addSubRecord: Probability = 1.00, Count = 1
SubRecord -> SubRecord: Probability = 1.00, Count = 3
subrecords.Add -> subrecords.add: Probability = 1.00, Count = 3
DisassociateIpGroupsResponse -> DisassociateIpGroupsResult: Probability = 1.00, Count = 1
DisassociateIpGroups -> disassociateIpGroups: Probability = 1.00, Count = 1
DisassociateIpGroupsRequest -> DisassociateIpGroupsRequest: Probability = 1.00, Count = 1
Invoke<DisassociateIpGroupsResponse> -> executeDisassociateIpGroups: Probability = 1.00, Count = 1
Mkdirs -> mkdirs: Probability = 1.00, Count = 1
skipExisting -> skipExisting: Probability = 0.67, Count = 2
skipExisting -> !d.mkdirs: Probability = 0.33, Count = 1
d.GetAbsolutePath -> d.getAbsolutePath: Probability = 1.00, Count = 1
GetImageManifestRequest -> GetImageManifestRequest: Probability = 1.00, Count = 1
"GetImageManifest", -> "GetImageManifest",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/tags/[Tag]/manifest" -> "/repos/[RepoNamespace]/[RepoName]/tags/[Tag]/manifest": Probability = 1.00, Count = 1
ListIdentitiesResponse -> ListIdentitiesResult: Probability = 1.00, Count = 2
ListIdentities -> listIdentities: Probability = 1.00, Count = 3
ListIdentitiesRequest -> ListIdentitiesRequest: Probability = 1.00, Count = 2
Invoke<ListIdentitiesResponse> -> executeListIdentities: Probability = 1.00, Count = 1
byte[Size] -> byte[LittleEndianConsts.INT_SIZE*2+_value.length]: Probability = 0.33, Count = 1
byte[Size] -> LittleEndianByteArrayOutputStream: Probability = 0.67, Count = 2
IPicture -> HSSFPicture: Probability = 1.00, Count = 3
legacyCredential.AccessSecret -> legacyCredential.getAccessSecret: Probability = 1.00, Count = 1
CreateResolverEndpointResponse -> CreateResolverEndpointResult: Probability = 1.00, Count = 1
CreateResolverEndpoint -> createResolverEndpoint: Probability = 1.00, Count = 1
CreateResolverEndpointRequest -> CreateResolverEndpointRequest: Probability = 1.00, Count = 1
Invoke<CreateResolverEndpointResponse> -> executeCreateResolverEndpoint: Probability = 1.00, Count = 1
HunspellStemFilterFactory -> HunspellStemFilterFactory: Probability = 1.00, Count = 1
CancelSpotInstanceRequestsResponse -> CancelSpotInstanceRequestsResult: Probability = 1.00, Count = 1
CancelSpotInstanceRequests -> cancelSpotInstanceRequests: Probability = 1.00, Count = 1
Invoke<CancelSpotInstanceRequestsResponse> -> executeCancelSpotInstanceRequests: Probability = 1.00, Count = 1
ToHexCharArray -> toHexCharArray: Probability = 1.00, Count = 2
DeleteVaultAccessPolicyResponse -> DeleteVaultAccessPolicyResult: Probability = 1.00, Count = 1
DeleteVaultAccessPolicy -> deleteVaultAccessPolicy: Probability = 1.00, Count = 1
DeleteVaultAccessPolicyRequest -> DeleteVaultAccessPolicyRequest: Probability = 1.00, Count = 1
Invoke<DeleteVaultAccessPolicyResponse> -> executeDeleteVaultAccessPolicy: Probability = 1.00, Count = 1
SpanOrBuilder -> SpanOrBuilder: Probability = 1.00, Count = 1
DescribeConnectionsOnInterconnectResponse -> DescribeConnectionsOnInterconnectResult: Probability = 1.00, Count = 1
DescribeConnectionsOnInterconnect -> describeConnectionsOnInterconnect: Probability = 1.00, Count = 1
DescribeConnectionsOnInterconnectRequest -> DescribeConnectionsOnInterconnectRequest: Probability = 1.00, Count = 1
Invoke<DescribeConnectionsOnInterconnectResponse> -> executeDescribeConnectionsOnInterconnect: Probability = 1.00, Count = 1
MultiBoolFunction -> MultiBoolFunction: Probability = 1.00, Count = 1
IList<ValueSource> -> List<ValueSource>: Probability = 1.00, Count = 2
sources -> sources: Probability = 1.00, Count = 4
this.m_sources -> this.sources: Probability = 1.00, Count = 2
transliterator -> transliterator: Probability = 1.00, Count = 2
ExtendA -> extendA: Probability = 1.00, Count = 1
endA++ -> endA++: Probability = 1.00, Count = 1
DeleteReceiptRuleSetResponse -> DeleteReceiptRuleSetResult: Probability = 1.00, Count = 1
DeleteReceiptRuleSet -> deleteReceiptRuleSet: Probability = 1.00, Count = 1
DeleteReceiptRuleSetRequest -> DeleteReceiptRuleSetRequest: Probability = 1.00, Count = 1
Invoke<DeleteReceiptRuleSetResponse> -> executeDeleteReceiptRuleSet: Probability = 1.00, Count = 1
PutRetentionPolicyRequest -> PutRetentionPolicyRequest: Probability = 1.00, Count = 1
retentionInDays -> retentionInDays: Probability = 1.00, Count = 2
_retentionInDays -> setRetentionInDays: Probability = 1.00, Count = 1
InsertRow -> insertRow: Probability = 1.00, Count = 1
"TermState" -> "TermState": Probability = 1.00, Count = 1
SetHeads -> setHeads: Probability = 1.00, Count = 1
this.heads -> this.heads: Probability = 1.00, Count = 1
DeleteNode -> deleteNode: Probability = 1.00, Count = 2
this.culture.TextInfo.ToLower -> key.trim: Probability = 1.00, Count = 1
Object[][] -> Object[][]: Probability = 0.67, Count = 2
Object[][] -> getTokenArrayValues: Probability = 0.33, Count = 1
_arrayValues -> _arrayValues: Probability = 0.75, Count = 3
_arrayValues -> ConstantValueParser.getEncodedSize: Probability = 0.25, Count = 1
PutIntegrationResponseResponse -> PutIntegrationResponseResult: Probability = 1.00, Count = 1
PutIntegrationResponse -> putIntegrationResponse: Probability = 1.00, Count = 1
PutIntegrationResponseRequest -> PutIntegrationResponseRequest: Probability = 1.00, Count = 1
Invoke<PutIntegrationResponseResponse> -> executePutIntegrationResponse: Probability = 1.00, Count = 1
SubscriptionId -> subscriptionId: Probability = 1.00, Count = 1
ReleaseStaticIpResponse -> ReleaseStaticIpResult: Probability = 1.00, Count = 1
ReleaseStaticIp -> releaseStaticIp: Probability = 1.00, Count = 1
ReleaseStaticIpRequest -> ReleaseStaticIpRequest: Probability = 1.00, Count = 1
Invoke<ReleaseStaticIpResponse> -> executeReleaseStaticIp: Probability = 1.00, Count = 1
ListConfigurationSetsResponse -> ListConfigurationSetsResult: Probability = 1.00, Count = 1
ListConfigurationSets -> listConfigurationSets: Probability = 1.00, Count = 1
ListConfigurationSetsRequest -> ListConfigurationSetsRequest: Probability = 1.00, Count = 1
Invoke<ListConfigurationSetsResponse> -> executeListConfigurationSets: Probability = 1.00, Count = 1
UpdateRecordsResponse -> UpdateRecordsResult: Probability = 1.00, Count = 1
UpdateRecords -> updateRecords: Probability = 1.00, Count = 1
UpdateRecordsRequest -> UpdateRecordsRequest: Probability = 1.00, Count = 1
Invoke<UpdateRecordsResponse> -> executeUpdateRecords: Probability = 1.00, Count = 1
_tokenFactorySourcePair, -> _tokenFactorySourcePair,: Probability = 0.50, Count = 1
_tokenFactorySourcePair, -> _type,: Probability = 0.50, Count = 1
_type, -> _text,: Probability = 1.00, Count = 1
_channel, -> _channel,: Probability = 1.00, Count = 1
CharIndex -> getCharIndex: Probability = 1.00, Count = 1
_tokenStartLine, -> -1,_tokenStartLine,: Probability = 1.00, Count = 1
_tokenStartColumn -> _tokenStartCharPositionInLine: Probability = 1.00, Count = 2
instance -> instance: Probability = 0.75, Count = 3
instance -> being: Probability = 0.25, Count = 1
used -> used: Probability = 1.00, Count = 5
m_lastCommit -> lastCommit: Probability = 0.75, Count = 3
m_lastCommit -> snapshot": Probability = 0.25, Count = 1
m_searcherMgr -> searcherMgr: Probability = 1.00, Count = 3
suffixes.Length -> suffixes.length: Probability = 1.00, Count = 3
StemmerUtil.DeleteN -> deleteN: Probability = 1.00, Count = 2
SeriesListRecord -> SeriesListRecord: Probability = 1.00, Count = 3
short[nItems] -> short[nItems]: Probability = 1.00, Count = 1
ss[i] -> ss[i]: Probability = 1.00, Count = 1
field_1_seriesNumbers -> field_1_seriesNumbers: Probability = 0.25, Count = 1
field_1_seriesNumbers -> null: Probability = 0.50, Count = 2
field_1_seriesNumbers -> ?: Probability = 0.25, Count = 1
Antlr4.Runtime.Atn.LexerModeAction -> LexerModeAction: Probability = 1.00, Count = 2
GetLineDelimiter -> getLineDelimiter: Probability = 1.00, Count = 1
GetEnd -> getEnd: Probability = 1.00, Count = 3
content[e -> content[e: Probability = 0.75, Count = 3
content[e -> content.length: Probability = 0.25, Count = 1
RoundUnits -> roundUnits: Probability = 1.00, Count = 1
wholePart -> wholePart: Probability = 0.75, Count = 3
wholePart -> FRAC_HALF: Probability = 0.25, Count = 1
de -> wholePart++: Probability = 0.17, Count = 1
de -> de: Probability = 0.33, Count = 2
de -> MAX_REP_WHOLE_PART: Probability = 0.17, Count = 1
de -> wholePart/10,: Probability = 0.17, Count = 1
de -> de+1: Probability = 0.17, Count = 1
wholePart, -> wholePart,: Probability = 1.00, Count = 2
PLSAggregate -> PLSAggregate: Probability = 1.00, Count = 1
_pls -> _pls: Probability = 1.00, Count = 2
List<ContinueRecord> -> ==ContinueRecord.sid: Probability = 0.67, Count = 2
List<ContinueRecord> -> List<ContinueRecord>: Probability = 0.33, Count = 1
_plsContinues -> _plsContinues: Probability = 0.60, Count = 3
_plsContinues -> ContinueRecord[temp.size: Probability = 0.20, Count = 1
_plsContinues -> EMPTY_CONTINUE_RECORD_ARRAY: Probability = 0.20, Count = 1
AssociateDelegateToResourceResponse -> AssociateDelegateToResourceResult: Probability = 1.00, Count = 1
AssociateDelegateToResource -> associateDelegateToResource: Probability = 1.00, Count = 1
AssociateDelegateToResourceRequest -> AssociateDelegateToResourceRequest: Probability = 1.00, Count = 1
Invoke<AssociateDelegateToResourceResponse> -> executeAssociateDelegateToResource: Probability = 1.00, Count = 1
SetDefault -> setDefault: Probability = 1.00, Count = 1
EscherProperty -> EscherProperty: Probability = 0.56, Count = 5
EscherProperty -> <T: Probability = 0.11, Count = 1
EscherProperty -> extends: Probability = 0.11, Count = 1
EscherProperty -> T: Probability = 0.22, Count = 2
GetEscherProperty -> getEscherProperty: Probability = 1.00, Count = 1
properties[index] -> properties.get: Probability = 1.00, Count = 1
newElements[index] -> slice.from,: Probability = 0.43, Count = 3
newElements[index] -> newElements[index]: Probability = 0.43, Count = 3
newElements[index] -> slice: Probability = 0.14, Count = 1
doc, -> doc,: Probability = 0.46, Count = 6
doc, -> freq,: Probability = 0.31, Count = 4
doc, -> norm: Probability = 0.23, Count = 3
IBits -> Bits: Probability = 1.00, Count = 5
bits -> bits: Probability = 0.80, Count = 4
bits -> subs[reader]: Probability = 0.20, Count = 1
starts[reader] -> doc-starts[reader]: Probability = 1.00, Count = 1
DeleteFieldLevelEncryptionProfileResponse -> DeleteFieldLevelEncryptionProfileResult: Probability = 1.00, Count = 1
DeleteFieldLevelEncryptionProfile -> deleteFieldLevelEncryptionProfile: Probability = 1.00, Count = 1
DeleteFieldLevelEncryptionProfileRequest -> DeleteFieldLevelEncryptionProfileRequest: Probability = 1.00, Count = 1
Invoke<DeleteFieldLevelEncryptionProfileResponse> -> executeDeleteFieldLevelEncryptionProfile: Probability = 1.00, Count = 1
_input -> in: Probability = 0.33, Count = 2
_input -> _input: Probability = 0.67, Count = 4
.GetTypeInfo -> AlreadyClosedException: Probability = 1.00, Count = 2
SimpleTextTermVectorsReader -> SimpleTextTermVectorsReader: Probability = 1.00, Count = 1
_offsets, -> offsets,: Probability = 1.00, Count = 2
_input.Clone -> in.clone: Probability = 1.00, Count = 2
GetEndB -> getEndB: Probability = 1.00, Count = 1
DescribeAutoMLJobResponse -> DescribeAutoMLJobResult: Probability = 1.00, Count = 1
DescribeAutoMLJob -> describeAutoMLJob: Probability = 1.00, Count = 1
DescribeAutoMLJobRequest -> DescribeAutoMLJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeAutoMLJobResponse> -> executeDescribeAutoMLJob: Probability = 1.00, Count = 1
activeCellRow, -> activeCellRow,: Probability = 0.60, Count = 3
activeCellRow, -> CellRangeAddress8Bit[]: Probability = 0.20, Count = 1
activeCellRow, -> activeCellCol,: Probability = 0.20, Count = 1
activeCellCol -> activeCellCol: Probability = 0.75, Count = 3
activeCellCol -> activeCellRow: Probability = 0.25, Count = 1
comgen -> IndexCommits: Probability = 0.17, Count = 1
comgen -> different: Probability = 0.17, Count = 1
comgen -> instances": Probability = 0.17, Count = 1
comgen -> comgen: Probability = 0.33, Count = 2
comgen -> Long.compare: Probability = 0.17, Count = 1
Reserved -> getReserved: Probability = 1.00, Count = 1
PhoneticFilter -> PhoneticFilter: Probability = 1.00, Count = 2
StartMatchmakingResponse -> StartMatchmakingResult: Probability = 1.00, Count = 1
StartMatchmaking -> startMatchmaking: Probability = 1.00, Count = 1
StartMatchmakingRequest -> StartMatchmakingRequest: Probability = 1.00, Count = 1
Invoke<StartMatchmakingResponse> -> executeStartMatchmaking: Probability = 1.00, Count = 1
CreateReusableDelegationSetResponse -> CreateReusableDelegationSetResult: Probability = 1.00, Count = 1
CreateReusableDelegationSet -> createReusableDelegationSet: Probability = 1.00, Count = 1
CreateReusableDelegationSetRequest -> CreateReusableDelegationSetRequest: Probability = 1.00, Count = 1
Invoke<CreateReusableDelegationSetResponse> -> executeCreateReusableDelegationSet: Probability = 1.00, Count = 1
pm -> pm: Probability = 0.83, Count = 5
pm -> this.lock: Probability = 0.17, Count = 1
GetRegionId -> synchronized: Probability = 0.50, Count = 1
GetRegionId -> getRegionId: Probability = 0.50, Count = 1
CreateVpcEndpointServiceConfigurationResponse -> CreateVpcEndpointServiceConfigurationResult: Probability = 1.00, Count = 1
CreateVpcEndpointServiceConfiguration -> createVpcEndpointServiceConfiguration: Probability = 1.00, Count = 1
CreateVpcEndpointServiceConfigurationRequest -> CreateVpcEndpointServiceConfigurationRequest: Probability = 1.00, Count = 1
Invoke<CreateVpcEndpointServiceConfigurationResponse> -> executeCreateVpcEndpointServiceConfiguration: Probability = 1.00, Count = 1
GetField -> getField: Probability = 1.00, Count = 2
LazyField -> LazyField: Probability = 1.00, Count = 2
values.Add -> values.add: Probability = 1.00, Count = 3
PACK_DELTA -> PACK_DELTA: Probability = 1.00, Count = 2
InactivatePhotosRequest -> InactivatePhotosRequest: Probability = 1.00, Count = 1
"InactivatePhotos", -> "InactivatePhotos",: Probability = 1.00, Count = 1
DescribeEventSubscriptionsResponse -> DescribeEventSubscriptionsResult: Probability = 1.00, Count = 2
DescribeEventSubscriptions -> describeEventSubscriptions: Probability = 1.00, Count = 3
DescribeEventSubscriptionsRequest -> DescribeEventSubscriptionsRequest: Probability = 1.00, Count = 2
byteBuffer.getShort -> byteBuffer.getShort: Probability = 1.00, Count = 2
IsExportAll -> isExportAll: Probability = 1.00, Count = 1
exportAll -> exportAll: Probability = 1.00, Count = 4
paramValue -> validateSecondArg: Probability = 0.20, Count = 1
paramValue -> paramValue: Probability = 0.40, Count = 2
paramValue -> comparisonOperator: Probability = 0.20, Count = 1
paramValue -> NOT_BETWEEN:if: Probability = 0.20, Count = 1
"expr2 -> BETWEEN:case: Probability = 0.50, Count = 1
"expr2 -> "expr2: Probability = 0.50, Count = 1
'between' -> 'between': Probability = 0.50, Count = 1
'between' -> comparisons": Probability = 0.50, Count = 1
UpdateSchemaResponse -> UpdateSchemaResult: Probability = 1.00, Count = 1
UpdateSchema -> updateSchema: Probability = 1.00, Count = 1
UpdateSchemaRequest -> UpdateSchemaRequest: Probability = 1.00, Count = 1
Invoke<UpdateSchemaResponse> -> executeUpdateSchema: Probability = 1.00, Count = 1
PortugueseMinimalStemFilterFactory -> PortugueseMinimalStemFilterFactory: Probability = 1.00, Count = 1
SeriesChartGroupIndexRecord -> SeriesChartGroupIndexRecord: Probability = 1.00, Count = 1
DescribeComponentConfigurationResponse -> DescribeComponentConfigurationResult: Probability = 1.00, Count = 1
DescribeComponentConfiguration -> describeComponentConfiguration: Probability = 1.00, Count = 1
DescribeComponentConfigurationRequest -> DescribeComponentConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DescribeComponentConfigurationResponse> -> executeDescribeComponentConfiguration: Probability = 1.00, Count = 1
region.Copy -> region.copy: Probability = 1.00, Count = 1
DescribeClientVpnAuthorizationRulesResponse -> DescribeClientVpnAuthorizationRulesResult: Probability = 1.00, Count = 1
DescribeClientVpnAuthorizationRules -> describeClientVpnAuthorizationRules: Probability = 1.00, Count = 1
DescribeClientVpnAuthorizationRulesRequest -> DescribeClientVpnAuthorizationRulesRequest: Probability = 1.00, Count = 1
Invoke<DescribeClientVpnAuthorizationRulesResponse> -> executeDescribeClientVpnAuthorizationRules: Probability = 1.00, Count = 1
GetRule -> getRule: Probability = 1.00, Count = 2
ruleRecord -> ruleRecord: Probability = 1.00, Count = 2
cfAggregate.GetRule -> cfAggregate.getRule: Probability = 1.00, Count = 1
_workbook, -> sheet,: Probability = 1.00, Count = 1
GetAdvertisedRef -> getAdvertisedRef: Probability = 1.00, Count = 1
advertisedRefs.Get -> advertisedRefs.get: Probability = 1.00, Count = 2
DeleteCustomVerificationEmailTemplateResponse -> DeleteCustomVerificationEmailTemplateResult: Probability = 1.00, Count = 1
DeleteCustomVerificationEmailTemplate -> deleteCustomVerificationEmailTemplate: Probability = 1.00, Count = 1
DeleteCustomVerificationEmailTemplateRequest -> DeleteCustomVerificationEmailTemplateRequest: Probability = 1.00, Count = 1
Invoke<DeleteCustomVerificationEmailTemplateResponse> -> executeDeleteCustomVerificationEmailTemplate: Probability = 1.00, Count = 1
CreateVpcEndpointConnectionNotificationResponse -> CreateVpcEndpointConnectionNotificationResult: Probability = 1.00, Count = 1
CreateVpcEndpointConnectionNotification -> createVpcEndpointConnectionNotification: Probability = 1.00, Count = 1
CreateVpcEndpointConnectionNotificationRequest -> CreateVpcEndpointConnectionNotificationRequest: Probability = 1.00, Count = 1
Invoke<CreateVpcEndpointConnectionNotificationResponse> -> executeCreateVpcEndpointConnectionNotification: Probability = 1.00, Count = 1
rnum -> rnum: Probability = 1.00, Count = 4
CompleteMultipartUploadRequest -> CompleteMultipartUploadRequest: Probability = 1.00, Count = 2
uploadId, -> uploadId,: Probability = 1.00, Count = 2
archiveSize, -> archiveSize,: Probability = 1.00, Count = 2
checksum -> checksum: Probability = 1.00, Count = 4
_archiveSize -> setArchiveSize: Probability = 1.00, Count = 2
archiveSize -> archiveSize: Probability = 1.00, Count = 2
_checksum -> setChecksum: Probability = 1.00, Count = 2
ClearRect -> clearRect: Probability = 1.00, Count = 1
Color -> Color: Probability = 1.00, Count = 2
color -> color: Probability = 1.00, Count = 5
foreground -> foreground: Probability = 1.00, Count = 2
getRawFragment -> getRawFragment: Probability = 1.00, Count = 1
Sinh -> sinh: Probability = 1.00, Count = 1
GetMembersResponse -> GetMembersResult: Probability = 1.00, Count = 1
GetMembers -> getMembers: Probability = 1.00, Count = 1
GetMembersRequest -> GetMembersRequest: Probability = 1.00, Count = 1
Invoke<GetMembersResponse> -> executeGetMembers: Probability = 1.00, Count = 1
IPatternFormatting -> HSSFPatternFormatting: Probability = 1.00, Count = 2
CreatePatternFormatting -> createPatternFormatting: Probability = 1.00, Count = 1
GetPatternFormatting -> getPatternFormatting: Probability = 1.00, Count = 3
Invoke<DeleteSpotDatafeedSubscriptionResponse> -> executeDeleteSpotDatafeedSubscription: Probability = 1.00, Count = 1
NGit.Revwalk.Filter.SkipRevFilter -> SkipRevFilter: Probability = 1.00, Count = 2
BinarySearchIndexes -> BinarySearchIndexes: Probability = 1.00, Count = 1
highIx -> highIx: Probability = 1.00, Count = 2
SrndBooleanQuery.MakeBooleanQuery -> SrndBooleanQuery.makeBooleanQuery: Probability = 1.00, Count = 2
CloneCommand -> CloneCommand: Probability = 1.00, Count = 2
CloneRepository -> cloneRepository: Probability = 1.00, Count = 1
EnableMetricsCollectionResponse -> EnableMetricsCollectionResult: Probability = 1.00, Count = 1
EnableMetricsCollection -> enableMetricsCollection: Probability = 1.00, Count = 1
EnableMetricsCollectionRequest -> EnableMetricsCollectionRequest: Probability = 1.00, Count = 1
Invoke<EnableMetricsCollectionResponse> -> executeEnableMetricsCollection: Probability = 1.00, Count = 1
DescribePlayerSessionsResponse -> DescribePlayerSessionsResult: Probability = 1.00, Count = 1
DescribePlayerSessions -> describePlayerSessions: Probability = 1.00, Count = 1
DescribePlayerSessionsRequest -> DescribePlayerSessionsRequest: Probability = 1.00, Count = 1
Invoke<DescribePlayerSessionsResponse> -> executeDescribePlayerSessions: Probability = 1.00, Count = 1
UpdateDocumentVersionResponse -> UpdateDocumentVersionResult: Probability = 1.00, Count = 1
UpdateDocumentVersion -> updateDocumentVersion: Probability = 1.00, Count = 1
UpdateDocumentVersionRequest -> UpdateDocumentVersionRequest: Probability = 1.00, Count = 1
Invoke<UpdateDocumentVersionResponse> -> executeUpdateDocumentVersion: Probability = 1.00, Count = 1
SetTagger -> setTagger: Probability = 1.00, Count = 1
this.tagger -> this.tagger: Probability = 1.00, Count = 1
PatternReplaceFilterFactory -> PatternReplaceFilterFactory: Probability = 1.00, Count = 1
replaceAll -> replaceAll: Probability = 1.00, Count = 3
IList<T> -> List<T>: Probability = 0.62, Count = 5
IList<T> -> List: Probability = 0.38, Count = 3
AsList -> asList: Probability = 1.00, Count = 1
outputList -> List<T>: Probability = 0.50, Count = 4
outputList -> outputList: Probability = 0.50, Count = 4
keyName.ToLower -> keyName.toLowerCase: Probability = 0.50, Count = 1
keyName.ToLower -> Locale.ROOT: Probability = 0.50, Count = 1
DeleteTaskSetResponse -> DeleteTaskSetResult: Probability = 1.00, Count = 1
DeleteTaskSet -> deleteTaskSet: Probability = 1.00, Count = 1
DeleteTaskSetRequest -> DeleteTaskSetRequest: Probability = 1.00, Count = 1
Invoke<DeleteTaskSetResponse> -> executeDeleteTaskSet: Probability = 1.00, Count = 1
DescribeLifecycleConfigurationResponse -> DescribeLifecycleConfigurationResult: Probability = 1.00, Count = 1
DescribeLifecycleConfiguration -> describeLifecycleConfiguration: Probability = 1.00, Count = 1
DescribeLifecycleConfigurationRequest -> DescribeLifecycleConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DescribeLifecycleConfigurationResponse> -> executeDescribeLifecycleConfiguration: Probability = 1.00, Count = 1
DescribeNodegroupResponse -> DescribeNodegroupResult: Probability = 1.00, Count = 1
DescribeNodegroup -> describeNodegroup: Probability = 1.00, Count = 1
DescribeNodegroupRequest -> DescribeNodegroupRequest: Probability = 1.00, Count = 1
Invoke<DescribeNodegroupResponse> -> executeDescribeNodegroup: Probability = 1.00, Count = 1
DeleteDirectConnectGatewayResponse -> DeleteDirectConnectGatewayResult: Probability = 1.00, Count = 1
DeleteDirectConnectGateway -> deleteDirectConnectGateway: Probability = 1.00, Count = 1
DeleteDirectConnectGatewayRequest -> DeleteDirectConnectGatewayRequest: Probability = 1.00, Count = 1
Invoke<DeleteDirectConnectGatewayResponse> -> executeDeleteDirectConnectGateway: Probability = 1.00, Count = 1
AddCommand -> AddCommand: Probability = 1.00, Count = 3
UpdateStageResponse -> UpdateStageResult: Probability = 1.00, Count = 1
UpdateStage -> updateStage: Probability = 1.00, Count = 1
UpdateStageRequest -> UpdateStageRequest: Probability = 1.00, Count = 1
Invoke<UpdateStageResponse> -> executeUpdateStage: Probability = 1.00, Count = 1
ModifyIdFormatResponse -> ModifyIdFormatResult: Probability = 1.00, Count = 1
ModifyIdFormat -> modifyIdFormat: Probability = 1.00, Count = 1
ModifyIdFormatRequest -> ModifyIdFormatRequest: Probability = 1.00, Count = 1
Invoke<ModifyIdFormatResponse> -> executeModifyIdFormat: Probability = 1.00, Count = 1
RemoveRoleFromDBClusterResponse -> RemoveRoleFromDBClusterResult: Probability = 1.00, Count = 1
RemoveRoleFromDBCluster -> removeRoleFromDBCluster: Probability = 1.00, Count = 1
RemoveRoleFromDBClusterRequest -> RemoveRoleFromDBClusterRequest: Probability = 1.00, Count = 1
Invoke<RemoveRoleFromDBClusterResponse> -> executeRemoveRoleFromDBCluster: Probability = 1.00, Count = 1
ListPhoneNumbersResponse -> ListPhoneNumbersResult: Probability = 1.00, Count = 1
ListPhoneNumbers -> listPhoneNumbers: Probability = 1.00, Count = 1
ListPhoneNumbersRequest -> ListPhoneNumbersRequest: Probability = 1.00, Count = 1
Invoke<ListPhoneNumbersResponse> -> executeListPhoneNumbers: Probability = 1.00, Count = 1
list.Equals -> list.equals: Probability = 1.00, Count = 2
PullCommand -> PullCommand: Probability = 1.00, Count = 2
Pull -> pull: Probability = 1.00, Count = 1
"ALL" -> "ALL": Probability = 1.00, Count = 1
CreateIngestionResponse -> CreateIngestionResult: Probability = 1.00, Count = 1
CreateIngestion -> createIngestion: Probability = 1.00, Count = 1
CreateIngestionRequest -> CreateIngestionRequest: Probability = 1.00, Count = 1
Invoke<CreateIngestionResponse> -> executeCreateIngestion: Probability = 1.00, Count = 1
StashCreateCommand -> StashCreateCommand: Probability = 1.00, Count = 1
person -> person: Probability = 1.00, Count = 3
asShortBuffer -> asShortBuffer: Probability = 1.00, Count = 1
java.nio.ShortToByteBufferAdapter.asShortBuffer -> ShortToByteBufferAdapter.asShortBuffer: Probability = 1.00, Count = 1
FeatSmartTag -> FeatSmartTag: Probability = 1.00, Count = 1
SetSkip -> setSkip: Probability = 1.00, Count = 1
this.skip -> this.skip: Probability = 1.00, Count = 1
GetFormulaTokens -> getFormulaTokens: Probability = 1.00, Count = 2
FormulaRecord -> FormulaRecord: Probability = 1.00, Count = 6
formulaRow -> formulaRow: Probability = 1.00, Count = 1
formulaColumn -> formula.getRow: Probability = 0.20, Count = 1
formulaColumn -> formulaColumn: Probability = 0.60, Count = 3
formulaColumn -> formula.getColumn: Probability = 0.20, Count = 1
!IsInRange -> !isInRange: Probability = 1.00, Count = 2
formulaRow, -> formulaRow,: Probability = 1.00, Count = 2
regionEnd -> regionEnd: Probability = 1.00, Count = 1
GetBehindCount -> getBehindCount: Probability = 1.00, Count = 1
behindCount -> behindCount: Probability = 1.00, Count = 1
PutImageScanningConfigurationResponse -> PutImageScanningConfigurationResult: Probability = 1.00, Count = 1
PutImageScanningConfiguration -> putImageScanningConfiguration: Probability = 1.00, Count = 1
PutImageScanningConfigurationRequest -> PutImageScanningConfigurationRequest: Probability = 1.00, Count = 1
Invoke<PutImageScanningConfigurationResponse> -> executePutImageScanningConfiguration: Probability = 1.00, Count = 1
BlameCommand -> BlameCommand: Probability = 1.00, Count = 2
Blame -> blame: Probability = 1.00, Count = 1
TextToBytesRef -> textToBytesRef: Probability = 1.00, Count = 1
thisDouble -> thisDouble,: Probability = 0.17, Count = 1
thisDouble -> thisDouble: Probability = 0.83, Count = 5
otherDouble -> otherDouble: Probability = 1.00, Count = 6
CreateIpGroupResponse -> CreateIpGroupResult: Probability = 1.00, Count = 1
CreateIpGroup -> createIpGroup: Probability = 1.00, Count = 1
CreateIpGroupRequest -> CreateIpGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateIpGroupResponse> -> executeCreateIpGroup: Probability = 1.00, Count = 1
base.substring -> super.substring: Probability = 1.00, Count = 3
ALL -> ALL: Probability = 1.00, Count = 10
authoritySafePath -> authoritySafePath: Probability = 1.00, Count = 1
SmudgeRacilyClean -> smudgeRacilyClean: Probability = 1.00, Count = 1
infoOffset -> infoOffset: Probability = 1.00, Count = 3
info, -> info,: Probability = 1.00, Count = 3
rawData.Length, -> rawData.length,: Probability = 1.00, Count = 1
RemoveAutoScalingPolicyResponse -> RemoveAutoScalingPolicyResult: Probability = 1.00, Count = 1
RemoveAutoScalingPolicy -> removeAutoScalingPolicy: Probability = 1.00, Count = 1
RemoveAutoScalingPolicyRequest -> RemoveAutoScalingPolicyRequest: Probability = 1.00, Count = 1
Invoke<RemoveAutoScalingPolicyResponse> -> executeRemoveAutoScalingPolicy: Probability = 1.00, Count = 1
NextSlice -> nextSlice: Probability = 1.00, Count = 3
buffer[upto++] -> buffer[upto++]: Probability = 1.00, Count = 4
CreateAliasResponse -> CreateAliasResult: Probability = 1.00, Count = 1
CreateAlias -> createAlias: Probability = 1.00, Count = 1
CreateAliasRequest -> CreateAliasRequest: Probability = 1.00, Count = 1
Invoke<CreateAliasResponse> -> executeCreateAlias: Probability = 1.00, Count = 1
getRawSchemeSpecificPart -> getRawSchemeSpecificPart: Probability = 1.00, Count = 1
CreateRouteResponseResponse -> CreateRouteResponseResult: Probability = 1.00, Count = 1
CreateRouteResponse -> createRouteResponse: Probability = 0.50, Count = 1
CreateRouteResponse -> CreateRouteResult: Probability = 0.50, Count = 1
CreateRouteResponseRequest -> CreateRouteResponseRequest: Probability = 1.00, Count = 1
Invoke<CreateRouteResponseResponse> -> executeCreateRouteResponse: Probability = 1.00, Count = 1
Antlr4.Runtime.Atn.LexerCustomAction -> LexerCustomAction: Probability = 0.75, Count = 3
Antlr4.Runtime.Atn.LexerCustomAction -> other.ruleIndex&&: Probability = 0.25, Count = 1
other.actionIndex -> other.actionIndex: Probability = 1.00, Count = 1
offsetEnd -> offsetEnd: Probability = 1.00, Count = 4
blockLeft -> blockLeft: Probability = 0.58, Count = 7
blockLeft -> currentBlockUpto,b,: Probability = 0.17, Count = 2
blockLeft -> offset,blockLeft: Probability = 0.08, Count = 1
blockLeft -> currentBlock,: Probability = 0.17, Count = 2
NextBlock -> nextBlock: Probability = 1.00, Count = 3
FileResolver -> FileResolver: Probability = 1.00, Count = 1
basePath, -> basePath,: Probability = 1.00, Count = 1
ExportDirectory -> exportDirectory: Probability = 1.00, Count = 1
basePath -> basePath: Probability = 1.00, Count = 1
SetExportAll -> setExportAll: Probability = 1.00, Count = 2
list.add -> list.add: Probability = 1.00, Count = 1
replaceFirst -> replaceFirst: Probability = 1.00, Count = 1
appendReplacement -> appendReplacement: Probability = 1.00, Count = 2
Format2DRefAsString -> format2DRefAsString: Probability = 1.00, Count = 1
TrimFromLast -> trimFromLast: Probability = 1.00, Count = 1
stripString -> stripString: Probability = 0.67, Count = 2
stripString -> str.lastIndexOf: Probability = 0.33, Count = 1
tf_hyper_max -> tf_hyper_max: Probability = 1.00, Count = 2
tf_hyper_base -> tf_hyper_base: Probability = 1.00, Count = 2
xoffset -> xoffset: Probability = 1.00, Count = 4
tf_hyper_xoffset -> tf_hyper_xoffset: Probability = 1.00, Count = 2
1.0d -> 1.0d: Probability = 1.00, Count = 6
SetConfig -> setConfig: Probability = 1.00, Count = 3
base.SetConfig -> super.setConfig: Probability = 1.00, Count = 3
sortRange -> sortRange: Probability = 1.00, Count = 1
config.Get -> config.get: Probability = 0.68, Count = 13
config.Get -> random: Probability = 0.05, Count = 1
config.Get -> "max.doc.facets",: Probability = 0.05, Count = 1
config.Get -> maxDims: Probability = 0.05, Count = 1
config.Get -> "max.doc.facets.dims",: Probability = 0.05, Count = 1
config.Get -> taskLogStepAtt,: Probability = 0.05, Count = 1
config.Get -> "keep.image.only.docs",: Probability = 0.05, Count = 1
"sort.rng", -> "sort.rng",: Probability = 1.00, Count = 1
20000 -> 20000: Probability = 1.00, Count = 1
Random -> Random: Probability = 1.00, Count = 2
"rand.seed", -> "rand.seed",: Probability = 1.00, Count = 2
regions,IConditionalFormattingRule -> regions,ConditionalFormattingRule: Probability = 1.00, Count = 2
SetObjectInserter -> setObjectInserter: Probability = 0.33, Count = 1
SetObjectInserter -> oi: Probability = 0.67, Count = 2
ObjectInserter -> ObjectInserter: Probability = 1.00, Count = 5
oi -> walk.close: Probability = 0.25, Count = 1
oi -> reader.close: Probability = 0.25, Count = 1
oi -> reader: Probability = 0.50, Count = 2
inserter -> inserter.close: Probability = 0.12, Count = 1
inserter -> inserter: Probability = 0.62, Count = 5
inserter -> walk: Probability = 0.12, Count = 1
inserter -> RevWalk: Probability = 0.12, Count = 1
inserter.Release -> oi.newReader: Probability = 1.00, Count = 1
free -> free: Probability = 0.50, Count = 2
free -> inQueue: Probability = 0.25, Count = 1
free -> sinceLastIndex: Probability = 0.25, Count = 1
GetRemovedList -> getRemovedList: Probability = 1.00, Count = 1
removedList -> removedList: Probability = 1.00, Count = 1
GetTaxonomyReader -> getTaxonomyReader: Probability = 1.00, Count = 1
taxonomyReader -> taxonomyReader: Probability = 1.00, Count = 4
taxonomyReader.IncRef -> taxonomyReader.incRef: Probability = 1.00, Count = 1
query.ToString -> getBooleanQuery: Probability = 0.50, Count = 1
query.ToString -> .toString: Probability = 0.50, Count = 1
Toffs -> Toffs: Probability = 1.00, Count = 8
termsOffsets -> termsOffsets: Probability = 1.00, Count = 3
ClassicFilterFactory -> ClassicFilterFactory: Probability = 1.00, Count = 1
UpdateApplicationResponse -> UpdateApplicationResult: Probability = 1.00, Count = 1
UpdateApplication -> updateApplication: Probability = 1.00, Count = 1
Invoke<UpdateApplicationResponse> -> executeUpdateApplication: Probability = 1.00, Count = 1
PackParser -> PackParser: Probability = 0.50, Count = 1
PackParser -> newPackParser: Probability = 0.50, Count = 1
@bool -> bool: Probability = 1.00, Count = 1
@bool.ToString -> bool: Probability = 1.00, Count = 1
centerY -> centerY: Probability = 1.00, Count = 1
MakeQuery -> Query: Probability = 0.33, Count = 1
MakeQuery -> makeQuery: Probability = 0.67, Count = 2
SpatialArgs -> SpatialArgs: Probability = 1.00, Count = 4
ICircle -> Circle: Probability = 1.00, Count = 3
GetManagedScalingPolicyResponse -> GetManagedScalingPolicyResult: Probability = 1.00, Count = 1
GetManagedScalingPolicy -> getManagedScalingPolicy: Probability = 1.00, Count = 1
GetManagedScalingPolicyRequest -> GetManagedScalingPolicyRequest: Probability = 1.00, Count = 1
Invoke<GetManagedScalingPolicyResponse> -> executeGetManagedScalingPolicy: Probability = 1.00, Count = 1
getFormatSpecifier -> getFormatSpecifier: Probability = 1.00, Count = 1
AddTask -> addTask: Probability = 1.00, Count = 1
task.Depth -> getDepth: Probability = 1.00, Count = 1
Depth -> +1: Probability = 1.00, Count = 1
GetQueueUrlResponse -> GetQueueUrlResult: Probability = 1.00, Count = 2
GetQueueUrl -> getQueueUrl: Probability = 1.00, Count = 3
GetQueueUrlRequest -> GetQueueUrlRequest: Probability = 1.00, Count = 3
Asinh -> asinh: Probability = 1.00, Count = 2
DescribeActivityTypeResponse -> ActivityTypeDetail: Probability = 1.00, Count = 1
DescribeActivityType -> describeActivityType: Probability = 1.00, Count = 1
DescribeActivityTypeRequest -> DescribeActivityTypeRequest: Probability = 1.00, Count = 1
Invoke<DescribeActivityTypeResponse> -> executeDescribeActivityType: Probability = 1.00, Count = 1
RegisterTransitGatewayMulticastGroupSourcesResponse -> RegisterTransitGatewayMulticastGroupSourcesResult: Probability = 1.00, Count = 1
RegisterTransitGatewayMulticastGroupSources -> registerTransitGatewayMulticastGroupSources: Probability = 1.00, Count = 1
RegisterTransitGatewayMulticastGroupSourcesRequest -> RegisterTransitGatewayMulticastGroupSourcesRequest: Probability = 1.00, Count = 1
Invoke<RegisterTransitGatewayMulticastGroupSourcesResponse> -> executeRegisterTransitGatewayMulticastGroupSources: Probability = 1.00, Count = 1
onRelease -> onRelease: Probability = 1.00, Count = 1
ImportKeyPairResponse -> ImportKeyPairResult: Probability = 1.00, Count = 1
ImportKeyPair -> importKeyPair: Probability = 1.00, Count = 1
Invoke<ImportKeyPairResponse> -> executeImportKeyPair: Probability = 1.00, Count = 1
Validate -> metricFilterPattern: Probability = 1.00, Count = 1
base.Validate -> this.metricFilterPattern: Probability = 1.00, Count = 1
getTotalTimeInPrediction -> getTotalTimeInPrediction: Probability = 1.00, Count = 1
decisions[i].timeInPrediction -> decisions[i].timeInPrediction: Probability = 1.00, Count = 1
HungarianLightStemFilter -> HungarianLightStemFilter: Probability = 1.00, Count = 1
getDescription -> getDescription: Probability = 1.00, Count = 1
DeleteAlgorithmResponse -> DeleteAlgorithmResult: Probability = 1.00, Count = 1
DeleteAlgorithm -> deleteAlgorithm: Probability = 1.00, Count = 1
DeleteAlgorithmRequest -> DeleteAlgorithmRequest: Probability = 1.00, Count = 1
Invoke<DeleteAlgorithmResponse> -> executeDeleteAlgorithm: Probability = 1.00, Count = 1
SetPrefix -> setPrefix: Probability = 1.00, Count = 1
this.m_prefix -> this.prefix: Probability = 1.00, Count = 1
_childScorer, -> childScorer,: Probability = 1.00, Count = 1
run -> run: Probability = 1.00, Count = 1
this._enclosing.sendAccessibilityEvent -> sendAccessibilityEvent: Probability = 1.00, Count = 1
android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SELECTED -> AccessibilityEvent.TYPE_VIEW_SELECTED: Probability = 1.00, Count = 1
Azure.Storage.Files.Shares.Models.FileProperty -> String: Probability = 1.00, Count = 1
Properties -> apiVersion: Probability = 1.00, Count = 1
OpenNLPPOSFilter -> OpenNLPPOSFilter: Probability = 1.00, Count = 2
OpenNLPOpsFactory.GetPOSTagger -> OpenNLPOpsFactory.getPOSTagger: Probability = 1.00, Count = 1
SendBulkTemplatedEmailResponse -> SendBulkTemplatedEmailResult: Probability = 1.00, Count = 1
SendBulkTemplatedEmail -> sendBulkTemplatedEmail: Probability = 1.00, Count = 1
SendBulkTemplatedEmailRequest -> SendBulkTemplatedEmailRequest: Probability = 1.00, Count = 1
Invoke<SendBulkTemplatedEmailResponse> -> executeSendBulkTemplatedEmail: Probability = 1.00, Count = 1
Sharpen.Util.FloatToRawIntBits -> Float.floatToRawIntBits: Probability = 1.00, Count = 2
TotalTermFreqValueSource -> TotalTermFreqValueSource: Probability = 1.00, Count = 1
indexedField, -> indexedField,: Probability = 1.00, Count = 2
indexedBytes -> indexedBytes: Probability = 1.00, Count = 4
this.m_val -> this.val: Probability = 1.00, Count = 2
this.m_indexedBytes -> this.indexedBytes: Probability = 1.00, Count = 2
ByteBlockPool.BYTE_BLOCK_SIZE -> ByteBlockPool.BYTE_BLOCK_SIZE: Probability = 1.00, Count = 4
BufferOffset -> bufferOffset: Probability = 1.00, Count = 5
ByteBlockPool.BYTE_BLOCK_MASK -> ByteBlockPool.BYTE_BLOCK_MASK: Probability = 1.00, Count = 3
MergeCellsRecord -> MergeCellsRecord: Probability = 0.67, Count = 6
MergeCellsRecord -> MergeCellsRecord.class: Probability = 0.11, Count = 1
MergeCellsRecord -> mcr: Probability = 0.11, Count = 1
MergeCellsRecord -> mcr.getNumAreas: Probability = 0.11, Count = 1
nRegions -> nRegions: Probability = 0.75, Count = 9
nRegions -> CellRangeAddress[nRegions]: Probability = 0.17, Count = 2
nRegions -> _mergedRegions.size: Probability = 0.08, Count = 1
cras -> cras: Probability = 1.00, Count = 4
_startIndex -> _startIndex: Probability = 1.00, Count = 2
IList<FileHeader> -> List<?: Probability = 0.50, Count = 1
IList<FileHeader> -> extends: Probability = 0.50, Count = 1
GetFiles -> FileHeader>: Probability = 0.50, Count = 1
GetFiles -> getFiles: Probability = 0.50, Count = 1
DescribeClusterTracksResponse -> DescribeClusterTracksResult: Probability = 1.00, Count = 1
DescribeClusterTracks -> describeClusterTracks: Probability = 1.00, Count = 1
DescribeClusterTracksRequest -> DescribeClusterTracksRequest: Probability = 1.00, Count = 1
Invoke<DescribeClusterTracksResponse> -> executeDescribeClusterTracks: Probability = 1.00, Count = 1
SetParsedExpression -> setParsedExpression: Probability = 1.00, Count = 2
field_8_parsed_expr -> field_8_parsed_expr: Probability = 1.00, Count = 2
NPOI.SS.Formula.Formula.Create -> Formula.create: Probability = 1.00, Count = 2
ListActivityTypesResponse -> ActivityTypeInfos: Probability = 1.00, Count = 1
ListActivityTypes -> listActivityTypes: Probability = 1.00, Count = 1
ListActivityTypesRequest -> ListActivityTypesRequest: Probability = 1.00, Count = 1
Invoke<ListActivityTypesResponse> -> executeListActivityTypes: Probability = 1.00, Count = 1
DescribeDBSecurityGroupsResponse -> DescribeDBSecurityGroupsResult: Probability = 1.00, Count = 2
DescribeDBSecurityGroups -> describeDBSecurityGroups: Probability = 1.00, Count = 3
DescribeDBSecurityGroupsRequest -> DescribeDBSecurityGroupsRequest: Probability = 1.00, Count = 2
ICollection -> <T>: Probability = 0.33, Count = 1
ICollection -> Set<Long>: Probability = 0.33, Count = 1
ICollection -> Set: Probability = 0.33, Count = 1
GetAllMatchingGroups -> Collection<T>: Probability = 0.50, Count = 1
GetAllMatchingGroups -> getAllMatchingGroups: Probability = 0.50, Count = 1
matchingGroups -> Collection<T>: Probability = 0.50, Count = 1
matchingGroups -> matchingGroups: Probability = 0.50, Count = 1
SetCachedResultBoolean -> setCachedResultBoolean: Probability = 1.00, Count = 1
SpecialCachedValue.CreateCachedBoolean -> FormulaSpecialCachedValue.createCachedBoolean: Probability = 1.00, Count = 1
DoesFormulaReferToDeletedCell -> doesFormulaReferToDeletedCell: Probability = 1.00, Count = 1
IsDeletedCellRef -> isDeletedCellRef: Probability = 1.00, Count = 1
ptgs[i] -> ptg: Probability = 0.20, Count = 1
ptgs[i] -> ptgs[i]: Probability = 0.80, Count = 4
tail -> tail: Probability = 1.00, Count = 1
DeleteIPSetResponse -> DeleteIPSetResult: Probability = 1.00, Count = 1
DeleteIPSet -> deleteIPSet: Probability = 1.00, Count = 1
DeleteIPSetRequest -> DeleteIPSetRequest: Probability = 1.00, Count = 1
Invoke<DeleteIPSetResponse> -> executeDeleteIPSet: Probability = 1.00, Count = 1
this.credentials -> this.credentials: Probability = 1.00, Count = 1
DescribeEntityRecognizerResponse -> DescribeEntityRecognizerResult: Probability = 1.00, Count = 1
DescribeEntityRecognizer -> describeEntityRecognizer: Probability = 1.00, Count = 1
DescribeEntityRecognizerRequest -> DescribeEntityRecognizerRequest: Probability = 1.00, Count = 1
Invoke<DescribeEntityRecognizerResponse> -> executeDescribeEntityRecognizer: Probability = 1.00, Count = 1
RemoveTitle -> removeTitle: Probability = 1.00, Count = 1
PropertyIDMap.PID_TITLE -> PropertyIDMap.PID_TITLE: Probability = 1.00, Count = 1
GetDigestResponse -> GetDigestResult: Probability = 1.00, Count = 1
GetDigest -> getDigest: Probability = 1.00, Count = 1
GetDigestRequest -> GetDigestRequest: Probability = 1.00, Count = 1
Invoke<GetDigestResponse> -> executeGetDigest: Probability = 1.00, Count = 1
CreateStackResponse -> CreateStackResult: Probability = 1.00, Count = 1
CreateStack -> createStack: Probability = 1.00, Count = 1
CreateStackRequest -> CreateStackRequest: Probability = 1.00, Count = 1
Invoke<CreateStackResponse> -> executeCreateStack: Probability = 1.00, Count = 1
AdjustFormula -> adjustFormula: Probability = 1.00, Count = 1
refsWereChanged -> refsWereChanged: Probability = 1.00, Count = 3
newPtg -> newPtg: Probability = 0.60, Count = 3
newPtg -> adjustPtg: Probability = 0.20, Count = 1
newPtg -> ptgs[i],: Probability = 0.20, Count = 1
useAddIndexesDir -> useAddIndexesDir: Probability = 1.00, Count = 1
!isClone -> !isClone: Probability = 1.00, Count = 2
channel.close -> channel.close: Probability = 1.00, Count = 1
fis.close -> fis.close: Probability = 1.00, Count = 1
forwardCount -> forwardCount: Probability = 0.20, Count = 2
forwardCount -> forwardPos,: Probability = 0.10, Count = 1
forwardCount -> 1+forwardCount: Probability = 0.30, Count = 3
forwardCount -> forwardID: Probability = 0.10, Count = 1
forwardCount -> forwardID,: Probability = 0.10, Count = 1
forwardCount -> forwardIndex: Probability = 0.10, Count = 1
forwardCount -> forwardIndex,: Probability = 0.10, Count = 1
"pos=" -> "pos=": Probability = 1.00, Count = 1
forwardCount=" -> forwardCount=": Probability = 1.00, Count = 1
UnlinkSharedFormulas -> unlinkSharedFormulas: Probability = 1.00, Count = 1
_numberOfFormulas -> _numberOfFormulas: Probability = 1.00, Count = 4
_frAggs[i].UnlinkSharedFormula -> _frAggs[i].unlinkSharedFormula: Probability = 1.00, Count = 1
stats.DocFreq -> stats.docFreq: Probability = 1.00, Count = 1
RemoveHeadingPair -> removeHeadingPair: Probability = 1.00, Count = 1
PropertyIDMap.PID_HEADINGPAIR -> PropertyIDMap.PID_HEADINGPAIR: Probability = 1.00, Count = 1
GetPOSTags -> getPOSTags: Probability = 1.00, Count = 1
tagger.tag -> tagger.tag: Probability = 1.00, Count = 1
compiled, -> compiled,: Probability = 0.33, Count = 1
compiled, -> compiled.runAutomaton,: Probability = 0.33, Count = 1
compiled, -> compiled.commonSuffixRef,: Probability = 0.33, Count = 1
startTerm -> startTerm: Probability = 1.00, Count = 2
compiled.Type -> compiled.type: Probability = 1.00, Count = 1
CompiledAutomaton.AUTOMATON_TYPE.NORMAL -> CompiledAutomaton.AUTOMATON_TYPE.NORMAL: Probability = 1.00, Count = 1
CompiledAutomaton.getTermsEnum -> CompiledAutomaton.getTermsEnum: Probability = 0.50, Count = 1
CompiledAutomaton.getTermsEnum -> instead": Probability = 0.50, Count = 1
IntersectEnum -> IntersectTermsEnum: Probability = 0.50, Count = 1
IntersectEnum -> compiled.automaton,: Probability = 0.50, Count = 1
AttachLoadBalancerToSubnetsResponse -> AttachLoadBalancerToSubnetsResult: Probability = 1.00, Count = 1
AttachLoadBalancerToSubnets -> attachLoadBalancerToSubnets: Probability = 1.00, Count = 1
AttachLoadBalancerToSubnetsRequest -> AttachLoadBalancerToSubnetsRequest: Probability = 1.00, Count = 1
Invoke<AttachLoadBalancerToSubnetsResponse> -> executeAttachLoadBalancerToSubnets: Probability = 1.00, Count = 1
PrecedenceQueryParser -> PrecedenceQueryParser: Probability = 1.00, Count = 2
SetQueryNodeProcessor -> setQueryNodeProcessor: Probability = 1.00, Count = 2
PrecedenceQueryNodeProcessorPipeline -> PrecedenceQueryNodeProcessorPipeline: Probability = 0.60, Count = 3
PrecedenceQueryNodeProcessorPipeline -> getQueryConfigHandler: Probability = 0.40, Count = 2
EmptySource -> EMPTY_SOURCE: Probability = 1.00, Count = 2
DeleteEmailChannelResponse -> DeleteEmailChannelResult: Probability = 1.00, Count = 1
DeleteEmailChannel -> deleteEmailChannel: Probability = 1.00, Count = 1
DeleteEmailChannelRequest -> DeleteEmailChannelRequest: Probability = 1.00, Count = 1
Invoke<DeleteEmailChannelResponse> -> executeDeleteEmailChannel: Probability = 1.00, Count = 1
DeleteNotificationSubscriptionResponse -> DeleteNotificationSubscriptionResult: Probability = 1.00, Count = 1
DeleteNotificationSubscription -> deleteNotificationSubscription: Probability = 1.00, Count = 1
DeleteNotificationSubscriptionRequest -> DeleteNotificationSubscriptionRequest: Probability = 1.00, Count = 1
Invoke<DeleteNotificationSubscriptionResponse> -> executeDeleteNotificationSubscription: Probability = 1.00, Count = 1
ListPipelinesResponse -> ListPipelinesResult: Probability = 1.00, Count = 2
ListPipelines -> listPipelines: Probability = 1.00, Count = 3
ListPipelinesRequest -> ListPipelinesRequest: Probability = 1.00, Count = 2
Invoke<ListPipelinesResponse> -> executeListPipelines: Probability = 1.00, Count = 1
ConfirmProductInstanceResponse -> ConfirmProductInstanceResult: Probability = 1.00, Count = 1
ConfirmProductInstance -> confirmProductInstance: Probability = 1.00, Count = 1
ConfirmProductInstanceRequest -> ConfirmProductInstanceRequest: Probability = 1.00, Count = 2
Invoke<ConfirmProductInstanceResponse> -> executeConfirmProductInstance: Probability = 1.00, Count = 1
CreateProjectResponse -> CreateProjectResult: Probability = 1.00, Count = 1
CreateProject -> createProject: Probability = 1.00, Count = 1
CreateProjectRequest -> CreateProjectRequest: Probability = 1.00, Count = 1
Invoke<CreateProjectResponse> -> executeCreateProject: Probability = 1.00, Count = 1
ListMomentsRequest -> ListMomentsRequest: Probability = 1.00, Count = 1
"ListMoments", -> "ListMoments",: Probability = 1.00, Count = 1
ccid -> getCCByGB2312Id: Probability = 0.07, Count = 1
ccid -> ccid: Probability = 0.33, Count = 5
ccid -> AbstractDictionary.GB2312_CHAR_NUM: Probability = 0.07, Count = 1
ccid -> cc1: Probability = 0.13, Count = 2
ccid -> 94: Probability = 0.13, Count = 2
ccid -> 161: Probability = 0.13, Count = 2
ccid -> cc2: Probability = 0.13, Count = 2
cchar -> cchar: Probability = 1.00, Count = 2
OrRevFilter.Binary -> Binary: Probability = 1.00, Count = 3
_provisionedThroughput -> setProvisionedThroughput: Probability = 1.00, Count = 1
CreateInstanceExportTaskResponse -> CreateInstanceExportTaskResult: Probability = 1.00, Count = 1
CreateInstanceExportTask -> createInstanceExportTask: Probability = 1.00, Count = 1
CreateInstanceExportTaskRequest -> CreateInstanceExportTaskRequest: Probability = 1.00, Count = 1
Invoke<CreateInstanceExportTaskResponse> -> executeCreateInstanceExportTask: Probability = 1.00, Count = 1
Invoke<DescribeStacksResponse> -> executeDescribeStacks: Probability = 1.00, Count = 1
o.WriteByte -> out.writeByte: Probability = 0.60, Count = 3
o.WriteByte -> field_3_outline_style_level: Probability = 0.20, Count = 1
o.WriteByte -> field_4_name.length: Probability = 0.20, Count = 1
field_2_builtin_style -> field_2_builtin_style: Probability = 1.00, Count = 3
field_3_stringHasMultibyte -> field_3_stringHasMultibyte: Probability = 1.00, Count = 2
Name, -> getName: Probability = 0.55, Count = 6
Name, -> ,: Probability = 0.45, Count = 5
zbuf.Length -> zbuf.length: Probability = 1.00, Count = 2
FieldWriter -> FieldWriter: Probability = 1.00, Count = 1
AddField -> addField: Probability = 1.00, Count = 2
termsFilePointer -> termsFilePointer: Probability = 1.00, Count = 2
SimpleFieldWriter -> SimpleFieldWriter: Probability = 1.00, Count = 2
fields.Add -> fields.add: Probability = 1.00, Count = 1
DeleteUserEndpointsResponse -> DeleteUserEndpointsResult: Probability = 1.00, Count = 1
DeleteUserEndpoints -> deleteUserEndpoints: Probability = 1.00, Count = 1
DeleteUserEndpointsRequest -> DeleteUserEndpointsRequest: Probability = 1.00, Count = 1
Invoke<DeleteUserEndpointsResponse> -> executeDeleteUserEndpoints: Probability = 1.00, Count = 1
SetColorAtIndex -> setColorAtIndex: Probability = 1.00, Count = 2
index" -> index": Probability = 1.00, Count = 1
IsRenameDetectionEnabled -> isRenameDetectionEnabled: Probability = 1.00, Count = 1
renameDetectionType -> renameDetectionType: Probability = 1.00, Count = 2
DiffConfig.RenameDetectionType.FALSE -> RenameDetectionType.FALSE: Probability = 1.00, Count = 1
Safe -> safe: Probability = 1.00, Count = 1
':case -> pattern.charAt: Probability = 0.08, Count = 1
':case -> '.':case: Probability = 0.08, Count = 1
':case -> '?':case: Probability = 0.08, Count = 1
':case -> '*':case: Probability = 0.08, Count = 1
':case -> '+':case: Probability = 0.08, Count = 1
':case -> ':case: Probability = 0.33, Count = 4
':case -> '[':case: Probability = 0.08, Count = 1
':case -> ']':case: Probability = 0.08, Count = 1
':case -> '\\':return: Probability = 0.08, Count = 1
CreateDeliverabilityTestReportResponse -> CreateDeliverabilityTestReportResult: Probability = 1.00, Count = 1
CreateDeliverabilityTestReport -> createDeliverabilityTestReport: Probability = 1.00, Count = 1
CreateDeliverabilityTestReportRequest -> CreateDeliverabilityTestReportRequest: Probability = 1.00, Count = 1
Invoke<CreateDeliverabilityTestReportResponse> -> executeCreateDeliverabilityTestReport: Probability = 1.00, Count = 1
GetRemoteName -> getRemoteName: Probability = 1.00, Count = 1
remoteName -> remoteName: Probability = 1.00, Count = 5
CherryPickCommand -> CherryPickCommand: Probability = 1.00, Count = 2
CherryPick -> cherryPick: Probability = 1.00, Count = 1
NPOI.SS.UserModel.IClientAnchor -> HSSFClientAnchor: Probability = 1.00, Count = 1
CreateClientAnchor -> createClientAnchor: Probability = 1.00, Count = 1
DeleteProfileResponse -> DeleteProfileResult: Probability = 1.00, Count = 1
DeleteProfile -> deleteProfile: Probability = 1.00, Count = 1
DeleteProfileRequest -> DeleteProfileRequest: Probability = 1.00, Count = 1
Invoke<DeleteProfileResponse> -> executeDeleteProfile: Probability = 1.00, Count = 1
java.util.TreeMap<K, -> entrySet: Probability = 1.00, Count = 1
ListOnPremisesInstancesResponse -> ListOnPremisesInstancesResult: Probability = 1.00, Count = 1
ListOnPremisesInstances -> listOnPremisesInstances: Probability = 1.00, Count = 1
ListOnPremisesInstancesRequest -> ListOnPremisesInstancesRequest: Probability = 1.00, Count = 1
Invoke<ListOnPremisesInstancesResponse> -> executeListOnPremisesInstances: Probability = 1.00, Count = 1
perField.postingsArray.BytesPerPosting -> perField.postingsArray.bytesPerPosting: Probability = 1.00, Count = 2
currentSource.sourcePath.GetPath -> outCandidate.sourcePath.getPath: Probability = 1.00, Count = 1
CleanupSession -> cleanupSession: Probability = 1.00, Count = 1
"sessionId" -> "sessionID: Probability = 1.00, Count = 1
System.IO.Directory.Delete -> workDir.resolve: Probability = 1.00, Count = 1
DescribeSnapshotCopyGrantsResponse -> DescribeSnapshotCopyGrantsResult: Probability = 1.00, Count = 1
DescribeSnapshotCopyGrants -> describeSnapshotCopyGrants: Probability = 1.00, Count = 1
DescribeSnapshotCopyGrantsRequest -> DescribeSnapshotCopyGrantsRequest: Probability = 1.00, Count = 1
Invoke<DescribeSnapshotCopyGrantsResponse> -> executeDescribeSnapshotCopyGrants: Probability = 1.00, Count = 1
Utils.Join -> Utils.join: Probability = 0.25, Count = 2
Utils.Join -> Arrays.asList: Probability = 0.25, Count = 2
Utils.Join -> opnds: Probability = 0.25, Count = 2
Utils.Join -> .iterator: Probability = 0.25, Count = 2
"&&", -> "&&": Probability = 1.00, Count = 1
DescribeApplicationResponse -> DescribeApplicationResult: Probability = 1.00, Count = 1
DescribeApplication -> describeApplication: Probability = 1.00, Count = 1
DescribeApplicationRequest -> DescribeApplicationRequest: Probability = 1.00, Count = 1
Invoke<DescribeApplicationResponse> -> executeDescribeApplication: Probability = 1.00, Count = 1
BatchSendMessagesRequest -> BatchSendMessagesRequest: Probability = 1.00, Count = 1
"BatchSendMessages", -> "BatchSendMessages",: Probability = 1.00, Count = 1
DeleteEgressOnlyInternetGatewayResponse -> DeleteEgressOnlyInternetGatewayResult: Probability = 1.00, Count = 1
DeleteEgressOnlyInternetGateway -> deleteEgressOnlyInternetGateway: Probability = 1.00, Count = 1
DeleteEgressOnlyInternetGatewayRequest -> DeleteEgressOnlyInternetGatewayRequest: Probability = 1.00, Count = 1
Invoke<DeleteEgressOnlyInternetGatewayResponse> -> executeDeleteEgressOnlyInternetGateway: Probability = 1.00, Count = 1
ByteToHex -> byteToHex: Probability = 1.00, Count = 1
ToHexChars -> StringBuilder: Probability = 0.32, Count = 8
ToHexChars -> writeHex: Probability = 0.16, Count = 4
ToHexChars -> sb,: Probability = 0.16, Count = 4
ToHexChars -> &: Probability = 0.12, Count = 3
ToHexChars -> 0xFFL,: Probability = 0.04, Count = 1
ToHexChars -> "0x": Probability = 0.16, Count = 4
ToHexChars -> 0xFFFFL,: Probability = 0.04, Count = 1
Invoke<DescribeLoadBalancerPoliciesResponse> -> executeDescribeLoadBalancerPolicies: Probability = 1.00, Count = 1
dst.Close -> dst.close: Probability = 1.00, Count = 1
UpdateVirtualInterfaceAttributesResponse -> UpdateVirtualInterfaceAttributesResult: Probability = 1.00, Count = 1
UpdateVirtualInterfaceAttributes -> updateVirtualInterfaceAttributes: Probability = 1.00, Count = 1
UpdateVirtualInterfaceAttributesRequest -> UpdateVirtualInterfaceAttributesRequest: Probability = 1.00, Count = 1
Invoke<UpdateVirtualInterfaceAttributesResponse> -> executeUpdateVirtualInterfaceAttributes: Probability = 1.00, Count = 1
DeleteHumanLoopResponse -> DeleteHumanLoopResult: Probability = 1.00, Count = 1
DeleteHumanLoop -> deleteHumanLoop: Probability = 1.00, Count = 1
DeleteHumanLoopRequest -> DeleteHumanLoopRequest: Probability = 1.00, Count = 1
Invoke<DeleteHumanLoopResponse> -> executeDeleteHumanLoop: Probability = 1.00, Count = 1
onWindowFocusChanged -> onWindowFocusChanged: Probability = 1.00, Count = 1
hasWindowFocus_1 -> hasWindowFocus: Probability = 0.67, Count = 2
hasWindowFocus_1 -> super.onWindowFocusChanged: Probability = 0.33, Count = 1
!hasWindowFocus_1 -> !hasWindowFocus: Probability = 1.00, Count = 1
!mPopup.isDropDownAlwaysVisible -> !mPopup.isDropDownAlwaysVisible: Probability = 1.00, Count = 1
dismissDropDown -> dismissDropDown: Probability = 1.00, Count = 1
GetApnsSandboxChannelResponse -> GetApnsSandboxChannelResult: Probability = 1.00, Count = 1
GetApnsSandboxChannel -> getApnsSandboxChannel: Probability = 1.00, Count = 1
GetApnsSandboxChannelRequest -> GetApnsSandboxChannelRequest: Probability = 1.00, Count = 1
Invoke<GetApnsSandboxChannelResponse> -> executeGetApnsSandboxChannel: Probability = 1.00, Count = 1
AddBuilder -> addBuilder: Probability = 1.00, Count = 2
builders[nodeName] -> builders.put: Probability = 0.50, Count = 2
builders[nodeName] -> nodeName,: Probability = 0.50, Count = 2
Array.BinarySearch -> Arrays.binarySearch: Probability = 1.00, Count = 1
SUPPORTED_BITS_PER_VALUE, -> SUPPORTED_BITS_PER_VALUE,: Probability = 1.00, Count = 1
mapEntry.getValue -> mapEntry.getValue: Probability = 1.00, Count = 1
DeletedArea3DPtg -> DeletedArea3DPtg: Probability = 1.00, Count = 2
$" -> "NativeFSLock: Probability = 0.50, Count = 1
$" -> path=": Probability = 0.50, Count = 1
nameof -> +: Probability = 0.67, Count = 2
nameof -> ",impl=": Probability = 0.33, Count = 1
NativeFSLock -> +: Probability = 1.00, Count = 2
@ -> ",creationTime=": Probability = 0.20, Count = 1
@ -> +: Probability = 0.40, Count = 2
@ -> creationTime: Probability = 0.20, Count = 1
@ -> @: Probability = 0.20, Count = 1
CreateVolumeResponse -> CreateVolumeResult: Probability = 1.00, Count = 1
CreateVolume -> createVolume: Probability = 1.00, Count = 1
CreateVolumeRequest -> CreateVolumeRequest: Probability = 1.00, Count = 3
Invoke<CreateVolumeResponse> -> executeCreateVolume: Probability = 1.00, Count = 1
HSSFEvaluationCell -> HSSFEvaluationCell: Probability = 0.75, Count = 6
HSSFEvaluationCell -> HSSFCell: Probability = 0.25, Count = 2
DeleteBasePathMappingResponse -> DeleteBasePathMappingResult: Probability = 1.00, Count = 1
DeleteBasePathMapping -> deleteBasePathMapping: Probability = 1.00, Count = 1
DeleteBasePathMappingRequest -> DeleteBasePathMappingRequest: Probability = 1.00, Count = 1
Invoke<DeleteBasePathMappingResponse> -> executeDeleteBasePathMapping: Probability = 1.00, Count = 1
RemoveState -> removeState: Probability = 1.00, Count = 1
states[state.stateNumber] -> states.set: Probability = 0.50, Count = 1
states[state.stateNumber] -> state.stateNumber,: Probability = 0.50, Count = 1
ClassID -> ClassID: Probability = 0.50, Count = 2
ClassID -> getClassID: Probability = 0.50, Count = 2
sectionCount2 -> sectionCount2: Probability = 1.00, Count = 2
numRecordedBits -> setSize,: Probability = 0.17, Count = 1
numRecordedBits -> numRecordedBits: Probability = 0.33, Count = 2
numRecordedBits -> setSizeAsDouble: Probability = 0.17, Count = 1
numRecordedBits -> numRecordedBitsAsDouble: Probability = 0.33, Count = 2
saturation -> saturation: Probability = 0.40, Count = 2
saturation -> setSizeAsDouble: Probability = 0.40, Count = 2
saturation -> logInverseSaturation: Probability = 0.20, Count = 1
setSizeAsDouble*logInverseSaturation -> logInverseSaturation: Probability = 1.00, Count = 1
IsGitRepository -> isGitRepository: Probability = 1.00, Count = 4
fs.Resolve -> fs.resolve: Probability = 1.00, Count = 3
Constants.HEAD -> Constants.HEAD: Probability = 1.00, Count = 2
SetBackgroundImage -> setBackgroundImage: Probability = 1.00, Count = 1
Patriarch -> .getWorkbook: Probability = 1.00, Count = 1
DirectPostingsFormat -> DirectPostingsFormat: Probability = 1.00, Count = 1
minSkipCount, -> minSkipCount,: Probability = 1.00, Count = 1
lowFreqCutoff -> lowFreqCutoff: Probability = 1.00, Count = 2
_minSkipCount -> "Direct": Probability = 0.50, Count = 1
_minSkipCount -> this.minSkipCount: Probability = 0.50, Count = 1
minSkipCount -> minSkipCount: Probability = 1.00, Count = 1
_lowFreqCutoff -> this.lowFreqCutoff: Probability = 1.00, Count = 1
RecyclingByteBlockAllocator -> RecyclingByteBlockAllocator: Probability = 1.00, Count = 1
maxBufferedBlocks, -> maxBufferedBlocks,Counter: Probability = 1.00, Count = 1
byte[maxBufferedBlocks][] -> byte[maxBufferedBlocks][]: Probability = 1.00, Count = 1
this.maxBufferedBlocks -> this.maxBufferedBlocks: Probability = 1.00, Count = 1
prefixes.Length -> prefixes.length: Probability = 1.00, Count = 1
prefixes[i].Length -> prefixes[i].length: Probability = 1.00, Count = 1
q.commit -> q.commit: Probability = 1.00, Count = 1
java.nio.charset.CodingErrorAction -> CodingErrorAction: Probability = 1.00, Count = 2
malformedInputAction -> malformedInputAction: Probability = 1.00, Count = 1
_malformedInputAction -> malformedInputAction: Probability = 1.00, Count = 1
Result -> Result: Probability = 1.00, Count = 1
this.Input -> this.input: Probability = 1.00, Count = 1
this.Output -> this.output: Probability = 1.00, Count = 1
RemoveComments -> removeComments: Probability = 1.00, Count = 1
PropertyIDMap.PID_COMMENTS -> PropertyIDMap.PID_COMMENTS: Probability = 1.00, Count = 1
GetBlacklistReportsResponse -> GetBlacklistReportsResult: Probability = 1.00, Count = 1
GetBlacklistReports -> getBlacklistReports: Probability = 1.00, Count = 1
GetBlacklistReportsRequest -> GetBlacklistReportsRequest: Probability = 1.00, Count = 1
Invoke<GetBlacklistReportsResponse> -> executeGetBlacklistReports: Probability = 1.00, Count = 1
GetMessages -> getMessages: Probability = 1.00, Count = 2
messageWriter -> messageWriter: Probability = 1.00, Count = 1
messageWriter.ToString -> messageWriter.toString: Probability = 1.00, Count = 1
java.text.StringCharacterIterator -> StringCharacterIterator: Probability = 0.60, Count = 3
java.text.StringCharacterIterator -> string.equals: Probability = 0.20, Count = 1
java.text.StringCharacterIterator -> it.string: Probability = 0.20, Count = 1
it.offset -> it.offset: Probability = 1.00, Count = 1
AddFacetToObjectResponse -> AddFacetToObjectResult: Probability = 1.00, Count = 1
AddFacetToObject -> addFacetToObject: Probability = 1.00, Count = 1
AddFacetToObjectRequest -> AddFacetToObjectRequest: Probability = 1.00, Count = 1
Invoke<AddFacetToObjectResponse> -> executeAddFacetToObject: Probability = 1.00, Count = 1
CorrectOffset -> correctOffset: Probability = 1.00, Count = 1
currentOff -> currentOff: Probability = 0.67, Count = 2
currentOff -> correct: Probability = 0.33, Count = 1
corrected -> corrected: Probability = 0.75, Count = 3
corrected -> .correctOffset: Probability = 0.25, Count = 1
CreateForCountingOnly -> createForCountingOnly: Probability = 1.00, Count = 1
NOPOutput, -> NOPOutput,: Probability = 1.00, Count = 1
-777 -> -777: Probability = 1.00, Count = 1
DisassociateAddressRequest -> DisassociateAddressRequest: Probability = 1.00, Count = 2
_publicIp -> setPublicIp: Probability = 1.00, Count = 4
Invoke<DescribeVirtualGatewaysResponse> -> executeDescribeVirtualGateways: Probability = 1.00, Count = 1
SetSheetHidden -> setSheetHidden: Probability = 1.00, Count = 2
sheetnum, -> sheetnum,: Probability = 1.00, Count = 2
bsr -> hidden: Probability = 1.00, Count = 1
boundsheets[sheetnum] -> SheetVisibility.HIDDEN: Probability = 1.00, Count = 1
bsr.IsHidden=hidden -> SheetVisibility.VISIBLE: Probability = 1.00, Count = 1
cacheParameterGroupName, -> cacheParameterGroupName,: Probability = 1.00, Count = 3
cacheParameterGroupFamily, -> cacheParameterGroupFamily,: Probability = 1.00, Count = 1
_cacheParameterGroupFamily -> setCacheParameterGroupFamily: Probability = 1.00, Count = 2
cacheParameterGroupFamily -> cacheParameterGroupFamily: Probability = 1.00, Count = 3
stage -> stage: Probability = 1.00, Count = 4
NAME_MASK -> NAME_MASK: Probability = 1.00, Count = 2
FileOutputStream -> FileOutputStream: Probability = 1.00, Count = 3
DescribeVolumesResponse -> DescribeVolumesResult: Probability = 1.00, Count = 1
DescribeVolumes -> describeVolumes: Probability = 1.00, Count = 2
token.ToString -> String.valueOf: Probability = 0.50, Count = 1
token.ToString -> label: Probability = 0.50, Count = 1
pathRaw -> pathRaw: Probability = 1.00, Count = 1
BasqueStemmer -> BasqueStemmer: Probability = 1.00, Count = 1
SetSheetName -> setSheetName: Probability = 1.00, Count = 1
ListTimeLinesRequest -> ListTimeLinesRequest: Probability = 1.00, Count = 1
"ListTimeLines", -> "ListTimeLines",: Probability = 1.00, Count = 1
DescribeStackResourcesResponse -> DescribeStackResourcesResult: Probability = 1.00, Count = 1
DescribeStackResources -> describeStackResources: Probability = 1.00, Count = 1
DescribeStackResourcesRequest -> DescribeStackResourcesRequest: Probability = 1.00, Count = 1
Invoke<DescribeStackResourcesResponse> -> executeDescribeStackResources: Probability = 1.00, Count = 1
UpdateBotResponse -> UpdateBotResult: Probability = 1.00, Count = 1
UpdateBot -> updateBot: Probability = 1.00, Count = 1
UpdateBotRequest -> UpdateBotRequest: Probability = 1.00, Count = 1
Invoke<UpdateBotResponse> -> executeUpdateBot: Probability = 1.00, Count = 1
FillTo -> fillTo: Probability = 1.00, Count = 2
ExportSnapshotResponse -> ExportSnapshotResult: Probability = 1.00, Count = 1
ExportSnapshot -> exportSnapshot: Probability = 1.00, Count = 1
ExportSnapshotRequest -> ExportSnapshotRequest: Probability = 1.00, Count = 1
Invoke<ExportSnapshotResponse> -> executeExportSnapshot: Probability = 1.00, Count = 1
HasChildOfType -> hasChildOfType: Probability = 1.00, Count = 1
r.RecordId -> r.getRecordId: Probability = 1.00, Count = 1
_thedata -> thedata: Probability = 0.57, Count = 4
_thedata -> IOUtils.safelyAllocate: Probability = 0.43, Count = 3
NGit.Api.RmCommand -> RmCommand: Probability = 1.00, Count = 1
AddFilepattern -> addFilepattern: Probability = 1.00, Count = 2
filepattern -> filepattern: Probability = 1.00, Count = 4
filepatterns.AddItem -> filepatterns.add: Probability = 1.00, Count = 2
GetEmailIdentityResponse -> GetEmailIdentityResult: Probability = 1.00, Count = 1
GetEmailIdentity -> getEmailIdentity: Probability = 1.00, Count = 1
GetEmailIdentityRequest -> GetEmailIdentityRequest: Probability = 1.00, Count = 1
Invoke<GetEmailIdentityResponse> -> executeGetEmailIdentity: Probability = 1.00, Count = 1
NGit.Treewalk.CanonicalTreeParser -> CanonicalTreeParser: Probability = 1.00, Count = 5
p.nextPtr -> p.nextPtr: Probability = 0.75, Count = 3
p.nextPtr -> p.raw.length: Probability = 0.25, Count = 1
p.currPtr -> p.currPtr: Probability = 0.60, Count = 3
p.currPtr -> p.prevPtr: Probability = 0.20, Count = 1
p.currPtr -> p.parseEntry: Probability = 0.20, Count = 1
UpdateClusterConfigResponse -> UpdateClusterConfigResult: Probability = 1.00, Count = 1
UpdateClusterConfig -> updateClusterConfig: Probability = 1.00, Count = 1
UpdateClusterConfigRequest -> UpdateClusterConfigRequest: Probability = 1.00, Count = 1
Invoke<UpdateClusterConfigResponse> -> executeUpdateClusterConfig: Probability = 1.00, Count = 1
Point -> Point: Probability = 1.00, Count = 1
source.field_1_font_index -> source.field_1_font_index: Probability = 1.00, Count = 1
source.field_8_adtl_palette_options -> source.field_8_adtl_palette_options: Probability = 1.00, Count = 1
source.field_9_fill_palette_options -> source.field_9_fill_palette_options: Probability = 1.00, Count = 1
GetInvitationConfigurationResponse -> GetInvitationConfigurationResult: Probability = 1.00, Count = 1
GetInvitationConfiguration -> getInvitationConfiguration: Probability = 1.00, Count = 1
GetInvitationConfigurationRequest -> GetInvitationConfigurationRequest: Probability = 1.00, Count = 1
Invoke<GetInvitationConfigurationResponse> -> executeGetInvitationConfiguration: Probability = 1.00, Count = 1
RevTag -> RevTag: Probability = 0.89, Count = 8
RevTag -> lookupTag: Probability = 0.11, Count = 1
ParseTag -> parseTag: Probability = 1.00, Count = 1
ParseAny -> parseAny: Probability = 1.00, Count = 3
id.ToObjectId -> id.toObjectId: Probability = 1.00, Count = 4
Constants.TYPE_TAG -> ,Constants.TYPE_TAG: Probability = 1.00, Count = 1
MatchAlmost -> matchAlmost: Probability = 1.00, Count = 2
defaultNumReturnValues -> defaultNumReturnValues: Probability = 1.00, Count = 2
"value -> "value: Probability = 1.00, Count = 3
BatchGetOnPremisesInstancesResponse -> BatchGetOnPremisesInstancesResult: Probability = 1.00, Count = 1
BatchGetOnPremisesInstances -> batchGetOnPremisesInstances: Probability = 1.00, Count = 1
BatchGetOnPremisesInstancesRequest -> BatchGetOnPremisesInstancesRequest: Probability = 1.00, Count = 1
Invoke<BatchGetOnPremisesInstancesResponse> -> executeBatchGetOnPremisesInstances: Probability = 1.00, Count = 1
vlst -> vlst: Probability = 0.83, Count = 5
vlst -> u: Probability = 0.17, Count = 1
vlst.Clear -> vlst.clear: Probability = 1.00, Count = 4
vlst.AddItem -> vlst.add: Probability = 1.00, Count = 2
SECTION, -> rc.setStringList: Probability = 0.50, Count = 4
SECTION, -> SECTION,: Probability = 0.50, Count = 4
rc.SetStringList -> vlst.add: Probability = 1.00, Count = 2
rc, -> rc,: Probability = 1.00, Count = 5
SetPerson -> setPerson: Probability = 1.00, Count = 1
this.person -> this.person: Probability = 1.00, Count = 1
GetDefaultCreditSpecificationResponse -> GetDefaultCreditSpecificationResult: Probability = 1.00, Count = 1
GetDefaultCreditSpecification -> getDefaultCreditSpecification: Probability = 1.00, Count = 1
GetDefaultCreditSpecificationRequest -> GetDefaultCreditSpecificationRequest: Probability = 1.00, Count = 1
Invoke<GetDefaultCreditSpecificationResponse> -> executeGetDefaultCreditSpecification: Probability = 1.00, Count = 1
Of -> of: Probability = 1.00, Count = 2
idealFloatArraySize -> idealFloatArraySize: Probability = 1.00, Count = 1
GetJobManifestResponse -> GetJobManifestResult: Probability = 1.00, Count = 1
GetJobManifest -> getJobManifest: Probability = 1.00, Count = 1
GetJobManifestRequest -> GetJobManifestRequest: Probability = 1.00, Count = 1
Invoke<GetJobManifestResponse> -> executeGetJobManifest: Probability = 1.00, Count = 1
ListGroupMembersResponse -> ListGroupMembersResult: Probability = 1.00, Count = 1
ListGroupMembers -> listGroupMembers: Probability = 1.00, Count = 1
ListGroupMembersRequest -> ListGroupMembersRequest: Probability = 1.00, Count = 1
Invoke<ListGroupMembersResponse> -> executeListGroupMembers: Probability = 1.00, Count = 1
CreateMatchmakingConfigurationResponse -> CreateMatchmakingConfigurationResult: Probability = 1.00, Count = 1
CreateMatchmakingConfiguration -> createMatchmakingConfiguration: Probability = 1.00, Count = 1
CreateMatchmakingConfigurationRequest -> CreateMatchmakingConfigurationRequest: Probability = 1.00, Count = 1
Invoke<CreateMatchmakingConfigurationResponse> -> executeCreateMatchmakingConfiguration: Probability = 1.00, Count = 1
GetQueryResultsResponse -> GetQueryResultsResult: Probability = 1.00, Count = 1
GetQueryResults -> getQueryResults: Probability = 1.00, Count = 1
GetQueryResultsRequest -> GetQueryResultsRequest: Probability = 1.00, Count = 1
Invoke<GetQueryResultsResponse> -> executeGetQueryResults: Probability = 1.00, Count = 1
LookupSegmentation -> lookupSegmentation: Probability = 1.00, Count = 1
phraseID -> phraseID: Probability = 1.00, Count = 1
segmentations[phraseID] -> segmentations[phraseID]: Probability = 1.00, Count = 1
StartTextTranslationJobResponse -> StartTextTranslationJobResult: Probability = 1.00, Count = 1
StartTextTranslationJob -> startTextTranslationJob: Probability = 1.00, Count = 1
StartTextTranslationJobRequest -> StartTextTranslationJobRequest: Probability = 1.00, Count = 1
Invoke<StartTextTranslationJobResponse> -> executeStartTextTranslationJob: Probability = 1.00, Count = 1
GetAutoSnapshotsResponse -> GetAutoSnapshotsResult: Probability = 1.00, Count = 1
GetAutoSnapshots -> getAutoSnapshots: Probability = 1.00, Count = 1
GetAutoSnapshotsRequest -> GetAutoSnapshotsRequest: Probability = 1.00, Count = 1
Invoke<GetAutoSnapshotsResponse> -> executeGetAutoSnapshots: Probability = 1.00, Count = 1
RestoreDBInstanceToPointInTimeRequest -> RestoreDBInstanceToPointInTimeRequest: Probability = 1.00, Count = 2
sourceDBInstanceIdentifier, -> sourceDBInstanceIdentifier,: Probability = 1.00, Count = 1
targetDBInstanceIdentifier -> targetDBInstanceIdentifier: Probability = 1.00, Count = 2
_targetDBInstanceIdentifier -> setTargetDBInstanceIdentifier: Probability = 1.00, Count = 1
IsDryRun -> isDryRun: Probability = 1.00, Count = 1
e1 -> e1: Probability = 1.00, Count = 3
e2 -> array1[i],: Probability = 0.20, Count = 1
e2 -> e2: Probability = 0.60, Count = 3
e2 -> e1.equals: Probability = 0.20, Count = 1
IsSame -> isSame: Probability = 1.00, Count = 1
other._byteEncoding -> other._byteEncoding: Probability = 1.00, Count = 1
Invoke<DescribeReservedDBInstancesResponse> -> executeDescribeReservedDBInstances: Probability = 1.00, Count = 1
subs[i] -> subs[i]: Probability = 1.00, Count = 3
"s=" -> .append: Probability = 1.00, Count = 3
starts[i] -> .append: Probability = 1.00, Count = 5
DescribeLogStreamsRequest -> DescribeLogStreamsRequest: Probability = 1.00, Count = 1
GetAll -> getAll: Probability = 1.00, Count = 2
_formats.Clone -> _formats.clone: Probability = 1.00, Count = 1
CreateVoiceTemplateResponse -> CreateVoiceTemplateResult: Probability = 1.00, Count = 1
CreateVoiceTemplate -> createVoiceTemplate: Probability = 1.00, Count = 1
CreateVoiceTemplateRequest -> CreateVoiceTemplateRequest: Probability = 1.00, Count = 1
Invoke<CreateVoiceTemplateResponse> -> executeCreateVoiceTemplate: Probability = 1.00, Count = 1
DirectoryNotFoundException -> directory.listAll: Probability = 1.00, Count = 2
SearchTransitGatewayRoutesResponse -> SearchTransitGatewayRoutesResult: Probability = 1.00, Count = 1
SearchTransitGatewayRoutes -> searchTransitGatewayRoutes: Probability = 1.00, Count = 1
SearchTransitGatewayRoutesRequest -> SearchTransitGatewayRoutesRequest: Probability = 1.00, Count = 1
Invoke<SearchTransitGatewayRoutesResponse> -> executeSearchTransitGatewayRoutes: Probability = 1.00, Count = 1
ListCompilationJobsResponse -> ListCompilationJobsResult: Probability = 1.00, Count = 1
ListCompilationJobs -> listCompilationJobs: Probability = 1.00, Count = 1
ListCompilationJobsRequest -> ListCompilationJobsRequest: Probability = 1.00, Count = 1
Invoke<ListCompilationJobsResponse> -> executeListCompilationJobs: Probability = 1.00, Count = 1
multipleValuesPerDocument, -> createJoinQuery: Probability = 1.00, Count = 2
fromField, -> fromField,boolean: Probability = 1.00, Count = 1
fromQuery, -> multipleValuesPerDocument,String: Probability = 0.08, Count = 1
fromQuery, -> toField,Query: Probability = 0.08, Count = 1
fromQuery, -> fromQuery,IndexSearcher: Probability = 0.08, Count = 1
fromQuery, -> multipleValuesPerDocument: Probability = 0.08, Count = 1
fromQuery, -> Function<SortedSetDocValues>: Probability = 0.08, Count = 1
fromQuery, -> mvFunction: Probability = 0.08, Count = 1
fromQuery, -> DocValuesTermsCollector.sortedSetDocValues: Probability = 0.08, Count = 1
fromQuery, -> fromField: Probability = 0.17, Count = 2
fromQuery, -> GenericTermsCollector.createCollectorMV: Probability = 0.08, Count = 1
fromQuery, -> mvFunction,: Probability = 0.08, Count = 1
fromQuery, -> Function<BinaryDocValues>: Probability = 0.08, Count = 1
toField, -> termsWithScoreCollector: Probability = 1.00, Count = 4
field_pictureData, -> field_pictureData,: Probability = 1.00, Count = 2
field_pictureData.Length -> field_pictureData.length: Probability = 0.75, Count = 3
field_pictureData.Length -> field_pictureData.length,: Probability = 0.25, Count = 1
FindTerm -> findTerm: Probability = 1.00, Count = 2
SeekStatus.FOUND -> SeekStatus.FOUND: Probability = 1.00, Count = 2
SeekStatus.END -> SeekStatus.END: Probability = 1.00, Count = 2
SeekStatus.NOT_FOUND -> SeekStatus.NOT_FOUND: Probability = 1.00, Count = 2
DeleteLoadBalancerResponse -> DeleteLoadBalancerResult: Probability = 1.00, Count = 1
DeleteLoadBalancer -> deleteLoadBalancer: Probability = 1.00, Count = 1
Invoke<DeleteLoadBalancerResponse> -> executeDeleteLoadBalancer: Probability = 1.00, Count = 1
DeleteVpcPeeringAuthorizationResponse -> DeleteVpcPeeringAuthorizationResult: Probability = 1.00, Count = 1
DeleteVpcPeeringAuthorization -> deleteVpcPeeringAuthorization: Probability = 1.00, Count = 1
DeleteVpcPeeringAuthorizationRequest -> DeleteVpcPeeringAuthorizationRequest: Probability = 1.00, Count = 1
Invoke<DeleteVpcPeeringAuthorizationResponse> -> executeDeleteVpcPeeringAuthorization: Probability = 1.00, Count = 1
SendAnnouncementResponse -> SendAnnouncementResult: Probability = 1.00, Count = 1
SendAnnouncement -> sendAnnouncement: Probability = 1.00, Count = 1
SendAnnouncementRequest -> SendAnnouncementRequest: Probability = 1.00, Count = 1
Invoke<SendAnnouncementResponse> -> executeSendAnnouncement: Probability = 1.00, Count = 1
object[size_1] -> Object[size]: Probability = 1.00, Count = 3
SortedDocValues -> SortedDocValues: Probability = 1.00, Count = 1
GetSortedDocValues -> getSortedDocValues: Probability = 1.00, Count = 2
SetBaseline -> setBaseline: Probability = 1.00, Count = 2
SortingBits -> SortingBits: Probability = 1.00, Count = 1
Sorter.DocMap -> in,: Probability = 0.50, Count = 2
Sorter.DocMap -> Sorter.DocMap: Probability = 0.50, Count = 2
docMap -> docMap: Probability = 1.00, Count = 4
this.docMap -> this.docMap: Probability = 1.00, Count = 2
result.IndexOf -> result.indexOf: Probability = 0.67, Count = 2
result.IndexOf -> '\"': Probability = 0.33, Count = 1
result.Replace -> result.replace: Probability = 1.00, Count = 2
UpdateLifecyclePolicyResponse -> UpdateLifecyclePolicyResult: Probability = 1.00, Count = 1
UpdateLifecyclePolicy -> updateLifecyclePolicy: Probability = 1.00, Count = 1
UpdateLifecyclePolicyRequest -> UpdateLifecyclePolicyRequest: Probability = 1.00, Count = 1
Invoke<UpdateLifecyclePolicyResponse> -> executeUpdateLifecyclePolicy: Probability = 1.00, Count = 1
CreateNotebookInstanceLifecycleConfigResponse -> CreateNotebookInstanceLifecycleConfigResult: Probability = 1.00, Count = 1
CreateNotebookInstanceLifecycleConfig -> createNotebookInstanceLifecycleConfig: Probability = 1.00, Count = 1
CreateNotebookInstanceLifecycleConfigRequest -> CreateNotebookInstanceLifecycleConfigRequest: Probability = 1.00, Count = 1
Invoke<CreateNotebookInstanceLifecycleConfigResponse> -> executeCreateNotebookInstanceLifecycleConfig: Probability = 1.00, Count = 1
field_2_x -> field_2_x: Probability = 1.00, Count = 2
field_3_y -> field_3_y: Probability = 1.00, Count = 2
field_4_width -> field_4_width: Probability = 1.00, Count = 2
field_5_height -> field_5_height: Probability = 1.00, Count = 2
GetJourneyResponse -> GetJourneyResult: Probability = 1.00, Count = 1
GetJourney -> getJourney: Probability = 1.00, Count = 1
GetJourneyRequest -> GetJourneyRequest: Probability = 1.00, Count = 1
Invoke<GetJourneyResponse> -> executeGetJourney: Probability = 1.00, Count = 1
queryConfig -> queryConfig: Probability = 1.00, Count = 2
DeleteUsageReportSubscriptionResponse -> DeleteUsageReportSubscriptionResult: Probability = 1.00, Count = 1
DeleteUsageReportSubscription -> deleteUsageReportSubscription: Probability = 1.00, Count = 1
DeleteUsageReportSubscriptionRequest -> DeleteUsageReportSubscriptionRequest: Probability = 1.00, Count = 1
Invoke<DeleteUsageReportSubscriptionResponse> -> executeDeleteUsageReportSubscription: Probability = 1.00, Count = 1
listFiles -> listFiles: Probability = 0.80, Count = 4
listFiles -> FileFilter: Probability = 0.20, Count = 1
java.io.FilenameFilter -> FilenameFilter: Probability = 1.00, Count = 2
filenamesToFiles -> filenamesToFiles: Probability = 1.00, Count = 2
RespondActivityTaskFailed -> respondActivityTaskFailed: Probability = 1.00, Count = 1
RespondActivityTaskFailedRequest -> RespondActivityTaskFailedRequest: Probability = 1.00, Count = 1
RespondActivityTaskFailedResponseUnmarshaller.Instance -> executeRespondActivityTaskFailed: Probability = 1.00, Count = 1
java.lang.Comparable<T> -> Comparable<T>: Probability = 1.00, Count = 2
c2.compareTo -> c2.compareTo: Probability = 1.00, Count = 1
ListFindingsResponse -> ListFindingsResult: Probability = 1.00, Count = 1
ListFindings -> listFindings: Probability = 1.00, Count = 1
ListFindingsRequest -> ListFindingsRequest: Probability = 1.00, Count = 1
Invoke<ListFindingsResponse> -> executeListFindings: Probability = 1.00, Count = 1
!rval -> !rval: Probability = 1.00, Count = 2
_array[j] -> j: Probability = 1.00, Count = 3
BlankEval.instance -> BlankEval.instance: Probability = 1.00, Count = 4
DatRecord -> DatRecord: Probability = 1.00, Count = 2
CreateGlobalReplicationGroupResponse -> GlobalReplicationGroup: Probability = 1.00, Count = 1
CreateGlobalReplicationGroup -> createGlobalReplicationGroup: Probability = 1.00, Count = 1
CreateGlobalReplicationGroupRequest -> CreateGlobalReplicationGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateGlobalReplicationGroupResponse> -> executeCreateGlobalReplicationGroup: Probability = 1.00, Count = 1
bufferStartIndex -> interval": Probability = 0.08, Count = 1
bufferStartIndex -> bufferStartIndex: Probability = 0.38, Count = 5
bufferStartIndex -> data[n: Probability = 0.08, Count = 1
bufferStartIndex -> Character.MAX_VALUE: Probability = 0.08, Count = 1
bufferStartIndex -> interval.length: Probability = 0.15, Count = 2
bufferStartIndex -> "interval: Probability = 0.08, Count = 1
bufferStartIndex -> "+interval+": Probability = 0.08, Count = 1
bufferStartIndex -> "+bufferStartIndex+".."+: Probability = 0.08, Count = 1
BufferStartIndex -> getBufferStartIndex: Probability = 1.00, Count = 4
AddClass -> addClass: Probability = 1.00, Count = 1
chargroup -> chargroup: Probability = 1.00, Count = 1
chargroup.Length -> chargroup.length: Probability = 1.00, Count = 2
equivChar -> equivChar: Probability = 0.50, Count = 2
equivChar -> chargroup.charAt: Probability = 0.50, Count = 2
DFRSimilarity -> DFRSimilarity: Probability = 1.00, Count = 1
BasicModel -> BasicModel: Probability = 1.00, Count = 1
basicModel, -> basicModel,AfterEffect: Probability = 1.00, Count = 1
AfterEffect -> afterEffect,Normalization: Probability = 1.00, Count = 1
normalization -> normalization: Probability = 1.00, Count = 5
basicModel -> basicModel: Probability = 1.00, Count = 2
afterEffect -> afterEffect: Probability = 1.00, Count = 2
parameters -> parameters: Probability = 1.00, Count = 1
allowed." -> allowed.": Probability = 1.00, Count = 1
this.m_basicModel -> this.basicModel: Probability = 1.00, Count = 1
this.m_afterEffect -> this.afterEffect: Probability = 1.00, Count = 1
this.m_normalization -> this.normalization: Probability = 1.00, Count = 2
snapshotId, -> snapshotId,: Probability = 0.50, Count = 2
snapshotId, -> SnapshotAttributeName: Probability = 0.50, Count = 2
SnapshotAttributeName -> attribute: Probability = 1.00, Count = 2
getScheme -> getScheme: Probability = 1.00, Count = 1
XPathElement -> XPathElement: Probability = 1.00, Count = 1
nodeName -> nodeName: Probability = 1.00, Count = 2
this.nodeName -> this.nodeName: Probability = 1.00, Count = 1
DeleteAccountResponse -> DeleteAccountResult: Probability = 1.00, Count = 1
DeleteAccount -> deleteAccount: Probability = 1.00, Count = 1
DeleteAccountRequest -> DeleteAccountRequest: Probability = 1.00, Count = 1
Invoke<DeleteAccountResponse> -> executeDeleteAccount: Probability = 1.00, Count = 1
MultiMap<string, -> MultiMap<String,: Probability = 0.50, Count = 2
MultiMap<string, -> ParseTree>: Probability = 0.50, Count = 2
labels -> labels: Probability = 1.00, Count = 2
mismatchedNode -> mismatchedNode: Probability = 0.50, Count = 2
mismatchedNode -> matchImpl: Probability = 0.25, Count = 1
mismatchedNode -> pattern.getPatternTree: Probability = 0.25, Count = 1
SpotPlacement -> SpotPlacement: Probability = 1.00, Count = 1
DescribeFleetInstancesResponse -> DescribeFleetInstancesResult: Probability = 1.00, Count = 1
DescribeFleetInstances -> describeFleetInstances: Probability = 1.00, Count = 1
DescribeFleetInstancesRequest -> DescribeFleetInstancesRequest: Probability = 1.00, Count = 1
Invoke<DescribeFleetInstancesResponse> -> executeDescribeFleetInstances: Probability = 1.00, Count = 1
SetWorkingTreeIterator -> setWorkingTreeIterator: Probability = 1.00, Count = 2
WorkingTreeIterator -> WorkingTreeIterator: Probability = 1.00, Count = 3
workingTreeIterator -> workingTreeIterator: Probability = 1.00, Count = 3
this.workingTreeIterator -> this.workingTreeIterator: Probability = 1.00, Count = 1
Pop_Array -> pop_array: Probability = 1.00, Count = 1
Lenient -> lenient: Probability = 1.00, Count = 1
gitdir -> gitdir: Probability = 1.00, Count = 3
or, -> or,: Probability = 1.00, Count = 2
imageLocation -> imageLocation: Probability = 1.00, Count = 2
_imageLocation -> setImageLocation: Probability = 1.00, Count = 1
Revision -> this.revision: Probability = 1.00, Count = 1
ListTagsForResourcesResponse -> ListTagsForResourcesResult: Probability = 1.00, Count = 1
ListTagsForResources -> listTagsForResources: Probability = 1.00, Count = 1
ListTagsForResourcesRequest -> ListTagsForResourcesRequest: Probability = 1.00, Count = 1
Invoke<ListTagsForResourcesResponse> -> executeListTagsForResources: Probability = 1.00, Count = 1
bytes[pos++] -> bytes[pos++]: Probability = 1.00, Count = 2
DeleteGlobalReplicationGroupResponse -> GlobalReplicationGroup: Probability = 1.00, Count = 1
DeleteGlobalReplicationGroup -> deleteGlobalReplicationGroup: Probability = 1.00, Count = 1
DeleteGlobalReplicationGroupRequest -> DeleteGlobalReplicationGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteGlobalReplicationGroupResponse> -> executeDeleteGlobalReplicationGroup: Probability = 1.00, Count = 1
DescribeFileSystemPolicyResponse -> DescribeFileSystemPolicyResult: Probability = 1.00, Count = 1
DescribeFileSystemPolicy -> describeFileSystemPolicy: Probability = 1.00, Count = 1
DescribeFileSystemPolicyRequest -> DescribeFileSystemPolicyRequest: Probability = 1.00, Count = 1
Invoke<DescribeFileSystemPolicyResponse> -> executeDescribeFileSystemPolicy: Probability = 1.00, Count = 1
ListAttributesResponse -> ListAttributesResult: Probability = 1.00, Count = 1
ListAttributes -> listAttributes: Probability = 1.00, Count = 1
ListAttributesRequest -> ListAttributesRequest: Probability = 1.00, Count = 1
Invoke<ListAttributesResponse> -> executeListAttributes: Probability = 1.00, Count = 1
ModifyStrategyTargetRequest -> ModifyStrategyTargetRequest: Probability = 1.00, Count = 1
"aegis", -> "aegis",: Probability = 1.00, Count = 1
"2016-11-11", -> "2016-11-11",: Probability = 1.00, Count = 1
"ModifyStrategyTarget", -> "ModifyStrategyTarget",: Probability = 1.00, Count = 1
"vipaegis", -> "vipaegis": Probability = 1.00, Count = 1
RemoveFontRecord -> removeFontRecord: Probability = 1.00, Count = 1
numfonts-- -> numfonts--: Probability = 1.00, Count = 1
this.Terms -> this.terms: Probability = 1.00, Count = 1
GetDataValues -> getDataValues: Probability = 1.00, Count = 1
dataValues -> dataValues: Probability = 1.00, Count = 2
icredential -> ICredentialProvider: Probability = 0.33, Count = 1
icredential -> icredential: Probability = 0.67, Count = 2
ListFieldLevelEncryptionProfilesResponse -> ListFieldLevelEncryptionProfilesResult: Probability = 1.00, Count = 1
ListFieldLevelEncryptionProfiles -> listFieldLevelEncryptionProfiles: Probability = 1.00, Count = 1
ListFieldLevelEncryptionProfilesRequest -> ListFieldLevelEncryptionProfilesRequest: Probability = 1.00, Count = 1
Invoke<ListFieldLevelEncryptionProfilesResponse> -> executeListFieldLevelEncryptionProfiles: Probability = 1.00, Count = 1
RegisterTaskDefinitionResponse -> RegisterTaskDefinitionResult: Probability = 1.00, Count = 1
RegisterTaskDefinition -> registerTaskDefinition: Probability = 1.00, Count = 1
RegisterTaskDefinitionRequest -> RegisterTaskDefinitionRequest: Probability = 1.00, Count = 1
Invoke<RegisterTaskDefinitionResponse> -> executeRegisterTaskDefinition: Probability = 1.00, Count = 1
DisableEnhancedMonitoringResponse -> DisableEnhancedMonitoringResult: Probability = 1.00, Count = 1
DisableEnhancedMonitoring -> disableEnhancedMonitoring: Probability = 1.00, Count = 1
DisableEnhancedMonitoringRequest -> DisableEnhancedMonitoringRequest: Probability = 1.00, Count = 1
Invoke<DisableEnhancedMonitoringResponse> -> executeDisableEnhancedMonitoring: Probability = 1.00, Count = 1
NodeHash -> NodeHash: Probability = 1.00, Count = 1
FST<T> -> FST<T>: Probability = 1.00, Count = 1
fst, -> fst,: Probability = 1.00, Count = 3
FST.BytesReader -> FST.BytesReader: Probability = 0.50, Count = 1
FST.BytesReader -> BytesReader: Probability = 0.50, Count = 1
PagedGrowableWriter -> PagedGrowableWriter: Probability = 1.00, Count = 1
30, -> 1<<27,: Probability = 1.00, Count = 1
PackedInt32s.COMPACT -> PackedInts.COMPACT: Probability = 1.00, Count = 1
i.Name -> i.name: Probability = 1.00, Count = 1
ZEROID_STR -> ZEROID_STR: Probability = 1.00, Count = 1
book.GetNameText -> book.getNameText: Probability = 1.00, Count = 1
"<boost -> "<boost: Probability = 1.00, Count = 1
value='" -> value='": Probability = 1.00, Count = 3
"'>" -> "'>": Probability = 0.67, Count = 2
"'>" -> "\n"+: Probability = 0.33, Count = 1
"\n"+ -> getChild: Probability = 0.33, Count = 1
"\n"+ -> .toString: Probability = 0.33, Count = 1
"\n"+ -> "\n"+: Probability = 0.33, Count = 1
"\n</boost>" -> "\n</boost>": Probability = 1.00, Count = 1
ListTagsResponse -> ListTagsResult: Probability = 1.00, Count = 1
ListTags -> listTags: Probability = 1.00, Count = 1
ListTagsRequest -> ListTagsRequest: Probability = 1.00, Count = 1
Invoke<ListTagsResponse> -> executeListTags: Probability = 1.00, Count = 1
ListTypeVersionsResponse -> ListTypeVersionsResult: Probability = 1.00, Count = 1
ListTypeVersions -> listTypeVersions: Probability = 1.00, Count = 1
ListTypeVersionsRequest -> ListTypeVersionsRequest: Probability = 1.00, Count = 1
Invoke<ListTypeVersionsResponse> -> executeListTypeVersions: Probability = 1.00, Count = 1
ObjectLinkRecord -> ObjectLinkRecord: Probability = 1.00, Count = 1
field_1_anchorId -> field_1_anchorId: Probability = 1.00, Count = 2
field_2_link1 -> field_2_link1: Probability = 1.00, Count = 2
field_3_link2 -> field_3_link2: Probability = 1.00, Count = 2
GetPromptText -> getPromptText: Probability = 1.00, Count = 1
promptText -> promptText: Probability = 1.00, Count = 2
IsBeginRecord -> isBeginRecord: Probability = 1.00, Count = 1
UserSViewBegin.sid -> UserSViewBegin.sid: Probability = 1.00, Count = 1
GetInstanceMetricDataResponse -> GetInstanceMetricDataResult: Probability = 1.00, Count = 1
GetInstanceMetricData -> getInstanceMetricData: Probability = 1.00, Count = 1
GetInstanceMetricDataRequest -> GetInstanceMetricDataRequest: Probability = 1.00, Count = 1
Invoke<GetInstanceMetricDataResponse> -> executeGetInstanceMetricData: Probability = 1.00, Count = 1
BlockTermState -> BlockTermState: Probability = 1.00, Count = 6
indexIsCurrent -> indexIsCurrent: Probability = 1.00, Count = 3
AllocateConnectionOnInterconnectResponse -> AllocateConnectionOnInterconnectResult: Probability = 1.00, Count = 1
AllocateConnectionOnInterconnect -> allocateConnectionOnInterconnect: Probability = 1.00, Count = 1
AllocateConnectionOnInterconnectRequest -> AllocateConnectionOnInterconnectRequest: Probability = 1.00, Count = 1
Invoke<AllocateConnectionOnInterconnectResponse> -> executeAllocateConnectionOnInterconnect: Probability = 1.00, Count = 1
StandardSyntaxParser -> StandardSyntaxParser: Probability = 1.00, Count = 3
_range.Serialize -> _range.serialize: Probability = 1.00, Count = 1
SerializeExtraData -> serializeExtraData: Probability = 1.00, Count = 1
IsRowBlockRecord -> isRowBlockRecord: Probability = 1.00, Count = 1
RowRecord.sid:case -> RowRecord.sid:case: Probability = 1.00, Count = 1
BlankRecord.sid:case -> BlankRecord.sid:case: Probability = 1.00, Count = 1
BoolErrRecord.sid:case -> BoolErrRecord.sid:case: Probability = 1.00, Count = 1
FormulaRecord.sid:case -> FormulaRecord.sid:case: Probability = 1.00, Count = 1
LabelRecord.sid:case -> LabelRecord.sid:case: Probability = 1.00, Count = 1
LabelSSTRecord.sid:case -> LabelSSTRecord.sid:case: Probability = 1.00, Count = 1
NumberRecord.sid:case -> NumberRecord.sid:case: Probability = 1.00, Count = 1
RKRecord.sid:case -> RKRecord.sid:case: Probability = 1.00, Count = 1
ArrayRecord.sid:case -> ArrayRecord.sid:case: Probability = 1.00, Count = 1
SharedFormulaRecord.sid:case -> SharedFormulaRecord.sid:case: Probability = 1.00, Count = 1
TableRecord.sid:return -> TableRecord.sid:return: Probability = 1.00, Count = 1
VerifyDomainDkimResponse -> VerifyDomainDkimResult: Probability = 1.00, Count = 1
VerifyDomainDkim -> verifyDomainDkim: Probability = 1.00, Count = 1
VerifyDomainDkimRequest -> VerifyDomainDkimRequest: Probability = 1.00, Count = 1
Invoke<VerifyDomainDkimResponse> -> executeVerifyDomainDkim: Probability = 1.00, Count = 1
_string.Equals -> _string.equals: Probability = 1.00, Count = 1
._string -> ._string: Probability = 1.00, Count = 1
RowColKey -> RowColKey: Probability = 1.00, Count = 5
other._columnIndex -> other._columnIndex: Probability = 1.00, Count = 1
GetIdentityPoolConfigurationResponse -> GetIdentityPoolConfigurationResult: Probability = 1.00, Count = 1
GetIdentityPoolConfiguration -> getIdentityPoolConfiguration: Probability = 1.00, Count = 1
GetIdentityPoolConfigurationRequest -> GetIdentityPoolConfigurationRequest: Probability = 1.00, Count = 1
Invoke<GetIdentityPoolConfigurationResponse> -> executeGetIdentityPoolConfiguration: Probability = 1.00, Count = 1
DeleteTrafficMirrorFilterResponse -> DeleteTrafficMirrorFilterResult: Probability = 1.00, Count = 1
DeleteTrafficMirrorFilter -> deleteTrafficMirrorFilter: Probability = 1.00, Count = 1
DeleteTrafficMirrorFilterRequest -> DeleteTrafficMirrorFilterRequest: Probability = 1.00, Count = 1
Invoke<DeleteTrafficMirrorFilterResponse> -> executeDeleteTrafficMirrorFilter: Probability = 1.00, Count = 1
scratch, -> SimpleTextUtil.readLine: Probability = 0.43, Count = 3
scratch, -> scratch.get: Probability = 0.57, Count = 4
CreateConferenceProviderResponse -> CreateConferenceProviderResult: Probability = 1.00, Count = 1
CreateConferenceProvider -> createConferenceProvider: Probability = 1.00, Count = 1
CreateConferenceProviderRequest -> CreateConferenceProviderRequest: Probability = 1.00, Count = 1
Invoke<CreateConferenceProviderResponse> -> executeCreateConferenceProvider: Probability = 1.00, Count = 1
qqName, -> qqNames[],: Probability = 1.00, Count = 1
qqName -> qqNames: Probability = 0.50, Count = 1
qqName -> this.indexField: Probability = 0.50, Count = 1
IsCaseSensitive -> isCaseSensitive: Probability = 1.00, Count = 1
HyphenationCompoundWordTokenFilter -> HyphenationCompoundWordTokenFilter: Probability = 1.00, Count = 1
hyphenator, -> hyphenator,: Probability = 1.00, Count = 1
JapaneseBaseFormFilter -> JapaneseBaseFormFilter: Probability = 1.00, Count = 1
OrderedATNConfigSet -> OrderedATNConfigSet: Probability = 1.00, Count = 1
this.configLookup -> this.configLookup: Probability = 1.00, Count = 1
LexerConfigHashSet -> LexerConfigHashSet: Probability = 1.00, Count = 1
evaluationResult, -> evaluationResult,: Probability = 1.00, Count = 2
srcRowNum, -> srcColNum: Probability = 1.00, Count = 2
GetGroupRequest -> GetGroupRequest: Probability = 1.00, Count = 1
NarrowSearch -> narrowSearch: Probability = 1.00, Count = 1
midIx, -> midIx,: Probability = 1.00, Count = 1
isLessThan -> isLessThan: Probability = 1.00, Count = 2
midIx -> midIx: Probability = 1.00, Count = 2
4294967295L -> 4294967295L: Probability = 1.00, Count = 2
cfAggregate.ToString -> cfAggregate.toString: Probability = 1.00, Count = 1
maxFacetDepth -> maxDocFacets: Probability = 0.22, Count = 2
maxFacetDepth -> maxFacetDepth: Probability = 0.44, Count = 4
maxFacetDepth -> "max.facet.depth",: Probability = 0.11, Count = 1
maxFacetDepth -> "max.facet.depth: Probability = 0.11, Count = 1
maxFacetDepth -> maxValue: Probability = 0.11, Count = 1
Task<AzureOperationResponse> -> interface: Probability = 1.00, Count = 1
DeleteWithHttpMessagesAsync -> Experiments: Probability = 1.00, Count = 1
workspaceName, -> Observable<Experiment>: Probability = 1.00, Count = 2
experimentName, -> getAsync: Probability = 1.00, Count = 1
cancellationToken -> workspaceName,: Probability = 0.15, Count = 2
cancellationToken -> experimentName: Probability = 0.15, Count = 2
cancellationToken -> workspaceName: Probability = 0.08, Count = 1
cancellationToken -> Completable: Probability = 0.08, Count = 1
cancellationToken -> deleteAsync: Probability = 0.08, Count = 1
cancellationToken -> resourceGroupName,: Probability = 0.08, Count = 1
cancellationToken -> .single: Probability = 0.15, Count = 2
cancellationToken -> .body: Probability = 0.08, Count = 1
cancellationToken -> Page<DedicatedCapacityInner>: Probability = 0.08, Count = 1
cancellationToken -> nextPage: Probability = 0.08, Count = 1
await -> listByWorkspaceAsync: Probability = 1.00, Count = 1
customHeaders, -> String: Probability = 0.86, Count = 6
customHeaders, -> @Overridepublic: Probability = 0.14, Count = 1
resourceGroupName, -> resourceGroupName,: Probability = 0.20, Count = 1
resourceGroupName, -> page: Probability = 0.40, Count = 2
resourceGroupName, -> PageImpl<>: Probability = 0.20, Count = 1
resourceGroupName, -> PagedList<DedicatedCapacityInner>: Probability = 0.20, Count = 1
previousDoc -> reused: Probability = 0.17, Count = 1
previousDoc -> pendingOff: Probability = 0.17, Count = 1
previousDoc -> pending.length: Probability = 0.17, Count = 1
previousDoc -> valuesOff: Probability = 0.33, Count = 2
previousDoc -> ArrayUtil.oversize: Probability = 0.17, Count = 1
IsBuiltInFunctionName -> isBuiltInFunctionName: Probability = 1.00, Count = 1
FunctionMetadataRegistry.LookupIndexByName -> FunctionMetadataRegistry.lookupIndexByName: Probability = 1.00, Count = 1
name.ToUpper -> name.toUpperCase: Probability = 0.40, Count = 2
name.ToUpper -> Locale.ROOT: Probability = 0.40, Count = 2
name.ToUpper -> _functionsByName.get: Probability = 0.20, Count = 1
numLeft -> numLeft: Probability = 0.83, Count = 5
numLeft -> limit-upto: Probability = 0.17, Count = 1
ListResolverRuleAssociationsResponse -> ListResolverRuleAssociationsResult: Probability = 1.00, Count = 1
ListResolverRuleAssociations -> listResolverRuleAssociations: Probability = 1.00, Count = 1
ListResolverRuleAssociationsRequest -> ListResolverRuleAssociationsRequest: Probability = 1.00, Count = 1
Invoke<ListResolverRuleAssociationsResponse> -> executeListResolverRuleAssociations: Probability = 1.00, Count = 1
ApostropheFilter -> ApostropheFilter: Probability = 1.00, Count = 2
list.indexOf -> list.indexOf: Probability = 1.00, Count = 1
TrimToSize -> trimToSize: Probability = 1.00, Count = 3
kx -> kx: Probability = 1.00, Count = 2
TernaryTree -> TernaryTree: Probability = 1.00, Count = 3
m_kv -> kv: Probability = 1.00, Count = 1
m_kv.TrimToSize -> kv.trimToSize: Probability = 1.00, Count = 1
GetRepoSyncTaskRequest -> GetRepoSyncTaskRequest: Probability = 1.00, Count = 1
"GetRepoSyncTask", -> "GetRepoSyncTask",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/syncTasks/[SyncTaskId]" -> "/repos/[RepoNamespace]/[RepoName]/syncTasks/[SyncTaskId]": Probability = 1.00, Count = 1
ChangeMessageVisibilityRequest -> ChangeMessageVisibilityRequest: Probability = 1.00, Count = 3
receiptHandle, -> receiptHandle,: Probability = 0.50, Count = 2
receiptHandle, -> Integer: Probability = 0.50, Count = 2
visibilityTimeout -> visibilityTimeout: Probability = 0.80, Count = 4
visibilityTimeout -> .withVisibilityTimeout: Probability = 0.20, Count = 1
_visibilityTimeout -> setVisibilityTimeout: Probability = 1.00, Count = 1
StartRepoBuildByRuleRequest -> StartRepoBuildByRuleRequest: Probability = 1.00, Count = 1
"StartRepoBuildByRule", -> "StartRepoBuildByRule",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/rules/[BuildRuleId]/build" -> "/repos/[RepoNamespace]/[RepoName]/rules/[BuildRuleId]/build": Probability = 1.00, Count = 1
ModifyAvailabilityZoneGroupResponse -> ModifyAvailabilityZoneGroupResult: Probability = 1.00, Count = 1
ModifyAvailabilityZoneGroup -> modifyAvailabilityZoneGroup: Probability = 1.00, Count = 1
ModifyAvailabilityZoneGroupRequest -> ModifyAvailabilityZoneGroupRequest: Probability = 1.00, Count = 1
Invoke<ModifyAvailabilityZoneGroupResponse> -> executeModifyAvailabilityZoneGroup: Probability = 1.00, Count = 1
DescribeChangeSetResponse -> DescribeChangeSetResult: Probability = 1.00, Count = 1
DescribeChangeSet -> describeChangeSet: Probability = 1.00, Count = 1
DescribeChangeSetRequest -> DescribeChangeSetRequest: Probability = 1.00, Count = 1
Invoke<DescribeChangeSetResponse> -> executeDescribeChangeSet: Probability = 1.00, Count = 1
GetIdentityFile -> getIdentityFile: Probability = 1.00, Count = 1
identityFile -> identityFile: Probability = 1.00, Count = 1
lastDot -> lastDot: Probability = 0.75, Count = 3
lastDot -> n.lastIndexOf: Probability = 0.25, Count = 1
n.Replace -> n.replace: Probability = 1.00, Count = 1
'$', -> '$',: Probability = 1.00, Count = 1
DeleteVoiceConnectorProxyResponse -> DeleteVoiceConnectorProxyResult: Probability = 1.00, Count = 1
DeleteVoiceConnectorProxy -> deleteVoiceConnectorProxy: Probability = 1.00, Count = 1
DeleteVoiceConnectorProxyRequest -> DeleteVoiceConnectorProxyRequest: Probability = 1.00, Count = 1
Invoke<DeleteVoiceConnectorProxyResponse> -> executeDeleteVoiceConnectorProxy: Probability = 1.00, Count = 1
ByteArrayDataInput -> ByteArrayDataInput: Probability = 1.00, Count = 3
CreateLocalGatewayRouteResponse -> CreateLocalGatewayRouteResult: Probability = 1.00, Count = 1
CreateLocalGatewayRoute -> createLocalGatewayRoute: Probability = 1.00, Count = 1
CreateLocalGatewayRouteRequest -> CreateLocalGatewayRouteRequest: Probability = 1.00, Count = 1
Invoke<CreateLocalGatewayRouteResponse> -> executeCreateLocalGatewayRoute: Probability = 1.00, Count = 1
len++ -> len++: Probability = 1.00, Count = 1
AttachPolicyResponse -> AttachPolicyResult: Probability = 1.00, Count = 1
AttachPolicy -> attachPolicy: Probability = 1.00, Count = 1
AttachPolicyRequest -> AttachPolicyRequest: Probability = 1.00, Count = 1
Invoke<AttachPolicyResponse> -> executeAttachPolicy: Probability = 1.00, Count = 1
dnum -> dnum: Probability = 1.00, Count = 1
dnum.ToString -> dnum: Probability = 1.00, Count = 1
getCharacterInstance -> getCharacterInstance: Probability = 1.00, Count = 2
SendMessageRequest -> SendMessageRequest: Probability = 1.00, Count = 4
messageBody -> messageBody: Probability = 0.86, Count = 6
messageBody -> .withMessageBody: Probability = 0.14, Count = 1
_messageBody -> setMessageBody: Probability = 1.00, Count = 2
EvaluateRef -> reA: Probability = 0.33, Count = 1
EvaluateRef -> evaluateRef: Probability = 0.67, Count = 2
reB -> reB: Probability = 0.50, Count = 2
reB -> resolveRange: Probability = 0.25, Count = 1
reB -> reA,: Probability = 0.25, Count = 1
slice.Length -> slice.length: Probability = 1.00, Count = 2
mult -> mult: Probability = 0.67, Count = 4
mult -> -0.5d: Probability = 0.17, Count = 1
mult -> 0.5d: Probability = 0.17, Count = 1
J2N.BitConversion.DoubleToRawInt64Bits -> Double.doubleToRawLongBits: Probability = 1.00, Count = 3
FuzzyLikeThisQuery -> FuzzyLikeThisQuery: Probability = 1.00, Count = 1
maxNumTerms, -> maxNumTerms,: Probability = 1.00, Count = 1
maxNumTerms -> this.analyzer=analyzer: Probability = 0.50, Count = 1
maxNumTerms -> this.maxNumTerms: Probability = 0.50, Count = 1
this.maxNumTerms -> maxNumTerms: Probability = 1.00, Count = 1
Precpred -> precpred: Probability = 1.00, Count = 2
_precedenceStack[_precedenceStack.Count -> _precedenceStack.peek: Probability = 1.00, Count = 1
UpdateStackResponse -> UpdateStackResult: Probability = 1.00, Count = 1
UpdateStack -> updateStack: Probability = 1.00, Count = 1
UpdateStackRequest -> UpdateStackRequest: Probability = 1.00, Count = 1
Invoke<UpdateStackResponse> -> executeUpdateStack: Probability = 1.00, Count = 1
StartJumpserverRequest -> StartJumpserverRequest: Probability = 1.00, Count = 1
"StartJumpserver" -> "StartJumpserver",: Probability = 1.00, Count = 1
IList<IgnoreRule> -> List<FastIgnoreRule>: Probability = 1.00, Count = 1
RefMap -> RefMap: Probability = 1.00, Count = 2
packed -> packed: Probability = 1.00, Count = 2
ICollection<ObjectId> -> Collection<ObjectId>: Probability = 1.00, Count = 1
GetCandidates -> getCandidates: Probability = 1.00, Count = 1
candidates -> candidates: Probability = 1.00, Count = 1
enabledChars -> enabledChars: Probability = 1.00, Count = 2
character -> character: Probability = 1.00, Count = 4
SetCached -> setCached: Probability = 1.00, Count = 1
this.cached -> this.cached: Probability = 1.00, Count = 1
RevertCommand -> RevertCommand: Probability = 1.00, Count = 2
Revert -> revert: Probability = 1.00, Count = 1
table, -> table,: Probability = 1.00, Count = 1
Log2 -> log2: Probability = 1.00, Count = 1
LOG_2 -> LOG_2: Probability = 1.00, Count = 1
horizontalBorder.IsSet -> horizontalBorder.isSet: Probability = 1.00, Count = 1
DistErrPct -> specified.": Probability = 1.00, Count = 1
DeleteConfigurationSetResponse -> DeleteConfigurationSetResult: Probability = 1.00, Count = 1
DeleteConfigurationSet -> deleteConfigurationSet: Probability = 1.00, Count = 1
DeleteConfigurationSetRequest -> DeleteConfigurationSetRequest: Probability = 1.00, Count = 1
Invoke<DeleteConfigurationSetResponse> -> executeDeleteConfigurationSet: Probability = 1.00, Count = 1
IncrementToken -> incrementToken: Probability = 1.00, Count = 2
ClearAttributes -> clearAttributes: Probability = 1.00, Count = 2
termAttribute.Append -> termAttribute.append: Probability = 1.00, Count = 1
Invoke<DescribeSpotInstanceRequestsResponse> -> executeDescribeSpotInstanceRequests: Probability = 1.00, Count = 1
UpdateFieldLevelEncryptionConfigResponse -> UpdateFieldLevelEncryptionConfigResult: Probability = 1.00, Count = 1
UpdateFieldLevelEncryptionConfig -> updateFieldLevelEncryptionConfig: Probability = 1.00, Count = 1
UpdateFieldLevelEncryptionConfigRequest -> UpdateFieldLevelEncryptionConfigRequest: Probability = 1.00, Count = 1
Invoke<UpdateFieldLevelEncryptionConfigResponse> -> executeUpdateFieldLevelEncryptionConfig: Probability = 1.00, Count = 1
SetCachedResultTypeString -> setCachedResultTypeString: Probability = 1.00, Count = 1
SpecialCachedValue.CreateForString -> FormulaSpecialCachedValue.createForString: Probability = 1.00, Count = 1
SpanNearBuilder -> SpanNearBuilder: Probability = 1.00, Count = 1
DeleteGlobalClusterResponse -> GlobalCluster: Probability = 1.00, Count = 1
DeleteGlobalCluster -> deleteGlobalCluster: Probability = 1.00, Count = 1
DeleteGlobalClusterRequest -> DeleteGlobalClusterRequest: Probability = 1.00, Count = 1
Invoke<DeleteGlobalClusterResponse> -> executeDeleteGlobalCluster: Probability = 1.00, Count = 1
type.Name -> type.getSimpleName: Probability = 1.00, Count = 1
separator -> separator: Probability = 0.75, Count = 6
separator -> character": Probability = 0.12, Count = 1
separator -> this.separator: Probability = 0.12, Count = 1
!" -> !": Probability = 1.00, Count = 4
-> -> ->: Probability = 1.00, Count = 4
oldObjectId -> oldObjectId: Probability = 1.00, Count = 2
DescribeTerminationPolicyTypesResponse -> DescribeTerminationPolicyTypesResult: Probability = 1.00, Count = 2
DescribeTerminationPolicyTypes -> describeTerminationPolicyTypes: Probability = 1.00, Count = 3
DescribeTerminationPolicyTypesRequest -> DescribeTerminationPolicyTypesRequest: Probability = 1.00, Count = 2
"DeleteTags", -> "DeleteTags",: Probability = 1.00, Count = 1
ChartFormatRecord -> ChartFormatRecord: Probability = 1.00, Count = 1
field1_x_position -> field1_x_position: Probability = 1.00, Count = 1
IndexChangedListener -> IndexChangedListener: Probability = 0.67, Count = 2
IndexChangedListener -> IndexChangedListener.class: Probability = 0.33, Count = 1
listener.OnIndexChanged -> listener.onIndexChanged: Probability = 1.00, Count = 1
newSheetIndex -> newSheetIndex: Probability = 1.00, Count = 2
newNameRecord -> newNameRecord: Probability = 1.00, Count = 2
SerializeArrayConstantData -> serializeArrayConstantData: Probability = 1.00, Count = 1
_byteEncoding.Length -> _byteEncoding.length-_encodedTokenLen: Probability = 1.00, Count = 1
_encodedTokenLen, -> _encodedTokenLen,: Probability = 1.00, Count = 1
GetGcmChannelResponse -> GetGcmChannelResult: Probability = 1.00, Count = 1
GetGcmChannel -> getGcmChannel: Probability = 1.00, Count = 1
GetGcmChannelRequest -> GetGcmChannelRequest: Probability = 1.00, Count = 1
Invoke<GetGcmChannelResponse> -> executeGetGcmChannel: Probability = 1.00, Count = 1
indexReader.RamBytesUsed -> indexReader.ramBytesUsed: Probability = 1.00, Count = 2
DeleteStreamResponse -> DeleteStreamResult: Probability = 1.00, Count = 1
DeleteStream -> deleteStream: Probability = 1.00, Count = 1
DeleteStreamRequest -> DeleteStreamRequest: Probability = 1.00, Count = 1
Invoke<DeleteStreamResponse> -> executeDeleteStream: Probability = 1.00, Count = 1
RevokeSecurityGroupEgressResponse -> RevokeSecurityGroupEgressResult: Probability = 1.00, Count = 1
RevokeSecurityGroupEgress -> revokeSecurityGroupEgress: Probability = 1.00, Count = 1
RevokeSecurityGroupEgressRequest -> RevokeSecurityGroupEgressRequest: Probability = 1.00, Count = 1
Invoke<RevokeSecurityGroupEgressResponse> -> executeRevokeSecurityGroupEgress: Probability = 1.00, Count = 1
CreateRepoWebhookRequest -> CreateRepoWebhookRequest: Probability = 1.00, Count = 1
"CreateRepoWebhook", -> "CreateRepoWebhook",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/webhooks" -> "/repos/[RepoNamespace]/[RepoName]/webhooks": Probability = 1.00, Count = 2
GetCnt -> getCnt: Probability = 1.00, Count = 1
SortField[] -> SortField[]: Probability = 1.00, Count = 2
GetSort -> getSort: Probability = 1.00, Count = 1
RequiredVersion -> getRequiredVersion: Probability = 1.00, Count = 2
CreateDBInstanceResponse -> DBInstance: Probability = 1.00, Count = 1
CreateDBInstance -> createDBInstance: Probability = 1.00, Count = 1
Invoke<CreateDBInstanceResponse> -> executeCreateDBInstance: Probability = 1.00, Count = 1
CreateStackInstancesResponse -> CreateStackInstancesResult: Probability = 1.00, Count = 1
CreateStackInstances -> createStackInstances: Probability = 1.00, Count = 1
CreateStackInstancesRequest -> CreateStackInstancesRequest: Probability = 1.00, Count = 1
Invoke<CreateStackInstancesResponse> -> executeCreateStackInstances: Probability = 1.00, Count = 1
"SnapshotDeletionPolicy.SnapshotCommitPoint -> "SnapshotDeletionPolicy.SnapshotCommitPoint: Probability = 1.00, Count = 1
m_cp -> cp: Probability = 1.00, Count = 1
MissingRecordAwareHSSFListener -> MissingRecordAwareHSSFListener: Probability = 1.00, Count = 1
ResetCounts -> resetCounts: Probability = 1.00, Count = 1
~this._mask -> ~_mask: Probability = 1.00, Count = 1
m_traversalSize -> traversalSize: Probability = 1.00, Count = 1
CreateTextbox -> HSSFTextbox: Probability = 0.33, Count = 1
CreateTextbox -> createTextbox: Probability = 0.67, Count = 2
UpdateDevicePolicyConfigurationResponse -> UpdateDevicePolicyConfigurationResult: Probability = 1.00, Count = 1
UpdateDevicePolicyConfiguration -> updateDevicePolicyConfiguration: Probability = 1.00, Count = 1
UpdateDevicePolicyConfigurationRequest -> UpdateDevicePolicyConfigurationRequest: Probability = 1.00, Count = 1
Invoke<UpdateDevicePolicyConfigurationResponse> -> executeUpdateDevicePolicyConfiguration: Probability = 1.00, Count = 1
passageStart -> passageStart: Probability = 1.00, Count = 2
java.io.FileDescriptor -> final: Probability = 1.00, Count = 1
getFD -> FileDescriptor: Probability = 0.50, Count = 1
getFD -> getFD: Probability = 0.50, Count = 1
MoveAlbumPhotosRequest -> MoveAlbumPhotosRequest: Probability = 1.00, Count = 1
"MoveAlbumPhotos", -> "MoveAlbumPhotos",: Probability = 1.00, Count = 1
UpdateStackSetResponse -> UpdateStackSetResult: Probability = 1.00, Count = 1
UpdateStackSet -> updateStackSet: Probability = 1.00, Count = 1
UpdateStackSetRequest -> UpdateStackSetRequest: Probability = 1.00, Count = 1
Invoke<UpdateStackSetResponse> -> executeUpdateStackSet: Probability = 1.00, Count = 1
Acosh -> acosh: Probability = 1.00, Count = 2
CreateProposalResponse -> CreateProposalResult: Probability = 1.00, Count = 1
CreateProposal -> createProposal: Probability = 1.00, Count = 1
CreateProposalRequest -> CreateProposalRequest: Probability = 1.00, Count = 1
Invoke<CreateProposalResponse> -> executeCreateProposal: Probability = 1.00, Count = 1
DidFetchIncludeTags -> didFetchIncludeTags: Probability = 1.00, Count = 1
Peek -> peek: Probability = 1.00, Count = 1
head.commit -> head.commit: Probability = 1.00, Count = 1
SheetRecordCollector -> SheetRecordCollector: Probability = 1.00, Count = 1
_list -> _list: Probability = 1.00, Count = 1
RemovePermissionResponse -> RemovePermissionResult: Probability = 1.00, Count = 2
RemovePermission -> removePermission: Probability = 1.00, Count = 3
Invoke<RemovePermissionResponse> -> executeRemovePermission: Probability = 1.00, Count = 1
ModifyClusterIamRolesResponse -> Cluster: Probability = 1.00, Count = 1
ModifyClusterIamRoles -> modifyClusterIamRoles: Probability = 1.00, Count = 1
ModifyClusterIamRolesRequest -> ModifyClusterIamRolesRequest: Probability = 1.00, Count = 1
Invoke<ModifyClusterIamRolesResponse> -> executeModifyClusterIamRoles: Probability = 1.00, Count = 1
AreaFormatRecord -> AreaFormatRecord: Probability = 1.00, Count = 1
field_1_foregroundColor -> field_1_foregroundColor: Probability = 1.00, Count = 2
field_2_backgroundColor -> field_2_backgroundColor: Probability = 1.00, Count = 2
field_3_pattern -> field_3_pattern: Probability = 1.00, Count = 2
field_5_forecolorIndex -> field_5_forecolorIndex: Probability = 1.00, Count = 2
field_6_backcolorIndex -> field_6_backcolorIndex: Probability = 1.00, Count = 2
SetFlushPending -> setFlushPending: Probability = 1.00, Count = 1
"Jelinek-Mercer -> String.format: Probability = 0.50, Count = 1
"Jelinek-Mercer -> "Jelinek-Mercer: Probability = 0.50, Count = 1
Lambda -> getLambda: Probability = 1.00, Count = 1
DeleteKeyPairResponse -> DeleteKeyPairResult: Probability = 1.00, Count = 1
DeleteKeyPair -> deleteKeyPair: Probability = 1.00, Count = 1
DeleteKeyPairRequest -> DeleteKeyPairRequest: Probability = 1.00, Count = 2
Invoke<DeleteKeyPairResponse> -> executeDeleteKeyPair: Probability = 1.00, Count = 1
color._red, -> .getTriplet: Probability = 1.00, Count = 1
indexOfValue -> indexOfValue: Probability = 1.00, Count = 1
SetScheme -> setScheme: Probability = 1.00, Count = 1
r.scheme -> r.scheme: Probability = 1.00, Count = 1
charArray -> charArray: Probability = 1.00, Count = 1
charArray, -> charArray,: Probability = 1.00, Count = 1
charArray.Length -> charArray.length: Probability = 1.00, Count = 1
TokenConstants.DefaultChannel -> DEFAULT_CHANNEL: Probability = 1.00, Count = 1
this._text -> this.text: Probability = 1.00, Count = 1
atn, -> atn,PredictionContextCache: Probability = 1.00, Count = 1
this.atn -> this.atn: Probability = 1.00, Count = 1
atn -> atn: Probability = 1.00, Count = 1
this.sharedContextCache -> this.sharedContextCache: Probability = 1.00, Count = 1
CachedOrdinalsReader -> CachedOrdinalsReader: Probability = 1.00, Count = 1
OrdinalsReader -> OrdinalsReader: Probability = 1.00, Count = 1
getAbsoluteFile -> getAbsoluteFile: Probability = 1.00, Count = 1
getAbsolutePath -> getAbsolutePath: Probability = 1.00, Count = 1
DescribeTemplatePermissionsResponse -> DescribeTemplatePermissionsResult: Probability = 1.00, Count = 1
DescribeTemplatePermissions -> describeTemplatePermissions: Probability = 1.00, Count = 1
DescribeTemplatePermissionsRequest -> DescribeTemplatePermissionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeTemplatePermissionsResponse> -> executeDescribeTemplatePermissions: Probability = 1.00, Count = 1
CountOpenWorkflowExecutionsResponse -> WorkflowExecutionCount: Probability = 1.00, Count = 1
CountOpenWorkflowExecutions -> countOpenWorkflowExecutions: Probability = 1.00, Count = 1
CountOpenWorkflowExecutionsRequest -> CountOpenWorkflowExecutionsRequest: Probability = 1.00, Count = 1
Invoke<CountOpenWorkflowExecutionsResponse> -> executeCountOpenWorkflowExecutions: Probability = 1.00, Count = 1
DescribeAccountLimitsResponse -> DescribeAccountLimitsResult: Probability = 1.00, Count = 1
DescribeAccountLimits -> describeAccountLimits: Probability = 1.00, Count = 2
DescribeAccountLimitsRequest -> DescribeAccountLimitsRequest: Probability = 1.00, Count = 1
FST.Arc<long?> -> Arc<Long>: Probability = 0.25, Count = 1
FST.Arc<long?> -> arc: Probability = 0.50, Count = 2
FST.Arc<long?> -> Arc<>: Probability = 0.25, Count = 1
CreateGameServerGroupResponse -> CreateGameServerGroupResult: Probability = 1.00, Count = 1
CreateGameServerGroup -> createGameServerGroup: Probability = 1.00, Count = 1
CreateGameServerGroupRequest -> CreateGameServerGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateGameServerGroupResponse> -> executeCreateGameServerGroup: Probability = 1.00, Count = 1
0x10:case -> 0x0e:case: Probability = 1.00, Count = 1
0x11:case -> 0x0f:case: Probability = 1.00, Count = 1
0x12:case -> 0x10:case: Probability = 1.00, Count = 1
0x14:case -> 0x11:case: Probability = 1.00, Count = 1
0x15:case -> 0x12:case: Probability = 1.00, Count = 1
0x2d:case -> 0x13:case: Probability = 1.00, Count = 1
0x2e:case -> 0x14:case: Probability = 1.00, Count = 1
0x2f:retval -> 0x15:case: Probability = 1.00, Count = 1
default:retval -> 0x2f:return: Probability = 1.00, Count = 1
GetPackFile -> getPackFile: Probability = 1.00, Count = 1
newPack -> newPack: Probability = 1.00, Count = 1
CreateInternetGatewayResponse -> CreateInternetGatewayResult: Probability = 1.00, Count = 2
CreateInternetGateway -> createInternetGateway: Probability = 1.00, Count = 3
CreateInternetGatewayRequest -> CreateInternetGatewayRequest: Probability = 1.00, Count = 2
DrawPolyline -> drawPolyline: Probability = 1.00, Count = 1
"DrawPolyline -> POILogger.WARN,"drawPolyline: Probability = 1.00, Count = 1
nextOnChannel -> nextOnChannel: Probability = 1.00, Count = 3
DeleteCustomAvailabilityZoneResponse -> CustomAvailabilityZone: Probability = 1.00, Count = 1
DeleteCustomAvailabilityZone -> deleteCustomAvailabilityZone: Probability = 1.00, Count = 1
DeleteCustomAvailabilityZoneRequest -> DeleteCustomAvailabilityZoneRequest: Probability = 1.00, Count = 1
Invoke<DeleteCustomAvailabilityZoneResponse> -> executeDeleteCustomAvailabilityZone: Probability = 1.00, Count = 1
BatchUnsuspendUserResponse -> BatchUnsuspendUserResult: Probability = 1.00, Count = 1
BatchUnsuspendUser -> batchUnsuspendUser: Probability = 1.00, Count = 1
BatchUnsuspendUserRequest -> BatchUnsuspendUserRequest: Probability = 1.00, Count = 1
Invoke<BatchUnsuspendUserResponse> -> executeBatchUnsuspendUser: Probability = 1.00, Count = 1
DeleteAccountSettingResponse -> DeleteAccountSettingResult: Probability = 1.00, Count = 1
DeleteAccountSetting -> deleteAccountSetting: Probability = 1.00, Count = 1
DeleteAccountSettingRequest -> DeleteAccountSettingRequest: Probability = 1.00, Count = 1
Invoke<DeleteAccountSettingResponse> -> executeDeleteAccountSetting: Probability = 1.00, Count = 1
ListHumanLoopsResponse -> ListHumanLoopsResult: Probability = 1.00, Count = 1
ListHumanLoops -> listHumanLoops: Probability = 1.00, Count = 1
ListHumanLoopsRequest -> ListHumanLoopsRequest: Probability = 1.00, Count = 1
Invoke<ListHumanLoopsResponse> -> executeListHumanLoops: Probability = 1.00, Count = 1
maxN -> maxN: Probability = 1.00, Count = 2
firstArg -> firstArg: Probability = 0.62, Count = 5
firstArg -> evaluateSingleProduct: Probability = 0.38, Count = 3
NumericValueEval -> NumericValueEval: Probability = 1.00, Count = 6
DescribeParameterGroupsResponse -> DescribeParameterGroupsResult: Probability = 1.00, Count = 1
DescribeParameterGroups -> describeParameterGroups: Probability = 1.00, Count = 1
DescribeParameterGroupsRequest -> DescribeParameterGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeParameterGroupsResponse> -> executeDescribeParameterGroups: Probability = 1.00, Count = 1
SetTokenSource -> setTokenSource: Probability = 1.00, Count = 1
tokens.Clear -> tokens.clear: Probability = 1.00, Count = 1
this.fetchedEOF -> fetchedEOF: Probability = 1.00, Count = 1
EndErrorCondition -> endErrorCondition: Probability = 1.00, Count = 2
DescribeVpcPeeringAuthorizationsResponse -> DescribeVpcPeeringAuthorizationsResult: Probability = 1.00, Count = 1
DescribeVpcPeeringAuthorizations -> describeVpcPeeringAuthorizations: Probability = 1.00, Count = 1
DescribeVpcPeeringAuthorizationsRequest -> DescribeVpcPeeringAuthorizationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpcPeeringAuthorizationsResponse> -> executeDescribeVpcPeeringAuthorizations: Probability = 1.00, Count = 1
CreateDocumentationVersionResponse -> CreateDocumentationVersionResult: Probability = 1.00, Count = 1
CreateDocumentationVersion -> createDocumentationVersion: Probability = 1.00, Count = 1
CreateDocumentationVersionRequest -> CreateDocumentationVersionRequest: Probability = 1.00, Count = 1
Invoke<CreateDocumentationVersionResponse> -> executeCreateDocumentationVersion: Probability = 1.00, Count = 1
CreateClusterResponse -> CreateClusterResult: Probability = 1.00, Count = 1
termState.Length -> termState.length: Probability = 0.67, Count = 4
termState.Length -> termState,: Probability = 0.17, Count = 1
termState.Length -> tmpTermState,: Probability = 0.17, Count = 1
tmpTermState -> tmpTermState: Probability = 1.00, Count = 2
TermContext[ArrayUtil.Oversize -> TermStates[ArrayUtil.oversize: Probability = 1.00, Count = 2
termState -> termState: Probability = 1.00, Count = 3
GetAttributesResponse -> GetAttributesResult: Probability = 1.00, Count = 1
GetAttributes -> getAttributes: Probability = 1.00, Count = 1
Invoke<GetAttributesResponse> -> executeGetAttributes: Probability = 1.00, Count = 1
GetSubUserListRequest -> GetSubUserListRequest: Probability = 1.00, Count = 1
"GetSubUserList", -> "GetSubUserList",: Probability = 1.00, Count = 1
"/users/subAccount" -> "/users/subAccount": Probability = 1.00, Count = 1
SetQueryConfigHandler -> setQueryConfigHandler: Probability = 1.00, Count = 2
this.queryConfigHandler -> this.queryConfigHandler: Probability = 1.00, Count = 1
WindowCacheConfig -> WindowCacheConfig: Probability = 1.00, Count = 1
packedGitOpenFiles -> packedGitOpenFiles: Probability = 1.00, Count = 2
packedGitWindowSize -> packedGitWindowSize: Probability = 1.00, Count = 2
packedGitMMAP -> KB: Probability = 0.33, Count = 1
packedGitMMAP -> packedGitMMAP: Probability = 0.67, Count = 2
streamFileThreshold -> streamFileThreshold: Probability = 1.00, Count = 2
PackConfig.DEFAULT_BIG_FILE_THRESHOLD -> PackConfig.DEFAULT_BIG_FILE_THRESHOLD: Probability = 1.00, Count = 1
byteBuffer.asReadOnlyBuffer -> byteBuffer.asReadOnlyBuffer: Probability = 1.00, Count = 4
buf.byteBuffer._order -> buf.byteBuffer.order: Probability = 1.00, Count = 4
byteBuffer._order -> byteBuffer.order: Probability = 1.00, Count = 4
DescribeReservedCacheNodesResponse -> DescribeReservedCacheNodesResult: Probability = 1.00, Count = 2
DescribeReservedCacheNodes -> describeReservedCacheNodes: Probability = 1.00, Count = 3
DescribeReservedCacheNodesRequest -> DescribeReservedCacheNodesRequest: Probability = 1.00, Count = 2
Invoke<DescribeReservedCacheNodesResponse> -> executeDescribeReservedCacheNodes: Probability = 1.00, Count = 1
Invoke<ListOperationsResponse> -> executeListOperations: Probability = 1.00, Count = 1
"domain", -> "domain": Probability = 1.00, Count = 2
BatchReadResponse -> BatchReadResult: Probability = 1.00, Count = 1
BatchRead -> batchRead: Probability = 1.00, Count = 1
BatchReadRequest -> BatchReadRequest: Probability = 1.00, Count = 1
Invoke<BatchReadResponse> -> executeBatchRead: Probability = 1.00, Count = 1
retryTimes -> InstanceProfileCredentials: Probability = 0.25, Count = 1
retryTimes -> retryTimes: Probability = 0.75, Count = 3
retry -> retry: Probability = 1.00, Count = 1
times -> times: Probability = 1.00, Count = 2
exceeded." -> exceeded.": Probability = 1.00, Count = 1
DateTime.Now -> now: Probability = 1.00, Count = 2
idealIntArraySize -> idealIntArraySize: Probability = 1.00, Count = 1
.Version -> searcher.getIndexReader: Probability = 1.00, Count = 3
searcher.IndexReader -> .getVersion: Probability = 1.00, Count = 2
SearcherTracker -> SearcherTracker: Probability = 1.00, Count = 3
Lazy<SearcherTracker> -> tracker: Probability = 1.00, Count = 4
same -> same: Probability = 1.00, Count = 2
ClassifyDocumentResponse -> ClassifyDocumentResult: Probability = 1.00, Count = 1
ClassifyDocument -> classifyDocument: Probability = 1.00, Count = 1
ClassifyDocumentRequest -> ClassifyDocumentRequest: Probability = 1.00, Count = 1
Invoke<ClassifyDocumentResponse> -> executeClassifyDocument: Probability = 1.00, Count = 1
GetIdentityPoolRolesResponse -> GetIdentityPoolRolesResult: Probability = 1.00, Count = 1
GetIdentityPoolRoles -> getIdentityPoolRoles: Probability = 1.00, Count = 1
GetIdentityPoolRolesRequest -> GetIdentityPoolRolesRequest: Probability = 1.00, Count = 1
Invoke<GetIdentityPoolRolesResponse> -> executeGetIdentityPoolRoles: Probability = 1.00, Count = 1
this.chars, -> this.chars,: Probability = 1.00, Count = 2
this.wasEscaped, -> this.wasEscaped,: Probability = 1.00, Count = 2
startIndex,length -> start,newLength: Probability = 1.00, Count = 1
CreateDeploymentGroupResponse -> CreateDeploymentGroupResult: Probability = 1.00, Count = 1
CreateDeploymentGroup -> createDeploymentGroup: Probability = 1.00, Count = 1
CreateDeploymentGroupRequest -> CreateDeploymentGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateDeploymentGroupResponse> -> executeCreateDeploymentGroup: Probability = 1.00, Count = 1
"NOT_SET" -> r.append: Probability = 1.00, Count = 4
this.hasNext -> hasNext: Probability = 1.00, Count = 2
this.link.previous -> link.previous: Probability = 1.00, Count = 2
this.canRemove -> canRemove: Probability = 1.00, Count = 1
names.ContainsKey -> names.containsKey: Probability = 0.67, Count = 2
names.ContainsKey -> StringUtils.toLowerCase: Probability = 0.33, Count = 1
SetContext -> setContext: Probability = 1.00, Count = 1
.contextMustBeNonNegative -> .contextMustBeNonNegative: Probability = 1.00, Count = 1
GetNewPath -> getNewPath: Probability = 1.00, Count = 2
DescribeAccessPointsResponse -> DescribeAccessPointsResult: Probability = 1.00, Count = 1
DescribeAccessPoints -> describeAccessPoints: Probability = 1.00, Count = 1
DescribeAccessPointsRequest -> DescribeAccessPointsRequest: Probability = 1.00, Count = 1
Invoke<DescribeAccessPointsResponse> -> executeDescribeAccessPoints: Probability = 1.00, Count = 1
AddSSTString -> addSSTString: Probability = 1.00, Count = 1
sst.AddString -> sst.addString: Probability = 1.00, Count = 1
data.ToString -> data.toString: Probability = 1.00, Count = 1
List<HSSFObjectData> -> List<HSSFObjectData>: Probability = 1.00, Count = 2
GetAllEmbeddedObjects -> getAllEmbeddedObjects: Probability = 1.00, Count = 2
DisableDirectoryResponse -> DisableDirectoryResult: Probability = 1.00, Count = 1
DisableDirectory -> disableDirectory: Probability = 1.00, Count = 1
DisableDirectoryRequest -> DisableDirectoryRequest: Probability = 1.00, Count = 1
Invoke<DisableDirectoryResponse> -> executeDisableDirectory: Probability = 1.00, Count = 1
UpdateApiMappingResponse -> UpdateApiMappingResult: Probability = 1.00, Count = 1
UpdateApiMapping -> updateApiMapping: Probability = 1.00, Count = 1
UpdateApiMappingRequest -> UpdateApiMappingRequest: Probability = 1.00, Count = 1
Invoke<UpdateApiMappingResponse> -> executeUpdateApiMapping: Probability = 1.00, Count = 1
UpdateConfigurationResponse -> UpdateConfigurationResult: Probability = 1.00, Count = 1
UpdateConfiguration -> updateConfiguration: Probability = 1.00, Count = 1
UpdateConfigurationRequest -> UpdateConfigurationRequest: Probability = 1.00, Count = 1
Invoke<UpdateConfigurationResponse> -> executeUpdateConfiguration: Probability = 1.00, Count = 1
replace -> replace: Probability = 1.00, Count = 2
replace0 -> replace0: Probability = 1.00, Count = 1
Sharpen.StringHelper.GetBytesForString -> str.getBytes: Probability = 1.00, Count = 2
checkExternSheet -> checkExternSheet: Probability = 1.00, Count = 1
firstSheetNumber, -> firstSheetNumber,: Probability = 1.00, Count = 2
lastSheetNumber -> lastSheetNumber: Probability = 0.67, Count = 2
lastSheetNumber -> getOrCreateLinkTable: Probability = 0.33, Count = 1
OrCreateLinkTable.CheckExternSheet -> .checkExternSheet: Probability = 1.00, Count = 1
DeleteClusterParameterGroupResponse -> DeleteClusterParameterGroupResult: Probability = 1.00, Count = 1
DeleteClusterParameterGroup -> deleteClusterParameterGroup: Probability = 1.00, Count = 1
DeleteClusterParameterGroupRequest -> DeleteClusterParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteClusterParameterGroupResponse> -> executeDeleteClusterParameterGroup: Probability = 1.00, Count = 1
GetTemplateResponse -> GetTemplateResult: Probability = 1.00, Count = 1
GetTemplate -> getTemplate: Probability = 1.00, Count = 1
GetTemplateRequest -> GetTemplateRequest: Probability = 1.00, Count = 1
Invoke<GetTemplateResponse> -> executeGetTemplate: Probability = 1.00, Count = 1
DeleteNodegroupResponse -> DeleteNodegroupResult: Probability = 1.00, Count = 1
DeleteNodegroup -> deleteNodegroup: Probability = 1.00, Count = 1
DeleteNodegroupRequest -> DeleteNodegroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteNodegroupResponse> -> executeDeleteNodegroup: Probability = 1.00, Count = 1
hasRemaining -> hasRemaining: Probability = 1.00, Count = 1
DescribeBrokerInstanceOptionsResponse -> DescribeBrokerInstanceOptionsResult: Probability = 1.00, Count = 1
DescribeBrokerInstanceOptions -> describeBrokerInstanceOptions: Probability = 1.00, Count = 1
DescribeBrokerInstanceOptionsRequest -> DescribeBrokerInstanceOptionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeBrokerInstanceOptionsResponse> -> executeDescribeBrokerInstanceOptions: Probability = 1.00, Count = 1
GetDASHStreamingSessionURLResponse -> GetDASHStreamingSessionURLResult: Probability = 1.00, Count = 1
GetDASHStreamingSessionURL -> getDASHStreamingSessionURL: Probability = 1.00, Count = 1
GetDASHStreamingSessionURLRequest -> GetDASHStreamingSessionURLRequest: Probability = 1.00, Count = 1
Invoke<GetDASHStreamingSessionURLResponse> -> executeGetDASHStreamingSessionURL: Probability = 1.00, Count = 1
CancelJobResponse -> CancelJobResult: Probability = 1.00, Count = 1
CancelJob -> cancelJob: Probability = 1.00, Count = 1
CancelJobRequest -> CancelJobRequest: Probability = 1.00, Count = 1
Invoke<CancelJobResponse> -> executeCancelJob: Probability = 1.00, Count = 1
ListExperimentsResponse -> ListExperimentsResult: Probability = 1.00, Count = 1
ListExperiments -> listExperiments: Probability = 1.00, Count = 1
ListExperimentsRequest -> ListExperimentsRequest: Probability = 1.00, Count = 1
Invoke<ListExperimentsResponse> -> executeListExperiments: Probability = 1.00, Count = 1
CreateSubnetGroupResponse -> CreateSubnetGroupResult: Probability = 1.00, Count = 1
CreateSubnetGroup -> createSubnetGroup: Probability = 1.00, Count = 1
CreateSubnetGroupRequest -> CreateSubnetGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateSubnetGroupResponse> -> executeCreateSubnetGroup: Probability = 1.00, Count = 1
"scorer -> "scorer: Probability = 0.50, Count = 1
"scorer -> weight: Probability = 0.50, Count = 1
m_weight -> [": Probability = 1.00, Count = 1
GetExecutor -> getExecutor: Probability = 1.00, Count = 1
Invalid -> invalid: Probability = 1.00, Count = 1
StandardQueryParser -> StandardQueryParser: Probability = 1.00, Count = 4
this.Analyzer -> this.setAnalyzer: Probability = 1.00, Count = 1
IndexedUDFFinder -> IndexedUDFFinder: Probability = 1.00, Count = 1
UDFFinder[] -> UDFFinder...: Probability = 1.00, Count = 1
usedToolPacks -> usedToolPacks: Probability = 1.00, Count = 2
_funcMap -> _funcMap: Probability = 1.00, Count = 1
String> -> HashMap<>: Probability = 1.00, Count = 1
CountMatchingCellsInRef -> countMatchingCellsInRef: Probability = 1.00, Count = 1
refEval, -> refEval,: Probability = 1.00, Count = 1
NameXPxg -> NameXPxg: Probability = 1.00, Count = 1
this.nameName -> this.nameName: Probability = 1.00, Count = 1
MergeInfo -> MergeInfo: Probability = 1.00, Count = 3
totalDocCount, -> totalMaxDoc,: Probability = 1.00, Count = 1
estimatedMergeBytes, -> estimatedMergeBytes,: Probability = 1.00, Count = 1
isExternal, -> isExternal,: Probability = 1.00, Count = 1
mergeMaxNumSegments -> mergeMaxNumSegments: Probability = 1.00, Count = 2
this.TotalDocCount -> this.totalMaxDoc: Probability = 1.00, Count = 1
totalDocCount -> totalMaxDoc: Probability = 1.00, Count = 1
this.EstimatedMergeBytes -> this.estimatedMergeBytes: Probability = 1.00, Count = 1
estimatedMergeBytes -> estimatedMergeBytes: Probability = 1.00, Count = 1
this.IsExternal -> this.isExternal: Probability = 1.00, Count = 1
isExternal -> isExternal: Probability = 1.00, Count = 1
this.MergeMaxNumSegments -> this.mergeMaxNumSegments: Probability = 1.00, Count = 1
CreateHsmClientCertificateResponse -> HsmClientCertificate: Probability = 1.00, Count = 1
CreateHsmClientCertificate -> createHsmClientCertificate: Probability = 1.00, Count = 1
CreateHsmClientCertificateRequest -> CreateHsmClientCertificateRequest: Probability = 1.00, Count = 1
Invoke<CreateHsmClientCertificateResponse> -> executeCreateHsmClientCertificate: Probability = 1.00, Count = 1
Consume -> consume: Probability = 1.00, Count = 5
IErrorNode -> ErrorNode: Probability = 1.00, Count = 4
IParseTreeListener -> ParseTreeListener: Probability = 1.00, Count = 4
DescribeEgressOnlyInternetGatewaysResponse -> DescribeEgressOnlyInternetGatewaysResult: Probability = 1.00, Count = 1
DescribeEgressOnlyInternetGateways -> describeEgressOnlyInternetGateways: Probability = 1.00, Count = 1
DescribeEgressOnlyInternetGatewaysRequest -> DescribeEgressOnlyInternetGatewaysRequest: Probability = 1.00, Count = 1
Invoke<DescribeEgressOnlyInternetGatewaysResponse> -> executeDescribeEgressOnlyInternetGateways: Probability = 1.00, Count = 1
GetTarget -> getTarget: Probability = 1.00, Count = 3
dst.IsSymbolic -> dst.isSymbolic: Probability = 1.00, Count = 1
dst.GetTarget -> dst.getTarget: Probability = 1.00, Count = 1
ListStacksResponse -> ListStacksResult: Probability = 1.00, Count = 2
ListStacks -> listStacks: Probability = 1.00, Count = 3
ListStacksRequest -> ListStacksRequest: Probability = 1.00, Count = 2
PutInstancePublicPortsResponse -> PutInstancePublicPortsResult: Probability = 1.00, Count = 1
PutInstancePublicPorts -> putInstancePublicPorts: Probability = 1.00, Count = 1
PutInstancePublicPortsRequest -> PutInstancePublicPortsRequest: Probability = 1.00, Count = 1
Invoke<PutInstancePublicPortsResponse> -> executePutInstancePublicPorts: Probability = 1.00, Count = 1
GetConfigurationSetResponse -> GetConfigurationSetResult: Probability = 1.00, Count = 1
GetConfigurationSet -> getConfigurationSet: Probability = 1.00, Count = 1
GetConfigurationSetRequest -> GetConfigurationSetRequest: Probability = 1.00, Count = 1
Invoke<GetConfigurationSetResponse> -> executeGetConfigurationSet: Probability = 1.00, Count = 1
kid -> kid: Probability = 0.64, Count = 7
kid -> element.getFirstChild: Probability = 0.09, Count = 1
kid -> kid.getNextSibling: Probability = 0.09, Count = 1
kid -> kid.getNodeType: Probability = 0.09, Count = 1
kid -> Node.ELEMENT_NODE: Probability = 0.09, Count = 1
baseLen -> baseLen: Probability = 1.00, Count = 3
VerifyEmailIdentityResponse -> VerifyEmailIdentityResult: Probability = 1.00, Count = 1
VerifyEmailIdentity -> verifyEmailIdentity: Probability = 1.00, Count = 1
VerifyEmailIdentityRequest -> VerifyEmailIdentityRequest: Probability = 1.00, Count = 1
Invoke<VerifyEmailIdentityResponse> -> executeVerifyEmailIdentity: Probability = 1.00, Count = 1
CreateInvalidationResponse -> CreateInvalidationResult: Probability = 1.00, Count = 1
CreateInvalidation -> createInvalidation: Probability = 1.00, Count = 1
Invoke<CreateInvalidationResponse> -> executeCreateInvalidation: Probability = 1.00, Count = 1
ListGroupsForUserRequest -> ListGroupsForUserRequest: Probability = 1.00, Count = 1
field_1_stream_pos -> field_1_stream_pos: Probability = 1.00, Count = 3
field_2_bucket_sst_offset -> field_2_bucket_sst_offset: Probability = 1.00, Count = 3
field_3_zero -> field_3_zero: Probability = 1.00, Count = 2
this.q.Equals -> this.q.equals: Probability = 1.00, Count = 1
other.q -> other.q: Probability = 1.00, Count = 1
other.defVal -> this.defVal==other.defVal: Probability = 1.00, Count = 1
currentVersion -> checkForUpdate: Probability = 0.20, Count = 1
currentVersion -> currentVersion: Probability = 0.60, Count = 3
currentVersion -> currentRevision.revision.compareTo: Probability = 0.20, Count = 1
SetCommitNames -> setCommitNames: Probability = 1.00, Count = 1
this.commitNames -> this.commitNames: Probability = 1.00, Count = 1
CreateFormula -> createFormula: Probability = 1.00, Count = 1
fr -> fr: Probability = 0.80, Count = 4
fr -> _workbook.getFontIndex: Probability = 0.20, Count = 1
fr.Row= -> fr.setRow: Probability = 1.00, Count = 1
fr.Column= -> fr.setColumn: Probability = 1.00, Count = 1
fr, -> fr,: Probability = 1.00, Count = 1
_sharedValueManager -> _sharedValueManager: Probability = 1.00, Count = 1
DetectSyntaxResponse -> DetectSyntaxResult: Probability = 1.00, Count = 1
DetectSyntax -> detectSyntax: Probability = 1.00, Count = 1
DetectSyntaxRequest -> DetectSyntaxRequest: Probability = 1.00, Count = 1
Invoke<DetectSyntaxResponse> -> executeDetectSyntax: Probability = 1.00, Count = 1
holidays -> holidays: Probability = 1.00, Count = 5
HSSFDataValidationHelper -> HSSFDataValidationHelper: Probability = 1.00, Count = 1
SyncFacePicturesRequest -> SyncFacePicturesRequest: Probability = 1.00, Count = 1
"SyncFacePictures" -> "SyncFacePictures": Probability = 1.00, Count = 1
ShortToHex -> shortToHex: Probability = 1.00, Count = 1
AdjustSeekIndex -> adjustSeekIndex: Probability = 1.00, Count = 2
CreateTransitGatewayPeeringAttachmentResponse -> CreateTransitGatewayPeeringAttachmentResult: Probability = 1.00, Count = 1
CreateTransitGatewayPeeringAttachment -> createTransitGatewayPeeringAttachment: Probability = 1.00, Count = 1
CreateTransitGatewayPeeringAttachmentRequest -> CreateTransitGatewayPeeringAttachmentRequest: Probability = 1.00, Count = 1
Invoke<CreateTransitGatewayPeeringAttachmentResponse> -> executeCreateTransitGatewayPeeringAttachment: Probability = 1.00, Count = 1
DeepCopyOf -> deepCopyOf: Probability = 1.00, Count = 1
copy.CopyBytes -> other.length: Probability = 1.00, Count = 2
TokenCollector -> TokenCollector: Probability = 1.00, Count = 1
tokenCount -> tokenCount: Probability = 1.00, Count = 1
_ptgs -> _ptgs: Probability = 1.00, Count = 2
Ptg[tokenCount] -> Ptg[tokenCount]: Probability = 1.00, Count = 1
DescribeNatGatewaysResponse -> DescribeNatGatewaysResult: Probability = 1.00, Count = 1
DescribeNatGateways -> describeNatGateways: Probability = 1.00, Count = 1
DescribeNatGatewaysRequest -> DescribeNatGatewaysRequest: Probability = 1.00, Count = 1
Invoke<DescribeNatGatewaysResponse> -> executeDescribeNatGateways: Probability = 1.00, Count = 1
ResetImageAttributeResponse -> ResetImageAttributeResult: Probability = 1.00, Count = 1
ResetImageAttribute -> resetImageAttribute: Probability = 1.00, Count = 1
ResetImageAttributeRequest -> ResetImageAttributeRequest: Probability = 1.00, Count = 1
Invoke<ResetImageAttributeResponse> -> executeResetImageAttribute: Probability = 1.00, Count = 1
SetHorizontalBorder -> setHorizontalBorder: Probability = 1.00, Count = 1
horizontalBorder.SetShortBoolean -> horizontalBorder.setShortBoolean: Probability = 1.00, Count = 1
ModifyReplicationGroupResponse -> ReplicationGroup: Probability = 1.00, Count = 1
ModifyReplicationGroup -> modifyReplicationGroup: Probability = 1.00, Count = 1
ModifyReplicationGroupRequest -> ModifyReplicationGroupRequest: Probability = 1.00, Count = 1
Invoke<ModifyReplicationGroupResponse> -> executeModifyReplicationGroup: Probability = 1.00, Count = 1
GetIntegrationsResponse -> GetIntegrationsResult: Probability = 1.00, Count = 1
GetIntegrations -> getIntegrations: Probability = 1.00, Count = 1
GetIntegrationsRequest -> GetIntegrationsRequest: Probability = 1.00, Count = 1
Invoke<GetIntegrationsResponse> -> executeGetIntegrations: Probability = 1.00, Count = 1
field_6_value -> field_6_value: Probability = 1.00, Count = 3
NGit.Api.SubmoduleAddCommand -> SubmoduleAddCommand: Probability = 1.00, Count = 2
currentBlock[currentBlockUpto++] -> currentBlock[currentBlockUpto++]: Probability = 1.00, Count = 1
TestAlarmResponse -> TestAlarmResult: Probability = 1.00, Count = 1
TestAlarm -> testAlarm: Probability = 1.00, Count = 1
TestAlarmRequest -> TestAlarmRequest: Probability = 1.00, Count = 1
Invoke<TestAlarmResponse> -> executeTestAlarm: Probability = 1.00, Count = 1
MAX_MERGED_REGIONS -> nFullMergedCellsRecords: Probability = 0.21, Count = 3
MAX_MERGED_REGIONS -> MAX_MERGED_REGIONS: Probability = 0.36, Count = 5
MAX_MERGED_REGIONS -> startIx: Probability = 0.14, Count = 2
MAX_MERGED_REGIONS -> cras,: Probability = 0.14, Count = 2
MAX_MERGED_REGIONS -> startIx,: Probability = 0.14, Count = 2
nLeftoverMergedRegions -> nLeftoverMergedRegions: Probability = 1.00, Count = 3
char[32] -> char[32]: Probability = 1.00, Count = 1
SendEmailRequest -> SendEmailRequest: Probability = 1.00, Count = 2
_source -> setSource: Probability = 1.00, Count = 1
_destination -> setDestination: Probability = 1.00, Count = 1
"PRIVATEKEY" -> "PRIVATEKEY": Probability = 1.00, Count = 1
StopProjectVersionResponse -> StopProjectVersionResult: Probability = 1.00, Count = 1
StopProjectVersion -> stopProjectVersion: Probability = 1.00, Count = 1
StopProjectVersionRequest -> StopProjectVersionRequest: Probability = 1.00, Count = 1
Invoke<StopProjectVersionResponse> -> executeStopProjectVersion: Probability = 1.00, Count = 1
CreateCacheClusterResponse -> CacheCluster: Probability = 1.00, Count = 1
CreateCacheCluster -> createCacheCluster: Probability = 1.00, Count = 1
CreateCacheClusterRequest -> CreateCacheClusterRequest: Probability = 1.00, Count = 1
Invoke<CreateCacheClusterResponse> -> executeCreateCacheCluster: Probability = 1.00, Count = 1
Label.Equals -> label.equals: Probability = 1.00, Count = 1
_other.Label, -> other.label: Probability = 1.00, Count = 1
masterInstanceType, -> masterInstanceType,: Probability = 1.00, Count = 1
slaveInstanceType, -> slaveInstanceType,: Probability = 1.00, Count = 1
_masterInstanceType -> setMasterInstanceType: Probability = 0.50, Count = 1
_masterInstanceType -> masterInstanceType: Probability = 0.50, Count = 1
masterInstanceType -> setSlaveInstanceType: Probability = 1.00, Count = 1
slaveInstanceType -> slaveInstanceType: Probability = 1.00, Count = 1
goto -> break: Probability = 1.00, Count = 4
HSSFPictureData -> HSSFPictureData: Probability = 1.00, Count = 1
blip -> blip: Probability = 1.00, Count = 2
this.blip -> this.blip: Probability = 1.00, Count = 1
c.ToString -> c: Probability = 0.60, Count = 3
c.ToString -> c.toString: Probability = 0.40, Count = 2
filenames -> filenames: Probability = 0.80, Count = 4
filenames -> filenames.length: Probability = 0.20, Count = 1
arg.Substring -> arg.substring: Probability = 0.50, Count = 2
arg.Substring -> arg.length: Probability = 0.50, Count = 2
reserved.Length -> reserved.length: Probability = 1.00, Count = 1
HadoopJarStepConfig -> HadoopJarStepConfig: Probability = 1.00, Count = 4
jar -> jar: Probability = 1.00, Count = 2
_jar -> setJar: Probability = 1.00, Count = 1
GetChannelsResponse -> GetChannelsResult: Probability = 1.00, Count = 1
GetChannels -> getChannels: Probability = 1.00, Count = 1
GetChannelsRequest -> GetChannelsRequest: Probability = 1.00, Count = 1
Invoke<GetChannelsResponse> -> executeGetChannels: Probability = 1.00, Count = 1
getParentFile -> getParentFile: Probability = 1.00, Count = 1
tempParent -> tempParent: Probability = 1.00, Count = 3
resolve -> resolve: Probability = 1.00, Count = 2
create -> create: Probability = 1.00, Count = 3
SetCompressionLevel -> setCompressionLevel: Probability = 1.00, Count = 1
compressionLevel -> compressionLevel: Probability = 1.00, Count = 2
lastTrailingHighSurrogate -> lastTrailingHighSurrogate: Probability = 1.00, Count = 1
_s -> setS: Probability = 1.00, Count = 1
CheckOffsets -> image: Probability = 1.00, Count = 2
org.xmlpull.v1.XmlSerializer -> XmlSerializer: Probability = 1.00, Count = 3
org.xmlpull.v1.XmlPullParserException -> XmlPullParserException: Probability = 1.00, Count = 4
UpdateDomainContactPrivacyResponse -> UpdateDomainContactPrivacyResult: Probability = 1.00, Count = 1
UpdateDomainContactPrivacy -> updateDomainContactPrivacy: Probability = 1.00, Count = 1
UpdateDomainContactPrivacyRequest -> UpdateDomainContactPrivacyRequest: Probability = 1.00, Count = 1
Invoke<UpdateDomainContactPrivacyResponse> -> executeUpdateDomainContactPrivacy: Probability = 1.00, Count = 1
toString -> enc: Probability = 1.00, Count = 2
DescribeStaleSecurityGroupsResponse -> DescribeStaleSecurityGroupsResult: Probability = 1.00, Count = 1
DescribeStaleSecurityGroups -> describeStaleSecurityGroups: Probability = 1.00, Count = 1
DescribeStaleSecurityGroupsRequest -> DescribeStaleSecurityGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeStaleSecurityGroupsResponse> -> executeDescribeStaleSecurityGroups: Probability = 1.00, Count = 1
DisassociateWebsiteCertificateAuthorityResponse -> DisassociateWebsiteCertificateAuthorityResult: Probability = 1.00, Count = 1
DisassociateWebsiteCertificateAuthority -> disassociateWebsiteCertificateAuthority: Probability = 1.00, Count = 1
DisassociateWebsiteCertificateAuthorityRequest -> DisassociateWebsiteCertificateAuthorityRequest: Probability = 1.00, Count = 1
Invoke<DisassociateWebsiteCertificateAuthorityResponse> -> executeDisassociateWebsiteCertificateAuthority: Probability = 1.00, Count = 1
DeleteTransitGatewayVpcAttachmentResponse -> DeleteTransitGatewayVpcAttachmentResult: Probability = 1.00, Count = 1
DeleteTransitGatewayVpcAttachment -> deleteTransitGatewayVpcAttachment: Probability = 1.00, Count = 1
DeleteTransitGatewayVpcAttachmentRequest -> DeleteTransitGatewayVpcAttachmentRequest: Probability = 1.00, Count = 1
Invoke<DeleteTransitGatewayVpcAttachmentResponse> -> executeDeleteTransitGatewayVpcAttachment: Probability = 1.00, Count = 1
prefixLen -> prefixLen: Probability = 1.00, Count = 3
prefix[i] -> prefix.charAt: Probability = 1.00, Count = 1
UpdateBatchPredictionResponse -> UpdateBatchPredictionResult: Probability = 1.00, Count = 1
UpdateBatchPrediction -> updateBatchPrediction: Probability = 1.00, Count = 1
UpdateBatchPredictionRequest -> UpdateBatchPredictionRequest: Probability = 1.00, Count = 1
Invoke<UpdateBatchPredictionResponse> -> executeUpdateBatchPrediction: Probability = 1.00, Count = 1
GetHeadId -> getHeadId: Probability = 1.00, Count = 1
headId -> headId: Probability = 0.50, Count = 4
headId -> walk.setRevFilter: Probability = 0.50, Count = 4
GetAssociatedIpv6PoolCidrsResponse -> GetAssociatedIpv6PoolCidrsResult: Probability = 1.00, Count = 1
GetAssociatedIpv6PoolCidrs -> getAssociatedIpv6PoolCidrs: Probability = 1.00, Count = 1
GetAssociatedIpv6PoolCidrsRequest -> GetAssociatedIpv6PoolCidrsRequest: Probability = 1.00, Count = 1
Invoke<GetAssociatedIpv6PoolCidrsResponse> -> executeGetAssociatedIpv6PoolCidrs: Probability = 1.00, Count = 1
CopyValue -> copyValue: Probability = 1.00, Count = 1
_cellType -> _cellType: Probability = 1.00, Count = 4
destCell.SetCellValue -> NUMERIC:: Probability = 0.20, Count = 1
destCell.SetCellValue -> destCell.setCellValue: Probability = 0.60, Count = 3
destCell.SetCellValue -> STRING:: Probability = 0.20, Count = 1
DescribeLaunchTemplateVersionsResponse -> DescribeLaunchTemplateVersionsResult: Probability = 1.00, Count = 1
DescribeLaunchTemplateVersions -> describeLaunchTemplateVersions: Probability = 1.00, Count = 1
DescribeLaunchTemplateVersionsRequest -> DescribeLaunchTemplateVersionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeLaunchTemplateVersionsResponse> -> executeDescribeLaunchTemplateVersions: Probability = 1.00, Count = 1
CreateCustomFormulaConstraint -> createCustomFormulaConstraint: Probability = 1.00, Count = 1
"formula -> "formula: Probability = 1.00, Count = 1
double.NaN, -> ValidationType.FORMULA,: Probability = 0.33, Count = 1
double.NaN, -> OperatorType.IGNORED,: Probability = 0.33, Count = 1
double.NaN, -> formula,: Probability = 0.33, Count = 1
DeleteProjectVersionResponse -> DeleteProjectVersionResult: Probability = 1.00, Count = 1
DeleteProjectVersion -> deleteProjectVersion: Probability = 1.00, Count = 1
DeleteProjectVersionRequest -> DeleteProjectVersionRequest: Probability = 1.00, Count = 1
Invoke<DeleteProjectVersionResponse> -> executeDeleteProjectVersion: Probability = 1.00, Count = 1
TermText -> getTermText: Probability = 1.00, Count = 2
eval, -> eval,: Probability = 1.00, Count = 3
ParseFile -> parseFile: Probability = 1.00, Count = 1
DescribeVolumeAttributeResponse -> DescribeVolumeAttributeResult: Probability = 1.00, Count = 1
DescribeVolumeAttribute -> describeVolumeAttribute: Probability = 1.00, Count = 1
DescribeVolumeAttributeRequest -> DescribeVolumeAttributeRequest: Probability = 1.00, Count = 1
Invoke<DescribeVolumeAttributeResponse> -> executeDescribeVolumeAttribute: Probability = 1.00, Count = 1
WorkingTreeOptions -> WorkingTreeOptions: Probability = 1.00, Count = 1
state.options -> state.options: Probability = 1.00, Count = 1
SendInvitationResponse -> SendInvitationResult: Probability = 1.00, Count = 1
SendInvitation -> sendInvitation: Probability = 1.00, Count = 1
SendInvitationRequest -> SendInvitationRequest: Probability = 1.00, Count = 1
Invoke<SendInvitationResponse> -> executeSendInvitation: Probability = 1.00, Count = 1
DeleteAlarmsResponse -> DeleteAlarmsResult: Probability = 1.00, Count = 1
DeleteAlarms -> deleteAlarms: Probability = 1.00, Count = 1
DeleteAlarmsRequest -> DeleteAlarmsRequest: Probability = 1.00, Count = 1
Invoke<DeleteAlarmsResponse> -> executeDeleteAlarms: Probability = 1.00, Count = 1
inputStr -> inputStr: Probability = 0.75, Count = 3
inputStr -> dir,new: Probability = 0.25, Count = 1
ModifyDBSnapshotAttributeResponse -> DBSnapshotAttributesResult: Probability = 1.00, Count = 1
ModifyDBSnapshotAttribute -> modifyDBSnapshotAttribute: Probability = 1.00, Count = 1
ModifyDBSnapshotAttributeRequest -> ModifyDBSnapshotAttributeRequest: Probability = 1.00, Count = 1
Invoke<ModifyDBSnapshotAttributeResponse> -> executeModifyDBSnapshotAttribute: Probability = 1.00, Count = 1
readUTF -> readUTF: Probability = 1.00, Count = 2
java.io.DataInput -> DataInput: Probability = 1.00, Count = 1
elements[index] -> elements[index]: Probability = 1.00, Count = 2
removeRange -> removeRange: Probability = 1.00, Count = 1
GetElement -> getElement: Probability = 1.00, Count = 1
actualSize -> actualSize: Probability = 1.00, Count = 3
SizeOfElements -> getSizeOfElements: Probability = 1.00, Count = 2
actualSize, -> actualSize,: Probability = 1.00, Count = 3
FIXED_SIZE -> FIXED_SIZE: Probability = 1.00, Count = 2
WriteData -> writeData: Probability = 1.00, Count = 3
block.Write -> block.put: Probability = 1.00, Count = 1
SetSshSessionFactory -> setSshSessionFactory: Probability = 1.00, Count = 1
sock -> sock: Probability = 1.00, Count = 2
.anSSHSessionHasBeenAlreadyCreated -> .anSSHSessionHasBeenAlreadyCreated: Probability = 1.00, Count = 1
RawText -> RawText: Probability = 1.00, Count = 3
GetSourceContents -> getSourceContents: Probability = 1.00, Count = 1
currentSource.sourceText -> outCandidate.sourceText: Probability = 1.00, Count = 1
GetProgressMonitor -> getProgressMonitor: Probability = 1.00, Count = 1
_data -> setData: Probability = 0.03, Count = 1
_data -> _data: Probability = 0.14, Count = 5
_data -> this.bigBlockSize: Probability = 0.03, Count = 1
_data -> POIFSConstants.SMALLER_BIG_BLOCK_SIZE: Probability = 0.03, Count = 1
_data -> _data,: Probability = 0.03, Count = 1
_data -> _default_value: Probability = 0.03, Count = 1
_data -> _signature_offset,: Probability = 0.03, Count = 1
_data -> _signature,: Probability = 0.03, Count = 1
_data -> 0x08,: Probability = 0.03, Count = 1
_data -> 0x0c,: Probability = 0.03, Count = 1
_data -> 0x10,: Probability = 0.03, Count = 1
_data -> 0x14,: Probability = 0.03, Count = 1
_data -> 0x18,: Probability = 0.03, Count = 1
_data -> 0x3b,: Probability = 0.03, Count = 1
_data -> 0x1a,: Probability = 0.03, Count = 1
_data -> 0x3,: Probability = 0.03, Count = 1
_data -> 0x1c,: Probability = 0.03, Count = 1
_data -> -2,: Probability = 0.03, Count = 1
_data -> 0x1e,: Probability = 0.03, Count = 1
_data -> bigBlockSize.getHeaderValue: Probability = 0.03, Count = 1
_data -> 0x20,: Probability = 0.03, Count = 1
_data -> 0x6,: Probability = 0.03, Count = 1
_data -> 0x24,: Probability = 0.03, Count = 1
_data -> 0x28,: Probability = 0.03, Count = 1
_data -> 0x34,: Probability = 0.03, Count = 1
_data -> 0x38,: Probability = 0.03, Count = 1
_data -> 0x1000,: Probability = 0.03, Count = 1
_data -> _bat_count: Probability = 0.03, Count = 1
_data -> _sbat_count: Probability = 0.03, Count = 1
_data -> _xbat_count: Probability = 0.03, Count = 1
_data -> _property_start: Probability = 0.03, Count = 1
_data -> _sbat_start: Probability = 0.03, Count = 1
_data -> _xbat_start: Probability = 0.03, Count = 1
GetLockMessage -> getLockMessage: Probability = 1.00, Count = 1
snapshot[--index] -> snapshot[--index]: Probability = 1.00, Count = 1
InviteUsersResponse -> InviteUsersResult: Probability = 1.00, Count = 1
InviteUsers -> inviteUsers: Probability = 1.00, Count = 1
InviteUsersRequest -> InviteUsersRequest: Probability = 1.00, Count = 1
Invoke<InviteUsersResponse> -> executeInviteUsers: Probability = 1.00, Count = 1
firstScore -> ScoreDoc: Probability = 1.00, Count = 2
secondScore -> firstScoreDoc: Probability = 0.17, Count = 1
secondScore -> secondScoreDoc: Probability = 0.17, Count = 1
secondScore -> firstScoreDoc.score: Probability = 0.33, Count = 2
secondScore -> secondScoreDoc.score: Probability = 0.33, Count = 2
ListSubscriptionsRequest -> ListSubscriptionsRequest: Probability = 1.00, Count = 1
RemoveTagsFromResourceResponse -> RemoveTagsFromResourceResult: Probability = 1.00, Count = 1
RemoveTagsFromResource -> removeTagsFromResource: Probability = 1.00, Count = 1
RemoveTagsFromResourceRequest -> RemoveTagsFromResourceRequest: Probability = 1.00, Count = 1
Invoke<RemoveTagsFromResourceResponse> -> executeRemoveTagsFromResource: Probability = 1.00, Count = 1
ListHostedZonesResponse -> ListHostedZonesResult: Probability = 1.00, Count = 2
ListHostedZones -> listHostedZones: Probability = 1.00, Count = 3
ListHostedZonesRequest -> ListHostedZonesRequest: Probability = 1.00, Count = 2
stdev -> stdev: Probability = 1.00, Count = 1
devsq -> devsq: Probability = 1.00, Count = 1
GetVoiceConnectorLoggingConfigurationResponse -> GetVoiceConnectorLoggingConfigurationResult: Probability = 1.00, Count = 1
GetVoiceConnectorLoggingConfiguration -> getVoiceConnectorLoggingConfiguration: Probability = 1.00, Count = 1
GetVoiceConnectorLoggingConfigurationRequest -> GetVoiceConnectorLoggingConfigurationRequest: Probability = 1.00, Count = 1
Invoke<GetVoiceConnectorLoggingConfigurationResponse> -> executeGetVoiceConnectorLoggingConfiguration: Probability = 1.00, Count = 1
Invoke<GetQueueUrlResponse> -> executeGetQueueUrl: Probability = 1.00, Count = 1
TblPtg -> TblPtg: Probability = 1.00, Count = 1
PackedInt32s.Reader -> PackedInts.Reader: Probability = 1.00, Count = 1
reader.RamBytesUsed -> reader.ramBytesUsed: Probability = 1.00, Count = 1
Invoke<CreateInternetGatewayResponse> -> executeCreateInternetGateway: Probability = 1.00, Count = 1
SetInputStream -> setInputStream: Probability = 0.50, Count = 1
SetInputStream -> IntStream: Probability = 0.50, Count = 1
this._input -> this._input: Probability = 1.00, Count = 2
this._tokenFactorySourcePair -> this._tokenFactorySourcePair: Probability = 1.00, Count = 2
this.field_2_first_col -> this.field_2_first_col: Probability = 1.00, Count = 1
array[index++] -> array[index++]: Probability = 1.00, Count = 1
"||", -> "||": Probability = 1.00, Count = 1
AnyDeletions -> anyDeletions: Probability = 1.00, Count = 1
deleteQueue.AnyChanges -> deleteQueue.anyChanges: Probability = 1.00, Count = 1
GetTelemetryMetadataResponse -> GetTelemetryMetadataResult: Probability = 1.00, Count = 1
GetTelemetryMetadata -> getTelemetryMetadata: Probability = 1.00, Count = 1
GetTelemetryMetadataRequest -> GetTelemetryMetadataRequest: Probability = 1.00, Count = 1
Invoke<GetTelemetryMetadataResponse> -> executeGetTelemetryMetadata: Probability = 1.00, Count = 1
rs.PeekNextClass -> rs.peekNextClass: Probability = 1.00, Count = 5
CRNBlock -> CRNBlock: Probability = 1.00, Count = 2
StartDeliveryStreamEncryptionResponse -> StartDeliveryStreamEncryptionResult: Probability = 1.00, Count = 1
StartDeliveryStreamEncryption -> startDeliveryStreamEncryption: Probability = 1.00, Count = 1
StartDeliveryStreamEncryptionRequest -> StartDeliveryStreamEncryptionRequest: Probability = 1.00, Count = 1
Invoke<StartDeliveryStreamEncryptionResponse> -> executeStartDeliveryStreamEncryption: Probability = 1.00, Count = 1
UpdateFleetAttributesResponse -> UpdateFleetAttributesResult: Probability = 1.00, Count = 1
UpdateFleetAttributes -> updateFleetAttributes: Probability = 1.00, Count = 1
UpdateFleetAttributesRequest -> UpdateFleetAttributesRequest: Probability = 1.00, Count = 1
Invoke<UpdateFleetAttributesResponse> -> executeUpdateFleetAttributes: Probability = 1.00, Count = 1
CreateGroupMembershipResponse -> CreateGroupMembershipResult: Probability = 1.00, Count = 1
CreateGroupMembership -> createGroupMembership: Probability = 1.00, Count = 1
CreateGroupMembershipRequest -> CreateGroupMembershipRequest: Probability = 1.00, Count = 1
Invoke<CreateGroupMembershipResponse> -> executeCreateGroupMembership: Probability = 1.00, Count = 1
startBitsPerValue, -> startBitsPerValue,: Probability = 1.00, Count = 2
this.acceptableOverheadRatio -> this.acceptableOverheadRatio: Probability = 0.50, Count = 2
this.acceptableOverheadRatio -> PackedInts.getMutable: Probability = 0.25, Count = 1
this.acceptableOverheadRatio -> currentMask: Probability = 0.25, Count = 1
current.BitsPerValue -> current.getBitsPerValue: Probability = 1.00, Count = 1
AddJobFlowStepsResponse -> AddJobFlowStepsResult: Probability = 1.00, Count = 1
AddJobFlowSteps -> addJobFlowSteps: Probability = 1.00, Count = 1
Invoke<AddJobFlowStepsResponse> -> executeAddJobFlowSteps: Probability = 1.00, Count = 1
matchesImpl -> matchesImpl: Probability = 1.00, Count = 1
FieldMaskingSpanQuery -> FieldMaskingSpanQuery: Probability = 1.00, Count = 1
maskedQuery, -> maskedQuery,: Probability = 1.00, Count = 1
maskedField -> maskedField: Probability = 0.50, Count = 2
maskedField -> this.maskedQuery: Probability = 0.25, Count = 1
maskedField -> Objects.requireNonNull: Probability = 0.25, Count = 1
this.maskedQuery -> maskedQuery: Probability = 1.00, Count = 1
fnum -> fnum: Probability = 1.00, Count = 1
fnum.ToString -> fnum: Probability = 1.00, Count = 1
DrawingGroupRecord -> DrawingGroupRecord.sid: Probability = 0.25, Count = 2
DrawingGroupRecord -> DrawingGroupRecord: Probability = 0.50, Count = 4
DrawingGroupRecord -> dumpDrawingGroupRecords: Probability = 0.12, Count = 1
DrawingGroupRecord -> workbook.findFirstRecordBySid: Probability = 0.12, Count = 1
bstoreContainer -> bstoreContainer: Probability = 0.50, Count = 4
bstoreContainer -> EscherContainerRecord.BSTORE_CONTAINER: Probability = 0.25, Count = 2
bstoreContainer -> childRecords: Probability = 0.25, Count = 2
escherBSERecords.Count -> escherBSERecords.size: Probability = 1.00, Count = 2
CreateLoadBalancerListenersRequest -> CreateLoadBalancerListenersRequest: Probability = 1.00, Count = 2
List<Listener> -> java.util.List<Listener>: Probability = 1.00, Count = 1
listeners -> listeners: Probability = 1.00, Count = 2
_listeners -> setListeners: Probability = 1.00, Count = 1
DeleteDBClusterEndpointResponse -> DeleteDBClusterEndpointResult: Probability = 1.00, Count = 1
DeleteDBClusterEndpoint -> deleteDBClusterEndpoint: Probability = 1.00, Count = 1
DeleteDBClusterEndpointRequest -> DeleteDBClusterEndpointRequest: Probability = 1.00, Count = 1
Invoke<DeleteDBClusterEndpointResponse> -> executeDeleteDBClusterEndpoint: Probability = 1.00, Count = 1
DescribeIngestionResponse -> DescribeIngestionResult: Probability = 1.00, Count = 1
DescribeIngestion -> describeIngestion: Probability = 1.00, Count = 1
DescribeIngestionRequest -> DescribeIngestionRequest: Probability = 1.00, Count = 1
Invoke<DescribeIngestionResponse> -> executeDescribeIngestion: Probability = 1.00, Count = 1
PutCompositeAlarmResponse -> PutCompositeAlarmResult: Probability = 1.00, Count = 1
PutCompositeAlarm -> putCompositeAlarm: Probability = 1.00, Count = 1
PutCompositeAlarmRequest -> PutCompositeAlarmRequest: Probability = 1.00, Count = 1
Invoke<PutCompositeAlarmResponse> -> executePutCompositeAlarm: Probability = 1.00, Count = 1
nodes -> nodes: Probability = 0.83, Count = 10
nodes -> nodes==null: Probability = 0.08, Count = 1
nodes -> findTokens,: Probability = 0.08, Count = 1
ITree -> Tree: Probability = 1.00, Count = 5
ctx.RuleIndex -> ctx.getRuleIndex: Probability = 1.00, Count = 2
nodes.Add -> nodes.add: Probability = 1.00, Count = 2
CreateKeyPairResponse -> CreateKeyPairResult: Probability = 1.00, Count = 1
CreateKeyPair -> createKeyPair: Probability = 1.00, Count = 1
CreateKeyPairRequest -> CreateKeyPairRequest: Probability = 1.00, Count = 2
Invoke<CreateKeyPairResponse> -> executeCreateKeyPair: Probability = 1.00, Count = 1
SetOldTree -> setOldTree: Probability = 1.00, Count = 1
oldTree -> oldTree: Probability = 1.00, Count = 2
this.oldTree -> this.oldTree: Probability = 1.00, Count = 1
GetDeploymentConfigResponse -> GetDeploymentConfigResult: Probability = 1.00, Count = 1
GetDeploymentConfig -> getDeploymentConfig: Probability = 1.00, Count = 1
GetDeploymentConfigRequest -> GetDeploymentConfigRequest: Probability = 1.00, Count = 1
Invoke<GetDeploymentConfigResponse> -> executeGetDeploymentConfig: Probability = 1.00, Count = 1
AddNewSheetRecord -> addNewSheetRecord: Probability = 1.00, Count = 1
List<RecordBase> -> List<RecordBase>: Probability = 1.00, Count = 2
sheetRecords, -> sheetRecords,: Probability = 1.00, Count = 2
newRecord -> newRecord: Probability = 1.00, Count = 2
FindSheetInsertPos -> findSheetInsertPos: Probability = 1.00, Count = 1
newRecord.GetType -> newRecord.getClass: Probability = 1.00, Count = 1
sheetRecords.Insert -> sheetRecords.add: Probability = 1.00, Count = 1
state.attribute.GetType -> AttributeImpl: Probability = 0.40, Count = 2
state.attribute.GetType -> targetImpl: Probability = 0.60, Count = 3
state.next -> state.next: Probability = 1.00, Count = 2
SendVoiceMessageResponse -> SendVoiceMessageResult: Probability = 1.00, Count = 1
SendVoiceMessage -> sendVoiceMessage: Probability = 1.00, Count = 1
SendVoiceMessageRequest -> SendVoiceMessageRequest: Probability = 1.00, Count = 1
Invoke<SendVoiceMessageResponse> -> executeSendVoiceMessage: Probability = 1.00, Count = 1
DescribeLoadBalancersResponse -> DescribeLoadBalancersResult: Probability = 1.00, Count = 2
DescribeLoadBalancers -> describeLoadBalancers: Probability = 1.00, Count = 3
DisassociateTransitGatewayRouteTableResponse -> DisassociateTransitGatewayRouteTableResult: Probability = 1.00, Count = 1
DisassociateTransitGatewayRouteTable -> disassociateTransitGatewayRouteTable: Probability = 1.00, Count = 1
DisassociateTransitGatewayRouteTableRequest -> DisassociateTransitGatewayRouteTableRequest: Probability = 1.00, Count = 1
Invoke<DisassociateTransitGatewayRouteTableResponse> -> executeDisassociateTransitGatewayRouteTable: Probability = 1.00, Count = 1
SegString -> segString: Probability = 1.00, Count = 1
DetachNetworkInterfaceResponse -> DetachNetworkInterfaceResult: Probability = 1.00, Count = 1
DetachNetworkInterface -> detachNetworkInterface: Probability = 1.00, Count = 1
DetachNetworkInterfaceRequest -> DetachNetworkInterfaceRequest: Probability = 1.00, Count = 1
Invoke<DetachNetworkInterfaceResponse> -> executeDetachNetworkInterface: Probability = 1.00, Count = 1
NewObjectInserter -> newObjectInserter: Probability = 1.00, Count = 1
ObjectDatabase.NewInserter -> getObjectDatabase: Probability = 0.50, Count = 1
ObjectDatabase.NewInserter -> .newInserter: Probability = 0.50, Count = 1
GetRecordClass -> Record>: Probability = 0.50, Count = 2
GetRecordClass -> getRecordClass: Probability = 0.50, Count = 2
_c.DeclaringType -> _c.getDeclaringClass: Probability = 1.00, Count = 1
StringBufferInputStream -> StringBufferInputStream: Probability = 1.00, Count = 1
DeletedRef3DPtg -> DeletedRef3DPtg: Probability = 1.00, Count = 2
_mergedRegions[index] -> _mergedRegions.get: Probability = 1.00, Count = 1
RemovePushRefSpec -> removePushRefSpec: Probability = 1.00, Count = 1
push.Remove -> push.remove: Probability = 1.00, Count = 1
CreateJobResponse -> CreateJobResult: Probability = 1.00, Count = 1
CreateJob -> createJob: Probability = 1.00, Count = 1
CreateJobRequest -> CreateJobRequest: Probability = 1.00, Count = 1
Invoke<CreateJobResponse> -> executeCreateJob: Probability = 1.00, Count = 1
CreateResourceResponse -> CreateResourceResult: Probability = 1.00, Count = 1
CreateResource -> createResource: Probability = 1.00, Count = 1
CreateResourceRequest -> CreateResourceRequest: Probability = 1.00, Count = 1
Invoke<CreateResourceResponse> -> executeCreateResource: Probability = 1.00, Count = 1
TERM -> TERM: Probability = 1.00, Count = 2
CT -> +": Probability = 0.33, Count = 1
CT -> CT: Probability = 0.67, Count = 2
RV -> +": Probability = 0.60, Count = 3
RV -> RV: Probability = 0.40, Count = 2
R1 -> +": Probability = 0.60, Count = 3
R1 -> R1: Probability = 0.40, Count = 2
R2 -> R2: Probability = 0.67, Count = 2
R2 -> +": Probability = 0.33, Count = 1
VerifyDomainIdentityResponse -> VerifyDomainIdentityResult: Probability = 1.00, Count = 1
VerifyDomainIdentity -> verifyDomainIdentity: Probability = 1.00, Count = 1
VerifyDomainIdentityRequest -> VerifyDomainIdentityRequest: Probability = 1.00, Count = 1
Invoke<VerifyDomainIdentityResponse> -> executeVerifyDomainIdentity: Probability = 1.00, Count = 1
_mergedRegions.RemoveAt -> _mergedRegions.remove: Probability = 1.00, Count = 1
Record[] -> createRecord: Probability = 0.25, Count = 1
Record[] -> Record[]: Probability = 0.75, Count = 3
DeleteIpGroupResponse -> DeleteIpGroupResult: Probability = 1.00, Count = 1
DeleteIpGroup -> deleteIpGroup: Probability = 1.00, Count = 1
DeleteIpGroupRequest -> DeleteIpGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteIpGroupResponse> -> executeDeleteIpGroup: Probability = 1.00, Count = 1
StopFleetResponse -> StopFleetResult: Probability = 1.00, Count = 1
StopFleet -> stopFleet: Probability = 1.00, Count = 1
StopFleetRequest -> StopFleetRequest: Probability = 1.00, Count = 1
Invoke<StopFleetResponse> -> executeStopFleet: Probability = 1.00, Count = 1
Term=" -> term=": Probability = 1.00, Count = 1
Token.Next -> token.next: Probability = 1.00, Count = 3
jj_gen++ -> jj_gen++: Probability = 1.00, Count = 1
GetLabelDetectionResponse -> GetLabelDetectionResult: Probability = 1.00, Count = 1
GetLabelDetection -> getLabelDetection: Probability = 1.00, Count = 1
GetLabelDetectionRequest -> GetLabelDetectionRequest: Probability = 1.00, Count = 1
Invoke<GetLabelDetectionResponse> -> executeGetLabelDetection: Probability = 1.00, Count = 1
GetIndexCommit -> getIndexCommit: Probability = 1.00, Count = 1
m_indexCommits[gen] -> indexCommits.get: Probability = 0.50, Count = 1
m_indexCommits[gen] -> gen: Probability = 0.50, Count = 1
ListMetricsResponse -> ListMetricsResult: Probability = 1.00, Count = 1
ListMetrics -> listMetrics: Probability = 1.00, Count = 1
ListMetricsRequest -> ListMetricsRequest: Probability = 1.00, Count = 1
Invoke<ListMetricsResponse> -> executeListMetrics: Probability = 1.00, Count = 1
deletions" -> deletions": Probability = 1.00, Count = 1
CreateBasePathMappingResponse -> CreateBasePathMappingResult: Probability = 1.00, Count = 1
CreateBasePathMapping -> createBasePathMapping: Probability = 1.00, Count = 1
CreateBasePathMappingRequest -> CreateBasePathMappingRequest: Probability = 1.00, Count = 1
Invoke<CreateBasePathMappingResponse> -> executeCreateBasePathMapping: Probability = 1.00, Count = 1
Invoke<DescribeDBInstancesResponse> -> executeDescribeDBInstances: Probability = 1.00, Count = 1
ICollection<TrackingRefUpdate> -> Collection<TrackingRefUpdate>: Probability = 0.50, Count = 1
ICollection<TrackingRefUpdate> -> getTrackingRefUpdates: Probability = 0.50, Count = 1
productCode, -> productCode,: Probability = 1.00, Count = 1
_productCode -> setProductCode: Probability = 1.00, Count = 1
productCode -> productCode: Probability = 1.00, Count = 1
IList<CharFilterFactory> -> List<CharFilterFactory>: Probability = 1.00, Count = 1
charFilterFactories,TokenizerFactory -> charFilterFactories,TokenizerFactory: Probability = 1.00, Count = 1
tokenizerFactory,IList<TokenFilterFactory> -> tokenizerFactory,List<TokenFilterFactory>: Probability = 1.00, Count = 1
tokenFilterFactories -> tokenFilterFactories: Probability = 1.00, Count = 2
this.charFilterFactories -> this.charFilterFactories: Probability = 1.00, Count = 1
charFilterFactories -> charFilterFactories: Probability = 1.00, Count = 1
tokenizerFactory -> tokenizerFactory: Probability = 0.67, Count = 2
tokenizerFactory -> this.tokenizerFactory: Probability = 0.33, Count = 1
this.tokenFilterFactories -> this.tokenFilterFactories: Probability = 1.00, Count = 1
DeleteRestApiResponse -> DeleteRestApiResult: Probability = 1.00, Count = 1
DeleteRestApi -> deleteRestApi: Probability = 1.00, Count = 1
DeleteRestApiRequest -> DeleteRestApiRequest: Probability = 1.00, Count = 1
Invoke<DeleteRestApiResponse> -> executeDeleteRestApi: Probability = 1.00, Count = 1
"[/PROT4REV]\n" -> "[/PROT4REV]\n": Probability = 1.00, Count = 1
SetTokenSeparator -> setTokenSeparator: Probability = 1.00, Count = 1
this.tokenSeparator -> this.tokenSeparator: Probability = 1.00, Count = 2
SetInstanceHealthResponse -> SetInstanceHealthResult: Probability = 1.00, Count = 1
SetInstanceHealth -> setInstanceHealth: Probability = 1.00, Count = 1
SetInstanceHealthRequest -> SetInstanceHealthRequest: Probability = 1.00, Count = 1
Invoke<SetInstanceHealthResponse> -> executeSetInstanceHealth: Probability = 1.00, Count = 1
isUnderflow -> isUnderflow: Probability = 1.00, Count = 1
TYPE_UNDERFLOW -> TYPE_UNDERFLOW: Probability = 1.00, Count = 1
PutRecordsResponse -> PutRecordsResult: Probability = 1.00, Count = 1
PutRecords -> putRecords: Probability = 1.00, Count = 1
PutRecordsRequest -> PutRecordsRequest: Probability = 1.00, Count = 1
Invoke<PutRecordsResponse> -> executePutRecords: Probability = 1.00, Count = 1
isIndeterminate -> isIndeterminate: Probability = 1.00, Count = 1
toExclusive, -> toExclusive,: Probability = 1.00, Count = 1
!AreValuesEqual -> !areValuesEqual: Probability = 1.00, Count = 1
_desiredParity -> _desiredParity: Probability = 1.00, Count = 1
unmergedRanges -> regions,: Probability = 1.00, Count = 2
mergeCellRanges -> nRules: Probability = 1.00, Count = 2
LayoutParams -> LayoutParams: Probability = 1.00, Count = 1
"FormatAndBits -> "FormatAndBits: Probability = 1.00, Count = 1
format=" -> format=": Probability = 1.00, Count = 1
bitsPerValue=" -> bitsPerValue=": Probability = 1.00, Count = 2
BitsPerValue -> bitsPerValue: Probability = 1.00, Count = 1
DetachVolumeRequest -> DetachVolumeRequest: Probability = 1.00, Count = 2
GetCommitterIdent -> getCommitterIdent: Probability = 1.00, Count = 1
SnowballPorterFilterFactory -> SnowballPorterFilterFactory: Probability = 1.00, Count = 1
language -> language: Probability = 1.00, Count = 1
"language", -> "English": Probability = 1.00, Count = 1
PROTECTED_TOKENS -> PROTECTED_TOKENS: Probability = 1.00, Count = 2
ruleStatus -> script,: Probability = 0.25, Count = 1
ruleStatus -> ruleStatus: Probability = 0.50, Count = 2
ruleStatus -> RuleBasedBreakIterator.WORD_IDEO:return: Probability = 0.25, Count = 1
script -> script: Probability = 0.22, Count = 2
script -> UScript.HIRAGANA: Probability = 0.11, Count = 1
script -> WORD_HIRAGANA: Probability = 0.11, Count = 1
script -> WORD_KATAKANA: Probability = 0.11, Count = 1
script -> RuleBasedBreakIterator.WORD_LETTER:return: Probability = 0.11, Count = 1
script -> UScript.HANGUL: Probability = 0.11, Count = 1
script -> WORD_HANGUL: Probability = 0.11, Count = 1
script -> WORD_LETTER: Probability = 0.11, Count = 1
WORD_LETTER -> RuleBasedBreakIterator.WORD_NUMBER:return: Probability = 1.00, Count = 1
WORD_NUMBER -> WORD_EMOJI: Probability = 1.00, Count = 1
"<OTHER>" -> "<OTHER>": Probability = 1.00, Count = 1
sort, -> start,: Probability = 0.50, Count = 2
sort, -> sort,: Probability = 0.50, Count = 2
topN, -> topN,: Probability = 0.67, Count = 4
topN, -> TopDocs[]: Probability = 0.17, Count = 1
topN, -> shardHits,: Probability = 0.17, Count = 1
shardHits -> shardHits: Probability = 0.75, Count = 3
shardHits -> DEFAULT_TIE_BREAKER: Probability = 0.25, Count = 1
EnableDomainTransferLockResponse -> EnableDomainTransferLockResult: Probability = 1.00, Count = 1
EnableDomainTransferLock -> enableDomainTransferLock: Probability = 1.00, Count = 1
EnableDomainTransferLockRequest -> EnableDomainTransferLockRequest: Probability = 1.00, Count = 1
Invoke<EnableDomainTransferLockResponse> -> executeEnableDomainTransferLock: Probability = 1.00, Count = 1
DeleteConfigurationProfileResponse -> DeleteConfigurationProfileResult: Probability = 1.00, Count = 1
DeleteConfigurationProfile -> deleteConfigurationProfile: Probability = 1.00, Count = 1
DeleteConfigurationProfileRequest -> DeleteConfigurationProfileRequest: Probability = 1.00, Count = 1
Invoke<DeleteConfigurationProfileResponse> -> executeDeleteConfigurationProfile: Probability = 1.00, Count = 1
DescribeExpressionsResponse -> DescribeExpressionsResult: Probability = 1.00, Count = 1
DescribeExpressions -> describeExpressions: Probability = 1.00, Count = 1
DescribeExpressionsRequest -> DescribeExpressionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeExpressionsResponse> -> executeDescribeExpressions: Probability = 1.00, Count = 1
GetDistributionConfigResponse -> GetDistributionConfigResult: Probability = 1.00, Count = 1
GetDistributionConfig -> getDistributionConfig: Probability = 1.00, Count = 1
Invoke<GetDistributionConfigResponse> -> executeGetDistributionConfig: Probability = 1.00, Count = 1
GetMetricWidgetImageResponse -> GetMetricWidgetImageResult: Probability = 1.00, Count = 1
GetMetricWidgetImage -> getMetricWidgetImage: Probability = 1.00, Count = 1
GetMetricWidgetImageRequest -> GetMetricWidgetImageRequest: Probability = 1.00, Count = 1
Invoke<GetMetricWidgetImageResponse> -> executeGetMetricWidgetImage: Probability = 1.00, Count = 1
UpdateVoiceConnectorGroupResponse -> UpdateVoiceConnectorGroupResult: Probability = 1.00, Count = 1
UpdateVoiceConnectorGroup -> updateVoiceConnectorGroup: Probability = 1.00, Count = 1
UpdateVoiceConnectorGroupRequest -> UpdateVoiceConnectorGroupRequest: Probability = 1.00, Count = 1
Invoke<UpdateVoiceConnectorGroupResponse> -> executeUpdateVoiceConnectorGroup: Probability = 1.00, Count = 1
sortField -> sortField: Probability = 0.50, Count = 2
sortField -> map.put: Probability = 0.25, Count = 1
sortField -> ,: Probability = 0.25, Count = 1
map[sortField.Field] -> sortField.getField: Probability = 1.00, Count = 1
Daemon -> Daemon: Probability = 1.00, Count = 1
GetDaemon -> getDaemon: Probability = 1.00, Count = 1
daemon -> daemon: Probability = 1.00, Count = 1
CreateVpcPeeringConnectionResponse -> CreateVpcPeeringConnectionResult: Probability = 1.00, Count = 1
CreateVpcPeeringConnection -> createVpcPeeringConnection: Probability = 1.00, Count = 1
CreateVpcPeeringConnectionRequest -> CreateVpcPeeringConnectionRequest: Probability = 1.00, Count = 1
Invoke<CreateVpcPeeringConnectionResponse> -> executeCreateVpcPeeringConnection: Probability = 1.00, Count = 1
DescribeExclusionsResponse -> DescribeExclusionsResult: Probability = 1.00, Count = 1
DescribeExclusions -> describeExclusions: Probability = 1.00, Count = 1
DescribeExclusionsRequest -> DescribeExclusionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeExclusionsResponse> -> executeDescribeExclusions: Probability = 1.00, Count = 1
SearchNetworkProfilesResponse -> SearchNetworkProfilesResult: Probability = 1.00, Count = 1
SearchNetworkProfiles -> searchNetworkProfiles: Probability = 1.00, Count = 1
SearchNetworkProfilesRequest -> SearchNetworkProfilesRequest: Probability = 1.00, Count = 1
Invoke<SearchNetworkProfilesResponse> -> executeSearchNetworkProfiles: Probability = 1.00, Count = 1
RefDirectory.LooseRef -> LooseRef: Probability = 1.00, Count = 3
Peel -> peel: Probability = 1.00, Count = 5
ObjectIdRef -> ObjectIdRef: Probability = 1.00, Count = 3
newLeaf -> newLeaf: Probability = 1.00, Count = 3
PurchaseReservedInstancesOfferingRequest -> PurchaseReservedInstancesOfferingRequest: Probability = 1.00, Count = 2
reservedInstancesOfferingId, -> reservedInstancesOfferingId,: Probability = 1.00, Count = 1
_reservedInstancesOfferingId -> setReservedInstancesOfferingId: Probability = 1.00, Count = 1
reservedInstancesOfferingId -> reservedInstancesOfferingId: Probability = 1.00, Count = 1
GetUntracked -> getUntracked: Probability = 1.00, Count = 1
diff.GetUntracked -> diff.getUntracked: Probability = 1.00, Count = 1
GetTag -> getTag: Probability = 1.00, Count = 2
dateRes -> dateRes: Probability = 0.60, Count = 6
dateRes -> Map<CharSequence,: Probability = 0.10, Count = 1
dateRes -> dateResMap.get: Probability = 0.10, Count = 1
dateRes -> fieldConfig.getField: Probability = 0.10, Count = 1
dateRes -> ConfigurationKeys.DATE_RESOLUTION: Probability = 0.10, Count = 1
dateResMap -> DateTools.Resolution>: Probability = 0.25, Count = 1
dateResMap -> dateResMap: Probability = 0.50, Count = 2
dateResMap -> ConfigurationKeys.FIELD_DATE_RESOLUTION_MAP: Probability = 0.25, Count = 1
ConfigurationKeys.DATE_RESOLUTION, -> ConfigurationKeys.DATE_RESOLUTION,: Probability = 1.00, Count = 2
Value.ToString -> getValue: Probability = 1.00, Count = 1
GetAllGroupHeads -> getAllGroupHeads: Probability = 1.00, Count = 1
matchingGroupHeads -> matchingGroupHeads: Probability = 1.00, Count = 1
SetBinaryFileThreshold -> setBinaryFileThreshold: Probability = 1.00, Count = 1
this.binaryFileThreshold -> this.binaryFileThreshold: Probability = 1.00, Count = 1
logStepAtt -> logStepAtt: Probability = 1.00, Count = 2
taskLogStepAtt -> taskLogStepAtt: Probability = 1.00, Count = 2
m_logStep -> logStep: Probability = 0.60, Count = 3
m_logStep -> logStepAtt,: Probability = 0.20, Count = 1
m_logStep -> DEFAULT_LOG_STEP: Probability = 0.20, Count = 1
mbPerSec -> setMBPerSec: Probability = 0.18, Count = 2
mbPerSec -> mbPerSec: Probability = 0.45, Count = 5
mbPerSec -> this.mbPerSec: Probability = 0.09, Count = 1
mbPerSec -> minPauseCheckBytes: Probability = 0.09, Count = 1
mbPerSec -> MIN_PAUSE_CHECK_MSEC: Probability = 0.09, Count = 1
mbPerSec -> System.nanoTime: Probability = 0.09, Count = 1
elsensPerByte -> 1000.0: Probability = 1.00, Count = 1
token, -> token,: Probability = 0.50, Count = 1
token, -> fieldWeightedSpanTerms.get: Probability = 0.50, Count = 1
authenticateOnUnsubscribe -> authenticateOnUnsubscribe: Probability = 1.00, Count = 2
_authenticateOnUnsubscribe -> setAuthenticateOnUnsubscribe: Probability = 1.00, Count = 1
StartMonitoringMemberResponse -> StartMonitoringMemberResult: Probability = 1.00, Count = 1
StartMonitoringMember -> startMonitoringMember: Probability = 1.00, Count = 1
StartMonitoringMemberRequest -> StartMonitoringMemberRequest: Probability = 1.00, Count = 1
Invoke<StartMonitoringMemberResponse> -> executeStartMonitoringMember: Probability = 1.00, Count = 1
propId -> propId: Probability = 0.50, Count = 2
propId -> .filter: Probability = 0.25, Count = 1
propId -> p.getPropertyNumber: Probability = 0.25, Count = 1
properties -> properties.stream: Probability = 1.00, Count = 1
prop -> .findFirst: Probability = 0.17, Count = 1
prop -> .orElse: Probability = 0.17, Count = 1
prop -> prop: Probability = 0.67, Count = 4
IsExpectingOldObjectId -> isExpectingOldObjectId: Probability = 1.00, Count = 1
absColIx, -> absColIx,: Probability = 1.00, Count = 2
compressionMode=" -> compressionMode=": Probability = 0.40, Count = 2
compressionMode=" -> compressionMode+: Probability = 0.40, Count = 2
compressionMode=" -> chunkSize=": Probability = 0.20, Count = 1
compressionMode -> chunkSize=": Probability = 0.33, Count = 1
compressionMode -> chunkSize: Probability = 0.67, Count = 2
chunkSize=" -> +: Probability = 1.00, Count = 1
chunkSize -> +: Probability = 0.50, Count = 1
chunkSize -> blockShift=": Probability = 0.50, Count = 1
ApplyPendingMaintenanceActionResponse -> ResourcePendingMaintenanceActions: Probability = 1.00, Count = 1
ApplyPendingMaintenanceAction -> applyPendingMaintenanceAction: Probability = 1.00, Count = 1
ApplyPendingMaintenanceActionRequest -> ApplyPendingMaintenanceActionRequest: Probability = 1.00, Count = 1
Invoke<ApplyPendingMaintenanceActionResponse> -> executeApplyPendingMaintenanceAction: Probability = 1.00, Count = 1
abbr -> abbr: Probability = 1.00, Count = 1
abbr.PrefixCompare -> abbr.prefixCompare: Probability = 1.00, Count = 1
SerializingRecordVisitor -> SerializingRecordVisitor: Probability = 1.00, Count = 3
_startOffset -> _startOffset: Probability = 1.00, Count = 1
CreateFromStrings -> createFromStrings: Probability = 1.00, Count = 2
CellFormatter -> CellFormatter: Probability = 1.00, Count = 1
resultTree -> resultTree: Probability = 1.00, Count = 1
DrillDownQuery -> DrillDownQuery: Probability = 0.40, Count = 2
DrillDownQuery -> sameClassAs: Probability = 0.20, Count = 1
DrillDownQuery -> &&equalsTo: Probability = 0.20, Count = 1
DrillDownQuery -> .cast: Probability = 0.20, Count = 1
drillDownDims -> dimQueries,: Probability = 0.50, Count = 1
drillDownDims -> drillDownDims: Probability = 0.50, Count = 1
AuthorizeSecurityGroupEgressResponse -> AuthorizeSecurityGroupEgressResult: Probability = 1.00, Count = 1
AuthorizeSecurityGroupEgress -> authorizeSecurityGroupEgress: Probability = 1.00, Count = 1
AuthorizeSecurityGroupEgressRequest -> AuthorizeSecurityGroupEgressRequest: Probability = 1.00, Count = 1
Invoke<AuthorizeSecurityGroupEgressResponse> -> executeAuthorizeSecurityGroupEgress: Probability = 1.00, Count = 1
GetPOSTranslation -> getPOSTranslation: Probability = 1.00, Count = 1
AnalyticsTagPredicate -> AnalyticsTagPredicate: Probability = 1.00, Count = 1
ToInfoString -> toInfoString: Probability = 1.00, Count = 1
CreateComponentResponse -> CreateComponentResult: Probability = 1.00, Count = 1
CreateComponent -> createComponent: Probability = 1.00, Count = 1
CreateComponentRequest -> CreateComponentRequest: Probability = 1.00, Count = 1
Invoke<CreateComponentResponse> -> executeCreateComponent: Probability = 1.00, Count = 1
Invoke<DescribeVpnGatewaysResponse> -> executeDescribeVpnGateways: Probability = 1.00, Count = 1
escherClientAnchorRecord -> escherClientAnchorRecord: Probability = 1.00, Count = 2
this._escherClientAnchor -> this._escherClientAnchor: Probability = 1.00, Count = 1
stopNow -> stopNow: Probability = 1.00, Count = 1
"FooterKey[" -> "FooterKey[": Probability = 1.00, Count = 1
GetRelationalDatabasesResponse -> GetRelationalDatabasesResult: Probability = 1.00, Count = 1
GetRelationalDatabases -> getRelationalDatabases: Probability = 1.00, Count = 1
GetRelationalDatabasesRequest -> GetRelationalDatabasesRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabasesResponse> -> executeGetRelationalDatabases: Probability = 1.00, Count = 1
commit.CompareTo -> commit.compareTo: Probability = 1.00, Count = 1
or.commit -> other.commit: Probability = 1.00, Count = 1
PredPrediction -> PredPrediction: Probability = 1.00, Count = 1
pred, -> pred,: Probability = 1.00, Count = 1
this.pred -> this.pred: Probability = 1.00, Count = 1
pred -> pred: Probability = 1.00, Count = 3
ListMeetingTagsResponse -> ListMeetingTagsResult: Probability = 1.00, Count = 1
ListMeetingTags -> listMeetingTags: Probability = 1.00, Count = 1
ListMeetingTagsRequest -> ListMeetingTagsRequest: Probability = 1.00, Count = 1
Invoke<ListMeetingTagsResponse> -> executeListMeetingTags: Probability = 1.00, Count = 1
NorwegianMinimalStemFilter -> NorwegianMinimalStemFilter: Probability = 1.00, Count = 1
ImportInstanceResponse -> ImportInstanceResult: Probability = 1.00, Count = 1
ImportInstance -> importInstance: Probability = 1.00, Count = 1
ImportInstanceRequest -> ImportInstanceRequest: Probability = 1.00, Count = 1
Invoke<ImportInstanceResponse> -> executeImportInstance: Probability = 1.00, Count = 1
SetCodePage -> setCodePage: Probability = 1.00, Count = 1
CodepageRecord -> CodepageRecord: Probability = 1.00, Count = 1
this.codepage -> this.codepage: Probability = 1.00, Count = 1
UpdateRulesOfIpGroupResponse -> UpdateRulesOfIpGroupResult: Probability = 1.00, Count = 1
UpdateRulesOfIpGroup -> updateRulesOfIpGroup: Probability = 1.00, Count = 1
UpdateRulesOfIpGroupRequest -> UpdateRulesOfIpGroupRequest: Probability = 1.00, Count = 1
Invoke<UpdateRulesOfIpGroupResponse> -> executeUpdateRulesOfIpGroup: Probability = 1.00, Count = 1
"OneOrMoreOutputs -> "OneOrMoreOutputs: Probability = 1.00, Count = 1
UntagQueueResponse -> UntagQueueResult: Probability = 1.00, Count = 1
UntagQueue -> untagQueue: Probability = 1.00, Count = 1
UntagQueueRequest -> UntagQueueRequest: Probability = 1.00, Count = 1
Invoke<UntagQueueResponse> -> executeUntagQueue: Probability = 1.00, Count = 1
getDouble -> getDouble: Probability = 1.00, Count = 2
Sharpen.Util.LongBitsToDouble -> Double.longBitsToDouble: Probability = 1.00, Count = 2
els -> int...: Probability = 0.25, Count = 1
els -> els: Probability = 0.50, Count = 2
els -> els==null: Probability = 0.25, Count = 1
ArrayList<Interval> -> ArrayList<Interval>: Probability = 0.67, Count = 2
ArrayList<Interval> -> els.length: Probability = 0.33, Count = 1
st -> st: Probability = 1.00, Count = 3
parser, -> parser,: Probability = 1.00, Count = 2
avg -> avg: Probability = 1.00, Count = 3
stats.Length -> ;: Probability = 1.00, Count = 8
GetUser -> getUser: Probability = 1.00, Count = 4
user -> Host.this.getUser: Probability = 0.50, Count = 1
user -> user: Probability = 0.50, Count = 1
base.Clear -> super.clear: Probability = 1.00, Count = 2
DescribeApplicationSnapshotResponse -> DescribeApplicationSnapshotResult: Probability = 1.00, Count = 1
DescribeApplicationSnapshot -> describeApplicationSnapshot: Probability = 1.00, Count = 1
DescribeApplicationSnapshotRequest -> DescribeApplicationSnapshotRequest: Probability = 1.00, Count = 1
Invoke<DescribeApplicationSnapshotResponse> -> executeDescribeApplicationSnapshot: Probability = 1.00, Count = 1
FormatAndBits -> FormatAndBits: Probability = 1.00, Count = 1
this.Format -> this.format: Probability = 1.00, Count = 1
this.BitsPerValue -> this.bitsPerValue: Probability = 1.00, Count = 1
nNames -> getNameAt: Probability = 0.25, Count = 1
nNames -> nNames: Probability = 0.75, Count = 3
names.Count -> names.size: Probability = 1.00, Count = 2
defined -> defined: Probability = 1.00, Count = 3
.invalidId, -> .invalidId,: Probability = 1.00, Count = 2
DescribeTableRestoreStatusResponse -> DescribeTableRestoreStatusResult: Probability = 1.00, Count = 1
DescribeTableRestoreStatus -> describeTableRestoreStatus: Probability = 1.00, Count = 1
DescribeTableRestoreStatusRequest -> DescribeTableRestoreStatusRequest: Probability = 1.00, Count = 1
Invoke<DescribeTableRestoreStatusResponse> -> executeDescribeTableRestoreStatus: Probability = 1.00, Count = 1
Edit -> Edit: Probability = 1.00, Count = 2
@as, -> as,: Probability = 1.00, Count = 1
UpdateDomainEndpointOptionsResponse -> UpdateDomainEndpointOptionsResult: Probability = 1.00, Count = 1
UpdateDomainEndpointOptions -> updateDomainEndpointOptions: Probability = 1.00, Count = 1
UpdateDomainEndpointOptionsRequest -> UpdateDomainEndpointOptionsRequest: Probability = 1.00, Count = 1
Invoke<UpdateDomainEndpointOptionsResponse> -> executeUpdateDomainEndpointOptions: Probability = 1.00, Count = 1
CompileParseTreePattern -> compileParseTreePattern: Probability = 1.00, Count = 1
m.Compile -> m.compile: Probability = 1.00, Count = 1
MalformedInputException -> MalformedInputException: Probability = 1.00, Count = 1
@in.Reset -> in.reset: Probability = 1.00, Count = 1
DeletePhotoStoreRequest -> DeletePhotoStoreRequest: Probability = 1.00, Count = 1
"DeletePhotoStore", -> "DeletePhotoStore",: Probability = 1.00, Count = 1
CreateGlobalClusterResponse -> GlobalCluster: Probability = 1.00, Count = 1
CreateGlobalCluster -> createGlobalCluster: Probability = 1.00, Count = 1
CreateGlobalClusterRequest -> CreateGlobalClusterRequest: Probability = 1.00, Count = 1
Invoke<CreateGlobalClusterResponse> -> executeCreateGlobalCluster: Probability = 1.00, Count = 1
SimpleImmutableEntry -> SimpleImmutableEntry: Probability = 1.00, Count = 1
theKey, -> theKey,: Probability = 1.00, Count = 1
theValue -> theValue: Probability = 1.00, Count = 2
theKey -> theKey: Probability = 1.00, Count = 1
ChartGroupIndex -> getChartGroupIndex: Probability = 1.00, Count = 4
"FAST_" -> "FAST_": Probability = 1.00, Count = 1
dictionaryFile -> dictionaryFile: Probability = 1.00, Count = 2
DICTIONARY -> DICTIONARY: Probability = 1.00, Count = 2
LEMMATIZER_MODEL -> LEMMATIZER_MODEL: Probability = 1.00, Count = 2
System.Uri -> Long: Probability = 1.00, Count = 1
BaseUri -> contentLength: Probability = 1.00, Count = 1
AddError -> addError: Probability = 1.00, Count = 1
FormatError -> FormatError: Probability = 1.00, Count = 1
errors.AddItem -> errors.add: Probability = 1.00, Count = 1
UpdateUserResponse -> UpdateUserResult: Probability = 1.00, Count = 1
UpdateUser -> updateUser: Probability = 1.00, Count = 1
UpdateUserRequest -> UpdateUserRequest: Probability = 1.00, Count = 1
Invoke<UpdateUserResponse> -> executeUpdateUser: Probability = 1.00, Count = 1
DeletePartnerEventSourceResponse -> DeletePartnerEventSourceResult: Probability = 1.00, Count = 1
DeletePartnerEventSource -> deletePartnerEventSource: Probability = 1.00, Count = 1
DeletePartnerEventSourceRequest -> DeletePartnerEventSourceRequest: Probability = 1.00, Count = 1
Invoke<DeletePartnerEventSourceResponse> -> executeDeletePartnerEventSource: Probability = 1.00, Count = 1
ListClosedWorkflowExecutionsResponse -> WorkflowExecutionInfos: Probability = 1.00, Count = 1
ListClosedWorkflowExecutions -> listClosedWorkflowExecutions: Probability = 1.00, Count = 1
ListClosedWorkflowExecutionsRequest -> ListClosedWorkflowExecutionsRequest: Probability = 1.00, Count = 1
Invoke<ListClosedWorkflowExecutionsResponse> -> executeListClosedWorkflowExecutions: Probability = 1.00, Count = 1
IFontFormatting -> HSSFFontFormatting: Probability = 1.00, Count = 2
CreateFontFormatting -> createFontFormatting: Probability = 1.00, Count = 1
GetFontFormatting -> getFontFormatting: Probability = 1.00, Count = 3
SimpleFragmenter -> SimpleFragmenter: Probability = 1.00, Count = 1
DeleteEmailIdentityResponse -> DeleteEmailIdentityResult: Probability = 1.00, Count = 1
DeleteEmailIdentity -> deleteEmailIdentity: Probability = 1.00, Count = 1
DeleteEmailIdentityRequest -> DeleteEmailIdentityRequest: Probability = 1.00, Count = 1
Invoke<DeleteEmailIdentityResponse> -> executeDeleteEmailIdentity: Probability = 1.00, Count = 1
ListScriptsResponse -> ListScriptsResult: Probability = 1.00, Count = 1
ListScripts -> listScripts: Probability = 1.00, Count = 1
ListScriptsRequest -> ListScriptsRequest: Probability = 1.00, Count = 1
Invoke<ListScriptsResponse> -> executeListScripts: Probability = 1.00, Count = 1
DeleteFlowLogsResponse -> DeleteFlowLogsResult: Probability = 1.00, Count = 1
DeleteFlowLogs -> deleteFlowLogs: Probability = 1.00, Count = 1
DeleteFlowLogsRequest -> DeleteFlowLogsRequest: Probability = 1.00, Count = 1
Invoke<DeleteFlowLogsResponse> -> executeDeleteFlowLogs: Probability = 1.00, Count = 1
CreateIdentityPoolResponse -> CreateIdentityPoolResult: Probability = 1.00, Count = 1
CreateIdentityPool -> createIdentityPool: Probability = 1.00, Count = 1
CreateIdentityPoolRequest -> CreateIdentityPoolRequest: Probability = 1.00, Count = 1
Invoke<CreateIdentityPoolResponse> -> executeCreateIdentityPool: Probability = 1.00, Count = 1
.Text -> .getText: Probability = 1.00, Count = 3
NPOI.SS.UserModel.IRichTextString -> HSSFRichTextString: Probability = 1.00, Count = 1
CreateRichTextString -> createRichTextString: Probability = 1.00, Count = 1
char[1] -> char[1]: Probability = 1.00, Count = 2
GetStubWorkbook -> getStubWorkbook: Probability = 1.00, Count = 2
GetExternSheetRecords -> getExternSheetRecords: Probability = 1.00, Count = 2
,GetSSTRecord -> ,getSSTRecord: Probability = 1.00, Count = 1
ReactivatePhotosRequest -> ReactivatePhotosRequest: Probability = 1.00, Count = 1
"ReactivatePhotos", -> "ReactivatePhotos",: Probability = 1.00, Count = 1
PollForDecisionTaskResponse -> DecisionTask: Probability = 1.00, Count = 1
PollForDecisionTask -> pollForDecisionTask: Probability = 1.00, Count = 1
PollForDecisionTaskRequest -> PollForDecisionTaskRequest: Probability = 1.00, Count = 1
Invoke<PollForDecisionTaskResponse> -> executePollForDecisionTask: Probability = 1.00, Count = 1
CreateTagsResponse -> CreateTagsResult: Probability = 1.00, Count = 1
CreateTags -> createTags: Probability = 1.00, Count = 1
CreateTagsRequest -> CreateTagsRequest: Probability = 1.00, Count = 1
Invoke<CreateTagsResponse> -> executeCreateTags: Probability = 1.00, Count = 1
UpdateUserPhoneConfigResponse -> UpdateUserPhoneConfigResult: Probability = 1.00, Count = 1
UpdateUserPhoneConfig -> updateUserPhoneConfig: Probability = 1.00, Count = 1
UpdateUserPhoneConfigRequest -> UpdateUserPhoneConfigRequest: Probability = 1.00, Count = 1
Invoke<UpdateUserPhoneConfigResponse> -> executeUpdateUserPhoneConfig: Probability = 1.00, Count = 1
GetSourceAuthor -> getSourceAuthor: Probability = 1.00, Count = 2
sourceAuthors[idx] -> sourceAuthors[idx]: Probability = 1.00, Count = 1
GetServerCertificateRequest -> GetServerCertificateRequest: Probability = 1.00, Count = 1
CreateStreamingDistributionWithTagsResponse -> CreateStreamingDistributionWithTagsResult: Probability = 1.00, Count = 1
CreateStreamingDistributionWithTags -> createStreamingDistributionWithTags: Probability = 1.00, Count = 1
CreateStreamingDistributionWithTagsRequest -> CreateStreamingDistributionWithTagsRequest: Probability = 1.00, Count = 1
Invoke<CreateStreamingDistributionWithTagsResponse> -> executeCreateStreamingDistributionWithTags: Probability = 1.00, Count = 1
DescribeNotificationSubscriptionsResponse -> DescribeNotificationSubscriptionsResult: Probability = 1.00, Count = 1
DescribeNotificationSubscriptions -> describeNotificationSubscriptions: Probability = 1.00, Count = 1
DescribeNotificationSubscriptionsRequest -> DescribeNotificationSubscriptionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeNotificationSubscriptionsResponse> -> executeDescribeNotificationSubscriptions: Probability = 1.00, Count = 1
verOriginator -> verOriginator: Probability = 1.00, Count = 3
UpdateRestApiResponse -> UpdateRestApiResult: Probability = 1.00, Count = 1
UpdateRestApi -> updateRestApi: Probability = 1.00, Count = 1
UpdateRestApiRequest -> UpdateRestApiRequest: Probability = 1.00, Count = 1
Invoke<UpdateRestApiResponse> -> executeUpdateRestApi: Probability = 1.00, Count = 1
isComplex, -> isComplex,: Probability = 1.00, Count = 2
isBlipId -> isBlipId: Probability = 1.00, Count = 1
this.propertyValue -> this.propertyValue: Probability = 1.00, Count = 2
IsEndOfRowBlock -> isEndOfRowBlock: Probability = 1.00, Count = 1
EOFRecord -> EOFRecord: Probability = 1.00, Count = 2
WindowTwoRecord -> WindowTwoRecord: Probability = 1.00, Count = 2
encountered" -> encountered": Probability = 1.00, Count = 1
PageSettingsBlock.IsComponentRecord -> PageSettingsBlock.isComponentRecord: Probability = 1.00, Count = 2
RegistrantProfileRealNameVerificationRequest -> RegistrantProfileRealNameVerificationRequest: Probability = 1.00, Count = 2
"RegistrantProfileRealNameVerification", -> "RegistrantProfileRealNameVerification",: Probability = 0.50, Count = 1
"RegistrantProfileRealNameVerification", -> "RegistrantProfileRealNameVerification": Probability = 0.50, Count = 1
CreateProfileResponse -> CreateProfileResult: Probability = 1.00, Count = 1
CreateProfile -> createProfile: Probability = 1.00, Count = 1
CreateProfileRequest -> CreateProfileRequest: Probability = 1.00, Count = 1
Invoke<CreateProfileResponse> -> executeCreateProfile: Probability = 1.00, Count = 1
EndSubRecord -> EndSubRecord: Probability = 1.00, Count = 1
SearchRepoRequest -> SearchRepoRequest: Probability = 1.00, Count = 1
"SearchRepo", -> "SearchRepo",: Probability = 1.00, Count = 1
"/search" -> "/search": Probability = 1.00, Count = 1
GetEntryIterator -> getEntryIterator: Probability = 1.00, Count = 1
FileIterator -> FileIterator: Probability = 1.00, Count = 1
setThumbOffset -> setThumbOffset: Probability = 1.00, Count = 1
thumbOffset -> thumbOffset: Probability = 1.00, Count = 2
invalidate -> invalidate: Probability = 1.00, Count = 1
term_Renamed -> term: Probability = 1.00, Count = 2
GetFilterResponse -> GetFilterResult: Probability = 1.00, Count = 1
GetFilter -> getFilter: Probability = 1.00, Count = 1
GetFilterRequest -> GetFilterRequest: Probability = 1.00, Count = 1
Invoke<GetFilterResponse> -> executeGetFilter: Probability = 1.00, Count = 1
fontName, -> fontName,: Probability = 1.00, Count = 3
fontName -> Properties: Probability = 0.05, Count = 1
fontName -> fontMetricsProps: Probability = 0.05, Count = 1
fontName -> heightStr: Probability = 0.14, Count = 3
fontName -> fontMetricsProps.getProperty: Probability = 0.14, Count = 3
fontName -> buildFontHeightProperty: Probability = 0.05, Count = 1
fontName -> fontName: Probability = 0.29, Count = 6
fontName -> widthsStr: Probability = 0.10, Count = 2
fontName -> buildFontWidthsProperty: Probability = 0.05, Count = 1
fontName -> charactersStr: Probability = 0.10, Count = 2
fontName -> _fontName: Probability = 0.05, Count = 1
so -> so: Probability = 0.86, Count = 6
so -> isOffsetOverlap: Probability = 0.14, Count = 1
widths -> widths: Probability = 1.00, Count = 2
RegisterFunction -> registerFunction: Probability = 1.00, Count = 3
Excel -> Excel: Probability = 1.00, Count = 2
functions[idx] -> functions[idx]: Probability = 1.00, Count = 2
already -> already: Probability = 1.00, Count = 5
SortedSetDocValuesField -> SortedSetDocValuesField: Probability = 1.00, Count = 1
HasSourceData -> hasSourceData: Probability = 1.00, Count = 2
sourceLines[idx] -> sourceLines[idx]: Probability = 1.00, Count = 2
CreateBotResponse -> CreateBotResult: Probability = 1.00, Count = 1
CreateBot -> createBot: Probability = 1.00, Count = 1
CreateBotRequest -> CreateBotRequest: Probability = 1.00, Count = 1
Invoke<CreateBotResponse> -> executeCreateBot: Probability = 1.00, Count = 1
UpdateMethodResponseResponse -> UpdateMethodResponseResult: Probability = 1.00, Count = 1
UpdateMethodResponse -> updateMethodResponse: Probability = 1.00, Count = 1
UpdateMethodResponseRequest -> UpdateMethodResponseRequest: Probability = 1.00, Count = 1
Invoke<UpdateMethodResponseResponse> -> executeUpdateMethodResponse: Probability = 1.00, Count = 1
CreateApiKeyResponse -> CreateApiKeyResult: Probability = 1.00, Count = 1
CreateApiKey -> createApiKey: Probability = 1.00, Count = 1
CreateApiKeyRequest -> CreateApiKeyRequest: Probability = 1.00, Count = 1
Invoke<CreateApiKeyResponse> -> executeCreateApiKey: Probability = 1.00, Count = 1
DetachTypedLinkResponse -> DetachTypedLinkResult: Probability = 1.00, Count = 1
DetachTypedLink -> detachTypedLink: Probability = 1.00, Count = 1
DetachTypedLinkRequest -> DetachTypedLinkRequest: Probability = 1.00, Count = 1
Invoke<DetachTypedLinkResponse> -> executeDetachTypedLink: Probability = 1.00, Count = 1
externSheetRecords.ToArray -> externSheetRecords.toArray: Probability = 1.00, Count = 1
ExternSheetRecord -> ExternSheetRecord[0]: Probability = 1.00, Count = 1
DescribeNetworkInterfaceAttributeResponse -> DescribeNetworkInterfaceAttributeResult: Probability = 1.00, Count = 1
DescribeNetworkInterfaceAttribute -> describeNetworkInterfaceAttribute: Probability = 1.00, Count = 1
DescribeNetworkInterfaceAttributeRequest -> DescribeNetworkInterfaceAttributeRequest: Probability = 1.00, Count = 1
Invoke<DescribeNetworkInterfaceAttributeResponse> -> executeDescribeNetworkInterfaceAttribute: Probability = 1.00, Count = 1
_tabids.Length -> _tabids.length: Probability = 1.00, Count = 3
_tabids[k] -> _tabids[i]: Probability = 1.00, Count = 2
postingsReader.RamBytesUsed -> ramBytesUsed: Probability = 0.67, Count = 2
postingsReader.RamBytesUsed -> indexReader!=null: Probability = 0.33, Count = 1
RecognizePetRequest -> RecognizePetRequest: Probability = 1.00, Count = 1
"RecognizePet" -> "RecognizePet": Probability = 1.00, Count = 1
ImportRestApiResponse -> ImportRestApiResult: Probability = 1.00, Count = 1
ImportRestApi -> importRestApi: Probability = 1.00, Count = 1
ImportRestApiRequest -> ImportRestApiRequest: Probability = 1.00, Count = 1
Invoke<ImportRestApiResponse> -> executeImportRestApi: Probability = 1.00, Count = 1
matchedSymbol -> matchedSymbol: Probability = 0.33, Count = 2
matchedSymbol -> matchedSymbol!=null: Probability = 0.17, Count = 1
matchedSymbol -> recognizer.consume: Probability = 0.17, Count = 1
matchedSymbol -> singleTokenInsertion: Probability = 0.17, Count = 1
matchedSymbol -> getMissingSymbol: Probability = 0.17, Count = 1
MultiCategoryListsFacetsExample -> MultiCategoryListsFacetsExample: Probability = 1.00, Count = 1
"Author", -> "Author",: Probability = 1.00, Count = 1
"author" -> "author": Probability = 1.00, Count = 1
"Publish -> "Publish: Probability = 1.00, Count = 3
Date", -> Date",: Probability = 1.00, Count = 3
"pubdate" -> "pubdate": Probability = 1.00, Count = 1
config.SetHierarchical -> config.setHierarchical: Probability = 1.00, Count = 3
GetAddressBookResponse -> GetAddressBookResult: Probability = 1.00, Count = 1
GetAddressBook -> getAddressBook: Probability = 1.00, Count = 1
GetAddressBookRequest -> GetAddressBookRequest: Probability = 1.00, Count = 1
Invoke<GetAddressBookResponse> -> executeGetAddressBook: Probability = 1.00, Count = 1
PatternFormatting -> PatternFormatting: Probability = 1.00, Count = 1
field_15_pattern_style -> field_15_pattern_style: Probability = 1.00, Count = 2
field_16_pattern_color_indexes -> field_16_pattern_color_indexes: Probability = 1.00, Count = 2
veText2 -> number2: Probability = 1.00, Count = 3
Principal -> Principal: Probability = 1.00, Count = 2
provider, -> provider,: Probability = 1.00, Count = 1
stripHyphen -> stripHyphen: Probability = 1.00, Count = 2
id.Replace -> ?id.replace: Probability = 1.00, Count = 1
"-", -> "-",: Probability = 1.00, Count = 1
RebootBrokerResponse -> RebootBrokerResult: Probability = 1.00, Count = 1
RebootBroker -> rebootBroker: Probability = 1.00, Count = 1
RebootBrokerRequest -> RebootBrokerRequest: Probability = 1.00, Count = 1
Invoke<RebootBrokerResponse> -> executeRebootBroker: Probability = 1.00, Count = 1
GetLastInternalSheetIndexForExtIndex -> getLastInternalSheetIndexForExtIndex: Probability = 1.00, Count = 1
RemoveTagsFromOnPremisesInstancesResponse -> RemoveTagsFromOnPremisesInstancesResult: Probability = 1.00, Count = 1
RemoveTagsFromOnPremisesInstances -> removeTagsFromOnPremisesInstances: Probability = 1.00, Count = 1
RemoveTagsFromOnPremisesInstancesRequest -> RemoveTagsFromOnPremisesInstancesRequest: Probability = 1.00, Count = 1
Invoke<RemoveTagsFromOnPremisesInstancesResponse> -> executeRemoveTagsFromOnPremisesInstances: Probability = 1.00, Count = 1
UpdateIAMPolicyAssignmentResponse -> UpdateIAMPolicyAssignmentResult: Probability = 1.00, Count = 1
UpdateIAMPolicyAssignment -> updateIAMPolicyAssignment: Probability = 1.00, Count = 1
UpdateIAMPolicyAssignmentRequest -> UpdateIAMPolicyAssignmentRequest: Probability = 1.00, Count = 1
Invoke<UpdateIAMPolicyAssignmentResponse> -> executeUpdateIAMPolicyAssignment: Probability = 1.00, Count = 1
ExportImageResponse -> ExportImageResult: Probability = 1.00, Count = 1
ExportImage -> exportImage: Probability = 1.00, Count = 1
ExportImageRequest -> ExportImageRequest: Probability = 1.00, Count = 1
Invoke<ExportImageResponse> -> executeExportImage: Probability = 1.00, Count = 1
ListTopicsDetectionJobsResponse -> ListTopicsDetectionJobsResult: Probability = 1.00, Count = 1
ListTopicsDetectionJobs -> listTopicsDetectionJobs: Probability = 1.00, Count = 1
ListTopicsDetectionJobsRequest -> ListTopicsDetectionJobsRequest: Probability = 1.00, Count = 1
Invoke<ListTopicsDetectionJobsResponse> -> executeListTopicsDetectionJobs: Probability = 1.00, Count = 1
ListDeploymentTargetsResponse -> ListDeploymentTargetsResult: Probability = 1.00, Count = 1
ListDeploymentTargets -> listDeploymentTargets: Probability = 1.00, Count = 1
ListDeploymentTargetsRequest -> ListDeploymentTargetsRequest: Probability = 1.00, Count = 1
Invoke<ListDeploymentTargetsResponse> -> executeListDeploymentTargets: Probability = 1.00, Count = 1
CreateStreamProcessorResponse -> CreateStreamProcessorResult: Probability = 1.00, Count = 1
CreateStreamProcessor -> createStreamProcessor: Probability = 1.00, Count = 1
CreateStreamProcessorRequest -> CreateStreamProcessorRequest: Probability = 1.00, Count = 1
Invoke<CreateStreamProcessorResponse> -> executeCreateStreamProcessor: Probability = 1.00, Count = 1
m_suffix.Length -> suffix.length: Probability = 1.00, Count = 2
m_suffix -> suffix: Probability = 1.00, Count = 1
italic, -> italic,: Probability = 1.00, Count = 1
bold -> bold: Probability = 0.43, Count = 3
bold -> modified: Probability = 0.14, Count = 1
bold -> italic: Probability = 0.29, Count = 2
bold -> fontFormatting.setBold: Probability = 0.14, Count = 1
modified -> fontFormatting.setItalic: Probability = 1.00, Count = 1
fontFormatting.IsBold=bold -> fontFormatting.setFontStyleModified: Probability = 1.00, Count = 1
fontFormatting.IsFontWeightModified=modified -> modified: Probability = 1.00, Count = 2
fontFormatting.IsFontStyleModified=modified -> fontFormatting.setFontWieghtModified: Probability = 1.00, Count = 1
writeShort -> writeShort: Probability = 1.00, Count = 1
CreateEntityRecognizerResponse -> CreateEntityRecognizerResult: Probability = 1.00, Count = 1
CreateEntityRecognizer -> createEntityRecognizer: Probability = 1.00, Count = 1
CreateEntityRecognizerRequest -> CreateEntityRecognizerRequest: Probability = 1.00, Count = 1
Invoke<CreateEntityRecognizerResponse> -> executeCreateEntityRecognizer: Probability = 1.00, Count = 1
DescribeContributorInsightsResponse -> DescribeContributorInsightsResult: Probability = 1.00, Count = 1
DescribeContributorInsights -> describeContributorInsights: Probability = 1.00, Count = 1
DescribeContributorInsightsRequest -> DescribeContributorInsightsRequest: Probability = 1.00, Count = 1
Invoke<DescribeContributorInsightsResponse> -> executeDescribeContributorInsights: Probability = 1.00, Count = 1
CreateLaunchConfigurationResponse -> CreateLaunchConfigurationResult: Probability = 1.00, Count = 1
CreateLaunchConfiguration -> createLaunchConfiguration: Probability = 1.00, Count = 1
CreateLaunchConfigurationRequest -> CreateLaunchConfigurationRequest: Probability = 1.00, Count = 1
Invoke<CreateLaunchConfigurationResponse> -> executeCreateLaunchConfiguration: Probability = 1.00, Count = 1
GetConsoleScreenshotResponse -> GetConsoleScreenshotResult: Probability = 1.00, Count = 1
GetConsoleScreenshot -> getConsoleScreenshot: Probability = 1.00, Count = 1
GetConsoleScreenshotRequest -> GetConsoleScreenshotRequest: Probability = 1.00, Count = 1
Invoke<GetConsoleScreenshotResponse> -> executeGetConsoleScreenshot: Probability = 1.00, Count = 1
DrawingRecordForBiffViewer -> DrawingRecordForBiffViewer: Probability = 1.00, Count = 1
ConvertToInputStream -> convertToInputStream: Probability = 1.00, Count = 1
ConvertRawBytesToEscherRecords -> convertRawBytesToEscherRecords: Probability = 1.00, Count = 1
NotImplemented -> NotImplemented: Probability = 1.00, Count = 1
UpdateDirectoryConfigResponse -> UpdateDirectoryConfigResult: Probability = 1.00, Count = 1
UpdateDirectoryConfig -> updateDirectoryConfig: Probability = 1.00, Count = 1
UpdateDirectoryConfigRequest -> UpdateDirectoryConfigRequest: Probability = 1.00, Count = 1
Invoke<UpdateDirectoryConfigResponse> -> executeUpdateDirectoryConfig: Probability = 1.00, Count = 1
DeleteQualificationTypeResponse -> DeleteQualificationTypeResult: Probability = 1.00, Count = 1
DeleteQualificationType -> deleteQualificationType: Probability = 1.00, Count = 1
DeleteQualificationTypeRequest -> DeleteQualificationTypeRequest: Probability = 1.00, Count = 1
Invoke<DeleteQualificationTypeResponse> -> executeDeleteQualificationType: Probability = 1.00, Count = 1
StartNewSlice -> startNewSlice: Probability = 1.00, Count = 1
pool.NewSlice -> pool.newSlice: Probability = 1.00, Count = 1
FIRST_LEVEL_SIZE -> FIRST_LEVEL_SIZE: Probability = 1.00, Count = 1
pool.Int32Offset -> pool.intOffset: Probability = 1.00, Count = 1
!mNoInvalidate -> !mNoInvalidate: Probability = 1.00, Count = 1
base.postInvalidate -> super.postInvalidate: Probability = 1.00, Count = 1
List<FacetEntry> -> List<FacetEntry>: Probability = 1.00, Count = 2
IList<FacetEntry> -> getFacetEntries: Probability = 1.00, Count = 1
facetEntry -> facetEntry: Probability = 1.00, Count = 2
UpdateDetectorVersionStatusResponse -> UpdateDetectorVersionStatusResult: Probability = 1.00, Count = 1
UpdateDetectorVersionStatus -> updateDetectorVersionStatus: Probability = 1.00, Count = 1
UpdateDetectorVersionStatusRequest -> UpdateDetectorVersionStatusRequest: Probability = 1.00, Count = 1
Invoke<UpdateDetectorVersionStatusResponse> -> executeUpdateDetectorVersionStatus: Probability = 1.00, Count = 1
iterator.remove -> iterator.remove: Probability = 1.00, Count = 1
subList.sizeChanged -> subList.sizeChanged: Probability = 1.00, Count = 1
end-- -> end--: Probability = 1.00, Count = 1
QueryNodeProcessorPipeline -> QueryNodeProcessorPipeline: Probability = 1.00, Count = 1
IllegalFormatPrecisionException -> IllegalFormatPrecisionException: Probability = 1.00, Count = 1
this.p -> this.p: Probability = 1.00, Count = 1
libcore.util.Objects.equal -> Objects.equal: Probability = 1.00, Count = 2
GetOldObjectId -> getOldObjectId: Probability = 1.00, Count = 2
AuthorizeIpRulesResponse -> AuthorizeIpRulesResult: Probability = 1.00, Count = 1
AuthorizeIpRules -> authorizeIpRules: Probability = 1.00, Count = 1
AuthorizeIpRulesRequest -> AuthorizeIpRulesRequest: Probability = 1.00, Count = 1
Invoke<AuthorizeIpRulesResponse> -> executeAuthorizeIpRules: Probability = 1.00, Count = 1
GetPrivateAccessUrlsRequest -> GetPrivateAccessUrlsRequest: Probability = 1.00, Count = 1
"GetPrivateAccessUrls", -> "GetPrivateAccessUrls",: Probability = 1.00, Count = 1
PutConfigurationSetTrackingOptionsResponse -> PutConfigurationSetTrackingOptionsResult: Probability = 1.00, Count = 1
PutConfigurationSetTrackingOptions -> putConfigurationSetTrackingOptions: Probability = 1.00, Count = 1
PutConfigurationSetTrackingOptionsRequest -> PutConfigurationSetTrackingOptionsRequest: Probability = 1.00, Count = 1
Invoke<PutConfigurationSetTrackingOptionsResponse> -> executePutConfigurationSetTrackingOptions: Probability = 1.00, Count = 1
GetRelationalDatabaseResponse -> GetRelationalDatabaseResult: Probability = 1.00, Count = 1
GetRelationalDatabase -> getRelationalDatabase: Probability = 1.00, Count = 1
GetRelationalDatabaseRequest -> GetRelationalDatabaseRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseResponse> -> executeGetRelationalDatabase: Probability = 1.00, Count = 1
JschSession -> JschSession: Probability = 1.00, Count = 1
SetCognitoEventsResponse -> SetCognitoEventsResult: Probability = 1.00, Count = 1
SetCognitoEvents -> setCognitoEvents: Probability = 1.00, Count = 1
SetCognitoEventsRequest -> SetCognitoEventsRequest: Probability = 1.00, Count = 1
Invoke<SetCognitoEventsResponse> -> executeSetCognitoEvents: Probability = 1.00, Count = 1
BatchDetectEntitiesResponse -> BatchDetectEntitiesResult: Probability = 1.00, Count = 1
BatchDetectEntities -> batchDetectEntities: Probability = 1.00, Count = 1
BatchDetectEntitiesRequest -> BatchDetectEntitiesRequest: Probability = 1.00, Count = 1
Invoke<BatchDetectEntitiesResponse> -> executeBatchDetectEntities: Probability = 1.00, Count = 1
beginIndex, -> beginIndex,: Probability = 1.00, Count = 2
base.codePointCount -> super.codePointCount: Probability = 1.00, Count = 1
GenerateClientCertificateResponse -> GenerateClientCertificateResult: Probability = 1.00, Count = 1
GenerateClientCertificate -> generateClientCertificate: Probability = 1.00, Count = 1
GenerateClientCertificateRequest -> GenerateClientCertificateRequest: Probability = 1.00, Count = 1
Invoke<GenerateClientCertificateResponse> -> executeGenerateClientCertificate: Probability = 1.00, Count = 1
writeDouble -> writeDouble: Probability = 1.00, Count = 2
YyCharAt -> yycharat: Probability = 1.00, Count = 1
pos] -> zzBuffer[zzStartRead+pos]: Probability = 1.00, Count = 1
PushMode -> pushMode: Probability = 1.00, Count = 1
_modeStack.Push -> System.out.println: Probability = 0.33, Count = 1
_modeStack.Push -> "pushMode: Probability = 0.33, Count = 1
_modeStack.Push -> "+m: Probability = 0.33, Count = 1
_mode -> _modeStack.push: Probability = 0.25, Count = 1
_mode -> _mode: Probability = 0.75, Count = 3
GetCapabilities -> getCapabilities: Probability = 1.00, Count = 1
capabilities -> command.getCapabilities: Probability = 1.00, Count = 1
RegisterInstanceEventNotificationAttributesResponse -> RegisterInstanceEventNotificationAttributesResult: Probability = 1.00, Count = 1
RegisterInstanceEventNotificationAttributes -> registerInstanceEventNotificationAttributes: Probability = 1.00, Count = 1
RegisterInstanceEventNotificationAttributesRequest -> RegisterInstanceEventNotificationAttributesRequest: Probability = 1.00, Count = 1
Invoke<RegisterInstanceEventNotificationAttributesResponse> -> executeRegisterInstanceEventNotificationAttributes: Probability = 1.00, Count = 1
PutRuleResponse -> PutRuleResult: Probability = 1.00, Count = 1
PutRule -> putRule: Probability = 1.00, Count = 1
PutRuleRequest -> PutRuleRequest: Probability = 1.00, Count = 1
Invoke<PutRuleResponse> -> executePutRule: Probability = 1.00, Count = 1
SetPaths -> setPaths: Probability = 1.00, Count = 1
this.paths -> this.paths: Probability = 1.00, Count = 1
degrees -> maxLevels: Probability = 1.00, Count = 2
GeohashPrefixTree -> GeohashUtils.lookupHashLenForWidthHeight: Probability = 1.00, Count = 1
m_ctx, -> dist,: Probability = 1.00, Count = 1
grid.GetLevelForDistance -> level,: Probability = 1.00, Count = 1
StartDocumentTextDetectionResponse -> StartDocumentTextDetectionResult: Probability = 1.00, Count = 1
StartDocumentTextDetection -> startDocumentTextDetection: Probability = 1.00, Count = 1
StartDocumentTextDetectionRequest -> StartDocumentTextDetectionRequest: Probability = 1.00, Count = 1
Invoke<StartDocumentTextDetectionResponse> -> executeStartDocumentTextDetection: Probability = 1.00, Count = 1
GetLine -> getLine: Probability = 1.00, Count = 2
_rowIndex, -> _rowIndex,: Probability = 1.00, Count = 1
FormatIndex -> getFormatIndex: Probability = 1.00, Count = 2
RegisterWorkflowType -> registerWorkflowType: Probability = 1.00, Count = 1
RegisterWorkflowTypeRequest -> RegisterWorkflowTypeRequest: Probability = 1.00, Count = 1
RegisterWorkflowTypeResponseUnmarshaller.Instance -> executeRegisterWorkflowType: Probability = 1.00, Count = 1
wasEscaped, -> wasEscaped,: Probability = 1.00, Count = 2
offset,int -> offset,int: Probability = 1.00, Count = 1
bool[length] -> boolean[length]: Probability = 1.00, Count = 1
CreateDatasetGroupResponse -> CreateDatasetGroupResult: Probability = 1.00, Count = 1
CreateDatasetGroup -> createDatasetGroup: Probability = 1.00, Count = 1
CreateDatasetGroupRequest -> CreateDatasetGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateDatasetGroupResponse> -> executeCreateDatasetGroup: Probability = 1.00, Count = 1
FieldVals -> FieldVals: Probability = 1.00, Count = 4
J2N.BitConversion.SingleToInt32Bits -> other.fieldName: Probability = 0.57, Count = 4
J2N.BitConversion.SingleToInt32Bits -> Float.floatToIntBits: Probability = 0.29, Count = 2
J2N.BitConversion.SingleToInt32Bits -> o.threshold: Probability = 0.14, Count = 1
BuildSuggestersResponse -> BuildSuggestersResult: Probability = 1.00, Count = 1
BuildSuggesters -> buildSuggesters: Probability = 1.00, Count = 1
BuildSuggestersRequest -> BuildSuggestersRequest: Probability = 1.00, Count = 1
Invoke<BuildSuggestersResponse> -> executeBuildSuggesters: Probability = 1.00, Count = 1
GetRelationalDatabaseBundlesResponse -> GetRelationalDatabaseBundlesResult: Probability = 1.00, Count = 1
GetRelationalDatabaseBundles -> getRelationalDatabaseBundles: Probability = 1.00, Count = 1
GetRelationalDatabaseBundlesRequest -> GetRelationalDatabaseBundlesRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseBundlesResponse> -> executeGetRelationalDatabaseBundles: Probability = 1.00, Count = 1
messageBuffer -> messageBuffer: Probability = 1.00, Count = 1
messageBuffer.ToString -> messageBuffer.toString: Probability = 1.00, Count = 1
payAtt -> this.encoder: Probability = 1.00, Count = 1
startColumn, -> startColumn,: Probability = 1.00, Count = 2
startRow, -> endColumn,int: Probability = 0.25, Count = 1
startRow, -> startRow,: Probability = 0.75, Count = 3
endRow -> endRow: Probability = 1.00, Count = 2
oldBitLen -> oldBitLen: Probability = 1.00, Count = 4
highShift -> highShift: Probability = 1.00, Count = 4
_significand>> -> _significand.shiftRight: Probability = 1.00, Count = 3
subRecordData -> subRecordData: Probability = 1.00, Count = 4
nRemainingBytes -> nRemainingBytes: Probability = 0.67, Count = 4
nRemainingBytes -> MAX_PAD_ALIGNMENT: Probability = 0.33, Count = 2
_isPaddedToQuadByteMultiple -> _isPaddedToQuadByteMultiple: Probability = 1.00, Count = 4
FrenchLightStemFilterFactory -> FrenchLightStemFilterFactory: Probability = 1.00, Count = 1
value.ToCharArray -> value.toCharArray: Probability = 1.00, Count = 1
DeleteEventSubscriptionResponse -> EventSubscription: Probability = 0.50, Count = 1
DeleteEventSubscriptionResponse -> DeleteEventSubscriptionResult: Probability = 0.50, Count = 1
DeleteEventSubscription -> deleteEventSubscription: Probability = 1.00, Count = 2
DeleteEventSubscriptionRequest -> DeleteEventSubscriptionRequest: Probability = 1.00, Count = 2
Invoke<DeleteEventSubscriptionResponse> -> executeDeleteEventSubscription: Probability = 1.00, Count = 2
AddTagsRequest -> AddTagsRequest: Probability = 1.00, Count = 3
GetRefEval -> getRefEval: Probability = 1.00, Count = 1
LazyRefEval -> LazyRefEval: Probability = 0.67, Count = 2
LazyRefEval -> rptg.getRow: Probability = 0.33, Count = 1
DescribeTaskDefinitionResponse -> DescribeTaskDefinitionResult: Probability = 1.00, Count = 1
DescribeTaskDefinition -> describeTaskDefinition: Probability = 1.00, Count = 1
DescribeTaskDefinitionRequest -> DescribeTaskDefinitionRequest: Probability = 1.00, Count = 1
Invoke<DescribeTaskDefinitionResponse> -> executeDescribeTaskDefinition: Probability = 1.00, Count = 1
ArrayUtil.TimSort -> ArrayUtil.timSort: Probability = 1.00, Count = 1
EscherDggRecord -> EscherDggRecord: Probability = 1.00, Count = 1
GetDgg -> getDgg: Probability = 1.00, Count = 1
dgg -> dgg: Probability = 1.00, Count = 1
AddConfigChangedListener -> addConfigChangedListener: Probability = 1.00, Count = 1
AddListener<ConfigChangedListener> -> ConfigChangedListener.class,: Probability = 1.00, Count = 1
DetectSentimentResponse -> DetectSentimentResult: Probability = 1.00, Count = 1
DetectSentiment -> detectSentiment: Probability = 1.00, Count = 1
DetectSentimentRequest -> DetectSentimentRequest: Probability = 1.00, Count = 1
Invoke<DetectSentimentResponse> -> executeDetectSentiment: Probability = 1.00, Count = 1
HeaderRecord -> copy: Probability = 1.00, Count = 1
this.Text -> ): Probability = 1.00, Count = 4
CreateEndpointConfigResponse -> CreateEndpointConfigResult: Probability = 1.00, Count = 1
CreateEndpointConfig -> createEndpointConfig: Probability = 1.00, Count = 1
CreateEndpointConfigRequest -> CreateEndpointConfigRequest: Probability = 1.00, Count = 1
Invoke<CreateEndpointConfigResponse> -> executeCreateEndpointConfig: Probability = 1.00, Count = 1
android.view.animation.Interpolator -> Interpolator: Probability = 1.00, Count = 1
getInterpolator -> getInterpolator: Probability = 1.00, Count = 1
mInterpolator -> mInterpolator: Probability = 1.00, Count = 1
GetSolutionMetricsResponse -> GetSolutionMetricsResult: Probability = 1.00, Count = 1
GetSolutionMetrics -> getSolutionMetrics: Probability = 1.00, Count = 1
GetSolutionMetricsRequest -> GetSolutionMetricsRequest: Probability = 1.00, Count = 1
Invoke<GetSolutionMetricsResponse> -> executeGetSolutionMetrics: Probability = 1.00, Count = 1
StopActivityStreamResponse -> StopActivityStreamResult: Probability = 1.00, Count = 1
StopActivityStream -> stopActivityStream: Probability = 1.00, Count = 1
StopActivityStreamRequest -> StopActivityStreamRequest: Probability = 1.00, Count = 1
Invoke<StopActivityStreamResponse> -> executeStopActivityStream: Probability = 1.00, Count = 1
ListTypedLinkFacetAttributesResponse -> ListTypedLinkFacetAttributesResult: Probability = 1.00, Count = 1
ListTypedLinkFacetAttributes -> listTypedLinkFacetAttributes: Probability = 1.00, Count = 1
ListTypedLinkFacetAttributesRequest -> ListTypedLinkFacetAttributesRequest: Probability = 1.00, Count = 1
Invoke<ListTypedLinkFacetAttributesResponse> -> executeListTypedLinkFacetAttributes: Probability = 1.00, Count = 1
ListSentimentDetectionJobsResponse -> ListSentimentDetectionJobsResult: Probability = 1.00, Count = 1
ListSentimentDetectionJobs -> listSentimentDetectionJobs: Probability = 1.00, Count = 1
ListSentimentDetectionJobsRequest -> ListSentimentDetectionJobsRequest: Probability = 1.00, Count = 1
Invoke<ListSentimentDetectionJobsResponse> -> executeListSentimentDetectionJobs: Probability = 1.00, Count = 1
GetAccountSendingEnabledResponse -> GetAccountSendingEnabledResult: Probability = 1.00, Count = 1
GetAccountSendingEnabled -> getAccountSendingEnabled: Probability = 1.00, Count = 1
GetAccountSendingEnabledRequest -> GetAccountSendingEnabledRequest: Probability = 1.00, Count = 1
Invoke<GetAccountSendingEnabledResponse> -> executeGetAccountSendingEnabled: Probability = 1.00, Count = 1
SimpleValue -> simpleValue: Probability = 0.40, Count = 2
SimpleValue -> StringBuffer: Probability = 0.60, Count = 3
BatchCheckLayerAvailabilityResponse -> BatchCheckLayerAvailabilityResult: Probability = 1.00, Count = 1
BatchCheckLayerAvailability -> batchCheckLayerAvailability: Probability = 1.00, Count = 1
BatchCheckLayerAvailabilityRequest -> BatchCheckLayerAvailabilityRequest: Probability = 1.00, Count = 1
Invoke<BatchCheckLayerAvailabilityResponse> -> executeBatchCheckLayerAvailability: Probability = 1.00, Count = 1
ClearSubRecords -> clearSubRecords: Probability = 1.00, Count = 1
subrecords.Clear -> subrecords.clear: Probability = 1.00, Count = 1
repo.RefDatabase.GetRefs -> repo.getRefDatabase: Probability = 0.31, Count = 4
repo.RefDatabase.GetRefs -> .getRefsByPrefix: Probability = 0.31, Count = 4
repo.RefDatabase.GetRefs -> listMode: Probability = 0.15, Count = 2
repo.RefDatabase.GetRefs -> refs.addAll: Probability = 0.23, Count = 3
cache.Clear -> cache.clear: Probability = 1.00, Count = 1
GetPasswordRecord -> getPasswordRecord: Probability = 1.00, Count = 1
_passwordRecord -> _passwordRecord: Probability = 1.00, Count = 2
SlicedIndexInput -> SlicedIndexInput: Probability = 1.00, Count = 3
clone.@base -> clone.base: Probability = 1.00, Count = 1
@base.Clone -> base.clone: Probability = 1.00, Count = 1
clone.fileOffset -> clone.fileOffset: Probability = 1.00, Count = 1
fileOffset -> fileOffset: Probability = 1.00, Count = 1
clone.length -> clone.length: Probability = 1.00, Count = 1
GetSourceLine -> getSourceLine: Probability = 1.00, Count = 1
DeleteResolverRuleResponse -> DeleteResolverRuleResult: Probability = 1.00, Count = 1
DeleteResolverRule -> deleteResolverRule: Probability = 1.00, Count = 1
DeleteResolverRuleRequest -> DeleteResolverRuleRequest: Probability = 1.00, Count = 1
Invoke<DeleteResolverRuleResponse> -> executeDeleteResolverRule: Probability = 1.00, Count = 1
this.navigableKeySet -> navigableKeySet: Probability = 1.00, Count = 1
ListShardsResponse -> ListShardsResult: Probability = 1.00, Count = 1
ListShards -> listShards: Probability = 1.00, Count = 1
ListShardsRequest -> ListShardsRequest: Probability = 1.00, Count = 1
Invoke<ListShardsResponse> -> executeListShards: Probability = 1.00, Count = 1
SearcherAndTaxonomy -> SearcherAndTaxonomy: Probability = 1.00, Count = 1
DirectoryTaxonomyReader -> DirectoryTaxonomyReader: Probability = 1.00, Count = 1
this.Searcher -> this.searcher: Probability = 1.00, Count = 1
this.TaxonomyReader -> this.taxonomyReader: Probability = 1.00, Count = 1
Position -> Position: Probability = 1.00, Count = 3
positions.Length -> positions.length: Probability = 0.32, Count = 6
positions.Length -> Position[]: Probability = 0.05, Count = 1
positions.Length -> newPositions: Probability = 0.11, Count = 2
positions.Length -> Position[ArrayUtil.oversize: Probability = 0.05, Count = 1
positions.Length -> 1+count,: Probability = 0.05, Count = 1
positions.Length -> nextWrite,: Probability = 0.05, Count = 1
positions.Length -> newPositions,: Probability = 0.11, Count = 2
positions.Length -> positions.length-nextWrite: Probability = 0.05, Count = 1
positions.Length -> positions.length-nextWrite,: Probability = 0.05, Count = 1
positions.Length -> i=positions.length: Probability = 0.05, Count = 1
positions.Length -> i<newPositions.length: Probability = 0.05, Count = 1
positions.Length -> newPositions[i]: Probability = 0.05, Count = 1
Configure -> configure: Probability = 1.00, Count = 1
i.ToString -> Integer.toString: Probability = 0.33, Count = 2
i.ToString -> i: Probability = 0.67, Count = 4
GetMissing -> getMissing: Probability = 1.00, Count = 1
diff.GetMissing -> diff.getMissing: Probability = 1.00, Count = 1
IndexWriterConfig -> IndexWriterConfig: Probability = 1.00, Count = 3
LuceneVersion -> runData,: Probability = 0.50, Count = 1
LuceneVersion -> IndexWriterConfig: Probability = 0.50, Count = 1
mergeScheduler -> mergeScheduler: Probability = 0.50, Count = 2
mergeScheduler -> iwConf.setMergeScheduler: Probability = 0.50, Count = 2
GetCapacityReservationUsageResponse -> GetCapacityReservationUsageResult: Probability = 1.00, Count = 1
GetCapacityReservationUsage -> getCapacityReservationUsage: Probability = 1.00, Count = 1
GetCapacityReservationUsageRequest -> GetCapacityReservationUsageRequest: Probability = 1.00, Count = 1
Invoke<GetCapacityReservationUsageResponse> -> executeGetCapacityReservationUsage: Probability = 1.00, Count = 1
cfAggregate.AddRule -> cfAggregate.addRule: Probability = 1.00, Count = 1
"", -> bodyFt: Probability = 0.09, Count = 2
"", -> BODY_FIELD,: Probability = 0.09, Count = 2
"", -> "",: Probability = 0.09, Count = 2
"", -> TITLE_FIELD,: Probability = 0.09, Count = 2
"", -> ft: Probability = 0.13, Count = 3
"", -> DATE_FIELD,: Probability = 0.09, Count = 2
"", -> ID_FIELD,: Probability = 0.09, Count = 2
"", -> StringField: Probability = 0.04, Count = 1
"", -> Field.Store.YES: Probability = 0.04, Count = 1
"", -> NAME_FIELD,: Probability = 0.09, Count = 2
"", -> numericFields.put: Probability = 0.09, Count = 2
"", -> DATE_MSEC_FIELD,: Probability = 0.09, Count = 2
reuseFields -> reuseFields: Probability = 1.00, Count = 2
ft -> fields.put: Probability = 0.56, Count = 5
ft -> "",: Probability = 0.44, Count = 4
Field.Store.NO -> TIME_SEC_FIELD,: Probability = 1.00, Count = 2
UpdateNameCommentRecordCache -> updateNameCommentRecordCache: Probability = 1.00, Count = 1
commentRecord -> commentRecord: Probability = 0.40, Count = 4
commentRecord -> commentRecords.containsValue: Probability = 0.10, Count = 1
commentRecord -> Entry<String,NameCommentRecord>: Probability = 0.10, Count = 1
commentRecord -> commentRecords.entrySet: Probability = 0.10, Count = 1
commentRecord -> commentRecords.remove: Probability = 0.10, Count = 1
commentRecord -> commentRecords.put: Probability = 0.10, Count = 1
commentRecord -> commentRecord.getNameText: Probability = 0.10, Count = 1
QueryObjectBuilder -> QueryObjectBuilder: Probability = 1.00, Count = 1
builder.GetQuery -> builder.getQuery: Probability = 1.00, Count = 1
ryr -> ryr: Probability = 0.50, Count = 7
ryr -> a1: Probability = 0.14, Count = 2
ryr -> a2: Probability = 0.14, Count = 2
ryr -> -p: Probability = 0.07, Count = 1
ryr -> a3: Probability = 0.14, Count = 2
"AND -> "AND: Probability = 1.00, Count = 1
seriesNumbers -> seriesNumbers: Probability = 0.40, Count = 2
seriesNumbers -> field_1_seriesNumbers: Probability = 0.20, Count = 1
seriesNumbers -> :: Probability = 0.20, Count = 1
seriesNumbers -> seriesNumbers.clone: Probability = 0.20, Count = 1
begin -> begin: Probability = 0.83, Count = 5
begin -> getStart: Probability = 0.17, Count = 1
"<StandardQueryParser -> "<StandardQueryParser: Probability = 0.50, Count = 1
"<StandardQueryParser -> config=\"": Probability = 0.50, Count = 1
config=\"" -> this.getQueryConfigHandler: Probability = 1.00, Count = 1
"\"/>" -> "\"/>": Probability = 1.00, Count = 2
DescribeActivitiesResponse -> DescribeActivitiesResult: Probability = 1.00, Count = 1
DescribeActivities -> describeActivities: Probability = 1.00, Count = 1
DescribeActivitiesRequest -> DescribeActivitiesRequest: Probability = 1.00, Count = 1
Invoke<DescribeActivitiesResponse> -> executeDescribeActivities: Probability = 1.00, Count = 1
WriteTokenValueBytes -> writeTokenValueBytes: Probability = 1.00, Count = 1
_nRows -> _nRows-1: Probability = 1.00, Count = 1
DescribeFleetMetadataResponse -> DescribeFleetMetadataResult: Probability = 1.00, Count = 1
DescribeFleetMetadata -> describeFleetMetadata: Probability = 1.00, Count = 1
DescribeFleetMetadataRequest -> DescribeFleetMetadataRequest: Probability = 1.00, Count = 1
Invoke<DescribeFleetMetadataResponse> -> executeDescribeFleetMetadata: Probability = 1.00, Count = 1
ModifyGlobalClusterResponse -> GlobalCluster: Probability = 1.00, Count = 1
ModifyGlobalCluster -> modifyGlobalCluster: Probability = 1.00, Count = 1
ModifyGlobalClusterRequest -> ModifyGlobalClusterRequest: Probability = 1.00, Count = 1
Invoke<ModifyGlobalClusterResponse> -> executeModifyGlobalCluster: Probability = 1.00, Count = 1
DescribeIdentityIdFormatResponse -> DescribeIdentityIdFormatResult: Probability = 1.00, Count = 1
DescribeIdentityIdFormat -> describeIdentityIdFormat: Probability = 1.00, Count = 1
DescribeIdentityIdFormatRequest -> DescribeIdentityIdFormatRequest: Probability = 1.00, Count = 1
Invoke<DescribeIdentityIdFormatResponse> -> executeDescribeIdentityIdFormat: Probability = 1.00, Count = 1
ListUserGroupsResponse -> ListUserGroupsResult: Probability = 1.00, Count = 1
ListUserGroups -> listUserGroups: Probability = 1.00, Count = 1
ListUserGroupsRequest -> ListUserGroupsRequest: Probability = 1.00, Count = 1
Invoke<ListUserGroupsResponse> -> executeListUserGroups: Probability = 1.00, Count = 1
ObjectIdRef.Unpeeled -> ObjectIdRef.Unpeeled: Probability = 1.00, Count = 2
RefStorage.LOOSE, -> Storage.LOOSE,: Probability = 1.00, Count = 2
commit.Copy -> name,commit.copy: Probability = 1.00, Count = 2
languages -> PhoneticEngine: Probability = 0.20, Count = 1
languages -> LanguageSet: Probability = 0.20, Count = 1
languages -> languages: Probability = 0.40, Count = 2
languages -> this.engine: Probability = 0.20, Count = 1
this.posIncAtt -> this.languages: Probability = 1.00, Count = 1
ListUsersResponse -> ListUsersResult: Probability = 1.00, Count = 1
ListUsers -> listUsers: Probability = 1.00, Count = 1
ListUsersRequest -> ListUsersRequest: Probability = 1.00, Count = 1
Invoke<ListUsersResponse> -> executeListUsers: Probability = 1.00, Count = 1
PutUserPolicyRequest -> PutUserPolicyRequest: Probability = 1.00, Count = 1
base.trimToSize -> super.trimToSize: Probability = 1.00, Count = 1
Windowing -> getWindowing: Probability = 1.00, Count = 2
AreaValueArray -> AreaValueArray: Probability = 1.00, Count = 1
ae.Width -> ae.getWidth: Probability = 1.00, Count = 2
ae.Height -> ae.getHeight: Probability = 1.00, Count = 1
_ae -> _ae: Probability = 1.00, Count = 1
RegisterOnPremisesInstanceResponse -> RegisterOnPremisesInstanceResult: Probability = 1.00, Count = 1
RegisterOnPremisesInstance -> registerOnPremisesInstance: Probability = 1.00, Count = 1
RegisterOnPremisesInstanceRequest -> RegisterOnPremisesInstanceRequest: Probability = 1.00, Count = 1
Invoke<RegisterOnPremisesInstanceResponse> -> executeRegisterOnPremisesInstance: Probability = 1.00, Count = 1
LsRemoteCommand -> LsRemoteCommand: Probability = 1.00, Count = 2
LsRemote -> lsRemote: Probability = 1.00, Count = 1
IsMerged -> isMerged: Probability = 1.00, Count = 1
Stage -> getStage: Probability = 1.00, Count = 1
STAGE_0 -> STAGE_0: Probability = 1.00, Count = 1
StopEntitiesDetectionJobResponse -> StopEntitiesDetectionJobResult: Probability = 1.00, Count = 1
StopEntitiesDetectionJob -> stopEntitiesDetectionJob: Probability = 1.00, Count = 1
StopEntitiesDetectionJobRequest -> StopEntitiesDetectionJobRequest: Probability = 1.00, Count = 1
Invoke<StopEntitiesDetectionJobResponse> -> executeStopEntitiesDetectionJob: Probability = 1.00, Count = 1
arrayOffset -> arrayOffset: Probability = 1.00, Count = 1
protectedArrayOffset -> protectedArrayOffset: Probability = 1.00, Count = 1
cfraClone -> cf: Probability = 0.50, Count = 2
cfraClone -> cfraClone: Probability = 0.50, Count = 2
StopApplicationResponse -> StopApplicationResult: Probability = 1.00, Count = 1
StopApplication -> stopApplication: Probability = 1.00, Count = 1
StopApplicationRequest -> StopApplicationRequest: Probability = 1.00, Count = 1
Invoke<StopApplicationResponse> -> executeStopApplication: Probability = 1.00, Count = 1
DescribeLocalGatewayRouteTableVpcAssociationsResponse -> DescribeLocalGatewayRouteTableVpcAssociationsResult: Probability = 1.00, Count = 1
DescribeLocalGatewayRouteTableVpcAssociations -> describeLocalGatewayRouteTableVpcAssociations: Probability = 1.00, Count = 1
DescribeLocalGatewayRouteTableVpcAssociationsRequest -> DescribeLocalGatewayRouteTableVpcAssociationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeLocalGatewayRouteTableVpcAssociationsResponse> -> executeDescribeLocalGatewayRouteTableVpcAssociations: Probability = 1.00, Count = 1
GetErrorEval -> getErrorEval: Probability = 1.00, Count = 1
DeleteNetworkInterfaceResponse -> DeleteNetworkInterfaceResult: Probability = 1.00, Count = 1
DeleteNetworkInterface -> deleteNetworkInterface: Probability = 1.00, Count = 1
DeleteNetworkInterfaceRequest -> DeleteNetworkInterfaceRequest: Probability = 1.00, Count = 1
Invoke<DeleteNetworkInterfaceResponse> -> executeDeleteNetworkInterface: Probability = 1.00, Count = 1
Group -> Group: Probability = 1.00, Count = 1
_groupId -> setGroupId: Probability = 0.50, Count = 1
_groupId -> groupId: Probability = 0.50, Count = 1
margin -> BaseFragListBuilder: Probability = 0.08, Count = 1
margin -> margin: Probability = 0.38, Count = 5
margin -> "margin: Probability = 0.08, Count = 1
margin -> small.: Probability = 0.08, Count = 1
margin -> It: Probability = 0.08, Count = 1
margin -> higher.": Probability = 0.08, Count = 1
margin -> this.margin: Probability = 0.08, Count = 1
margin -> this.minFragCharSize: Probability = 0.08, Count = 1
margin -> MIN_FRAG_CHAR_SIZE_FACTOR: Probability = 0.08, Count = 1
PatternReplaceCharFilter -> PatternReplaceCharFilter: Probability = 1.00, Count = 1
replacement, -> replacement,: Probability = 1.00, Count = 2
CreatePushTemplateResponse -> CreatePushTemplateResult: Probability = 1.00, Count = 1
CreatePushTemplate -> createPushTemplate: Probability = 1.00, Count = 1
CreatePushTemplateRequest -> CreatePushTemplateRequest: Probability = 1.00, Count = 1
Invoke<CreatePushTemplateResponse> -> executeCreatePushTemplate: Probability = 1.00, Count = 1
RemoveEditTime -> removeEditTime: Probability = 1.00, Count = 1
PropertyIDMap.PID_EDITTIME -> PropertyIDMap.PID_EDITTIME: Probability = 1.00, Count = 1
ListReusableDelegationSetsResponse -> ListReusableDelegationSetsResult: Probability = 1.00, Count = 1
ListReusableDelegationSets -> listReusableDelegationSets: Probability = 1.00, Count = 2
ListReusableDelegationSetsRequest -> ListReusableDelegationSetsRequest: Probability = 1.00, Count = 1
AttributeSource -> AttributeSource: Probability = 1.00, Count = 4
thisState -> thisState: Probability = 1.00, Count = 3
RawDoubleBitsToText -> rawDoubleBitsToText: Probability = 1.00, Count = 1
NotifySetFormula -> notifySetFormula: Probability = 1.00, Count = 1
_bookEvaluator.NotifyUpdateCell -> _bookEvaluator.notifyUpdateCell: Probability = 1.00, Count = 3
message.Key -> message.getKey: Probability = 1.00, Count = 2
GetRelationalDatabaseMasterUserPasswordResponse -> GetRelationalDatabaseMasterUserPasswordResult: Probability = 1.00, Count = 1
GetRelationalDatabaseMasterUserPassword -> getRelationalDatabaseMasterUserPassword: Probability = 1.00, Count = 1
GetRelationalDatabaseMasterUserPasswordRequest -> GetRelationalDatabaseMasterUserPasswordRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseMasterUserPasswordResponse> -> executeGetRelationalDatabaseMasterUserPassword: Probability = 1.00, Count = 1
LuceneDictionary -> LuceneDictionary: Probability = 1.00, Count = 1
CreateRuleResponse -> CreateRuleResult: Probability = 1.00, Count = 1
CreateRule -> createRule: Probability = 1.00, Count = 1
CreateRuleRequest -> CreateRuleRequest: Probability = 1.00, Count = 1
Invoke<CreateRuleResponse> -> executeCreateRule: Probability = 1.00, Count = 1
errorCheck -> errorCheck: Probability = 1.00, Count = 2
DescribeAlarmHistoryResponse -> DescribeAlarmHistoryResult: Probability = 1.00, Count = 2
DescribeAlarmHistory -> describeAlarmHistory: Probability = 1.00, Count = 3
DescribeAlarmHistoryRequest -> DescribeAlarmHistoryRequest: Probability = 1.00, Count = 2
DescribeVpcClassicLinkDnsSupportResponse -> DescribeVpcClassicLinkDnsSupportResult: Probability = 1.00, Count = 1
DescribeVpcClassicLinkDnsSupport -> describeVpcClassicLinkDnsSupport: Probability = 1.00, Count = 1
DescribeVpcClassicLinkDnsSupportRequest -> DescribeVpcClassicLinkDnsSupportRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpcClassicLinkDnsSupportResponse> -> executeDescribeVpcClassicLinkDnsSupport: Probability = 1.00, Count = 1
LC[c] -> LC[c]: Probability = 1.00, Count = 1
executed -> executed: Probability = 1.00, Count = 2
"Benchmark -> "Benchmark: Probability = 1.00, Count = 1
executed" -> executed": Probability = 1.00, Count = 1
runData.SetStartTimeMillis -> runData.setStartTimeMillis: Probability = 1.00, Count = 1
algorithm.Execute -> algorithm.execute: Probability = 1.00, Count = 1
replicator -> replicator: Probability = 1.00, Count = 1
implementation -> implementation: Probability = 1.00, Count = 1
publishing -> publishing: Probability = 1.00, Count = 1
revisions" -> revisions": Probability = 1.00, Count = 1
b.ShouldBeRecursive -> b.shouldBeRecursive: Probability = 1.00, Count = 1
!Eq -> !eq: Probability = 1.00, Count = 5
LowerCaseFilter -> LowerCaseFilter: Probability = 1.00, Count = 1
"IndexRevision -> "IndexRevision: Probability = 1.00, Count = 1
version=" -> version=": Probability = 1.00, Count = 1
files=" -> files=": Probability = 1.00, Count = 1
ev -> coerceValueToDouble: Probability = 0.08, Count = 1
ev -> ev: Probability = 0.50, Count = 6
ev -> .getNumberValue: Probability = 0.08, Count = 1
ev -> sval: Probability = 0.25, Count = 3
ev -> parseDouble: Probability = 0.08, Count = 1
dd -> dd: Probability = 1.00, Count = 4
SetQueueAttributesResponse -> SetQueueAttributesResult: Probability = 1.00, Count = 1
SetQueueAttributes -> setQueueAttributes: Probability = 1.00, Count = 1
SetQueueAttributesRequest -> SetQueueAttributesRequest: Probability = 1.00, Count = 1
Invoke<SetQueueAttributesResponse> -> executeSetQueueAttributes: Probability = 1.00, Count = 1
getLast -> getLast: Probability = 1.00, Count = 1
CreateLoadBalancerListenersResponse -> CreateLoadBalancerListenersResult: Probability = 1.00, Count = 1
CreateLoadBalancerListeners -> createLoadBalancerListeners: Probability = 1.00, Count = 1
Invoke<CreateLoadBalancerListenersResponse> -> executeCreateLoadBalancerListeners: Probability = 1.00, Count = 1
RebootWorkspacesResponse -> RebootWorkspacesResult: Probability = 1.00, Count = 1
RebootWorkspaces -> rebootWorkspaces: Probability = 1.00, Count = 1
RebootWorkspacesRequest -> RebootWorkspacesRequest: Probability = 1.00, Count = 1
Invoke<RebootWorkspacesResponse> -> executeRebootWorkspaces: Probability = 1.00, Count = 1
customerGatewayId -> customerGatewayId: Probability = 1.00, Count = 3
_customerGatewayId -> setCustomerGatewayId: Probability = 1.00, Count = 2
StartDocumentAnalysisResponse -> StartDocumentAnalysisResult: Probability = 1.00, Count = 1
StartDocumentAnalysis -> startDocumentAnalysis: Probability = 1.00, Count = 1
StartDocumentAnalysisRequest -> StartDocumentAnalysisRequest: Probability = 1.00, Count = 1
Invoke<StartDocumentAnalysisResponse> -> executeStartDocumentAnalysis: Probability = 1.00, Count = 1
UpdatePhoneNumberSettingsResponse -> UpdatePhoneNumberSettingsResult: Probability = 1.00, Count = 1
UpdatePhoneNumberSettings -> updatePhoneNumberSettings: Probability = 1.00, Count = 1
UpdatePhoneNumberSettingsRequest -> UpdatePhoneNumberSettingsRequest: Probability = 1.00, Count = 1
Invoke<UpdatePhoneNumberSettingsResponse> -> executeUpdatePhoneNumberSettings: Probability = 1.00, Count = 1
BatchStopUpdateActionResponse -> BatchStopUpdateActionResult: Probability = 1.00, Count = 1
BatchStopUpdateAction -> batchStopUpdateAction: Probability = 1.00, Count = 1
BatchStopUpdateActionRequest -> BatchStopUpdateActionRequest: Probability = 1.00, Count = 1
Invoke<BatchStopUpdateActionResponse> -> executeBatchStopUpdateAction: Probability = 1.00, Count = 1
CreateHyperParameterTuningJobResponse -> CreateHyperParameterTuningJobResult: Probability = 1.00, Count = 1
CreateHyperParameterTuningJob -> createHyperParameterTuningJob: Probability = 1.00, Count = 1
CreateHyperParameterTuningJobRequest -> CreateHyperParameterTuningJobRequest: Probability = 1.00, Count = 1
Invoke<CreateHyperParameterTuningJobResponse> -> executeCreateHyperParameterTuningJob: Probability = 1.00, Count = 1
TermsEnumIndex -> TermsEnumIndex: Probability = 1.00, Count = 1
termsEnum, -> termsEnum,: Probability = 1.00, Count = 1
subIndex -> subIndex: Probability = 1.00, Count = 2
this.TermsEnum -> this.termsEnum: Probability = 1.00, Count = 1
this.SubIndex -> this.subIndex: Probability = 1.00, Count = 1
UnarchiveFindingsResponse -> UnarchiveFindingsResult: Probability = 1.00, Count = 1
UnarchiveFindings -> unarchiveFindings: Probability = 1.00, Count = 1
UnarchiveFindingsRequest -> UnarchiveFindingsRequest: Probability = 1.00, Count = 1
Invoke<UnarchiveFindingsResponse> -> executeUnarchiveFindings: Probability = 1.00, Count = 1
this.fields -> this.fields: Probability = 1.00, Count = 3
CreateBusinessReportScheduleResponse -> CreateBusinessReportScheduleResult: Probability = 1.00, Count = 1
CreateBusinessReportSchedule -> createBusinessReportSchedule: Probability = 1.00, Count = 1
CreateBusinessReportScheduleRequest -> CreateBusinessReportScheduleRequest: Probability = 1.00, Count = 1
Invoke<CreateBusinessReportScheduleResponse> -> executeCreateBusinessReportSchedule: Probability = 1.00, Count = 1
GetIPSetResponse -> GetIPSetResult: Probability = 1.00, Count = 1
GetIPSet -> getIPSet: Probability = 1.00, Count = 1
GetIPSetRequest -> GetIPSetRequest: Probability = 1.00, Count = 1
Invoke<GetIPSetResponse> -> executeGetIPSet: Probability = 1.00, Count = 1
ListTagsForVaultResponse -> ListTagsForVaultResult: Probability = 1.00, Count = 1
ListTagsForVault -> listTagsForVault: Probability = 1.00, Count = 1
ListTagsForVaultRequest -> ListTagsForVaultRequest: Probability = 1.00, Count = 1
Invoke<ListTagsForVaultResponse> -> executeListTagsForVault: Probability = 1.00, Count = 1
GetDeltaCacheSize -> getDeltaCacheSize: Probability = 1.00, Count = 1
DescribeReservedInstancesResponse -> DescribeReservedInstancesResult: Probability = 1.00, Count = 1
DescribeReservedInstances -> describeReservedInstances: Probability = 1.00, Count = 1
DescribeReservedInstancesRequest -> DescribeReservedInstancesRequest: Probability = 1.00, Count = 1
Invoke<DescribeReservedInstancesResponse> -> executeDescribeReservedInstances: Probability = 1.00, Count = 1
PostRealTimeDeviceDataRequest -> PostRealTimeDeviceDataRequest: Probability = 1.00, Count = 1
"PostRealTimeDeviceData" -> "PostRealTimeDeviceData": Probability = 1.00, Count = 1
SetLoadBalancerPoliciesForBackendServerResponse -> SetLoadBalancerPoliciesForBackendServerResult: Probability = 1.00, Count = 1
SetLoadBalancerPoliciesForBackendServer -> setLoadBalancerPoliciesForBackendServer: Probability = 1.00, Count = 1
SetLoadBalancerPoliciesForBackendServerRequest -> SetLoadBalancerPoliciesForBackendServerRequest: Probability = 1.00, Count = 1
Invoke<SetLoadBalancerPoliciesForBackendServerResponse> -> executeSetLoadBalancerPoliciesForBackendServer: Probability = 1.00, Count = 1
ImportSnapshotResponse -> ImportSnapshotResult: Probability = 1.00, Count = 1
ImportSnapshot -> importSnapshot: Probability = 1.00, Count = 1
ImportSnapshotRequest -> ImportSnapshotRequest: Probability = 1.00, Count = 1
Invoke<ImportSnapshotResponse> -> executeImportSnapshot: Probability = 1.00, Count = 1
cra -> cra: Probability = 1.00, Count = 2
_list.Add -> _list.add: Probability = 1.00, Count = 2
DeleteInsightRulesResponse -> DeleteInsightRulesResult: Probability = 1.00, Count = 1
DeleteInsightRules -> deleteInsightRules: Probability = 1.00, Count = 1
DeleteInsightRulesRequest -> DeleteInsightRulesRequest: Probability = 1.00, Count = 1
Invoke<DeleteInsightRulesResponse> -> executeDeleteInsightRules: Probability = 1.00, Count = 1
SetStorageId -> setStorageId: Probability = 1.00, Count = 1
storageId -> storageId: Probability = 1.00, Count = 2
field_5_stream_id -> field_5_stream_id: Probability = 1.00, Count = 1
StartVpcEndpointServicePrivateDnsVerificationResponse -> StartVpcEndpointServicePrivateDnsVerificationResult: Probability = 1.00, Count = 1
StartVpcEndpointServicePrivateDnsVerification -> startVpcEndpointServicePrivateDnsVerification: Probability = 1.00, Count = 1
StartVpcEndpointServicePrivateDnsVerificationRequest -> StartVpcEndpointServicePrivateDnsVerificationRequest: Probability = 1.00, Count = 1
Invoke<StartVpcEndpointServicePrivateDnsVerificationResponse> -> executeStartVpcEndpointServicePrivateDnsVerification: Probability = 1.00, Count = 1
ClearData -> clearData: Probability = 1.00, Count = 1
points.Clear -> points.clear: Probability = 1.00, Count = 1
PositionTrackingVisitor -> PositionTrackingVisitor: Probability = 1.00, Count = 3
rv, -> rv,: Probability = 1.00, Count = 2
blockCount -> blockCount: Probability = 1.00, Count = 4
blockIndex -> blockIndex: Probability = 0.57, Count = 4
blockIndex -> rowBlockSize: Probability = 0.43, Count = 3
rowCellSize -> rowCellSize: Probability = 1.00, Count = 3
ListDatasetsResponse -> ListDatasetsResult: Probability = 1.00, Count = 1
ListDatasets -> listDatasets: Probability = 1.00, Count = 1
ListDatasetsRequest -> ListDatasetsRequest: Probability = 1.00, Count = 1
Invoke<ListDatasetsResponse> -> executeListDatasets: Probability = 1.00, Count = 1
cellnum -> cellnum: Probability = 1.00, Count = 4
cellnum, -> cellnum,: Probability = 1.00, Count = 3
book.MissingCellPolicy -> book.getMissingCellPolicy: Probability = 1.00, Count = 1
ExternSheetNameResolver.PrependSheetName -> ExternSheetNameResolver.prependSheetName: Probability = 1.00, Count = 1
field_1_index_extern_sheet,HSSFErrorConstants.GetText -> field_1_index_extern_sheet,: Probability = 1.00, Count = 1
GetBucket -> getBucket: Probability = 1.00, Count = 1
GetExactMatchStartingFromRootArc -> getExactMatchStartingFromRootArc: Probability = 1.00, Count = 1
DeleteAuthorizerResponse -> DeleteAuthorizerResult: Probability = 1.00, Count = 1
DeleteAuthorizer -> deleteAuthorizer: Probability = 1.00, Count = 1
DeleteAuthorizerRequest -> DeleteAuthorizerRequest: Probability = 1.00, Count = 1
Invoke<DeleteAuthorizerResponse> -> executeDeleteAuthorizer: Probability = 1.00, Count = 1
octal, -> octal,: Probability = 0.50, Count = 1
octal, -> OCTAL_BASE,: Probability = 0.50, Count = 1
field_1_hcenter -> field_1_hcenter: Probability = 1.00, Count = 2
EnableEnhancedMonitoringResponse -> EnableEnhancedMonitoringResult: Probability = 1.00, Count = 1
EnableEnhancedMonitoring -> enableEnhancedMonitoring: Probability = 1.00, Count = 1
EnableEnhancedMonitoringRequest -> EnableEnhancedMonitoringRequest: Probability = 1.00, Count = 1
Invoke<EnableEnhancedMonitoringResponse> -> executeEnableEnhancedMonitoring: Probability = 1.00, Count = 1
ListDeliveryStreamsResponse -> ListDeliveryStreamsResult: Probability = 1.00, Count = 1
ListDeliveryStreams -> listDeliveryStreams: Probability = 1.00, Count = 1
ListDeliveryStreamsRequest -> ListDeliveryStreamsRequest: Probability = 1.00, Count = 1
Invoke<ListDeliveryStreamsResponse> -> executeListDeliveryStreams: Probability = 1.00, Count = 1
DetachVolumeResponse -> DetachVolumeResult: Probability = 1.00, Count = 1
DetachVolume -> detachVolume: Probability = 1.00, Count = 1
Invoke<DetachVolumeResponse> -> executeDetachVolume: Probability = 1.00, Count = 1
SetShowSeriesKey -> setShowSeriesKey: Probability = 1.00, Count = 1
showSeriesKey.SetShortBoolean -> showSeriesKey.setShortBoolean: Probability = 1.00, Count = 1
GermanNormalizationFilterFactory -> GermanNormalizationFilterFactory: Probability = 1.00, Count = 1
AllSubsetsEqual -> allSubsetsEqual: Probability = 1.00, Count = 1
IEnumerator<BitSet> -> Iterator<BitSet>: Probability = 1.00, Count = 1
it.Current -> it.next: Probability = 1.00, Count = 4
@in.MarkSupported -> in.markSupported: Probability = 1.00, Count = 1
RestoreDBInstanceFromS3Response -> DBInstance: Probability = 1.00, Count = 1
RestoreDBInstanceFromS3 -> restoreDBInstanceFromS3: Probability = 1.00, Count = 1
RestoreDBInstanceFromS3Request -> RestoreDBInstanceFromS3Request: Probability = 1.00, Count = 1
Invoke<RestoreDBInstanceFromS3Response> -> executeRestoreDBInstanceFromS3: Probability = 1.00, Count = 1
DescribeReceiptRuleResponse -> DescribeReceiptRuleResult: Probability = 1.00, Count = 1
DescribeReceiptRule -> describeReceiptRule: Probability = 1.00, Count = 1
DescribeReceiptRuleRequest -> DescribeReceiptRuleRequest: Probability = 1.00, Count = 1
Invoke<DescribeReceiptRuleResponse> -> executeDescribeReceiptRule: Probability = 1.00, Count = 1
m_prefix -> "+prefix: Probability = 1.00, Count = 1
Tf -> tf: Probability = 1.00, Count = 2
passageLen -> passageLen: Probability = 1.00, Count = 2
norm -> norm: Probability = 1.00, Count = 2
DescribeModelResponse -> DescribeModelResult: Probability = 1.00, Count = 1
DescribeModel -> describeModel: Probability = 1.00, Count = 1
DescribeModelRequest -> DescribeModelRequest: Probability = 1.00, Count = 1
Invoke<DescribeModelResponse> -> executeDescribeModel: Probability = 1.00, Count = 1
ListEndpointConfigsResponse -> ListEndpointConfigsResult: Probability = 1.00, Count = 1
ListEndpointConfigs -> listEndpointConfigs: Probability = 1.00, Count = 1
ListEndpointConfigsRequest -> ListEndpointConfigsRequest: Probability = 1.00, Count = 1
Invoke<ListEndpointConfigsResponse> -> executeListEndpointConfigs: Probability = 1.00, Count = 1
DescribeDBProxyTargetGroupsResponse -> DescribeDBProxyTargetGroupsResult: Probability = 1.00, Count = 1
DescribeDBProxyTargetGroups -> describeDBProxyTargetGroups: Probability = 1.00, Count = 1
DescribeDBProxyTargetGroupsRequest -> DescribeDBProxyTargetGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBProxyTargetGroupsResponse> -> executeDescribeDBProxyTargetGroups: Probability = 1.00, Count = 1
DisassociateGlobalReplicationGroupResponse -> GlobalReplicationGroup: Probability = 1.00, Count = 1
DisassociateGlobalReplicationGroup -> disassociateGlobalReplicationGroup: Probability = 1.00, Count = 1
DisassociateGlobalReplicationGroupRequest -> DisassociateGlobalReplicationGroupRequest: Probability = 1.00, Count = 1
Invoke<DisassociateGlobalReplicationGroupResponse> -> executeDisassociateGlobalReplicationGroup: Probability = 1.00, Count = 1
simple -> simple: Probability = 1.00, Count = 2
@out.WriteInt32 -> out.writeInt: Probability = 0.67, Count = 2
@out.WriteInt32 -> out.writeString: Probability = 0.33, Count = 1
async -> PagedList<DedicatedCapacityInner>: Probability = 0.50, Count = 1
async -> listByResourceGroup: Probability = 0.50, Count = 1
ListByResourceGroupWithHttpMessagesAsync -> resourceGroupName: Probability = 0.67, Count = 2
ListByResourceGroupWithHttpMessagesAsync -> PageImpl<DedicatedCapacityInner>: Probability = 0.33, Count = 1
.ConfigureAwait -> nextPageLink: Probability = 0.33, Count = 1
.ConfigureAwait -> .body: Probability = 0.67, Count = 2
DescribeIpGroupsResponse -> DescribeIpGroupsResult: Probability = 1.00, Count = 1
DescribeIpGroups -> describeIpGroups: Probability = 1.00, Count = 1
DescribeIpGroupsRequest -> DescribeIpGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeIpGroupsResponse> -> executeDescribeIpGroups: Probability = 1.00, Count = 1
implFlush -> implFlush: Probability = 1.00, Count = 1
FLUSH -> FLUSH: Probability = 1.00, Count = 1
Invoke<DescribeHsmConfigurationsResponse> -> executeDescribeHsmConfigurations: Probability = 1.00, Count = 1
DeleteNotificationConfigurationResponse -> DeleteNotificationConfigurationResult: Probability = 1.00, Count = 1
DeleteNotificationConfiguration -> deleteNotificationConfiguration: Probability = 1.00, Count = 1
DeleteNotificationConfigurationRequest -> DeleteNotificationConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DeleteNotificationConfigurationResponse> -> executeDeleteNotificationConfiguration: Probability = 1.00, Count = 1
DEFAULT_ARG4 -> DEFAULT_ARG4: Probability = 0.31, Count = 4
DEFAULT_ARG4 -> arg3: Probability = 0.46, Count = 6
DEFAULT_ARG4 -> arg3,: Probability = 0.23, Count = 3
args[3], -> arg4: Probability = 1.00, Count = 4
this.startOffset -> this.startOffset: Probability = 1.00, Count = 1
this.endOffset -> this.endOffset: Probability = 1.00, Count = 1
GetDocumentationVersionResponse -> GetDocumentationVersionResult: Probability = 1.00, Count = 1
GetDocumentationVersion -> getDocumentationVersion: Probability = 1.00, Count = 1
GetDocumentationVersionRequest -> GetDocumentationVersionRequest: Probability = 1.00, Count = 1
Invoke<GetDocumentationVersionResponse> -> executeGetDocumentationVersion: Probability = 1.00, Count = 1
PurchaseProvisionedCapacityResponse -> PurchaseProvisionedCapacityResult: Probability = 1.00, Count = 1
PurchaseProvisionedCapacity -> purchaseProvisionedCapacity: Probability = 1.00, Count = 1
PurchaseProvisionedCapacityRequest -> PurchaseProvisionedCapacityRequest: Probability = 1.00, Count = 1
Invoke<PurchaseProvisionedCapacityResponse> -> executePurchaseProvisionedCapacity: Probability = 1.00, Count = 1
AddRefsChangedListener -> addRefsChangedListener: Probability = 1.00, Count = 1
AddListener<RefsChangedListener> -> RefsChangedListener.class,: Probability = 1.00, Count = 1
DrawRect -> drawRect: Probability = 1.00, Count = 1
"DrawRect -> POILogger.WARN,"drawRect: Probability = 1.00, Count = 1
DeleteGcmChannelResponse -> DeleteGcmChannelResult: Probability = 1.00, Count = 1
DeleteGcmChannel -> deleteGcmChannel: Probability = 1.00, Count = 1
DeleteGcmChannelRequest -> DeleteGcmChannelRequest: Probability = 1.00, Count = 1
Invoke<DeleteGcmChannelResponse> -> executeDeleteGcmChannel: Probability = 1.00, Count = 1
"del=" -> "del=": Probability = 1.00, Count = 1
item -> item: Probability = 1.00, Count = 3
DeleteFieldLevelEncryptionConfigResponse -> DeleteFieldLevelEncryptionConfigResult: Probability = 1.00, Count = 1
DeleteFieldLevelEncryptionConfig -> deleteFieldLevelEncryptionConfig: Probability = 1.00, Count = 1
DeleteFieldLevelEncryptionConfigRequest -> DeleteFieldLevelEncryptionConfigRequest: Probability = 1.00, Count = 1
Invoke<DeleteFieldLevelEncryptionConfigResponse> -> executeDeleteFieldLevelEncryptionConfig: Probability = 1.00, Count = 1
credentials, -> AWSCredentials: Probability = 1.00, Count = 1
this.EncryptionMaterials -> credentials,: Probability = 1.00, Count = 1
this.fontName -> _fontName: Probability = 1.00, Count = 1
this.height -> _height: Probability = 1.00, Count = 1
PutRequest -> PutRequest: Probability = 1.00, Count = 1
putRequest -> putRequest: Probability = 1.00, Count = 2
_putRequest -> setPutRequest: Probability = 1.00, Count = 1
pluralStep.Apply -> pluralStep.apply: Probability = 1.00, Count = 1
IdSet -> idSet: Probability = 1.00, Count = 1
dictionaryNameToID.Keys -> Collections.unmodifiableSet: Probability = 0.33, Count = 2
dictionaryNameToID.Keys -> dictionary.keySet: Probability = 0.17, Count = 1
dictionaryNameToID.Keys -> ): Probability = 0.33, Count = 2
dictionaryNameToID.Keys -> dictionary.values: Probability = 0.17, Count = 1
BatchGetDeploymentsResponse -> BatchGetDeploymentsResult: Probability = 1.00, Count = 1
BatchGetDeployments -> batchGetDeployments: Probability = 1.00, Count = 1
BatchGetDeploymentsRequest -> BatchGetDeploymentsRequest: Probability = 1.00, Count = 1
Invoke<BatchGetDeploymentsResponse> -> executeBatchGetDeployments: Probability = 1.00, Count = 1
this.defaultField -> this.defaultField: Probability = 1.00, Count = 4
defaultField.Intern -> defaultField: Probability = 1.00, Count = 3
GetApplicationDateRangeKpiResponse -> GetApplicationDateRangeKpiResult: Probability = 1.00, Count = 1
GetApplicationDateRangeKpi -> getApplicationDateRangeKpi: Probability = 1.00, Count = 1
GetApplicationDateRangeKpiRequest -> GetApplicationDateRangeKpiRequest: Probability = 1.00, Count = 1
Invoke<GetApplicationDateRangeKpiResponse> -> executeGetApplicationDateRangeKpi: Probability = 1.00, Count = 1
GalicianStemFilter -> GalicianStemFilter: Probability = 1.00, Count = 1
Invoke<ListHostedZonesResponse> -> executeListHostedZones: Probability = 1.00, Count = 1
GetDepth -> getDepth: Probability = 1.00, Count = 2
GetUsageResponse -> GetUsageResult: Probability = 1.00, Count = 1
GetUsage -> getUsage: Probability = 1.00, Count = 1
GetUsageRequest -> GetUsageRequest: Probability = 1.00, Count = 1
Invoke<GetUsageResponse> -> executeGetUsage: Probability = 1.00, Count = 1
ListSubscriptionsByTopicRequest -> ListSubscriptionsByTopicRequest: Probability = 1.00, Count = 1
exclusiveStartTableName, -> exclusiveStartTableName,: Probability = 0.50, Count = 2
exclusiveStartTableName, -> Integer: Probability = 0.50, Count = 2
_exclusiveStartTableName -> setExclusiveStartTableName: Probability = 1.00, Count = 1
exclusiveStartTableName -> exclusiveStartTableName: Probability = 0.80, Count = 4
exclusiveStartTableName -> setLimit: Probability = 0.20, Count = 1
ListManagedSchemaArnsResponse -> ListManagedSchemaArnsResult: Probability = 1.00, Count = 1
ListManagedSchemaArns -> listManagedSchemaArns: Probability = 1.00, Count = 1
ListManagedSchemaArnsRequest -> ListManagedSchemaArnsRequest: Probability = 1.00, Count = 1
Invoke<ListManagedSchemaArnsResponse> -> executeListManagedSchemaArns: Probability = 1.00, Count = 1
DescribeSpotPriceHistoryResponse -> DescribeSpotPriceHistoryResult: Probability = 1.00, Count = 2
DescribeSpotPriceHistory -> describeSpotPriceHistory: Probability = 1.00, Count = 3
DescribeSpotPriceHistoryRequest -> DescribeSpotPriceHistoryRequest: Probability = 1.00, Count = 2
Invoke<DescribeSpotPriceHistoryResponse> -> executeDescribeSpotPriceHistory: Probability = 1.00, Count = 1
ListDevelopmentSchemaArnsResponse -> ListDevelopmentSchemaArnsResult: Probability = 1.00, Count = 1
ListDevelopmentSchemaArns -> listDevelopmentSchemaArns: Probability = 1.00, Count = 1
ListDevelopmentSchemaArnsRequest -> ListDevelopmentSchemaArnsRequest: Probability = 1.00, Count = 1
Invoke<ListDevelopmentSchemaArnsResponse> -> executeListDevelopmentSchemaArns: Probability = 1.00, Count = 1
this.Equals -> this.equals: Probability = 1.00, Count = 1
DeleteEventsConfigurationResponse -> DeleteEventsConfigurationResult: Probability = 1.00, Count = 1
DeleteEventsConfiguration -> deleteEventsConfiguration: Probability = 1.00, Count = 1
DeleteEventsConfigurationRequest -> DeleteEventsConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DeleteEventsConfigurationResponse> -> executeDeleteEventsConfiguration: Probability = 1.00, Count = 1
-1: -> -1:: Probability = 1.00, Count = 1
SetFillerToken -> setFillerToken: Probability = 1.00, Count = 1
this.fillerToken -> this.fillerToken: Probability = 1.00, Count = 2
char[0] -> char[0]: Probability = 1.00, Count = 1
fillerToken.ToCharArray -> fillerToken.toCharArray: Probability = 1.00, Count = 1
UpdateDestinationResponse -> UpdateDestinationResult: Probability = 1.00, Count = 1
UpdateDestination -> updateDestination: Probability = 1.00, Count = 1
UpdateDestinationRequest -> UpdateDestinationRequest: Probability = 1.00, Count = 1
Invoke<UpdateDestinationResponse> -> executeUpdateDestination: Probability = 1.00, Count = 1
CreateEmailIdentityResponse -> CreateEmailIdentityResult: Probability = 1.00, Count = 1
CreateEmailIdentity -> createEmailIdentity: Probability = 1.00, Count = 1
CreateEmailIdentityRequest -> CreateEmailIdentityRequest: Probability = 1.00, Count = 1
Invoke<CreateEmailIdentityResponse> -> executeCreateEmailIdentity: Probability = 1.00, Count = 1
currentSource.GetAuthor -> outCandidate.getAuthor: Probability = 1.00, Count = 1
StartMonitoringMembersResponse -> StartMonitoringMembersResult: Probability = 1.00, Count = 1
StartMonitoringMembers -> startMonitoringMembers: Probability = 1.00, Count = 1
StartMonitoringMembersRequest -> StartMonitoringMembersRequest: Probability = 1.00, Count = 1
Invoke<StartMonitoringMembersResponse> -> executeStartMonitoringMembers: Probability = 1.00, Count = 1
setLocalPatternChars -> setLocalPatternChars: Probability = 1.00, Count = 1
cur -> cur: Probability = 1.00, Count = 6
RemoveAllResourcePermissionsResponse -> RemoveAllResourcePermissionsResult: Probability = 1.00, Count = 1
RemoveAllResourcePermissions -> removeAllResourcePermissions: Probability = 1.00, Count = 1
RemoveAllResourcePermissionsRequest -> RemoveAllResourcePermissionsRequest: Probability = 1.00, Count = 1
Invoke<RemoveAllResourcePermissionsResponse> -> executeRemoveAllResourcePermissions: Probability = 1.00, Count = 1
DescribeResourceGroupsResponse -> DescribeResourceGroupsResult: Probability = 1.00, Count = 1
DescribeResourceGroups -> describeResourceGroups: Probability = 1.00, Count = 1
DescribeResourceGroupsRequest -> DescribeResourceGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeResourceGroupsResponse> -> executeDescribeResourceGroups: Probability = 1.00, Count = 1
edx -> edx: Probability = 0.83, Count = 5
edx -> v.substring: Probability = 0.17, Count = 1
SpatialOperation -> SpatialOperation: Probability = 1.00, Count = 2
.Trim -> .trim: Probability = 1.00, Count = 5
aa -> aa: Probability = 1.00, Count = 3
WasDeltaAttempted -> wasDeltaAttempted: Probability = 1.00, Count = 1
PACK_WHOLE -> PACK_WHOLE: Probability = 1.00, Count = 1
PutModelResponse -> PutModelResult: Probability = 1.00, Count = 1
PutModel -> putModel: Probability = 1.00, Count = 1
PutModelRequest -> PutModelRequest: Probability = 1.00, Count = 1
Invoke<PutModelResponse> -> executePutModel: Probability = 1.00, Count = 1
stateNumber.ToString -> String.valueOf: Probability = 0.50, Count = 1
stateNumber.ToString -> stateNumber: Probability = 0.50, Count = 1
CreatePlayerSessionResponse -> CreatePlayerSessionResult: Probability = 1.00, Count = 1
CreatePlayerSession -> createPlayerSession: Probability = 1.00, Count = 1
CreatePlayerSessionRequest -> CreatePlayerSessionRequest: Probability = 1.00, Count = 1
Invoke<CreatePlayerSessionResponse> -> executeCreatePlayerSession: Probability = 1.00, Count = 1
ModifyVpcTenancyResponse -> ModifyVpcTenancyResult: Probability = 1.00, Count = 1
ModifyVpcTenancy -> modifyVpcTenancy: Probability = 1.00, Count = 1
ModifyVpcTenancyRequest -> ModifyVpcTenancyRequest: Probability = 1.00, Count = 1
Invoke<ModifyVpcTenancyResponse> -> executeModifyVpcTenancy: Probability = 1.00, Count = 1
GetBasePathMappingsResponse -> GetBasePathMappingsResult: Probability = 1.00, Count = 1
GetBasePathMappings -> getBasePathMappings: Probability = 1.00, Count = 1
GetBasePathMappingsRequest -> GetBasePathMappingsRequest: Probability = 1.00, Count = 1
Invoke<GetBasePathMappingsResponse> -> executeGetBasePathMappings: Probability = 1.00, Count = 1
AddApplicationReferenceDataSourceResponse -> AddApplicationReferenceDataSourceResult: Probability = 1.00, Count = 1
AddApplicationReferenceDataSource -> addApplicationReferenceDataSource: Probability = 1.00, Count = 1
AddApplicationReferenceDataSourceRequest -> AddApplicationReferenceDataSourceRequest: Probability = 1.00, Count = 1
Invoke<AddApplicationReferenceDataSourceResponse> -> executeAddApplicationReferenceDataSource: Probability = 1.00, Count = 1
FileStream -> FileChannel: Probability = 1.00, Count = 1
fc, -> fc,: Probability = 1.00, Count = 1
fc -> fc: Probability = 1.00, Count = 1
this.m_off -> this.off: Probability = 1.00, Count = 1
this.m_end -> this.end: Probability = 1.00, Count = 4
this.isClone -> this.isClone: Probability = 1.00, Count = 1
IndonesianStemFilter -> IndonesianStemFilter: Probability = 1.00, Count = 1
NGit.Api.SubmoduleStatusCommand -> SubmoduleStatusCommand: Probability = 1.00, Count = 1
paths.AddItem -> paths.add: Probability = 1.00, Count = 3
PutInsightRuleResponse -> PutInsightRuleResult: Probability = 1.00, Count = 1
PutInsightRule -> putInsightRule: Probability = 1.00, Count = 1
PutInsightRuleRequest -> PutInsightRuleRequest: Probability = 1.00, Count = 1
Invoke<PutInsightRuleResponse> -> executePutInsightRule: Probability = 1.00, Count = 1
JapaneseReadingFormFilterFactory -> JapaneseReadingFormFilterFactory: Probability = 1.00, Count = 1
useRomaji -> useRomaji: Probability = 1.00, Count = 4
ROMAJI_PARAM, -> ROMAJI_PARAM,: Probability = 1.00, Count = 1
GetVpcLinkResponse -> GetVpcLinkResult: Probability = 1.00, Count = 1
GetVpcLink -> getVpcLink: Probability = 1.00, Count = 1
GetVpcLinkRequest -> GetVpcLinkRequest: Probability = 1.00, Count = 1
Invoke<GetVpcLinkResponse> -> executeGetVpcLink: Probability = 1.00, Count = 1
NE:return -> NE:return: Probability = 1.00, Count = 1
!cmpResult -> !cmpResult: Probability = 1.00, Count = 1
MaxRecall -> maxRecall: Probability = 1.00, Count = 1
HashFunctionForVersion -> hashFunctionForVersion: Probability = 1.00, Count = 3
VERSION_CURRENT -> VERSION_CURRENT: Probability = 1.00, Count = 4
MurmurHash2.INSTANCE -> MurmurHash2.INSTANCE: Probability = 1.00, Count = 1
"cell -> "cell: Probability = 1.00, Count = 1
CreatePlacementGroupRequest -> CreatePlacementGroupRequest: Probability = 1.00, Count = 2
PlacementStrategy -> PlacementStrategy: Probability = 1.00, Count = 1
strategy -> strategy: Probability = 1.00, Count = 2
_strategy -> setStrategy: Probability = 0.50, Count = 1
_strategy -> strategy.toString: Probability = 0.50, Count = 1
PutManagedScalingPolicyResponse -> PutManagedScalingPolicyResult: Probability = 1.00, Count = 1
PutManagedScalingPolicy -> putManagedScalingPolicy: Probability = 1.00, Count = 1
PutManagedScalingPolicyRequest -> PutManagedScalingPolicyRequest: Probability = 1.00, Count = 1
Invoke<PutManagedScalingPolicyResponse> -> executePutManagedScalingPolicy: Probability = 1.00, Count = 1
by.Optimize -> by.optimize: Probability = 1.00, Count = 1
commitUserData[OpenReaderTask.USER_DATA] -> commitUserData.put: Probability = 0.50, Count = 1
commitUserData[OpenReaderTask.USER_DATA] -> OpenReaderTask.USER_DATA,: Probability = 0.50, Count = 1
GetSrcRef -> getSrcRef: Probability = 1.00, Count = 1
srcRef -> srcRef: Probability = 1.00, Count = 1
GetShortMessage -> getShortMessage: Probability = 1.00, Count = 2
msgE -> msgE: Probability = 0.50, Count = 6
msgE -> RawParseUtils.endOfParagraph: Probability = 0.17, Count = 2
msgE -> hasLF: Probability = 0.08, Count = 1
msgE -> StringUtils.replaceLineBreaksWithSpace: Probability = 0.17, Count = 2
msgE -> RevCommit.hasLF: Probability = 0.08, Count = 1
msgB, -> msgB,: Probability = 1.00, Count = 5
GetSnapshots -> List<IndexCommit>: Probability = 0.50, Count = 1
GetSnapshots -> getSnapshots: Probability = 0.50, Count = 1
List<IndexCommit> -> indexCommits.values: Probability = 1.00, Count = 1
midValue -> midValue: Probability = 0.80, Count = 4
midValue -> docStarts[mid]: Probability = 0.20, Count = 1
StrEnum -> StrEnum: Probability = 1.00, Count = 4
heads.Clear -> heads.clear: Probability = 1.00, Count = 1
heads, -> heads.addAll: Probability = 1.00, Count = 1
headsStartValue -> headsStartValue: Probability = 1.00, Count = 1
CreatePlacementGroupResponse -> CreatePlacementGroupResult: Probability = 1.00, Count = 1
CreatePlacementGroup -> createPlacementGroup: Probability = 1.00, Count = 1
Invoke<CreatePlacementGroupResponse> -> executeCreatePlacementGroup: Probability = 1.00, Count = 1
maxCharsPerByte -> maxCharsPerByte: Probability = 1.00, Count = 3
_maxCharsPerByte -> maxCharsPerByte: Probability = 1.00, Count = 1
GetRFC2616Date -> getRFC2616Date: Probability = 1.00, Count = 1
datetime -> date: Probability = 0.22, Count = 2
datetime -> SimpleDateFormat: Probability = 0.22, Count = 2
datetime -> df: Probability = 0.11, Count = 1
datetime -> FORMAT_RFC2616,: Probability = 0.11, Count = 1
datetime -> Locale.ENGLISH: Probability = 0.11, Count = 1
datetime -> df.setTimeZone: Probability = 0.11, Count = 1
datetime -> SimpleTimeZone: Probability = 0.11, Count = 1
datetime.ToUniversalTime -> TIME_ZONE: Probability = 1.00, Count = 1
'r' -> df.format: Probability = 1.00, Count = 1
ListContributorInsightsResponse -> ListContributorInsightsResult: Probability = 1.00, Count = 1
ListContributorInsights -> listContributorInsights: Probability = 1.00, Count = 1
ListContributorInsightsRequest -> ListContributorInsightsRequest: Probability = 1.00, Count = 1
Invoke<ListContributorInsightsResponse> -> executeListContributorInsights: Probability = 1.00, Count = 1
SetPackedGitOpenFiles -> setPackedGitOpenFiles: Probability = 1.00, Count = 1
fdLimit -> fdLimit: Probability = 1.00, Count = 2
FailoverDBClusterResponse -> DBCluster: Probability = 1.00, Count = 1
FailoverDBCluster -> failoverDBCluster: Probability = 1.00, Count = 1
FailoverDBClusterRequest -> FailoverDBClusterRequest: Probability = 1.00, Count = 1
Invoke<FailoverDBClusterResponse> -> executeFailoverDBCluster: Probability = 1.00, Count = 1
DisassociateWebsiteAuthorizationProviderResponse -> DisassociateWebsiteAuthorizationProviderResult: Probability = 1.00, Count = 1
DisassociateWebsiteAuthorizationProvider -> disassociateWebsiteAuthorizationProvider: Probability = 1.00, Count = 1
DisassociateWebsiteAuthorizationProviderRequest -> DisassociateWebsiteAuthorizationProviderRequest: Probability = 1.00, Count = 1
Invoke<DisassociateWebsiteAuthorizationProviderResponse> -> executeDisassociateWebsiteAuthorizationProvider: Probability = 1.00, Count = 1
_cells[pos++] -> cells[nextId]: Probability = 0.50, Count = 1
_cells[pos++] -> thisId: Probability = 0.50, Count = 1
NullReferenceException -> nextId: Probability = 0.50, Count = 1
NullReferenceException -> findNext: Probability = 0.50, Count = 1
DescribeDomainResponse -> DomainDetail: Probability = 1.00, Count = 1
DescribeDomain -> describeDomain: Probability = 1.00, Count = 1
DescribeDomainRequest -> DescribeDomainRequest: Probability = 1.00, Count = 1
Invoke<DescribeDomainResponse> -> executeDescribeDomain: Probability = 1.00, Count = 1
this.Reset -> this.reset: Probability = 1.00, Count = 1
GetStartOffset -> getStartOffset: Probability = 1.00, Count = 1
ClearByte -> clearByte: Probability = 1.00, Count = 1
GetHCenter -> getHCenter: Probability = 1.00, Count = 1
_scenarioProtectRecord -> _scenarioProtectRecord: Probability = 1.00, Count = 4
NPOI.SS.UserModel.IRow -> HSSFRow: Probability = 1.00, Count = 2
rownum -> rownum: Probability = 0.67, Count = 2
rownum -> row.setHeight: Probability = 0.33, Count = 1
row.Height -> getDefaultRowHeight: Probability = 1.00, Count = 1
row.RowRecord.BadFontHeight -> row.getRowRecord: Probability = 1.00, Count = 1
AddRow -> addRow: Probability = 1.00, Count = 1
ListQueryExecutionsResponse -> ListQueryExecutionsResult: Probability = 1.00, Count = 1
ListQueryExecutions -> listQueryExecutions: Probability = 1.00, Count = 1
ListQueryExecutionsRequest -> ListQueryExecutionsRequest: Probability = 1.00, Count = 1
Invoke<ListQueryExecutionsResponse> -> executeListQueryExecutions: Probability = 1.00, Count = 1
DeleteSuppressedDestinationResponse -> DeleteSuppressedDestinationResult: Probability = 1.00, Count = 1
DeleteSuppressedDestination -> deleteSuppressedDestination: Probability = 1.00, Count = 1
DeleteSuppressedDestinationRequest -> DeleteSuppressedDestinationRequest: Probability = 1.00, Count = 1
Invoke<DeleteSuppressedDestinationResponse> -> executeDeleteSuppressedDestination: Probability = 1.00, Count = 1
RequestCancelWorkflowExecution -> requestCancelWorkflowExecution: Probability = 1.00, Count = 1
RequestCancelWorkflowExecutionRequest -> RequestCancelWorkflowExecutionRequest: Probability = 1.00, Count = 1
RequestCancelWorkflowExecutionResponseUnmarshaller.Instance -> executeRequestCancelWorkflowExecution: Probability = 1.00, Count = 1
UpdateDataSetPermissionsResponse -> UpdateDataSetPermissionsResult: Probability = 1.00, Count = 1
UpdateDataSetPermissions -> updateDataSetPermissions: Probability = 1.00, Count = 1
UpdateDataSetPermissionsRequest -> UpdateDataSetPermissionsRequest: Probability = 1.00, Count = 1
Invoke<UpdateDataSetPermissionsResponse> -> executeUpdateDataSetPermissions: Probability = 1.00, Count = 1
DeleteCloudFrontOriginAccessIdentityResponse -> DeleteCloudFrontOriginAccessIdentityResult: Probability = 1.00, Count = 1
DeleteCloudFrontOriginAccessIdentity -> deleteCloudFrontOriginAccessIdentity: Probability = 1.00, Count = 1
Invoke<DeleteCloudFrontOriginAccessIdentityResponse> -> executeDeleteCloudFrontOriginAccessIdentity: Probability = 1.00, Count = 1
PortugueseMinimalStemFilter -> PortugueseMinimalStemFilter: Probability = 1.00, Count = 1
PutDashboardResponse -> PutDashboardResult: Probability = 1.00, Count = 1
PutDashboard -> putDashboard: Probability = 1.00, Count = 1
PutDashboardRequest -> PutDashboardRequest: Probability = 1.00, Count = 1
Invoke<PutDashboardResponse> -> executePutDashboard: Probability = 1.00, Count = 1
AddChar -> addChar: Probability = 1.00, Count = 1
charWidths[c] -> Character.valueOf: Probability = 0.67, Count = 2
charWidths[c] -> Integer.valueOf: Probability = 0.33, Count = 1
DeleteRoomSkillParameterResponse -> DeleteRoomSkillParameterResult: Probability = 1.00, Count = 1
DeleteRoomSkillParameter -> deleteRoomSkillParameter: Probability = 1.00, Count = 1
DeleteRoomSkillParameterRequest -> DeleteRoomSkillParameterRequest: Probability = 1.00, Count = 1
Invoke<DeleteRoomSkillParameterResponse> -> executeDeleteRoomSkillParameter: Probability = 1.00, Count = 1
DescribeDBClusterSnapshotAttributesResponse -> DBClusterSnapshotAttributesResult: Probability = 1.00, Count = 1
DescribeDBClusterSnapshotAttributes -> describeDBClusterSnapshotAttributes: Probability = 1.00, Count = 1
DescribeDBClusterSnapshotAttributesRequest -> DescribeDBClusterSnapshotAttributesRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBClusterSnapshotAttributesResponse> -> executeDescribeDBClusterSnapshotAttributes: Probability = 1.00, Count = 1
AddFile -> addFile: Probability = 1.00, Count = 1
FileHeader -> FileHeader: Probability = 1.00, Count = 1
fh -> fh: Probability = 1.00, Count = 2
files.AddItem -> files.add: Probability = 1.00, Count = 1
ItalianLightStemFilter -> ItalianLightStemFilter: Probability = 1.00, Count = 1
LinkedHashMap -> LinkedHashMap: Probability = 1.00, Count = 1
init -> init: Probability = 1.00, Count = 1
accessOrder -> accessOrder: Probability = 1.00, Count = 1
DeleteStackInstancesResponse -> DeleteStackInstancesResult: Probability = 1.00, Count = 1
DeleteStackInstances -> deleteStackInstances: Probability = 1.00, Count = 1
DeleteStackInstancesRequest -> DeleteStackInstancesRequest: Probability = 1.00, Count = 1
Invoke<DeleteStackInstancesResponse> -> executeDeleteStackInstances: Probability = 1.00, Count = 1
StringWriter -> StringWriter: Probability = 1.00, Count = 2
GetOriginalMatchingDocs -> getOriginalMatchingDocs: Probability = 1.00, Count = 1
GetEbsEncryptionByDefaultResponse -> GetEbsEncryptionByDefaultResult: Probability = 1.00, Count = 1
GetEbsEncryptionByDefault -> getEbsEncryptionByDefault: Probability = 1.00, Count = 1
GetEbsEncryptionByDefaultRequest -> GetEbsEncryptionByDefaultRequest: Probability = 1.00, Count = 1
Invoke<GetEbsEncryptionByDefaultResponse> -> executeGetEbsEncryptionByDefault: Probability = 1.00, Count = 1
widthInteger -> widthInteger: Probability = 0.75, Count = 3
widthInteger -> charWidths.get: Probability = 0.25, Count = 1
'W' -> 'W': Probability = 1.00, Count = 2
DescribeSecurityGroupReferencesResponse -> DescribeSecurityGroupReferencesResult: Probability = 1.00, Count = 1
DescribeSecurityGroupReferences -> describeSecurityGroupReferences: Probability = 1.00, Count = 1
DescribeSecurityGroupReferencesRequest -> DescribeSecurityGroupReferencesRequest: Probability = 1.00, Count = 1
Invoke<DescribeSecurityGroupReferencesResponse> -> executeDescribeSecurityGroupReferences: Probability = 1.00, Count = 1
GetEscherContainer -> getEscherContainer: Probability = 1.00, Count = 3
er -> er: Probability = 1.00, Count = 3
isRemoved -> isRemoved: Probability = 0.86, Count = 6
isRemoved -> this.getPatriarch: Probability = 0.14, Count = 1
shape.AfterRemove -> shape.afterRemove: Probability = 1.00, Count = 2
shapes.Remove -> shapes.remove: Probability = 1.00, Count = 1
linkTable.ChangeExternalReference -> linkTable.changeExternalReference: Probability = 1.00, Count = 1
rowIx&& -> rowIx&&: Probability = 0.50, Count = 2
rowIx&& -> r.getLastRow: Probability = 0.25, Count = 1
rowIx&& -> colIx&&: Probability = 0.25, Count = 1
colIx&& -> r.getLastColumn: Probability = 1.00, Count = 1
Rm -> rm: Probability = 1.00, Count = 1
2097151L -> 2097151L: Probability = 1.00, Count = 1
work -> work: Probability = 0.50, Count = 4
work -> work.endOffset: Probability = 0.25, Count = 2
work -> termsOffsets.add: Probability = 0.25, Count = 2
Invoke<DescribeLoadBalancerPolicyTypesResponse> -> executeDescribeLoadBalancerPolicyTypes: Probability = 1.00, Count = 1
GetCmd -> getCmd: Probability = 1.00, Count = 1
ch3 -> ch3: Probability = 1.00, Count = 2
ch4 -> ch4: Probability = 1.00, Count = 2
"Reverse" -> "Reverse": Probability = 1.00, Count = 1
norms -> SimilarityBase.this.explain: Probability = 1.00, Count = 1
outerInstance.DecodeNormValue -> stats,: Probability = 0.50, Count = 2
outerInstance.DecodeNormValue -> freq,: Probability = 0.50, Count = 2
norms.Get -> getLengthValue: Probability = 0.50, Count = 2
norms.Get -> norm: Probability = 0.50, Count = 2
ListenerList -> ListenerList: Probability = 1.00, Count = 1
GetGlobalListenerList -> getGlobalListenerList: Probability = 1.00, Count = 1
globalListeners -> globalListeners: Probability = 1.00, Count = 1
GetInvitationsCountResponse -> GetInvitationsCountResult: Probability = 1.00, Count = 1
GetInvitationsCount -> getInvitationsCount: Probability = 1.00, Count = 1
GetInvitationsCountRequest -> GetInvitationsCountRequest: Probability = 1.00, Count = 1
Invoke<GetInvitationsCountResponse> -> executeGetInvitationsCount: Probability = 1.00, Count = 1
Sharpen.Util.FloatToIntBits -> Float.floatToIntBits: Probability = 1.00, Count = 2
SetCategoryLabelsCellRange -> setCategoryLabelsCellRange: Probability = 1.00, Count = 1
series.NumCategories -> series.setNumCategories: Probability = 1.00, Count = 1
DeleteScheduledActionResponse -> DeleteScheduledActionResult: Probability = 1.00, Count = 1
DeleteScheduledAction -> deleteScheduledAction: Probability = 1.00, Count = 1
DeleteScheduledActionRequest -> DeleteScheduledActionRequest: Probability = 1.00, Count = 1
Invoke<DeleteScheduledActionResponse> -> executeDeleteScheduledAction: Probability = 1.00, Count = 1
ChangeInfo -> ChangeInfo: Probability = 1.00, Count = 1
ChangeStatus -> ChangeStatus: Probability = 1.00, Count = 1
submittedAt -> submittedAt: Probability = 1.00, Count = 2
_submittedAt -> setSubmittedAt: Probability = 1.00, Count = 1
SwedishLightStemFilterFactory -> SwedishLightStemFilterFactory: Probability = 1.00, Count = 1
ErrorMatcher -> ErrorMatcher: Probability = 1.00, Count = 1
operator1 -> operator: Probability = 1.00, Count = 2
java.io.Console -> Console: Probability = 1.00, Count = 1
getConsole -> getConsole: Probability = 1.00, Count = 1
console -> console: Probability = 1.00, Count = 1
UpdateTrialComponentResponse -> UpdateTrialComponentResult: Probability = 1.00, Count = 1
UpdateTrialComponent -> updateTrialComponent: Probability = 1.00, Count = 1
UpdateTrialComponentRequest -> UpdateTrialComponentRequest: Probability = 1.00, Count = 1
Invoke<UpdateTrialComponentResponse> -> executeUpdateTrialComponent: Probability = 1.00, Count = 1
refs.Values -> refs.values: Probability = 1.00, Count = 2
lastRowIndex,int -> lastRowIndex,int: Probability = 1.00, Count = 1
evaluator -> evaluator: Probability = 1.00, Count = 2
evaluator, -> evaluator,: Probability = 1.00, Count = 1
BatchSuspendUserResponse -> BatchSuspendUserResult: Probability = 1.00, Count = 1
BatchSuspendUser -> batchSuspendUser: Probability = 1.00, Count = 1
BatchSuspendUserRequest -> BatchSuspendUserRequest: Probability = 1.00, Count = 1
Invoke<BatchSuspendUserResponse> -> executeBatchSuspendUser: Probability = 1.00, Count = 1
CreateVpnGatewayRequest -> CreateVpnGatewayRequest: Probability = 1.00, Count = 3
GatewayType -> GatewayType: Probability = 0.67, Count = 2
GatewayType -> String: Probability = 0.33, Count = 1
BundleInstanceResponse -> BundleInstanceResult: Probability = 1.00, Count = 1
BundleInstance -> bundleInstance: Probability = 1.00, Count = 1
Invoke<BundleInstanceResponse> -> executeBundleInstance: Probability = 1.00, Count = 1
ListDeploymentsResponse -> ListDeploymentsResult: Probability = 1.00, Count = 1
ListDeployments -> listDeployments: Probability = 1.00, Count = 1
ListDeploymentsRequest -> ListDeploymentsRequest: Probability = 1.00, Count = 1
Invoke<ListDeploymentsResponse> -> executeListDeployments: Probability = 1.00, Count = 1
FOLLOW -> FOLLOW: Probability = 1.00, Count = 1
DetectFacesResponse -> DetectFacesResult: Probability = 1.00, Count = 1
DetectFaces -> detectFaces: Probability = 1.00, Count = 1
DetectFacesRequest -> DetectFacesRequest: Probability = 1.00, Count = 1
Invoke<DetectFacesResponse> -> executeDetectFaces: Probability = 1.00, Count = 1
GetRegionsResponse -> GetRegionsResult: Probability = 1.00, Count = 1
GetRegions -> getRegions: Probability = 1.00, Count = 1
GetRegionsRequest -> GetRegionsRequest: Probability = 1.00, Count = 1
Invoke<GetRegionsResponse> -> executeGetRegions: Probability = 1.00, Count = 1
WikipediaTokenizerFactory -> WikipediaTokenizerFactory: Probability = 1.00, Count = 1
!frozen -> !frozen: Probability = 1.00, Count = 1
AddTagsToResourceResponse -> AddTagsToResourceResult: Probability = 1.00, Count = 1
AddTagsToResource -> addTagsToResource: Probability = 1.00, Count = 1
AddTagsToResourceRequest -> AddTagsToResourceRequest: Probability = 1.00, Count = 1
Invoke<AddTagsToResourceResponse> -> executeAddTagsToResource: Probability = 1.00, Count = 1
minTargetSize -> minTargetSize,: Probability = 0.12, Count = 1
minTargetSize -> minTargetSize: Probability = 0.88, Count = 7
extra -> MAX_ARRAY_LENGTH: Probability = 0.50, Count = 4
extra -> extra: Probability = 0.50, Count = 4
Complement -> complement: Probability = 1.00, Count = 2
vocabularyIS -> vocabularyIS: Probability = 1.00, Count = 3
vocabularyIS.Subtract -> vocabularyIS.subtract: Probability = 1.00, Count = 1
GetApnsVoipSandboxChannelResponse -> GetApnsVoipSandboxChannelResult: Probability = 1.00, Count = 1
GetApnsVoipSandboxChannel -> getApnsVoipSandboxChannel: Probability = 1.00, Count = 1
GetApnsVoipSandboxChannelRequest -> GetApnsVoipSandboxChannelRequest: Probability = 1.00, Count = 1
Invoke<GetApnsVoipSandboxChannelResponse> -> executeGetApnsVoipSandboxChannel: Probability = 1.00, Count = 1
ArabicNormalizationFilter -> ArabicNormalizationFilter: Probability = 1.00, Count = 2
Invoke<DescribeAlarmHistoryResponse> -> executeDescribeAlarmHistory: Probability = 1.00, Count = 1
NGit.Api.DeleteTagCommand -> DeleteTagCommand: Probability = 1.00, Count = 1
this.tags.Clear -> this.tags.clear: Probability = 1.00, Count = 1
ListVoiceConnectorGroupsResponse -> ListVoiceConnectorGroupsResult: Probability = 1.00, Count = 1
ListVoiceConnectorGroups -> listVoiceConnectorGroups: Probability = 1.00, Count = 1
ListVoiceConnectorGroupsRequest -> ListVoiceConnectorGroupsRequest: Probability = 1.00, Count = 1
Invoke<ListVoiceConnectorGroupsResponse> -> executeListVoiceConnectorGroups: Probability = 1.00, Count = 1
Intercept -> Intercept: Probability = 1.00, Count = 1
LinearRegressionFunction.FUNCTION.INTERCEPT -> FUNCTION.INTERCEPT: Probability = 1.00, Count = 1
ProvisionByoipCidrResponse -> ProvisionByoipCidrResult: Probability = 1.00, Count = 1
ProvisionByoipCidr -> provisionByoipCidr: Probability = 1.00, Count = 1
ProvisionByoipCidrRequest -> ProvisionByoipCidrRequest: Probability = 1.00, Count = 1
Invoke<ProvisionByoipCidrResponse> -> executeProvisionByoipCidr: Probability = 1.00, Count = 1
BatchGetApplicationRevisionsResponse -> BatchGetApplicationRevisionsResult: Probability = 1.00, Count = 1
BatchGetApplicationRevisions -> batchGetApplicationRevisions: Probability = 1.00, Count = 1
BatchGetApplicationRevisionsRequest -> BatchGetApplicationRevisionsRequest: Probability = 1.00, Count = 1
Invoke<BatchGetApplicationRevisionsResponse> -> executeBatchGetApplicationRevisions: Probability = 1.00, Count = 1
startIdx -> startIdx: Probability = 1.00, Count = 3
endIdx -> endIdx: Probability = 1.00, Count = 3
FindEndOfRowOutlineGroup -> findEndOfRowOutlineGroup: Probability = 1.00, Count = 2
Invoke<GetSendQuotaResponse> -> executeGetSendQuota: Probability = 1.00, Count = 1
FeatFormulaErr2 -> FeatFormulaErr2: Probability = 1.00, Count = 1
DefineAnalysisSchemeResponse -> DefineAnalysisSchemeResult: Probability = 1.00, Count = 1
DefineAnalysisScheme -> defineAnalysisScheme: Probability = 1.00, Count = 1
DefineAnalysisSchemeRequest -> DefineAnalysisSchemeRequest: Probability = 1.00, Count = 1
Invoke<DefineAnalysisSchemeResponse> -> executeDefineAnalysisScheme: Probability = 1.00, Count = 1
IrishStemmer -> IrishStemmer: Probability = 1.00, Count = 1
UTF8Sequence -> UTF8Sequence: Probability = 1.00, Count = 1
UTF8Byte[4] -> UTF8Byte[4]: Probability = 1.00, Count = 1
UTF8Byte -> UTF8Byte: Probability = 1.00, Count = 1
ListPhotosRequest -> ListPhotosRequest: Probability = 1.00, Count = 1
"ListPhotos", -> "ListPhotos",: Probability = 1.00, Count = 1
RegisterStreamConsumerResponse -> RegisterStreamConsumerResult: Probability = 1.00, Count = 1
RegisterStreamConsumer -> registerStreamConsumer: Probability = 1.00, Count = 1
RegisterStreamConsumerRequest -> RegisterStreamConsumerRequest: Probability = 1.00, Count = 1
Invoke<RegisterStreamConsumerResponse> -> executeRegisterStreamConsumer: Probability = 1.00, Count = 1
SimScorer -> SimScorer: Probability = 1.00, Count = 1
subScorer -> subScorer: Probability = 1.00, Count = 1
subScorers -> subScorers: Probability = 1.00, Count = 1
subScorer.Score -> subScorer.score: Probability = 1.00, Count = 1
List<Tag> -> java.util.List<Tag>: Probability = 1.00, Count = 1
_tags -> setTags: Probability = 1.00, Count = 1
DescribeEC2InstanceLimitsResponse -> DescribeEC2InstanceLimitsResult: Probability = 1.00, Count = 1
DescribeEC2InstanceLimits -> describeEC2InstanceLimits: Probability = 1.00, Count = 1
DescribeEC2InstanceLimitsRequest -> DescribeEC2InstanceLimitsRequest: Probability = 1.00, Count = 1
Invoke<DescribeEC2InstanceLimitsResponse> -> executeDescribeEC2InstanceLimits: Probability = 1.00, Count = 1
RenameDetector -> RenameDetector: Probability = 1.00, Count = 3
GetStagesResponse -> GetStagesResult: Probability = 1.00, Count = 1
GetStages -> getStages: Probability = 1.00, Count = 1
GetStagesRequest -> GetStagesRequest: Probability = 1.00, Count = 1
Invoke<GetStagesResponse> -> executeGetStages: Probability = 1.00, Count = 1
Formula.Create -> Formula.create: Probability = 1.00, Count = 1
RegisterPhotoRequest -> RegisterPhotoRequest: Probability = 1.00, Count = 1
"RegisterPhoto", -> "RegisterPhoto",: Probability = 1.00, Count = 1
More -> more: Probability = 1.00, Count = 1
TokenTypes.More -> MORE: Probability = 1.00, Count = 1
positionImpl -> positionImpl: Probability = 1.00, Count = 1
TopDocs[] -> TopFieldDocs[]: Probability = 1.00, Count = 1
LexerModeAction -> LexerModeAction: Probability = 1.00, Count = 1
CanExecute -> canExecute: Probability = 1.00, Count = 1
dummy -> dummy: Probability = 1.00, Count = 1
DetachObjectResponse -> DetachObjectResult: Probability = 1.00, Count = 1
DetachObject -> detachObject: Probability = 1.00, Count = 1
DetachObjectRequest -> DetachObjectRequest: Probability = 1.00, Count = 1
Invoke<DetachObjectResponse> -> executeDetachObject: Probability = 1.00, Count = 1
DescribeWorkflowTypeResponse -> WorkflowTypeDetail: Probability = 1.00, Count = 1
DescribeWorkflowType -> describeWorkflowType: Probability = 1.00, Count = 1
DescribeWorkflowTypeRequest -> DescribeWorkflowTypeRequest: Probability = 1.00, Count = 1
Invoke<DescribeWorkflowTypeResponse> -> executeDescribeWorkflowType: Probability = 1.00, Count = 1
ClearModels -> clearModels: Probability = 1.00, Count = 1
sentenceModels.Clear -> sentenceModels.clear: Probability = 1.00, Count = 1
tokenizerModels.Clear -> tokenizerModels.clear: Probability = 1.00, Count = 1
posTaggerModels.Clear -> posTaggerModels.clear: Probability = 1.00, Count = 1
chunkerModels.Clear -> chunkerModels.clear: Probability = 1.00, Count = 1
nerModels.Clear -> nerModels.clear: Probability = 1.00, Count = 1
lemmaDictionaries.Clear -> lemmaDictionaries.clear: Probability = 1.00, Count = 1
RefLockFor -> refLockFor: Probability = 1.00, Count = 1
LockFile.SUFFIX -> LOCK_SUFFIX: Probability = 1.00, Count = 1
DeleteComponentResponse -> DeleteComponentResult: Probability = 1.00, Count = 1
DeleteComponent -> deleteComponent: Probability = 1.00, Count = 1
DeleteComponentRequest -> DeleteComponentRequest: Probability = 1.00, Count = 1
Invoke<DeleteComponentResponse> -> executeDeleteComponent: Probability = 1.00, Count = 1
DescribeAuditStreamConfigurationResponse -> DescribeAuditStreamConfigurationResult: Probability = 1.00, Count = 1
DescribeAuditStreamConfiguration -> describeAuditStreamConfiguration: Probability = 1.00, Count = 1
DescribeAuditStreamConfigurationRequest -> DescribeAuditStreamConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DescribeAuditStreamConfigurationResponse> -> executeDescribeAuditStreamConfiguration: Probability = 1.00, Count = 1
"<any -> "<any: Probability = 1.00, Count = 2
AssociateSkillWithSkillGroupResponse -> AssociateSkillWithSkillGroupResult: Probability = 1.00, Count = 1
AssociateSkillWithSkillGroup -> associateSkillWithSkillGroup: Probability = 1.00, Count = 1
AssociateSkillWithSkillGroupRequest -> AssociateSkillWithSkillGroupRequest: Probability = 1.00, Count = 1
Invoke<AssociateSkillWithSkillGroupResponse> -> executeAssociateSkillWithSkillGroup: Probability = 1.00, Count = 1
GetFetchedFrom -> getFetchedFrom: Probability = 1.00, Count = 1
this.fetchedFrom -> this.fetchedFrom: Probability = 1.00, Count = 1
NewCounter -> newCounter: Probability = 1.00, Count = 1
threadSafe -> threadSafe: Probability = 1.00, Count = 2
AtomicCounter -> AtomicCounter: Probability = 1.00, Count = 1
SerialCounter -> SerialCounter: Probability = 1.00, Count = 1
java.nio.ReadWriteFloatArrayBuffer -> ReadWriteFloatArrayBuffer: Probability = 1.00, Count = 2
ListProcessingJobsResponse -> ListProcessingJobsResult: Probability = 1.00, Count = 1
ListProcessingJobs -> listProcessingJobs: Probability = 1.00, Count = 1
ListProcessingJobsRequest -> ListProcessingJobsRequest: Probability = 1.00, Count = 1
Invoke<ListProcessingJobsResponse> -> executeListProcessingJobs: Probability = 1.00, Count = 1
_input.Consume -> _input.consume: Probability = 1.00, Count = 1
CreateTemplateAliasResponse -> CreateTemplateAliasResult: Probability = 1.00, Count = 1
CreateTemplateAlias -> createTemplateAlias: Probability = 1.00, Count = 1
CreateTemplateAliasRequest -> CreateTemplateAliasRequest: Probability = 1.00, Count = 1
Invoke<CreateTemplateAliasResponse> -> executeCreateTemplateAlias: Probability = 1.00, Count = 1
java.nio.InvalidMarkException -> InvalidMarkException: Probability = 1.00, Count = 1
set" -> set": Probability = 1.00, Count = 1
.entrySet -> .entrySet: Probability = 1.00, Count = 1
TagResource -> tagResource: Probability = 1.00, Count = 1
TagResourceRequest -> TagResourceRequest: Probability = 1.00, Count = 1
TagResourceResponseUnmarshaller.Instance -> executeTagResource: Probability = 1.00, Count = 1
getFirst -> getFirst: Probability = 1.00, Count = 1
ComputeId -> computeId: Probability = 1.00, Count = 1
ins -> ins: Probability = 1.00, Count = 1
ins.IdFor -> ins.idFor: Probability = 1.00, Count = 2
Constants.OBJ_TREE, -> OBJ_TREE,: Probability = 1.00, Count = 2
TransferDomainResponse -> TransferDomainResult: Probability = 1.00, Count = 1
TransferDomain -> transferDomain: Probability = 1.00, Count = 1
TransferDomainRequest -> TransferDomainRequest: Probability = 1.00, Count = 1
Invoke<TransferDomainResponse> -> executeTransferDomain: Probability = 1.00, Count = 1
Invoke<DescribeReservedNodeOfferingsResponse> -> executeDescribeReservedNodeOfferings: Probability = 1.00, Count = 1
CanHandle -> canHandle: Probability = 1.00, Count = 2
GetImportJobResponse -> GetImportJobResult: Probability = 1.00, Count = 1
GetImportJob -> getImportJob: Probability = 1.00, Count = 1
GetImportJobRequest -> GetImportJobRequest: Probability = 1.00, Count = 1
Invoke<GetImportJobResponse> -> executeGetImportJob: Probability = 1.00, Count = 1
LookupDeveloperIdentityResponse -> LookupDeveloperIdentityResult: Probability = 1.00, Count = 1
LookupDeveloperIdentity -> lookupDeveloperIdentity: Probability = 1.00, Count = 1
LookupDeveloperIdentityRequest -> LookupDeveloperIdentityRequest: Probability = 1.00, Count = 1
Invoke<LookupDeveloperIdentityResponse> -> executeLookupDeveloperIdentity: Probability = 1.00, Count = 1
field_1_mode -> field_1_mode: Probability = 1.00, Count = 1
BulkOperationPackedSingleBlock -> BulkOperationPackedSingleBlock: Probability = 1.00, Count = 1
this.mask -> this.mask: Probability = 1.00, Count = 2
1L -> 1L: Probability = 1.00, Count = 1
DateToString -> dateToString: Probability = 1.00, Count = 1
TimeToString -> timeToString: Probability = 1.00, Count = 1
DescribeUserHierarchyStructureResponse -> DescribeUserHierarchyStructureResult: Probability = 1.00, Count = 1
DescribeUserHierarchyStructure -> describeUserHierarchyStructure: Probability = 1.00, Count = 1
DescribeUserHierarchyStructureRequest -> DescribeUserHierarchyStructureRequest: Probability = 1.00, Count = 1
Invoke<DescribeUserHierarchyStructureResponse> -> executeDescribeUserHierarchyStructure: Probability = 1.00, Count = 1
GetDomainsResponse -> GetDomainsResult: Probability = 1.00, Count = 1
GetDomains -> getDomains: Probability = 1.00, Count = 1
GetDomainsRequest -> GetDomainsRequest: Probability = 1.00, Count = 1
Invoke<GetDomainsResponse> -> executeGetDomains: Probability = 1.00, Count = 1
GetStreamFileThreshold -> getStreamFileThreshold: Probability = 1.00, Count = 1
BatchGetDeploymentInstancesResponse -> BatchGetDeploymentInstancesResult: Probability = 1.00, Count = 1
BatchGetDeploymentInstances -> batchGetDeploymentInstances: Probability = 1.00, Count = 1
BatchGetDeploymentInstancesRequest -> BatchGetDeploymentInstancesRequest: Probability = 1.00, Count = 1
Invoke<BatchGetDeploymentInstancesResponse> -> executeBatchGetDeploymentInstances: Probability = 1.00, Count = 1
GetIdentityVerificationAttributesResponse -> GetIdentityVerificationAttributesResult: Probability = 1.00, Count = 1
GetIdentityVerificationAttributes -> getIdentityVerificationAttributes: Probability = 1.00, Count = 1
GetIdentityVerificationAttributesRequest -> GetIdentityVerificationAttributesRequest: Probability = 1.00, Count = 1
Invoke<GetIdentityVerificationAttributesResponse> -> executeGetIdentityVerificationAttributes: Probability = 1.00, Count = 1
LittleEndianOutputStream -> LittleEndianOutputStream: Probability = 1.00, Count = 2
this.out1 -> super: Probability = 1.00, Count = 1
GetDeploymentGroupResponse -> GetDeploymentGroupResult: Probability = 1.00, Count = 1
GetDeploymentGroup -> getDeploymentGroup: Probability = 1.00, Count = 1
GetDeploymentGroupRequest -> GetDeploymentGroupRequest: Probability = 1.00, Count = 1
Invoke<GetDeploymentGroupResponse> -> executeGetDeploymentGroup: Probability = 1.00, Count = 1
DescribeOrganizationConfigurationResponse -> DescribeOrganizationConfigurationResult: Probability = 1.00, Count = 1
DescribeOrganizationConfiguration -> describeOrganizationConfiguration: Probability = 1.00, Count = 1
DescribeOrganizationConfigurationRequest -> DescribeOrganizationConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DescribeOrganizationConfigurationResponse> -> executeDescribeOrganizationConfiguration: Probability = 1.00, Count = 1
UpdateRuleMetadataResponse -> UpdateRuleMetadataResult: Probability = 1.00, Count = 1
UpdateRuleMetadata -> updateRuleMetadata: Probability = 1.00, Count = 1
UpdateRuleMetadataRequest -> UpdateRuleMetadataRequest: Probability = 1.00, Count = 1
Invoke<UpdateRuleMetadataResponse> -> executeUpdateRuleMetadata: Probability = 1.00, Count = 1
lowerKey -> lowerKey: Probability = 1.00, Count = 1
FtCfSubRecord -> FtCfSubRecord: Probability = 1.00, Count = 1
rec.flags -> copy: Probability = 1.00, Count = 2
HCenterRecord -> HCenterRecord: Probability = 1.00, Count = 2
GetDashboardEmbedUrlResponse -> GetDashboardEmbedUrlResult: Probability = 1.00, Count = 1
GetDashboardEmbedUrl -> getDashboardEmbedUrl: Probability = 1.00, Count = 1
GetDashboardEmbedUrlRequest -> GetDashboardEmbedUrlRequest: Probability = 1.00, Count = 1
Invoke<GetDashboardEmbedUrlResponse> -> executeGetDashboardEmbedUrl: Probability = 1.00, Count = 1
BinaryDocValues -> BinaryDocValues: Probability = 0.50, Count = 1
BinaryDocValues -> getBinaryDocValues: Probability = 0.50, Count = 1
RevFilter[subfilters.Length] -> TreeFilter[subfilters.length]: Probability = 0.50, Count = 2
RevFilter[subfilters.Length] -> RevFilter[subfilters.length]: Probability = 0.50, Count = 2
DeleteApnsVoipSandboxChannelResponse -> DeleteApnsVoipSandboxChannelResult: Probability = 1.00, Count = 1
DeleteApnsVoipSandboxChannel -> deleteApnsVoipSandboxChannel: Probability = 1.00, Count = 1
DeleteApnsVoipSandboxChannelRequest -> DeleteApnsVoipSandboxChannelRequest: Probability = 1.00, Count = 1
Invoke<DeleteApnsVoipSandboxChannelResponse> -> executeDeleteApnsVoipSandboxChannel: Probability = 1.00, Count = 1
FindFunction -> findFunction: Probability = 1.00, Count = 4
Credentials -> Credentials: Probability = 1.00, Count = 1
secretAccessKey, -> secretAccessKey,: Probability = 1.00, Count = 1
sessionToken, -> sessionToken,: Probability = 1.00, Count = 1
expiration -> expiration: Probability = 1.00, Count = 2
_secretAccessKey -> setSecretAccessKey: Probability = 1.00, Count = 2
secretAccessKey -> secretAccessKey: Probability = 1.00, Count = 3
_sessionToken -> setSessionToken: Probability = 1.00, Count = 1
_expiration -> setExpiration: Probability = 1.00, Count = 1
WithSearch -> withSearch: Probability = 1.00, Count = 1
queryMaker -> queryMaker: Probability = 1.00, Count = 2
SerializeUnicodeString -> _option_flags: Probability = 0.11, Count = 1
SerializeUnicodeString -> serializeUnicodeString: Probability = 0.44, Count = 4
SerializeUnicodeString -> _promptTitle,: Probability = 0.11, Count = 1
SerializeUnicodeString -> _errorTitle,: Probability = 0.11, Count = 1
SerializeUnicodeString -> _promptText,: Probability = 0.11, Count = 1
SerializeUnicodeString -> _errorText,: Probability = 0.11, Count = 1
GetConferencePreferenceResponse -> GetConferencePreferenceResult: Probability = 1.00, Count = 1
GetConferencePreference -> getConferencePreference: Probability = 1.00, Count = 1
GetConferencePreferenceRequest -> GetConferencePreferenceRequest: Probability = 1.00, Count = 1
Invoke<GetConferencePreferenceResponse> -> executeGetConferencePreference: Probability = 1.00, Count = 1
all.Or -> all.or: Probability = 1.00, Count = 1
ListTrafficPolicyInstancesResponse -> ListTrafficPolicyInstancesResult: Probability = 1.00, Count = 1
ListTrafficPolicyInstances -> listTrafficPolicyInstances: Probability = 1.00, Count = 1
ListTrafficPolicyInstancesRequest -> ListTrafficPolicyInstancesRequest: Probability = 1.00, Count = 1
Invoke<ListTrafficPolicyInstancesResponse> -> executeListTrafficPolicyInstances: Probability = 1.00, Count = 1
ModifyDBClusterEndpointResponse -> ModifyDBClusterEndpointResult: Probability = 1.00, Count = 1
ModifyDBClusterEndpoint -> modifyDBClusterEndpoint: Probability = 1.00, Count = 1
ModifyDBClusterEndpointRequest -> ModifyDBClusterEndpointRequest: Probability = 1.00, Count = 1
Invoke<ModifyDBClusterEndpointResponse> -> executeModifyDBClusterEndpoint: Probability = 1.00, Count = 1
DescribeTransitGatewaysResponse -> DescribeTransitGatewaysResult: Probability = 1.00, Count = 1
DescribeTransitGateways -> describeTransitGateways: Probability = 1.00, Count = 1
DescribeTransitGatewaysRequest -> DescribeTransitGatewaysRequest: Probability = 1.00, Count = 1
Invoke<DescribeTransitGatewaysResponse> -> executeDescribeTransitGateways: Probability = 1.00, Count = 1
GetSimilarPhotosRequest -> GetSimilarPhotosRequest: Probability = 1.00, Count = 1
"GetSimilarPhotos", -> "GetSimilarPhotos",: Probability = 1.00, Count = 1
GetProposalResponse -> GetProposalResult: Probability = 1.00, Count = 1
GetProposal -> getProposal: Probability = 1.00, Count = 1
GetProposalRequest -> GetProposalRequest: Probability = 1.00, Count = 1
Invoke<GetProposalResponse> -> executeGetProposal: Probability = 1.00, Count = 1
StartInstancesRequest -> StartInstancesRequest: Probability = 1.00, Count = 2
GetRawMessageContentResponse -> GetRawMessageContentResult: Probability = 1.00, Count = 1
GetRawMessageContent -> getRawMessageContent: Probability = 1.00, Count = 1
GetRawMessageContentRequest -> GetRawMessageContentRequest: Probability = 1.00, Count = 1
Invoke<GetRawMessageContentResponse> -> executeGetRawMessageContent: Probability = 1.00, Count = 1
FieldsQueryList -> FieldsQueryList: Probability = 1.00, Count = 5
MatchesExtension -> matchesExtension: Probability = 1.00, Count = 1
filename.EndsWith -> filename.endsWith: Probability = 1.00, Count = 1
ext, -> ext: Probability = 1.00, Count = 1
parent.Remove -> parent.remove: Probability = 1.00, Count = 1
DisassociateDeviceFromRoomResponse -> DisassociateDeviceFromRoomResult: Probability = 1.00, Count = 1
DisassociateDeviceFromRoom -> disassociateDeviceFromRoom: Probability = 1.00, Count = 1
DisassociateDeviceFromRoomRequest -> DisassociateDeviceFromRoomRequest: Probability = 1.00, Count = 1
Invoke<DisassociateDeviceFromRoomResponse> -> executeDisassociateDeviceFromRoom: Probability = 1.00, Count = 1
Modifier -> ModifierQueryNode.Modifier: Probability = 0.60, Count = 3
Modifier -> Modifiers: Probability = 0.40, Count = 2
NGit.Revwalk.RevCommit -> final: Probability = 0.50, Count = 1
NGit.Revwalk.RevCommit -> RevCommit: Probability = 0.50, Count = 1
nth -> nth: Probability = 1.00, Count = 2
parents[nth] -> parents[nth]: Probability = 1.00, Count = 1
TerminateWorkspacesResponse -> TerminateWorkspacesResult: Probability = 1.00, Count = 1
TerminateWorkspaces -> terminateWorkspaces: Probability = 1.00, Count = 1
TerminateWorkspacesRequest -> TerminateWorkspacesRequest: Probability = 1.00, Count = 1
Invoke<TerminateWorkspacesResponse> -> executeTerminateWorkspaces: Probability = 1.00, Count = 1
GetEntryLastModified -> getEntryLastModified: Probability = 1.00, Count = 1
.GetLastModified -> .getLastModified: Probability = 1.00, Count = 1
CancelConversionTaskResponse -> CancelConversionTaskResult: Probability = 1.00, Count = 1
CancelConversionTask -> cancelConversionTask: Probability = 1.00, Count = 1
CancelConversionTaskRequest -> CancelConversionTaskRequest: Probability = 1.00, Count = 1
Invoke<CancelConversionTaskResponse> -> executeCancelConversionTask: Probability = 1.00, Count = 1
InfoSubRecord -> InfoSubRecord: Probability = 1.00, Count = 2
streamPos, -> streamPos,: Probability = 1.00, Count = 1
bucketSstOffset -> bucketSstOffset: Probability = 1.00, Count = 2
streamPos -> streamPos: Probability = 1.00, Count = 1
this.m_suffixes -> this.suffixes: Probability = 1.00, Count = 2
IncreaseNodeGroupsInGlobalReplicationGroupResponse -> GlobalReplicationGroup: Probability = 1.00, Count = 1
IncreaseNodeGroupsInGlobalReplicationGroup -> increaseNodeGroupsInGlobalReplicationGroup: Probability = 1.00, Count = 1
IncreaseNodeGroupsInGlobalReplicationGroupRequest -> IncreaseNodeGroupsInGlobalReplicationGroupRequest: Probability = 1.00, Count = 1
Invoke<IncreaseNodeGroupsInGlobalReplicationGroupResponse> -> executeIncreaseNodeGroupsInGlobalReplicationGroup: Probability = 1.00, Count = 1
rawSheetName -> rawSheetName: Probability = 0.75, Count = 3
rawSheetName -> appendFormat: Probability = 0.25, Count = 1
rawSheetName.Length -> rawSheetName.length: Probability = 1.00, Count = 1
Invoke<DescribeTerminationPolicyTypesResponse> -> executeDescribeTerminationPolicyTypes: Probability = 1.00, Count = 1
DescribeScheduledActionsResponse -> DescribeScheduledActionsResult: Probability = 1.00, Count = 2
DescribeScheduledActions -> describeScheduledActions: Probability = 1.00, Count = 3
DescribeScheduledActionsRequest -> DescribeScheduledActionsRequest: Probability = 1.00, Count = 2
sourceLines[start] -> sourceLines[start]: Probability = 1.00, Count = 1
ListImportsResponse -> ListImportsResult: Probability = 1.00, Count = 1
ListImports -> listImports: Probability = 1.00, Count = 1
ListImportsRequest -> ListImportsRequest: Probability = 1.00, Count = 1
Invoke<ListImportsResponse> -> executeListImports: Probability = 1.00, Count = 1
buf[count++] -> buf[count++]: Probability = 1.00, Count = 1
IndexUpgrader -> IndexUpgrader: Probability = 1.00, Count = 1
iwc, -> iwc,: Probability = 1.00, Count = 1
deletePriorCommits -> deletePriorCommits: Probability = 1.00, Count = 2
this.iwc -> this.iwc: Probability = 1.00, Count = 1
iwc -> iwc: Probability = 1.00, Count = 1
this.deletePriorCommits -> this.deletePriorCommits: Probability = 1.00, Count = 1
DescribeInstanceAttributeResponse -> DescribeInstanceAttributeResult: Probability = 1.00, Count = 1
DescribeInstanceAttribute -> describeInstanceAttribute: Probability = 1.00, Count = 1
Invoke<DescribeInstanceAttributeResponse> -> executeDescribeInstanceAttribute: Probability = 1.00, Count = 1
GetDataEndpointResponse -> GetDataEndpointResult: Probability = 1.00, Count = 1
GetDataEndpoint -> getDataEndpoint: Probability = 1.00, Count = 1
GetDataEndpointRequest -> GetDataEndpointRequest: Probability = 1.00, Count = 1
Invoke<GetDataEndpointResponse> -> executeGetDataEndpoint: Probability = 1.00, Count = 1
AddApplicationOutputResponse -> AddApplicationOutputResult: Probability = 1.00, Count = 1
AddApplicationOutput -> addApplicationOutput: Probability = 1.00, Count = 1
AddApplicationOutputRequest -> AddApplicationOutputRequest: Probability = 1.00, Count = 1
Invoke<AddApplicationOutputResponse> -> executeAddApplicationOutput: Probability = 1.00, Count = 1
UpdateFacetResponse -> UpdateFacetResult: Probability = 1.00, Count = 1
UpdateFacet -> updateFacet: Probability = 1.00, Count = 1
UpdateFacetRequest -> UpdateFacetRequest: Probability = 1.00, Count = 1
Invoke<UpdateFacetResponse> -> executeUpdateFacet: Probability = 1.00, Count = 1
DeleteDomainRequest -> DeleteDomainRequest: Probability = 1.00, Count = 2
dictionary.GetReading -> dictionary.getReading: Probability = 1.00, Count = 1
username, -> username,: Probability = 1.00, Count = 3
encodedByteCount -> encodedByteCount: Probability = 1.00, Count = 2
paddingSize -> paddingSize: Probability = 0.67, Count = 2
paddingSize -> PADDING,: Probability = 0.33, Count = 1
DATA_SIZE -> DATA_SIZE: Probability = 1.00, Count = 4
SheetRefEvaluator -> SheetRefEvaluator: Probability = 1.00, Count = 6
_firstSheetIndex] -> _sheetEvaluators[sheetIndex-_firstSheetIndex]: Probability = 1.00, Count = 1
lastEscape -> lastEscape: Probability = 1.00, Count = 4
CreateDirectConnectGatewayResponse -> CreateDirectConnectGatewayResult: Probability = 1.00, Count = 1
CreateDirectConnectGateway -> createDirectConnectGateway: Probability = 1.00, Count = 1
CreateDirectConnectGatewayRequest -> CreateDirectConnectGatewayRequest: Probability = 1.00, Count = 1
Invoke<CreateDirectConnectGatewayResponse> -> executeCreateDirectConnectGateway: Probability = 1.00, Count = 1
GetMLModelResponse -> GetMLModelResult: Probability = 1.00, Count = 1
GetMLModel -> getMLModel: Probability = 1.00, Count = 1
GetMLModelRequest -> GetMLModelRequest: Probability = 1.00, Count = 1
Invoke<GetMLModelResponse> -> executeGetMLModel: Probability = 1.00, Count = 1
Offset -> negative:: Probability = 0.11, Count = 3
Offset -> bounds:: Probability = 0.11, Count = 3
Offset -> ",bytes.length=": Probability = 0.11, Count = 3
Offset -> offset: Probability = 0.44, Count = 12
Offset -> "offset+length: Probability = 0.07, Count = 2
Offset -> offset=": Probability = 0.07, Count = 2
Offset -> ",length=": Probability = 0.07, Count = 2
Bytes.Length -> bytes.length: Probability = 1.00, Count = 6
",bytes.length=" -> +: Probability = 1.00, Count = 6
DescribeIAMPolicyAssignmentResponse -> DescribeIAMPolicyAssignmentResult: Probability = 1.00, Count = 1
DescribeIAMPolicyAssignment -> describeIAMPolicyAssignment: Probability = 1.00, Count = 1
DescribeIAMPolicyAssignmentRequest -> DescribeIAMPolicyAssignmentRequest: Probability = 1.00, Count = 1
Invoke<DescribeIAMPolicyAssignmentResponse> -> executeDescribeIAMPolicyAssignment: Probability = 1.00, Count = 1
DeleteStreamingDistributionResponse -> DeleteStreamingDistributionResult: Probability = 1.00, Count = 1
DeleteStreamingDistribution -> deleteStreamingDistribution: Probability = 1.00, Count = 1
DeleteStreamingDistributionRequest -> DeleteStreamingDistributionRequest: Probability = 1.00, Count = 1
Invoke<DeleteStreamingDistributionResponse> -> executeDeleteStreamingDistribution: Probability = 1.00, Count = 1
RawSubStringPattern -> RawSubStringPattern: Probability = 1.00, Count = 1
patternText -> patternText: Probability = 0.80, Count = 4
patternText -> patternText.length: Probability = 0.20, Count = 1
Lc -> lc: Probability = 1.00, Count = 1
ListRulesResponse -> ListRulesResult: Probability = 1.00, Count = 1
ListRules -> listRules: Probability = 1.00, Count = 1
ListRulesRequest -> ListRulesRequest: Probability = 1.00, Count = 1
Invoke<ListRulesResponse> -> executeListRules: Probability = 1.00, Count = 1
SendMessageResponse -> SendMessageResult: Probability = 1.00, Count = 2
SendMessage -> sendMessage: Probability = 1.00, Count = 3
markedUpText.ToString -> markedUpText.subSequence: Probability = 1.00, Count = 1
TextStartPos, -> textStartPos,: Probability = 1.00, Count = 1
TextEndPos -> textEndPos: Probability = 1.00, Count = 2
ModifyInstancePlacementResponse -> ModifyInstancePlacementResult: Probability = 1.00, Count = 1
ModifyInstancePlacement -> modifyInstancePlacement: Probability = 1.00, Count = 1
ModifyInstancePlacementRequest -> ModifyInstancePlacementRequest: Probability = 1.00, Count = 1
Invoke<ModifyInstancePlacementResponse> -> executeModifyInstancePlacement: Probability = 1.00, Count = 1
ReplaceOccupiedParameters -> replaceOccupiedParameters: Probability = 1.00, Count = 1
"<matchAllDocs -> "<matchAllDocs: Probability = 1.00, Count = 1
field='*' -> field='*': Probability = 1.00, Count = 1
term='*'/>" -> term='*'/>": Probability = 1.00, Count = 1
DeleteMetricFilterRequest -> DeleteMetricFilterRequest: Probability = 1.00, Count = 1
filterName -> filterName: Probability = 1.00, Count = 3
_filterName -> setFilterName: Probability = 1.00, Count = 2
readChar -> readChar: Probability = 1.00, Count = 2
Invoke<DescribeInstanceStatusResponse> -> executeDescribeInstanceStatus: Probability = 1.00, Count = 1
BatchDeleteAttributesResponse -> BatchDeleteAttributesResult: Probability = 1.00, Count = 1
BatchDeleteAttributes -> batchDeleteAttributes: Probability = 1.00, Count = 1
Invoke<BatchDeleteAttributesResponse> -> executeBatchDeleteAttributes: Probability = 1.00, Count = 1
"<fieldconfig -> "<fieldconfig: Probability = 1.00, Count = 1
name=\"" -> name=\"": Probability = 1.00, Count = 1
configurations=\""+ -> configurations=\""+: Probability = 1.00, Count = 1
ListDeploymentGroupsResponse -> ListDeploymentGroupsResult: Probability = 1.00, Count = 1
ListDeploymentGroups -> listDeploymentGroups: Probability = 1.00, Count = 1
ListDeploymentGroupsRequest -> ListDeploymentGroupsRequest: Probability = 1.00, Count = 1
Invoke<ListDeploymentGroupsResponse> -> executeListDeploymentGroups: Probability = 1.00, Count = 1
CellGeneralFormatter -> CellGeneralFormatter: Probability = 1.00, Count = 1
"General" -> LocaleUtil.getUserLocale: Probability = 1.00, Count = 1
BloomFilteredTerms -> BloomFilteredTerms: Probability = 1.00, Count = 1
_delegateTerms -> this.delegateTerms: Probability = 1.00, Count = 1
_filter -> this.filter: Probability = 1.00, Count = 1
NumBits -> numBits: Probability = 1.00, Count = 1
bytes[idx].Bits -> bytes[idx].bits: Probability = 1.00, Count = 1
Antlr4.Runtime.Atn.LexerChannelAction -> LexerChannelAction: Probability = 1.00, Count = 2
.channel -> .channel: Probability = 1.00, Count = 1
ExecuteChangeSetResponse -> ExecuteChangeSetResult: Probability = 1.00, Count = 1
ExecuteChangeSet -> executeChangeSet: Probability = 1.00, Count = 1
ExecuteChangeSetRequest -> ExecuteChangeSetRequest: Probability = 1.00, Count = 1
Invoke<ExecuteChangeSetResponse> -> executeExecuteChangeSet: Probability = 1.00, Count = 1
StartInstanceResponse -> StartInstanceResult: Probability = 1.00, Count = 1
StartInstance -> startInstance: Probability = 1.00, Count = 1
StartInstanceRequest -> StartInstanceRequest: Probability = 1.00, Count = 1
Invoke<StartInstanceResponse> -> executeStartInstance: Probability = 1.00, Count = 1
GetSet -> getSet: Probability = 1.00, Count = 3
this.@ref.ToString -> ref.toString: Probability = 1.00, Count = 1
ListNetworksResponse -> ListNetworksResult: Probability = 1.00, Count = 1
ListNetworks -> listNetworks: Probability = 1.00, Count = 1
ListNetworksRequest -> ListNetworksRequest: Probability = 1.00, Count = 1
Invoke<ListNetworksResponse> -> executeListNetworks: Probability = 1.00, Count = 1
StopNotebookInstanceResponse -> StopNotebookInstanceResult: Probability = 1.00, Count = 1
StopNotebookInstance -> stopNotebookInstance: Probability = 1.00, Count = 1
StopNotebookInstanceRequest -> StopNotebookInstanceRequest: Probability = 1.00, Count = 1
Invoke<StopNotebookInstanceResponse> -> executeStopNotebookInstance: Probability = 1.00, Count = 1
_string -> _string: Probability = 1.00, Count = 2
readInt -> readInt: Probability = 1.00, Count = 1
DeleteTerminologyResponse -> DeleteTerminologyResult: Probability = 1.00, Count = 1
DeleteTerminology -> deleteTerminology: Probability = 1.00, Count = 1
DeleteTerminologyRequest -> DeleteTerminologyRequest: Probability = 1.00, Count = 1
Invoke<DeleteTerminologyResponse> -> executeDeleteTerminology: Probability = 1.00, Count = 1
GetObjectAttributesResponse -> GetObjectAttributesResult: Probability = 1.00, Count = 1
GetObjectAttributes -> getObjectAttributes: Probability = 1.00, Count = 1
GetObjectAttributesRequest -> GetObjectAttributesRequest: Probability = 1.00, Count = 1
Invoke<GetObjectAttributesResponse> -> executeGetObjectAttributes: Probability = 1.00, Count = 1
GetRevWalk -> getRevWalk: Probability = 1.00, Count = 2
.isAStaticFlagAndHasNorevWalkInstance, -> .isAStaticFlagAndHasNorevWalkInstance,: Probability = 1.00, Count = 1
Invoke<DescribeKeyPairsResponse> -> executeDescribeKeyPairs: Probability = 1.00, Count = 1
SetIndexVersion -> setIndexVersion: Probability = 1.00, Count = 1
IgnoreNode -> IgnoreNode: Probability = 1.00, Count = 1
AList<IgnoreRule> -> ArrayList<>: Probability = 1.00, Count = 1
NotTreeFilter.Create -> NotTreeFilter.create: Probability = 1.00, Count = 1
pEntityName, -> pEntityName,: Probability = 1.00, Count = 1
pResolvedValue -> pResolvedValue: Probability = 1.00, Count = 2
entityName -> entityName: Probability = 1.00, Count = 1
"&" -> "&": Probability = 1.00, Count = 1
pEntityName -> pEntityName: Probability = 1.00, Count = 1
resolvedValue -> resolvedValue: Probability = 1.00, Count = 1
RemoveBreak -> removeBreak: Probability = 1.00, Count = 1
rowKey -> rowKey: Probability = 1.00, Count = 3
_breaks.Remove -> _breaks.remove: Probability = 1.00, Count = 1
_breakMap.Remove -> _breakMap.remove: Probability = 1.00, Count = 1
RunEnd -> runEnd: Probability = 1.00, Count = 2
GetDirectory -> getDirectory: Probability = 1.00, Count = 4
initialPosition -> initialPosition: Probability = 0.67, Count = 2
initialPosition -> _position: Probability = 0.33, Count = 1
_rv -> _rv: Probability = 1.00, Count = 1
Top -> top: Probability = 1.00, Count = 1
NGit.Api.SubmoduleSyncCommand -> SubmoduleSyncCommand: Probability = 1.00, Count = 1
DeleteNamespaceRequest -> DeleteNamespaceRequest: Probability = 1.00, Count = 1
"DeleteNamespace", -> "DeleteNamespace",: Probability = 1.00, Count = 1
GeoRestrictionType -> GeoRestrictionType: Probability = 0.50, Count = 1
GeoRestrictionType -> restrictionType: Probability = 0.50, Count = 1
restrictionType -> ): Probability = 0.75, Count = 3
restrictionType -> setRestrictionType: Probability = 0.25, Count = 1
_restrictionType -> restrictionType.toString: Probability = 1.00, Count = 1
RecognizeEntityRequest -> RecognizeEntityRequest: Probability = 1.00, Count = 1
"RecognizeEntity" -> "RecognizeEntity": Probability = 1.00, Count = 1
"SendMessage", -> "SendMessage",: Probability = 1.00, Count = 1
selectExpression -> selectExpression: Probability = 1.00, Count = 3
_selectExpression -> setSelectExpression: Probability = 1.00, Count = 2
TopMarginRecord -> TopMarginRecord: Probability = 1.00, Count = 1
GetStaticIpsResponse -> GetStaticIpsResult: Probability = 1.00, Count = 1
GetStaticIps -> getStaticIps: Probability = 1.00, Count = 1
GetStaticIpsRequest -> GetStaticIpsRequest: Probability = 1.00, Count = 1
Invoke<GetStaticIpsResponse> -> executeGetStaticIps: Probability = 1.00, Count = 1
CreateStreamingURLResponse -> CreateStreamingURLResult: Probability = 1.00, Count = 1
CreateStreamingURL -> createStreamingURL: Probability = 1.00, Count = 1
CreateStreamingURLRequest -> CreateStreamingURLRequest: Probability = 1.00, Count = 1
Invoke<CreateStreamingURLResponse> -> executeCreateStreamingURL: Probability = 1.00, Count = 1
IBSimilarity -> IBSimilarity: Probability = 1.00, Count = 1
Distribution -> Distribution: Probability = 1.00, Count = 1
distribution, -> distribution,Lambda: Probability = 1.00, Count = 1
lambda, -> lambda,Normalization: Probability = 1.00, Count = 1
this.m_distribution -> this.distribution: Probability = 1.00, Count = 1
distribution -> distribution: Probability = 1.00, Count = 1
this.m_lambda -> this.lambda: Probability = 1.00, Count = 1
lambda -> lambda: Probability = 1.00, Count = 1
GetBatchPredictionResponse -> GetBatchPredictionResult: Probability = 1.00, Count = 1
GetBatchPrediction -> getBatchPrediction: Probability = 1.00, Count = 1
GetBatchPredictionRequest -> GetBatchPredictionRequest: Probability = 1.00, Count = 1
Invoke<GetBatchPredictionResponse> -> executeGetBatchPrediction: Probability = 1.00, Count = 1
StartInstancesResponse -> StartInstancesResult: Probability = 1.00, Count = 1
StartInstances -> startInstances: Probability = 1.00, Count = 1
Invoke<StartInstancesResponse> -> executeStartInstances: Probability = 1.00, Count = 1
DescribeLoadBalancerAttributesResponse -> DescribeLoadBalancerAttributesResult: Probability = 1.00, Count = 1
DescribeLoadBalancerAttributes -> describeLoadBalancerAttributes: Probability = 1.00, Count = 1
DescribeLoadBalancerAttributesRequest -> DescribeLoadBalancerAttributesRequest: Probability = 1.00, Count = 1
Invoke<DescribeLoadBalancerAttributesResponse> -> executeDescribeLoadBalancerAttributes: Probability = 1.00, Count = 1
Filter -> Filter: Probability = 1.00, Count = 2
dictionary.GetBaseForm -> dictionary.getBaseForm: Probability = 1.00, Count = 1
SetVisibleToAllUsersResponse -> SetVisibleToAllUsersResult: Probability = 1.00, Count = 1
SetVisibleToAllUsers -> setVisibleToAllUsers: Probability = 1.00, Count = 1
SetVisibleToAllUsersRequest -> SetVisibleToAllUsersRequest: Probability = 1.00, Count = 1
Invoke<SetVisibleToAllUsersResponse> -> executeSetVisibleToAllUsers: Probability = 1.00, Count = 1
GetBotResponse -> GetBotResult: Probability = 1.00, Count = 1
GetBot -> getBot: Probability = 1.00, Count = 1
GetBotRequest -> GetBotRequest: Probability = 1.00, Count = 1
Invoke<GetBotResponse> -> executeGetBot: Probability = 1.00, Count = 1
UpdateApnsSandboxChannelResponse -> UpdateApnsSandboxChannelResult: Probability = 1.00, Count = 1
UpdateApnsSandboxChannel -> updateApnsSandboxChannel: Probability = 1.00, Count = 1
UpdateApnsSandboxChannelRequest -> UpdateApnsSandboxChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateApnsSandboxChannelResponse> -> executeUpdateApnsSandboxChannel: Probability = 1.00, Count = 1
CreateRoute -> createRoute: Probability = 1.00, Count = 1
CreateRouteRequest -> CreateRouteRequest: Probability = 1.00, Count = 1
Invoke<CreateRouteResponse> -> executeCreateRoute: Probability = 1.00, Count = 1
AtMinValue -> atMinValue: Probability = 1.00, Count = 1
TerminateInstanceInAutoScalingGroupResponse -> TerminateInstanceInAutoScalingGroupResult: Probability = 1.00, Count = 1
TerminateInstanceInAutoScalingGroup -> terminateInstanceInAutoScalingGroup: Probability = 1.00, Count = 1
TerminateInstanceInAutoScalingGroupRequest -> TerminateInstanceInAutoScalingGroupRequest: Probability = 1.00, Count = 1
Invoke<TerminateInstanceInAutoScalingGroupResponse> -> executeTerminateInstanceInAutoScalingGroup: Probability = 1.00, Count = 1
context,SemanticContext -> context,SemanticContext: Probability = 1.00, Count = 2
semanticContext -> semanticContext: Probability = 1.00, Count = 4
DVConstraint.CreateFormulaListConstraint -> DVConstraint.createFormulaListConstraint: Probability = 1.00, Count = 1
FailoverGlobalReplicationGroupResponse -> GlobalReplicationGroup: Probability = 1.00, Count = 1
FailoverGlobalReplicationGroup -> failoverGlobalReplicationGroup: Probability = 1.00, Count = 1
FailoverGlobalReplicationGroupRequest -> FailoverGlobalReplicationGroupRequest: Probability = 1.00, Count = 1
Invoke<FailoverGlobalReplicationGroupResponse> -> executeFailoverGlobalReplicationGroup: Probability = 1.00, Count = 1
BatchPutAttributesResponse -> BatchPutAttributesResult: Probability = 1.00, Count = 1
BatchPutAttributes -> batchPutAttributes: Probability = 1.00, Count = 1
Invoke<BatchPutAttributesResponse> -> executeBatchPutAttributes: Probability = 1.00, Count = 1
hashedOk -> hashedOk: Probability = 1.00, Count = 6
"maxThreadCount -> maxMergeCount: Probability = 1.00, Count = 2
GetRefs -> getRefs: Probability = 1.00, Count = 1
GetSegmentsFileName -> getSegmentsFileName: Probability = 1.00, Count = 1
lastGeneration -> IndexFileNames.SEGMENTS,"",lastGeneration: Probability = 1.00, Count = 1
Listener -> Listener: Probability = 1.00, Count = 1
instancePort -> instancePort: Probability = 1.00, Count = 2
_instancePort -> setInstancePort: Probability = 1.00, Count = 1
GetCurrentUserResponse -> GetCurrentUserResult: Probability = 1.00, Count = 1
GetCurrentUser -> getCurrentUser: Probability = 1.00, Count = 1
GetCurrentUserRequest -> GetCurrentUserRequest: Probability = 1.00, Count = 1
Invoke<GetCurrentUserResponse> -> executeGetCurrentUser: Probability = 1.00, Count = 1
"ObjectDirectory[" -> "ObjectDirectory[": Probability = 1.00, Count = 1
IllegalFormatWidthException -> IllegalFormatWidthException: Probability = 1.00, Count = 1
this.w -> this.w: Probability = 1.00, Count = 1
ToToken -> toToken: Probability = 1.00, Count = 1
UpdatePhoneNumberResponse -> UpdatePhoneNumberResult: Probability = 1.00, Count = 1
UpdatePhoneNumber -> updatePhoneNumber: Probability = 1.00, Count = 1
UpdatePhoneNumberRequest -> UpdatePhoneNumberRequest: Probability = 1.00, Count = 1
Invoke<UpdatePhoneNumberResponse> -> executeUpdatePhoneNumber: Probability = 1.00, Count = 1
DisableDomainTransferLockResponse -> DisableDomainTransferLockResult: Probability = 1.00, Count = 1
DisableDomainTransferLock -> disableDomainTransferLock: Probability = 1.00, Count = 1
DisableDomainTransferLockRequest -> DisableDomainTransferLockRequest: Probability = 1.00, Count = 1
Invoke<DisableDomainTransferLockResponse> -> executeDisableDomainTransferLock: Probability = 1.00, Count = 1
UpdateDataSourceResponse -> UpdateDataSourceResult: Probability = 1.00, Count = 1
UpdateDataSource -> updateDataSource: Probability = 1.00, Count = 1
UpdateDataSourceRequest -> UpdateDataSourceRequest: Probability = 1.00, Count = 1
Invoke<UpdateDataSourceResponse> -> executeUpdateDataSource: Probability = 1.00, Count = 1
PopMode -> popMode: Probability = 1.00, Count = 1
_modeStack.Count -> _modeStack.isEmpty: Probability = 1.00, Count = 1
_modeStack.Pop -> _modeStack.peek: Probability = 1.00, Count = 1
localSheetIndex -> localSheetIndex: Probability = 0.83, Count = 5
localSheetIndex -> _iBook.getLastSheetIndexFromExternSheetIndex: Probability = 0.17, Count = 1
lastLocalSheetIndex -> lastLocalSheetIndex: Probability = 1.00, Count = 3
NGit.Notes.NoteMap -> NoteMap: Probability = 0.75, Count = 3
NGit.Notes.NoteMap -> newEmptyMap: Probability = 0.25, Count = 1
r.root -> r.root: Probability = 1.00, Count = 1
LeafBucket -> LeafBucket: Probability = 1.00, Count = 1
cache.ClearAll -> cache.clearAll: Probability = 1.00, Count = 1
bs[p -> bs[p: Probability = 1.00, Count = 4
MoPenDeleteGroupRequest -> MoPenDeleteGroupRequest: Probability = 1.00, Count = 1
"MoPenDeleteGroup", -> "MoPenDeleteGroup",: Probability = 1.00, Count = 1
ApplyResult -> ApplyResult: Probability = 0.50, Count = 1
ApplyResult -> addUpdatedFile: Probability = 0.50, Count = 1
updatedFiles.AddItem -> updatedFiles.add: Probability = 1.00, Count = 1
element, -> element,: Probability = 1.00, Count = 2
UpdateTop -> updateTop: Probability = 1.00, Count = 2
UploadDocumentsResponse -> UploadDocumentsResult: Probability = 1.00, Count = 1
UploadDocuments -> uploadDocuments: Probability = 1.00, Count = 1
UploadDocumentsRequest -> UploadDocumentsRequest: Probability = 1.00, Count = 1
Invoke<UploadDocumentsResponse> -> executeUploadDocuments: Probability = 1.00, Count = 1
legacyCredential.AccessKeyId -> legacyCredential.getAccessKeyId: Probability = 1.00, Count = 1
start.TokenIndex, -> stop.getTokenIndex: Probability = 1.00, Count = 1
ColumnVector -> ColumnVector: Probability = 1.00, Count = 1
AcceptDomainTransferFromAnotherAwsAccountResponse -> AcceptDomainTransferFromAnotherAwsAccountResult: Probability = 1.00, Count = 1
AcceptDomainTransferFromAnotherAwsAccount -> acceptDomainTransferFromAnotherAwsAccount: Probability = 1.00, Count = 1
AcceptDomainTransferFromAnotherAwsAccountRequest -> AcceptDomainTransferFromAnotherAwsAccountRequest: Probability = 1.00, Count = 1
Invoke<AcceptDomainTransferFromAnotherAwsAccountResponse> -> executeAcceptDomainTransferFromAnotherAwsAccount: Probability = 1.00, Count = 1
StartDeviceSyncResponse -> StartDeviceSyncResult: Probability = 1.00, Count = 1
StartDeviceSync -> startDeviceSync: Probability = 1.00, Count = 1
StartDeviceSyncRequest -> StartDeviceSyncRequest: Probability = 1.00, Count = 1
Invoke<StartDeviceSyncResponse> -> executeStartDeviceSync: Probability = 1.00, Count = 1
idealObjectArraySize -> idealObjectArraySize: Probability = 1.00, Count = 1
RemoveFromGlobalClusterResponse -> GlobalCluster: Probability = 1.00, Count = 1
RemoveFromGlobalCluster -> removeFromGlobalCluster: Probability = 1.00, Count = 1
RemoveFromGlobalClusterRequest -> RemoveFromGlobalClusterRequest: Probability = 1.00, Count = 1
Invoke<RemoveFromGlobalClusterResponse> -> executeRemoveFromGlobalCluster: Probability = 1.00, Count = 1
MergeResult<Sequence>> -> MergeResult<?: Probability = 0.50, Count = 1
MergeResult<Sequence>> -> extends: Probability = 0.50, Count = 1
GetMergeResults -> Sequence>>: Probability = 0.50, Count = 1
GetMergeResults -> getMergeResults: Probability = 0.50, Count = 1
mergeResults -> mergeResults: Probability = 1.00, Count = 1
tzHours -> parseTimeZoneOffset: Probability = 1.00, Count = 2
NewInstance -> newInstance: Probability = 1.00, Count = 1
NGit.Util.FS_Win32 -> FS_Win32: Probability = 1.00, Count = 1
byte[ptr] -> byte[ptr]: Probability = 1.00, Count = 1
relFirstRowIx, -> relFirstRowIx,: Probability = 1.00, Count = 2
relLastRowIx, -> relLastRowIx,: Probability = 0.50, Count = 4
relLastRowIx, -> relFirstColIx,: Probability = 0.50, Count = 4
relFirstColIx, -> relLastColIx: Probability = 0.67, Count = 4
relFirstColIx, -> ,relFirstRowIx,: Probability = 0.33, Count = 2
relLastColIx -> AreaI: Probability = 0.50, Count = 2
relLastColIx -> area: Probability = 0.50, Count = 2
area -> OffsetArea: Probability = 1.00, Count = 2
area, -> area,: Probability = 1.00, Count = 2
TerminateJobFlowsResponse -> TerminateJobFlowsResult: Probability = 1.00, Count = 1
TerminateJobFlows -> terminateJobFlows: Probability = 1.00, Count = 1
TerminateJobFlowsRequest -> TerminateJobFlowsRequest: Probability = 1.00, Count = 2
Invoke<TerminateJobFlowsResponse> -> executeTerminateJobFlows: Probability = 1.00, Count = 1
CreateTopicRequest -> CreateTopicRequest: Probability = 1.00, Count = 1
toFree -> freeBefore: Probability = 0.20, Count = 1
toFree -> toFree: Probability = 0.80, Count = 4
LengthFilter -> LengthFilter: Probability = 1.00, Count = 3
StandardQueryConfigHandler -> StandardQueryConfigHandler: Probability = 1.00, Count = 1
,new -> ,new: Probability = 0.67, Count = 2
,new -> StandardQueryNodeProcessorPipeline: Probability = 0.33, Count = 1
StandardQueryTreeBuilder -> StandardQueryTreeBuilder: Probability = 1.00, Count = 2
EnablePositionIncrements -> setEnablePositionIncrements: Probability = 1.00, Count = 1
GetUserSourceRepoRefListRequest -> GetUserSourceRepoRefListRequest: Probability = 1.00, Count = 1
"GetUserSourceRepoRefList", -> "GetUserSourceRepoRefList",: Probability = 1.00, Count = 1
"/users/sourceAccount/[SourceAccountId]/repos/[SourceRepoNamespace]/[SourceRepoName]/refs" -> "/users/sourceAccount/[SourceAccountId]/repos/[SourceRepoNamespace]/[SourceRepoName]/refs": Probability = 1.00, Count = 1
UpperCaseFilterFactory -> UpperCaseFilterFactory: Probability = 1.00, Count = 1
ListNotesCommand -> ListNotesCommand: Probability = 1.00, Count = 2
NotesList -> notesList: Probability = 1.00, Count = 1
IsMissingNewlineAtEnd -> isMissingNewlineAtEnd: Probability = 1.00, Count = 1
lines.Get -> lines.get: Probability = 1.00, Count = 1
lines.Size -> lines.size: Probability = 1.00, Count = 2
content[end -> content[end: Probability = 1.00, Count = 1
CreateDashboardResponse -> CreateDashboardResult: Probability = 1.00, Count = 1
CreateDashboard -> createDashboard: Probability = 1.00, Count = 1
CreateDashboardRequest -> CreateDashboardRequest: Probability = 1.00, Count = 1
Invoke<CreateDashboardResponse> -> executeCreateDashboard: Probability = 1.00, Count = 1
.ToCharArray -> .toCharArray: Probability = 1.00, Count = 1
UpdateNamespaceAuthorizationRequest -> UpdateNamespaceAuthorizationRequest: Probability = 1.00, Count = 1
"UpdateNamespaceAuthorization", -> "UpdateNamespaceAuthorization",: Probability = 1.00, Count = 1
DescribeStreamResponse -> DescribeStreamResult: Probability = 1.00, Count = 1
DescribeStream -> describeStream: Probability = 1.00, Count = 1
DescribeStreamRequest -> DescribeStreamRequest: Probability = 1.00, Count = 1
Invoke<DescribeStreamResponse> -> executeDescribeStream: Probability = 1.00, Count = 1
markLimit -> markLimit: Probability = 1.00, Count = 3
this.markLimit -> this.markLimit: Probability = 1.00, Count = 1
"channel -> "channel: Probability = 1.00, Count = 1
getName -> getName: Probability = 1.00, Count = 2
separatorIndex -> separatorIndex: Probability = 1.00, Count = 3
TestInvokeMethodResponse -> TestInvokeMethodResult: Probability = 1.00, Count = 1
TestInvokeMethod -> testInvokeMethod: Probability = 1.00, Count = 1
TestInvokeMethodRequest -> TestInvokeMethodRequest: Probability = 1.00, Count = 1
Invoke<TestInvokeMethodResponse> -> executeTestInvokeMethod: Probability = 1.00, Count = 1
GetCurrentState -> getCurrentState: Probability = 1.00, Count = 1
state.attribute.Clear -> state.attribute.clear: Probability = 1.00, Count = 1
ListRecipesResponse -> ListRecipesResult: Probability = 1.00, Count = 1
ListRecipes -> listRecipes: Probability = 1.00, Count = 1
ListRecipesRequest -> ListRecipesRequest: Probability = 1.00, Count = 1
Invoke<ListRecipesResponse> -> executeListRecipes: Probability = 1.00, Count = 1
conflictingPaths -> conflictingPaths: Probability = 0.50, Count = 2
conflictingPaths -> firstFooterLine: Probability = 0.50, Count = 2
conflictingPath -> firstFooterLine: Probability = 0.50, Count = 3
conflictingPath -> lines.length: Probability = 0.50, Count = 3
bits.SafeGet -> bits.get: Probability = 1.00, Count = 1
DescribeTaskSetsResponse -> DescribeTaskSetsResult: Probability = 1.00, Count = 1
DescribeTaskSets -> describeTaskSets: Probability = 1.00, Count = 1
DescribeTaskSetsRequest -> DescribeTaskSetsRequest: Probability = 1.00, Count = 1
Invoke<DescribeTaskSetsResponse> -> executeDescribeTaskSets: Probability = 1.00, Count = 1
PacketLineOutRefAdvertiser -> PacketLineOutRefAdvertiser: Probability = 1.00, Count = 1
PacketLineOut -> PacketLineOut: Probability = 1.00, Count = 2
pckOut -> pckOut: Probability = 1.00, Count = 1
UpdateDataSetResponse -> UpdateDataSetResult: Probability = 1.00, Count = 1
UpdateDataSet -> updateDataSet: Probability = 1.00, Count = 1
UpdateDataSetRequest -> UpdateDataSetRequest: Probability = 1.00, Count = 1
Invoke<UpdateDataSetResponse> -> executeUpdateDataSet: Probability = 1.00, Count = 1
ListKeyPhrasesDetectionJobsResponse -> ListKeyPhrasesDetectionJobsResult: Probability = 1.00, Count = 1
ListKeyPhrasesDetectionJobs -> listKeyPhrasesDetectionJobs: Probability = 1.00, Count = 1
ListKeyPhrasesDetectionJobsRequest -> ListKeyPhrasesDetectionJobsRequest: Probability = 1.00, Count = 1
Invoke<ListKeyPhrasesDetectionJobsResponse> -> executeListKeyPhrasesDetectionJobs: Probability = 1.00, Count = 1
snsTopic, -> sNSTopic,: Probability = 1.00, Count = 1
events -> events: Probability = 1.00, Count = 2
_snsTopic -> setSNSTopic: Probability = 1.00, Count = 1
snsTopic -> sNSTopic: Probability = 1.00, Count = 1
_events -> setEvents: Probability = 1.00, Count = 1
words, -> words,: Probability = 1.00, Count = 7
postags -> postags: Probability = 1.00, Count = 4
lemmas -> lemmas: Probability = 1.00, Count = 4
maxEntLemmas -> maxEntLemmas: Probability = 0.71, Count = 5
maxEntLemmas -> lemmatizerME.lemmatize: Probability = 0.29, Count = 2
maxEntLemmas[i] -> "_".equals: Probability = 0.33, Count = 2
maxEntLemmas[i] -> maxEntLemmas[i]: Probability = 0.67, Count = 4
lemmas[i] -> lemmas[i]: Probability = 1.00, Count = 3
words[i] -> words[i]: Probability = 1.00, Count = 3
field_1_numcolors -> field_1_numcolors: Probability = 1.00, Count = 3
ISigner -> ISigner: Probability = 1.00, Count = 1
I_RecordCreator -> I_RecordCreator: Probability = 1.00, Count = 1
_recordCreatorsById[ -> _recordCreatorsById.get: Probability = 1.00, Count = 1
rc.GetRecordClass -> rc.getRecordClass: Probability = 1.00, Count = 1
is16BitFlag -> is16BitFlag: Probability = 1.00, Count = 4
rawText -> rawText: Probability = 1.00, Count = 3
FontBasisRecord -> FontBasisRecord: Probability = 1.00, Count = 1
PathEdit -> PathEdit: Probability = 1.00, Count = 2
entryPath -> entryPath: Probability = 1.00, Count = 2
ResolveAliasResponse -> ResolveAliasResult: Probability = 1.00, Count = 1
ResolveAlias -> resolveAlias: Probability = 1.00, Count = 1
ResolveAliasRequest -> ResolveAliasRequest: Probability = 1.00, Count = 1
Invoke<ResolveAliasResponse> -> executeResolveAlias: Probability = 1.00, Count = 1
GreekStemFilter -> GreekStemFilter: Probability = 1.00, Count = 1
_le.ReadFully -> readPlain: Probability = 1.00, Count = 1
_rc4.Xor -> ccis.readFully: Probability = 1.00, Count = 1
DeleteDomainNameResponse -> DeleteDomainNameResult: Probability = 1.00, Count = 1
DeleteDomainName -> deleteDomainName: Probability = 1.00, Count = 1
DeleteDomainNameRequest -> DeleteDomainNameRequest: Probability = 1.00, Count = 1
Invoke<DeleteDomainNameResponse> -> executeDeleteDomainName: Probability = 1.00, Count = 1
DecreaseNodeGroupsInGlobalReplicationGroupResponse -> GlobalReplicationGroup: Probability = 1.00, Count = 1
DecreaseNodeGroupsInGlobalReplicationGroup -> decreaseNodeGroupsInGlobalReplicationGroup: Probability = 1.00, Count = 1
DecreaseNodeGroupsInGlobalReplicationGroupRequest -> DecreaseNodeGroupsInGlobalReplicationGroupRequest: Probability = 1.00, Count = 1
Invoke<DecreaseNodeGroupsInGlobalReplicationGroupResponse> -> executeDecreaseNodeGroupsInGlobalReplicationGroup: Probability = 1.00, Count = 1
selectExpression, -> selectExpression,: Probability = 0.50, Count = 1
selectExpression, -> Boolean: Probability = 0.50, Count = 1
consistentRead -> consistentRead: Probability = 1.00, Count = 2
_consistentRead -> setConsistentRead: Probability = 1.00, Count = 1
SetURI -> setURI: Probability = 1.00, Count = 1
PutRestApiResponse -> PutRestApiResult: Probability = 1.00, Count = 1
PutRestApi -> putRestApi: Probability = 1.00, Count = 1
PutRestApiRequest -> PutRestApiRequest: Probability = 1.00, Count = 1
Invoke<PutRestApiResponse> -> executePutRestApi: Probability = 1.00, Count = 1
Get3DReferencePtg -> get3DReferencePtg: Probability = 0.75, Count = 3
Get3DReferencePtg -> AreaReference: Probability = 0.25, Count = 1
extIx -> extIx: Probability = 0.86, Count = 6
extIx -> Area3DPtg: Probability = 0.14, Count = 1
CreateRequestValidatorResponse -> CreateRequestValidatorResult: Probability = 1.00, Count = 1
CreateRequestValidator -> createRequestValidator: Probability = 1.00, Count = 1
CreateRequestValidatorRequest -> CreateRequestValidatorRequest: Probability = 1.00, Count = 1
Invoke<CreateRequestValidatorResponse> -> executeCreateRequestValidator: Probability = 1.00, Count = 1
SetPackedGitWindowSize -> setPackedGitWindowSize: Probability = 1.00, Count = 1
DisassociateMembershipResponse -> DisassociateMembershipResult: Probability = 1.00, Count = 1
DisassociateMembership -> disassociateMembership: Probability = 1.00, Count = 1
DisassociateMembershipRequest -> DisassociateMembershipRequest: Probability = 1.00, Count = 1
Invoke<DisassociateMembershipResponse> -> executeDisassociateMembership: Probability = 1.00, Count = 1
br -> br: Probability = 0.83, Count = 5
br -> initMap: Probability = 0.17, Count = 1
synsetSize -> lastSynSetID: Probability = 0.18, Count = 3
synsetSize -> synsetSize: Probability = 0.29, Count = 5
synsetSize -> synSetID: Probability = 0.12, Count = 2
synsetSize -> addInternal: Probability = 0.12, Count = 2
synsetSize -> synset,: Probability = 0.18, Count = 3
synsetSize -> synset: Probability = 0.06, Count = 1
synsetSize -> synset[synsetSize]: Probability = 0.06, Count = 1
listImpl -> listImpl: Probability = 1.00, Count = 1
LongMap -> LongMap: Probability = 1.00, Count = 1
CreateArray<V> -> createArray: Probability = 1.00, Count = 1
growAt -> growAt: Probability = 1.00, Count = 1
table.Length -> table.length: Probability = 1.00, Count = 1
ClaimGameServerResponse -> ClaimGameServerResult: Probability = 1.00, Count = 1
ClaimGameServer -> claimGameServer: Probability = 1.00, Count = 1
ClaimGameServerRequest -> ClaimGameServerRequest: Probability = 1.00, Count = 1
Invoke<ClaimGameServerResponse> -> executeClaimGameServer: Probability = 1.00, Count = 1
vedenominator -> vedenominator: Probability = 1.00, Count = 2
enumerator -> enumerator: Probability = 0.75, Count = 3
enumerator -> venumerator: Probability = 0.25, Count = 1
denominator -> denominator: Probability = 1.00, Count = 6
Invoke<DescribeAutoScalingNotificationTypesResponse> -> executeDescribeAutoScalingNotificationTypes: Probability = 1.00, Count = 1
ScandinavianFoldingFilterFactory -> ScandinavianFoldingFilterFactory: Probability = 1.00, Count = 1
this.mParseState -> theContentHandler: Probability = 0.17, Count = 2
this.mParseState -> ?: Probability = 0.33, Count = 4
this.mParseState -> theErrorHandler: Probability = 0.17, Count = 2
this.mParseState -> theEntityResolver: Probability = 0.17, Count = 2
this.mParseState -> theDTDHandler: Probability = 0.17, Count = 2
this.mParseState.Dispose -> ==: Probability = 0.50, Count = 4
this.mParseState.Dispose -> this: Probability = 0.50, Count = 4
this.mBlock.decOpenCountLocked -> :: Probability = 1.00, Count = 4
ListAssessmentRunsResponse -> ListAssessmentRunsResult: Probability = 1.00, Count = 1
ListAssessmentRuns -> listAssessmentRuns: Probability = 1.00, Count = 1
ListAssessmentRunsRequest -> ListAssessmentRunsRequest: Probability = 1.00, Count = 1
Invoke<ListAssessmentRunsResponse> -> executeListAssessmentRuns: Probability = 1.00, Count = 1
DeleteAssessmentRunResponse -> DeleteAssessmentRunResult: Probability = 1.00, Count = 1
DeleteAssessmentRun -> deleteAssessmentRun: Probability = 1.00, Count = 1
DeleteAssessmentRunRequest -> DeleteAssessmentRunRequest: Probability = 1.00, Count = 1
Invoke<DeleteAssessmentRunResponse> -> executeDeleteAssessmentRun: Probability = 1.00, Count = 1
GetAppsResponse -> GetAppsResult: Probability = 1.00, Count = 1
GetApps -> getApps: Probability = 1.00, Count = 1
GetAppsRequest -> GetAppsRequest: Probability = 1.00, Count = 1
Invoke<GetAppsResponse> -> executeGetApps: Probability = 1.00, Count = 1
PendingTerm -> PendingTerm: Probability = 1.00, Count = 1
this.Term -> byte[term.length]: Probability = 0.25, Count = 1
this.Term -> term.bytes,: Probability = 0.25, Count = 1
this.Term -> term.offset,: Probability = 0.25, Count = 1
this.Term -> termBytes,: Probability = 0.25, Count = 1
this.State -> term.length: Probability = 1.00, Count = 1
AddParents -> addParents: Probability = 1.00, Count = 1
pList -> RevCommit[]: Probability = 0.11, Count = 1
pList -> pList: Probability = 0.22, Count = 2
pList -> c.parents: Probability = 0.11, Count = 1
pList -> i: Probability = 0.33, Count = 3
pList -> pList.length: Probability = 0.11, Count = 1
pList -> firstParent: Probability = 0.11, Count = 1
ListTasksResponse -> ListTasksResult: Probability = 1.00, Count = 1
ListTasks -> listTasks: Probability = 1.00, Count = 1
ListTasksRequest -> ListTasksRequest: Probability = 1.00, Count = 1
Invoke<ListTasksResponse> -> executeListTasks: Probability = 1.00, Count = 1
ListTemplateAliasesResponse -> ListTemplateAliasesResult: Probability = 1.00, Count = 1
ListTemplateAliases -> listTemplateAliases: Probability = 1.00, Count = 1
ListTemplateAliasesRequest -> ListTemplateAliasesRequest: Probability = 1.00, Count = 1
Invoke<ListTemplateAliasesResponse> -> executeListTemplateAliases: Probability = 1.00, Count = 1
createTempFile -> createTempFile: Probability = 1.00, Count = 2
CodepointCountFilter -> CodepointCountFilter: Probability = 1.00, Count = 2
res.Append -> task.getName: Probability = 0.06, Count = 1
res.Append -> res.append: Probability = 0.61, Count = 11
res.Append -> noBreak: Probability = 0.11, Count = 2
res.Append -> postBreak: Probability = 0.11, Count = 2
res.Append -> preBreak: Probability = 0.11, Count = 2
res.ToString -> res.toString: Probability = 1.00, Count = 3
SetAllowThin -> setAllowThin: Probability = 1.00, Count = 1
PhRun -> PhRun: Probability = 1.00, Count = 1
phoneticTextFirstCharacterOffset,int -> phoneticTextFirstCharacterOffset,int: Probability = 1.00, Count = 1
realTextFirstCharacterOffset, -> realTextFirstCharacterOffset,: Probability = 1.00, Count = 1
realTextLength -> realTextLength: Probability = 1.00, Count = 2
this.phoneticTextFirstCharacterOffset -> this.phoneticTextFirstCharacterOffset: Probability = 1.00, Count = 1
phoneticTextFirstCharacterOffset -> phoneticTextFirstCharacterOffset: Probability = 1.00, Count = 1
this.realTextFirstCharacterOffset -> this.realTextFirstCharacterOffset: Probability = 1.00, Count = 1
realTextFirstCharacterOffset -> realTextFirstCharacterOffset: Probability = 1.00, Count = 1
this.realTextLength -> this.realTextLength: Probability = 1.00, Count = 1
RevBlob -> RevBlob: Probability = 1.00, Count = 2
blob -> blob: Probability = 1.00, Count = 2
FileMode.REGULAR_FILE, -> REGULAR_FILE,: Probability = 1.00, Count = 1
CreateHostedZoneResponse -> CreateHostedZoneResult: Probability = 1.00, Count = 1
CreateHostedZone -> createHostedZone: Probability = 1.00, Count = 1
Invoke<CreateHostedZoneResponse> -> executeCreateHostedZone: Probability = 1.00, Count = 1
ListFacetAttributesResponse -> ListFacetAttributesResult: Probability = 1.00, Count = 1
ListFacetAttributes -> listFacetAttributes: Probability = 1.00, Count = 1
ListFacetAttributesRequest -> ListFacetAttributesRequest: Probability = 1.00, Count = 1
Invoke<ListFacetAttributesResponse> -> executeListFacetAttributes: Probability = 1.00, Count = 1
GetTrafficPolicyInstanceCountResponse -> GetTrafficPolicyInstanceCountResult: Probability = 1.00, Count = 1
GetTrafficPolicyInstanceCount -> getTrafficPolicyInstanceCount: Probability = 1.00, Count = 1
GetTrafficPolicyInstanceCountRequest -> GetTrafficPolicyInstanceCountRequest: Probability = 1.00, Count = 1
Invoke<GetTrafficPolicyInstanceCountResponse> -> executeGetTrafficPolicyInstanceCount: Probability = 1.00, Count = 1
ModifyTrafficMirrorSessionResponse -> ModifyTrafficMirrorSessionResult: Probability = 1.00, Count = 1
ModifyTrafficMirrorSession -> modifyTrafficMirrorSession: Probability = 1.00, Count = 1
ModifyTrafficMirrorSessionRequest -> ModifyTrafficMirrorSessionRequest: Probability = 1.00, Count = 1
Invoke<ModifyTrafficMirrorSessionResponse> -> executeModifyTrafficMirrorSession: Probability = 1.00, Count = 1
DescribeDefaultClusterParametersResponse -> DefaultClusterParameters: Probability = 1.00, Count = 1
DescribeDefaultClusterParameters -> describeDefaultClusterParameters: Probability = 1.00, Count = 1
DescribeDefaultClusterParametersRequest -> DescribeDefaultClusterParametersRequest: Probability = 1.00, Count = 1
Invoke<DescribeDefaultClusterParametersResponse> -> executeDescribeDefaultClusterParameters: Probability = 1.00, Count = 1
ConsoleWriter -> ConsoleWriter: Probability = 1.00, Count = 1
CONSOLE_LOCK -> CONSOLE_LOCK: Probability = 1.00, Count = 1
PatternTokenizerFactory -> PatternTokenizerFactory: Probability = 1.00, Count = 1
PATTERN -> PATTERN: Probability = 1.00, Count = 2
GROUP, -> GROUP,: Probability = 1.00, Count = 1
rule1,IConditionalFormattingRule -> rule1,ConditionalFormattingRule: Probability = 1.00, Count = 1
rule2 -> rule2: Probability = 0.80, Count = 4
rule2 -> rule1,HSSFConditionalFormattingRule: Probability = 0.20, Count = 1
rule1, -> rule1,: Probability = 1.00, Count = 2
this.point -> this.point: Probability = 1.00, Count = 1
ends.count -> ends.next: Probability = 1.00, Count = 1
starts.count -> starts.next: Probability = 1.00, Count = 1
BottomMarginRecord -> BottomMarginRecord: Probability = 1.00, Count = 2
RemoveFields -> removeFields: Probability = 1.00, Count = 1
fields.Count -> fields.iterator: Probability = 1.00, Count = 2
fields.Remove -> it.remove: Probability = 1.00, Count = 2
byteBuffer.putFloat -> byteBuffer.putFloat: Probability = 1.00, Count = 1
libcore.io.SizeOf.FLOAT, -> SizeOf.FLOAT,: Probability = 1.00, Count = 1
ExternalNameEval -> ExternalNameEval: Probability = 1.00, Count = 1
GetLoadBalancerMetricDataResponse -> GetLoadBalancerMetricDataResult: Probability = 1.00, Count = 1
GetLoadBalancerMetricData -> getLoadBalancerMetricData: Probability = 1.00, Count = 1
GetLoadBalancerMetricDataRequest -> GetLoadBalancerMetricDataRequest: Probability = 1.00, Count = 1
Invoke<GetLoadBalancerMetricDataResponse> -> executeGetLoadBalancerMetricData: Probability = 1.00, Count = 1
resultPath.GetPath -> resultPath.getPath: Probability = 1.00, Count = 1
RefComparator.Sort -> refs.asList: Probability = 1.00, Count = 1
GetStubHSSFWorkbook -> getStubHSSFWorkbook: Probability = 1.00, Count = 1
HSSFWorkbook.Create -> HSSFWorkbook.create: Probability = 1.00, Count = 1
boundSheetRecords -> boundSheetRecords: Probability = 1.00, Count = 2
wb.CreateSheet -> wb.createSheet: Probability = 0.50, Count = 1
wb.CreateSheet -> bsr.getSheetname: Probability = 0.50, Count = 1
CreateExternalReferences -> createExternalReferences: Probability = 1.00, Count = 1
MissingCellDummyRecord -> MissingCellDummyRecord: Probability = 1.00, Count = 1
this.column -> this.column: Probability = 1.00, Count = 1
TokenizerFactory -> TokenizerFactory: Probability = 1.00, Count = 1
TextProgressMonitor -> TextProgressMonitor: Probability = 1.00, Count = 1
this.write -> this.write: Probability = 1.00, Count = 1
newLeaf.GetPeeledObjectId -> peeledObjectId: Probability = 1.00, Count = 3
snapShot, -> snapShot,: Probability = 1.00, Count = 2
refList -> head: Probability = 0.50, Count = 3
refList -> HEAD: Probability = 0.33, Count = 2
refList -> head.getLeaf: Probability = 0.17, Count = 1
_ulrOutput.WriteLong -> _ulrOutput.writeLong: Probability = 1.00, Count = 1
UpdateSmsTemplateResponse -> UpdateSmsTemplateResult: Probability = 1.00, Count = 1
UpdateSmsTemplate -> updateSmsTemplate: Probability = 1.00, Count = 1
UpdateSmsTemplateRequest -> UpdateSmsTemplateRequest: Probability = 1.00, Count = 1
Invoke<UpdateSmsTemplateResponse> -> executeUpdateSmsTemplate: Probability = 1.00, Count = 1
DeletePlacementGroupResponse -> DeletePlacementGroupResult: Probability = 1.00, Count = 1
DeletePlacementGroup -> deletePlacementGroup: Probability = 1.00, Count = 1
Invoke<DeletePlacementGroupResponse> -> executeDeletePlacementGroup: Probability = 1.00, Count = 1
StartApplicationResponse -> StartApplicationResult: Probability = 1.00, Count = 1
StartApplication -> startApplication: Probability = 1.00, Count = 1
StartApplicationRequest -> StartApplicationRequest: Probability = 1.00, Count = 1
Invoke<StartApplicationResponse> -> executeStartApplication: Probability = 1.00, Count = 1
byteBuffer.getInt -> byteBuffer.getInt: Probability = 1.00, Count = 1
pollLastEntry -> pollLastEntry: Probability = 1.00, Count = 1
RebootRelationalDatabaseResponse -> RebootRelationalDatabaseResult: Probability = 1.00, Count = 1
RebootRelationalDatabase -> rebootRelationalDatabase: Probability = 1.00, Count = 1
RebootRelationalDatabaseRequest -> RebootRelationalDatabaseRequest: Probability = 1.00, Count = 1
Invoke<RebootRelationalDatabaseResponse> -> executeRebootRelationalDatabase: Probability = 1.00, Count = 1
BulkPublishResponse -> BulkPublishResult: Probability = 1.00, Count = 1
BulkPublish -> bulkPublish: Probability = 1.00, Count = 1
BulkPublishRequest -> BulkPublishRequest: Probability = 1.00, Count = 1
Invoke<BulkPublishResponse> -> executeBulkPublish: Probability = 1.00, Count = 1
"aliyun-net-sdk-" -> "aliyun-java-sdk-": Probability = 1.00, Count = 1
CompleteLifecycleActionResponse -> CompleteLifecycleActionResult: Probability = 1.00, Count = 1
CompleteLifecycleAction -> completeLifecycleAction: Probability = 1.00, Count = 1
CompleteLifecycleActionRequest -> CompleteLifecycleActionRequest: Probability = 1.00, Count = 1
Invoke<CompleteLifecycleActionResponse> -> executeCompleteLifecycleAction: Probability = 1.00, Count = 1
NGit.Storage.Pack.ObjectToPack -> ObjectToPack: Probability = 1.00, Count = 3
deltaBase -> deltaBase: Probability = 1.00, Count = 3
GetQueryExecutionResponse -> GetQueryExecutionResult: Probability = 1.00, Count = 1
GetQueryExecution -> getQueryExecution: Probability = 1.00, Count = 1
GetQueryExecutionRequest -> GetQueryExecutionRequest: Probability = 1.00, Count = 1
Invoke<GetQueryExecutionResponse> -> executeGetQueryExecution: Probability = 1.00, Count = 1
thisFont -> thisFont: Probability = 1.00, Count = 2
DescribeDominantLanguageDetectionJobResponse -> DescribeDominantLanguageDetectionJobResult: Probability = 1.00, Count = 1
DescribeDominantLanguageDetectionJob -> describeDominantLanguageDetectionJob: Probability = 1.00, Count = 1
DescribeDominantLanguageDetectionJobRequest -> DescribeDominantLanguageDetectionJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeDominantLanguageDetectionJobResponse> -> executeDescribeDominantLanguageDetectionJob: Probability = 1.00, Count = 1
SetOutputStream -> setOutputStream: Probability = 1.00, Count = 1
GetAllKnownRecordSIDs -> getAllKnownRecordSIDs: Probability = 1.00, Count = 1
_allKnownRecordSIDs -> _allKnownRecordSIDs: Probability = 1.00, Count = 2
results -> results: Probability = 0.43, Count = 3
results -> _recordCreatorsById.size: Probability = 0.14, Count = 1
results -> _recordCreatorsById.keySet: Probability = 0.14, Count = 1
results -> results[i++]: Probability = 0.14, Count = 1
results -> sid.shortValue: Probability = 0.14, Count = 1
_allKnownRecordSIDs.Clone -> _allKnownRecordSIDs.clone: Probability = 1.00, Count = 1
getCachedContext -> getCachedContext: Probability = 1.00, Count = 1
PredictionContext.IdentityHashMap -> IdentityHashMap<PredictionContext,: Probability = 0.40, Count = 2
PredictionContext.IdentityHashMap -> PredictionContext>: Probability = 0.40, Count = 2
PredictionContext.IdentityHashMap -> visited: Probability = 0.20, Count = 1
PredictionContext.GetCachedContext -> PredictionContext.getCachedContext: Probability = 1.00, Count = 1
context,sharedContextCache,visited -> context,sharedContextCache,visited: Probability = 1.00, Count = 1
CreateStageResponse -> CreateStageResult: Probability = 1.00, Count = 1
CreateStage -> createStage: Probability = 1.00, Count = 1
CreateStageRequest -> CreateStageRequest: Probability = 1.00, Count = 1
Invoke<CreateStageResponse> -> executeCreateStage: Probability = 1.00, Count = 1
NGit.Diff.EditList -> EditList: Probability = 0.75, Count = 3
NGit.Diff.EditList -> singleton: Probability = 0.25, Count = 1
edit -> edit: Probability = 1.00, Count = 2
ModifySnapshotScheduleResponse -> ModifySnapshotScheduleResult: Probability = 1.00, Count = 1
ModifySnapshotSchedule -> modifySnapshotSchedule: Probability = 1.00, Count = 1
ModifySnapshotScheduleRequest -> ModifySnapshotScheduleRequest: Probability = 1.00, Count = 1
Invoke<ModifySnapshotScheduleResponse> -> executeModifySnapshotSchedule: Probability = 1.00, Count = 1
.add -> .add: Probability = 1.00, Count = 1
removeLastOccurrence -> removeLastOccurrence: Probability = 1.00, Count = 1
removeOneOccurrence -> removeOneOccurrence: Probability = 1.00, Count = 1
SetHierarchical -> setHierarchical: Probability = 1.00, Count = 1
endInclusive -> endInclusive: Probability = 1.00, Count = 3
ContentSource -> ContentSource: Probability = 1.00, Count = 1
ContentSource.ObjectReaderSource -> ObjectReaderSource: Probability = 1.00, Count = 1
SetReuseDeltas -> setReuseDeltas: Probability = 1.00, Count = 1
this.reuseDeltas -> this.reuseDeltas: Probability = 1.00, Count = 1
ListSkillsStoreSkillsByCategoryResponse -> ListSkillsStoreSkillsByCategoryResult: Probability = 1.00, Count = 1
ListSkillsStoreSkillsByCategory -> listSkillsStoreSkillsByCategory: Probability = 1.00, Count = 1
ListSkillsStoreSkillsByCategoryRequest -> ListSkillsStoreSkillsByCategoryRequest: Probability = 1.00, Count = 1
Invoke<ListSkillsStoreSkillsByCategoryResponse> -> executeListSkillsStoreSkillsByCategory: Probability = 1.00, Count = 1
ModifyInstanceGroupsResponse -> ModifyInstanceGroupsResult: Probability = 1.00, Count = 1
ModifyInstanceGroups -> modifyInstanceGroups: Probability = 1.00, Count = 1
Invoke<ModifyInstanceGroupsResponse> -> executeModifyInstanceGroups: Probability = 1.00, Count = 1
DescribeDBInstanceAutomatedBackupsResponse -> DescribeDBInstanceAutomatedBackupsResult: Probability = 1.00, Count = 1
DescribeDBInstanceAutomatedBackups -> describeDBInstanceAutomatedBackups: Probability = 1.00, Count = 1
DescribeDBInstanceAutomatedBackupsRequest -> DescribeDBInstanceAutomatedBackupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBInstanceAutomatedBackupsResponse> -> executeDescribeDBInstanceAutomatedBackups: Probability = 1.00, Count = 1
PreviewAgentsResponse -> PreviewAgentsResult: Probability = 1.00, Count = 1
PreviewAgents -> previewAgents: Probability = 1.00, Count = 1
PreviewAgentsRequest -> PreviewAgentsRequest: Probability = 1.00, Count = 1
Invoke<PreviewAgentsResponse> -> executePreviewAgents: Probability = 1.00, Count = 1
QueryGroupUsersRequest -> QueryGroupUsersRequest: Probability = 1.00, Count = 1
"QueryGroupUsers" -> "QueryGroupUsers": Probability = 1.00, Count = 1
DescribeOptionGroupsResponse -> DescribeOptionGroupsResult: Probability = 1.00, Count = 1
DescribeOptionGroups -> describeOptionGroups: Probability = 1.00, Count = 1
DescribeOptionGroupsRequest -> DescribeOptionGroupsRequest: Probability = 1.00, Count = 1
Invoke<DescribeOptionGroupsResponse> -> executeDescribeOptionGroups: Probability = 1.00, Count = 1
UpdateGroupResponse -> UpdateGroupResult: Probability = 1.00, Count = 1
UpdateGroup -> updateGroup: Probability = 1.00, Count = 1
Invoke<UpdateGroupResponse> -> executeUpdateGroup: Probability = 1.00, Count = 1
UpdateSigningCertificateRequest -> UpdateSigningCertificateRequest: Probability = 1.00, Count = 1
CreateInstancesResponse -> CreateInstancesResult: Probability = 1.00, Count = 1
CreateInstances -> createInstances: Probability = 1.00, Count = 1
CreateInstancesRequest -> CreateInstancesRequest: Probability = 1.00, Count = 1
Invoke<CreateInstancesResponse> -> executeCreateInstances: Probability = 1.00, Count = 1
GetRecordSizeForBlockCount -> getRecordSizeForBlockCount: Probability = 1.00, Count = 1
StopStreamEncryptionResponse -> StopStreamEncryptionResult: Probability = 1.00, Count = 1
StopStreamEncryption -> stopStreamEncryption: Probability = 1.00, Count = 1
StopStreamEncryptionRequest -> StopStreamEncryptionRequest: Probability = 1.00, Count = 1
Invoke<StopStreamEncryptionResponse> -> executeStopStreamEncryption: Probability = 1.00, Count = 1
GetPredictionResponse -> GetPredictionResult: Probability = 1.00, Count = 1
GetPrediction -> getPrediction: Probability = 1.00, Count = 1
GetPredictionRequest -> GetPredictionRequest: Probability = 1.00, Count = 1
Invoke<GetPredictionResponse> -> executeGetPrediction: Probability = 1.00, Count = 1
ModifyWorkspacePropertiesResponse -> ModifyWorkspacePropertiesResult: Probability = 1.00, Count = 1
ModifyWorkspaceProperties -> modifyWorkspaceProperties: Probability = 1.00, Count = 1
ModifyWorkspacePropertiesRequest -> ModifyWorkspacePropertiesRequest: Probability = 1.00, Count = 1
Invoke<ModifyWorkspacePropertiesResponse> -> executeModifyWorkspaceProperties: Probability = 1.00, Count = 1
other2.BlockFilePointer -> other.blockFilePointer: Probability = 1.00, Count = 1
Inflater -> Inflater: Probability = 1.00, Count = 4
i.Reset -> i.reset: Probability = 1.00, Count = 1
ReleaseImpl -> releaseImpl: Probability = 1.00, Count = 1
i.Finish -> i.end: Probability = 1.00, Count = 1
EnumSet<RevSort> -> EnumSet<RevSort>: Probability = 1.00, Count = 1
GetRevSort -> getRevSort: Probability = 1.00, Count = 1
sorting.Clone -> sorting.clone: Probability = 1.00, Count = 1
RemoveFetchRefSpec -> removeFetchRefSpec: Probability = 1.00, Count = 1
fetch.Remove -> fetch.remove: Probability = 1.00, Count = 1
GetRate -> getRate: Probability = 1.00, Count = 1
DeleteNodeResponse -> DeleteNodeResult: Probability = 1.00, Count = 1
DeleteNodeRequest -> DeleteNodeRequest: Probability = 1.00, Count = 1
Invoke<DeleteNodeResponse> -> executeDeleteNode: Probability = 1.00, Count = 1
java.util.concurrent.CopyOnWriteArrayList<E>.CowSubList -> CowSubList: Probability = 1.00, Count = 2
RebootClusterResponse -> Cluster: Probability = 1.00, Count = 1
RebootCluster -> rebootCluster: Probability = 1.00, Count = 1
RebootClusterRequest -> RebootClusterRequest: Probability = 1.00, Count = 1
Invoke<RebootClusterResponse> -> executeRebootCluster: Probability = 1.00, Count = 1
SetBorder -> setBorder: Probability = 1.00, Count = 1
border.SetShortBoolean -> border.setShortBoolean: Probability = 1.00, Count = 1
DescribeExportTasksResponse -> DescribeExportTasksResult: Probability = 1.00, Count = 1
DescribeExportTasks -> describeExportTasks: Probability = 1.00, Count = 1
DescribeExportTasksRequest -> DescribeExportTasksRequest: Probability = 1.00, Count = 1
Invoke<DescribeExportTasksResponse> -> executeDescribeExportTasks: Probability = 1.00, Count = 1
GetPreferredAuthentications -> getPreferredAuthentications: Probability = 1.00, Count = 1
preferredAuthentications -> preferredAuthentications: Probability = 1.00, Count = 1
ListPartnerEventSourcesResponse -> ListPartnerEventSourcesResult: Probability = 1.00, Count = 1
ListPartnerEventSources -> listPartnerEventSources: Probability = 1.00, Count = 1
ListPartnerEventSourcesRequest -> ListPartnerEventSourcesRequest: Probability = 1.00, Count = 1
Invoke<ListPartnerEventSourcesResponse> -> executeListPartnerEventSources: Probability = 1.00, Count = 1
ListRegisteredTagsRequest -> ListRegisteredTagsRequest: Probability = 1.00, Count = 1
"ListRegisteredTags", -> "ListRegisteredTags",: Probability = 1.00, Count = 1
DeleteDBSubnetGroupResponse -> DeleteDBSubnetGroupResult: Probability = 1.00, Count = 1
DeleteDBSubnetGroup -> deleteDBSubnetGroup: Probability = 1.00, Count = 1
DeleteDBSubnetGroupRequest -> DeleteDBSubnetGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteDBSubnetGroupResponse> -> executeDeleteDBSubnetGroup: Probability = 1.00, Count = 1
outputStream -> outputStream: Probability = 1.00, Count = 2
lenbuffer -> lenbuffer: Probability = 1.00, Count = 1
byte[5] -> byte[5]: Probability = 1.00, Count = 1
flushOnEnd -> flushOnEnd: Probability = 1.00, Count = 3
AppendDebugInfo -> appendDebugInfo: Probability = 1.00, Count = 1
_isxvi -> _isxvi: Probability = 1.00, Count = 2
_isxvd -> _isxvd: Probability = 1.00, Count = 2
_idObj -> _idObj: Probability = 1.00, Count = 2
match, -> match,: Probability = 1.00, Count = 3
pendingPairs[match] -> pendingPairs.put: Probability = 1.00, Count = 1
a.parents -> a.parents: Probability = 1.00, Count = 1
totalLength -> totalLength: Probability = 1.00, Count = 2
arrays -> arrays: Probability = 1.00, Count = 2
concatenated -> concatenated: Probability = 1.00, Count = 2
destPos -> destPos: Probability = 1.00, Count = 2
field_1_seriesNumbers[i] -> field_1_seriesNumbers[i]: Probability = 1.00, Count = 1
RemovePushURI -> removePushURI: Probability = 1.00, Count = 1
pushURIs.Remove -> pushURIs.remove: Probability = 1.00, Count = 1
BytesRef[] -> BytesRef[]: Probability = 1.00, Count = 1
GetBinaryValues -> getBinaryValues: Probability = 1.00, Count = 1
childRecord -> childRecord: Probability = 1.00, Count = 2
ChildRecords.Add -> getChildRecords: Probability = 0.50, Count = 2
ChildRecords.Add -> .add: Probability = 0.50, Count = 2
DeleteExpressionResponse -> DeleteExpressionResult: Probability = 1.00, Count = 1
DeleteExpression -> deleteExpression: Probability = 1.00, Count = 1
DeleteExpressionRequest -> DeleteExpressionRequest: Probability = 1.00, Count = 1
Invoke<DeleteExpressionResponse> -> executeDeleteExpression: Probability = 1.00, Count = 1
ReorderReceiptRuleSetResponse -> ReorderReceiptRuleSetResult: Probability = 1.00, Count = 1
ReorderReceiptRuleSet -> reorderReceiptRuleSet: Probability = 1.00, Count = 1
ReorderReceiptRuleSetRequest -> ReorderReceiptRuleSetRequest: Probability = 1.00, Count = 1
Invoke<ReorderReceiptRuleSetResponse> -> executeReorderReceiptRuleSet: Probability = 1.00, Count = 1
PutVoiceConnectorProxyResponse -> PutVoiceConnectorProxyResult: Probability = 1.00, Count = 1
PutVoiceConnectorProxy -> putVoiceConnectorProxy: Probability = 1.00, Count = 1
PutVoiceConnectorProxyRequest -> PutVoiceConnectorProxyRequest: Probability = 1.00, Count = 1
Invoke<PutVoiceConnectorProxyResponse> -> executePutVoiceConnectorProxy: Probability = 1.00, Count = 1
DescribeDataSourcePermissionsResponse -> DescribeDataSourcePermissionsResult: Probability = 1.00, Count = 1
DescribeDataSourcePermissions -> describeDataSourcePermissions: Probability = 1.00, Count = 1
DescribeDataSourcePermissionsRequest -> DescribeDataSourcePermissionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDataSourcePermissionsResponse> -> executeDescribeDataSourcePermissions: Probability = 1.00, Count = 1
request.ExclusiveStartTableName -> .withExclusiveStartTableName: Probability = 1.00, Count = 2
TokenString -> readerIndex=": Probability = 0.50, Count = 1
TokenString -> readerIndex: Probability = 0.50, Count = 1
LEAF_BYTE -> +: Probability = 0.50, Count = 5
LEAF_BYTE -> ": Probability = 0.40, Count = 4
LEAF_BYTE -> index.isLeafNode: Probability = 0.10, Count = 1
DescribeImageBuildersResponse -> DescribeImageBuildersResult: Probability = 1.00, Count = 1
DescribeImageBuilders -> describeImageBuilders: Probability = 1.00, Count = 1
DescribeImageBuildersRequest -> DescribeImageBuildersRequest: Probability = 1.00, Count = 1
Invoke<DescribeImageBuildersResponse> -> executeDescribeImageBuilders: Probability = 1.00, Count = 1
DescribeMountTargetsResponse -> DescribeMountTargetsResult: Probability = 1.00, Count = 1
DescribeMountTargets -> describeMountTargets: Probability = 1.00, Count = 1
DescribeMountTargetsRequest -> DescribeMountTargetsRequest: Probability = 1.00, Count = 1
Invoke<DescribeMountTargetsResponse> -> executeDescribeMountTargets: Probability = 1.00, Count = 1
UpdateClientCertificateResponse -> UpdateClientCertificateResult: Probability = 1.00, Count = 1
UpdateClientCertificate -> updateClientCertificate: Probability = 1.00, Count = 1
UpdateClientCertificateRequest -> UpdateClientCertificateRequest: Probability = 1.00, Count = 1
Invoke<UpdateClientCertificateResponse> -> executeUpdateClientCertificate: Probability = 1.00, Count = 1
GetFormatIndex -> getFormatIndex: Probability = 1.00, Count = 3
TurkishStemmer -> TurkishStemmer: Probability = 1.00, Count = 1
ListPublicKeysResponse -> ListPublicKeysResult: Probability = 1.00, Count = 1
ListPublicKeys -> listPublicKeys: Probability = 1.00, Count = 1
ListPublicKeysRequest -> ListPublicKeysRequest: Probability = 1.00, Count = 1
Invoke<ListPublicKeysResponse> -> executeListPublicKeys: Probability = 1.00, Count = 1
CreateDhcpOptionsResponse -> CreateDhcpOptionsResult: Probability = 1.00, Count = 1
CreateDhcpOptions -> createDhcpOptions: Probability = 1.00, Count = 1
Invoke<CreateDhcpOptionsResponse> -> executeCreateDhcpOptions: Probability = 1.00, Count = 1
ASCIIFoldingFilter -> ASCIIFoldingFilter: Probability = 1.00, Count = 2
BlockList -> BlockList: Probability = 1.00, Count = 1
dirSize -> dirSize: Probability = 0.43, Count = 3
dirSize -> BLOCK_MASK: Probability = 0.14, Count = 1
dirSize -> dirSize++: Probability = 0.14, Count = 1
dirSize -> BlockList.<T>: Probability = 0.14, Count = 1
dirSize -> newDirectory: Probability = 0.14, Count = 1
directory[0] -> directory[0]: Probability = 0.60, Count = 3
directory[0] -> BlockList.<T>: Probability = 0.20, Count = 1
directory[0] -> newBlock: Probability = 0.20, Count = 1
tailBlock -> tailBlock: Probability = 1.00, Count = 2
DeleteEndpointConfigResponse -> DeleteEndpointConfigResult: Probability = 1.00, Count = 1
DeleteEndpointConfig -> deleteEndpointConfig: Probability = 1.00, Count = 1
DeleteEndpointConfigRequest -> DeleteEndpointConfigRequest: Probability = 1.00, Count = 1
Invoke<DeleteEndpointConfigResponse> -> executeDeleteEndpointConfig: Probability = 1.00, Count = 1
FindSheetFirstNameFromExternSheet -> findSheetFirstNameFromExternSheet: Probability = 1.00, Count = 1
linkTable.GetFirstInternalSheetIndexForExtIndex -> linkTable.getFirstInternalSheetIndexForExtIndex: Probability = 1.00, Count = 1
SetChild -> setChild: Probability = 1.00, Count = 1
List<IQueryNode> -> List<QueryNode>: Probability = 1.00, Count = 1
SetDateResolution -> setDateResolution: Probability = 0.50, Count = 1
SetDateResolution -> DateTools.Resolution: Probability = 0.50, Count = 1
dateResolution -> dateResolution: Probability = 1.00, Count = 2
ListLogPatternsResponse -> ListLogPatternsResult: Probability = 1.00, Count = 1
ListLogPatterns -> listLogPatterns: Probability = 1.00, Count = 1
ListLogPatternsRequest -> ListLogPatternsRequest: Probability = 1.00, Count = 1
Invoke<ListLogPatternsResponse> -> executeListLogPatterns: Probability = 1.00, Count = 1
BatchDeleteImageResponse -> BatchDeleteImageResult: Probability = 1.00, Count = 1
BatchDeleteImage -> batchDeleteImage: Probability = 1.00, Count = 1
BatchDeleteImageRequest -> BatchDeleteImageRequest: Probability = 1.00, Count = 1
Invoke<BatchDeleteImageResponse> -> executeBatchDeleteImage: Probability = 1.00, Count = 1
RightMarginRecord -> RightMarginRecord: Probability = 1.00, Count = 2
isAutoDetecting -> isAutoDetecting: Probability = 1.00, Count = 1
RestorePhoneNumberResponse -> RestorePhoneNumberResult: Probability = 1.00, Count = 1
RestorePhoneNumber -> restorePhoneNumber: Probability = 1.00, Count = 1
RestorePhoneNumberRequest -> RestorePhoneNumberRequest: Probability = 1.00, Count = 1
Invoke<RestorePhoneNumberResponse> -> executeRestorePhoneNumber: Probability = 1.00, Count = 1
TestRenderTemplateResponse -> TestRenderTemplateResult: Probability = 1.00, Count = 1
TestRenderTemplate -> testRenderTemplate: Probability = 1.00, Count = 1
TestRenderTemplateRequest -> TestRenderTemplateRequest: Probability = 1.00, Count = 1
Invoke<TestRenderTemplateResponse> -> executeTestRenderTemplate: Probability = 1.00, Count = 1
unSafeParser -> unSafeParser: Probability = 1.00, Count = 2
CreateNetworkAclResponse -> CreateNetworkAclResult: Probability = 1.00, Count = 1
CreateNetworkAcl -> createNetworkAcl: Probability = 1.00, Count = 1
CreateNetworkAclRequest -> CreateNetworkAclRequest: Probability = 1.00, Count = 1
Invoke<CreateNetworkAclResponse> -> executeCreateNetworkAcl: Probability = 1.00, Count = 1
BufferedWriter -> BufferedWriter: Probability = 1.00, Count = 1
ListConfigurationHistoryResponse -> ListConfigurationHistoryResult: Probability = 1.00, Count = 1
ListConfigurationHistory -> listConfigurationHistory: Probability = 1.00, Count = 1
ListConfigurationHistoryRequest -> ListConfigurationHistoryRequest: Probability = 1.00, Count = 1
Invoke<ListConfigurationHistoryResponse> -> executeListConfigurationHistory: Probability = 1.00, Count = 1
publicRequest -> getChangeRequest: Probability = 1.00, Count = 2
ModifyInstanceCreditSpecificationResponse -> ModifyInstanceCreditSpecificationResult: Probability = 1.00, Count = 1
ModifyInstanceCreditSpecification -> modifyInstanceCreditSpecification: Probability = 1.00, Count = 1
ModifyInstanceCreditSpecificationRequest -> ModifyInstanceCreditSpecificationRequest: Probability = 1.00, Count = 1
Invoke<ModifyInstanceCreditSpecificationResponse> -> executeModifyInstanceCreditSpecification: Probability = 1.00, Count = 1
b.Unpop -> b.unpop: Probability = 1.00, Count = 1
NewSpanTermQuery -> newSpanTermQuery: Probability = 1.00, Count = 1
GetDomainStatisticsReportResponse -> GetDomainStatisticsReportResult: Probability = 1.00, Count = 1
GetDomainStatisticsReport -> getDomainStatisticsReport: Probability = 1.00, Count = 1
GetDomainStatisticsReportRequest -> GetDomainStatisticsReportRequest: Probability = 1.00, Count = 1
Invoke<GetDomainStatisticsReportResponse> -> executeGetDomainStatisticsReport: Probability = 1.00, Count = 1
other.upperTerm -> other.upperTerm: Probability = 1.00, Count = 2
DescribeTransitGatewayRouteTablesResponse -> DescribeTransitGatewayRouteTablesResult: Probability = 1.00, Count = 1
DescribeTransitGatewayRouteTables -> describeTransitGatewayRouteTables: Probability = 1.00, Count = 1
DescribeTransitGatewayRouteTablesRequest -> DescribeTransitGatewayRouteTablesRequest: Probability = 1.00, Count = 1
Invoke<DescribeTransitGatewayRouteTablesResponse> -> executeDescribeTransitGatewayRouteTables: Probability = 1.00, Count = 1
args.Add -> args.add: Probability = 0.44, Count = 11
args.Add -> reducer: Probability = 0.12, Count = 3
args.Add -> hadoopConfig.entrySet: Probability = 0.04, Count = 1
args.Add -> "-D": Probability = 0.04, Count = 1
args.Add -> inputs: Probability = 0.04, Count = 1
args.Add -> "-input": Probability = 0.04, Count = 1
args.Add -> "-output": Probability = 0.04, Count = 1
args.Add -> mapper: Probability = 0.08, Count = 2
args.Add -> "-mapper": Probability = 0.04, Count = 1
args.Add -> "-reducer": Probability = 0.04, Count = 1
args.Add -> .withJar: Probability = 0.04, Count = 1
args.Add -> "/home/hadoop/contrib/streaming/hadoop-streaming.jar": Probability = 0.04, Count = 1
"--replace" -> "--replace": Probability = 1.00, Count = 1
Daemons",ScriptBootstrapAction -> Daemons": Probability = 1.00, Count = 1
decoder -> isLegalReplacement: Probability = 0.25, Count = 1
decoder -> decoder: Probability = 0.50, Count = 2
decoder -> cs.newDecoder: Probability = 0.25, Count = 1
java.nio.charset.CodingErrorAction.REPORT -> CodingErrorAction.REPORT: Probability = 0.67, Count = 2
java.nio.charset.CodingErrorAction.REPORT -> decoder.onUnmappableCharacter: Probability = 0.33, Count = 1
UpdatePipelineResponse -> UpdatePipelineResult: Probability = 1.00, Count = 1
UpdatePipeline -> updatePipeline: Probability = 1.00, Count = 1
UpdatePipelineRequest -> UpdatePipelineRequest: Probability = 1.00, Count = 1
Invoke<UpdatePipelineResponse> -> executeUpdatePipeline: Probability = 1.00, Count = 1
IsAboveMinRep -> isAboveMinRep: Probability = 1.00, Count = 1
BI_MIN_BASE.ShiftLeft -> BI_MIN_BASE.shiftLeft: Probability = 1.00, Count = 1
AssociateContactWithAddressBookResponse -> AssociateContactWithAddressBookResult: Probability = 1.00, Count = 1
AssociateContactWithAddressBook -> associateContactWithAddressBook: Probability = 1.00, Count = 1
AssociateContactWithAddressBookRequest -> AssociateContactWithAddressBookRequest: Probability = 1.00, Count = 1
Invoke<AssociateContactWithAddressBookResponse> -> executeAssociateContactWithAddressBook: Probability = 1.00, Count = 1
DeleteFolderResponse -> DeleteFolderResult: Probability = 1.00, Count = 1
DeleteFolder -> deleteFolder: Probability = 1.00, Count = 1
DeleteFolderRequest -> DeleteFolderRequest: Probability = 1.00, Count = 1
Invoke<DeleteFolderResponse> -> executeDeleteFolder: Probability = 1.00, Count = 1
DescribeJobFlowsResponse -> DescribeJobFlowsResult: Probability = 1.00, Count = 2
DescribeJobFlows -> describeJobFlows: Probability = 1.00, Count = 3
DescribeJobFlowsRequest -> DescribeJobFlowsRequest: Probability = 1.00, Count = 3
DescribePublishingDestinationResponse -> DescribePublishingDestinationResult: Probability = 1.00, Count = 1
DescribePublishingDestination -> describePublishingDestination: Probability = 1.00, Count = 1
DescribePublishingDestinationRequest -> DescribePublishingDestinationRequest: Probability = 1.00, Count = 1
Invoke<DescribePublishingDestinationResponse> -> executeDescribePublishingDestination: Probability = 1.00, Count = 1
GetLeftId -> getLeftId: Probability = 1.00, Count = 1
LEFT_ID -> LEFT_ID: Probability = 1.00, Count = 1
pow10 -> pow10: Probability = 1.00, Count = 7
cc.multiplyByPowerOfTen -> cc.multiplyByPowerOfTen: Probability = 1.00, Count = 2
cc.Normalise64bit -> cc.normalise64bit: Probability = 1.00, Count = 2
"DoubleRange -> "DoubleRange: Probability = 1.00, Count = 1
destination.SetRefLogIdent -> destination.setRefLogIdent: Probability = 1.00, Count = 1
YyBegin -> yybegin: Probability = 1.00, Count = 1
newState -> newState: Probability = 1.00, Count = 2
zzLexicalState -> zzLexicalState: Probability = 1.00, Count = 3
this.forward -> this.forward: Probability = 1.00, Count = 1
resources -> resources: Probability = 1.00, Count = 2
_resources -> setResources: Probability = 1.00, Count = 1
pName, -> pName,: Probability = 1.00, Count = 1
numArgs -> numArgs: Probability = 1.00, Count = 1
numArgs, -> numArgs,: Probability = 1.00, Count = 1
LookupIndex -> lookupIndex: Probability = 1.00, Count = 1
pName -> pName: Probability = 1.00, Count = 1
this.processors.Clear -> this.processors.clear: Probability = 1.00, Count = 1
NullReader -> NullReader: Probability = 1.00, Count = 1
CreateVaultResponse -> CreateVaultResult: Probability = 1.00, Count = 1
CreateVault -> createVault: Probability = 1.00, Count = 1
Invoke<CreateVaultResponse> -> executeCreateVault: Probability = 1.00, Count = 1
DeleteDeploymentResponse -> DeleteDeploymentResult: Probability = 1.00, Count = 1
DeleteDeployment -> deleteDeployment: Probability = 1.00, Count = 1
DeleteDeploymentRequest -> DeleteDeploymentRequest: Probability = 1.00, Count = 1
Invoke<DeleteDeploymentResponse> -> executeDeleteDeployment: Probability = 1.00, Count = 1
VectorValueSource -> VectorValueSource: Probability = 1.00, Count = 1
this.parent -> this.parent: Probability = 1.00, Count = 2
_escherContainer.GetChildById -> _escherContainer.getChildById: Probability = 1.00, Count = 1
_objRecord -> _objRecord: Probability = 1.00, Count = 1
CreateObjRecord -> createObjRecord: Probability = 1.00, Count = 1
GalicianMinimalStemFilterFactory -> GalicianMinimalStemFilterFactory: Probability = 1.00, Count = 1
DescribeFpgaImageAttributeResponse -> DescribeFpgaImageAttributeResult: Probability = 1.00, Count = 1
DescribeFpgaImageAttribute -> describeFpgaImageAttribute: Probability = 1.00, Count = 1
DescribeFpgaImageAttributeRequest -> DescribeFpgaImageAttributeRequest: Probability = 1.00, Count = 1
Invoke<DescribeFpgaImageAttributeResponse> -> executeDescribeFpgaImageAttribute: Probability = 1.00, Count = 1
ValueFiller -> ValueFiller: Probability = 1.00, Count = 2
GetValueFiller -> getValueFiller: Probability = 1.00, Count = 2
ValueFillerAnonymousInnerClassHelper -> ValueFiller: Probability = 1.00, Count = 2
value.GetHashCode -> value.hashCode: Probability = 1.00, Count = 1
DescribeModelVersionsResponse -> DescribeModelVersionsResult: Probability = 1.00, Count = 1
DescribeModelVersions -> describeModelVersions: Probability = 1.00, Count = 1
DescribeModelVersionsRequest -> DescribeModelVersionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeModelVersionsResponse> -> executeDescribeModelVersions: Probability = 1.00, Count = 1
ic -> ic: Probability = 1.00, Count = 2
ud -> ic.getUserData: Probability = 0.17, Count = 1
ud -> ud: Probability = 0.50, Count = 3
ud -> USER_DATA: Probability = 0.17, Count = 1
ud -> ud.equals: Probability = 0.17, Count = 1
FST<long?> -> FST<Long>: Probability = 1.00, Count = 1
fstEnum -> fstEnum: Probability = 1.00, Count = 1
BytesRefFSTEnum<long?> -> BytesRefFSTEnum<>: Probability = 1.00, Count = 1
hs -> hs: Probability = 1.00, Count = 2
_hs -> _hs: Probability = 1.00, Count = 1
PutPartnerEventsResponse -> PutPartnerEventsResult: Probability = 1.00, Count = 1
PutPartnerEvents -> putPartnerEvents: Probability = 1.00, Count = 1
PutPartnerEventsRequest -> PutPartnerEventsRequest: Probability = 1.00, Count = 1
Invoke<PutPartnerEventsResponse> -> executePutPartnerEvents: Probability = 1.00, Count = 1
IsThin -> isThin: Probability = 1.00, Count = 1
thin -> thin: Probability = 1.00, Count = 1
db.GetConfig -> db.getConfig: Probability = 1.00, Count = 1
SetDeltaCompress -> setDeltaCompress: Probability = 1.00, Count = 2
deltaCompress -> deltaCompress: Probability = 1.00, Count = 3
this.deltaCompress -> this.deltaCompress: Probability = 1.00, Count = 1
ListTrafficPolicyInstancesByHostedZoneResponse -> ListTrafficPolicyInstancesByHostedZoneResult: Probability = 1.00, Count = 1
ListTrafficPolicyInstancesByHostedZone -> listTrafficPolicyInstancesByHostedZone: Probability = 1.00, Count = 1
ListTrafficPolicyInstancesByHostedZoneRequest -> ListTrafficPolicyInstancesByHostedZoneRequest: Probability = 1.00, Count = 1
Invoke<ListTrafficPolicyInstancesByHostedZoneResponse> -> executeListTrafficPolicyInstancesByHostedZone: Probability = 1.00, Count = 1
FindFirstWithId -> findFirstWithId: Probability = 1.00, Count = 2
EscherRecords -> getEscherRecords: Probability = 1.00, Count = 1
GetEntryPathBuffer -> getEntryPathBuffer: Probability = 1.00, Count = 1
SetFont -> setFont: Probability = 1.00, Count = 1
hasAnchoringBounds -> hasAnchoringBounds: Probability = 1.00, Count = 1
.GetAccessKeyId -> .getAccessKeyId: Probability = 1.00, Count = 1
PutDedicatedIpWarmupAttributesResponse -> PutDedicatedIpWarmupAttributesResult: Probability = 1.00, Count = 1
PutDedicatedIpWarmupAttributes -> putDedicatedIpWarmupAttributes: Probability = 1.00, Count = 1
PutDedicatedIpWarmupAttributesRequest -> PutDedicatedIpWarmupAttributesRequest: Probability = 1.00, Count = 1
Invoke<PutDedicatedIpWarmupAttributesResponse> -> executePutDedicatedIpWarmupAttributes: Probability = 1.00, Count = 1
CompareFacesResponse -> CompareFacesResult: Probability = 1.00, Count = 1
CompareFaces -> compareFaces: Probability = 1.00, Count = 1
CompareFacesRequest -> CompareFacesRequest: Probability = 1.00, Count = 1
Invoke<CompareFacesResponse> -> executeCompareFaces: Probability = 1.00, Count = 1
PatchFormatException -> PatchFormatException: Probability = 1.00, Count = 1
IList<FormatError> -> List<FormatError>: Probability = 1.00, Count = 2
.patchFormatException, -> .patchFormatException,: Probability = 1.00, Count = 1
this.errors -> this.errors: Probability = 1.00, Count = 1
FormatTrailer -> formatTrailer: Probability = 1.00, Count = 1
YyReset -> yyreset: Probability = 1.00, Count = 2
zzReader -> zzReader: Probability = 1.00, Count = 2
zzAtBOL -> zzAtBOL: Probability = 1.00, Count = 2
zzAtEOF -> zzAtEOF: Probability = 1.00, Count = 2
zzEOFDone -> =: Probability = 1.00, Count = 4
zzEndRead -> =: Probability = 1.00, Count = 4
zzCurrentPos -> =: Probability = 1.00, Count = 4
yyline -> =: Probability = 1.00, Count = 2
yycolumn -> =: Probability = 1.00, Count = 6
YYINITIAL -> YYINITIAL: Probability = 1.00, Count = 2
ZZ_BUFFERSIZE -> zzBuffer.length: Probability = 1.00, Count = 1
zzBuffer -> ZZ_BUFFERSIZE: Probability = 0.50, Count = 2
zzBuffer -> zzBuffer: Probability = 0.50, Count = 2
char[ZZ_BUFFERSIZE] -> char[ZZ_BUFFERSIZE]: Probability = 1.00, Count = 2
DeleteFile -> deleteFile: Probability = 1.00, Count = 1
StopTrainingDocumentClassifierResponse -> StopTrainingDocumentClassifierResult: Probability = 1.00, Count = 1
StopTrainingDocumentClassifier -> stopTrainingDocumentClassifier: Probability = 1.00, Count = 1
StopTrainingDocumentClassifierRequest -> StopTrainingDocumentClassifierRequest: Probability = 1.00, Count = 1
Invoke<StopTrainingDocumentClassifierResponse> -> executeStopTrainingDocumentClassifier: Probability = 1.00, Count = 1
docFreq, -> docFreq,: Probability = 1.00, Count = 2
this.DocFreq -> this.docFreq: Probability = 1.00, Count = 1
docFreq -> docFreq: Probability = 0.67, Count = 2
docFreq -> this.docFreq: Probability = 0.33, Count = 1
this.TotalTermFreq -> this.totalTermFreq: Probability = 1.00, Count = 1
GetAuthorizersResponse -> GetAuthorizersResult: Probability = 1.00, Count = 1
GetAuthorizers -> getAuthorizers: Probability = 1.00, Count = 1
GetAuthorizersRequest -> GetAuthorizersRequest: Probability = 1.00, Count = 1
Invoke<GetAuthorizersResponse> -> executeGetAuthorizers: Probability = 1.00, Count = 1
RepositoryEvent -> RepositoryEvent: Probability = 1.00, Count = 1
@event -> event: Probability = 1.00, Count = 1
IList<ListenerHandle> -> List<ListenerHandle>: Probability = 1.00, Count = 1
lists.Get -> lists.get: Probability = 1.00, Count = 1
@event.GetListenerType -> event.getListenerType: Probability = 1.00, Count = 1
@event.Dispatch -> event.dispatch: Probability = 1.00, Count = 1
handle.listener -> handle.listener: Probability = 1.00, Count = 1
pre -> pre: Probability = 0.40, Count = 2
pre -> this.exclude: Probability = 0.20, Count = 1
pre -> exclude: Probability = 0.20, Count = 1
pre -> this.pre: Probability = 0.20, Count = 1
post -> post: Probability = 0.38, Count = 3
post -> this.include: Probability = 0.12, Count = 1
post -> this.post: Probability = 0.12, Count = 1
post -> include.getField: Probability = 0.12, Count = 1
post -> exclude.getField: Probability = 0.25, Count = 2
SearchGameSessionsResponse -> SearchGameSessionsResult: Probability = 1.00, Count = 1
SearchGameSessions -> searchGameSessions: Probability = 1.00, Count = 1
SearchGameSessionsRequest -> SearchGameSessionsRequest: Probability = 1.00, Count = 1
Invoke<SearchGameSessionsResponse> -> executeSearchGameSessions: Probability = 1.00, Count = 1
PutConfigurationSetReputationOptionsResponse -> PutConfigurationSetReputationOptionsResult: Probability = 1.00, Count = 1
PutConfigurationSetReputationOptions -> putConfigurationSetReputationOptions: Probability = 1.00, Count = 1
PutConfigurationSetReputationOptionsRequest -> PutConfigurationSetReputationOptionsRequest: Probability = 1.00, Count = 1
Invoke<PutConfigurationSetReputationOptionsResponse> -> executePutConfigurationSetReputationOptions: Probability = 1.00, Count = 1
ListAttendeeTagsResponse -> ListAttendeeTagsResult: Probability = 1.00, Count = 1
ListAttendeeTags -> listAttendeeTags: Probability = 1.00, Count = 1
ListAttendeeTagsRequest -> ListAttendeeTagsRequest: Probability = 1.00, Count = 1
Invoke<ListAttendeeTagsResponse> -> executeListAttendeeTags: Probability = 1.00, Count = 1
outerInstance.GetPointer -> getPointer: Probability = 1.00, Count = 1
m_finished -> finished: Probability = 1.00, Count = 1
NGit.Revwalk.Filter.MaxCountRevFilter -> MaxCountRevFilter: Probability = 1.00, Count = 2
DisableUserResponse -> DisableUserResult: Probability = 1.00, Count = 1
DisableUser -> disableUser: Probability = 1.00, Count = 1
DisableUserRequest -> DisableUserRequest: Probability = 1.00, Count = 1
Invoke<DisableUserResponse> -> executeDisableUser: Probability = 1.00, Count = 1
stringToMatch -> stringToMatch: Probability = 1.00, Count = 1
ExtendStringToMatchByOneCharacter -> !extendStringToMatchByOneCharacter: Probability = 1.00, Count = 1
StopTrainingJobResponse -> StopTrainingJobResult: Probability = 1.00, Count = 1
StopTrainingJob -> stopTrainingJob: Probability = 1.00, Count = 1
StopTrainingJobRequest -> StopTrainingJobRequest: Probability = 1.00, Count = 1
Invoke<StopTrainingJobResponse> -> executeStopTrainingJob: Probability = 1.00, Count = 1
GetSnowballUsageResponse -> GetSnowballUsageResult: Probability = 1.00, Count = 1
GetSnowballUsage -> getSnowballUsage: Probability = 1.00, Count = 1
GetSnowballUsageRequest -> GetSnowballUsageRequest: Probability = 1.00, Count = 1
Invoke<GetSnowballUsageResponse> -> executeGetSnowballUsage: Probability = 1.00, Count = 1
DeleteUserProfileResponse -> DeleteUserProfileResult: Probability = 1.00, Count = 1
DeleteUserProfile -> deleteUserProfile: Probability = 1.00, Count = 1
DeleteUserProfileRequest -> DeleteUserProfileRequest: Probability = 1.00, Count = 1
Invoke<DeleteUserProfileResponse> -> executeDeleteUserProfile: Probability = 1.00, Count = 1
ConfigLine -> ConfigLine: Probability = 1.00, Count = 2
b.name -> compare2: Probability = 1.00, Count = 1
a.value, -> b.name: Probability = 1.00, Count = 1
IComment -> HSSFComment: Probability = 1.00, Count = 1
CreateCellComment -> createCellComment: Probability = 1.00, Count = 1
CollatedTermAttributeImpl -> CollatedTermAttributeImpl: Probability = 1.00, Count = 1
Collator -> Collator: Probability = 1.00, Count = 2
collator -> collator: Probability = 1.00, Count = 1
this.collator -> this.collator: Probability = 1.00, Count = 1
collator.Clone -> collator.clone: Probability = 1.00, Count = 1
UpdatePipelineStatusResponse -> UpdatePipelineStatusResult: Probability = 1.00, Count = 1
UpdatePipelineStatus -> updatePipelineStatus: Probability = 1.00, Count = 1
UpdatePipelineStatusRequest -> UpdatePipelineStatusRequest: Probability = 1.00, Count = 1
Invoke<UpdatePipelineStatusResponse> -> executeUpdatePipelineStatus: Probability = 1.00, Count = 1
GetBytesReader -> getBytesReader: Probability = 1.00, Count = 1
CreateRouteTableResponse -> CreateRouteTableResult: Probability = 1.00, Count = 1
CreateRouteTable -> createRouteTable: Probability = 1.00, Count = 1
CreateRouteTableRequest -> CreateRouteTableRequest: Probability = 1.00, Count = 1
Invoke<CreateRouteTableResponse> -> executeCreateRouteTable: Probability = 1.00, Count = 1
"ToParentBlockJoinQuery -> "ToParentBlockJoinQuery: Probability = 1.00, Count = 1
_childQuery -> "+childQuery.toString: Probability = 1.00, Count = 1
DisassociateClientVpnTargetNetworkResponse -> DisassociateClientVpnTargetNetworkResult: Probability = 1.00, Count = 1
DisassociateClientVpnTargetNetwork -> disassociateClientVpnTargetNetwork: Probability = 1.00, Count = 1
DisassociateClientVpnTargetNetworkRequest -> DisassociateClientVpnTargetNetworkRequest: Probability = 1.00, Count = 1
Invoke<DisassociateClientVpnTargetNetworkResponse> -> executeDisassociateClientVpnTargetNetwork: Probability = 1.00, Count = 1
"<slop -> "<slop: Probability = 1.00, Count = 1
"\n</slop>" -> "\n</slop>": Probability = 1.00, Count = 1
GetExportJobsResponse -> GetExportJobsResult: Probability = 1.00, Count = 1
GetExportJobs -> getExportJobs: Probability = 1.00, Count = 1
GetExportJobsRequest -> GetExportJobsRequest: Probability = 1.00, Count = 1
Invoke<GetExportJobsResponse> -> executeGetExportJobs: Probability = 1.00, Count = 1
UpdateBaiduChannelResponse -> UpdateBaiduChannelResult: Probability = 1.00, Count = 1
UpdateBaiduChannel -> updateBaiduChannel: Probability = 1.00, Count = 1
UpdateBaiduChannelRequest -> UpdateBaiduChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateBaiduChannelResponse> -> executeUpdateBaiduChannel: Probability = 1.00, Count = 1
ImportApiResponse -> ImportApiResult: Probability = 1.00, Count = 1
ImportApi -> importApi: Probability = 1.00, Count = 1
ImportApiRequest -> ImportApiRequest: Probability = 1.00, Count = 1
Invoke<ImportApiResponse> -> executeImportApi: Probability = 1.00, Count = 1
buffer[pos++] -> buffer.charAt: Probability = 1.00, Count = 1
GetUserResponse -> GetUserResult: Probability = 1.00, Count = 1
GetUserRequest -> GetUserRequest: Probability = 1.00, Count = 1
Invoke<GetUserResponse> -> executeGetUser: Probability = 1.00, Count = 1
GetHealthCheckLastFailureReasonResponse -> GetHealthCheckLastFailureReasonResult: Probability = 1.00, Count = 1
GetHealthCheckLastFailureReason -> getHealthCheckLastFailureReason: Probability = 1.00, Count = 1
GetHealthCheckLastFailureReasonRequest -> GetHealthCheckLastFailureReasonRequest: Probability = 1.00, Count = 1
Invoke<GetHealthCheckLastFailureReasonResponse> -> executeGetHealthCheckLastFailureReason: Probability = 1.00, Count = 1
getRawQuery -> getRawQuery: Probability = 1.00, Count = 1
StatePair -> StatePair: Probability = 0.67, Count = 4
StatePair -> p.s1: Probability = 0.17, Count = 1
StatePair -> s2: Probability = 0.17, Count = 1
S2 -> p.s2: Probability = 1.00, Count = 1
STRING]\n" -> STRING]\n": Probability = 1.00, Count = 2
.string -> .string: Probability = 1.00, Count = 2
ExecutePolicyResponse -> ExecutePolicyResult: Probability = 1.00, Count = 1
ExecutePolicy -> executePolicy: Probability = 1.00, Count = 1
ExecutePolicyRequest -> ExecutePolicyRequest: Probability = 1.00, Count = 1
Invoke<ExecutePolicyResponse> -> executeExecutePolicy: Probability = 1.00, Count = 1
UpdateEmailTemplateResponse -> UpdateEmailTemplateResult: Probability = 1.00, Count = 1
UpdateEmailTemplate -> updateEmailTemplate: Probability = 1.00, Count = 1
UpdateEmailTemplateRequest -> UpdateEmailTemplateRequest: Probability = 1.00, Count = 1
Invoke<UpdateEmailTemplateResponse> -> executeUpdateEmailTemplate: Probability = 1.00, Count = 1
EqualsContents -> equalsContents: Probability = 1.00, Count = 1
equalNames -> equalNames: Probability = 0.57, Count = 4
equalNames -> this.getID: Probability = 0.14, Count = 1
equalNames -> c.getType: Probability = 0.14, Count = 1
equalNames -> this.getType: Probability = 0.14, Count = 1
DuplicateFormatFlagsException -> DuplicateFormatFlagsException: Probability = 1.00, Count = 1
marklimit -> marklimit: Probability = 1.00, Count = 1
UpdateRequestValidatorResponse -> UpdateRequestValidatorResult: Probability = 1.00, Count = 1
UpdateRequestValidator -> updateRequestValidator: Probability = 1.00, Count = 1
UpdateRequestValidatorRequest -> UpdateRequestValidatorRequest: Probability = 1.00, Count = 1
Invoke<UpdateRequestValidatorResponse> -> executeUpdateRequestValidator: Probability = 1.00, Count = 1
Extensions -> Extensions: Probability = 1.00, Count = 1
extensionFieldDelimiter -> extensionFieldDelimiter: Probability = 1.00, Count = 2
EnglishMinimalStemFilter -> EnglishMinimalStemFilter: Probability = 1.00, Count = 1
GetPathElement -> getPathElement: Probability = 1.00, Count = 1
_sid -> _sid: Probability = 1.00, Count = 5
_data.Length -> _data.length: Probability = 1.00, Count = 1
this.processors -> this.processors: Probability = 1.00, Count = 1
DeleteGameSessionQueueResponse -> DeleteGameSessionQueueResult: Probability = 1.00, Count = 1
DeleteGameSessionQueue -> deleteGameSessionQueue: Probability = 1.00, Count = 1
DeleteGameSessionQueueRequest -> DeleteGameSessionQueueRequest: Probability = 1.00, Count = 1
Invoke<DeleteGameSessionQueueResponse> -> executeDeleteGameSessionQueue: Probability = 1.00, Count = 1
result.Sort -> states.keySet: Probability = 1.00, Count = 1
y.stateNumber -> Comparator<DFAState>: Probability = 1.00, Count = 1
GetOperator -> getOperator: Probability = 1.00, Count = 1
OP_NONE -> OP_NONE: Probability = 1.00, Count = 2
firstChar -> firstChar: Probability = 1.00, Count = 2
'=':return -> value.charAt: Probability = 0.50, Count = 3
'=':return -> '=':return: Probability = 0.50, Count = 3
AddChars -> addChars: Probability = 1.00, Count = 1
Chars, -> characters,: Probability = 1.00, Count = 1
Chars.Length -> characters.length: Probability = 1.00, Count = 1
Chars[i] -> Character.valueOf: Probability = 1.00, Count = 1
widths[i] -> widths[i]: Probability = 1.00, Count = 1
setValidating -> setValidating: Probability = 1.00, Count = 1
validating -> validating: Probability = 1.00, Count = 2
org.xmlpull.v1.XmlPullParserClass.FEATURE_VALIDATION, -> XmlPullParser.FEATURE_VALIDATION,: Probability = 1.00, Count = 1
Task<AzureOperationResponse<DedicatedCapacity>> -> DedicatedCapacityInner: Probability = 1.00, Count = 3
dedicatedCapacityName, -> resourceGroupName,: Probability = 1.00, Count = 2
capacityParameters, -> dedicatedCapacityName,: Probability = 0.40, Count = 2
capacityParameters, -> capacityParameters: Probability = 0.40, Count = 2
capacityParameters, -> .last: Probability = 0.20, Count = 1
CancelIngestionResponse -> CancelIngestionResult: Probability = 1.00, Count = 1
CancelIngestion -> cancelIngestion: Probability = 1.00, Count = 1
CancelIngestionRequest -> CancelIngestionRequest: Probability = 1.00, Count = 1
Invoke<CancelIngestionResponse> -> executeCancelIngestion: Probability = 1.00, Count = 1
SetEncoding -> setEncoding: Probability = 1.00, Count = 1
encodingName -> encodingName: Probability = 1.00, Count = 2
Sharpen.Extensions.GetEncoding -> Charset.forName: Probability = 1.00, Count = 2
DeleteTemplateAliasResponse -> DeleteTemplateAliasResult: Probability = 1.00, Count = 1
DeleteTemplateAlias -> deleteTemplateAlias: Probability = 1.00, Count = 1
DeleteTemplateAliasRequest -> DeleteTemplateAliasRequest: Probability = 1.00, Count = 1
Invoke<DeleteTemplateAliasResponse> -> executeDeleteTemplateAlias: Probability = 1.00, Count = 1
refIndex, -> refIndex,: Probability = 1.00, Count = 2
refIndex -> refIndex: Probability = 1.00, Count = 3
firstTabIndex -> firstTabIndex: Probability = 1.00, Count = 3
nr -> nr: Probability = 1.00, Count = 5
nr.SheetNumber -> nr.getSheetNumber: Probability = 1.00, Count = 3
IPAddress -> InetAddress: Probability = 1.00, Count = 1
GetRemoteAddress -> getRemoteAddress: Probability = 1.00, Count = 1
peer -> peer: Probability = 1.00, Count = 1
Antlr4.Runtime.Atn.LexerTypeAction -> LexerTypeAction: Probability = 1.00, Count = 2
RefValueArray -> RefValueArray: Probability = 1.00, Count = 1
ref1.NumberOfSheets -> ref.getNumberOfSheets: Probability = 1.00, Count = 2
_ref -> _ref: Probability = 1.00, Count = 1
NGit.Api.Git -> Git: Probability = 1.00, Count = 2
Wrap -> wrap: Probability = 1.00, Count = 1
Get64BitNormalisedExponent -> get64BitNormalisedExponent: Probability = 1.00, Count = 1
GetRepoWebhookRequest -> GetRepoWebhookRequest: Probability = 1.00, Count = 1
"GetRepoWebhook", -> "GetRepoWebhook",: Probability = 1.00, Count = 1
outputList.Add -> outputList.add: Probability = 0.50, Count = 2
outputList.Add -> outputList.addAll: Probability = 0.50, Count = 2
UpdateThreatIntelSetResponse -> UpdateThreatIntelSetResult: Probability = 1.00, Count = 1
UpdateThreatIntelSet -> updateThreatIntelSet: Probability = 1.00, Count = 1
UpdateThreatIntelSetRequest -> UpdateThreatIntelSetRequest: Probability = 1.00, Count = 1
Invoke<UpdateThreatIntelSetResponse> -> executeUpdateThreatIntelSet: Probability = 1.00, Count = 1
SortingFields -> SortingFields: Probability = 1.00, Count = 1
Fields -> Fields: Probability = 1.00, Count = 1
infos, -> infos,: Probability = 1.00, Count = 1
this.infos -> this.infos: Probability = 1.00, Count = 1
infos -> infos: Probability = 1.00, Count = 1
CreateAddInFunctions -> createAddInFunctions: Probability = 1.00, Count = 1
ImportClientVpnClientCertificateRevocationListResponse -> ImportClientVpnClientCertificateRevocationListResult: Probability = 1.00, Count = 1
ImportClientVpnClientCertificateRevocationList -> importClientVpnClientCertificateRevocationList: Probability = 1.00, Count = 1
ImportClientVpnClientCertificateRevocationListRequest -> ImportClientVpnClientCertificateRevocationListRequest: Probability = 1.00, Count = 1
Invoke<ImportClientVpnClientCertificateRevocationListResponse> -> executeImportClientVpnClientCertificateRevocationList: Probability = 1.00, Count = 1
GetVoiceConnectorOriginationResponse -> GetVoiceConnectorOriginationResult: Probability = 1.00, Count = 1
GetVoiceConnectorOrigination -> getVoiceConnectorOrigination: Probability = 1.00, Count = 1
GetVoiceConnectorOriginationRequest -> GetVoiceConnectorOriginationRequest: Probability = 1.00, Count = 1
Invoke<GetVoiceConnectorOriginationResponse> -> executeGetVoiceConnectorOrigination: Probability = 1.00, Count = 1
GetTypedLinkFacetInformationResponse -> GetTypedLinkFacetInformationResult: Probability = 1.00, Count = 1
GetTypedLinkFacetInformation -> getTypedLinkFacetInformation: Probability = 1.00, Count = 1
GetTypedLinkFacetInformationRequest -> GetTypedLinkFacetInformationRequest: Probability = 1.00, Count = 1
Invoke<GetTypedLinkFacetInformationResponse> -> executeGetTypedLinkFacetInformation: Probability = 1.00, Count = 1
PhraseSlopQueryNode -> PhraseSlopQueryNode: Probability = 1.00, Count = 1
UpdateDeploymentGroupResponse -> UpdateDeploymentGroupResult: Probability = 1.00, Count = 1
UpdateDeploymentGroup -> updateDeploymentGroup: Probability = 1.00, Count = 1
UpdateDeploymentGroupRequest -> UpdateDeploymentGroupRequest: Probability = 1.00, Count = 1
Invoke<UpdateDeploymentGroupResponse> -> executeUpdateDeploymentGroup: Probability = 1.00, Count = 1
DeleteGitHubAccountTokenResponse -> DeleteGitHubAccountTokenResult: Probability = 1.00, Count = 1
DeleteGitHubAccountToken -> deleteGitHubAccountToken: Probability = 1.00, Count = 1
DeleteGitHubAccountTokenRequest -> DeleteGitHubAccountTokenRequest: Probability = 1.00, Count = 1
Invoke<DeleteGitHubAccountTokenResponse> -> executeDeleteGitHubAccountToken: Probability = 1.00, Count = 1
GetCloudFrontOriginAccessIdentityConfigRequest -> GetCloudFrontOriginAccessIdentityConfigRequest: Probability = 1.00, Count = 1
"Assume -> Role: Probability = 1.00, Count = 1
Role -> duration: Probability = 1.00, Count = 1
3min -> 15min: Probability = 0.50, Count = 1
3min -> 1Hr": Probability = 0.50, Count = 1
mods -> mods: Probability = 0.67, Count = 4
mods -> Clause: Probability = 0.17, Count = 1
mods -> ModifierQueryNode.Modifier.MOD_NONE: Probability = 0.17, Count = 1
oldIds[nthParent] -> oldIds[nthParent]: Probability = 1.00, Count = 1
strUrl, -> strUrl,: Probability = 1.00, Count = 1
tmpHeaders -> tmpHeaders: Probability = 0.75, Count = 3
tmpHeaders -> this.headers: Probability = 0.25, Count = 1
strUrl -> strUrl: Probability = 1.00, Count = 1
AcceptInvitationResponse -> AcceptInvitationResult: Probability = 1.00, Count = 1
AcceptInvitation -> acceptInvitation: Probability = 1.00, Count = 1
AcceptInvitationRequest -> AcceptInvitationRequest: Probability = 1.00, Count = 1
Invoke<AcceptInvitationResponse> -> executeAcceptInvitation: Probability = 1.00, Count = 1
xfr -> xfr: Probability = 0.40, Count = 2
xfr -> _xfRecords.get: Probability = 0.20, Count = 1
xfr -> cell.getXFIndex: Probability = 0.40, Count = 2
xfr.FormatIndex -> xfr.getFormatIndex: Probability = 1.00, Count = 1
FIRST_FEW_BYTES -> FIRST_FEW_BYTES: Probability = 1.00, Count = 2
'\0' -> '\0': Probability = 1.00, Count = 1
PackWriter.PackingPhase -> PackingPhase: Probability = 1.00, Count = 1
GetPhase -> getPhase: Probability = 1.00, Count = 1
next.Clone -> next.clone: Probability = 1.00, Count = 1
GetSearchSuggestionsResponse -> GetSearchSuggestionsResult: Probability = 1.00, Count = 1
GetSearchSuggestions -> getSearchSuggestions: Probability = 1.00, Count = 1
GetSearchSuggestionsRequest -> GetSearchSuggestionsRequest: Probability = 1.00, Count = 1
Invoke<GetSearchSuggestionsResponse> -> executeGetSearchSuggestions: Probability = 1.00, Count = 1
getJavaDate -> getJavaDate: Probability = 1.00, Count = 1
Invoke<ListVerifiedEmailAddressesResponse> -> executeListVerifiedEmailAddresses: Probability = 1.00, Count = 1
queryID, -> queryID: Probability = 0.50, Count = 1
queryID, -> queryID,: Probability = 0.50, Count = 1
nOther -> nOther: Probability = 0.67, Count = 2
nOther -> other.queryID: Probability = 0.33, Count = 1
queryID.CompareToOrdinal -> queryID.compareTo: Probability = 1.00, Count = 1
other.queryID -> other.queryID: Probability = 1.00, Count = 1
export -> export: Probability = 1.00, Count = 2
state,PredictionContext -> state,PredictionContext: Probability = 1.00, Count = 2
Invoke<DescribeScheduledActionsResponse> -> executeDescribeScheduledActions: Probability = 1.00, Count = 1
IsAdjacentBefore -> isAdjacentBefore: Probability = 1.00, Count = 1
other._first_col -> other._firstCol: Probability = 1.00, Count = 1
CreateConfigurationSetTrackingOptionsResponse -> CreateConfigurationSetTrackingOptionsResult: Probability = 1.00, Count = 1
CreateConfigurationSetTrackingOptions -> createConfigurationSetTrackingOptions: Probability = 1.00, Count = 1
CreateConfigurationSetTrackingOptionsRequest -> CreateConfigurationSetTrackingOptionsRequest: Probability = 1.00, Count = 1
Invoke<CreateConfigurationSetTrackingOptionsResponse> -> executeCreateConfigurationSetTrackingOptions: Probability = 1.00, Count = 1
offsetByCodePoints -> offsetByCodePoints: Probability = 1.00, Count = 1
codePointOffset -> codePointOffset: Probability = 1.00, Count = 2
base.offsetByCodePoints -> super.offsetByCodePoints: Probability = 1.00, Count = 1
GetSdkResponse -> GetSdkResult: Probability = 1.00, Count = 1
GetSdk -> getSdk: Probability = 1.00, Count = 1
GetSdkRequest -> GetSdkRequest: Probability = 1.00, Count = 1
Invoke<GetSdkResponse> -> executeGetSdk: Probability = 1.00, Count = 1
PutEmailIdentityDkimAttributesResponse -> PutEmailIdentityDkimAttributesResult: Probability = 1.00, Count = 1
PutEmailIdentityDkimAttributes -> putEmailIdentityDkimAttributes: Probability = 1.00, Count = 1
PutEmailIdentityDkimAttributesRequest -> PutEmailIdentityDkimAttributesRequest: Probability = 1.00, Count = 1
Invoke<PutEmailIdentityDkimAttributesResponse> -> executePutEmailIdentityDkimAttributes: Probability = 1.00, Count = 1
DescribeWorkflowExecutionResponse -> WorkflowExecutionDetail: Probability = 1.00, Count = 1
DescribeWorkflowExecution -> describeWorkflowExecution: Probability = 1.00, Count = 1
DescribeWorkflowExecutionRequest -> DescribeWorkflowExecutionRequest: Probability = 1.00, Count = 1
Invoke<DescribeWorkflowExecutionResponse> -> executeDescribeWorkflowExecution: Probability = 1.00, Count = 1
ContinuableRecordInput -> ContinuableRecordInput: Probability = 1.00, Count = 1
_in -> _in: Probability = 1.00, Count = 1
SimpleTextStoredFieldsReader -> SimpleTextStoredFieldsReader: Probability = 1.00, Count = 1
Initial -> Initial: Probability = 1.00, Count = 1
_reserved1 -> _reserved1: Probability = 1.00, Count = 1
_reserved2 -> _reserved2: Probability = 1.00, Count = 1
getProgress -> getProgress: Probability = 1.00, Count = 1
CreateNamedQueryResponse -> CreateNamedQueryResult: Probability = 1.00, Count = 1
CreateNamedQuery -> createNamedQuery: Probability = 1.00, Count = 1
CreateNamedQueryRequest -> CreateNamedQueryRequest: Probability = 1.00, Count = 1
Invoke<CreateNamedQueryResponse> -> executeCreateNamedQuery: Probability = 1.00, Count = 1
java.nio.ReadOnlyLongArrayBuffer.copy -> ReadOnlyLongArrayBuffer.copy: Probability = 1.00, Count = 1
CreateFlowDefinitionResponse -> CreateFlowDefinitionResult: Probability = 1.00, Count = 1
CreateFlowDefinition -> createFlowDefinition: Probability = 1.00, Count = 1
CreateFlowDefinitionRequest -> CreateFlowDefinitionRequest: Probability = 1.00, Count = 1
Invoke<CreateFlowDefinitionResponse> -> executeCreateFlowDefinition: Probability = 1.00, Count = 1
GetOpenIdTokenResponse -> GetOpenIdTokenResult: Probability = 1.00, Count = 1
GetOpenIdToken -> getOpenIdToken: Probability = 1.00, Count = 1
GetOpenIdTokenRequest -> GetOpenIdTokenRequest: Probability = 1.00, Count = 1
Invoke<GetOpenIdTokenResponse> -> executeGetOpenIdToken: Probability = 1.00, Count = 1
GetDocumentationPartResponse -> GetDocumentationPartResult: Probability = 1.00, Count = 1
GetDocumentationPart -> getDocumentationPart: Probability = 1.00, Count = 1
GetDocumentationPartRequest -> GetDocumentationPartRequest: Probability = 1.00, Count = 1
Invoke<GetDocumentationPartResponse> -> executeGetDocumentationPart: Probability = 1.00, Count = 1
vargs -> vargs: Probability = 1.00, Count = 2
SuggestFileExtension -> suggestFileExtension: Probability = 1.00, Count = 1
AsyncResponsePostRequest -> AsyncResponsePostRequest: Probability = 1.00, Count = 1
"AsyncResponsePost" -> "AsyncResponsePost": Probability = 1.00, Count = 1
Between -> between: Probability = 1.00, Count = 3
since, -> since,: Probability = 0.50, Count = 3
since, -> Date: Probability = 0.33, Count = 2
since, -> until.getTime: Probability = 0.17, Count = 1
until -> until: Probability = 1.00, Count = 3
CommitTimeRevFilterBetween -> Between: Probability = 0.50, Count = 1
CommitTimeRevFilterBetween -> since.getTime: Probability = 0.50, Count = 1
Sharpen.Iterator<T> -> Iterator<T>: Probability = 1.00, Count = 1
BlockList<T>.MyIterator -> MyIterator: Probability = 1.00, Count = 1
this.docs -> this.docs: Probability = 1.00, Count = 2
docs -> docs: Probability = 1.00, Count = 2
this.offsets -> this.offsets: Probability = 1.00, Count = 1
"fileName= -> "fileName=": Probability = 1.00, Count = 1
length= -> +: Probability = 0.67, Count = 2
length= -> fileName: Probability = 0.33, Count = 1
_sre -> _sre: Probability = 0.50, Count = 1
_sre -> _evaluator.getSheetEvaluator: Probability = 0.50, Count = 1
_evaluator.GetSheetEvaluator -> _evaluator.getFirstSheetIndex: Probability = 1.00, Count = 1
_evaluator.FirstSheetIndex -> _sre.isSubTotal: Probability = 1.00, Count = 1
DeleteCollectionResponse -> DeleteCollectionResult: Probability = 1.00, Count = 1
DeleteCollection -> deleteCollection: Probability = 1.00, Count = 1
Invoke<DeleteCollectionResponse> -> executeDeleteCollection: Probability = 1.00, Count = 1
_out.Write -> writeContinueIfRequired: Probability = 1.00, Count = 1
getIndeterminateDrawable -> getIndeterminateDrawable: Probability = 1.00, Count = 1
mIndeterminateDrawable -> mIndeterminateDrawable: Probability = 1.00, Count = 3
ListWebsiteCertificateAuthoritiesResponse -> ListWebsiteCertificateAuthoritiesResult: Probability = 1.00, Count = 1
ListWebsiteCertificateAuthorities -> listWebsiteCertificateAuthorities: Probability = 1.00, Count = 1
ListWebsiteCertificateAuthoritiesRequest -> ListWebsiteCertificateAuthoritiesRequest: Probability = 1.00, Count = 1
Invoke<ListWebsiteCertificateAuthoritiesResponse> -> executeListWebsiteCertificateAuthorities: Probability = 1.00, Count = 1
DeleteLogStreamRequest -> DeleteLogStreamRequest: Probability = 1.00, Count = 1
stepSize -> stepSize: Probability = 0.67, Count = 2
stepSize -> monitor.update: Probability = 0.33, Count = 1
SetFlushOnEnd -> setFlushOnEnd: Probability = 1.00, Count = 1
this.flushOnEnd -> this.flushOnEnd: Probability = 1.00, Count = 1
ListAutoMLJobsResponse -> ListAutoMLJobsResult: Probability = 1.00, Count = 1
ListAutoMLJobs -> listAutoMLJobs: Probability = 1.00, Count = 1
ListAutoMLJobsRequest -> ListAutoMLJobsRequest: Probability = 1.00, Count = 1
Invoke<ListAutoMLJobsResponse> -> executeListAutoMLJobs: Probability = 1.00, Count = 1
DescribeReplicationGroupsResponse -> DescribeReplicationGroupsResult: Probability = 1.00, Count = 2
DescribeReplicationGroups -> describeReplicationGroups: Probability = 1.00, Count = 3
DescribeReplicationGroupsRequest -> DescribeReplicationGroupsRequest: Probability = 1.00, Count = 2
records[rowIndex] -> records[rowIndex]: Probability = 1.00, Count = 2
DeleteProxySessionResponse -> DeleteProxySessionResult: Probability = 1.00, Count = 1
DeleteProxySession -> deleteProxySession: Probability = 1.00, Count = 1
DeleteProxySessionRequest -> DeleteProxySessionRequest: Probability = 1.00, Count = 1
Invoke<DeleteProxySessionResponse> -> executeDeleteProxySession: Probability = 1.00, Count = 1
NumberFormatIndexRecord -> NumberFormatIndexRecord: Probability = 1.00, Count = 1
field_1_formatIndex -> field_1_formatIndex: Probability = 1.00, Count = 2
CreatePrivateVirtualInterfaceResponse -> CreatePrivateVirtualInterfaceResult: Probability = 1.00, Count = 1
CreatePrivateVirtualInterface -> createPrivateVirtualInterface: Probability = 1.00, Count = 1
CreatePrivateVirtualInterfaceRequest -> CreatePrivateVirtualInterfaceRequest: Probability = 1.00, Count = 1
Invoke<CreatePrivateVirtualInterfaceResponse> -> executeCreatePrivateVirtualInterface: Probability = 1.00, Count = 1
list.get -> list.get: Probability = 1.00, Count = 2
LongToHex -> longToHex: Probability = 1.00, Count = 1
StartOffset -> getStartOffset: Probability = 1.00, Count = 3
other.StartOffset -> other.getStartOffset: Probability = 1.00, Count = 3
EndOffset -> getEndOffset: Probability = 1.00, Count = 3
other.EndOffset -> other.getEndOffset: Probability = 1.00, Count = 3
UpdateNetworkProfileResponse -> UpdateNetworkProfileResult: Probability = 1.00, Count = 1
UpdateNetworkProfile -> updateNetworkProfile: Probability = 1.00, Count = 1
UpdateNetworkProfileRequest -> UpdateNetworkProfileRequest: Probability = 1.00, Count = 1
Invoke<UpdateNetworkProfileResponse> -> executeUpdateNetworkProfile: Probability = 1.00, Count = 1
GetRelationalDatabaseParametersResponse -> GetRelationalDatabaseParametersResult: Probability = 1.00, Count = 1
GetRelationalDatabaseParameters -> getRelationalDatabaseParameters: Probability = 1.00, Count = 1
GetRelationalDatabaseParametersRequest -> GetRelationalDatabaseParametersRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseParametersResponse> -> executeGetRelationalDatabaseParameters: Probability = 1.00, Count = 1
inStream.Sid -> inStream.getSid: Probability = 1.00, Count = 2
inStream.ReadUShort -> inStream.readUShort: Probability = 1.00, Count = 3
inStream.ReadUByte -> inStream.readUByte: Probability = 1.00, Count = 3
charType -> charType: Probability = 1.00, Count = 2
evalSheet -> evalSheet: Probability = 0.67, Count = 2
evalSheet -> .getHSSFSheet: Probability = 0.33, Count = 1
codePointAt -> codePointAt: Probability = 1.00, Count = 1
base.codePointAt -> super.codePointAt: Probability = 1.00, Count = 1
DeleteRepoBuildRuleRequest -> DeleteRepoBuildRuleRequest: Probability = 1.00, Count = 1
"DeleteRepoBuildRule", -> "DeleteRepoBuildRule",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/rules/[BuildRuleId]" -> "/repos/[RepoNamespace]/[RepoName]/rules/[BuildRuleId]": Probability = 1.00, Count = 2
UpdateEmailChannelResponse -> UpdateEmailChannelResult: Probability = 1.00, Count = 1
UpdateEmailChannel -> updateEmailChannel: Probability = 1.00, Count = 1
UpdateEmailChannelRequest -> UpdateEmailChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateEmailChannelResponse> -> executeUpdateEmailChannel: Probability = 1.00, Count = 1
TabIdRecord -> TabIdRecord: Probability = 1.00, Count = 2
CreateConnectionResponse -> CreateConnectionResult: Probability = 1.00, Count = 1
CreateConnection -> createConnection: Probability = 1.00, Count = 1
CreateConnectionRequest -> CreateConnectionRequest: Probability = 1.00, Count = 1
Invoke<CreateConnectionResponse> -> executeCreateConnection: Probability = 1.00, Count = 1
CalculateWorkdays -> calculateWorkdays: Probability = 1.00, Count = 1
saturdaysPast -> saturdaysPast: Probability = 1.00, Count = 2
this.PastDaysOfWeek -> this.pastDaysOfWeek: Probability = 1.00, Count = 2
sundaysPast -> sundaysPast: Probability = 1.00, Count = 2
DayOfWeek.Sunday -> Calendar.SUNDAY: Probability = 1.00, Count = 2
nonWeekendHolidays -> nonWeekendHolidays: Probability = 1.00, Count = 2
IndexFormatTooNewException -> IndexFormatTooNewException: Probability = 1.00, Count = 1
.noApplyInDelete -> .noApplyInDelete: Probability = 1.00, Count = 1
waitForPos -> waitForPos: Probability = 1.00, Count = 4
wSpanTerm -> wSpanTerm: Probability = 1.00, Count = 2
StopMatchmakingResponse -> StopMatchmakingResult: Probability = 1.00, Count = 1
StopMatchmaking -> stopMatchmaking: Probability = 1.00, Count = 1
StopMatchmakingRequest -> StopMatchmakingRequest: Probability = 1.00, Count = 1
Invoke<StopMatchmakingResponse> -> executeStopMatchmaking: Probability = 1.00, Count = 1
DescribeClientVpnTargetNetworksResponse -> DescribeClientVpnTargetNetworksResult: Probability = 1.00, Count = 1
DescribeClientVpnTargetNetworks -> describeClientVpnTargetNetworks: Probability = 1.00, Count = 1
DescribeClientVpnTargetNetworksRequest -> DescribeClientVpnTargetNetworksRequest: Probability = 1.00, Count = 1
Invoke<DescribeClientVpnTargetNetworksResponse> -> executeDescribeClientVpnTargetNetworks: Probability = 1.00, Count = 1
asIntBuffer -> asIntBuffer: Probability = 1.00, Count = 1
java.nio.IntToByteBufferAdapter.asIntBuffer -> IntToByteBufferAdapter.asIntBuffer: Probability = 1.00, Count = 1
request.Label -> .withLabel: Probability = 1.00, Count = 1
encoderClass.Equals -> encoderClass.equals: Probability = 1.00, Count = 3
GetHealthCheckResponse -> GetHealthCheckResult: Probability = 1.00, Count = 1
GetHealthCheck -> getHealthCheck: Probability = 1.00, Count = 1
GetHealthCheckRequest -> GetHealthCheckRequest: Probability = 1.00, Count = 1
Invoke<GetHealthCheckResponse> -> executeGetHealthCheck: Probability = 1.00, Count = 1
ListNotebookInstanceLifecycleConfigsResponse -> ListNotebookInstanceLifecycleConfigsResult: Probability = 1.00, Count = 1
ListNotebookInstanceLifecycleConfigs -> listNotebookInstanceLifecycleConfigs: Probability = 1.00, Count = 1
ListNotebookInstanceLifecycleConfigsRequest -> ListNotebookInstanceLifecycleConfigsRequest: Probability = 1.00, Count = 1
Invoke<ListNotebookInstanceLifecycleConfigsResponse> -> executeListNotebookInstanceLifecycleConfigs: Probability = 1.00, Count = 1
CalculateMaximumSize -> calculateMaximumSize: Probability = 0.67, Count = 2
CalculateMaximumSize -> header.getBigBlockSize: Probability = 0.33, Count = 1
header.BigBlockSize, -> header.getBATCount: Probability = 1.00, Count = 1
"character=" -> "character=": Probability = 1.00, Count = 1
",fontIndex=" -> ",fontIndex=": Probability = 1.00, Count = 1
GetDataFormatString -> getDataFormatString: Probability = 1.00, Count = 2
getDataFormatStringCache -> getDataFormatStringCache.get: Probability = 0.38, Count = 3
getDataFormatStringCache -> lastDateFormat.get: Probability = 0.12, Count = 1
getDataFormatStringCache -> getDataFormat: Probability = 0.25, Count = 2
getDataFormatStringCache -> lastFormats.set: Probability = 0.12, Count = 1
getDataFormatStringCache -> getDataFormatStringCache.set: Probability = 0.12, Count = 1
lastFormats -> _workbook.getFormats: Probability = 0.67, Count = 2
lastFormats -> lastFormats.get: Probability = 0.33, Count = 1
DataFormat -> (: Probability = 1.00, Count = 3
lastDateFormat -> lastDateFormat.set: Probability = 1.00, Count = 2
UpdateSignalingChannelResponse -> UpdateSignalingChannelResult: Probability = 1.00, Count = 1
UpdateSignalingChannel -> updateSignalingChannel: Probability = 1.00, Count = 1
UpdateSignalingChannelRequest -> UpdateSignalingChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateSignalingChannelResponse> -> executeUpdateSignalingChannel: Probability = 1.00, Count = 1
MoPenSendMqttMessageRequest -> MoPenSendMqttMessageRequest: Probability = 1.00, Count = 1
"MoPenSendMqttMessage", -> "MoPenSendMqttMessage",: Probability = 1.00, Count = 1
TreeSet -> TreeSet: Probability = 1.00, Count = 1
set.comparator -> set.comparator: Probability = 1.00, Count = 1
set.iterator -> set.iterator: Probability = 1.00, Count = 1
DisassociateMembersResponse -> DisassociateMembersResult: Probability = 1.00, Count = 1
DisassociateMembers -> disassociateMembers: Probability = 1.00, Count = 1
DisassociateMembersRequest -> DisassociateMembersRequest: Probability = 1.00, Count = 1
Invoke<DisassociateMembersResponse> -> executeDisassociateMembers: Probability = 1.00, Count = 1
DeleteVpcLinkResponse -> DeleteVpcLinkResult: Probability = 1.00, Count = 1
DeleteVpcLink -> deleteVpcLink: Probability = 1.00, Count = 1
DeleteVpcLinkRequest -> DeleteVpcLinkRequest: Probability = 1.00, Count = 1
Invoke<DeleteVpcLinkResponse> -> executeDeleteVpcLink: Probability = 1.00, Count = 1
DescribeDBSnapshotsResponse -> DescribeDBSnapshotsResult: Probability = 1.00, Count = 1
DescribeDBSnapshots -> describeDBSnapshots: Probability = 1.00, Count = 2
DescribeDBSnapshotsRequest -> DescribeDBSnapshotsRequest: Probability = 1.00, Count = 1
_evaluationListener -> _evaluationListener: Probability = 1.00, Count = 1
_evaluationListener.OnClearWholeCache -> _evaluationListener.onClearWholeCache: Probability = 1.00, Count = 1
_plainCellCache.Clear -> _plainCellCache.clear: Probability = 1.00, Count = 1
_formulaCellCache.Clear -> _formulaCellCache.clear: Probability = 1.00, Count = 1
this.field_2_horiz_pos -> field_2_horiz_pos: Probability = 1.00, Count = 1
Invoke<DescribeJobFlowsResponse> -> executeDescribeJobFlows: Probability = 1.00, Count = 1
LowerCaseFilterFactory -> LowerCaseFilterFactory: Probability = 1.00, Count = 1
DisassociateResolverRuleResponse -> DisassociateResolverRuleResult: Probability = 1.00, Count = 1
DisassociateResolverRule -> disassociateResolverRule: Probability = 1.00, Count = 1
DisassociateResolverRuleRequest -> DisassociateResolverRuleRequest: Probability = 1.00, Count = 1
Invoke<DisassociateResolverRuleResponse> -> executeDisassociateResolverRule: Probability = 1.00, Count = 1
IsUnicodeString -> isUnicodeString: Probability = 1.00, Count = 1
!value.Equals -> !value.equals: Probability = 1.00, Count = 1
ISO_8859_1.GetString -> value.getBytes: Probability = 1.00, Count = 1
DeleteApplicationCloudWatchLoggingOptionResponse -> DeleteApplicationCloudWatchLoggingOptionResult: Probability = 1.00, Count = 1
DeleteApplicationCloudWatchLoggingOption -> deleteApplicationCloudWatchLoggingOption: Probability = 1.00, Count = 1
DeleteApplicationCloudWatchLoggingOptionRequest -> DeleteApplicationCloudWatchLoggingOptionRequest: Probability = 1.00, Count = 1
Invoke<DeleteApplicationCloudWatchLoggingOptionResponse> -> executeDeleteApplicationCloudWatchLoggingOption: Probability = 1.00, Count = 1
FreqProxPostingsArray -> FreqProxPostingsArray: Probability = 1.00, Count = 1
lastPositions -> int[size]: Probability = 1.00, Count = 1
MatchPrefix -> matchPrefix: Probability = 1.00, Count = 2
DescribeScalingPoliciesResponse -> DescribeScalingPoliciesResult: Probability = 1.00, Count = 1
DescribeScalingPolicies -> describeScalingPolicies: Probability = 1.00, Count = 1
DescribeScalingPoliciesRequest -> DescribeScalingPoliciesRequest: Probability = 1.00, Count = 1
Invoke<DescribeScalingPoliciesResponse> -> executeDescribeScalingPolicies: Probability = 1.00, Count = 1
field_2_cell_offsets[k] -> field_2_cell_offset: Probability = 1.00, Count = 2
field_2_cell_offsets.Length -> field_2_cell_offsets: Probability = 1.00, Count = 1
UserSViewBegin -> UserSViewBegin: Probability = 1.00, Count = 2
fontNameLen -> fontNameLen: Probability = 1.00, Count = 3
hasMultibyte -> hasMultibyte: Probability = 1.00, Count = 3
field_11_font_name, -> field_11_font_name,: Probability = 1.00, Count = 2
Invoke<DescribeLaunchConfigurationsResponse> -> executeDescribeLaunchConfigurations: Probability = 1.00, Count = 1
ent.path -> ent.path: Probability = 1.00, Count = 1
srcOff -> srcOff: Probability = 1.00, Count = 2
this.remaining -> remaining: Probability = 1.00, Count = 2
EOF" -> EOF": Probability = 1.00, Count = 3
"field -> "field: Probability = 1.00, Count = 1
null!" -> null!": Probability = 1.00, Count = 1
NGramTokenFilter -> NGramTokenFilter: Probability = 1.00, Count = 1
Invoke<DescribeCacheParameterGroupsResponse> -> executeDescribeCacheParameterGroups: Probability = 1.00, Count = 1
_ulrOutput.WriteShort -> _ulrOutput.writeShort: Probability = 1.00, Count = 1
appendNull -> appendNull: Probability = 1.00, Count = 2
ListGatewayGroupsResponse -> ListGatewayGroupsResult: Probability = 1.00, Count = 1
ListGatewayGroups -> listGatewayGroups: Probability = 1.00, Count = 1
ListGatewayGroupsRequest -> ListGatewayGroupsRequest: Probability = 1.00, Count = 1
Invoke<ListGatewayGroupsResponse> -> executeListGatewayGroups: Probability = 1.00, Count = 1
DescribeVpnConnectionsResponse -> DescribeVpnConnectionsResult: Probability = 1.00, Count = 1
DescribeVpnConnections -> describeVpnConnections: Probability = 1.00, Count = 1
DescribeVpnConnectionsRequest -> DescribeVpnConnectionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpnConnectionsResponse> -> executeDescribeVpnConnections: Probability = 1.00, Count = 1
ListDistributionsResponse -> ListDistributionsResult: Probability = 1.00, Count = 1
ListDistributions -> listDistributions: Probability = 1.00, Count = 1
ListDistributionsRequest -> ListDistributionsRequest: Probability = 1.00, Count = 1
Invoke<ListDistributionsResponse> -> executeListDistributions: Probability = 1.00, Count = 1
m_params -> params==null: Probability = 1.00, Count = 1
DescribeTasksResponse -> DescribeTasksResult: Probability = 1.00, Count = 1
DescribeTasks -> describeTasks: Probability = 1.00, Count = 1
DescribeTasksRequest -> DescribeTasksRequest: Probability = 1.00, Count = 1
Invoke<DescribeTasksResponse> -> executeDescribeTasks: Probability = 1.00, Count = 1
DescribeCacheSubnetGroupsResponse -> DescribeCacheSubnetGroupsResult: Probability = 1.00, Count = 1
DescribeCacheSubnetGroups -> describeCacheSubnetGroups: Probability = 1.00, Count = 2
DescribeCacheSubnetGroupsRequest -> DescribeCacheSubnetGroupsRequest: Probability = 1.00, Count = 1
byteBuffer.getFloat -> byteBuffer.getFloat: Probability = 1.00, Count = 1
NGit.Api.ShowNoteCommand -> ShowNoteCommand: Probability = 1.00, Count = 2
UpdateAuthorizerResponse -> UpdateAuthorizerResult: Probability = 1.00, Count = 1
UpdateAuthorizer -> updateAuthorizer: Probability = 1.00, Count = 1
UpdateAuthorizerRequest -> UpdateAuthorizerRequest: Probability = 1.00, Count = 1
Invoke<UpdateAuthorizerResponse> -> executeUpdateAuthorizer: Probability = 1.00, Count = 1
OrdVal -> ordVal: Probability = 1.00, Count = 1
UpdateApnsVoipSandboxChannelResponse -> UpdateApnsVoipSandboxChannelResult: Probability = 1.00, Count = 1
UpdateApnsVoipSandboxChannel -> updateApnsVoipSandboxChannel: Probability = 1.00, Count = 1
UpdateApnsVoipSandboxChannelRequest -> UpdateApnsVoipSandboxChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateApnsVoipSandboxChannelResponse> -> executeUpdateApnsVoipSandboxChannel: Probability = 1.00, Count = 1
LL1Analyzer -> LL1Analyzer: Probability = 0.67, Count = 2
LL1Analyzer -> anal: Probability = 0.33, Count = 1
anal.Look -> anal.LOOK: Probability = 1.00, Count = 1
DescribeIdentityResponse -> DescribeIdentityResult: Probability = 1.00, Count = 1
DescribeIdentity -> describeIdentity: Probability = 1.00, Count = 1
DescribeIdentityRequest -> DescribeIdentityRequest: Probability = 1.00, Count = 1
Invoke<DescribeIdentityResponse> -> executeDescribeIdentity: Probability = 1.00, Count = 1
SubmoduleAddCommand -> SubmoduleAddCommand: Probability = 1.00, Count = 2
SubmoduleAdd -> submoduleAdd: Probability = 1.00, Count = 1
DescribeTypeResponse -> DescribeTypeResult: Probability = 1.00, Count = 1
DescribeType -> describeType: Probability = 1.00, Count = 1
DescribeTypeRequest -> DescribeTypeRequest: Probability = 1.00, Count = 1
Invoke<DescribeTypeResponse> -> executeDescribeType: Probability = 1.00, Count = 1
UpdateCompanyNetworkConfigurationResponse -> UpdateCompanyNetworkConfigurationResult: Probability = 1.00, Count = 1
UpdateCompanyNetworkConfiguration -> updateCompanyNetworkConfiguration: Probability = 1.00, Count = 1
UpdateCompanyNetworkConfigurationRequest -> UpdateCompanyNetworkConfigurationRequest: Probability = 1.00, Count = 1
Invoke<UpdateCompanyNetworkConfigurationResponse> -> executeUpdateCompanyNetworkConfiguration: Probability = 1.00, Count = 1
field.GetStringValue -> field.stringValue: Probability = 1.00, Count = 2
mcr.GetAreaAt -> cra: Probability = 1.00, Count = 2
_mergedRegions.Add -> _mergedRegions.add: Probability = 1.00, Count = 2
cmd.Substring -> cmd.subSequence: Probability = 1.00, Count = 3
DescribeMLModelsResponse -> DescribeMLModelsResult: Probability = 1.00, Count = 1
DescribeMLModels -> describeMLModels: Probability = 1.00, Count = 1
DescribeMLModelsRequest -> DescribeMLModelsRequest: Probability = 1.00, Count = 1
Invoke<DescribeMLModelsResponse> -> executeDescribeMLModels: Probability = 1.00, Count = 1
availabilityZone, -> snapshotId,: Probability = 0.50, Count = 1
availabilityZone, -> size,: Probability = 0.50, Count = 1
DVConstraint.CreateDateConstraint -> DVConstraint.createDateConstraint: Probability = 1.00, Count = 1
CloneReceiptRuleSetResponse -> CloneReceiptRuleSetResult: Probability = 1.00, Count = 1
CloneReceiptRuleSet -> cloneReceiptRuleSet: Probability = 1.00, Count = 1
CloneReceiptRuleSetRequest -> CloneReceiptRuleSetRequest: Probability = 1.00, Count = 1
Invoke<CloneReceiptRuleSetResponse> -> executeCloneReceiptRuleSet: Probability = 1.00, Count = 1
GetOffsetGap -> getOffsetGap: Probability = 1.00, Count = 2
byteOrder -> byteOrder: Probability = 1.00, Count = 2
orderImpl -> orderImpl: Probability = 1.00, Count = 1
DescribeAlarmsForMetricResponse -> DescribeAlarmsForMetricResult: Probability = 1.00, Count = 1
DescribeAlarmsForMetric -> describeAlarmsForMetric: Probability = 1.00, Count = 1
DescribeAlarmsForMetricRequest -> DescribeAlarmsForMetricRequest: Probability = 1.00, Count = 1
Invoke<DescribeAlarmsForMetricResponse> -> executeDescribeAlarmsForMetric: Probability = 1.00, Count = 1
TerminateWorkflowExecution -> terminateWorkflowExecution: Probability = 1.00, Count = 1
TerminateWorkflowExecutionRequest -> TerminateWorkflowExecutionRequest: Probability = 1.00, Count = 1
TerminateWorkflowExecutionResponseUnmarshaller.Instance -> executeTerminateWorkflowExecution: Probability = 1.00, Count = 1
PointVectorStrategy -> PointVectorStrategy: Probability = 0.50, Count = 1
PointVectorStrategy -> strategy,: Probability = 0.50, Count = 1
this.multiplier -> this.nullValue: Probability = 0.50, Count = 1
this.multiplier -> 180: Probability = 0.50, Count = 1
RenameBranchCommand -> RenameBranchCommand: Probability = 1.00, Count = 2
BranchRename -> branchRename: Probability = 1.00, Count = 1
DescribeInstanceEventNotificationAttributesResponse -> DescribeInstanceEventNotificationAttributesResult: Probability = 1.00, Count = 1
DescribeInstanceEventNotificationAttributes -> describeInstanceEventNotificationAttributes: Probability = 1.00, Count = 1
DescribeInstanceEventNotificationAttributesRequest -> DescribeInstanceEventNotificationAttributesRequest: Probability = 1.00, Count = 1
Invoke<DescribeInstanceEventNotificationAttributesResponse> -> executeDescribeInstanceEventNotificationAttributes: Probability = 1.00, Count = 1
AppendUserAgent -> appendUserAgent: Probability = 1.00, Count = 1
userAgentConfig.AppendUserAgent -> this.userAgentConfig.append: Probability = 1.00, Count = 1
GetQuotaRequest -> GetQuotaRequest: Probability = 1.00, Count = 1
"GetQuota", -> "GetQuota",: Probability = 1.00, Count = 1
DeleteEventStreamResponse -> DeleteEventStreamResult: Probability = 1.00, Count = 1
DeleteEventStream -> deleteEventStream: Probability = 1.00, Count = 1
DeleteEventStreamRequest -> DeleteEventStreamRequest: Probability = 1.00, Count = 1
Invoke<DeleteEventStreamResponse> -> executeDeleteEventStream: Probability = 1.00, Count = 1
GetPhotosRequest -> GetPhotosRequest: Probability = 1.00, Count = 1
"GetPhotos", -> "GetPhotos",: Probability = 1.00, Count = 1
GetBegin -> getBegin: Probability = 1.00, Count = 1
DescribeDataSetPermissionsResponse -> DescribeDataSetPermissionsResult: Probability = 1.00, Count = 1
DescribeDataSetPermissions -> describeDataSetPermissions: Probability = 1.00, Count = 1
DescribeDataSetPermissionsRequest -> DescribeDataSetPermissionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDataSetPermissionsResponse> -> executeDescribeDataSetPermissions: Probability = 1.00, Count = 1
SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest -> SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest: Probability = 1.00, Count = 1
"SaveTaskForUpdatingRegistrantInfoByIdentityCredential", -> "SaveTaskForUpdatingRegistrantInfoByIdentityCredential": Probability = 1.00, Count = 1
TokenStreamToAutomaton -> TokenStreamToAutomaton: Probability = 1.00, Count = 1
this.preservePositionIncrements -> this.preservePositionIncrements: Probability = 1.00, Count = 1
extBlock -> extBlockIndex: Probability = 0.38, Count = 3
extBlock -> extBlock: Probability = 0.62, Count = 5
IndexReaderContext -> IndexReaderContext: Probability = 0.75, Count = 3
IndexReaderContext -> getTopLevelContext: Probability = 0.25, Count = 1
context.Parent -> context.parent: Probability = 1.00, Count = 2
DeleteLabelsResponse -> DeleteLabelsResult: Probability = 1.00, Count = 1
DeleteLabels -> deleteLabels: Probability = 1.00, Count = 1
DeleteLabelsRequest -> DeleteLabelsRequest: Probability = 1.00, Count = 1
Invoke<DeleteLabelsResponse> -> executeDeleteLabels: Probability = 1.00, Count = 1
ListAlgorithmsResponse -> ListAlgorithmsResult: Probability = 1.00, Count = 1
ListAlgorithms -> listAlgorithms: Probability = 1.00, Count = 1
ListAlgorithmsRequest -> ListAlgorithmsRequest: Probability = 1.00, Count = 1
Invoke<ListAlgorithmsResponse> -> executeListAlgorithms: Probability = 1.00, Count = 1
SetShowNameAndStatusOnly -> setShowNameAndStatusOnly: Probability = 1.00, Count = 1
showNameAndStatusOnly -> showNameAndStatusOnly: Probability = 1.00, Count = 2
this.showNameAndStatusOnly -> this.showNameAndStatusOnly: Probability = 1.00, Count = 1
DeleteVpcEndpointServiceConfigurationsResponse -> DeleteVpcEndpointServiceConfigurationsResult: Probability = 1.00, Count = 1
DeleteVpcEndpointServiceConfigurations -> deleteVpcEndpointServiceConfigurations: Probability = 1.00, Count = 1
DeleteVpcEndpointServiceConfigurationsRequest -> DeleteVpcEndpointServiceConfigurationsRequest: Probability = 1.00, Count = 1
Invoke<DeleteVpcEndpointServiceConfigurationsResponse> -> executeDeleteVpcEndpointServiceConfigurations: Probability = 1.00, Count = 1
ListDeadLetterSourceQueuesResponse -> ListDeadLetterSourceQueuesResult: Probability = 1.00, Count = 1
ListDeadLetterSourceQueues -> listDeadLetterSourceQueues: Probability = 1.00, Count = 1
ListDeadLetterSourceQueuesRequest -> ListDeadLetterSourceQueuesRequest: Probability = 1.00, Count = 1
Invoke<ListDeadLetterSourceQueuesResponse> -> executeListDeadLetterSourceQueues: Probability = 1.00, Count = 1
BinaryDocValuesField -> BinaryDocValuesField: Probability = 1.00, Count = 1
CreateVpnConnectionRequest -> CreateVpnConnectionRequest: Probability = 1.00, Count = 1
customerGatewayId, -> customerGatewayId,: Probability = 1.00, Count = 1
OpenInstancePublicPortsResponse -> OpenInstancePublicPortsResult: Probability = 1.00, Count = 1
OpenInstancePublicPorts -> openInstancePublicPorts: Probability = 1.00, Count = 1
OpenInstancePublicPortsRequest -> OpenInstancePublicPortsRequest: Probability = 1.00, Count = 1
Invoke<OpenInstancePublicPortsResponse> -> executeOpenInstancePublicPorts: Probability = 1.00, Count = 1
InputIteratorWrapper -> InputIteratorWrapper: Probability = 1.00, Count = 1
IBytesRefIterator -> BytesRefIterator: Probability = 1.00, Count = 1
wrapped -> wrapped: Probability = 1.00, Count = 2
this.wrapped -> this.wrapped: Probability = 1.00, Count = 1
CreateUserProfileResponse -> CreateUserProfileResult: Probability = 1.00, Count = 1
CreateUserProfile -> createUserProfile: Probability = 1.00, Count = 1
CreateUserProfileRequest -> CreateUserProfileRequest: Probability = 1.00, Count = 1
Invoke<CreateUserProfileResponse> -> executeCreateUserProfile: Probability = 1.00, Count = 1
ImportWorkspaceImageResponse -> ImportWorkspaceImageResult: Probability = 1.00, Count = 1
ImportWorkspaceImage -> importWorkspaceImage: Probability = 1.00, Count = 1
ImportWorkspaceImageRequest -> ImportWorkspaceImageRequest: Probability = 1.00, Count = 1
Invoke<ImportWorkspaceImageResponse> -> executeImportWorkspaceImage: Probability = 1.00, Count = 1
STATE_IDLE -> STATE_IDLE: Probability = 1.00, Count = 2
DescribeFleetHistoryResponse -> DescribeFleetHistoryResult: Probability = 1.00, Count = 1
DescribeFleetHistory -> describeFleetHistory: Probability = 1.00, Count = 1
DescribeFleetHistoryRequest -> DescribeFleetHistoryRequest: Probability = 1.00, Count = 1
Invoke<DescribeFleetHistoryResponse> -> executeDescribeFleetHistory: Probability = 1.00, Count = 1
ListGatewaysResponse -> ListGatewaysResult: Probability = 1.00, Count = 1
ListGateways -> listGateways: Probability = 1.00, Count = 1
ListGatewaysRequest -> ListGatewaysRequest: Probability = 1.00, Count = 1
Invoke<ListGatewaysResponse> -> executeListGateways: Probability = 1.00, Count = 1
CreateTrafficMirrorFilterResponse -> CreateTrafficMirrorFilterResult: Probability = 1.00, Count = 1
CreateTrafficMirrorFilter -> createTrafficMirrorFilter: Probability = 1.00, Count = 1
CreateTrafficMirrorFilterRequest -> CreateTrafficMirrorFilterRequest: Probability = 1.00, Count = 1
Invoke<CreateTrafficMirrorFilterResponse> -> executeCreateTrafficMirrorFilter: Probability = 1.00, Count = 1
IChecksum -> Checksum: Probability = 1.00, Count = 1
byte[bufferSize] -> byte[bufferSize]: Probability = 1.00, Count = 1
TagCommand -> TagCommand: Probability = 1.00, Count = 2
DescribeClusterDbRevisionsResponse -> DescribeClusterDbRevisionsResult: Probability = 1.00, Count = 1
DescribeClusterDbRevisions -> describeClusterDbRevisions: Probability = 1.00, Count = 1
DescribeClusterDbRevisionsRequest -> DescribeClusterDbRevisionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeClusterDbRevisionsResponse> -> executeDescribeClusterDbRevisions: Probability = 1.00, Count = 1
StartImageScanResponse -> StartImageScanResult: Probability = 1.00, Count = 1
StartImageScan -> startImageScan: Probability = 1.00, Count = 1
StartImageScanRequest -> StartImageScanRequest: Probability = 1.00, Count = 2
Invoke<StartImageScanResponse> -> executeStartImageScan: Probability = 1.00, Count = 1
"ToFormulaString -> "toFormulaString: Probability = 1.00, Count = 1
subclasses -> subclasses: Probability = 1.00, Count = 1
OperationPtgs" -> OperationPtgs": Probability = 1.00, Count = 1
RestoreDBInstanceToPointInTimeResponse -> DBInstance: Probability = 1.00, Count = 1
RestoreDBInstanceToPointInTime -> restoreDBInstanceToPointInTime: Probability = 1.00, Count = 1
Invoke<RestoreDBInstanceToPointInTimeResponse> -> executeRestoreDBInstanceToPointInTime: Probability = 1.00, Count = 1
_mainSpgrContainer.RemoveChildRecord -> _mainSpgrContainer.removeChildRecord: Probability = 1.00, Count = 1
_shapes.Remove -> _shapes.remove: Probability = 1.00, Count = 1
DeleteAssessmentTemplateResponse -> DeleteAssessmentTemplateResult: Probability = 1.00, Count = 1
DeleteAssessmentTemplate -> deleteAssessmentTemplate: Probability = 1.00, Count = 1
DeleteAssessmentTemplateRequest -> DeleteAssessmentTemplateRequest: Probability = 1.00, Count = 1
Invoke<DeleteAssessmentTemplateResponse> -> executeDeleteAssessmentTemplate: Probability = 1.00, Count = 1
StartMonitoringScheduleResponse -> StartMonitoringScheduleResult: Probability = 1.00, Count = 1
StartMonitoringSchedule -> startMonitoringSchedule: Probability = 1.00, Count = 1
StartMonitoringScheduleRequest -> StartMonitoringScheduleRequest: Probability = 1.00, Count = 1
Invoke<StartMonitoringScheduleResponse> -> executeStartMonitoringSchedule: Probability = 1.00, Count = 1
PutRoomSkillParameterResponse -> PutRoomSkillParameterResult: Probability = 1.00, Count = 1
PutRoomSkillParameter -> putRoomSkillParameter: Probability = 1.00, Count = 1
PutRoomSkillParameterRequest -> PutRoomSkillParameterRequest: Probability = 1.00, Count = 1
Invoke<PutRoomSkillParameterResponse> -> executePutRoomSkillParameter: Probability = 1.00, Count = 1
DeleteDomainResponse -> DeleteDomainResult: Probability = 1.00, Count = 1
DeleteDomain -> deleteDomain: Probability = 1.00, Count = 1
Invoke<DeleteDomainResponse> -> executeDeleteDomain: Probability = 1.00, Count = 1
ModifyLaunchTemplateResponse -> ModifyLaunchTemplateResult: Probability = 1.00, Count = 1
ModifyLaunchTemplate -> modifyLaunchTemplate: Probability = 1.00, Count = 1
ModifyLaunchTemplateRequest -> ModifyLaunchTemplateRequest: Probability = 1.00, Count = 1
Invoke<ModifyLaunchTemplateResponse> -> executeModifyLaunchTemplate: Probability = 1.00, Count = 1
OverheadRatio -> overheadRatio: Probability = 1.00, Count = 1
GetIndexId -> getIndexId: Probability = 1.00, Count = 1
indexId -> indexId: Probability = 1.00, Count = 1
"like:" -> "like:": Probability = 1.00, Count = 1
LikeText -> likeText: Probability = 1.00, Count = 1
pload -> pload: Probability = 0.67, Count = 2
pload -> pload!=null: Probability = 0.33, Count = 1
SetNeedBaseObjectIds -> setNeedBaseObjectIds: Probability = 1.00, Count = 1
this.needBaseObjectIds -> this.needBaseObjectIds: Probability = 1.00, Count = 1
GetNextOrdinal -> getNextOrdinal: Probability = 1.00, Count = 1
this.m_counter++ -> this.counter++: Probability = 1.00, Count = 1
GetLengthA -> getLengthA: Probability = 1.00, Count = 1
SearchDevicesResponse -> SearchDevicesResult: Probability = 1.00, Count = 1
SearchDevices -> searchDevices: Probability = 1.00, Count = 1
SearchDevicesRequest -> SearchDevicesRequest: Probability = 1.00, Count = 1
Invoke<SearchDevicesResponse> -> executeSearchDevices: Probability = 1.00, Count = 1
dictionary.GetInflectionForm -> dictionary.getInflectionForm: Probability = 1.00, Count = 1
PurchaseReservedDBInstancesOfferingResponse -> ReservedDBInstance: Probability = 1.00, Count = 1
PurchaseReservedDBInstancesOffering -> purchaseReservedDBInstancesOffering: Probability = 1.00, Count = 1
PurchaseReservedDBInstancesOfferingRequest -> PurchaseReservedDBInstancesOfferingRequest: Probability = 1.00, Count = 2
Invoke<PurchaseReservedDBInstancesOfferingResponse> -> executePurchaseReservedDBInstancesOffering: Probability = 1.00, Count = 1
getReason -> getReason: Probability = 1.00, Count = 1
base.Message -> super.getMessage: Probability = 1.00, Count = 1
int[_limit] -> int[: Probability = 1.00, Count = 1
rval, -> rval,: Probability = 1.00, Count = 1
Invoke<DescribeCustomerGatewaysResponse> -> executeDescribeCustomerGateways: Probability = 1.00, Count = 1
Utf8.Utf8ToString -> utf8.utf8ToString: Probability = 1.00, Count = 1
"0.0", -> bucket: Probability = 1.00, Count = 1
ClipRect -> clipRect: Probability = 1.00, Count = 1
"clipRect -> POILogger.WARN,"clipRect: Probability = 1.00, Count = 1
StartFragment -> startFragment: Probability = 1.00, Count = 2
newFragment -> newFragment: Probability = 1.00, Count = 3
uniqueTermsInFragment -> uniqueTermsInFragment: Probability = 1.00, Count = 1
currentTextFragment -> currentTextFragment: Probability = 1.00, Count = 1
SetPolygonDrawArea -> setPolygonDrawArea: Probability = 1.00, Count = 1
EscherProperties.GEOMETRY__RIGHT, -> EscherPropertyTypes.GEOMETRY__RIGHT,: Probability = 1.00, Count = 1
EscherProperties.GEOMETRY__BOTTOM, -> EscherPropertyTypes.GEOMETRY__BOTTOM,: Probability = 1.00, Count = 1
DeleteRouteSettingsResponse -> DeleteRouteSettingsResult: Probability = 1.00, Count = 1
DeleteRouteSettings -> deleteRouteSettings: Probability = 1.00, Count = 1
DeleteRouteSettingsRequest -> DeleteRouteSettingsRequest: Probability = 1.00, Count = 1
Invoke<DeleteRouteSettingsResponse> -> executeDeleteRouteSettings: Probability = 1.00, Count = 1
CreateIfNotFound -> createIfNotFound: Probability = 1.00, Count = 2
MyEnumerator -> getRowCellBlockSize: Probability = 1.00, Count = 1
!it.MoveNext -> AttributeSource.State: Probability = 1.00, Count = 1
DeleteTemplateResponse -> DeleteTemplateResult: Probability = 1.00, Count = 1
DeleteTemplate -> deleteTemplate: Probability = 1.00, Count = 1
DeleteTemplateRequest -> DeleteTemplateRequest: Probability = 1.00, Count = 1
Invoke<DeleteTemplateResponse> -> executeDeleteTemplate: Probability = 1.00, Count = 1
StartFaceSearchResponse -> StartFaceSearchResult: Probability = 1.00, Count = 1
StartFaceSearch -> startFaceSearch: Probability = 1.00, Count = 1
StartFaceSearchRequest -> StartFaceSearchRequest: Probability = 1.00, Count = 1
Invoke<StartFaceSearchResponse> -> executeStartFaceSearch: Probability = 1.00, Count = 1
b[--o] -> b[--o]: Probability = 1.00, Count = 3
isneg -> isneg: Probability = 1.00, Count = 3
Invoke<DescribeDBSecurityGroupsResponse> -> executeDescribeDBSecurityGroups: Probability = 1.00, Count = 1
DeleteTrafficMirrorSessionResponse -> DeleteTrafficMirrorSessionResult: Probability = 1.00, Count = 1
DeleteTrafficMirrorSession -> deleteTrafficMirrorSession: Probability = 1.00, Count = 1
DeleteTrafficMirrorSessionRequest -> DeleteTrafficMirrorSessionRequest: Probability = 1.00, Count = 1
Invoke<DeleteTrafficMirrorSessionResponse> -> executeDeleteTrafficMirrorSession: Probability = 1.00, Count = 1
NormaliseBaseTwo -> normaliseBaseTwo: Probability = 1.00, Count = 1
ComposeFrac -> composeFrac: Probability = 1.00, Count = 1
39 -> 39: Probability = 1.00, Count = 1
cc.CreateExpandedDouble -> cc.createExpandedDouble: Probability = 1.00, Count = 1
PutLexiconResponse -> PutLexiconResult: Probability = 1.00, Count = 1
PutLexicon -> putLexicon: Probability = 1.00, Count = 1
PutLexiconRequest -> PutLexiconRequest: Probability = 1.00, Count = 1
Invoke<PutLexiconResponse> -> executePutLexicon: Probability = 1.00, Count = 1
perField.postingsArray.textStarts -> perField.postingsArray.textStarts: Probability = 1.00, Count = 1
GetDirCacheEntry -> getDirCacheEntry: Probability = 1.00, Count = 1
closer -> closer: Probability = 1.00, Count = 3
NOOP -> NOOP: Probability = 1.00, Count = 2
!ENABLED -> !ENABLED: Probability = 1.00, Count = 3
"Explicit -> "Explicit: Probability = 1.00, Count = 1
termination -> termination: Probability = 1.00, Count = 1
method -> method: Probability = 1.00, Count = 3
IList<ParseTreeMatch> -> List<ParseTreeMatch>: Probability = 0.67, Count = 2
IList<ParseTreeMatch> -> findAll: Probability = 0.33, Count = 1
subtrees -> subtrees: Probability = 0.67, Count = 2
subtrees -> XPath.findAll: Probability = 0.33, Count = 1
configSet.configs -> configs: Probability = 0.50, Count = 5
configSet.configs -> dup: Probability = 0.20, Count = 2
configSet.configs -> getConflictingAltSubsets: Probability = 0.10, Count = 1
configSet.configs -> =hasConflictingAltSet: Probability = 0.10, Count = 1
configSet.configs -> !hasStateAssociatedWithOneAlt: Probability = 0.10, Count = 1
heuristic -> heuristic: Probability = 1.00, Count = 2
DescribeUpdateActionsResponse -> DescribeUpdateActionsResult: Probability = 1.00, Count = 1
DescribeUpdateActions -> describeUpdateActions: Probability = 1.00, Count = 1
DescribeUpdateActionsRequest -> DescribeUpdateActionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeUpdateActionsResponse> -> executeDescribeUpdateActions: Probability = 1.00, Count = 1
HashMap -> HashMap: Probability = 1.00, Count = 2
CreateLifecyclePolicyResponse -> CreateLifecyclePolicyResult: Probability = 1.00, Count = 1
CreateLifecyclePolicy -> createLifecyclePolicy: Probability = 1.00, Count = 1
CreateLifecyclePolicyRequest -> CreateLifecyclePolicyRequest: Probability = 1.00, Count = 1
Invoke<CreateLifecyclePolicyResponse> -> executeCreateLifecyclePolicy: Probability = 1.00, Count = 1
this.m_buf -> this.buf: Probability = 1.00, Count = 1
HMMChineseTokenizerFactory -> HMMChineseTokenizerFactory: Probability = 1.00, Count = 1
ctx=" -> field:"+fieldName+": Probability = 0.50, Count = 1
ctx=" -> ctx="+ctx: Probability = 0.50, Count = 1
ResendContactReachabilityEmailResponse -> ResendContactReachabilityEmailResult: Probability = 1.00, Count = 1
ResendContactReachabilityEmail -> resendContactReachabilityEmail: Probability = 1.00, Count = 1
ResendContactReachabilityEmailRequest -> ResendContactReachabilityEmailRequest: Probability = 1.00, Count = 1
Invoke<ResendContactReachabilityEmailResponse> -> executeResendContactReachabilityEmail: Probability = 1.00, Count = 1
GetApiKeyResponse -> GetApiKeyResult: Probability = 1.00, Count = 1
GetApiKey -> getApiKey: Probability = 1.00, Count = 1
GetApiKeyRequest -> GetApiKeyRequest: Probability = 1.00, Count = 1
Invoke<GetApiKeyResponse> -> executeGetApiKey: Probability = 1.00, Count = 1
Advance -> advance: Probability = 1.00, Count = 1
++value -> ++value: Probability = 1.00, Count = 1
this.upstreamCommit -> this.upstreamCommit: Probability = 1.00, Count = 2
GetDocumentTextDetectionResponse -> GetDocumentTextDetectionResult: Probability = 1.00, Count = 1
GetDocumentTextDetection -> getDocumentTextDetection: Probability = 1.00, Count = 1
GetDocumentTextDetectionRequest -> GetDocumentTextDetectionRequest: Probability = 1.00, Count = 1
Invoke<GetDocumentTextDetectionResponse> -> executeGetDocumentTextDetection: Probability = 1.00, Count = 1
dbSecurityGroupName, -> dBSecurityGroupName,: Probability = 1.00, Count = 1
dbSecurityGroupDescription -> dBSecurityGroupDescription: Probability = 1.00, Count = 2
_dbSecurityGroupDescription -> setDBSecurityGroupDescription: Probability = 1.00, Count = 1
ICUNormalizer2CharFilter -> ICUNormalizer2CharFilter: Probability = 1.00, Count = 1
multi -> property!": Probability = 1.00, Count = 1
property!" -> props.setProperty: Probability = 1.00, Count = 1
DescribeFastSnapshotRestoresResponse -> DescribeFastSnapshotRestoresResult: Probability = 1.00, Count = 1
DescribeFastSnapshotRestores -> describeFastSnapshotRestores: Probability = 1.00, Count = 1
DescribeFastSnapshotRestoresRequest -> DescribeFastSnapshotRestoresRequest: Probability = 1.00, Count = 1
Invoke<DescribeFastSnapshotRestoresResponse> -> executeDescribeFastSnapshotRestores: Probability = 1.00, Count = 1
DescribeScheduledInstanceAvailabilityResponse -> DescribeScheduledInstanceAvailabilityResult: Probability = 1.00, Count = 1
DescribeScheduledInstanceAvailability -> describeScheduledInstanceAvailability: Probability = 1.00, Count = 1
DescribeScheduledInstanceAvailabilityRequest -> DescribeScheduledInstanceAvailabilityRequest: Probability = 1.00, Count = 1
Invoke<DescribeScheduledInstanceAvailabilityResponse> -> executeDescribeScheduledInstanceAvailability: Probability = 1.00, Count = 1
SendBonusResponse -> SendBonusResult: Probability = 1.00, Count = 1
SendBonus -> sendBonus: Probability = 1.00, Count = 1
SendBonusRequest -> SendBonusRequest: Probability = 1.00, Count = 1
Invoke<SendBonusResponse> -> executeSendBonus: Probability = 1.00, Count = 1
UnpackException -> UnpackException: Probability = 1.00, Count = 1
DescribeVpcEndpointServiceConfigurationsResponse -> DescribeVpcEndpointServiceConfigurationsResult: Probability = 1.00, Count = 1
DescribeVpcEndpointServiceConfigurations -> describeVpcEndpointServiceConfigurations: Probability = 1.00, Count = 1
DescribeVpcEndpointServiceConfigurationsRequest -> DescribeVpcEndpointServiceConfigurationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpcEndpointServiceConfigurationsResponse> -> executeDescribeVpcEndpointServiceConfigurations: Probability = 1.00, Count = 1
SetDiffComparator -> setDiffComparator: Probability = 1.00, Count = 1
DeleteServiceResponse -> DeleteServiceResult: Probability = 1.00, Count = 1
DeleteService -> deleteService: Probability = 1.00, Count = 1
DeleteServiceRequest -> DeleteServiceRequest: Probability = 1.00, Count = 1
Invoke<DeleteServiceResponse> -> executeDeleteService: Probability = 1.00, Count = 1
Ptg.EMPTY_PTG_ARRAY -> Ptg.EMPTY_PTG_ARRAY: Probability = 1.00, Count = 1
Invoke<DescribeHsmClientCertificatesResponse> -> executeDescribeHsmClientCertificates: Probability = 1.00, Count = 1
Dictionary<int, -> HashMap<>: Probability = 1.00, Count = 1
rulefilesArg -> rulefilesArg: Probability = 0.60, Count = 3
rulefilesArg -> scriptAndResourcePaths: Probability = 0.40, Count = 2
colonPos -> colonPos: Probability = 0.33, Count = 2
colonPos -> scriptCode: Probability = 0.33, Count = 2
colonPos -> scriptAndResourcePath.substring: Probability = 0.33, Count = 2
SuspendProcessesResponse -> SuspendProcessesResult: Probability = 1.00, Count = 1
SuspendProcesses -> suspendProcesses: Probability = 1.00, Count = 1
SuspendProcessesRequest -> SuspendProcessesRequest: Probability = 1.00, Count = 1
Invoke<SuspendProcessesResponse> -> executeSuspendProcesses: Probability = 1.00, Count = 1
DescribeConfigurationRevisionResponse -> DescribeConfigurationRevisionResult: Probability = 1.00, Count = 1
DescribeConfigurationRevision -> describeConfigurationRevision: Probability = 1.00, Count = 1
DescribeConfigurationRevisionRequest -> DescribeConfigurationRevisionRequest: Probability = 1.00, Count = 1
Invoke<DescribeConfigurationRevisionResponse> -> executeDescribeConfigurationRevision: Probability = 1.00, Count = 1
EMPTY_SHORT_ARRAY -> EMPTY_SHORT_ARRAY: Probability = 1.00, Count = 1
GetConflictingPaths -> getConflictingPaths: Probability = 1.00, Count = 1
inDegree -> inDegree: Probability = 1.00, Count = 1
jobFlowIds -> jobFlowIds: Probability = 1.00, Count = 4
_jobFlowIds -> setJobFlowIds: Probability = 1.00, Count = 2
DeleteMountTargetResponse -> DeleteMountTargetResult: Probability = 1.00, Count = 1
DeleteMountTarget -> deleteMountTarget: Probability = 1.00, Count = 1
DeleteMountTargetRequest -> DeleteMountTargetRequest: Probability = 1.00, Count = 1
Invoke<DeleteMountTargetResponse> -> executeDeleteMountTarget: Probability = 1.00, Count = 1
DescribeDBProxyTargetsResponse -> DescribeDBProxyTargetsResult: Probability = 1.00, Count = 1
DescribeDBProxyTargets -> describeDBProxyTargets: Probability = 1.00, Count = 1
DescribeDBProxyTargetsRequest -> DescribeDBProxyTargetsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBProxyTargetsResponse> -> executeDescribeDBProxyTargets: Probability = 1.00, Count = 1
DeleteInstanceSnapshotResponse -> DeleteInstanceSnapshotResult: Probability = 1.00, Count = 1
DeleteInstanceSnapshot -> deleteInstanceSnapshot: Probability = 1.00, Count = 1
DeleteInstanceSnapshotRequest -> DeleteInstanceSnapshotRequest: Probability = 1.00, Count = 1
Invoke<DeleteInstanceSnapshotResponse> -> executeDeleteInstanceSnapshot: Probability = 1.00, Count = 1
firstEntry -> firstEntry: Probability = 1.00, Count = 1
DeregisterTransitGatewayMulticastGroupSourcesResponse -> DeregisterTransitGatewayMulticastGroupSourcesResult: Probability = 1.00, Count = 1
DeregisterTransitGatewayMulticastGroupSources -> deregisterTransitGatewayMulticastGroupSources: Probability = 1.00, Count = 1
DeregisterTransitGatewayMulticastGroupSourcesRequest -> DeregisterTransitGatewayMulticastGroupSourcesRequest: Probability = 1.00, Count = 1
Invoke<DeregisterTransitGatewayMulticastGroupSourcesResponse> -> executeDeregisterTransitGatewayMulticastGroupSources: Probability = 1.00, Count = 1
ImportTerminologyResponse -> ImportTerminologyResult: Probability = 1.00, Count = 1
ImportTerminology -> importTerminology: Probability = 1.00, Count = 1
ImportTerminologyRequest -> ImportTerminologyRequest: Probability = 1.00, Count = 1
Invoke<ImportTerminologyResponse> -> executeImportTerminology: Probability = 1.00, Count = 1
Invoke<DescribeDBParameterGroupsResponse> -> executeDescribeDBParameterGroups: Probability = 1.00, Count = 1
CreateSetBasedOnMaxMemory -> createSetBasedOnMaxMemory: Probability = 1.00, Count = 1
maxNumBytes -> maxNumBytes: Probability = 1.00, Count = 2
FixedBitSet -> FixedBitSet: Probability = 1.00, Count = 2
setSize -> setSize+1: Probability = 1.00, Count = 2
setSize, -> ,setSize,: Probability = 1.00, Count = 2
BundleWriter -> BundleWriter: Probability = 1.00, Count = 1
assume -> assume: Probability = 1.00, Count = 1
HashSet<ObjectId> -> HashSet<>: Probability = 1.00, Count = 2
tagTargets -> tagTargets: Probability = 1.00, Count = 1
AssociateDomainResponse -> AssociateDomainResult: Probability = 1.00, Count = 1
AssociateDomain -> associateDomain: Probability = 1.00, Count = 1
AssociateDomainRequest -> AssociateDomainRequest: Probability = 1.00, Count = 1
Invoke<AssociateDomainResponse> -> executeAssociateDomain: Probability = 1.00, Count = 1
GetInstancePortStatesResponse -> GetInstancePortStatesResult: Probability = 1.00, Count = 1
GetInstancePortStates -> getInstancePortStates: Probability = 1.00, Count = 1
GetInstancePortStatesRequest -> GetInstancePortStatesRequest: Probability = 1.00, Count = 1
Invoke<GetInstancePortStatesResponse> -> executeGetInstancePortStates: Probability = 1.00, Count = 1
SrndTruncQuery -> SrndTruncQuery: Probability = 1.00, Count = 1
truncated, -> truncated,: Probability = 1.00, Count = 1
unlimited, -> unlimited,: Probability = 1.00, Count = 1
this.truncated -> this.truncated: Probability = 1.00, Count = 1
truncated -> truncated: Probability = 1.00, Count = 1
this.unlimited -> this.unlimited: Probability = 1.00, Count = 1
unlimited -> unlimited: Probability = 1.00, Count = 1
TruncatedToPrefixAndPattern -> truncatedToPrefixAndPattern: Probability = 1.00, Count = 1
from: -> 1: Probability = 1.00, Count = 1
stats.NumberOfDocuments, -> ,"N,: Probability = 1.00, Count = 2
DeleteBaiduChannelResponse -> DeleteBaiduChannelResult: Probability = 1.00, Count = 1
DeleteBaiduChannel -> deleteBaiduChannel: Probability = 1.00, Count = 1
DeleteBaiduChannelRequest -> DeleteBaiduChannelRequest: Probability = 1.00, Count = 1
Invoke<DeleteBaiduChannelResponse> -> executeDeleteBaiduChannel: Probability = 1.00, Count = 1
UnlinkDeveloperIdentityResponse -> UnlinkDeveloperIdentityResult: Probability = 1.00, Count = 1
UnlinkDeveloperIdentity -> unlinkDeveloperIdentity: Probability = 1.00, Count = 1
UnlinkDeveloperIdentityRequest -> UnlinkDeveloperIdentityRequest: Probability = 1.00, Count = 1
Invoke<UnlinkDeveloperIdentityResponse> -> executeUnlinkDeveloperIdentity: Probability = 1.00, Count = 1
SimpleBoundaryScanner -> SimpleBoundaryScanner: Probability = 1.00, Count = 2
maxScan, -> maxScan,: Probability = 0.67, Count = 2
maxScan, -> Character[]: Probability = 0.33, Count = 1
boundaryChars -> boundaryChars: Probability = 1.00, Count = 4
this.m_maxScan -> this.maxScan: Probability = 1.00, Count = 2
maxScan -> maxScan: Probability = 1.00, Count = 2
this.m_boundaryChars -> this.boundaryChars: Probability = 1.00, Count = 2
JCG.HashSet<char> -> this.boundaryChars.addAll: Probability = 1.00, Count = 1
this.m_boundaryChars.UnionWith -> Arrays.asList: Probability = 1.00, Count = 1
CreateLogGroupRequest -> CreateLogGroupRequest: Probability = 1.00, Count = 1
GetDefaultStopTags -> getDefaultStopTags: Probability = 1.00, Count = 1
DefaultSetHolder.DEFAULT_STOP_TAGS -> DefaultSetHolder.DEFAULT_STOP_TAGS: Probability = 1.00, Count = 1
ModifyInstanceFleetResponse -> ModifyInstanceFleetResult: Probability = 1.00, Count = 1
ModifyInstanceFleet -> modifyInstanceFleet: Probability = 1.00, Count = 1
ModifyInstanceFleetRequest -> ModifyInstanceFleetRequest: Probability = 1.00, Count = 1
Invoke<ModifyInstanceFleetResponse> -> executeModifyInstanceFleet: Probability = 1.00, Count = 1
RemoveCharCount -> removeCharCount: Probability = 1.00, Count = 1
PropertyIDMap.PID_CHARCOUNT -> PropertyIDMap.PID_CHARCOUNT: Probability = 1.00, Count = 1
CreateCapacityReservationResponse -> CreateCapacityReservationResult: Probability = 1.00, Count = 1
CreateCapacityReservation -> createCapacityReservation: Probability = 1.00, Count = 1
CreateCapacityReservationRequest -> CreateCapacityReservationRequest: Probability = 1.00, Count = 1
Invoke<CreateCapacityReservationResponse> -> executeCreateCapacityReservation: Probability = 1.00, Count = 1
whatFollowsLoopIterationOrRule -> whatFollowsLoopIterationOrRule: Probability = 1.00, Count = 2
_didNext -> !didNext: Probability = 1.00, Count = 1
_liveDocs -> didNext: Probability = 1.00, Count = 1
_doc -> doc: Probability = 0.67, Count = 2
_doc -> NO_MORE_DOCS: Probability = 0.33, Count = 1
aliased -> name: Probability = 0.27, Count = 3
aliased -> IllegalCharsetNameException|: Probability = 0.09, Count = 1
aliased -> UnsupportedCharsetException: Probability = 0.09, Count = 1
aliased -> badName: Probability = 0.18, Count = 2
aliased -> aliased: Probability = 0.27, Count = 3
aliased -> charsetForAlias: Probability = 0.09, Count = 1
BatchGetVariableResponse -> BatchGetVariableResult: Probability = 1.00, Count = 1
BatchGetVariable -> batchGetVariable: Probability = 1.00, Count = 1
BatchGetVariableRequest -> BatchGetVariableRequest: Probability = 1.00, Count = 1
Invoke<BatchGetVariableResponse> -> executeBatchGetVariable: Probability = 1.00, Count = 1
"REPEAT_EXHAUST -> "REPEAT_EXHAUST: Probability = 1.00, Count = 1
tasks" -> tasks": Probability = 1.00, Count = 1
inPtr, -> inPtr,: Probability = 1.00, Count = 2
inEnd -> inEnd: Probability = 0.67, Count = 4
inEnd -> in[inPtr]: Probability = 0.17, Count = 1
inEnd -> dq: Probability = 0.17, Count = 1
inPtr -> inPtr: Probability = 1.00, Count = 2
'"' -> '"': Probability = 0.67, Count = 4
'"' -> in[inEnd: Probability = 0.17, Count = 1
'"' -> _textValue: Probability = 0.17, Count = 1
ModifyCacheClusterResponse -> CacheCluster: Probability = 1.00, Count = 1
ModifyCacheCluster -> modifyCacheCluster: Probability = 1.00, Count = 1
ModifyCacheClusterRequest -> ModifyCacheClusterRequest: Probability = 1.00, Count = 1
Invoke<ModifyCacheClusterResponse> -> executeModifyCacheCluster: Probability = 1.00, Count = 1
byte[size] -> byte[size]: Probability = 1.00, Count = 2
SetMaxDeltaDepth -> setMaxDeltaDepth: Probability = 1.00, Count = 1
this.maxDeltaDepth -> this.maxDeltaDepth: Probability = 1.00, Count = 1
LogDocMergePolicy -> LogDocMergePolicy: Probability = 1.00, Count = 1
DEFAULT_MIN_MERGE_DOCS -> DEFAULT_MIN_MERGE_DOCS: Probability = 1.00, Count = 1
long.MaxValue -> Long.MAX_VALUE: Probability = 1.00, Count = 2
BM25Similarity -> BM25Similarity: Probability = 1.00, Count = 1
1.2f -> 1.2f,: Probability = 1.00, Count = 1
0.75f -> 0.75f: Probability = 1.00, Count = 1
PutLifecycleHookResponse -> PutLifecycleHookResult: Probability = 1.00, Count = 1
PutLifecycleHook -> putLifecycleHook: Probability = 1.00, Count = 1
PutLifecycleHookRequest -> PutLifecycleHookRequest: Probability = 1.00, Count = 1
Invoke<PutLifecycleHookResponse> -> executePutLifecycleHook: Probability = 1.00, Count = 1
idealLongArraySize -> idealLongArraySize: Probability = 1.00, Count = 1
biffName -> biffName: Probability = 0.71, Count = 5
biffName -> getBiffName: Probability = 0.14, Count = 1
biffName -> "UNKNOWNRECORD": Probability = 0.14, Count = 1
payloadIndex[positionIndex -> payload.offset: Probability = 0.17, Count = 1
payloadIndex[positionIndex -> basePayloadOffset: Probability = 0.17, Count = 1
payloadIndex[positionIndex -> payloadIndex[positionIndex: Probability = 0.50, Count = 3
payloadIndex[positionIndex -> payload.length: Probability = 0.17, Count = 1
MergeDeveloperIdentitiesResponse -> MergeDeveloperIdentitiesResult: Probability = 1.00, Count = 1
MergeDeveloperIdentities -> mergeDeveloperIdentities: Probability = 1.00, Count = 1
MergeDeveloperIdentitiesRequest -> MergeDeveloperIdentitiesRequest: Probability = 1.00, Count = 1
Invoke<MergeDeveloperIdentitiesResponse> -> executeMergeDeveloperIdentities: Probability = 1.00, Count = 1
ReplaceNetworkAclEntryResponse -> ReplaceNetworkAclEntryResult: Probability = 1.00, Count = 1
ReplaceNetworkAclEntry -> replaceNetworkAclEntry: Probability = 1.00, Count = 1
ReplaceNetworkAclEntryRequest -> ReplaceNetworkAclEntryRequest: Probability = 1.00, Count = 1
Invoke<ReplaceNetworkAclEntryResponse> -> executeReplaceNetworkAclEntry: Probability = 1.00, Count = 1
IsFastForward -> isFastForward: Probability = 1.00, Count = 1
List<int> -> List<Integer>: Probability = 0.50, Count = 2
List<int> -> getLLDecisions: Probability = 0.25, Count = 1
List<int> -> ArrayList<Integer>: Probability = 0.25, Count = 1
LL -> LL: Probability = 1.00, Count = 2
fallBack -> fallBack: Probability = 0.25, Count = 1
fallBack -> decisions[i].LL_Fallback: Probability = 0.25, Count = 1
fallBack -> fallBack>0: Probability = 0.25, Count = 1
fallBack -> LL.add: Probability = 0.25, Count = 1
UpdateModelResponse -> UpdateModelResult: Probability = 1.00, Count = 1
UpdateModel -> updateModel: Probability = 1.00, Count = 1
UpdateModelRequest -> UpdateModelRequest: Probability = 1.00, Count = 1
Invoke<UpdateModelResponse> -> executeUpdateModel: Probability = 1.00, Count = 1
getEndIndex -> getEndIndex: Probability = 1.00, Count = 1
DeleteVPCAssociationAuthorizationResponse -> DeleteVPCAssociationAuthorizationResult: Probability = 1.00, Count = 1
DeleteVPCAssociationAuthorization -> deleteVPCAssociationAuthorization: Probability = 1.00, Count = 1
DeleteVPCAssociationAuthorizationRequest -> DeleteVPCAssociationAuthorizationRequest: Probability = 1.00, Count = 1
Invoke<DeleteVPCAssociationAuthorizationResponse> -> executeDeleteVPCAssociationAuthorization: Probability = 1.00, Count = 1
GetMediaResponse -> GetMediaResult: Probability = 1.00, Count = 1
GetMedia -> getMedia: Probability = 1.00, Count = 1
GetMediaRequest -> GetMediaRequest: Probability = 1.00, Count = 1
Invoke<GetMediaResponse> -> executeGetMedia: Probability = 1.00, Count = 1
RestoreTableFromClusterSnapshotResponse -> TableRestoreStatus: Probability = 1.00, Count = 1
RestoreTableFromClusterSnapshot -> restoreTableFromClusterSnapshot: Probability = 1.00, Count = 1
RestoreTableFromClusterSnapshotRequest -> RestoreTableFromClusterSnapshotRequest: Probability = 1.00, Count = 1
Invoke<RestoreTableFromClusterSnapshotResponse> -> executeRestoreTableFromClusterSnapshot: Probability = 1.00, Count = 1
fields, -> fields,: Probability = 1.00, Count = 2
UpdateQualificationTypeResponse -> UpdateQualificationTypeResult: Probability = 1.00, Count = 1
UpdateQualificationType -> updateQualificationType: Probability = 1.00, Count = 1
UpdateQualificationTypeRequest -> UpdateQualificationTypeRequest: Probability = 1.00, Count = 1
Invoke<UpdateQualificationTypeResponse> -> executeUpdateQualificationType: Probability = 1.00, Count = 1
RemoveTemplate -> removeTemplate: Probability = 1.00, Count = 1
PropertyIDMap.PID_TEMPLATE -> PropertyIDMap.PID_TEMPLATE: Probability = 1.00, Count = 1
nInnerArgs -> nInnerArgs: Probability = 0.25, Count = 2
nInnerArgs -> innerFunc: Probability = 0.25, Count = 2
nInnerArgs -> functionCode: Probability = 0.50, Count = 4
innerArgs, -> lazyRefEval.isRowHidden: Probability = 0.33, Count = 1
innerArgs, -> innerFunc.evaluate: Probability = 0.33, Count = 1
innerArgs, -> ValueEval[0]: Probability = 0.33, Count = 1
InstanceGroupConfig -> InstanceGroupConfig: Probability = 1.00, Count = 1
InstanceRoleType -> InstanceRoleType: Probability = 0.50, Count = 1
InstanceRoleType -> instanceRole,: Probability = 0.50, Count = 1
instanceRole, -> instanceType,: Probability = 1.00, Count = 1
_instanceRole -> instanceRole.toString: Probability = 1.00, Count = 1
_instanceType -> setInstanceType: Probability = 1.00, Count = 1
instanceType -> instanceType: Probability = 1.00, Count = 1
DescribeTrialComponentResponse -> DescribeTrialComponentResult: Probability = 1.00, Count = 1
DescribeTrialComponent -> describeTrialComponent: Probability = 1.00, Count = 1
DescribeTrialComponentRequest -> DescribeTrialComponentRequest: Probability = 1.00, Count = 1
Invoke<DescribeTrialComponentResponse> -> executeDescribeTrialComponent: Probability = 1.00, Count = 1
AssociateSubnetCidrBlockResponse -> AssociateSubnetCidrBlockResult: Probability = 1.00, Count = 1
AssociateSubnetCidrBlock -> associateSubnetCidrBlock: Probability = 1.00, Count = 1
AssociateSubnetCidrBlockRequest -> AssociateSubnetCidrBlockRequest: Probability = 1.00, Count = 1
Invoke<AssociateSubnetCidrBlockResponse> -> executeAssociateSubnetCidrBlock: Probability = 1.00, Count = 1
attributeNames -> attributeNames: Probability = 0.67, Count = 2
attributeNames -> .withAttributeNames: Probability = 0.33, Count = 1
GetBeginA -> getBeginA: Probability = 1.00, Count = 1
"NoLock" -> "NoLock": Probability = 1.00, Count = 1
backingMap.containsKey -> backingMap.containsKey: Probability = 1.00, Count = 1
shapes -> shapes: Probability = 1.00, Count = 1
"PerFieldAnalyzerWrapper -> "PerFieldAnalyzerWrapper: Probability = 1.00, Count = 1
fieldAnalyzers -> fieldAnalyzers: Probability = 0.80, Count = 4
fieldAnalyzers -> PER_FIELD_REUSE_STRATEGY: Probability = 0.20, Count = 1
default=" -> default=": Probability = 1.00, Count = 1
defaultAnalyzer -> defaultAnalyzer: Probability = 1.00, Count = 2
avaliable -> available: Probability = 1.00, Count = 3
bytesWritten -> bytesWritten: Probability = 1.00, Count = 7
childBytesWritten -> childBytesWritten: Probability = 0.80, Count = 8
childBytesWritten -> child.fillFields: Probability = 0.20, Count = 2
AssociatePhoneNumberWithUserResponse -> AssociatePhoneNumberWithUserResult: Probability = 1.00, Count = 1
AssociatePhoneNumberWithUser -> associatePhoneNumberWithUser: Probability = 1.00, Count = 1
AssociatePhoneNumberWithUserRequest -> AssociatePhoneNumberWithUserRequest: Probability = 1.00, Count = 1
Invoke<AssociatePhoneNumberWithUserResponse> -> executeAssociatePhoneNumberWithUser: Probability = 1.00, Count = 1
FieldQuery -> FieldQuery: Probability = 0.50, Count = 2
FieldQuery -> getFieldQuery: Probability = 0.50, Count = 2
GetXBATEntriesPerBlock -> getXBATEntriesPerBlock: Probability = 1.00, Count = 1
GetBATEntriesPerBlock -> getBATEntriesPerBlock: Probability = 1.00, Count = 2
crA.FirstRow -> crA.getFirstRow: Probability = 0.57, Count = 4
crA.FirstRow -> crA.getLastRow: Probability = 0.43, Count = 3
lt -> lt: Probability = 1.00, Count = 3
crA.LastColumn -> maxCol: Probability = 0.29, Count = 2
crA.LastColumn -> ?crB.getLastColumn: Probability = 0.14, Count = 1
crA.LastColumn -> :crA.getLastColumn: Probability = 0.14, Count = 1
crA.LastColumn -> minRow,: Probability = 0.14, Count = 1
crA.LastColumn -> maxRow,: Probability = 0.14, Count = 1
crA.LastColumn -> minCol,: Probability = 0.14, Count = 1
crA.FirstColumn -> crA.getLastColumn: Probability = 0.50, Count = 3
crA.FirstColumn -> crA.getFirstColumn: Probability = 0.50, Count = 3
crB.LastColumn -> (: Probability = 1.00, Count = 1
SetLineStyleColor -> setLineStyleColor: Probability = 1.00, Count = 1
lineStyleColor -> lineStyleColor: Probability = 1.00, Count = 2
EscherProperties.LINESTYLE__COLOR, -> EscherPropertyTypes.LINESTYLE__COLOR,: Probability = 1.00, Count = 1
CreateFileSystemResponse -> CreateFileSystemResult: Probability = 1.00, Count = 1
CreateFileSystem -> createFileSystem: Probability = 1.00, Count = 1
CreateFileSystemRequest -> CreateFileSystemRequest: Probability = 1.00, Count = 1
Invoke<CreateFileSystemResponse> -> executeCreateFileSystem: Probability = 1.00, Count = 1
toRead -> toRead: Probability = 1.00, Count = 2
AddPushRefSpec -> addPushRefSpec: Probability = 1.00, Count = 1
push.Contains -> push.contains: Probability = 1.00, Count = 1
push.AddItem -> push.add: Probability = 1.00, Count = 1
ViewBillingResponse -> ViewBillingResult: Probability = 1.00, Count = 1
ViewBilling -> viewBilling: Probability = 1.00, Count = 1
ViewBillingRequest -> ViewBillingRequest: Probability = 1.00, Count = 1
Invoke<ViewBillingResponse> -> executeViewBilling: Probability = 1.00, Count = 1
GetSpanQuery -> getSpanQuery: Probability = 1.00, Count = 2
"IOException -> "IOException: Probability = 1.00, Count = 2
UpdateGateway -> updateGateway: Probability = 1.00, Count = 1
UpdateGatewayRequest -> UpdateGatewayRequest: Probability = 1.00, Count = 1
Invoke<UpdateGatewayResponse> -> executeUpdateGateway: Probability = 1.00, Count = 1
GetCachedBooleanValue -> getCachedBooleanValue: Probability = 1.00, Count = 1
specialCachedValue.GetBooleanValue -> specialCachedValue.getBooleanValue: Probability = 1.00, Count = 1
DeleteIdentityPoolResponse -> DeleteIdentityPoolResult: Probability = 1.00, Count = 1
DeleteIdentityPool -> deleteIdentityPool: Probability = 1.00, Count = 1
DeleteIdentityPoolRequest -> DeleteIdentityPoolRequest: Probability = 1.00, Count = 1
Invoke<DeleteIdentityPoolResponse> -> executeDeleteIdentityPool: Probability = 1.00, Count = 1
PutSuppressedDestinationResponse -> PutSuppressedDestinationResult: Probability = 1.00, Count = 1
PutSuppressedDestination -> putSuppressedDestination: Probability = 1.00, Count = 1
PutSuppressedDestinationRequest -> PutSuppressedDestinationRequest: Probability = 1.00, Count = 1
Invoke<PutSuppressedDestinationResponse> -> executePutSuppressedDestination: Probability = 1.00, Count = 1
PutEventsResponse -> PutEventsResult: Probability = 1.00, Count = 1
PutEvents -> putEvents: Probability = 1.00, Count = 1
PutEventsRequest -> PutEventsRequest: Probability = 1.00, Count = 1
Invoke<PutEventsResponse> -> executePutEvents: Probability = 1.00, Count = 1
GetRecommendationsResponse -> GetRecommendationsResult: Probability = 1.00, Count = 1
GetRecommendations -> getRecommendations: Probability = 1.00, Count = 1
GetRecommendationsRequest -> GetRecommendationsRequest: Probability = 1.00, Count = 1
Invoke<GetRecommendationsResponse> -> executeGetRecommendations: Probability = 1.00, Count = 1
SegmentInfo -> SegmentInfo: Probability = 0.75, Count = 3
SegmentInfo -> other.dir: Probability = 0.25, Count = 1
other.Name.Equals -> other.name.equals: Probability = 1.00, Count = 1
NPOI.SS.UserModel.IDataFormat -> HSSFDataFormat: Probability = 1.00, Count = 3
CreateDataFormat -> createDataFormat: Probability = 1.00, Count = 2
UpdateFaceRequest -> UpdateFaceRequest: Probability = 1.00, Count = 1
"UpdateFace" -> "UpdateFace": Probability = 1.00, Count = 1
ModifyVpcEndpointServicePermissionsResponse -> ModifyVpcEndpointServicePermissionsResult: Probability = 1.00, Count = 1
ModifyVpcEndpointServicePermissions -> modifyVpcEndpointServicePermissions: Probability = 1.00, Count = 1
ModifyVpcEndpointServicePermissionsRequest -> ModifyVpcEndpointServicePermissionsRequest: Probability = 1.00, Count = 1
Invoke<ModifyVpcEndpointServicePermissionsResponse> -> executeModifyVpcEndpointServicePermissions: Probability = 1.00, Count = 1
s.nextTokenWithinRule -> s.nextTokenWithinRule: Probability = 0.80, Count = 4
s.nextTokenWithinRule -> s.nextTokenWithinRule.setReadonly: Probability = 0.20, Count = 1
GetResourceResponse -> GetResourceResult: Probability = 1.00, Count = 1
GetResource -> getResource: Probability = 1.00, Count = 1
GetResourceRequest -> GetResourceRequest: Probability = 1.00, Count = 1
Invoke<GetResourceResponse> -> executeGetResource: Probability = 1.00, Count = 1
CreateFacetResponse -> CreateFacetResult: Probability = 1.00, Count = 1
CreateFacet -> createFacet: Probability = 1.00, Count = 1
CreateFacetRequest -> CreateFacetRequest: Probability = 1.00, Count = 1
Invoke<CreateFacetResponse> -> executeCreateFacet: Probability = 1.00, Count = 1
PrintOrientation -> PrintOrientation: Probability = 1.00, Count = 1
DefineExpressionResponse -> DefineExpressionResult: Probability = 1.00, Count = 1
DefineExpression -> defineExpression: Probability = 1.00, Count = 1
DefineExpressionRequest -> DefineExpressionRequest: Probability = 1.00, Count = 1
Invoke<DefineExpressionResponse> -> executeDefineExpression: Probability = 1.00, Count = 1
GetLastModified -> getLastModified: Probability = 1.00, Count = 1
lastModified -> attributes.getLastModifiedInstant: Probability = 0.50, Count = 1
lastModified -> .toEpochMilli: Probability = 0.50, Count = 1
StartEntitiesDetectionJobResponse -> StartEntitiesDetectionJobResult: Probability = 1.00, Count = 1
StartEntitiesDetectionJob -> startEntitiesDetectionJob: Probability = 1.00, Count = 1
StartEntitiesDetectionJobRequest -> StartEntitiesDetectionJobRequest: Probability = 1.00, Count = 1
Invoke<StartEntitiesDetectionJobResponse> -> executeStartEntitiesDetectionJob: Probability = 1.00, Count = 1
ProcessMatch -> processMatch: Probability = 1.00, Count = 1
TokenTagToken -> TokenTagToken: Probability = 1.00, Count = 1
this.tokenName -> this.tokenName: Probability = 1.00, Count = 1
this.label -> this.label: Probability = 1.00, Count = 1
ByteOffset -> byteOffset: Probability = 1.00, Count = 3
BYTE_BLOCK_SIZE -> BYTE_BLOCK_SIZE: Probability = 1.00, Count = 3
UpdateExpirationForHITResponse -> UpdateExpirationForHITResult: Probability = 1.00, Count = 1
UpdateExpirationForHIT -> updateExpirationForHIT: Probability = 1.00, Count = 1
UpdateExpirationForHITRequest -> UpdateExpirationForHITRequest: Probability = 1.00, Count = 1
Invoke<UpdateExpirationForHITResponse> -> executeUpdateExpirationForHIT: Probability = 1.00, Count = 1
UpdateApplicationVersionRequest -> UpdateApplicationVersionRequest: Probability = 1.00, Count = 1
lt, -> lt,: Probability = 1.00, Count = 2
'>' -> '>': Probability = 1.00, Count = 1
SimpleFormat -> simpleFormat: Probability = 1.00, Count = 1
StempelFilter -> StempelFilter: Probability = 1.00, Count = 2
minLength -> stemmer,: Probability = 0.33, Count = 1
minLength -> minLength: Probability = 0.67, Count = 2
this.keywordAtt -> this.minLength: Probability = 1.00, Count = 1
GetIntegrationResponseResponse -> GetIntegrationResponseResult: Probability = 1.00, Count = 1
GetIntegrationResponseRequest -> GetIntegrationResponseRequest: Probability = 1.00, Count = 1
Invoke<GetIntegrationResponseResponse> -> executeGetIntegrationResponse: Probability = 1.00, Count = 1
PostToConnectionResponse -> PostToConnectionResult: Probability = 1.00, Count = 1
PostToConnection -> postToConnection: Probability = 1.00, Count = 1
PostToConnectionRequest -> PostToConnectionRequest: Probability = 1.00, Count = 1
Invoke<PostToConnectionResponse> -> executePostToConnection: Probability = 1.00, Count = 1
TermRangeQueryNode -> TermRangeQueryNode: Probability = 1.00, Count = 1
FieldQueryNode -> FieldQueryNode: Probability = 1.00, Count = 2
upper,bool -> upper,boolean: Probability = 1.00, Count = 1
lowerInclusive, -> lowerInclusive,: Probability = 1.00, Count = 2
upperInclusive -> upperInclusive: Probability = 1.00, Count = 2
SetBounds -> setBounds: Probability = 1.00, Count = 1
CreateSchemaResponse -> CreateSchemaResult: Probability = 1.00, Count = 1
CreateSchema -> createSchema: Probability = 1.00, Count = 1
CreateSchemaRequest -> CreateSchemaRequest: Probability = 1.00, Count = 1
Invoke<CreateSchemaResponse> -> executeCreateSchema: Probability = 1.00, Count = 1
word.ToCharArray -> word.toCharArray: Probability = 1.00, Count = 1
word.Length -> word.length: Probability = 1.00, Count = 1
DeleteSmsTemplateResponse -> DeleteSmsTemplateResult: Probability = 1.00, Count = 1
DeleteSmsTemplate -> deleteSmsTemplate: Probability = 1.00, Count = 1
DeleteSmsTemplateRequest -> DeleteSmsTemplateRequest: Probability = 1.00, Count = 1
Invoke<DeleteSmsTemplateResponse> -> executeDeleteSmsTemplate: Probability = 1.00, Count = 1
SetPassword -> setPassword: Probability = 1.00, Count = 1
pw -> pw: Probability = 1.00, Count = 4
PutVoiceConnectorLoggingConfigurationResponse -> PutVoiceConnectorLoggingConfigurationResult: Probability = 1.00, Count = 1
PutVoiceConnectorLoggingConfiguration -> putVoiceConnectorLoggingConfiguration: Probability = 1.00, Count = 1
PutVoiceConnectorLoggingConfigurationRequest -> PutVoiceConnectorLoggingConfigurationRequest: Probability = 1.00, Count = 1
Invoke<PutVoiceConnectorLoggingConfigurationResponse> -> executePutVoiceConnectorLoggingConfiguration: Probability = 1.00, Count = 1
isAbsolute -> isAbsolute: Probability = 1.00, Count = 1
volumeId, -> volumeId,: Probability = 1.00, Count = 2
IReaderIterator -> ReaderIterator: Probability = 1.00, Count = 1
GetReaderIteratorNoHeader -> getReaderIteratorNoHeader: Probability = 1.00, Count = 1
PackedReaderIterator -> PackedReaderIterator: Probability = 1.00, Count = 1
StashDropCommand -> StashDropCommand: Probability = 1.00, Count = 2
StashDrop -> stashDrop: Probability = 1.00, Count = 1
isUnmappable -> isUnmappable: Probability = 1.00, Count = 1
_buf[_ReadIndex++] -> read: Probability = 1.00, Count = 1
UpdateAddressBookResponse -> UpdateAddressBookResult: Probability = 1.00, Count = 1
UpdateAddressBook -> updateAddressBook: Probability = 1.00, Count = 1
UpdateAddressBookRequest -> UpdateAddressBookRequest: Probability = 1.00, Count = 1
Invoke<UpdateAddressBookResponse> -> executeUpdateAddressBook: Probability = 1.00, Count = 1
Invoke<DescribeAccountAttributesResponse> -> executeDescribeAccountAttributes: Probability = 1.00, Count = 1
CommitTimeRevFilterBefore -> Before: Probability = 0.50, Count = 1
CommitTimeRevFilterBefore -> ts.getTime: Probability = 0.50, Count = 1
DescribeClusterParameterGroupsResponse -> DescribeClusterParameterGroupsResult: Probability = 1.00, Count = 2
DescribeClusterParameterGroups -> describeClusterParameterGroups: Probability = 1.00, Count = 3
DescribeClusterParameterGroupsRequest -> DescribeClusterParameterGroupsRequest: Probability = 1.00, Count = 2
Invoke<DescribeClusterParameterGroupsResponse> -> executeDescribeClusterParameterGroups: Probability = 1.00, Count = 1
BatchGetApplicationsResponse -> BatchGetApplicationsResult: Probability = 1.00, Count = 1
BatchGetApplications -> batchGetApplications: Probability = 1.00, Count = 1
BatchGetApplicationsRequest -> BatchGetApplicationsRequest: Probability = 1.00, Count = 1
Invoke<BatchGetApplicationsResponse> -> executeBatchGetApplications: Probability = 1.00, Count = 1
"dels=" -> "dels=": Probability = 1.00, Count = 1
evaluatorForFunction -> evaluatorForFunction: Probability = 0.57, Count = 4
evaluatorForFunction -> pack: Probability = 0.14, Count = 1
evaluatorForFunction -> _usedToolPacks: Probability = 0.14, Count = 1
evaluatorForFunction -> pack.findFunction: Probability = 0.14, Count = 1
VerifyLabel -> verifyLabel: Probability = 1.00, Count = 1
setReadOnly -> setReadOnly: Probability = 1.00, Count = 1
setWritable -> setWritable: Probability = 1.00, Count = 1
CopyImageResponse -> CopyImageResult: Probability = 1.00, Count = 1
CopyImage -> copyImage: Probability = 1.00, Count = 1
CopyImageRequest -> CopyImageRequest: Probability = 1.00, Count = 1
Invoke<CopyImageResponse> -> executeCopyImage: Probability = 1.00, Count = 1
CreateTrainingJobResponse -> CreateTrainingJobResult: Probability = 1.00, Count = 1
CreateTrainingJob -> createTrainingJob: Probability = 1.00, Count = 1
CreateTrainingJobRequest -> CreateTrainingJobRequest: Probability = 1.00, Count = 1
Invoke<CreateTrainingJobResponse> -> executeCreateTrainingJob: Probability = 1.00, Count = 1
Invoke<DescribeDomainsResponse> -> executeDescribeDomains: Probability = 1.00, Count = 1
"ngram -> "ngram: Probability = 1.00, Count = 1
FormatMatches -> formatMatches: Probability = 1.00, Count = 1
other._xf_index -> other._xfIndex: Probability = 1.00, Count = 1
other._options -> other._options: Probability = 1.00, Count = 1
_col_width -> _colWidth: Probability = 1.00, Count = 1
other._col_width -> other._colWidth: Probability = 1.00, Count = 1
java.nio.ReadOnlyCharArrayBuffer.copy -> ReadOnlyCharArrayBuffer.copy: Probability = 1.00, Count = 1
GetEventStreamResponse -> GetEventStreamResult: Probability = 1.00, Count = 1
GetEventStream -> getEventStream: Probability = 1.00, Count = 1
GetEventStreamRequest -> GetEventStreamRequest: Probability = 1.00, Count = 1
Invoke<GetEventStreamResponse> -> executeGetEventStream: Probability = 1.00, Count = 1
Invoke<SendMessageBatchResponse> -> executeSendMessageBatch: Probability = 1.00, Count = 1
DescribeDirectConnectGatewayAttachmentsResponse -> DescribeDirectConnectGatewayAttachmentsResult: Probability = 1.00, Count = 1
DescribeDirectConnectGatewayAttachments -> describeDirectConnectGatewayAttachments: Probability = 1.00, Count = 1
DescribeDirectConnectGatewayAttachmentsRequest -> DescribeDirectConnectGatewayAttachmentsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDirectConnectGatewayAttachmentsResponse> -> executeDescribeDirectConnectGatewayAttachments: Probability = 1.00, Count = 1
addedList -> addedList: Probability = 1.00, Count = 2
findTokens -> findTokens: Probability = 1.00, Count = 1
_findAllNodes -> _findAllNodes: Probability = 1.00, Count = 1
EscherOptRecord -> containsChart: Probability = 0.33, Count = 1
EscherOptRecord -> EscherOptRecord: Probability = 0.67, Count = 2
optRecord -> optRecord: Probability = 1.00, Count = 2
StopInstanceResponse -> StopInstanceResult: Probability = 1.00, Count = 1
StopInstance -> stopInstance: Probability = 1.00, Count = 1
StopInstanceRequest -> StopInstanceRequest: Probability = 1.00, Count = 1
Invoke<StopInstanceResponse> -> executeStopInstance: Probability = 1.00, Count = 1
RemoveTagsResponse -> RemoveTagsResult: Probability = 1.00, Count = 1
RemoveTags -> removeTags: Probability = 1.00, Count = 1
Invoke<RemoveTagsResponse> -> executeRemoveTags: Probability = 1.00, Count = 1
ByteCount -> byteCount: Probability = 1.00, Count = 2
8L -> Math.ceil: Probability = 0.50, Count = 1
8L -> bitsPerValue: Probability = 0.50, Count = 1
_queueName -> setQueueName: Probability = 1.00, Count = 1
escherRecords.Insert -> escherRecords.add: Probability = 1.00, Count = 1
ListInstanceGroupsResponse -> ListInstanceGroupsResult: Probability = 1.00, Count = 1
ListInstanceGroups -> listInstanceGroups: Probability = 1.00, Count = 1
ListInstanceGroupsRequest -> ListInstanceGroupsRequest: Probability = 1.00, Count = 1
Invoke<ListInstanceGroupsResponse> -> executeListInstanceGroups: Probability = 1.00, Count = 1
TruncateTokenFilterFactory -> TruncateTokenFilterFactory: Probability = 1.00, Count = 1
GetDetectorResponse -> GetDetectorResult: Probability = 1.00, Count = 1
GetDetector -> getDetector: Probability = 1.00, Count = 1
GetDetectorRequest -> GetDetectorRequest: Probability = 1.00, Count = 1
Invoke<GetDetectorResponse> -> executeGetDetector: Probability = 1.00, Count = 1
entries[index] -> elseentries[index]: Probability = 1.00, Count = 1
s1, -> s1,: Probability = 0.75, Count = 3
s1, -> getDistance: Probability = 0.25, Count = 1
s2 -> s2: Probability = 0.67, Count = 4
s2 -> this.s1: Probability = 0.17, Count = 1
s2 -> mtp: Probability = 0.17, Count = 1
this.S1 -> s1: Probability = 1.00, Count = 1
s1 -> this.s2: Probability = 1.00, Count = 1
this.S2 -> this.s: Probability = 1.00, Count = 1
DetachDiskResponse -> DetachDiskResult: Probability = 1.00, Count = 1
DetachDisk -> detachDisk: Probability = 1.00, Count = 1
DetachDiskRequest -> DetachDiskRequest: Probability = 1.00, Count = 1
Invoke<DetachDiskResponse> -> executeDetachDisk: Probability = 1.00, Count = 1
score, -> score,: Probability = 1.00, Count = 4
ResourceRecord -> ResourceRecord: Probability = 1.00, Count = 1
getAuthority -> getAuthority: Probability = 1.00, Count = 1
UpdateRouteResponseResponse -> UpdateRouteResponseResult: Probability = 1.00, Count = 1
UpdateRouteResponseRequest -> UpdateRouteResponseRequest: Probability = 1.00, Count = 1
Invoke<UpdateRouteResponseResponse> -> executeUpdateRouteResponse: Probability = 1.00, Count = 1
SimpleRateLimiter -> SimpleRateLimiter: Probability = 1.00, Count = 1
SetMbPerSec -> lastNS: Probability = 1.00, Count = 1
RemoteSession -> RemoteSession: Probability = 1.00, Count = 1
session.Disconnect -> session.disconnect: Probability = 1.00, Count = 1
SetQuotaRequest -> SetQuotaRequest: Probability = 1.00, Count = 1
"SetQuota", -> "SetQuota",: Probability = 1.00, Count = 1
ParserATNSimulator -> ParserATNSimulator: Probability = 1.00, Count = 1
atn,DFA[] -> atn,DFA[]: Probability = 1.00, Count = 1
decisionToDFA,PredictionContextCache -> decisionToDFA,PredictionContextCache: Probability = 1.00, Count = 1
this.decisionToDFA -> this.decisionToDFA: Probability = 1.00, Count = 1
decisionToDFA -> decisionToDFA: Probability = 1.00, Count = 3
removalIdx -> removalIdx: Probability = 1.00, Count = 3
this.removalIndex -> removalIndex: Probability = 1.00, Count = 2
++this._enclosing.modCount -> ++modCount: Probability = 1.00, Count = 1
GetPointAt -> getPointAt: Probability = 1.00, Count = 1
NGit.Api.StatusCommand -> StatusCommand: Probability = 0.50, Count = 1
NGit.Api.StatusCommand -> setWorkingTreeIt: Probability = 0.50, Count = 1
this.workingTreeIt -> this.workingTreeIt: Probability = 1.00, Count = 1
current.Clear -> current.clear: Probability = 1.00, Count = 1
HSSFErrorConstants.GetText -> FormulaError.forInt: Probability = 1.00, Count = 1
FtPioGrbitSubRecord -> FtPioGrbitSubRecord: Probability = 1.00, Count = 1
PositionSpan -> PositionSpan: Probability = 1.00, Count = 1
param -> param: Probability = 1.00, Count = 3
expr.MoveNext -> expr.nextToken: Probability = 1.00, Count = 2
DeleteBuildResponse -> DeleteBuildResult: Probability = 1.00, Count = 1
DeleteBuild -> deleteBuild: Probability = 1.00, Count = 1
DeleteBuildRequest -> DeleteBuildRequest: Probability = 1.00, Count = 1
Invoke<DeleteBuildResponse> -> executeDeleteBuild: Probability = 1.00, Count = 1
DescribeVolumeStatusResponse -> DescribeVolumeStatusResult: Probability = 1.00, Count = 1
DescribeVolumeStatus -> describeVolumeStatus: Probability = 1.00, Count = 2
DescribeVolumeStatusRequest -> DescribeVolumeStatusRequest: Probability = 1.00, Count = 1
PatternReplaceFilter -> PatternReplaceFilter: Probability = 1.00, Count = 2
ICUFoldingFilter -> ICUFoldingFilter: Probability = 1.00, Count = 1
"[NTF]" -> "[NTF]": Probability = 1.00, Count = 1
SetWorkingDirectoryMessage -> setWorkingDirectoryMessage: Probability = 1.00, Count = 1
workingDirectoryMessage -> workingDirectoryMessage: Probability = 1.00, Count = 1
onlySheetIndex, -> onlySheetIndex,: Probability = 1.00, Count = 3
sheetEvaluator -> sheetEvaluator: Probability = 1.00, Count = 2
DeregisterOnPremisesInstanceResponse -> DeregisterOnPremisesInstanceResult: Probability = 1.00, Count = 1
DeregisterOnPremisesInstance -> deregisterOnPremisesInstance: Probability = 1.00, Count = 1
DeregisterOnPremisesInstanceRequest -> DeregisterOnPremisesInstanceRequest: Probability = 1.00, Count = 1
Invoke<DeregisterOnPremisesInstanceResponse> -> executeDeregisterOnPremisesInstance: Probability = 1.00, Count = 1
ListDeliverabilityTestReportsResponse -> ListDeliverabilityTestReportsResult: Probability = 1.00, Count = 1
ListDeliverabilityTestReports -> listDeliverabilityTestReports: Probability = 1.00, Count = 1
ListDeliverabilityTestReportsRequest -> ListDeliverabilityTestReportsRequest: Probability = 1.00, Count = 1
Invoke<ListDeliverabilityTestReportsResponse> -> executeListDeliverabilityTestReports: Probability = 1.00, Count = 1
ChangeMessageVisibilityResponse -> ChangeMessageVisibilityResult: Probability = 1.00, Count = 2
ChangeMessageVisibility -> changeMessageVisibility: Probability = 1.00, Count = 3
Invoke<ChangeMessageVisibilityResponse> -> executeChangeMessageVisibility: Probability = 1.00, Count = 1
UpdateWorkGroupResponse -> UpdateWorkGroupResult: Probability = 1.00, Count = 1
UpdateWorkGroup -> updateWorkGroup: Probability = 1.00, Count = 1
UpdateWorkGroupRequest -> UpdateWorkGroupRequest: Probability = 1.00, Count = 1
Invoke<UpdateWorkGroupResponse> -> executeUpdateWorkGroup: Probability = 1.00, Count = 1
,java.util.TreeMap.Bound.NO_BOUND -> NO_BOUND: Probability = 1.00, Count = 1
"2" -> "2": Probability = 1.00, Count = 1
SetStartCommit -> setStartCommit: Probability = 1.00, Count = 1
commit.ToObjectId -> commit.toObjectId: Probability = 1.00, Count = 1
ModifyEbsDefaultKmsKeyIdResponse -> ModifyEbsDefaultKmsKeyIdResult: Probability = 1.00, Count = 1
ModifyEbsDefaultKmsKeyId -> modifyEbsDefaultKmsKeyId: Probability = 1.00, Count = 1
ModifyEbsDefaultKmsKeyIdRequest -> ModifyEbsDefaultKmsKeyIdRequest: Probability = 1.00, Count = 1
Invoke<ModifyEbsDefaultKmsKeyIdResponse> -> executeModifyEbsDefaultKmsKeyId: Probability = 1.00, Count = 1
RemoveAuthor -> removeAuthor: Probability = 1.00, Count = 1
PropertyIDMap.PID_AUTHOR -> PropertyIDMap.PID_AUTHOR: Probability = 1.00, Count = 1
HSSFConditionalFormatting -> cf.getCFRecordsAggregate: Probability = 1.00, Count = 1
Iterations -> getIterations: Probability = 1.00, Count = 1
operation, -> operation,: Probability = 1.00, Count = 1
operation -> operation: Probability = 1.00, Count = 2
"operation -> "operation: Probability = 1.00, Count = 1
required" -> required": Probability = 1.00, Count = 1
this.Operation -> this.operation: Probability = 1.00, Count = 1
this.Shape -> this.shape: Probability = 1.00, Count = 1
Completion -> Completion: Probability = 1.00, Count = 1
this.Utf8.CompareTo -> this.utf8.compareTo: Probability = 1.00, Count = 1
o.Utf8 -> o.utf8: Probability = 1.00, Count = 1
GetInstancesResponse -> GetInstancesResult: Probability = 1.00, Count = 1
GetInstances -> getInstances: Probability = 1.00, Count = 1
GetInstancesRequest -> GetInstancesRequest: Probability = 1.00, Count = 1
Invoke<GetInstancesResponse> -> executeGetInstances: Probability = 1.00, Count = 1
sentenceStarts[++currentSentence] -> sentenceStarts[++currentSentence]: Probability = 1.00, Count = 1
ImageUtils.SetPreferredSize -> ImageUtils.setPreferredSize: Probability = 1.00, Count = 1
CreateTaskSetResponse -> CreateTaskSetResult: Probability = 1.00, Count = 1
CreateTaskSet -> createTaskSet: Probability = 1.00, Count = 1
CreateTaskSetRequest -> CreateTaskSetRequest: Probability = 1.00, Count = 1
Invoke<CreateTaskSetResponse> -> executeCreateTaskSet: Probability = 1.00, Count = 1
\t -> \t: Probability = 1.00, Count = 2
lst.AddRange -> lst.addAll: Probability = 0.50, Count = 4
lst.AddRange -> FunctionEval.getNotSupportedFunctionNames: Probability = 0.12, Count = 1
lst.AddRange -> AnalysisToolPak.getNotSupportedFunctionNames: Probability = 0.12, Count = 1
lst.AddRange -> FunctionEval.getSupportedFunctionNames: Probability = 0.12, Count = 1
lst.AddRange -> AnalysisToolPak.getSupportedFunctionNames: Probability = 0.12, Count = 1
CreateMeetingResponse -> CreateMeetingResult: Probability = 1.00, Count = 1
CreateMeeting -> createMeeting: Probability = 1.00, Count = 1
CreateMeetingRequest -> CreateMeetingRequest: Probability = 1.00, Count = 1
Invoke<CreateMeetingResponse> -> executeCreateMeeting: Probability = 1.00, Count = 1
byteBuffer.getChar -> byteBuffer.getChar: Probability = 1.00, Count = 2
GetInstanceSnapshotResponse -> GetInstanceSnapshotResult: Probability = 1.00, Count = 1
GetInstanceSnapshot -> getInstanceSnapshot: Probability = 1.00, Count = 1
GetInstanceSnapshotRequest -> GetInstanceSnapshotRequest: Probability = 1.00, Count = 1
Invoke<GetInstanceSnapshotResponse> -> executeGetInstanceSnapshot: Probability = 1.00, Count = 1
m[keys[i]] -> keys[i],: Probability = 1.00, Count = 1
GetHealthCheckStatusResponse -> GetHealthCheckStatusResult: Probability = 1.00, Count = 1
GetHealthCheckStatus -> getHealthCheckStatus: Probability = 1.00, Count = 1
GetHealthCheckStatusRequest -> GetHealthCheckStatusRequest: Probability = 1.00, Count = 1
Invoke<GetHealthCheckStatusResponse> -> executeGetHealthCheckStatus: Probability = 1.00, Count = 1
GetReusableDelegationSetResponse -> GetReusableDelegationSetResult: Probability = 1.00, Count = 1
GetReusableDelegationSet -> getReusableDelegationSet: Probability = 1.00, Count = 1
GetReusableDelegationSetRequest -> GetReusableDelegationSetRequest: Probability = 1.00, Count = 1
Invoke<GetReusableDelegationSetResponse> -> executeGetReusableDelegationSet: Probability = 1.00, Count = 1
rowOffsetIx -> getAbsoluteValue: Probability = 0.25, Count = 1
rowOffsetIx -> rowOffsetIx: Probability = 0.75, Count = 3
colOffsetIx -> colOffsetIx: Probability = 1.00, Count = 4
_firstColumn -> _firstColumn: Probability = 1.00, Count = 3
StartMatchBackfillResponse -> StartMatchBackfillResult: Probability = 1.00, Count = 1
StartMatchBackfill -> startMatchBackfill: Probability = 1.00, Count = 1
StartMatchBackfillRequest -> StartMatchBackfillRequest: Probability = 1.00, Count = 1
Invoke<StartMatchBackfillResponse> -> executeStartMatchBackfill: Probability = 1.00, Count = 1
DeleteEmailTemplateResponse -> DeleteEmailTemplateResult: Probability = 1.00, Count = 1
DeleteEmailTemplate -> deleteEmailTemplate: Probability = 1.00, Count = 1
DeleteEmailTemplateRequest -> DeleteEmailTemplateRequest: Probability = 1.00, Count = 1
Invoke<DeleteEmailTemplateResponse> -> executeDeleteEmailTemplate: Probability = 1.00, Count = 1
ListReceiptRuleSetsResponse -> ListReceiptRuleSetsResult: Probability = 1.00, Count = 1
ListReceiptRuleSets -> listReceiptRuleSets: Probability = 1.00, Count = 1
ListReceiptRuleSetsRequest -> ListReceiptRuleSetsRequest: Probability = 1.00, Count = 1
Invoke<ListReceiptRuleSetsResponse> -> executeListReceiptRuleSets: Probability = 1.00, Count = 1
IsRowGroupCollapsed -> isRowGroupCollapsed: Probability = 1.00, Count = 1
collapseRow -> collapseRow: Probability = 0.75, Count = 3
collapseRow -> .getColapsed: Probability = 0.25, Count = 1
SetGroupDocsLimit -> setGroupDocsLimit: Probability = 1.00, Count = 1
groupDocsLimit -> groupDocsLimit: Probability = 1.00, Count = 2
this.groupDocsLimit -> this.groupDocsLimit: Probability = 1.00, Count = 1
RemoveField -> removeField: Probability = 1.00, Count = 1
double? -> Double: Probability = 1.00, Count = 1
DoubleValue -> doubleValue: Probability = 1.00, Count = 1
Invoke<DescribeLoadBalancersResponse> -> executeDescribeLoadBalancers: Probability = 1.00, Count = 1
SpanQuery[] -> SpanQuery[]: Probability = 0.50, Count = 1
SpanQuery[] -> getClauses: Probability = 0.50, Count = 1
GetClauses -> clauses.toArray: Probability = 1.00, Count = 1
clauses.ToArray -> SpanQuery[clauses.size: Probability = 1.00, Count = 1
GetTaggerIdent -> getTaggerIdent: Probability = 1.00, Count = 1
SetCacheMissesUntilFill -> setCacheMissesUntilFill: Probability = 1.00, Count = 1
cacheMissesUntilFill -> cacheMissesUntilFill: Probability = 1.00, Count = 1
Hash32 -> hash32: Probability = 1.00, Count = 2
br.Bytes, -> br.bytes,: Probability = 1.00, Count = 1
br.Offset, -> br.offset,: Probability = 1.00, Count = 1
br.Length -> br.length: Probability = 1.00, Count = 1
QueryAllGroupsRequest -> QueryAllGroupsRequest: Probability = 1.00, Count = 1
"QueryAllGroups" -> "QueryAllGroups": Probability = 1.00, Count = 1
m_replacement.Length -> replacement.length: Probability = 0.60, Count = 3
m_replacement.Length -> replacement,: Probability = 0.20, Count = 1
m_replacement.Length -> suffix.length,: Probability = 0.20, Count = 1
GetFullMessage -> getFullMessage: Probability = 1.00, Count = 1
ChangeTagsForResourceResponse -> ChangeTagsForResourceResult: Probability = 1.00, Count = 1
ChangeTagsForResource -> changeTagsForResource: Probability = 1.00, Count = 1
ChangeTagsForResourceRequest -> ChangeTagsForResourceRequest: Probability = 1.00, Count = 1
Invoke<ChangeTagsForResourceResponse> -> executeChangeTagsForResource: Probability = 1.00, Count = 1
name.Length, -> name.length,: Probability = 1.00, Count = 1
"mode -> "mode: Probability = 1.00, Count = 1
DescribeScriptResponse -> DescribeScriptResult: Probability = 1.00, Count = 1
DescribeScript -> describeScript: Probability = 1.00, Count = 1
DescribeScriptRequest -> DescribeScriptRequest: Probability = 1.00, Count = 1
Invoke<DescribeScriptResponse> -> executeDescribeScript: Probability = 1.00, Count = 1
"NoMergePolicy" -> "NoMergePolicy": Probability = 1.00, Count = 1
RevokeCacheSecurityGroupIngressResponse -> CacheSecurityGroup: Probability = 1.00, Count = 1
RevokeCacheSecurityGroupIngress -> revokeCacheSecurityGroupIngress: Probability = 1.00, Count = 1
RevokeCacheSecurityGroupIngressRequest -> RevokeCacheSecurityGroupIngressRequest: Probability = 1.00, Count = 1
Invoke<RevokeCacheSecurityGroupIngressResponse> -> executeRevokeCacheSecurityGroupIngress: Probability = 1.00, Count = 1
DeleteVoiceConnectorTerminationResponse -> DeleteVoiceConnectorTerminationResult: Probability = 1.00, Count = 1
DeleteVoiceConnectorTermination -> deleteVoiceConnectorTermination: Probability = 1.00, Count = 1
DeleteVoiceConnectorTerminationRequest -> DeleteVoiceConnectorTerminationRequest: Probability = 1.00, Count = 1
Invoke<DeleteVoiceConnectorTerminationResponse> -> executeDeleteVoiceConnectorTermination: Probability = 1.00, Count = 1
repo.FileSystem, -> repo,repo.getConfig: Probability = 1.00, Count = 1
WorkingTreeOptions.KEY -> WorkingTreeOptions.KEY: Probability = 0.50, Count = 1
WorkingTreeOptions.KEY -> .isDirNoGitLinks: Probability = 0.50, Count = 1
InitRootIterator -> ?NoGitlinksStrategy.INSTANCE: Probability = 0.50, Count = 1
InitRootIterator -> :DefaultFileModeStrategy.INSTANCE: Probability = 0.50, Count = 1
posIncAttr -> this.preserveOriginal: Probability = 1.00, Count = 1
asCharBuffer -> asCharBuffer: Probability = 1.00, Count = 1
java.nio.CharToByteBufferAdapter.asCharBuffer -> CharToByteBufferAdapter.asCharBuffer: Probability = 1.00, Count = 1
DescribeLifecycleHookTypesResponse -> DescribeLifecycleHookTypesResult: Probability = 1.00, Count = 1
DescribeLifecycleHookTypes -> describeLifecycleHookTypes: Probability = 1.00, Count = 1
DescribeLifecycleHookTypesRequest -> DescribeLifecycleHookTypesRequest: Probability = 1.00, Count = 1
Invoke<DescribeLifecycleHookTypesResponse> -> executeDescribeLifecycleHookTypes: Probability = 1.00, Count = 1
getEncoding -> getEncoding: Probability = 1.00, Count = 1
!isOpen -> !isOpen: Probability = 1.00, Count = 2
java.io.HistoricalCharsetNames.get -> HistoricalCharsetNames.get: Probability = 1.00, Count = 1
decoder.charset -> decoder.charset: Probability = 1.00, Count = 1
RespondDecisionTaskCompleted -> respondDecisionTaskCompleted: Probability = 1.00, Count = 1
RespondDecisionTaskCompletedRequest -> RespondDecisionTaskCompletedRequest: Probability = 1.00, Count = 1
RespondDecisionTaskCompletedResponseUnmarshaller.Instance -> executeRespondDecisionTaskCompleted: Probability = 1.00, Count = 1
@in.Close -> .close: Probability = 1.00, Count = 1
GetDirectoryResponse -> GetDirectoryResult: Probability = 1.00, Count = 1
GetDirectoryRequest -> GetDirectoryRequest: Probability = 1.00, Count = 1
Invoke<GetDirectoryResponse> -> executeGetDirectory: Probability = 1.00, Count = 1
SoraniNormalizationFilterFactory -> SoraniNormalizationFilterFactory: Probability = 1.00, Count = 1
CreateSolutionVersionResponse -> CreateSolutionVersionResult: Probability = 1.00, Count = 1
CreateSolutionVersion -> createSolutionVersion: Probability = 1.00, Count = 1
CreateSolutionVersionRequest -> CreateSolutionVersionRequest: Probability = 1.00, Count = 1
Invoke<CreateSolutionVersionResponse> -> executeCreateSolutionVersion: Probability = 1.00, Count = 1
UpdateWorkteamResponse -> UpdateWorkteamResult: Probability = 1.00, Count = 1
UpdateWorkteam -> updateWorkteam: Probability = 1.00, Count = 1
UpdateWorkteamRequest -> UpdateWorkteamRequest: Probability = 1.00, Count = 1
Invoke<UpdateWorkteamResponse> -> executeUpdateWorkteam: Probability = 1.00, Count = 1
start_1, -> start,: Probability = 1.00, Count = 2
end_1 -> end: Probability = 1.00, Count = 2
UpdateServerCertificateRequest -> UpdateServerCertificateRequest: Probability = 1.00, Count = 1
valueAt -> valueAt: Probability = 1.00, Count = 2
GetCharacterClass -> getCharacterClass: Probability = 1.00, Count = 1
GetBinaryExponent -> getBinaryExponent: Probability = 1.00, Count = 1
DescribeStackSetResponse -> DescribeStackSetResult: Probability = 1.00, Count = 1
DescribeStackSet -> describeStackSet: Probability = 1.00, Count = 1
DescribeStackSetRequest -> DescribeStackSetRequest: Probability = 1.00, Count = 1
Invoke<DescribeStackSetResponse> -> executeDescribeStackSet: Probability = 1.00, Count = 1
IsComponentRecord -> isComponentRecord: Probability = 1.00, Count = 1
ProtectRecord.sid:case -> ProtectRecord.sid:case: Probability = 1.00, Count = 1
ObjectProtectRecord.sid:case -> ObjectProtectRecord.sid:case: Probability = 1.00, Count = 1
ScenarioProtectRecord.sid:case -> ScenarioProtectRecord.sid:case: Probability = 1.00, Count = 1
PasswordRecord.sid:return -> PasswordRecord.sid:return: Probability = 1.00, Count = 1
main.GetFilePointer -> main.getFilePointer: Probability = 1.00, Count = 1
GetSchemaAsJsonResponse -> GetSchemaAsJsonResult: Probability = 1.00, Count = 1
GetSchemaAsJson -> getSchemaAsJson: Probability = 1.00, Count = 1
GetSchemaAsJsonRequest -> GetSchemaAsJsonRequest: Probability = 1.00, Count = 1
Invoke<GetSchemaAsJsonResponse> -> executeGetSchemaAsJson: Probability = 1.00, Count = 1
gets -> gets: Probability = 1.00, Count = 3
AddParseListener -> addParseListener: Probability = 1.00, Count = 1
"listener" -> "listener": Probability = 1.00, Count = 1
List<IParseTreeListener> -> ArrayList<ParseTreeListener>: Probability = 1.00, Count = 1
this._parseListeners.Add -> this._parseListeners.add: Probability = 1.00, Count = 1
CreateQueryLoggingConfigResponse -> CreateQueryLoggingConfigResult: Probability = 1.00, Count = 1
CreateQueryLoggingConfig -> createQueryLoggingConfig: Probability = 1.00, Count = 1
CreateQueryLoggingConfigRequest -> CreateQueryLoggingConfigRequest: Probability = 1.00, Count = 1
Invoke<CreateQueryLoggingConfigResponse> -> executeCreateQueryLoggingConfig: Probability = 1.00, Count = 1
SetIdentityFeedbackForwardingEnabledResponse -> SetIdentityFeedbackForwardingEnabledResult: Probability = 1.00, Count = 1
SetIdentityFeedbackForwardingEnabled -> setIdentityFeedbackForwardingEnabled: Probability = 1.00, Count = 1
SetIdentityFeedbackForwardingEnabledRequest -> SetIdentityFeedbackForwardingEnabledRequest: Probability = 1.00, Count = 1
Invoke<SetIdentityFeedbackForwardingEnabledResponse> -> executeSetIdentityFeedbackForwardingEnabled: Probability = 1.00, Count = 1
relativeOffset -> getValueAt: Probability = 0.25, Count = 1
relativeOffset -> relativeOffset: Probability = 0.75, Count = 3
_values.Length -> _values.length: Probability = 1.00, Count = 2
entries" -> entries": Probability = 1.00, Count = 1
eThis -> eThis: Probability = 1.00, Count = 4
ethat -> ethat: Probability = 1.00, Count = 3
eThat -> eThat: Probability = 1.00, Count = 3
.stateNumber -> .stateNumber: Probability = 1.00, Count = 1
EmptyTreeIterator -> EmptyTreeIterator: Probability = 1.00, Count = 4
CreateEmptyTreeIterator -> createEmptyTreeIterator: Probability = 1.00, Count = 2
isOverflow -> isOverflow: Probability = 1.00, Count = 1
TYPE_OVERFLOW -> TYPE_OVERFLOW: Probability = 1.00, Count = 1
ListQueueTagsResponse -> ListQueueTagsResult: Probability = 1.00, Count = 1
ListQueueTags -> listQueueTags: Probability = 1.00, Count = 1
ListQueueTagsRequest -> ListQueueTagsRequest: Probability = 1.00, Count = 1
Invoke<ListQueueTagsResponse> -> executeListQueueTags: Probability = 1.00, Count = 1
BuyOriginPicturesRequest -> BuyOriginPicturesRequest: Probability = 1.00, Count = 1
"BuyOriginPictures", -> "BuyOriginPictures",: Probability = 1.00, Count = 1
CreateSafeSheetName -> createSafeSheetName: Probability = 1.00, Count = 3
nameProposal, -> nameProposal,: Probability = 1.00, Count = 2
replaceChar -> replaceChar: Probability = 1.00, Count = 3
nameProposal -> nameProposal: Probability = 1.00, Count = 2
nameProposal.Length -> nameProposal.length: Probability = 1.00, Count = 2
ObjectId[newParents.Length] -> ObjectId[newParents.length]: Probability = 1.00, Count = 1
newParents.Length -> newParents.length: Probability = 1.00, Count = 1
parentIds[i] -> parentIds[i]: Probability = 1.00, Count = 1
newParents[i].Copy -> newParents[i].copy: Probability = 1.00, Count = 1
state,LexerActionExecutor -> state,LexerActionExecutor: Probability = 1.00, Count = 1
NormValueSource -> NormValueSource: Probability = 1.00, Count = 1
file.GetName -> attributes.getName: Probability = 1.00, Count = 1
jw -> jw: Probability = 1.00, Count = 2
tokenStream.AddAttribute<IOffsetAttribute> -> tokenStream.addAttribute: Probability = 0.50, Count = 2
tokenStream.AddAttribute<IOffsetAttribute> -> OffsetAttribute.class: Probability = 0.50, Count = 2
tokenStream.AddAttribute<ICharTermAttribute> -> tokenStream.addAttribute: Probability = 0.60, Count = 3
tokenStream.AddAttribute<ICharTermAttribute> -> CharTermAttribute.class: Probability = 0.40, Count = 2
GetCountRead -> getCountRead: Probability = 1.00, Count = 1
_countRead -> _countRead: Probability = 1.00, Count = 1
CreateNetworkAclEntryResponse -> CreateNetworkAclEntryResult: Probability = 1.00, Count = 1
CreateNetworkAclEntry -> createNetworkAclEntry: Probability = 1.00, Count = 1
CreateNetworkAclEntryRequest -> CreateNetworkAclEntryRequest: Probability = 1.00, Count = 1
Invoke<CreateNetworkAclEntryResponse> -> executeCreateNetworkAclEntry: Probability = 1.00, Count = 1
BreakIteratorBoundaryScanner -> BreakIteratorBoundaryScanner: Probability = 1.00, Count = 1
BreakIterator -> BreakIterator: Probability = 1.00, Count = 1
this.bi -> this.bi: Probability = 1.00, Count = 1
.GetOffsetGap -> .getOffsetGap: Probability = 1.00, Count = 1
"[PLOTAREA]\n" -> "[PLOTAREA]\n": Probability = 1.00, Count = 1
"[/PLOTAREA]\n" -> "[/PLOTAREA]\n": Probability = 1.00, Count = 1
base.SetInt64Value -> super.setLongValue: Probability = 1.00, Count = 1
CreateSolutionResponse -> CreateSolutionResult: Probability = 1.00, Count = 1
CreateSolution -> createSolution: Probability = 1.00, Count = 1
CreateSolutionRequest -> CreateSolutionRequest: Probability = 1.00, Count = 1
Invoke<CreateSolutionResponse> -> executeCreateSolution: Probability = 1.00, Count = 1
DescribeAlgorithmResponse -> DescribeAlgorithmResult: Probability = 1.00, Count = 1
DescribeAlgorithm -> describeAlgorithm: Probability = 1.00, Count = 1
DescribeAlgorithmRequest -> DescribeAlgorithmRequest: Probability = 1.00, Count = 1
Invoke<DescribeAlgorithmResponse> -> executeDescribeAlgorithm: Probability = 1.00, Count = 1
InvalidClassException -> InvalidClassException: Probability = 1.00, Count = 1
this.classname -> this.classname: Probability = 1.00, Count = 1
ExportTransitGatewayRoutesResponse -> ExportTransitGatewayRoutesResult: Probability = 1.00, Count = 1
ExportTransitGatewayRoutes -> exportTransitGatewayRoutes: Probability = 1.00, Count = 1
ExportTransitGatewayRoutesRequest -> ExportTransitGatewayRoutesRequest: Probability = 1.00, Count = 1
Invoke<ExportTransitGatewayRoutesResponse> -> executeExportTransitGatewayRoutes: Probability = 1.00, Count = 1
TypeTokenFilter -> TypeTokenFilter: Probability = 1.00, Count = 1
stopTypes, -> stopTypes,: Probability = 1.00, Count = 1
zzBuffer.Length -> zzBuffer.length: Probability = 1.00, Count = 1
SegmentInfoAndLevel -> SegmentInfoAndLevel: Probability = 1.00, Count = 1
other.level.CompareTo -> Float.compare: Probability = 0.50, Count = 1
other.level.CompareTo -> other.level,: Probability = 0.50, Count = 1
FrenchMinimalStemFilterFactory -> FrenchMinimalStemFilterFactory: Probability = 1.00, Count = 1
AreaErrPtg -> AreaErrPtg: Probability = 1.00, Count = 2
GetRemoteTrackingBranch -> getRemoteTrackingBranch: Probability = 1.00, Count = 1
remoteTrackingBranch -> remoteTrackingBranch: Probability = 1.00, Count = 1
SetMaxChainLength -> setMaxChainLength: Probability = 1.00, Count = 1
maxLen -> maxLen: Probability = 1.00, Count = 2
maxChainLength -> maxChainLength: Probability = 1.00, Count = 1
DeleteReusableDelegationSetResponse -> DeleteReusableDelegationSetResult: Probability = 1.00, Count = 1
DeleteReusableDelegationSet -> deleteReusableDelegationSet: Probability = 1.00, Count = 1
DeleteReusableDelegationSetRequest -> DeleteReusableDelegationSetRequest: Probability = 1.00, Count = 1
Invoke<DeleteReusableDelegationSetResponse> -> executeDeleteReusableDelegationSet: Probability = 1.00, Count = 1
"[/HEADER]\n" -> "[/HEADER]\n": Probability = 1.00, Count = 1
WriteStringData -> writeStringData: Probability = 1.00, Count = 1
is16bitEncoded -> is16bitEncoded: Probability = 1.00, Count = 6
keepTogetherSize -> keepTogetherSize: Probability = 1.00, Count = 8
optionFlags -> optionFlags: Probability = 0.89, Count = 8
optionFlags -> 0x08: Probability = 0.11, Count = 1
WriteCharacterData -> writeCharacterData: Probability = 1.00, Count = 2
LruTaxonomyWriterCache -> LruTaxonomyWriterCache: Probability = 1.00, Count = 1
cacheSize, -> cacheSize,: Probability = 1.00, Count = 1
lruType -> LRUType: Probability = 0.25, Count = 1
lruType -> lruType: Probability = 0.50, Count = 2
lruType -> LRUType.LRU_HASHED: Probability = 0.25, Count = 1
this.cache -> this.cache: Probability = 1.00, Count = 2
NameHashInt32CacheLRU -> NameHashIntCacheLRU: Probability = 1.00, Count = 1
cacheSize -> cacheSize: Probability = 1.00, Count = 2
NameInt32CacheLRU -> NameIntCacheLRU: Probability = 1.00, Count = 1
showSeriesKey.IsSet -> showSeriesKey.isSet: Probability = 1.00, Count = 1
_writer.flush -> writer.flush: Probability = 1.00, Count = 1
UsernamePasswordCredentialsProvider -> UsernamePasswordCredentialsProvider: Probability = 1.00, Count = 1
this.username -> this.username: Probability = 1.00, Count = 1
this.password -> this.password: Probability = 1.00, Count = 1
RecordActivityTaskHeartbeatResponse -> ActivityTaskStatus: Probability = 1.00, Count = 1
RecordActivityTaskHeartbeat -> recordActivityTaskHeartbeat: Probability = 1.00, Count = 1
RecordActivityTaskHeartbeatRequest -> RecordActivityTaskHeartbeatRequest: Probability = 1.00, Count = 1
Invoke<RecordActivityTaskHeartbeatResponse> -> executeRecordActivityTaskHeartbeat: Probability = 1.00, Count = 1
DescribeStepResponse -> DescribeStepResult: Probability = 1.00, Count = 1
DescribeStep -> describeStep: Probability = 1.00, Count = 1
DescribeStepRequest -> DescribeStepRequest: Probability = 1.00, Count = 1
Invoke<DescribeStepResponse> -> executeDescribeStep: Probability = 1.00, Count = 1
List<DeleteMessageBatchRequestEntry> -> java.util.List<DeleteMessageBatchRequestEntry>: Probability = 1.00, Count = 2
CreateVpcPeeringAuthorizationResponse -> CreateVpcPeeringAuthorizationResult: Probability = 1.00, Count = 1
CreateVpcPeeringAuthorization -> createVpcPeeringAuthorization: Probability = 1.00, Count = 1
CreateVpcPeeringAuthorizationRequest -> CreateVpcPeeringAuthorizationRequest: Probability = 1.00, Count = 1
Invoke<CreateVpcPeeringAuthorizationResponse> -> executeCreateVpcPeeringAuthorization: Probability = 1.00, Count = 1
Invoke<DescribeDBSubnetGroupsResponse> -> executeDescribeDBSubnetGroups: Probability = 1.00, Count = 1
JobFlowExecutionState -> JobFlowExecutionState: Probability = 1.00, Count = 1
creationDateTime -> creationDateTime: Probability = 0.67, Count = 4
creationDateTime -> setState: Probability = 0.33, Count = 2
_state -> state.toString: Probability = 1.00, Count = 2
_creationDateTime -> setCreationDateTime: Probability = 1.00, Count = 2
"more" -> "more": Probability = 1.00, Count = 1
KeyValue -> KeyValue: Probability = 1.00, Count = 1
BalancedTree -> balancedTree: Probability = 1.00, Count = 3
tokens, -> tokens,: Probability = 0.75, Count = 3
tokens, -> vals,: Probability = 0.25, Count = 1
vals, -> vals,: Probability = 0.50, Count = 2
vals, -> lo,: Probability = 0.50, Count = 2
PlotAreaRecord -> PlotAreaRecord: Probability = 1.00, Count = 1
DeleteSecurityConfigurationResponse -> DeleteSecurityConfigurationResult: Probability = 1.00, Count = 1
DeleteSecurityConfiguration -> deleteSecurityConfiguration: Probability = 1.00, Count = 1
DeleteSecurityConfigurationRequest -> DeleteSecurityConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DeleteSecurityConfigurationResponse> -> executeDeleteSecurityConfiguration: Probability = 1.00, Count = 1
mapEntry.ToString -> mapEntry.toString: Probability = 1.00, Count = 1
notEnoughHeap -> notEnoughHeap: Probability = 1.00, Count = 2
ListJobsByStatusResponse -> ListJobsByStatusResult: Probability = 1.00, Count = 1
ListJobsByStatus -> listJobsByStatus: Probability = 1.00, Count = 1
ListJobsByStatusRequest -> ListJobsByStatusRequest: Probability = 1.00, Count = 1
Invoke<ListJobsByStatusResponse> -> executeListJobsByStatus: Probability = 1.00, Count = 1
UpdateClusterVersionResponse -> UpdateClusterVersionResult: Probability = 1.00, Count = 1
UpdateClusterVersion -> updateClusterVersion: Probability = 1.00, Count = 1
UpdateClusterVersionRequest -> UpdateClusterVersionRequest: Probability = 1.00, Count = 1
Invoke<UpdateClusterVersionResponse> -> executeUpdateClusterVersion: Probability = 1.00, Count = 1
Invoke<ListStreamsResponse> -> executeListStreams: Probability = 1.00, Count = 1
this.wasEscaped[index] -> this.wasEscaped[index]: Probability = 1.00, Count = 1
SetNewObjectId -> setNewObjectId: Probability = 1.00, Count = 1
BatchRefUpdate -> BatchRefUpdate: Probability = 1.00, Count = 2
NewBatchUpdate -> newBatchUpdate: Probability = 1.00, Count = 1
CreateTrafficMirrorFilterRuleResponse -> CreateTrafficMirrorFilterRuleResult: Probability = 1.00, Count = 1
CreateTrafficMirrorFilterRule -> createTrafficMirrorFilterRule: Probability = 1.00, Count = 1
CreateTrafficMirrorFilterRuleRequest -> CreateTrafficMirrorFilterRuleRequest: Probability = 1.00, Count = 1
Invoke<CreateTrafficMirrorFilterRuleResponse> -> executeCreateTrafficMirrorFilterRule: Probability = 1.00, Count = 1
SendEventResponse -> SendEventResult: Probability = 1.00, Count = 1
SendEvent -> sendEvent: Probability = 1.00, Count = 1
SendEventRequest -> SendEventRequest: Probability = 1.00, Count = 1
Invoke<SendEventResponse> -> executeSendEvent: Probability = 1.00, Count = 1
MissingRowDummyRecord -> MissingRowDummyRecord: Probability = 1.00, Count = 1
this.rowNumber -> this.rowNumber: Probability = 1.00, Count = 1
GetLengthB -> getLengthB: Probability = 1.00, Count = 1
DiffConfig.RenameDetectionType -> RenameDetectionType: Probability = 1.00, Count = 1
GetRenameDetectionType -> getRenameDetectionType: Probability = 1.00, Count = 1
ReplaceNetworkAclAssociationResponse -> ReplaceNetworkAclAssociationResult: Probability = 1.00, Count = 1
ReplaceNetworkAclAssociation -> replaceNetworkAclAssociation: Probability = 1.00, Count = 1
ReplaceNetworkAclAssociationRequest -> ReplaceNetworkAclAssociationRequest: Probability = 1.00, Count = 1
Invoke<ReplaceNetworkAclAssociationResponse> -> executeReplaceNetworkAclAssociation: Probability = 1.00, Count = 1
GetFontName -> getFontName: Probability = 1.00, Count = 1
ViewSourceRecord -> ViewSourceRecord: Probability = 1.00, Count = 1
HasTrackingRefUpdate -> hasTrackingRefUpdate: Probability = 1.00, Count = 1
trackingRefUpdate -> trackingRefUpdate: Probability = 1.00, Count = 1
set.Contains -> set.contains: Probability = 1.00, Count = 1
srcCell -> srcCell: Probability = 1.00, Count = 1
srcCell.Sheet -> evaluateAny: Probability = 1.00, Count = 1
EvaluateAny -> srcCell,: Probability = 1.00, Count = 1
srcCell, -> srcCell.getRowIndex: Probability = 1.00, Count = 1
srcCell.RowIndex, -> srcCell.getColumnIndex: Probability = 1.00, Count = 1
AcceptTransitGatewayVpcAttachmentResponse -> AcceptTransitGatewayVpcAttachmentResult: Probability = 1.00, Count = 1
AcceptTransitGatewayVpcAttachment -> acceptTransitGatewayVpcAttachment: Probability = 1.00, Count = 1
AcceptTransitGatewayVpcAttachmentRequest -> AcceptTransitGatewayVpcAttachmentRequest: Probability = 1.00, Count = 1
Invoke<AcceptTransitGatewayVpcAttachmentResponse> -> executeAcceptTransitGatewayVpcAttachment: Probability = 1.00, Count = 1
"<opaque -> "<opaque: Probability = 1.00, Count = 1
schema='" -> schema='": Probability = 1.00, Count = 1
CreateSetBasedOnQuality -> createSetBasedOnQuality: Probability = 1.00, Count = 1
maxNumUniqueValues, -> maxNumUniqueValues,: Probability = 1.00, Count = 1
desiredMaxSaturation -> desiredMaxSaturation: Probability = 0.50, Count = 1
desiredMaxSaturation -> maxNumUniqueValues,desiredMaxSaturation: Probability = 0.50, Count = 1
List<Instance> -> java.util.List<Instance>: Probability = 1.00, Count = 2
DeleteIntegration -> deleteIntegration: Probability = 1.00, Count = 1
DeleteIntegrationRequest -> DeleteIntegrationRequest: Probability = 1.00, Count = 1
Invoke<DeleteIntegrationResponse> -> executeDeleteIntegration: Probability = 1.00, Count = 1
peek -> peek: Probability = 1.00, Count = 1
CheckDomainTransferabilityResponse -> CheckDomainTransferabilityResult: Probability = 1.00, Count = 1
CheckDomainTransferability -> checkDomainTransferability: Probability = 1.00, Count = 1
CheckDomainTransferabilityRequest -> CheckDomainTransferabilityRequest: Probability = 1.00, Count = 1
Invoke<CheckDomainTransferabilityResponse> -> executeCheckDomainTransferability: Probability = 1.00, Count = 1
InitiateJobResponse -> InitiateJobResult: Probability = 1.00, Count = 1
InitiateJob -> initiateJob: Probability = 1.00, Count = 1
InitiateJobRequest -> InitiateJobRequest: Probability = 1.00, Count = 2
Invoke<InitiateJobResponse> -> executeInitiateJob: Probability = 1.00, Count = 1
StempelPolishStemFilterFactory -> StempelPolishStemFilterFactory: Probability = 1.00, Count = 1
RemoveLastAuthor -> removeLastAuthor: Probability = 1.00, Count = 1
PropertyIDMap.PID_LASTAUTHOR -> PropertyIDMap.PID_LASTAUTHOR: Probability = 1.00, Count = 1
"<fuzzy -> "<fuzzy: Probability = 1.00, Count = 1
similarity='" -> similarity='": Probability = 1.00, Count = 1
this.similarity+ -> this.similarity+: Probability = 1.00, Count = 1
overflow -> bytesLeft: Probability = 0.60, Count = 6
overflow -> bufferLeft: Probability = 0.40, Count = 4
bytesToCopy -> byteUpto,: Probability = 0.50, Count = 2
bytesToCopy -> bufferLeft: Probability = 0.50, Count = 2
GetBundlesResponse -> GetBundlesResult: Probability = 1.00, Count = 1
GetBundles -> getBundles: Probability = 1.00, Count = 1
GetBundlesRequest -> GetBundlesRequest: Probability = 1.00, Count = 1
Invoke<GetBundlesResponse> -> executeGetBundles: Probability = 1.00, Count = 1
StopAssessmentRunResponse -> StopAssessmentRunResult: Probability = 1.00, Count = 1
StopAssessmentRun -> stopAssessmentRun: Probability = 1.00, Count = 1
StopAssessmentRunRequest -> StopAssessmentRunRequest: Probability = 1.00, Count = 1
Invoke<StopAssessmentRunResponse> -> executeStopAssessmentRun: Probability = 1.00, Count = 1
CreateFolderResponse -> CreateFolderResult: Probability = 1.00, Count = 1
CreateFolder -> createFolder: Probability = 1.00, Count = 1
CreateFolderRequest -> CreateFolderRequest: Probability = 1.00, Count = 1
Invoke<CreateFolderResponse> -> executeCreateFolder: Probability = 1.00, Count = 1
ChangeResourceRecordSetsRequest -> ChangeResourceRecordSetsRequest: Probability = 1.00, Count = 2
hostedZoneId, -> hostedZoneId,: Probability = 1.00, Count = 2
changeBatch -> changeBatch: Probability = 1.00, Count = 2
_changeBatch -> setChangeBatch: Probability = 1.00, Count = 1
CreateDeploymentStrategyResponse -> CreateDeploymentStrategyResult: Probability = 1.00, Count = 1
CreateDeploymentStrategy -> createDeploymentStrategy: Probability = 1.00, Count = 1
CreateDeploymentStrategyRequest -> CreateDeploymentStrategyRequest: Probability = 1.00, Count = 1
Invoke<CreateDeploymentStrategyResponse> -> executeCreateDeploymentStrategy: Probability = 1.00, Count = 1
cacheClusterId -> cacheClusterId: Probability = 1.00, Count = 2
_cacheClusterId -> setCacheClusterId: Probability = 1.00, Count = 1
SetAllGroupHeads -> setAllGroupHeads: Probability = 1.00, Count = 1
allGroupHeads -> allGroupHeads: Probability = 1.00, Count = 2
this.allGroupHeads -> this.allGroupHeads: Probability = 1.00, Count = 1
EntrySet -> entrySet: Probability = 1.00, Count = 2
CreatePhoneNumberOrderResponse -> CreatePhoneNumberOrderResult: Probability = 1.00, Count = 1
CreatePhoneNumberOrder -> createPhoneNumberOrder: Probability = 1.00, Count = 1
CreatePhoneNumberOrderRequest -> CreatePhoneNumberOrderRequest: Probability = 1.00, Count = 1
Invoke<CreatePhoneNumberOrderResponse> -> executeCreatePhoneNumberOrder: Probability = 1.00, Count = 1
DetectModerationLabelsResponse -> DetectModerationLabelsResult: Probability = 1.00, Count = 1
DetectModerationLabels -> detectModerationLabels: Probability = 1.00, Count = 1
DetectModerationLabelsRequest -> DetectModerationLabelsRequest: Probability = 1.00, Count = 1
Invoke<DetectModerationLabelsResponse> -> executeDetectModerationLabels: Probability = 1.00, Count = 1
firstCh -> firstCh: Probability = 1.00, Count = 2
part.Length -> part.charAt: Probability = 0.23, Count = 3
part.Length -> part.length: Probability = 0.38, Count = 5
part.Length -> assignSpec: Probability = 0.15, Count = 2
part.Length -> part.substring: Probability = 0.23, Count = 3
specLen -> specLen: Probability = 1.00, Count = 3
SendDiagnosticInterruptResponse -> SendDiagnosticInterruptResult: Probability = 1.00, Count = 1
SendDiagnosticInterrupt -> sendDiagnosticInterrupt: Probability = 1.00, Count = 1
SendDiagnosticInterruptRequest -> SendDiagnosticInterruptRequest: Probability = 1.00, Count = 1
Invoke<SendDiagnosticInterruptResponse> -> executeSendDiagnosticInterrupt: Probability = 1.00, Count = 1
AbortDocumentVersionUploadResponse -> AbortDocumentVersionUploadResult: Probability = 1.00, Count = 1
AbortDocumentVersionUpload -> abortDocumentVersionUpload: Probability = 1.00, Count = 1
AbortDocumentVersionUploadRequest -> AbortDocumentVersionUploadRequest: Probability = 1.00, Count = 1
Invoke<AbortDocumentVersionUploadResponse> -> executeAbortDocumentVersionUpload: Probability = 1.00, Count = 1
PaneInformation -> PaneInformation: Probability = 1.00, Count = 1
this.leftColumn -> this.leftColumn: Probability = 1.00, Count = 1
this.activePane -> this.activePane: Probability = 1.00, Count = 1
DescribeScalingProcessTypesResponse -> DescribeScalingProcessTypesResult: Probability = 1.00, Count = 1
DescribeScalingProcessTypes -> describeScalingProcessTypes: Probability = 1.00, Count = 1
DescribeScalingProcessTypesRequest -> DescribeScalingProcessTypesRequest: Probability = 1.00, Count = 1
Invoke<DescribeScalingProcessTypesResponse> -> executeDescribeScalingProcessTypes: Probability = 1.00, Count = 1
warnIfOpen -> warnIfOpen: Probability = 1.00, Count = 1
"A -> "A: Probability = 1.00, Count = 1
acquired -> acquired: Probability = 1.00, Count = 1
attached -> attached: Probability = 1.00, Count = 1
released. -> released.: Probability = 1.00, Count = 1
"See -> "See: Probability = 1.00, Count = 1
java.io.Closeable -> java.io.Closeable: Probability = 1.00, Count = 1
information -> information: Probability = 1.00, Count = 1
avoiding -> avoiding: Probability = 1.00, Count = 1
leaks." -> leaks.": Probability = 1.00, Count = 1
REPORTER.report -> REPORTER.report: Probability = 1.00, Count = 1
GetImageScanRequest -> GetImageScanRequest: Probability = 1.00, Count = 1
"GetImageScan", -> "GetImageScan",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/tags/[Tag]/scan" -> "/repos/[RepoNamespace]/[RepoName]/tags/[Tag]/scan": Probability = 1.00, Count = 2
ListSkillsStoreCategoriesResponse -> ListSkillsStoreCategoriesResult: Probability = 1.00, Count = 1
ListSkillsStoreCategories -> listSkillsStoreCategories: Probability = 1.00, Count = 1
ListSkillsStoreCategoriesRequest -> ListSkillsStoreCategoriesRequest: Probability = 1.00, Count = 1
Invoke<ListSkillsStoreCategoriesResponse> -> executeListSkillsStoreCategories: Probability = 1.00, Count = 1
getHeight -> getHeight: Probability = 1.00, Count = 1
mBitmap.getHeight -> mImage.getHeight: Probability = 1.00, Count = 1
DetectEntitiesResponse -> DetectEntitiesResult: Probability = 1.00, Count = 1
DetectEntities -> detectEntities: Probability = 1.00, Count = 1
DetectEntitiesRequest -> DetectEntitiesRequest: Probability = 1.00, Count = 1
Invoke<DetectEntitiesResponse> -> executeDetectEntities: Probability = 1.00, Count = 1
w.PutInt -> w.putInt: Probability = 1.00, Count = 5
state.Ord -> state.ord: Probability = 0.67, Count = 4
state.Ord -> "ord=": Probability = 0.17, Count = 1
state.Ord -> indexEnum.term: Probability = 0.17, Count = 1
SetCRC -> setCRC: Probability = 1.00, Count = 1
crc32 -> crc32: Probability = 1.00, Count = 2
maxIn -> maxIn,: Probability = 0.20, Count = 2
maxIn -> !maxInclusive: Probability = 0.10, Count = 1
maxIn -> maxIn: Probability = 0.30, Count = 3
maxIn -> Math.nextAfter: Probability = 0.10, Count = 1
maxIn -> Double.NEGATIVE_INFINITY: Probability = 0.10, Count = 1
maxIn -> failNoMatch: Probability = 0.10, Count = 1
maxIn -> this.max: Probability = 0.10, Count = 1
minIn -> minIn: Probability = 0.83, Count = 5
minIn -> maxIn: Probability = 0.17, Count = 1
LittleEndianConsts.INT_SIZE -> LittleEndianConsts.INT_SIZE: Probability = 1.00, Count = 1
CreatePublishingDestinationResponse -> CreatePublishingDestinationResult: Probability = 1.00, Count = 1
CreatePublishingDestination -> createPublishingDestination: Probability = 1.00, Count = 1
CreatePublishingDestinationRequest -> CreatePublishingDestinationRequest: Probability = 1.00, Count = 1
Invoke<CreatePublishingDestinationResponse> -> executeCreatePublishingDestination: Probability = 1.00, Count = 1
"jarowinkler -> "jarowinkler: Probability = 1.00, Count = 1
DeleteInvitationsResponse -> DeleteInvitationsResult: Probability = 1.00, Count = 1
DeleteInvitations -> deleteInvitations: Probability = 1.00, Count = 1
DeleteInvitationsRequest -> DeleteInvitationsRequest: Probability = 1.00, Count = 1
Invoke<DeleteInvitationsResponse> -> executeDeleteInvitations: Probability = 1.00, Count = 1
DelimitedPayloadTokenFilterFactory -> DelimitedPayloadTokenFilterFactory: Probability = 1.00, Count = 1
encoderClass -> encoderClass: Probability = 1.00, Count = 1
ENCODER_ATTR -> ENCODER_ATTR: Probability = 1.00, Count = 1
DELIMITER_ATTR, -> DELIMITER_ATTR,: Probability = 1.00, Count = 1
'|' -> '|': Probability = 1.00, Count = 2
ListSmartHomeAppliancesResponse -> ListSmartHomeAppliancesResult: Probability = 1.00, Count = 1
ListSmartHomeAppliances -> listSmartHomeAppliances: Probability = 1.00, Count = 1
ListSmartHomeAppliancesRequest -> ListSmartHomeAppliancesRequest: Probability = 1.00, Count = 1
Invoke<ListSmartHomeAppliancesResponse> -> executeListSmartHomeAppliances: Probability = 1.00, Count = 1
listener.OnConfigChanged -> listener.onConfigChanged: Probability = 1.00, Count = 1
GetDetailsWithHttpMessagesAsync -> getByResourceGroup: Probability = 1.00, Count = 1
CreateTrialComponentResponse -> CreateTrialComponentResult: Probability = 1.00, Count = 1
CreateTrialComponent -> createTrialComponent: Probability = 1.00, Count = 1
CreateTrialComponentRequest -> CreateTrialComponentRequest: Probability = 1.00, Count = 1
Invoke<CreateTrialComponentResponse> -> executeCreateTrialComponent: Probability = 1.00, Count = 1
UpdateResourceResponse -> UpdateResourceResult: Probability = 1.00, Count = 1
UpdateResource -> updateResource: Probability = 1.00, Count = 1
UpdateResourceRequest -> UpdateResourceRequest: Probability = 1.00, Count = 1
Invoke<UpdateResourceResponse> -> executeUpdateResource: Probability = 1.00, Count = 1
channel.size -> channel.size: Probability = 1.00, Count = 1
during -> during: Probability = 1.00, Count = 1
0x000F -> 0x000F: Probability = 1.00, Count = 2
IsLocked -> locked: Probability = 0.50, Count = 1
IsLocked -> !refCounts.containsKey: Probability = 0.50, Count = 1
value.count -> getRefCount: Probability = 0.50, Count = 1
value.count -> .count: Probability = 0.50, Count = 1
WithSTSClient -> STSAssumeRoleSessionCredentialsProvider: Probability = 0.50, Count = 1
WithSTSClient -> withSTSClient: Probability = 0.50, Count = 1
IAcsClient -> IAcsClient: Probability = 0.50, Count = 1
IAcsClient -> client: Probability = 0.50, Count = 1
client -> this.stsClient: Probability = 0.50, Count = 1
client -> this: Probability = 0.50, Count = 1
stsClient -> client: Probability = 1.00, Count = 1
AcceptMatchResponse -> AcceptMatchResult: Probability = 1.00, Count = 1
AcceptMatch -> acceptMatch: Probability = 1.00, Count = 1
AcceptMatchRequest -> AcceptMatchRequest: Probability = 1.00, Count = 1
Invoke<AcceptMatchResponse> -> executeAcceptMatch: Probability = 1.00, Count = 1
.skipMustBeNonNegative -> .skipMustBeNonNegative: Probability = 1.00, Count = 1
GetHITResponse -> GetHITResult: Probability = 1.00, Count = 1
GetHIT -> getHIT: Probability = 1.00, Count = 1
GetHITRequest -> GetHITRequest: Probability = 1.00, Count = 1
Invoke<GetHITResponse> -> executeGetHIT: Probability = 1.00, Count = 1
StopStreamProcessorResponse -> StopStreamProcessorResult: Probability = 1.00, Count = 1
StopStreamProcessor -> stopStreamProcessor: Probability = 1.00, Count = 1
StopStreamProcessorRequest -> StopStreamProcessorRequest: Probability = 1.00, Count = 1
Invoke<StopStreamProcessorResponse> -> executeStopStreamProcessor: Probability = 1.00, Count = 1
CreateIf -> createIf: Probability = 1.00, Count = 1
optiIf.Set -> optiIf.set: Probability = 1.00, Count = 1
DeleteIAMPolicyAssignmentResponse -> DeleteIAMPolicyAssignmentResult: Probability = 1.00, Count = 1
DeleteIAMPolicyAssignment -> deleteIAMPolicyAssignment: Probability = 1.00, Count = 1
DeleteIAMPolicyAssignmentRequest -> DeleteIAMPolicyAssignmentRequest: Probability = 1.00, Count = 1
Invoke<DeleteIAMPolicyAssignmentResponse> -> executeDeleteIAMPolicyAssignment: Probability = 1.00, Count = 1
UpdateCampaignResponse -> UpdateCampaignResult: Probability = 1.00, Count = 1
UpdateCampaign -> updateCampaign: Probability = 1.00, Count = 1
UpdateCampaignRequest -> UpdateCampaignRequest: Probability = 1.00, Count = 1
Invoke<UpdateCampaignResponse> -> executeUpdateCampaign: Probability = 1.00, Count = 1
FixOffsetBeforeMatch -> fixOffsetBeforeMatch: Probability = 1.00, Count = 1
updatedLexerActions -> updatedLexerActions: Probability = 0.56, Count = 5
updatedLexerActions -> lexerActions[i]: Probability = 0.22, Count = 2
updatedLexerActions -> lexerActions.clone: Probability = 0.11, Count = 1
updatedLexerActions -> updatedLexerActions[i]: Probability = 0.11, Count = 1
_objectProtectRecord -> _objectProtectRecord: Probability = 1.00, Count = 3
srec -> srec: Probability = 1.00, Count = 2
PackedDataOutput -> PackedDataOutput: Probability = 1.00, Count = 1
CheckRuleIndex -> checkRuleIndex: Probability = 1.00, Count = 1
rules[idx] -> rules.get: Probability = 1.00, Count = 1
FieldCacheSource -> FieldCacheSource: Probability = 1.00, Count = 4
IndonesianStemFilterFactory -> IndonesianStemFilterFactory: Probability = 1.00, Count = 1
"stemDerivational", -> "stemDerivational",: Probability = 1.00, Count = 1
eo -> eo: Probability = 1.00, Count = 5
oso -> oso: Probability = 1.00, Count = 5
oeo -> oeo: Probability = 1.00, Count = 5
MergeAlgorithm -> MergeAlgorithm: Probability = 1.00, Count = 1
this.diffAlg -> this.diffAlg: Probability = 1.00, Count = 1
unmappableCharacterAction -> unmappableCharacterAction: Probability = 1.00, Count = 1
_unmappableCharacterAction -> unmappableCharacterAction: Probability = 1.00, Count = 1
matcher.NextMatch -> set.add: Probability = 0.50, Count = 2
matcher.NextMatch -> matcher.group: Probability = 0.50, Count = 2
NGit.Dircache.DirCacheIterator -> DirCacheIterator: Probability = 1.00, Count = 1
Explanation[] -> Explanation[]: Probability = 1.00, Count = 1
GetDetails -> getDetails: Probability = 1.00, Count = 1
details -> details.toArray: Probability = 1.00, Count = 1
details.ToArray -> Explanation[0]: Probability = 1.00, Count = 1
"\">" -> +":\""+text+"\">": Probability = 1.00, Count = 2
numberOfRegions -> numberOfRegions: Probability = 1.00, Count = 2
ResizeClusterResponse -> Cluster: Probability = 1.00, Count = 1
ResizeCluster -> resizeCluster: Probability = 1.00, Count = 1
ResizeClusterRequest -> ResizeClusterRequest: Probability = 1.00, Count = 1
Invoke<ResizeClusterResponse> -> executeResizeCluster: Probability = 1.00, Count = 1
GetInflectionTypeTranslation -> getInflectionTypeTranslation: Probability = 1.00, Count = 1
CreateMountTargetResponse -> CreateMountTargetResult: Probability = 1.00, Count = 1
CreateMountTarget -> createMountTarget: Probability = 1.00, Count = 1
CreateMountTargetRequest -> CreateMountTargetRequest: Probability = 1.00, Count = 1
Invoke<CreateMountTargetResponse> -> executeCreateMountTarget: Probability = 1.00, Count = 1
subnetId -> subnetId: Probability = 1.00, Count = 2
_subnetId -> setSubnetId: Probability = 1.00, Count = 1
SetTitle -> setTitle: Probability = 1.00, Count = 1
this.title -> this.title: Probability = 1.00, Count = 1
ListGroupPoliciesRequest -> ListGroupPoliciesRequest: Probability = 1.00, Count = 1
SetDeltaSearchWindowSize -> setDeltaSearchWindowSize: Probability = 1.00, Count = 1
objectCount -> objectCount: Probability = 1.00, Count = 3
currentCharIndex -> currentCharIndex: Probability = 1.00, Count = 4
ListGraphsResponse -> ListGraphsResult: Probability = 1.00, Count = 1
ListGraphs -> listGraphs: Probability = 1.00, Count = 1
ListGraphsRequest -> ListGraphsRequest: Probability = 1.00, Count = 1
Invoke<ListGraphsResponse> -> executeListGraphs: Probability = 1.00, Count = 1
this.deserializationOptions -> this.deserializationOptions: Probability = 1.00, Count = 1
DetectDominantLanguageResponse -> DetectDominantLanguageResult: Probability = 1.00, Count = 1
DetectDominantLanguage -> detectDominantLanguage: Probability = 1.00, Count = 1
DetectDominantLanguageRequest -> DetectDominantLanguageRequest: Probability = 1.00, Count = 1
Invoke<DetectDominantLanguageResponse> -> executeDetectDominantLanguage: Probability = 1.00, Count = 1
RemovePageCount -> removePageCount: Probability = 1.00, Count = 1
PropertyIDMap.PID_PAGECOUNT -> PropertyIDMap.PID_PAGECOUNT: Probability = 1.00, Count = 1
FooterRecord -> copy: Probability = 1.00, Count = 1
DisableVpcClassicLinkDnsSupportResponse -> DisableVpcClassicLinkDnsSupportResult: Probability = 1.00, Count = 1
DisableVpcClassicLinkDnsSupport -> disableVpcClassicLinkDnsSupport: Probability = 1.00, Count = 1
DisableVpcClassicLinkDnsSupportRequest -> DisableVpcClassicLinkDnsSupportRequest: Probability = 1.00, Count = 1
Invoke<DisableVpcClassicLinkDnsSupportResponse> -> executeDisableVpcClassicLinkDnsSupport: Probability = 1.00, Count = 1
NumberRecord -> NumberRecord: Probability = 1.00, Count = 5
CreateGraphResponse -> CreateGraphResult: Probability = 1.00, Count = 1
CreateGraph -> createGraph: Probability = 1.00, Count = 1
CreateGraphRequest -> CreateGraphRequest: Probability = 1.00, Count = 1
Invoke<CreateGraphResponse> -> executeCreateGraph: Probability = 1.00, Count = 1
asDoubleBuffer -> asDoubleBuffer: Probability = 1.00, Count = 1
java.nio.DoubleToByteBufferAdapter.asDoubleBuffer -> DoubleToByteBufferAdapter.asDoubleBuffer: Probability = 1.00, Count = 1
AnalysisToolPak.RegisterFunction -> AnalysisToolPak.registerFunction: Probability = 0.50, Count = 1
AnalysisToolPak.RegisterFunction -> FunctionEval.registerFunction: Probability = 0.50, Count = 1
CreateAutoMLJobResponse -> CreateAutoMLJobResult: Probability = 1.00, Count = 1
CreateAutoMLJob -> createAutoMLJob: Probability = 1.00, Count = 1
CreateAutoMLJobRequest -> CreateAutoMLJobRequest: Probability = 1.00, Count = 1
Invoke<CreateAutoMLJobResponse> -> executeCreateAutoMLJob: Probability = 1.00, Count = 1
DefineIndexFieldResponse -> DefineIndexFieldResult: Probability = 1.00, Count = 1
DefineIndexField -> defineIndexField: Probability = 1.00, Count = 1
DefineIndexFieldRequest -> DefineIndexFieldRequest: Probability = 1.00, Count = 1
Invoke<DefineIndexFieldResponse> -> executeDefineIndexField: Probability = 1.00, Count = 1
Invoke<ListDomainNamesResponse> -> executeListDomainNames: Probability = 1.00, Count = 1
byteBuffer.putChar -> byteBuffer.putChar: Probability = 1.00, Count = 2
libcore.io.SizeOf.CHAR, -> SizeOf.CHAR,: Probability = 1.00, Count = 2
NGit.Treewalk.Filter.PathFilter -> PathFilter: Probability = 1.00, Count = 2
.emptyPathNotPermitted -> .emptyPathNotPermitted: Probability = 1.00, Count = 2
Sharpen.StringHelper.CopyValueOf -> String.copyValueOf: Probability = 1.00, Count = 1
GrowForward -> growForward: Probability = 1.00, Count = 1
newForwardType -> newForwardType: Probability = 0.29, Count = 2
newForwardType -> Type[forwardPos.length]: Probability = 0.14, Count = 1
newForwardType -> forwardType,: Probability = 0.14, Count = 1
newForwardType -> newForwardType,: Probability = 0.14, Count = 1
newForwardType -> forwardType.length: Probability = 0.14, Count = 1
newForwardType -> forwardType: Probability = 0.14, Count = 1
Invoke<DescribeReplicationGroupsResponse> -> executeDescribeReplicationGroups: Probability = 1.00, Count = 1
!valueKeyMap.ContainsKey -> valueKeyMap.getOrDefault: Probability = 1.00, Count = 1
ModifyVpcEndpointConnectionNotificationResponse -> ModifyVpcEndpointConnectionNotificationResult: Probability = 1.00, Count = 1
ModifyVpcEndpointConnectionNotification -> modifyVpcEndpointConnectionNotification: Probability = 1.00, Count = 1
ModifyVpcEndpointConnectionNotificationRequest -> ModifyVpcEndpointConnectionNotificationRequest: Probability = 1.00, Count = 1
Invoke<ModifyVpcEndpointConnectionNotificationResponse> -> executeModifyVpcEndpointConnectionNotification: Probability = 1.00, Count = 1
fieldQuery -> fieldQuery: Probability = 1.00, Count = 2
this.fieldQuery -> this.fieldQuery: Probability = 1.00, Count = 1
DescribeAssessmentTemplatesResponse -> DescribeAssessmentTemplatesResult: Probability = 1.00, Count = 1
DescribeAssessmentTemplates -> describeAssessmentTemplates: Probability = 1.00, Count = 1
DescribeAssessmentTemplatesRequest -> DescribeAssessmentTemplatesRequest: Probability = 1.00, Count = 1
Invoke<DescribeAssessmentTemplatesResponse> -> executeDescribeAssessmentTemplates: Probability = 1.00, Count = 1
keywordAtt -> this.longestOnly: Probability = 1.00, Count = 1
GetNameCommentRecord -> getNameCommentRecord: Probability = 1.00, Count = 1
nameRecord.NameText -> commentRecords.get: Probability = 1.00, Count = 1
commentRecords[nameRecord.NameText] -> nameRecord.getNameText: Probability = 1.00, Count = 1
AliasTarget -> AliasTarget: Probability = 1.00, Count = 1
dnsName -> dNSName: Probability = 1.00, Count = 2
_dnsName -> setDNSName: Probability = 1.00, Count = 1
ListOutgoingTypedLinksResponse -> ListOutgoingTypedLinksResult: Probability = 1.00, Count = 1
ListOutgoingTypedLinks -> listOutgoingTypedLinks: Probability = 1.00, Count = 1
ListOutgoingTypedLinksRequest -> ListOutgoingTypedLinksRequest: Probability = 1.00, Count = 1
Invoke<ListOutgoingTypedLinksResponse> -> executeListOutgoingTypedLinks: Probability = 1.00, Count = 1
CreateHsmConfigurationResponse -> HsmConfiguration: Probability = 1.00, Count = 1
CreateHsmConfiguration -> createHsmConfiguration: Probability = 1.00, Count = 1
CreateHsmConfigurationRequest -> CreateHsmConfigurationRequest: Probability = 1.00, Count = 1
Invoke<CreateHsmConfigurationResponse> -> executeCreateHsmConfiguration: Probability = 1.00, Count = 1
"[BEGIN]\n" -> "[BEGIN]\n": Probability = 1.00, Count = 1
"[/BEGIN]\n" -> "[/BEGIN]\n": Probability = 1.00, Count = 1
DisableDomainAutoRenewResponse -> DisableDomainAutoRenewResult: Probability = 1.00, Count = 1
DisableDomainAutoRenew -> disableDomainAutoRenew: Probability = 1.00, Count = 1
DisableDomainAutoRenewRequest -> DisableDomainAutoRenewRequest: Probability = 1.00, Count = 1
Invoke<DisableDomainAutoRenewResponse> -> executeDisableDomainAutoRenew: Probability = 1.00, Count = 1
UpdateFindingsFeedbackResponse -> UpdateFindingsFeedbackResult: Probability = 1.00, Count = 1
UpdateFindingsFeedback -> updateFindingsFeedback: Probability = 1.00, Count = 1
UpdateFindingsFeedbackRequest -> UpdateFindingsFeedbackRequest: Probability = 1.00, Count = 1
Invoke<UpdateFindingsFeedbackResponse> -> executeUpdateFindingsFeedback: Probability = 1.00, Count = 1
palette.SetColor -> _palette.setColor: Probability = 1.00, Count = 1
nCFRTIDs -> verWriter: Probability = 0.17, Count = 1
nCFRTIDs -> rgCFRTID.length: Probability = 0.17, Count = 1
nCFRTIDs -> CFRTID: Probability = 0.17, Count = 1
nCFRTIDs -> cfrtid: Probability = 0.17, Count = 1
nCFRTIDs -> rgCFRTID: Probability = 0.17, Count = 1
nCFRTIDs -> cfrtid.serialize: Probability = 0.17, Count = 1
RevokeInvitationResponse -> RevokeInvitationResult: Probability = 1.00, Count = 1
RevokeInvitation -> revokeInvitation: Probability = 1.00, Count = 1
RevokeInvitationRequest -> RevokeInvitationRequest: Probability = 1.00, Count = 1
Invoke<RevokeInvitationResponse> -> executeRevokeInvitation: Probability = 1.00, Count = 1
GetTextDetectionResponse -> GetTextDetectionResult: Probability = 1.00, Count = 1
GetTextDetection -> getTextDetection: Probability = 1.00, Count = 1
GetTextDetectionRequest -> GetTextDetectionRequest: Probability = 1.00, Count = 1
Invoke<GetTextDetectionResponse> -> executeGetTextDetection: Probability = 1.00, Count = 1
ensureCapacity -> ensureCapacity: Probability = 1.00, Count = 1
ourMin -> ourMin: Probability = 1.00, Count = 1
ourMin, -> ourMin,: Probability = 1.00, Count = 1
DisassociateAddressResponse -> DisassociateAddressResult: Probability = 1.00, Count = 1
DisassociateAddress -> disassociateAddress: Probability = 1.00, Count = 1
Invoke<DisassociateAddressResponse> -> executeDisassociateAddress: Probability = 1.00, Count = 1
this.forceUpdate -> this.forceUpdate: Probability = 1.00, Count = 1
fis -> fis: Probability = 0.67, Count = 2
fis -> _fieldInfos: Probability = 0.33, Count = 1
XPathTokenElement -> XPathTokenElement: Probability = 1.00, Count = 1
field_3_topRow -> field_3_topRow: Probability = 1.00, Count = 2
field_4_leftColumn -> field_4_leftColumn: Probability = 1.00, Count = 2
field_5_activePane -> field_5_activePane: Probability = 1.00, Count = 2
StepExecutionState -> StepExecutionState: Probability = 1.00, Count = 1
EditEventRequest -> EditEventRequest: Probability = 1.00, Count = 1
"EditEvent", -> "EditEvent",: Probability = 1.00, Count = 1
PurchaseHostReservationResponse -> PurchaseHostReservationResult: Probability = 1.00, Count = 1
PurchaseHostReservation -> purchaseHostReservation: Probability = 1.00, Count = 1
PurchaseHostReservationRequest -> PurchaseHostReservationRequest: Probability = 1.00, Count = 1
Invoke<PurchaseHostReservationResponse> -> executePurchaseHostReservation: Probability = 1.00, Count = 1
ConfirmPrivateVirtualInterfaceResponse -> ConfirmPrivateVirtualInterfaceResult: Probability = 1.00, Count = 1
ConfirmPrivateVirtualInterface -> confirmPrivateVirtualInterface: Probability = 1.00, Count = 1
ConfirmPrivateVirtualInterfaceRequest -> ConfirmPrivateVirtualInterfaceRequest: Probability = 1.00, Count = 1
Invoke<ConfirmPrivateVirtualInterfaceResponse> -> executeConfirmPrivateVirtualInterface: Probability = 1.00, Count = 1
numberToLength.Contains -> numberToLength.get: Probability = 1.00, Count = 1
UnknownFormatFlagsException -> UnknownFormatFlagsException: Probability = 1.00, Count = 1
IsFreezePane -> isFreezePane: Probability = 1.00, Count = 1
reservedDBInstancesOfferingId -> reservedDBInstancesOfferingId: Probability = 1.00, Count = 2
_reservedDBInstancesOfferingId -> setReservedDBInstancesOfferingId: Probability = 1.00, Count = 1
IntegerField -> _data: Probability = 0.57, Count = 12
IntegerField -> IntegerField: Probability = 0.43, Count = 9
POIFSConstants.END_OF_CHAIN -> POIFSConstants.END_OF_CHAIN: Probability = 1.00, Count = 4
ListEventSubscriptionsResponse -> ListEventSubscriptionsResult: Probability = 1.00, Count = 1
ListEventSubscriptions -> listEventSubscriptions: Probability = 1.00, Count = 1
ListEventSubscriptionsRequest -> ListEventSubscriptionsRequest: Probability = 1.00, Count = 1
Invoke<ListEventSubscriptionsResponse> -> executeListEventSubscriptions: Probability = 1.00, Count = 1
ListProxySessionsResponse -> ListProxySessionsResult: Probability = 1.00, Count = 1
ListProxySessions -> listProxySessions: Probability = 1.00, Count = 1
ListProxySessionsRequest -> ListProxySessionsRequest: Probability = 1.00, Count = 1
Invoke<ListProxySessionsResponse> -> executeListProxySessions: Probability = 1.00, Count = 1
ISet<char> -> Set<Character>: Probability = 1.00, Count = 1
.GetObjectId -> .getObjectId: Probability = 1.00, Count = 1
DrawLine -> drawLine: Probability = 1.00, Count = 3
ReverseBytesReader -> ReverseBytesReader: Probability = 1.00, Count = 1
GetActiveNamesResponse -> GetActiveNamesResult: Probability = 1.00, Count = 1
GetActiveNames -> getActiveNames: Probability = 1.00, Count = 1
GetActiveNamesRequest -> GetActiveNamesRequest: Probability = 1.00, Count = 1
Invoke<GetActiveNamesResponse> -> executeGetActiveNames: Probability = 1.00, Count = 1
GetFailingResult -> getFailingResult: Probability = 1.00, Count = 1
failingResult -> failingResult: Probability = 1.00, Count = 1
BatchCreateVariableResponse -> BatchCreateVariableResult: Probability = 1.00, Count = 1
BatchCreateVariable -> batchCreateVariable: Probability = 1.00, Count = 1
BatchCreateVariableRequest -> BatchCreateVariableRequest: Probability = 1.00, Count = 1
Invoke<BatchCreateVariableResponse> -> executeBatchCreateVariable: Probability = 1.00, Count = 1
REUSE_AS_IS -> REUSE_AS_IS: Probability = 1.00, Count = 1
ApplySecurityGroupsToClientVpnTargetNetworkResponse -> ApplySecurityGroupsToClientVpnTargetNetworkResult: Probability = 1.00, Count = 1
ApplySecurityGroupsToClientVpnTargetNetwork -> applySecurityGroupsToClientVpnTargetNetwork: Probability = 1.00, Count = 1
ApplySecurityGroupsToClientVpnTargetNetworkRequest -> ApplySecurityGroupsToClientVpnTargetNetworkRequest: Probability = 1.00, Count = 1
Invoke<ApplySecurityGroupsToClientVpnTargetNetworkResponse> -> executeApplySecurityGroupsToClientVpnTargetNetwork: Probability = 1.00, Count = 1
DetachInternetGatewayResponse -> DetachInternetGatewayResult: Probability = 1.00, Count = 1
DetachInternetGateway -> detachInternetGateway: Probability = 1.00, Count = 1
DetachInternetGatewayRequest -> DetachInternetGatewayRequest: Probability = 1.00, Count = 1
Invoke<DetachInternetGatewayResponse> -> executeDetachInternetGateway: Probability = 1.00, Count = 1
DescribeCampaignResponse -> DescribeCampaignResult: Probability = 1.00, Count = 1
DescribeCampaign -> describeCampaign: Probability = 1.00, Count = 1
DescribeCampaignRequest -> DescribeCampaignRequest: Probability = 1.00, Count = 1
Invoke<DescribeCampaignResponse> -> executeDescribeCampaign: Probability = 1.00, Count = 1
averageCharsPerByte -> averageCharsPerByte: Probability = 1.00, Count = 1
_averageCharsPerByte -> averageCharsPerByte: Probability = 1.00, Count = 1
ListTimeLinePhotosRequest -> ListTimeLinePhotosRequest: Probability = 1.00, Count = 1
"ListTimeLinePhotos", -> "ListTimeLinePhotos",: Probability = 1.00, Count = 1
RunTaskResponse -> RunTaskResult: Probability = 1.00, Count = 1
RunTask -> runTask: Probability = 1.00, Count = 1
RunTaskRequest -> RunTaskRequest: Probability = 1.00, Count = 1
Invoke<RunTaskResponse> -> executeRunTask: Probability = 1.00, Count = 1
SetCollector -> setCollector: Probability = 1.00, Count = 1
ICollector -> Collector: Probability = 1.00, Count = 1
collector -> collector: Probability = 1.00, Count = 2
this.collector -> this.collector: Probability = 1.00, Count = 1
AddFieldConfigListener -> addFieldConfigListener: Probability = 1.00, Count = 1
this.listeners.AddLast -> this.listeners.add: Probability = 1.00, Count = 1
ListNamedQueriesResponse -> ListNamedQueriesResult: Probability = 1.00, Count = 1
ListNamedQueries -> listNamedQueries: Probability = 1.00, Count = 1
ListNamedQueriesRequest -> ListNamedQueriesRequest: Probability = 1.00, Count = 1
Invoke<ListNamedQueriesResponse> -> executeListNamedQueries: Probability = 1.00, Count = 1
SetPort -> setPort: Probability = 1.00, Count = 1
r.port -> r.port: Probability = 1.00, Count = 1
GetSignerVersion -> getSignerVersion: Probability = 1.00, Count = 2
"1.0" -> "1.0": Probability = 0.50, Count = 1
"1.0" -> null: Probability = 0.50, Count = 1
CopyDBParameterGroupResponse -> DBParameterGroup: Probability = 1.00, Count = 1
CopyDBParameterGroup -> copyDBParameterGroup: Probability = 1.00, Count = 1
CopyDBParameterGroupRequest -> CopyDBParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<CopyDBParameterGroupResponse> -> executeCopyDBParameterGroup: Probability = 1.00, Count = 1
PackedObjectInfo -> PackedObjectInfo: Probability = 1.00, Count = 1
GetObject -> getObject: Probability = 1.00, Count = 2
entries[nth] -> entries[nth]: Probability = 1.00, Count = 1
CreateUserSourceAccountRequest -> CreateUserSourceAccountRequest: Probability = 1.00, Count = 1
"CreateUserSourceAccount", -> "CreateUserSourceAccount",: Probability = 1.00, Count = 1
"/users/sourceAccount" -> "/users/sourceAccount": Probability = 1.00, Count = 1
DeleteApplicationVpcConfigurationResponse -> DeleteApplicationVpcConfigurationResult: Probability = 1.00, Count = 1
DeleteApplicationVpcConfiguration -> deleteApplicationVpcConfiguration: Probability = 1.00, Count = 1
DeleteApplicationVpcConfigurationRequest -> DeleteApplicationVpcConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DeleteApplicationVpcConfigurationResponse> -> executeDeleteApplicationVpcConfiguration: Probability = 1.00, Count = 1
RemoveSubject -> removeSubject: Probability = 1.00, Count = 1
PropertyIDMap.PID_SUBJECT -> PropertyIDMap.PID_SUBJECT: Probability = 1.00, Count = 1
BatchGetDeploymentGroupsResponse -> BatchGetDeploymentGroupsResult: Probability = 1.00, Count = 1
BatchGetDeploymentGroups -> batchGetDeploymentGroups: Probability = 1.00, Count = 1
BatchGetDeploymentGroupsRequest -> BatchGetDeploymentGroupsRequest: Probability = 1.00, Count = 1
Invoke<BatchGetDeploymentGroupsResponse> -> executeBatchGetDeploymentGroups: Probability = 1.00, Count = 1
DisassociateRepositoryResponse -> DisassociateRepositoryResult: Probability = 1.00, Count = 1
DisassociateRepository -> disassociateRepository: Probability = 1.00, Count = 1
DisassociateRepositoryRequest -> DisassociateRepositoryRequest: Probability = 1.00, Count = 1
Invoke<DisassociateRepositoryResponse> -> executeDisassociateRepository: Probability = 1.00, Count = 1
UpdateRepoSourceRepoRequest -> UpdateRepoSourceRepoRequest: Probability = 1.00, Count = 1
"UpdateRepoSourceRepo", -> "UpdateRepoSourceRepo",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/sourceRepo" -> "/repos/[RepoNamespace]/[RepoName]/sourceRepo": Probability = 1.00, Count = 2
isHidden -> isHidden: Probability = 1.00, Count = 1
PaneRecord -> PaneRecord: Probability = 1.00, Count = 1
StartGameSessionPlacementResponse -> StartGameSessionPlacementResult: Probability = 1.00, Count = 1
StartGameSessionPlacement -> startGameSessionPlacement: Probability = 1.00, Count = 1
StartGameSessionPlacementRequest -> StartGameSessionPlacementRequest: Probability = 1.00, Count = 1
Invoke<StartGameSessionPlacementResponse> -> executeStartGameSessionPlacement: Probability = 1.00, Count = 1
getDFASize -> getDFASize: Probability = 1.00, Count = 3
atnSimulator.decisionToDFA[decision] -> atnSimulator.decisionToDFA[decision]: Probability = 1.00, Count = 1
decisionToDFA.states.Count -> decisionToDFA.states.size: Probability = 1.00, Count = 1
foundTerms -> foundTerms: Probability = 1.00, Count = 1
.path -> .path: Probability = 1.00, Count = 1
UntagAttendeeResponse -> UntagAttendeeResult: Probability = 1.00, Count = 1
UntagAttendee -> untagAttendee: Probability = 1.00, Count = 1
UntagAttendeeRequest -> UntagAttendeeRequest: Probability = 1.00, Count = 1
Invoke<UntagAttendeeResponse> -> executeUntagAttendee: Probability = 1.00, Count = 1
"[END]\n" -> "[END]\n": Probability = 1.00, Count = 1
"[/END]\n" -> "[/END]\n": Probability = 1.00, Count = 1
_termComp -> _hasFreqs: Probability = 0.25, Count = 3
_termComp -> _hasOffsets: Probability = 0.25, Count = 3
_termComp -> _hasPositions: Probability = 0.25, Count = 3
_termComp -> _hasPayloads: Probability = 0.25, Count = 3
hasPositions -> hasPositions: Probability = 1.00, Count = 2
DescribeGameSessionPlacementResponse -> DescribeGameSessionPlacementResult: Probability = 1.00, Count = 1
DescribeGameSessionPlacement -> describeGameSessionPlacement: Probability = 1.00, Count = 1
DescribeGameSessionPlacementRequest -> DescribeGameSessionPlacementRequest: Probability = 1.00, Count = 1
Invoke<DescribeGameSessionPlacementResponse> -> executeDescribeGameSessionPlacement: Probability = 1.00, Count = 1
FST<BytesRef> -> FST<BytesRef>: Probability = 1.00, Count = 2
maxHorizontalContext -> maxHorizontalContext: Probability = 1.00, Count = 2
this.words -> this.words: Probability = 1.00, Count = 1
this.maxHorizontalContext -> this.maxHorizontalContext: Probability = 1.00, Count = 1
DeleteTrialComponentResponse -> DeleteTrialComponentResult: Probability = 1.00, Count = 1
DeleteTrialComponent -> deleteTrialComponent: Probability = 1.00, Count = 1
DeleteTrialComponentRequest -> DeleteTrialComponentRequest: Probability = 1.00, Count = 1
Invoke<DeleteTrialComponentResponse> -> executeDeleteTrialComponent: Probability = 1.00, Count = 1
StartWorker -> startWorker: Probability = 1.00, Count = 1
SubscribeToEventResponse -> SubscribeToEventResult: Probability = 1.00, Count = 1
SubscribeToEvent -> subscribeToEvent: Probability = 1.00, Count = 1
SubscribeToEventRequest -> SubscribeToEventRequest: Probability = 1.00, Count = 1
Invoke<SubscribeToEventResponse> -> executeSubscribeToEvent: Probability = 1.00, Count = 1
PutScheduledUpdateGroupActionResponse -> PutScheduledUpdateGroupActionResult: Probability = 1.00, Count = 1
PutScheduledUpdateGroupAction -> putScheduledUpdateGroupAction: Probability = 1.00, Count = 1
PutScheduledUpdateGroupActionRequest -> PutScheduledUpdateGroupActionRequest: Probability = 1.00, Count = 1
Invoke<PutScheduledUpdateGroupActionResponse> -> executePutScheduledUpdateGroupAction: Probability = 1.00, Count = 1
_uBook.GetSheetName -> _uBook.getSheetName: Probability = 1.00, Count = 1
DescribeConnectionLoaResponse -> DescribeConnectionLoaResult: Probability = 1.00, Count = 1
DescribeConnectionLoa -> describeConnectionLoa: Probability = 1.00, Count = 1
DescribeConnectionLoaRequest -> DescribeConnectionLoaRequest: Probability = 1.00, Count = 1
Invoke<DescribeConnectionLoaResponse> -> executeDescribeConnectionLoa: Probability = 1.00, Count = 1
GetDescription -> description: Probability = 1.00, Count = 1
GetCredential -> getCredential: Probability = 1.00, Count = 1
_credential -> credential: Probability = 0.71, Count = 5
_credential -> icredential: Probability = 0.14, Count = 1
_credential -> icredential.fresh: Probability = 0.14, Count = 1
CopyOptionGroupResponse -> OptionGroup: Probability = 1.00, Count = 1
CopyOptionGroup -> copyOptionGroup: Probability = 1.00, Count = 1
CopyOptionGroupRequest -> CopyOptionGroupRequest: Probability = 1.00, Count = 1
Invoke<CopyOptionGroupResponse> -> executeCopyOptionGroup: Probability = 1.00, Count = 1
SendAlexaOfferToMasterResponse -> SendAlexaOfferToMasterResult: Probability = 1.00, Count = 1
SendAlexaOfferToMaster -> sendAlexaOfferToMaster: Probability = 1.00, Count = 1
SendAlexaOfferToMasterRequest -> SendAlexaOfferToMasterRequest: Probability = 1.00, Count = 1
Invoke<SendAlexaOfferToMasterResponse> -> executeSendAlexaOfferToMaster: Probability = 1.00, Count = 1
DescribeEndpointConfigResponse -> DescribeEndpointConfigResult: Probability = 1.00, Count = 1
DescribeEndpointConfig -> describeEndpointConfig: Probability = 1.00, Count = 1
DescribeEndpointConfigRequest -> DescribeEndpointConfigRequest: Probability = 1.00, Count = 1
Invoke<DescribeEndpointConfigResponse> -> executeDescribeEndpointConfig: Probability = 1.00, Count = 1
f.ShouldBeRecursive -> f.shouldBeRecursive: Probability = 1.00, Count = 1
AcceptReservedNodeExchangeResponse -> ReservedNode: Probability = 1.00, Count = 1
AcceptReservedNodeExchange -> acceptReservedNodeExchange: Probability = 1.00, Count = 1
AcceptReservedNodeExchangeRequest -> AcceptReservedNodeExchangeRequest: Probability = 1.00, Count = 1
Invoke<AcceptReservedNodeExchangeResponse> -> executeAcceptReservedNodeExchange: Probability = 1.00, Count = 1
AuthorizeClusterSecurityGroupIngressResponse -> ClusterSecurityGroup: Probability = 1.00, Count = 1
AuthorizeClusterSecurityGroupIngress -> authorizeClusterSecurityGroupIngress: Probability = 1.00, Count = 1
AuthorizeClusterSecurityGroupIngressRequest -> AuthorizeClusterSecurityGroupIngressRequest: Probability = 1.00, Count = 1
Invoke<AuthorizeClusterSecurityGroupIngressResponse> -> executeAuthorizeClusterSecurityGroupIngress: Probability = 1.00, Count = 1
ListVaultsResponse -> ListVaultsResult: Probability = 1.00, Count = 1
ListVaults -> listVaults: Probability = 1.00, Count = 1
ListVaultsRequest -> ListVaultsRequest: Probability = 1.00, Count = 1
Invoke<ListVaultsResponse> -> executeListVaults: Probability = 1.00, Count = 1
toolPack -> toolPack: Probability = 1.00, Count = 2
_usedToolPacks.Add -> _usedToolPacks.add: Probability = 1.00, Count = 1
CreateRealtimeEndpointResponse -> CreateRealtimeEndpointResult: Probability = 1.00, Count = 1
CreateRealtimeEndpoint -> createRealtimeEndpoint: Probability = 1.00, Count = 1
CreateRealtimeEndpointRequest -> CreateRealtimeEndpointRequest: Probability = 1.00, Count = 1
Invoke<CreateRealtimeEndpointResponse> -> executeCreateRealtimeEndpoint: Probability = 1.00, Count = 1
listener.OnClearCachedValue -> listener.onClearCachedValue: Probability = 1.00, Count = 1
listener, -> listener,: Probability = 0.83, Count = 5
listener, -> r.getChild: Probability = 0.17, Count = 1
PageBreakRecord -> PageBreakRecord: Probability = 1.00, Count = 1
Image -> attSource.toString: Probability = 1.00, Count = 1
AddLen -> value: Probability = 0.50, Count = 2
AddLen -> _array[_count]: Probability = 0.25, Count = 1
AddLen -> _count++: Probability = 0.25, Count = 1
SetDataRetrievalPolicyResponse -> SetDataRetrievalPolicyResult: Probability = 1.00, Count = 1
SetDataRetrievalPolicy -> setDataRetrievalPolicy: Probability = 1.00, Count = 1
SetDataRetrievalPolicyRequest -> SetDataRetrievalPolicyRequest: Probability = 1.00, Count = 1
Invoke<SetDataRetrievalPolicyResponse> -> executeSetDataRetrievalPolicy: Probability = 1.00, Count = 1
ScoreDoc -> ScoreDoc: Probability = 1.00, Count = 1
this.Doc -> this.doc: Probability = 1.00, Count = 1
this.Score -> this.score: Probability = 1.00, Count = 1
this.ShardIndex -> this.shardIndex: Probability = 1.00, Count = 1
"Clauses -> "Clauses: Probability = 1.00, Count = 1
field." -> field.": Probability = 1.00, Count = 1
AddArea -> addArea: Probability = 1.00, Count = 1
rowFrom, -> rowFrom,: Probability = 1.00, Count = 2
colFrom, -> colFrom,: Probability = 1.00, Count = 2
rowTo, -> rowTo,: Probability = 1.00, Count = 2
colTo -> colTo: Probability = 1.00, Count = 2
HungarianLightStemFilterFactory -> HungarianLightStemFilterFactory: Probability = 1.00, Count = 1
DescribeAdjustmentTypesResponse -> DescribeAdjustmentTypesResult: Probability = 1.00, Count = 1
DescribeAdjustmentTypes -> describeAdjustmentTypes: Probability = 1.00, Count = 1
DescribeAdjustmentTypesRequest -> DescribeAdjustmentTypesRequest: Probability = 1.00, Count = 1
Invoke<DescribeAdjustmentTypesResponse> -> executeDescribeAdjustmentTypes: Probability = 1.00, Count = 1
DefineSuggesterResponse -> DefineSuggesterResult: Probability = 1.00, Count = 1
DefineSuggester -> defineSuggester: Probability = 1.00, Count = 1
DefineSuggesterRequest -> DefineSuggesterRequest: Probability = 1.00, Count = 1
Invoke<DefineSuggesterResponse> -> executeDefineSuggester: Probability = 1.00, Count = 1
GetJourneyDateRangeKpiResponse -> GetJourneyDateRangeKpiResult: Probability = 1.00, Count = 1
GetJourneyDateRangeKpi -> getJourneyDateRangeKpi: Probability = 1.00, Count = 1
GetJourneyDateRangeKpiRequest -> GetJourneyDateRangeKpiRequest: Probability = 1.00, Count = 1
Invoke<GetJourneyDateRangeKpiResponse> -> executeGetJourneyDateRangeKpi: Probability = 1.00, Count = 1
nameOrSpec -> nameOrSpec: Probability = 1.00, Count = 3
DescribeDataSourceResponse -> DescribeDataSourceResult: Probability = 1.00, Count = 1
DescribeDataSource -> describeDataSource: Probability = 1.00, Count = 1
DescribeDataSourceRequest -> DescribeDataSourceRequest: Probability = 1.00, Count = 1
Invoke<DescribeDataSourceResponse> -> executeDescribeDataSource: Probability = 1.00, Count = 1
AutoCRLFInputStream -> AutoCRLFInputStream: Probability = 1.00, Count = 1
detectBinary -> detectBinary: Probability = 1.00, Count = 2
this.detectBinary -> this.detectBinary: Probability = 1.00, Count = 1
GetRawRecord -> getRawRecord: Probability = 1.00, Count = 1
list.set -> list.set: Probability = 1.00, Count = 1
jumpDrawablesToCurrentState -> jumpDrawablesToCurrentState: Probability = 1.00, Count = 1
base.jumpDrawablesToCurrentState -> super.jumpDrawablesToCurrentState: Probability = 1.00, Count = 1
mProgressDrawable.jumpToCurrentState -> mProgressDrawable.jumpToCurrentState: Probability = 1.00, Count = 1
mIndeterminateDrawable.jumpToCurrentState -> mIndeterminateDrawable.jumpToCurrentState: Probability = 1.00, Count = 1
Acquire -> acquire: Probability = 1.00, Count = 1
tracker.IsValueCreated -> &&tracker.searcher.getIndexReader: Probability = 1.00, Count = 1
tracker.Value.Searcher.IndexReader.TryIncRef -> .tryIncRef: Probability = 1.00, Count = 1
tracker.Value.Searcher -> tracker.searcher: Probability = 1.00, Count = 1
SetDateToBeFormatted -> setDateToBeFormatted: Probability = 1.00, Count = 1
this.dateToBeFormatted -> this.dateToBeFormatted: Probability = 1.00, Count = 1
CreateIntegrationResponseResponse -> CreateIntegrationResponseResult: Probability = 1.00, Count = 1
CreateIntegrationResponseRequest -> CreateIntegrationResponseRequest: Probability = 1.00, Count = 1
Invoke<CreateIntegrationResponseResponse> -> executeCreateIntegrationResponse: Probability = 1.00, Count = 1
DropChanges -> dropChanges: Probability = 1.00, Count = 1
pendingDeleteCount -> pendingDeletes.dropChanges: Probability = 1.00, Count = 1
DropMergingUpdates -> dropMergingUpdates: Probability = 1.00, Count = 1
FooterLength -> footerLength: Probability = 1.00, Count = 1
GetDedicatedIpsResponse -> GetDedicatedIpsResult: Probability = 1.00, Count = 1
GetDedicatedIps -> getDedicatedIps: Probability = 1.00, Count = 1
GetDedicatedIpsRequest -> GetDedicatedIpsRequest: Probability = 1.00, Count = 1
Invoke<GetDedicatedIpsResponse> -> executeGetDedicatedIps: Probability = 1.00, Count = 1
DeleteArchiveResponse -> DeleteArchiveResult: Probability = 1.00, Count = 1
DeleteArchive -> deleteArchive: Probability = 1.00, Count = 1
Invoke<DeleteArchiveResponse> -> executeDeleteArchive: Probability = 1.00, Count = 1
ResourceRecordSet -> ResourceRecordSet: Probability = 1.00, Count = 1
RRType -> RRType: Probability = 1.00, Count = 1
Invoke<ReceiveMessageResponse> -> executeReceiveMessage: Probability = 1.00, Count = 1
GetNames -> getNames: Probability = 0.67, Count = 2
GetNames -> nameValPairs.keySet: Probability = 0.33, Count = 1
nameFinder.find -> nameFinder.find: Probability = 1.00, Count = 1
AnalyticsPrefixPredicate -> AnalyticsPrefixPredicate: Probability = 1.00, Count = 1
delegate1.ReadByte -> readUByte: Probability = 1.00, Count = 1
CreateImportJobResponse -> CreateImportJobResult: Probability = 1.00, Count = 1
CreateImportJob -> createImportJob: Probability = 1.00, Count = 1
CreateImportJobRequest -> CreateImportJobRequest: Probability = 1.00, Count = 1
Invoke<CreateImportJobResponse> -> executeCreateImportJob: Probability = 1.00, Count = 1
w.Write -> OutputStreamWriter: Probability = 0.10, Count = 2
w.Write -> os,UTF_8: Probability = 0.05, Count = 1
w.Write -> w.write: Probability = 0.62, Count = 13
w.Write -> .copyTo: Probability = 0.05, Count = 1
w.Write -> getObjectType: Probability = 0.05, Count = 1
w.Write -> "tag: Probability = 0.05, Count = 1
w.Write -> "tagger: Probability = 0.05, Count = 1
w.Write -> .toExternalString: Probability = 0.05, Count = 1
a.alt -> a.alt==b.alt&&: Probability = 1.00, Count = 1
b.alt&& -> a.semanticContext.equals: Probability = 1.00, Count = 1
b.semanticContext -> b.semanticContext: Probability = 1.00, Count = 1
CreateMemberResponse -> CreateMemberResult: Probability = 1.00, Count = 1
CreateMember -> createMember: Probability = 1.00, Count = 1
CreateMemberRequest -> CreateMemberRequest: Probability = 1.00, Count = 1
Invoke<CreateMemberResponse> -> executeCreateMember: Probability = 1.00, Count = 1
RemoveParCount -> removeParCount: Probability = 1.00, Count = 1
PropertyIDMap.PID_PARCOUNT -> PropertyIDMap.PID_PARCOUNT: Probability = 1.00, Count = 1
DeleteDeliveryStreamResponse -> DeleteDeliveryStreamResult: Probability = 1.00, Count = 1
DeleteDeliveryStream -> deleteDeliveryStream: Probability = 1.00, Count = 1
DeleteDeliveryStreamRequest -> DeleteDeliveryStreamRequest: Probability = 1.00, Count = 1
Invoke<DeleteDeliveryStreamResponse> -> executeDeleteDeliveryStream: Probability = 1.00, Count = 1
.maxCountMustBeNonNegative -> .maxCountMustBeNonNegative: Probability = 1.00, Count = 1
PeerVpcResponse -> PeerVpcResult: Probability = 1.00, Count = 1
PeerVpc -> peerVpc: Probability = 1.00, Count = 1
PeerVpcRequest -> PeerVpcRequest: Probability = 1.00, Count = 1
Invoke<PeerVpcResponse> -> executePeerVpc: Probability = 1.00, Count = 1
GetResolverRuleResponse -> GetResolverRuleResult: Probability = 1.00, Count = 1
GetResolverRule -> getResolverRule: Probability = 1.00, Count = 1
GetResolverRuleRequest -> GetResolverRuleRequest: Probability = 1.00, Count = 1
Invoke<GetResolverRuleResponse> -> executeGetResolverRule: Probability = 1.00, Count = 1
DeleteScalingPolicyResponse -> DeleteScalingPolicyResult: Probability = 1.00, Count = 1
DeleteScalingPolicy -> deleteScalingPolicy: Probability = 1.00, Count = 1
DeleteScalingPolicyRequest -> DeleteScalingPolicyRequest: Probability = 1.00, Count = 1
Invoke<DeleteScalingPolicyResponse> -> executeDeleteScalingPolicy: Probability = 1.00, Count = 1
SwedishLightStemFilter -> SwedishLightStemFilter: Probability = 1.00, Count = 1
GetCredentialsForIdentityResponse -> GetCredentialsForIdentityResult: Probability = 1.00, Count = 1
GetCredentialsForIdentity -> getCredentialsForIdentity: Probability = 1.00, Count = 1
GetCredentialsForIdentityRequest -> GetCredentialsForIdentityRequest: Probability = 1.00, Count = 1
Invoke<GetCredentialsForIdentityResponse> -> executeGetCredentialsForIdentity: Probability = 1.00, Count = 1
DeleteFileSystemResponse -> DeleteFileSystemResult: Probability = 1.00, Count = 1
DeleteFileSystem -> deleteFileSystem: Probability = 1.00, Count = 1
DeleteFileSystemRequest -> DeleteFileSystemRequest: Probability = 1.00, Count = 1
Invoke<DeleteFileSystemResponse> -> executeDeleteFileSystem: Probability = 1.00, Count = 1
DeleteGameServerGroupResponse -> DeleteGameServerGroupResult: Probability = 1.00, Count = 1
DeleteGameServerGroup -> deleteGameServerGroup: Probability = 1.00, Count = 1
DeleteGameServerGroupRequest -> DeleteGameServerGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteGameServerGroupResponse> -> executeDeleteGameServerGroup: Probability = 1.00, Count = 1
AutoCRLFOutputStream -> AutoCRLFOutputStream: Probability = 1.00, Count = 1
DescribeLocationsResponse -> DescribeLocationsResult: Probability = 1.00, Count = 1
DescribeLocations -> describeLocations: Probability = 1.00, Count = 1
DescribeLocationsRequest -> DescribeLocationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeLocationsResponse> -> executeDescribeLocations: Probability = 1.00, Count = 1
CopyWorkspaceImageResponse -> CopyWorkspaceImageResult: Probability = 1.00, Count = 1
CopyWorkspaceImage -> copyWorkspaceImage: Probability = 1.00, Count = 1
CopyWorkspaceImageRequest -> CopyWorkspaceImageRequest: Probability = 1.00, Count = 1
Invoke<CopyWorkspaceImageResponse> -> executeCopyWorkspaceImage: Probability = 1.00, Count = 1
UpdateAliasResponse -> UpdateAliasResult: Probability = 1.00, Count = 1
UpdateAlias -> updateAlias: Probability = 1.00, Count = 1
UpdateAliasRequest -> UpdateAliasRequest: Probability = 1.00, Count = 1
Invoke<UpdateAliasResponse> -> executeUpdateAlias: Probability = 1.00, Count = 1
b[ptr++] -> b[ptr++]: Probability = 1.00, Count = 2
actualChecksum -> actualChecksum: Probability = 1.00, Count = 4
GetLoadBalancersResponse -> GetLoadBalancersResult: Probability = 1.00, Count = 1
GetLoadBalancers -> getLoadBalancers: Probability = 1.00, Count = 1
GetLoadBalancersRequest -> GetLoadBalancersRequest: Probability = 1.00, Count = 1
Invoke<GetLoadBalancersResponse> -> executeGetLoadBalancers: Probability = 1.00, Count = 1
GetRepoListByNamespaceRequest -> GetRepoListByNamespaceRequest: Probability = 1.00, Count = 1
"GetRepoListByNamespace", -> "GetRepoListByNamespace",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]" -> "/repos/[RepoNamespace]": Probability = 1.00, Count = 1
PutEventStreamResponse -> PutEventStreamResult: Probability = 1.00, Count = 1
PutEventStream -> putEventStream: Probability = 1.00, Count = 1
PutEventStreamRequest -> PutEventStreamRequest: Probability = 1.00, Count = 1
Invoke<PutEventStreamResponse> -> executePutEventStream: Probability = 1.00, Count = 1
GetRenameLimit -> getRenameLimit: Probability = 1.00, Count = 1
renameLimit -> renameLimit: Probability = 1.00, Count = 1
++index -> ++index: Probability = 1.00, Count = 1
this.numericType -> ref.getAttributes: Probability = 1.00, Count = 2
RestoreWorkspaceResponse -> RestoreWorkspaceResult: Probability = 1.00, Count = 1
RestoreWorkspace -> restoreWorkspace: Probability = 1.00, Count = 1
RestoreWorkspaceRequest -> RestoreWorkspaceRequest: Probability = 1.00, Count = 1
Invoke<RestoreWorkspaceResponse> -> executeRestoreWorkspace: Probability = 1.00, Count = 1
GetRepoTagsRequest -> GetRepoTagsRequest: Probability = 1.00, Count = 1
"GetRepoTags", -> "GetRepoTags",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/tags" -> "/repos/[RepoNamespace]/[RepoName]/tags": Probability = 1.00, Count = 1
ModifyDBParameterGroupResponse -> ModifyDBParameterGroupResult: Probability = 1.00, Count = 1
ModifyDBParameterGroup -> modifyDBParameterGroup: Probability = 1.00, Count = 1
ModifyDBParameterGroupRequest -> ModifyDBParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<ModifyDBParameterGroupResponse> -> executeModifyDBParameterGroup: Probability = 1.00, Count = 1
GetSections -> getSections: Probability = 1.00, Count = 1
.GetSections -> .getSections: Probability = 1.00, Count = 1
UpdateProxySessionResponse -> UpdateProxySessionResult: Probability = 1.00, Count = 1
UpdateProxySession -> updateProxySession: Probability = 1.00, Count = 1
UpdateProxySessionRequest -> UpdateProxySessionRequest: Probability = 1.00, Count = 1
Invoke<UpdateProxySessionResponse> -> executeUpdateProxySession: Probability = 1.00, Count = 1
GetAvp -> getAvp: Probability = 1.00, Count = 1
maxGoodPoints -> maxGoodPoints==0: Probability = 0.50, Count = 1
maxGoodPoints -> pReleventSum/maxGoodPoints: Probability = 0.50, Count = 1
ListCompatibleImagesResponse -> ListCompatibleImagesResult: Probability = 1.00, Count = 1
ListCompatibleImages -> listCompatibleImages: Probability = 1.00, Count = 1
ListCompatibleImagesRequest -> ListCompatibleImagesRequest: Probability = 1.00, Count = 1
Invoke<ListCompatibleImagesResponse> -> executeListCompatibleImages: Probability = 1.00, Count = 1
GetSourceEnd -> getSourceEnd: Probability = 1.00, Count = 1
r.sourceStart -> r.sourceStart: Probability = 1.00, Count = 1
GetMediaForFragmentListResponse -> GetMediaForFragmentListResult: Probability = 1.00, Count = 1
GetMediaForFragmentList -> getMediaForFragmentList: Probability = 1.00, Count = 1
GetMediaForFragmentListRequest -> GetMediaForFragmentListRequest: Probability = 1.00, Count = 1
Invoke<GetMediaForFragmentListResponse> -> executeGetMediaForFragmentList: Probability = 1.00, Count = 1
this.wordNum -> (: Probability = 1.00, Count = 1
wordNum, -> numTerms: Probability = 0.50, Count = 2
wordNum, -> ,ArrayUtil.copyOfSubArray: Probability = 0.50, Count = 2
ModifyScheduledActionResponse -> ModifyScheduledActionResult: Probability = 1.00, Count = 1
ModifyScheduledAction -> modifyScheduledAction: Probability = 1.00, Count = 1
ModifyScheduledActionRequest -> ModifyScheduledActionRequest: Probability = 1.00, Count = 1
Invoke<ModifyScheduledActionResponse> -> executeModifyScheduledAction: Probability = 1.00, Count = 1
CreateEventRequest -> CreateEventRequest: Probability = 1.00, Count = 1
"CreateEvent", -> "CreateEvent",: Probability = 1.00, Count = 1
DeleteDirectoryResponse -> DeleteDirectoryResult: Probability = 1.00, Count = 1
DeleteDirectory -> deleteDirectory: Probability = 1.00, Count = 1
DeleteDirectoryRequest -> DeleteDirectoryRequest: Probability = 1.00, Count = 1
Invoke<DeleteDirectoryResponse> -> executeDeleteDirectory: Probability = 1.00, Count = 1
AndRevFilter.Binary -> Binary: Probability = 1.00, Count = 2
CzechStemFilterFactory -> CzechStemFilterFactory: Probability = 1.00, Count = 1
CloseIgnoringInputStream -> CloseIgnoringInputStream: Probability = 1.00, Count = 1
_is -> in: Probability = 0.67, Count = 2
_is -> super: Probability = 0.33, Count = 1
ModifyClusterSnapshotResponse -> Snapshot: Probability = 1.00, Count = 1
ModifyClusterSnapshot -> modifyClusterSnapshot: Probability = 1.00, Count = 1
ModifyClusterSnapshotRequest -> ModifyClusterSnapshotRequest: Probability = 1.00, Count = 1
Invoke<ModifyClusterSnapshotResponse> -> executeModifyClusterSnapshot: Probability = 1.00, Count = 1
errorRecoveryMode -> errorRecoveryMode: Probability = 1.00, Count = 1
Components[0] -> components[0]: Probability = 1.00, Count = 1
UntagStreamResponse -> UntagStreamResult: Probability = 1.00, Count = 1
UntagStream -> untagStream: Probability = 1.00, Count = 1
UntagStreamRequest -> UntagStreamRequest: Probability = 1.00, Count = 1
Invoke<UntagStreamResponse> -> executeUntagStream: Probability = 1.00, Count = 1
buf[0] -> buf[0]: Probability = 1.00, Count = 1
numberOfItems -> numberOfItems: Probability = 1.00, Count = 2
csn -> csn: Probability = 0.62, Count = 5
csn -> FileNotFoundException,UnsupportedEncodingException: Probability = 0.12, Count = 1
csn -> !Charset.isSupported: Probability = 0.12, Count = 1
csn -> UnsupportedEncodingException: Probability = 0.12, Count = 1
poll -> poll: Probability = 1.00, Count = 1
this.buf.Length -> available: Probability = 1.00, Count = 5
this.buf, -> available: Probability = 1.00, Count = 2
CreateRoomMembershipResponse -> CreateRoomMembershipResult: Probability = 1.00, Count = 1
CreateRoomMembership -> createRoomMembership: Probability = 1.00, Count = 1
CreateRoomMembershipRequest -> CreateRoomMembershipRequest: Probability = 1.00, Count = 1
Invoke<CreateRoomMembershipResponse> -> executeCreateRoomMembership: Probability = 1.00, Count = 1
DFA[] -> DFA[]: Probability = 1.00, Count = 1
atnSimulator.decisionToDFA -> atnSimulator.decisionToDFA: Probability = 1.00, Count = 1
decisionToDFA.Length -> decisionToDFA.length: Probability = 1.00, Count = 1
fromstring -> CodePointCharStream: Probability = 0.50, Count = 1
fromstring -> fromString: Probability = 0.50, Count = 1
CodePointCharStream -> fromString: Probability = 0.33, Count = 1
CodePointCharStream -> s,: Probability = 0.33, Count = 1
CodePointCharStream -> IntStream.UNKNOWN_SOURCE_NAME: Probability = 0.33, Count = 1
DeleteUserSourceAccountRequest -> DeleteUserSourceAccountRequest: Probability = 1.00, Count = 1
"DeleteUserSourceAccount", -> "DeleteUserSourceAccount",: Probability = 1.00, Count = 1
"/users/sourceAccount/[SourceAccountId]" -> "/users/sourceAccount/[SourceAccountId]": Probability = 1.00, Count = 1
Proxy -> Proxy: Probability = 0.50, Count = 1
Proxy -> proxyFor: Probability = 0.50, Count = 1
ProxyFor -> ProxySelector: Probability = 1.00, Count = 1
ProxySelector -> proxySelector,: Probability = 1.00, Count = 1
dsc -> dsc: Probability = 0.13, Count = 2
dsc -> TYPE_UNDERFLOW:dsc: Probability = 0.07, Count = 1
dsc -> "UNDERFLOW: Probability = 0.07, Count = 1
dsc -> error": Probability = 0.13, Count = 2
dsc -> TYPE_OVERFLOW:dsc: Probability = 0.07, Count = 1
dsc -> "OVERFLOW: Probability = 0.07, Count = 1
dsc -> TYPE_UNMAPPABLE_CHAR:dsc: Probability = 0.07, Count = 1
dsc -> "Unmappable-character: Probability = 0.07, Count = 1
dsc -> erroneous: Probability = 0.13, Count = 2
dsc -> TYPE_MALFORMED_INPUT:dsc: Probability = 0.07, Count = 1
dsc -> "Malformed-input: Probability = 0.07, Count = 1
dsc -> default:dsc: Probability = 0.07, Count = 1
PredictResponse -> PredictResult: Probability = 1.00, Count = 1
Predict -> predict: Probability = 1.00, Count = 1
PredictRequest -> PredictRequest: Probability = 1.00, Count = 1
Invoke<PredictResponse> -> executePredict: Probability = 1.00, Count = 1
areaRef, -> areaRef,: Probability = 1.00, Count = 2
DescribeMatchmakingResponse -> DescribeMatchmakingResult: Probability = 1.00, Count = 1
DescribeMatchmaking -> describeMatchmaking: Probability = 1.00, Count = 1
DescribeMatchmakingRequest -> DescribeMatchmakingRequest: Probability = 1.00, Count = 1
Invoke<DescribeMatchmakingResponse> -> executeDescribeMatchmaking: Probability = 1.00, Count = 1
DeleteDeviceUsageDataResponse -> DeleteDeviceUsageDataResult: Probability = 1.00, Count = 1
DeleteDeviceUsageData -> deleteDeviceUsageData: Probability = 1.00, Count = 1
DeleteDeviceUsageDataRequest -> DeleteDeviceUsageDataRequest: Probability = 1.00, Count = 1
Invoke<DeleteDeviceUsageDataResponse> -> executeDeleteDeviceUsageData: Probability = 1.00, Count = 1
RemoveHyperlink -> removeHyperlink: Probability = 1.00, Count = 1
HyperlinkRecord -> HyperlinkRecord: Probability = 0.75, Count = 3
HyperlinkRecord -> link.getFirstColumn: Probability = 0.25, Count = 1
RegisterInstancesWithLoadBalancerRequest -> RegisterInstancesWithLoadBalancerRequest: Probability = 1.00, Count = 1
AssociateResolverRuleResponse -> AssociateResolverRuleResult: Probability = 1.00, Count = 1
AssociateResolverRule -> associateResolverRule: Probability = 1.00, Count = 1
AssociateResolverRuleRequest -> AssociateResolverRuleRequest: Probability = 1.00, Count = 1
Invoke<AssociateResolverRuleResponse> -> executeAssociateResolverRule: Probability = 1.00, Count = 1
SearchProfilesResponse -> SearchProfilesResult: Probability = 1.00, Count = 1
SearchProfiles -> searchProfiles: Probability = 1.00, Count = 1
SearchProfilesRequest -> SearchProfilesRequest: Probability = 1.00, Count = 1
Invoke<SearchProfilesResponse> -> executeSearchProfiles: Probability = 1.00, Count = 1
ModifyDBSubnetGroupResponse -> DBSubnetGroup: Probability = 1.00, Count = 1
ModifyDBSubnetGroup -> modifyDBSubnetGroup: Probability = 1.00, Count = 1
ModifyDBSubnetGroupRequest -> ModifyDBSubnetGroupRequest: Probability = 1.00, Count = 1
Invoke<ModifyDBSubnetGroupResponse> -> executeModifyDBSubnetGroup: Probability = 1.00, Count = 1
indexGen -> indexGen: Probability = 1.00, Count = 3
taxonomyGen -> taxoGen: Probability = 1.00, Count = 3
indexCommitGen -> indexCommitGen: Probability = 1.00, Count = 3
taxonomyCommitGen -> taxoCommitGen: Probability = 1.00, Count = 3
LiteralValueSource -> LiteralValueSource: Probability = 1.00, Count = 1
this.m_str -> this.string: Probability = 1.00, Count = 1
this.m_bytesRef -> this.bytesRef: Probability = 1.00, Count = 1
EscherSpgrRecord.RECORD_ID -> EscherSpgrRecord.RECORD_ID: Probability = 1.00, Count = 1
"Note[" -> "Note[": Probability = 1.00, Count = 1
data.Name -> data.name: Probability = 1.00, Count = 1
DeleteFpgaImageResponse -> DeleteFpgaImageResult: Probability = 1.00, Count = 1
DeleteFpgaImage -> deleteFpgaImage: Probability = 1.00, Count = 1
DeleteFpgaImageRequest -> DeleteFpgaImageRequest: Probability = 1.00, Count = 1
Invoke<DeleteFpgaImageResponse> -> executeDeleteFpgaImage: Probability = 1.00, Count = 1
CreateAppCookieStickinessPolicyResponse -> CreateAppCookieStickinessPolicyResult: Probability = 1.00, Count = 1
CreateAppCookieStickinessPolicy -> createAppCookieStickinessPolicy: Probability = 1.00, Count = 1
CreateAppCookieStickinessPolicyRequest -> CreateAppCookieStickinessPolicyRequest: Probability = 1.00, Count = 2
Invoke<CreateAppCookieStickinessPolicyResponse> -> executeCreateAppCookieStickinessPolicy: Probability = 1.00, Count = 1
"[/FNGROUPCOUNT]\n" -> "[/FNGROUPCOUNT]\n": Probability = 1.00, Count = 1
CeilLog2 -> MathUtil.log: Probability = 1.00, Count = 1
DescribeMonitoringScheduleResponse -> DescribeMonitoringScheduleResult: Probability = 1.00, Count = 1
DescribeMonitoringSchedule -> describeMonitoringSchedule: Probability = 1.00, Count = 1
DescribeMonitoringScheduleRequest -> DescribeMonitoringScheduleRequest: Probability = 1.00, Count = 1
Invoke<DescribeMonitoringScheduleResponse> -> executeDescribeMonitoringSchedule: Probability = 1.00, Count = 1
posToF[i] -> posToF[i]: Probability = 0.38, Count = 5
posToF[i] -> FieldName.NAME: Probability = 0.08, Count = 1
posToF[i] -> DocMaker.TITLE_FIELD.equals: Probability = 0.08, Count = 1
posToF[i] -> FieldName.TITLE: Probability = 0.08, Count = 1
posToF[i] -> DocMaker.DATE_FIELD.equals: Probability = 0.08, Count = 1
posToF[i] -> FieldName.DATE: Probability = 0.08, Count = 1
posToF[i] -> DocMaker.BODY_FIELD.equals: Probability = 0.08, Count = 1
posToF[i] -> FieldName.BODY: Probability = 0.08, Count = 1
posToF[i] -> FieldName.PROP: Probability = 0.08, Count = 1
useHash -> useHash: Probability = 1.00, Count = 2
StandardTokenizerFactory -> StandardTokenizerFactory: Probability = 1.00, Count = 1
GetFSD -> getFSD: Probability = 1.00, Count = 1
GetFunctionByIndex -> getFunctionByIndex: Probability = 1.00, Count = 1
.GetFunctionByIndexInternal -> .getFunctionByIndexInternal: Probability = 1.00, Count = 1
Value.Utf8ToString -> value.get: Probability = 0.50, Count = 1
Value.Utf8ToString -> .utf8ToString: Probability = 0.50, Count = 1
GetDisksResponse -> GetDisksResult: Probability = 1.00, Count = 1
GetDisks -> getDisks: Probability = 1.00, Count = 1
GetDisksRequest -> GetDisksRequest: Probability = 1.00, Count = 1
Invoke<GetDisksResponse> -> executeGetDisks: Probability = 1.00, Count = 1
DescribeVolumesModificationsResponse -> DescribeVolumesModificationsResult: Probability = 1.00, Count = 1
DescribeVolumesModifications -> describeVolumesModifications: Probability = 1.00, Count = 1
DescribeVolumesModificationsRequest -> DescribeVolumesModificationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeVolumesModificationsResponse> -> executeDescribeVolumesModifications: Probability = 1.00, Count = 1
CurrentScore -> currentScore: Probability = 1.00, Count = 2
currentScore, -> currentScore,: Probability = 1.00, Count = 2
currentPayloadScore -> currentPayloadScore: Probability = 1.00, Count = 4
currentScore -> currentScore: Probability = 1.00, Count = 2
StartRepoBuildRequest -> StartRepoBuildRequest: Probability = 1.00, Count = 1
"StartRepoBuild", -> "StartRepoBuild",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/build" -> "/repos/[RepoNamespace]/[RepoName]/build": Probability = 1.00, Count = 1
Instance -> Instance: Probability = 1.00, Count = 1
GetEntryPathHashCode -> getEntryPathHashCode: Probability = 1.00, Count = 1
SetName -> setName: Probability = 1.00, Count = 3
dalvik.system.CloseGuard.Reporter -> Reporter: Probability = 1.00, Count = 1
getReporter -> getReporter: Probability = 1.00, Count = 1
REPORTER -> REPORTER: Probability = 1.00, Count = 1
dstStart -> dstStart: Probability = 1.00, Count = 1
dstStart, -> dstStart,: Probability = 1.00, Count = 1
GetSourceSize -> getSourceSize: Probability = 1.00, Count = 1
setID -> setID: Probability = 1.00, Count = 1
GetCampaignVersionsResponse -> GetCampaignVersionsResult: Probability = 1.00, Count = 1
GetCampaignVersions -> getCampaignVersions: Probability = 1.00, Count = 1
GetCampaignVersionsRequest -> GetCampaignVersionsRequest: Probability = 1.00, Count = 1
Invoke<GetCampaignVersionsResponse> -> executeGetCampaignVersions: Probability = 1.00, Count = 1
getTotalSLLLookaheadOps -> getTotalSLLLookaheadOps: Probability = 1.00, Count = 1
decisions[i].SLL_TotalLook -> decisions[i].SLL_TotalLook: Probability = 1.00, Count = 1
sheet.GetRow -> sheet.getRow: Probability = 1.00, Count = 1
provide -> provide: Probability = 1.00, Count = 1
Key -> Public: Probability = 0.17, Count = 1
Key -> Key: Probability = 0.33, Count = 2
Key -> Private: Probability = 0.17, Count = 1
Key -> Secret.": Probability = 0.17, Count = 1
Key -> this.publicKeyId: Probability = 0.17, Count = 1
this.privateKeySecret -> this.privateKeySecret: Probability = 1.00, Count = 1
parents[index] -> parents[index]: Probability = 1.00, Count = 1
RemoveBuiltinRecord -> removeBuiltinRecord: Probability = 1.00, Count = 1
_definedNames.Remove -> _definedNames.remove: Probability = 1.00, Count = 1
AddInstanceGroupsResponse -> AddInstanceGroupsResult: Probability = 1.00, Count = 1
AddInstanceGroups -> addInstanceGroups: Probability = 1.00, Count = 1
Invoke<AddInstanceGroupsResponse> -> executeAddInstanceGroups: Probability = 1.00, Count = 1
ChildCount -> getChildCount: Probability = 1.00, Count = 2
ListCodeRepositoriesResponse -> ListCodeRepositoriesResult: Probability = 1.00, Count = 1
ListCodeRepositories -> listCodeRepositories: Probability = 1.00, Count = 1
ListCodeRepositoriesRequest -> ListCodeRepositoriesRequest: Probability = 1.00, Count = 1
Invoke<ListCodeRepositoriesResponse> -> executeListCodeRepositories: Probability = 1.00, Count = 1
"Old -> "Old: Probability = 0.50, Count = 1
"Old -> Label: Probability = 0.50, Count = 1
READ -> READ: Probability = 1.00, Count = 1
ONLY" -> ONLY": Probability = 1.00, Count = 1
GetSmsChannelResponse -> GetSmsChannelResult: Probability = 1.00, Count = 1
GetSmsChannel -> getSmsChannel: Probability = 1.00, Count = 1
GetSmsChannelRequest -> GetSmsChannelRequest: Probability = 1.00, Count = 1
Invoke<GetSmsChannelResponse> -> executeGetSmsChannel: Probability = 1.00, Count = 1
Placement -> Placement: Probability = 1.00, Count = 1
Invoke<ListStacksResponse> -> executeListStacks: Probability = 1.00, Count = 1
ListFieldLevelEncryptionConfigsResponse -> ListFieldLevelEncryptionConfigsResult: Probability = 1.00, Count = 1
ListFieldLevelEncryptionConfigs -> listFieldLevelEncryptionConfigs: Probability = 1.00, Count = 1
ListFieldLevelEncryptionConfigsRequest -> ListFieldLevelEncryptionConfigsRequest: Probability = 1.00, Count = 1
Invoke<ListFieldLevelEncryptionConfigsResponse> -> executeListFieldLevelEncryptionConfigs: Probability = 1.00, Count = 1
CloseInstancePublicPortsResponse -> CloseInstancePublicPortsResult: Probability = 1.00, Count = 1
CloseInstancePublicPorts -> closeInstancePublicPorts: Probability = 1.00, Count = 1
CloseInstancePublicPortsRequest -> CloseInstancePublicPortsRequest: Probability = 1.00, Count = 1
Invoke<CloseInstancePublicPortsResponse> -> executeCloseInstancePublicPorts: Probability = 1.00, Count = 1
DeleteTransitGatewayRouteTableResponse -> DeleteTransitGatewayRouteTableResult: Probability = 1.00, Count = 1
DeleteTransitGatewayRouteTable -> deleteTransitGatewayRouteTable: Probability = 1.00, Count = 1
DeleteTransitGatewayRouteTableRequest -> DeleteTransitGatewayRouteTableRequest: Probability = 1.00, Count = 1
Invoke<DeleteTransitGatewayRouteTableResponse> -> executeDeleteTransitGatewayRouteTable: Probability = 1.00, Count = 1
DocFreqSorter -> DocFreqSorter: Probability = 1.00, Count = 1
DeleteIdentitiesResponse -> DeleteIdentitiesResult: Probability = 1.00, Count = 1
DeleteIdentities -> deleteIdentities: Probability = 1.00, Count = 1
DeleteIdentitiesRequest -> DeleteIdentitiesRequest: Probability = 1.00, Count = 1
Invoke<DeleteIdentitiesResponse> -> executeDeleteIdentities: Probability = 1.00, Count = 1
EndIndex -> endIndex: Probability = 1.00, Count = 5
PurchaseReservedCacheNodesOfferingResponse -> ReservedCacheNode: Probability = 1.00, Count = 1
PurchaseReservedCacheNodesOffering -> purchaseReservedCacheNodesOffering: Probability = 1.00, Count = 1
PurchaseReservedCacheNodesOfferingRequest -> PurchaseReservedCacheNodesOfferingRequest: Probability = 1.00, Count = 1
Invoke<PurchaseReservedCacheNodesOfferingResponse> -> executePurchaseReservedCacheNodesOffering: Probability = 1.00, Count = 1
GetLineText -> getLineText: Probability = 1.00, Count = 2
eol -> eol: Probability = 1.00, Count = 2
Invoke<DescribeNotificationConfigurationsResponse> -> executeDescribeNotificationConfigurations: Probability = 1.00, Count = 1
IndexAndTaxonomyRevision -> IndexAndTaxonomyRevision: Probability = 1.00, Count = 1
indexWriter, -> indexWriter,: Probability = 0.50, Count = 1
indexWriter, -> SnapshotDirectoryTaxonomyWriter: Probability = 0.50, Count = 1
GetModelTemplateResponse -> GetModelTemplateResult: Probability = 1.00, Count = 1
GetModelTemplate -> getModelTemplate: Probability = 1.00, Count = 1
GetModelTemplateRequest -> GetModelTemplateRequest: Probability = 1.00, Count = 1
Invoke<GetModelTemplateResponse> -> executeGetModelTemplate: Probability = 1.00, Count = 1
XORShift64Random -> XORShift64Random: Probability = 1.00, Count = 1
0xdeadbeef -> 0xdeadbeef: Probability = 1.00, Count = 1
this.BytesEquals -> this.bytesEquals: Probability = 1.00, Count = 1
SpanPositionRangeQuery -> SpanPositionRangeQuery: Probability = 1.00, Count = 3
this.m_start -> this.start: Probability = 1.00, Count = 2
CreateSignalingChannelResponse -> CreateSignalingChannelResult: Probability = 1.00, Count = 1
CreateSignalingChannel -> createSignalingChannel: Probability = 1.00, Count = 1
CreateSignalingChannelRequest -> CreateSignalingChannelRequest: Probability = 1.00, Count = 1
Invoke<CreateSignalingChannelResponse> -> executeCreateSignalingChannel: Probability = 1.00, Count = 1
IndexDiffFilter -> IndexDiffFilter: Probability = 1.00, Count = 1
dirCacheIndex, -> dirCacheIndex,: Probability = 1.00, Count = 1
workingTreeIndex, -> workingTreeIndex,boolean: Probability = 1.00, Count = 1
honorIgnores -> honorIgnores: Probability = 1.00, Count = 2
this.dirCache -> this.dirCache: Probability = 1.00, Count = 1
dirCacheIndex -> dirCacheIndex: Probability = 1.00, Count = 1
this.workingTree -> this.workingTree: Probability = 1.00, Count = 1
workingTreeIndex -> workingTreeIndex: Probability = 1.00, Count = 1
this.honorIgnores -> this.honorIgnores: Probability = 1.00, Count = 1
urlstr, -> urlstr,: Probability = 1.00, Count = 1
.couldNotURLEncodeToUTF8, -> .couldNotURLEncodeToUTF8,: Probability = 1.00, Count = 1
DescribeTemplateResponse -> DescribeTemplateResult: Probability = 1.00, Count = 1
DescribeTemplate -> describeTemplate: Probability = 1.00, Count = 1
DescribeTemplateRequest -> DescribeTemplateRequest: Probability = 1.00, Count = 1
Invoke<DescribeTemplateResponse> -> executeDescribeTemplate: Probability = 1.00, Count = 1
mkdir -> mkdir: Probability = 1.00, Count = 2
parentDir -> parentDir: Probability = 0.60, Count = 3
parentDir -> .mkdirs: Probability = 0.20, Count = 1
parentDir -> pathName2Type.get: Probability = 0.20, Count = 1
bigBlockSize.GetBigBlockSize -> bigBlockSize.getBigBlockSize: Probability = 0.67, Count = 2
bigBlockSize.GetBigBlockSize -> rest: Probability = 0.33, Count = 1
512 -> 512: Probability = 1.00, Count = 2
_input.LA -> _input.LA: Probability = 1.00, Count = 1
Interpreter.Consume -> .consume: Probability = 1.00, Count = 1
AttachToIndexResponse -> AttachToIndexResult: Probability = 1.00, Count = 1
AttachToIndex -> attachToIndex: Probability = 1.00, Count = 1
AttachToIndexRequest -> AttachToIndexRequest: Probability = 1.00, Count = 1
Invoke<AttachToIndexResponse> -> executeAttachToIndex: Probability = 1.00, Count = 1
CreateMembersResponse -> CreateMembersResult: Probability = 1.00, Count = 1
CreateMembers -> createMembers: Probability = 1.00, Count = 1
CreateMembersRequest -> CreateMembersRequest: Probability = 1.00, Count = 1
Invoke<CreateMembersResponse> -> executeCreateMembers: Probability = 1.00, Count = 1
byteBuffer.getDouble -> byteBuffer.getDouble: Probability = 1.00, Count = 2
ListOpenWorkflowExecutionsResponse -> WorkflowExecutionInfos: Probability = 1.00, Count = 1
ListOpenWorkflowExecutions -> listOpenWorkflowExecutions: Probability = 1.00, Count = 1
ListOpenWorkflowExecutionsRequest -> ListOpenWorkflowExecutionsRequest: Probability = 1.00, Count = 1
Invoke<ListOpenWorkflowExecutionsResponse> -> executeListOpenWorkflowExecutions: Probability = 1.00, Count = 1
GetFirstPathElement -> getFirstPathElement: Probability = 0.50, Count = 1
GetFirstPathElement -> values.get: Probability = 0.50, Count = 1
values[0].Value -> .value: Probability = 1.00, Count = 1
ToEMU -> toEMU: Probability = 0.50, Count = 1
ToEMU -> points: Probability = 0.50, Count = 1
EMU_PER_POINT -> Math.rint: Probability = 0.33, Count = 1
EMU_PER_POINT -> EMU_PER_POINT*points: Probability = 0.33, Count = 1
EMU_PER_POINT -> emu/EMU_PER_POINT: Probability = 0.33, Count = 1
DeleteRequestValidatorResponse -> DeleteRequestValidatorResult: Probability = 1.00, Count = 1
DeleteRequestValidator -> deleteRequestValidator: Probability = 1.00, Count = 1
DeleteRequestValidatorRequest -> DeleteRequestValidatorRequest: Probability = 1.00, Count = 1
Invoke<DeleteRequestValidatorResponse> -> executeDeleteRequestValidator: Probability = 1.00, Count = 1
mustExist -> mustExist: Probability = 0.67, Count = 2
mustExist -> !isGitRepository: Probability = 0.33, Count = 1
GetOnPremisesInstanceResponse -> GetOnPremisesInstanceResult: Probability = 1.00, Count = 1
GetOnPremisesInstance -> getOnPremisesInstance: Probability = 1.00, Count = 1
GetOnPremisesInstanceRequest -> GetOnPremisesInstanceRequest: Probability = 1.00, Count = 1
Invoke<GetOnPremisesInstanceResponse> -> executeGetOnPremisesInstance: Probability = 1.00, Count = 1
GetFontAtIndex -> getFontAtIndex: Probability = 1.00, Count = 1
currentRun -> currentRun: Probability = 0.75, Count = 3
currentRun -> currentRun.getFontIndex: Probability = 0.25, Count = 1
StopMonitoringMembersResponse -> StopMonitoringMembersResult: Probability = 1.00, Count = 1
StopMonitoringMembers -> stopMonitoringMembers: Probability = 1.00, Count = 1
StopMonitoringMembersRequest -> StopMonitoringMembersRequest: Probability = 1.00, Count = 1
Invoke<StopMonitoringMembersResponse> -> executeStopMonitoringMembers: Probability = 1.00, Count = 1
DetachLoadBalancerFromSubnetsResponse -> DetachLoadBalancerFromSubnetsResult: Probability = 1.00, Count = 1
DetachLoadBalancerFromSubnets -> detachLoadBalancerFromSubnets: Probability = 1.00, Count = 1
DetachLoadBalancerFromSubnetsRequest -> DetachLoadBalancerFromSubnetsRequest: Probability = 1.00, Count = 1
Invoke<DetachLoadBalancerFromSubnetsResponse> -> executeDetachLoadBalancerFromSubnets: Probability = 1.00, Count = 1
".MakeQuery -> this+".makeQuery: Probability = 1.00, Count = 1
supported!" -> supported!": Probability = 1.00, Count = 1
AddPermissionResponse -> AddPermissionResult: Probability = 1.00, Count = 1
AddPermission -> addPermission: Probability = 1.00, Count = 1
AddPermissionRequest -> AddPermissionRequest: Probability = 1.00, Count = 1
Invoke<AddPermissionResponse> -> executeAddPermission: Probability = 1.00, Count = 1
dataFormat -> workbook.createDataFormat: Probability = 1.00, Count = 1
t2 -> t2: Probability = 1.00, Count = 3
nameLen -> nameLen: Probability = 1.00, Count = 5
field_3_username_value -> field_3_username_value: Probability = 1.00, Count = 2
ComputeProbability -> computeProbability: Probability = 1.00, Count = 1
stats.TotalTermFreq -> stats.getTotalTermFreq: Probability = 1.00, Count = 1
1F -> +1D: Probability = 0.67, Count = 2
1F -> SimilarityBase.this.score: Probability = 0.33, Count = 1
stats.NumberOfFieldTokens -> stats.getNumberOfFieldTokens: Probability = 1.00, Count = 1
tokenStream.AddAttribute<IPositionIncrementAttribute> -> PositionIncrementAttribute.class: Probability = 1.00, Count = 1
numskipped -> numskipped: Probability = 1.00, Count = 4
CreateAddressBookResponse -> CreateAddressBookResult: Probability = 1.00, Count = 1
CreateAddressBook -> createAddressBook: Probability = 1.00, Count = 1
CreateAddressBookRequest -> CreateAddressBookRequest: Probability = 1.00, Count = 1
Invoke<CreateAddressBookResponse> -> executeCreateAddressBook: Probability = 1.00, Count = 1
StreamCopyThread -> StreamCopyThread: Probability = 1.00, Count = 1
Sharpen.Thread.CurrentThread -> Thread.currentThread: Probability = 1.00, Count = 2
AxisParentRecord -> AxisParentRecord: Probability = 1.00, Count = 1
WeightedFieldFragList -> WeightedFieldFragList: Probability = 1.00, Count = 1
TrimFilterFactory -> TrimFilterFactory: Probability = 1.00, Count = 1
termInfo -> termInfo: Probability = 1.00, Count = 2
termList.Insert -> termList.push: Probability = 1.00, Count = 1
DescribeNotebookInstanceResponse -> DescribeNotebookInstanceResult: Probability = 1.00, Count = 1
DescribeNotebookInstance -> describeNotebookInstance: Probability = 1.00, Count = 1
DescribeNotebookInstanceRequest -> DescribeNotebookInstanceRequest: Probability = 1.00, Count = 1
Invoke<DescribeNotebookInstanceResponse> -> executeDescribeNotebookInstance: Probability = 1.00, Count = 1
NGit.Api.ApplyCommand -> ApplyCommand: Probability = 0.50, Count = 1
NGit.Api.ApplyCommand -> setPatch: Probability = 0.50, Count = 1
SetCreationTime -> setCreationTime: Probability = 1.00, Count = 1
EncodeTS -> encodeTS: Probability = 1.00, Count = 1
P_CTIME, -> P_CTIME,: Probability = 1.00, Count = 1
AdvertiseCapability -> advertiseCapability: Probability = 1.00, Count = 1
capablities.AddItem -> capablities.add: Probability = 1.00, Count = 1
CreateVpnGatewayResponse -> CreateVpnGatewayResult: Probability = 1.00, Count = 1
CreateVpnGateway -> createVpnGateway: Probability = 1.00, Count = 1
Invoke<CreateVpnGatewayResponse> -> executeCreateVpnGateway: Probability = 1.00, Count = 1
ResetCacheParameterGroupResponse -> ResetCacheParameterGroupResult: Probability = 1.00, Count = 1
ResetCacheParameterGroup -> resetCacheParameterGroup: Probability = 1.00, Count = 1
ResetCacheParameterGroupRequest -> ResetCacheParameterGroupRequest: Probability = 1.00, Count = 2
Invoke<ResetCacheParameterGroupResponse> -> executeResetCacheParameterGroup: Probability = 1.00, Count = 1
PutMetricFilterRequest -> PutMetricFilterRequest: Probability = 1.00, Count = 1
filterName, -> filterName,: Probability = 0.50, Count = 1
filterName, -> filterPattern,: Probability = 0.50, Count = 1
filterPattern, -> java.util.List<MetricTransformation>: Probability = 1.00, Count = 1
metricTransformations -> metricTransformations: Probability = 1.00, Count = 2
_filterPattern -> setFilterPattern: Probability = 1.00, Count = 1
filterPattern -> filterPattern: Probability = 1.00, Count = 1
_metricTransformations -> setMetricTransformations: Probability = 1.00, Count = 1
IntPtg -> IntPtg: Probability = 1.00, Count = 1
range: -> range:: Probability = 1.00, Count = 1
getItemId -> getItemId: Probability = 1.00, Count = 1
UAX29URLEmailTokenizerFactory -> UAX29URLEmailTokenizerFactory: Probability = 1.00, Count = 1
StartDeploymentResponse -> StartDeploymentResult: Probability = 1.00, Count = 1
StartDeployment -> startDeployment: Probability = 1.00, Count = 1
StartDeploymentRequest -> StartDeploymentRequest: Probability = 1.00, Count = 1
Invoke<StartDeploymentResponse> -> executeStartDeployment: Probability = 1.00, Count = 1
CreateModelResponse -> CreateModelResult: Probability = 1.00, Count = 1
CreateModel -> createModel: Probability = 1.00, Count = 1
CreateModelRequest -> CreateModelRequest: Probability = 1.00, Count = 1
Invoke<CreateModelResponse> -> executeCreateModel: Probability = 1.00, Count = 1
SimpleFacetsExample -> SimpleFacetsExample: Probability = 1.00, Count = 1
DeleteConnectionResponse -> DeleteConnectionResult: Probability = 1.00, Count = 1
DeleteConnection -> deleteConnection: Probability = 1.00, Count = 1
DeleteConnectionRequest -> DeleteConnectionRequest: Probability = 1.00, Count = 1
Invoke<DeleteConnectionResponse> -> executeDeleteConnection: Probability = 1.00, Count = 1
GetSheetFirstNameByExternSheet -> getSheetFirstNameByExternSheet: Probability = 1.00, Count = 1
_iBook.FindSheetFirstNameFromExternSheet -> _iBook.findSheetFirstNameFromExternSheet: Probability = 1.00, Count = 1
Begin -> begin: Probability = 1.00, Count = 1
.invalidTimeout, -> .invalidTimeout,: Probability = 1.00, Count = 2
state.Begin -> state.begin: Probability = 1.00, Count = 1
sorting.Clear -> sorting.clear: Probability = 1.00, Count = 1
sorting.AddItem -> sorting.add: Probability = 1.00, Count = 3
CreateAuthorizerResponse -> CreateAuthorizerResult: Probability = 1.00, Count = 1
CreateAuthorizer -> createAuthorizer: Probability = 1.00, Count = 1
CreateAuthorizerRequest -> CreateAuthorizerRequest: Probability = 1.00, Count = 1
Invoke<CreateAuthorizerResponse> -> executeCreateAuthorizer: Probability = 1.00, Count = 1
IsDeltaCompress -> isDeltaCompress: Probability = 1.00, Count = 1
CreateWorkGroupResponse -> CreateWorkGroupResult: Probability = 1.00, Count = 1
CreateWorkGroup -> createWorkGroup: Probability = 1.00, Count = 1
CreateWorkGroupRequest -> CreateWorkGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateWorkGroupResponse> -> executeCreateWorkGroup: Probability = 1.00, Count = 1
BatchDetectSyntaxResponse -> BatchDetectSyntaxResult: Probability = 1.00, Count = 1
BatchDetectSyntax -> batchDetectSyntax: Probability = 1.00, Count = 1
BatchDetectSyntaxRequest -> BatchDetectSyntaxRequest: Probability = 1.00, Count = 1
Invoke<BatchDetectSyntaxResponse> -> executeBatchDetectSyntax: Probability = 1.00, Count = 1
RemoveManager -> removeManager: Probability = 1.00, Count = 1
PropertyIDMap.PID_MANAGER -> PropertyIDMap.PID_MANAGER: Probability = 1.00, Count = 1
KeySet -> keySet: Probability = 1.00, Count = 1
PutScalingPolicyResponse -> PutScalingPolicyResult: Probability = 1.00, Count = 1
PutScalingPolicy -> putScalingPolicy: Probability = 1.00, Count = 1
PutScalingPolicyRequest -> PutScalingPolicyRequest: Probability = 1.00, Count = 1
Invoke<PutScalingPolicyResponse> -> executePutScalingPolicy: Probability = 1.00, Count = 1
KeywordRepeatFilterFactory -> KeywordRepeatFilterFactory: Probability = 1.00, Count = 1
blocks.ToArray -> blocks.toArray: Probability = 0.50, Count = 1
blocks.ToArray -> byte[blocks.size: Probability = 0.50, Count = 1
subset -> subset: Probability = 1.00, Count = 2
DaciukMihovAutomatonBuilder -> Collection<BytesRef>: Probability = 0.33, Count = 1
DaciukMihovAutomatonBuilder -> DaciukMihovAutomatonBuilder: Probability = 0.67, Count = 2
peekFirst -> peekFirst: Probability = 1.00, Count = 1
peekFirstImpl -> peekFirstImpl: Probability = 1.00, Count = 1
GetConfigurationResponse -> GetConfigurationResult: Probability = 1.00, Count = 1
GetConfiguration -> getConfiguration: Probability = 1.00, Count = 1
GetConfigurationRequest -> GetConfigurationRequest: Probability = 1.00, Count = 1
Invoke<GetConfigurationResponse> -> executeGetConfiguration: Probability = 1.00, Count = 1
PerFieldAnalyzerWrapper -> PerFieldAnalyzerWrapper: Probability = 1.00, Count = 1
defaultAnalyzer, -> defaultAnalyzer,Map<String,: Probability = 1.00, Count = 1
PER_FIELD_REUSE_STRATEGY -> this.defaultAnalyzer: Probability = 1.00, Count = 1
this.defaultAnalyzer -> this.fieldAnalyzers: Probability = 1.00, Count = 1
Analyzer> -> Collections.<String,: Probability = 0.50, Count = 1
Analyzer> -> Analyzer>emptyMap: Probability = 0.50, Count = 1
DeletePublishingDestinationResponse -> DeletePublishingDestinationResult: Probability = 1.00, Count = 1
DeletePublishingDestination -> deletePublishingDestination: Probability = 1.00, Count = 1
DeletePublishingDestinationRequest -> DeletePublishingDestinationRequest: Probability = 1.00, Count = 1
Invoke<DeletePublishingDestinationResponse> -> executeDeletePublishingDestination: Probability = 1.00, Count = 1
GetSendStatisticsResponse -> GetSendStatisticsResult: Probability = 1.00, Count = 2
GetSendStatistics -> getSendStatistics: Probability = 1.00, Count = 3
GetSendStatisticsRequest -> GetSendStatisticsRequest: Probability = 1.00, Count = 2
Invoke<GetSendStatisticsResponse> -> executeGetSendStatistics: Probability = 1.00, Count = 1
CopyArea -> copyArea: Probability = 1.00, Count = 1
dy -> dy: Probability = 1.00, Count = 1
"copyArea -> POILogger.WARN,"copyArea: Probability = 1.00, Count = 1
GetUserSettingsResponse -> GetUserSettingsResult: Probability = 1.00, Count = 1
GetUserSettings -> getUserSettings: Probability = 1.00, Count = 1
GetUserSettingsRequest -> GetUserSettingsRequest: Probability = 1.00, Count = 1
Invoke<GetUserSettingsResponse> -> executeGetUserSettings: Probability = 1.00, Count = 1
tnode.Symbol.Type -> .getType: Probability = 1.00, Count = 2
IsVpcPeeredResponse -> IsVpcPeeredResult: Probability = 1.00, Count = 1
IsVpcPeered -> isVpcPeered: Probability = 1.00, Count = 1
IsVpcPeeredRequest -> IsVpcPeeredRequest: Probability = 1.00, Count = 1
Invoke<IsVpcPeeredResponse> -> executeIsVpcPeered: Probability = 1.00, Count = 1
"ShardRef -> "ShardRef: Probability = 1.00, Count = 1
hitIndex=" -> hitIndex=": Probability = 1.00, Count = 1
HitIndex -> hitIndex: Probability = 1.00, Count = 1
BlockPackedReaderIterator -> BlockPackedReaderIterator: Probability = 1.00, Count = 1
this.packedIntsVersion -> this.packedIntsVersion: Probability = 1.00, Count = 1
this.valuesRef -> this.valuesRef: Probability = 1.00, Count = 1
this.values, -> this.values,: Probability = 1.00, Count = 1
!First -> !first: Probability = 0.50, Count = 1
!First -> nextSubtreePos: Probability = 0.50, Count = 1
GetPayload -> getPayload: Probability = 1.00, Count = 1
payloadLength -> payloadLength: Probability = 1.00, Count = 1
indeterminate -> setIndeterminate: Probability = 0.14, Count = 1
indeterminate -> indeterminate: Probability = 0.57, Count = 4
indeterminate -> !mOnlyIndeterminate: Probability = 0.14, Count = 1
indeterminate -> !mIndeterminate: Probability = 0.14, Count = 1
mCurrentDrawable -> mCurrentDrawable: Probability = 1.00, Count = 2
_bookEvaluator.NotifyDeleteCell -> _bookEvaluator.notifyDeleteCell: Probability = 1.00, Count = 1
m_cache -> this.field.equals: Probability = 0.50, Count = 1
m_cache -> other.field: Probability = 0.50, Count = 1
DescribeLoaResponse -> DescribeLoaResult: Probability = 1.00, Count = 1
DescribeLoa -> describeLoa: Probability = 1.00, Count = 1
DescribeLoaRequest -> DescribeLoaRequest: Probability = 1.00, Count = 1
Invoke<DescribeLoaResponse> -> executeDescribeLoa: Probability = 1.00, Count = 1
ListFleetsResponse -> ListFleetsResult: Probability = 1.00, Count = 1
ListFleets -> listFleets: Probability = 1.00, Count = 1
ListFleetsRequest -> ListFleetsRequest: Probability = 1.00, Count = 1
Invoke<ListFleetsResponse> -> executeListFleets: Probability = 1.00, Count = 1
DelegationSet -> DelegationSet: Probability = 1.00, Count = 1
nameServers -> nameServers: Probability = 1.00, Count = 2
_nameServers -> setNameServers: Probability = 1.00, Count = 1
GetKeyPairsResponse -> GetKeyPairsResult: Probability = 1.00, Count = 1
GetKeyPairs -> getKeyPairs: Probability = 1.00, Count = 1
GetKeyPairsRequest -> GetKeyPairsRequest: Probability = 1.00, Count = 1
Invoke<GetKeyPairsResponse> -> executeGetKeyPairs: Probability = 1.00, Count = 1
PurchaseReservedNodeOfferingResponse -> ReservedNode: Probability = 1.00, Count = 1
PurchaseReservedNodeOffering -> purchaseReservedNodeOffering: Probability = 1.00, Count = 1
PurchaseReservedNodeOfferingRequest -> PurchaseReservedNodeOfferingRequest: Probability = 1.00, Count = 1
Invoke<PurchaseReservedNodeOfferingResponse> -> executePurchaseReservedNodeOffering: Probability = 1.00, Count = 1
GetPassword -> getPassword: Probability = 1.00, Count = 1
nameValPairs.TryGetValue -> nameValPairs.get: Probability = 1.00, Count = 1
kind, -> kind,: Probability = 1.00, Count = 1
this.Kind -> this.kind: Probability = 1.00, Count = 1
this.Image -> this.image: Probability = 1.00, Count = 1
ArrayRecord -> ArrayRecord: Probability = 1.00, Count = 1
_field3notUsed -> _field3notUsed: Probability = 1.00, Count = 1
totalFormulaLen -> totalFormulaLen: Probability = 0.67, Count = 2
totalFormulaLen -> formulaTokenLen,: Probability = 0.33, Count = 1
_formula -> _formula: Probability = 1.00, Count = 2
scriptBootstrapAction -> scriptBootstrapAction: Probability = 1.00, Count = 2
_scriptBootstrapAction -> setScriptBootstrapAction: Probability = 1.00, Count = 1
CreateLoadBalancerPolicyResponse -> CreateLoadBalancerPolicyResult: Probability = 1.00, Count = 1
CreateLoadBalancerPolicy -> createLoadBalancerPolicy: Probability = 1.00, Count = 1
CreateLoadBalancerPolicyRequest -> CreateLoadBalancerPolicyRequest: Probability = 1.00, Count = 1
Invoke<CreateLoadBalancerPolicyResponse> -> executeCreateLoadBalancerPolicy: Probability = 1.00, Count = 1
"MultiTermsEnum -> "MultiTermsEnum: Probability = 1.00, Count = 1
PayloadSpanUtil -> PayloadSpanUtil: Probability = 1.00, Count = 1
GetErrors -> getErrors: Probability = 1.00, Count = 1
CreateNormalisedDecimal -> createNormalisedDecimal: Probability = 1.00, Count = 1
missingUnderBits -> missingUnderBits: Probability = 0.40, Count = 2
missingUnderBits -> _binaryExponent-39: Probability = 0.20, Count = 1
missingUnderBits -> fracPart: Probability = 0.20, Count = 1
missingUnderBits -> _significand.intValue: Probability = 0.20, Count = 1
fracPart, -> fracPart,: Probability = 1.00, Count = 1
ListStackSetOperationResultsResponse -> ListStackSetOperationResultsResult: Probability = 1.00, Count = 1
ListStackSetOperationResults -> listStackSetOperationResults: Probability = 1.00, Count = 1
ListStackSetOperationResultsRequest -> ListStackSetOperationResultsRequest: Probability = 1.00, Count = 1
Invoke<ListStackSetOperationResultsResponse> -> executeListStackSetOperationResults: Probability = 1.00, Count = 1
ReflectAsString -> final: Probability = 1.00, Count = 3
prependAttClass -> reflectAsString: Probability = 1.00, Count = 1
prependAttClass, -> reflectWith: Probability = 1.00, Count = 1
GetValuesCellRange -> getValuesCellRange: Probability = 1.00, Count = 1
DescribeMatchmakingConfigurationsResponse -> DescribeMatchmakingConfigurationsResult: Probability = 1.00, Count = 1
DescribeMatchmakingConfigurations -> describeMatchmakingConfigurations: Probability = 1.00, Count = 1
DescribeMatchmakingConfigurationsRequest -> DescribeMatchmakingConfigurationsRequest: Probability = 1.00, Count = 1
Invoke<DescribeMatchmakingConfigurationsResponse> -> executeDescribeMatchmakingConfigurations: Probability = 1.00, Count = 1
PutConfigurationSetSuppressionOptionsResponse -> PutConfigurationSetSuppressionOptionsResult: Probability = 1.00, Count = 1
PutConfigurationSetSuppressionOptions -> putConfigurationSetSuppressionOptions: Probability = 1.00, Count = 1
PutConfigurationSetSuppressionOptionsRequest -> PutConfigurationSetSuppressionOptionsRequest: Probability = 1.00, Count = 1
Invoke<PutConfigurationSetSuppressionOptionsResponse> -> executePutConfigurationSetSuppressionOptions: Probability = 1.00, Count = 1
ListProposalVotesResponse -> ListProposalVotesResult: Probability = 1.00, Count = 1
ListProposalVotes -> listProposalVotes: Probability = 1.00, Count = 1
ListProposalVotesRequest -> ListProposalVotesRequest: Probability = 1.00, Count = 1
Invoke<ListProposalVotesResponse> -> executeListProposalVotes: Probability = 1.00, Count = 1
_bookEvaluator, -> _bookEvaluator,: Probability = 1.00, Count = 1
_tracker, -> _tracker,: Probability = 1.00, Count = 1
DataLabelExtensionRecord -> DataLabelExtensionRecord: Probability = 1.00, Count = 1
ArchiveFindingsResponse -> ArchiveFindingsResult: Probability = 1.00, Count = 1
ArchiveFindings -> archiveFindings: Probability = 1.00, Count = 1
ArchiveFindingsRequest -> ArchiveFindingsRequest: Probability = 1.00, Count = 1
Invoke<ArchiveFindingsResponse> -> executeArchiveFindings: Probability = 1.00, Count = 1
_psBlock -> _psBlock: Probability = 1.00, Count = 3
CreateSnapshotsResponse -> CreateSnapshotsResult: Probability = 1.00, Count = 1
CreateSnapshots -> createSnapshots: Probability = 1.00, Count = 1
CreateSnapshotsRequest -> CreateSnapshotsRequest: Probability = 1.00, Count = 1
Invoke<CreateSnapshotsResponse> -> executeCreateSnapshots: Probability = 1.00, Count = 1
GetImpl -> getImpl: Probability = 1.00, Count = 1
byteBuffer.getLong -> byteBuffer.getLong: Probability = 1.00, Count = 2
minElement, -> minElement,: Probability = 1.00, Count = 1
maxElement -> maxElement: Probability = 0.50, Count = 1
maxElement -> minElement,maxElement: Probability = 0.50, Count = 1
this.Complement -> this.complement: Probability = 1.00, Count = 1
Antlr4.Runtime.Misc.IntervalSet.Of -> IntervalSet.of: Probability = 1.00, Count = 1
MissingValue -> missingValue: Probability = 1.00, Count = 2
DescribeTrafficMirrorSessionsResponse -> DescribeTrafficMirrorSessionsResult: Probability = 1.00, Count = 1
DescribeTrafficMirrorSessions -> describeTrafficMirrorSessions: Probability = 1.00, Count = 1
DescribeTrafficMirrorSessionsRequest -> DescribeTrafficMirrorSessionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeTrafficMirrorSessionsResponse> -> executeDescribeTrafficMirrorSessions: Probability = 1.00, Count = 1
byteBuffer.isDirect -> byteBuffer.isDirect: Probability = 1.00, Count = 1
GetConflicting -> getConflicting: Probability = 1.00, Count = 1
diff.GetConflicting -> diff.getConflicting: Probability = 1.00, Count = 1
ListDeviceEventsResponse -> ListDeviceEventsResult: Probability = 1.00, Count = 1
ListDeviceEvents -> listDeviceEvents: Probability = 1.00, Count = 1
ListDeviceEventsRequest -> ListDeviceEventsRequest: Probability = 1.00, Count = 1
Invoke<ListDeviceEventsResponse> -> executeListDeviceEvents: Probability = 1.00, Count = 1
this._enclosing.isEmpty -> BoundedMap.this.isEmpty: Probability = 1.00, Count = 1
PointPrefixTreeFieldCacheProvider -> PointPrefixTreeFieldCacheProvider: Probability = 1.00, Count = 1
shapeField, -> shapeField,: Probability = 1.00, Count = 2
defaultSize -> defaultSize: Probability = 1.00, Count = 2
this.grid -> this.grid: Probability = 1.00, Count = 1
grid -> grid: Probability = 1.00, Count = 1
DescribeTransitGatewayPeeringAttachmentsResponse -> DescribeTransitGatewayPeeringAttachmentsResult: Probability = 1.00, Count = 1
DescribeTransitGatewayPeeringAttachments -> describeTransitGatewayPeeringAttachments: Probability = 1.00, Count = 1
DescribeTransitGatewayPeeringAttachmentsRequest -> DescribeTransitGatewayPeeringAttachmentsRequest: Probability = 1.00, Count = 1
Invoke<DescribeTransitGatewayPeeringAttachmentsResponse> -> executeDescribeTransitGatewayPeeringAttachments: Probability = 1.00, Count = 1
ICollection<KeyValuePair<string, -> Set<Entry<String,: Probability = 1.00, Count = 1
Ref>> -> Ref>>: Probability = 1.00, Count = 1
EvaluateFunc -> evaluateFunc: Probability = 1.00, Count = 1
CreateConfigurationTemplateRequest -> CreateConfigurationTemplateRequest: Probability = 1.00, Count = 1
GetUsagePlansResponse -> GetUsagePlansResult: Probability = 1.00, Count = 1
GetUsagePlans -> getUsagePlans: Probability = 1.00, Count = 1
GetUsagePlansRequest -> GetUsagePlansRequest: Probability = 1.00, Count = 1
Invoke<GetUsagePlansResponse> -> executeGetUsagePlans: Probability = 1.00, Count = 1
arrayPtgs -> arrayPtgs: Probability = 1.00, Count = 5
UnpeerVpcResponse -> UnpeerVpcResult: Probability = 1.00, Count = 1
UnpeerVpc -> unpeerVpc: Probability = 1.00, Count = 1
UnpeerVpcRequest -> UnpeerVpcRequest: Probability = 1.00, Count = 1
Invoke<UnpeerVpcResponse> -> executeUnpeerVpc: Probability = 1.00, Count = 1
DescribeTransitGatewayMulticastDomainsResponse -> DescribeTransitGatewayMulticastDomainsResult: Probability = 1.00, Count = 1
DescribeTransitGatewayMulticastDomains -> describeTransitGatewayMulticastDomains: Probability = 1.00, Count = 1
DescribeTransitGatewayMulticastDomainsRequest -> DescribeTransitGatewayMulticastDomainsRequest: Probability = 1.00, Count = 1
Invoke<DescribeTransitGatewayMulticastDomainsResponse> -> executeDescribeTransitGatewayMulticastDomains: Probability = 1.00, Count = 1
GetBreak -> getBreak: Probability = 1.00, Count = 1
_breakMap[main] -> rowKey: Probability = 1.00, Count = 2
GetNewMode -> getNewMode: Probability = 1.00, Count = 2
trie.Get -> trie.get: Probability = 1.00, Count = 1
SubmoduleInitCommand -> SubmoduleInitCommand: Probability = 1.00, Count = 2
SubmoduleInit -> submoduleInit: Probability = 1.00, Count = 1
GetRepositoryPolicyResponse -> GetRepositoryPolicyResult: Probability = 1.00, Count = 1
GetRepositoryPolicy -> getRepositoryPolicy: Probability = 1.00, Count = 1
GetRepositoryPolicyRequest -> GetRepositoryPolicyRequest: Probability = 1.00, Count = 1
Invoke<GetRepositoryPolicyResponse> -> executeGetRepositoryPolicy: Probability = 1.00, Count = 1
POILogger.WARN, -> POILogger.WARN: Probability = 1.00, Count = 1
StartElement -> startElement: Probability = 1.00, Count = 1
elemType -> elemType: Probability = 0.50, Count = 2
elemType -> getElementType: Probability = 0.25, Count = 1
elemType -> qualified: Probability = 0.25, Count = 1
AbbreviatedObjectId.Mask -> abbreviate: Probability = 0.09, Count = 1
AbbreviatedObjectId.Mask -> final: Probability = 0.45, Count = 5
AbbreviatedObjectId.Mask -> AbbreviatedObjectId.mask: Probability = 0.45, Count = 5
">=prec -> "+precedence+">=prec: Probability = 1.00, Count = 1
NGit.Treewalk.Filter.PathSuffixFilter -> PathSuffixFilter: Probability = 1.00, Count = 2
endPosition -> endPosition: Probability = 0.56, Count = 5
endPosition -> src.capacity: Probability = 0.22, Count = 2
endPosition -> extend: Probability = 0.11, Count = 1
endPosition -> src.get: Probability = 0.11, Count = 1
CreateAdditionalAssignmentsForHITResponse -> CreateAdditionalAssignmentsForHITResult: Probability = 1.00, Count = 1
CreateAdditionalAssignmentsForHIT -> createAdditionalAssignmentsForHIT: Probability = 1.00, Count = 1
CreateAdditionalAssignmentsForHITRequest -> CreateAdditionalAssignmentsForHITRequest: Probability = 1.00, Count = 1
Invoke<CreateAdditionalAssignmentsForHITResponse> -> executeCreateAdditionalAssignmentsForHIT: Probability = 1.00, Count = 1
"DeleteEvent", -> "DeleteEvent",: Probability = 1.00, Count = 1
UndeprecateWorkflowType -> undeprecateWorkflowType: Probability = 1.00, Count = 1
UndeprecateWorkflowTypeRequest -> UndeprecateWorkflowTypeRequest: Probability = 1.00, Count = 1
UndeprecateWorkflowTypeResponseUnmarshaller.Instance -> executeUndeprecateWorkflowType: Probability = 1.00, Count = 1
SetDirCacheIterator -> setDirCacheIterator: Probability = 1.00, Count = 1
treeId -> treeId: Probability = 1.00, Count = 2
state.walk -> state.walk: Probability = 1.00, Count = 1
state.dirCacheTree -> state.dirCacheTree: Probability = 1.00, Count = 1
DescribeOrganizationResponse -> DescribeOrganizationResult: Probability = 1.00, Count = 1
DescribeOrganization -> describeOrganization: Probability = 1.00, Count = 1
DescribeOrganizationRequest -> DescribeOrganizationRequest: Probability = 1.00, Count = 1
Invoke<DescribeOrganizationResponse> -> executeDescribeOrganization: Probability = 1.00, Count = 1
char[capacity] -> char[capacity]: Probability = 1.00, Count = 1
RebootInstanceResponse -> RebootInstanceResult: Probability = 1.00, Count = 1
RebootInstance -> rebootInstance: Probability = 1.00, Count = 1
Invoke<RebootInstanceResponse> -> executeRebootInstance: Probability = 1.00, Count = 1
formats -> 2L: Probability = 0.33, Count = 4
formats -> formats.size: Probability = 0.17, Count = 2
formats -> *: Probability = 0.33, Count = 4
formats -> RamUsageEstimator.NUM_BYTES_OBJECT_REF: Probability = 0.17, Count = 2
ExportApiResponse -> ExportApiResult: Probability = 1.00, Count = 1
ExportApi -> exportApi: Probability = 1.00, Count = 1
ExportApiRequest -> ExportApiRequest: Probability = 1.00, Count = 1
Invoke<ExportApiResponse> -> executeExportApi: Probability = 1.00, Count = 1
SetExpectedOldObjectId -> setExpectedOldObjectId: Probability = 1.00, Count = 1
expValue -> expValue: Probability = 1.00, Count = 2
CultureInfo.CurrentCulture -> _value: Probability = 1.00, Count = 2
isPopupShowing -> isPopupShowing: Probability = 1.00, Count = 1
mPopup.isShowing -> mPopup.isShowing: Probability = 1.00, Count = 1
DeleteDBClusterSnapshotResponse -> DBClusterSnapshot: Probability = 1.00, Count = 1
DeleteDBClusterSnapshot -> deleteDBClusterSnapshot: Probability = 1.00, Count = 1
DeleteDBClusterSnapshotRequest -> DeleteDBClusterSnapshotRequest: Probability = 1.00, Count = 1
Invoke<DeleteDBClusterSnapshotResponse> -> executeDeleteDBClusterSnapshot: Probability = 1.00, Count = 1
SearchRoomsResponse -> SearchRoomsResult: Probability = 1.00, Count = 1
SearchRooms -> searchRooms: Probability = 1.00, Count = 1
SearchRoomsRequest -> SearchRoomsRequest: Probability = 1.00, Count = 1
Invoke<SearchRoomsResponse> -> executeSearchRooms: Probability = 1.00, Count = 1
base.Read -> super.read: Probability = 1.00, Count = 2
DeleteLoadBalancerTlsCertificateResponse -> DeleteLoadBalancerTlsCertificateResult: Probability = 1.00, Count = 1
DeleteLoadBalancerTlsCertificate -> deleteLoadBalancerTlsCertificate: Probability = 1.00, Count = 1
DeleteLoadBalancerTlsCertificateRequest -> DeleteLoadBalancerTlsCertificateRequest: Probability = 1.00, Count = 1
Invoke<DeleteLoadBalancerTlsCertificateResponse> -> executeDeleteLoadBalancerTlsCertificate: Probability = 1.00, Count = 1
MessageDigest -> MessageDigest: Probability = 1.00, Count = 2
NewMessageDigest -> newMessageDigest: Probability = 1.00, Count = 2
MessageDigest.GetInstance -> MessageDigest.getInstance: Probability = 1.00, Count = 2
HASH_FUNCTION -> HASH_FUNCTION: Probability = 0.50, Count = 2
HASH_FUNCTION -> LONG_HASH_FUNCTION: Probability = 0.25, Count = 1
HASH_FUNCTION -> .requiredHashFunctionNotAvailable,LONG_HASH_FUNCTION: Probability = 0.25, Count = 1
NoSuchAlgorithmException -> NoSuchAlgorithmException: Probability = 1.00, Count = 2
nsae -> nsae: Probability = 1.00, Count = 4
.requiredHashFunctionNotAvailable, -> .requiredHashFunctionNotAvailable,: Probability = 1.00, Count = 1
IfFunction -> IfFunction: Probability = 1.00, Count = 1
falseSource -> falseSource: Probability = 1.00, Count = 2
this.ifSource -> this.ifSource: Probability = 1.00, Count = 1
ifSource -> ifSource: Probability = 1.00, Count = 1
this.trueSource -> this.trueSource: Probability = 1.00, Count = 1
trueSource -> trueSource: Probability = 1.00, Count = 1
this.falseSource -> this.falseSource: Probability = 1.00, Count = 1
npv -> npv: Probability = 1.00, Count = 4
trate -> trate: Probability = 0.75, Count = 3
trate -> cfs[i]: Probability = 0.25, Count = 1
SetBuilder -> setBuilder: Probability = 0.39, Count = 18
SetBuilder -> GroupQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> GroupQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> FieldQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> FieldQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> BooleanQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> BooleanQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> FuzzyQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> FuzzyQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> PointQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> DummyQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> PointRangeQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> PointRangeQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> BoostQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> BoostQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> ModifierQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> ModifierQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> WildcardQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> WildcardQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> TokenizedPhraseQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> PhraseQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> MatchNoDocsQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> MatchNoDocsQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> PrefixWildcardQueryNode.class,new: Probability = 0.02, Count = 1
SetBuilder -> PrefixWildcardQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> TermRangeQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> TermRangeQueryNodeBuilder: Probability = 0.02, Count = 1
SetBuilder -> RegexpQueryNode.class,: Probability = 0.02, Count = 1
SetBuilder -> RegexpQueryNodeBuilder: Probability = 0.02, Count = 1
FederatedUser -> FederatedUser: Probability = 1.00, Count = 1
federatedUserId, -> federatedUserId,: Probability = 1.00, Count = 1
_federatedUserId -> setFederatedUserId: Probability = 1.00, Count = 1
federatedUserId -> federatedUserId: Probability = 1.00, Count = 1
QueryRescorer -> QueryRescorer: Probability = 1.00, Count = 1
this.query -> this.query: Probability = 1.00, Count = 1
GetRenameDetector -> getRenameDetector: Probability = 1.00, Count = 1
UpdateTemplatePermissionsResponse -> UpdateTemplatePermissionsResult: Probability = 1.00, Count = 1
UpdateTemplatePermissions -> updateTemplatePermissions: Probability = 1.00, Count = 1
UpdateTemplatePermissionsRequest -> UpdateTemplatePermissionsRequest: Probability = 1.00, Count = 1
Invoke<UpdateTemplatePermissionsResponse> -> executeUpdateTemplatePermissions: Probability = 1.00, Count = 1
ResetInstanceAttributeResponse -> ResetInstanceAttributeResult: Probability = 1.00, Count = 1
ResetInstanceAttribute -> resetInstanceAttribute: Probability = 1.00, Count = 1
Invoke<ResetInstanceAttributeResponse> -> executeResetInstanceAttribute: Probability = 1.00, Count = 1
DirectoryEntry -> DirectoryEntry: Probability = 1.00, Count = 4
streamName -> streamName: Probability = 1.00, Count = 3
OLE2 -> OLE2: Probability = 1.00, Count = 1
GetCachedErrorValue -> getCachedErrorValue: Probability = 1.00, Count = 1
specialCachedValue.GetErrorValue -> specialCachedValue.getErrorValue: Probability = 1.00, Count = 1
UpdateHITReviewStatusResponse -> UpdateHITReviewStatusResult: Probability = 1.00, Count = 1
UpdateHITReviewStatus -> updateHITReviewStatus: Probability = 1.00, Count = 1
UpdateHITReviewStatusRequest -> UpdateHITReviewStatusRequest: Probability = 1.00, Count = 1
Invoke<UpdateHITReviewStatusResponse> -> executeUpdateHITReviewStatus: Probability = 1.00, Count = 1
ScandinavianNormalizationFilterFactory -> ScandinavianNormalizationFilterFactory: Probability = 1.00, Count = 1
DescribeDBSnapshotAttributesResponse -> DBSnapshotAttributesResult: Probability = 1.00, Count = 1
DescribeDBSnapshotAttributes -> describeDBSnapshotAttributes: Probability = 1.00, Count = 1
DescribeDBSnapshotAttributesRequest -> DescribeDBSnapshotAttributesRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBSnapshotAttributesResponse> -> executeDescribeDBSnapshotAttributes: Probability = 1.00, Count = 1
GetNamespaceAuthorizationListRequest -> GetNamespaceAuthorizationListRequest: Probability = 1.00, Count = 1
"GetNamespaceAuthorizationList", -> "GetNamespaceAuthorizationList",: Probability = 1.00, Count = 1
LowFreqTerm -> LowFreqTerm: Probability = 1.00, Count = 1
postings, -> postings,: Probability = 1.00, Count = 1
payloads, -> payloads,: Probability = 1.00, Count = 1
consumed -> consumed: Probability = 1.00, Count = 1
keepOrig -> keepOrig: Probability = 1.00, Count = 1
matched -> matched: Probability = 1.00, Count = 1
EntrySize -> entrySize: Probability = 1.00, Count = 1
mode.CopyToLength -> mode.copyToLength: Probability = 1.00, Count = 1
"exit -> "exit: Probability = 0.50, Count = 1
"exit -> "+getRuleNames: Probability = 0.50, Count = 1
this._enclosing.RuleNames[ctx.RuleIndex] -> [ctx.getRuleIndex: Probability = 1.00, Count = 2
this._enclosing._input.LT -> ="+_input.LT: Probability = 1.00, Count = 1
ModifyEventSubscriptionResponse -> EventSubscription: Probability = 1.00, Count = 1
ModifyEventSubscription -> modifyEventSubscription: Probability = 1.00, Count = 1
ModifyEventSubscriptionRequest -> ModifyEventSubscriptionRequest: Probability = 1.00, Count = 1
Invoke<ModifyEventSubscriptionResponse> -> executeModifyEventSubscription: Probability = 1.00, Count = 1
Builder<CharsRef> -> Outputs<CharsRef>: Probability = 0.33, Count = 1
Builder<CharsRef> -> CharSequenceOutputs.getSingleton: Probability = 0.33, Count = 1
Builder<CharsRef> -> FSTCompiler<CharsRef>: Probability = 0.33, Count = 1
BootstrapActions -> BootstrapActions: Probability = 1.00, Count = 1
this.bucket -> this.bucket: Probability = 1.00, Count = 1
deletionPolicyName -> deletionPolicyName: Probability = 0.50, Count = 2
deletionPolicyName -> "deletion.policy",: Probability = 0.25, Count = 1
deletionPolicyName -> "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy": Probability = 0.25, Count = 1
deletionPolicyType -> deletionPolicyName.equals: Probability = 1.00, Count = 1
field_10_font_name_len -> field_10_font_name_len: Probability = 0.67, Count = 4
field_10_font_name_len -> unicodeFlags: Probability = 0.33, Count = 2
destination.GetRefLogMessage -> destination.getRefLogMessage: Probability = 1.00, Count = 1
SubSlice.ToString -> subSlice.toString: Probability = 1.00, Count = 1
java.nio.ReadOnlyIntArrayBuffer.copy -> ReadOnlyIntArrayBuffer.copy: Probability = 1.00, Count = 1
nextBlock -> nextBlock: Probability = 0.56, Count = 5
nextBlock -> "Can't: Probability = 0.11, Count = 1
nextBlock -> loopDetector.claim: Probability = 0.11, Count = 1
nextBlock -> blockStore.getBlockAt: Probability = 0.11, Count = 1
nextBlock -> blockStore.getNextBlock: Probability = 0.11, Count = 1
getCurrentState -> getCurrentState: Probability = 1.00, Count = 1
currentState -> currentState: Probability = 1.00, Count = 1
backingMap.lowerKey -> backingMap.lowerKey: Probability = 1.00, Count = 1
FinnishLightStemFilterFactory -> FinnishLightStemFilterFactory: Probability = 1.00, Count = 1
retval.Append -> retval.append: Probability = 0.78, Count = 7
retval.Append -> "[MERGEDCELLS]": Probability = 0.22, Count = 2
begin, -> begin,: Probability = 1.00, Count = 1
dropLF -> dropLF: Probability = 1.00, Count = 2
e-- -> e--: Probability = 1.00, Count = 1
RevokeDomainAccessResponse -> RevokeDomainAccessResult: Probability = 1.00, Count = 1
RevokeDomainAccess -> revokeDomainAccess: Probability = 1.00, Count = 1
RevokeDomainAccessRequest -> RevokeDomainAccessRequest: Probability = 1.00, Count = 1
Invoke<RevokeDomainAccessResponse> -> executeRevokeDomainAccess: Probability = 1.00, Count = 1
GetPhotoStoreRequest -> GetPhotoStoreRequest: Probability = 1.00, Count = 1
"GetPhotoStore", -> "GetPhotoStore",: Probability = 1.00, Count = 1
Invoke<DescribeVirtualInterfacesResponse> -> executeDescribeVirtualInterfaces: Probability = 1.00, Count = 1
WithdrawByoipCidrResponse -> WithdrawByoipCidrResult: Probability = 1.00, Count = 1
WithdrawByoipCidr -> withdrawByoipCidr: Probability = 1.00, Count = 1
WithdrawByoipCidrRequest -> WithdrawByoipCidrRequest: Probability = 1.00, Count = 1
Invoke<WithdrawByoipCidrResponse> -> executeWithdrawByoipCidr: Probability = 1.00, Count = 1
ICUTransformFilterFactory -> ICUTransformFilterFactory: Probability = 1.00, Count = 1
"forward", -> direction: Probability = 0.33, Count = 2
"forward", -> "direction",: Probability = 0.17, Count = 1
"forward", -> "forward",: Probability = 0.33, Count = 2
"forward", -> "reverse": Probability = 0.17, Count = 1
UpdateFilterResponse -> UpdateFilterResult: Probability = 1.00, Count = 1
UpdateFilter -> updateFilter: Probability = 1.00, Count = 1
UpdateFilterRequest -> UpdateFilterRequest: Probability = 1.00, Count = 1
Invoke<UpdateFilterResponse> -> executeUpdateFilter: Probability = 1.00, Count = 1
GetSaturation -> getSaturation: Probability = 1.00, Count = 1
numBitsSet -> numBitsSet: Probability = 1.00, Count = 1
numBitsSet/ -> numBitsSet: Probability = 1.00, Count = 1
_bloomSize -> bloomSize: Probability = 1.00, Count = 1
DeleteResolverEndpointResponse -> DeleteResolverEndpointResult: Probability = 1.00, Count = 1
DeleteResolverEndpoint -> deleteResolverEndpoint: Probability = 1.00, Count = 1
DeleteResolverEndpointRequest -> DeleteResolverEndpointRequest: Probability = 1.00, Count = 1
Invoke<DeleteResolverEndpointResponse> -> executeDeleteResolverEndpoint: Probability = 1.00, Count = 1
AssociateHostedConnectionResponse -> AssociateHostedConnectionResult: Probability = 1.00, Count = 1
AssociateHostedConnection -> associateHostedConnection: Probability = 1.00, Count = 1
AssociateHostedConnectionRequest -> AssociateHostedConnectionRequest: Probability = 1.00, Count = 1
Invoke<AssociateHostedConnectionResponse> -> executeAssociateHostedConnection: Probability = 1.00, Count = 1
GetRepoBuildStatusRequest -> GetRepoBuildStatusRequest: Probability = 1.00, Count = 1
"GetRepoBuildStatus", -> "GetRepoBuildStatus",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/build/[BuildId]/status" -> "/repos/[RepoNamespace]/[RepoName]/build/[BuildId]/status": Probability = 1.00, Count = 1
GetFramedPhotoUrlsRequest -> GetFramedPhotoUrlsRequest: Probability = 1.00, Count = 1
"GetFramedPhotoUrls", -> "GetFramedPhotoUrls",: Probability = 1.00, Count = 1
SimpleHTMLFormatter -> SimpleHTMLFormatter: Probability = 1.00, Count = 1
preTag, -> preTag,: Probability = 1.00, Count = 2
this.preTag -> this.preTag: Probability = 1.00, Count = 1
this.postTag -> this.postTag: Probability = 1.00, Count = 1
SetData -> setData: Probability = 1.00, Count = 3
device -> device: Probability = 1.00, Count = 2
_device -> setDevice: Probability = 1.00, Count = 1
blocks.Count -> blocks.length: Probability = 1.00, Count = 2
bytesUsedPerBlock -> size: Probability = 1.00, Count = 3
ChangeResourceRecordSetsResponse -> ChangeResourceRecordSetsResult: Probability = 1.00, Count = 1
ChangeResourceRecordSets -> changeResourceRecordSets: Probability = 1.00, Count = 1
Invoke<ChangeResourceRecordSetsResponse> -> executeChangeResourceRecordSets: Probability = 1.00, Count = 1
java.util.Collections.ReverseComparator2<T> -> ReverseComparator2&&: Probability = 0.50, Count = 1
java.util.Collections.ReverseComparator2<T> -> ReverseComparator2: Probability = 0.50, Count = 1
.cmp.Equals -> .cmp.equals: Probability = 1.00, Count = 1
IsCheckEofAfterPackFooter -> isCheckEofAfterPackFooter: Probability = 1.00, Count = 1
checkEofAfterPackFooter -> checkEofAfterPackFooter: Probability = 1.00, Count = 1
DescribeDirectConnectGatewayAssociationProposalsResponse -> DescribeDirectConnectGatewayAssociationProposalsResult: Probability = 1.00, Count = 1
DescribeDirectConnectGatewayAssociationProposals -> describeDirectConnectGatewayAssociationProposals: Probability = 1.00, Count = 1
DescribeDirectConnectGatewayAssociationProposalsRequest -> DescribeDirectConnectGatewayAssociationProposalsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDirectConnectGatewayAssociationProposalsResponse> -> executeDescribeDirectConnectGatewayAssociationProposals: Probability = 1.00, Count = 1
PutSchemaFromJsonResponse -> PutSchemaFromJsonResult: Probability = 1.00, Count = 1
PutSchemaFromJson -> putSchemaFromJson: Probability = 1.00, Count = 1
PutSchemaFromJsonRequest -> PutSchemaFromJsonRequest: Probability = 1.00, Count = 1
Invoke<PutSchemaFromJsonResponse> -> executePutSchemaFromJson: Probability = 1.00, Count = 1
UnassignPrivateIpAddressesResponse -> UnassignPrivateIpAddressesResult: Probability = 1.00, Count = 1
UnassignPrivateIpAddresses -> unassignPrivateIpAddresses: Probability = 1.00, Count = 1
UnassignPrivateIpAddressesRequest -> UnassignPrivateIpAddressesRequest: Probability = 1.00, Count = 1
Invoke<UnassignPrivateIpAddressesResponse> -> executeUnassignPrivateIpAddresses: Probability = 1.00, Count = 1
FinishReading -> finishReading: Probability = 1.00, Count = 1
arrayValues -> arrayValues: Probability = 0.67, Count = 2
arrayValues -> result.setClass: Probability = 0.33, Count = 1
NativeUnixDirectory -> NativeUnixDirectory: Probability = 0.50, Count = 1
NativeUnixDirectory -> Path: Probability = 0.50, Count = 1
DEFAULT_MERGE_BUFFER_SIZE, -> DEFAULT_MIN_BYTES_DIRECT,: Probability = 0.50, Count = 1
DEFAULT_MERGE_BUFFER_SIZE, -> FSLockFactory.getDefault: Probability = 0.50, Count = 1
CreateRestApiResponse -> CreateRestApiResult: Probability = 1.00, Count = 1
CreateRestApi -> createRestApi: Probability = 1.00, Count = 1
CreateRestApiRequest -> CreateRestApiRequest: Probability = 1.00, Count = 1
Invoke<CreateRestApiResponse> -> executeCreateRestApi: Probability = 1.00, Count = 1
GetRef3DEval -> getRef3DEval: Probability = 1.00, Count = 1
rptg -> rptg: Probability = 1.00, Count = 1
rptg.Row, -> rptg.getColumn: Probability = 1.00, Count = 1
dalvik.system.CloseGuard -> CloseGuard: Probability = 1.00, Count = 2
lnum -> lnum: Probability = 1.00, Count = 1
lnum.ToString -> lnum: Probability = 1.00, Count = 1
newMode -> newMode: Probability = 1.00, Count = 2
isOpaque -> isOpaque: Probability = 1.00, Count = 1
requireEnd -> requireEnd: Probability = 1.00, Count = 1
requireEndImpl -> requireEndImpl: Probability = 1.00, Count = 1
List<Record> -> List<org.apache.poi.hssf.record.Record>: Probability = 1.00, Count = 1
wbRecords.Add -> wbRecords: Probability = 0.15, Count = 2
wbRecords.Add -> Collections.addAll: Probability = 0.15, Count = 2
wbRecords.Add -> wbRecords,: Probability = 0.15, Count = 2
wbRecords.Add -> wbRecords.add: Probability = 0.23, Count = 3
wbRecords.Add -> externs: Probability = 0.15, Count = 2
wbRecords.Add -> EOFRecord.instance: Probability = 0.08, Count = 1
wbRecords.Add -> InternalWorkbook.createWorkbook: Probability = 0.08, Count = 1
UpdateNotebookInstanceLifecycleConfigResponse -> UpdateNotebookInstanceLifecycleConfigResult: Probability = 1.00, Count = 1
UpdateNotebookInstanceLifecycleConfig -> updateNotebookInstanceLifecycleConfig: Probability = 1.00, Count = 1
UpdateNotebookInstanceLifecycleConfigRequest -> UpdateNotebookInstanceLifecycleConfigRequest: Probability = 1.00, Count = 1
Invoke<UpdateNotebookInstanceLifecycleConfigResponse> -> executeUpdateNotebookInstanceLifecycleConfig: Probability = 1.00, Count = 1
_plsContinues.Length -> _plsContinue: Probability = 1.00, Count = 1
_plsContinues[i] -> _plsContinue: Probability = 1.00, Count = 1
GetPIDString -> getPIDString: Probability = 1.00, Count = 1
pid -> pid: Probability = 0.40, Count = 4
pid -> Map<Long,String>: Probability = 0.10, Count = 1
pid -> dic: Probability = 0.50, Count = 5
BatchCreateRoomMembershipResponse -> BatchCreateRoomMembershipResult: Probability = 1.00, Count = 1
BatchCreateRoomMembership -> batchCreateRoomMembership: Probability = 1.00, Count = 1
BatchCreateRoomMembershipRequest -> BatchCreateRoomMembershipRequest: Probability = 1.00, Count = 1
Invoke<BatchCreateRoomMembershipResponse> -> executeBatchCreateRoomMembership: Probability = 1.00, Count = 1
DeleteQueueResponse -> DeleteQueueResult: Probability = 1.00, Count = 1
DeleteQueue -> deleteQueue: Probability = 1.00, Count = 1
Invoke<DeleteQueueResponse> -> executeDeleteQueue: Probability = 1.00, Count = 1
ReceiveCommand -> ReceiveCommand: Probability = 0.50, Count = 1
ReceiveCommand -> ReceiveCommand...: Probability = 0.50, Count = 1
commands.AddItem -> commands.add: Probability = 0.50, Count = 1
commands.AddItem -> addCommand: Probability = 0.50, Count = 1
DetachLoadBalancerTargetGroupsResponse -> DetachLoadBalancerTargetGroupsResult: Probability = 1.00, Count = 1
DetachLoadBalancerTargetGroups -> detachLoadBalancerTargetGroups: Probability = 1.00, Count = 1
DetachLoadBalancerTargetGroupsRequest -> DetachLoadBalancerTargetGroupsRequest: Probability = 1.00, Count = 1
Invoke<DetachLoadBalancerTargetGroupsResponse> -> executeDetachLoadBalancerTargetGroups: Probability = 1.00, Count = 1
FrameRecord -> FrameRecord: Probability = 1.00, Count = 1
field_1_borderType -> field_1_borderType: Probability = 1.00, Count = 1
field_2_options -> field_2_options: Probability = 1.00, Count = 1
S3Signer -> S3Signer: Probability = 1.00, Count = 1
_s3Signer -> this.httpVerb: Probability = 1.00, Count = 1
Amazon.Runtime.Internal.Auth.S3Signer -> null: Probability = 0.50, Count = 1
Amazon.Runtime.Internal.Auth.S3Signer -> this.resourcePath: Probability = 0.50, Count = 1
AWSConfigsS3.UseSignatureVersion4, -> null: Probability = 1.00, Count = 2
RegionDetectionUpdater -> this.additionalQueryParamsToSign: Probability = 1.00, Count = 1
RejectDomainTransferFromAnotherAwsAccountResponse -> RejectDomainTransferFromAnotherAwsAccountResult: Probability = 1.00, Count = 1
RejectDomainTransferFromAnotherAwsAccount -> rejectDomainTransferFromAnotherAwsAccount: Probability = 1.00, Count = 1
RejectDomainTransferFromAnotherAwsAccountRequest -> RejectDomainTransferFromAnotherAwsAccountRequest: Probability = 1.00, Count = 1
Invoke<RejectDomainTransferFromAnotherAwsAccountResponse> -> executeRejectDomainTransferFromAnotherAwsAccount: Probability = 1.00, Count = 1
"[/STRING]\n" -> +"[/STRING]\n": Probability = 1.00, Count = 1
GetIdentityNotificationAttributesResponse -> GetIdentityNotificationAttributesResult: Probability = 1.00, Count = 1
GetIdentityNotificationAttributes -> getIdentityNotificationAttributes: Probability = 1.00, Count = 1
GetIdentityNotificationAttributesRequest -> GetIdentityNotificationAttributesRequest: Probability = 1.00, Count = 1
Invoke<GetIdentityNotificationAttributesResponse> -> executeGetIdentityNotificationAttributes: Probability = 1.00, Count = 1
java.nio.ReadOnlyDoubleArrayBuffer -> ReadOnlyDoubleArrayBuffer: Probability = 1.00, Count = 1
"INDEX_DIFF_FILTER" -> "INDEX_DIFF_FILTER": Probability = 1.00, Count = 1
grams -> this.grams: Probability = 0.33, Count = 1
grams -> grams: Probability = 0.67, Count = 2
AddShingles -> this.indexAnalyzer: Probability = 0.17, Count = 1
AddShingles -> addShingles: Probability = 0.33, Count = 2
AddShingles -> indexAnalyzer: Probability = 0.17, Count = 1
AddShingles -> this.queryAnalyzer: Probability = 0.17, Count = 1
AddShingles -> queryAnalyzer: Probability = 0.17, Count = 1
ModifyVpnTunnelOptionsResponse -> ModifyVpnTunnelOptionsResult: Probability = 1.00, Count = 1
ModifyVpnTunnelOptions -> modifyVpnTunnelOptions: Probability = 1.00, Count = 1
ModifyVpnTunnelOptionsRequest -> ModifyVpnTunnelOptionsRequest: Probability = 1.00, Count = 1
Invoke<ModifyVpnTunnelOptionsResponse> -> executeModifyVpnTunnelOptions: Probability = 1.00, Count = 1
bitList -> doc: Probability = 0.31, Count = 5
bitList -> NO_MORE_DOCS: Probability = 0.12, Count = 2
bitList -> newDoc: Probability = 0.31, Count = 5
bitList -> queue.top: Probability = 0.12, Count = 2
bitList -> queue.pop: Probability = 0.06, Count = 1
bitList -> queue.updateTop: Probability = 0.06, Count = 1
GetTransitGatewayRouteTableAssociationsResponse -> GetTransitGatewayRouteTableAssociationsResult: Probability = 1.00, Count = 1
GetTransitGatewayRouteTableAssociations -> getTransitGatewayRouteTableAssociations: Probability = 1.00, Count = 1
GetTransitGatewayRouteTableAssociationsRequest -> GetTransitGatewayRouteTableAssociationsRequest: Probability = 1.00, Count = 1
Invoke<GetTransitGatewayRouteTableAssociationsResponse> -> executeGetTransitGatewayRouteTableAssociations: Probability = 1.00, Count = 1
DescribeLoggingStatusResponse -> DescribeLoggingStatusResult: Probability = 1.00, Count = 1
DescribeLoggingStatus -> describeLoggingStatus: Probability = 1.00, Count = 1
DescribeLoggingStatusRequest -> DescribeLoggingStatusRequest: Probability = 1.00, Count = 1
Invoke<DescribeLoggingStatusResponse> -> executeDescribeLoggingStatus: Probability = 1.00, Count = 1
PorterStemFilterFactory -> PorterStemFilterFactory: Probability = 1.00, Count = 1
RefStorage -> Storage: Probability = 1.00, Count = 2
GetStorage -> getStorage: Probability = 1.00, Count = 2
CreateVoiceConnectorResponse -> CreateVoiceConnectorResult: Probability = 1.00, Count = 1
CreateVoiceConnector -> createVoiceConnector: Probability = 1.00, Count = 1
CreateVoiceConnectorRequest -> CreateVoiceConnectorRequest: Probability = 1.00, Count = 1
Invoke<CreateVoiceConnectorResponse> -> executeCreateVoiceConnector: Probability = 1.00, Count = 1
SetSheetOrder -> setSheetOrder: Probability = 1.00, Count = 1
sheetname, -> sheetname,: Probability = 1.00, Count = 1
pos0 -> initialBspos: Probability = 0.38, Count = 3
pos0 -> pos0: Probability = 0.50, Count = 4
pos0 -> records.setBspos: Probability = 0.12, Count = 1
UpdateRepoBuildRuleRequest -> UpdateRepoBuildRuleRequest: Probability = 1.00, Count = 1
"UpdateRepoBuildRule", -> "UpdateRepoBuildRule",: Probability = 1.00, Count = 1
NLPTokenizerOp -> NLPTokenizerOp: Probability = 1.00, Count = 2
c.size -> .size: Probability = 1.00, Count = 1
RetainAll -> retainAll: Probability = 1.00, Count = 1
path.GetPath -> path.getPath: Probability = 1.00, Count = 1
UpdateSecurityGroupRuleDescriptionsEgressResponse -> UpdateSecurityGroupRuleDescriptionsEgressResult: Probability = 1.00, Count = 1
UpdateSecurityGroupRuleDescriptionsEgress -> updateSecurityGroupRuleDescriptionsEgress: Probability = 1.00, Count = 1
UpdateSecurityGroupRuleDescriptionsEgressRequest -> UpdateSecurityGroupRuleDescriptionsEgressRequest: Probability = 1.00, Count = 1
Invoke<UpdateSecurityGroupRuleDescriptionsEgressResponse> -> executeUpdateSecurityGroupRuleDescriptionsEgress: Probability = 1.00, Count = 1
SetVaultAccessPolicyResponse -> SetVaultAccessPolicyResult: Probability = 1.00, Count = 1
SetVaultAccessPolicy -> setVaultAccessPolicy: Probability = 1.00, Count = 1
SetVaultAccessPolicyRequest -> SetVaultAccessPolicyRequest: Probability = 1.00, Count = 1
Invoke<SetVaultAccessPolicyResponse> -> executeSetVaultAccessPolicy: Probability = 1.00, Count = 1
PutAutoScalingPolicyResponse -> PutAutoScalingPolicyResult: Probability = 1.00, Count = 1
PutAutoScalingPolicy -> putAutoScalingPolicy: Probability = 1.00, Count = 1
PutAutoScalingPolicyRequest -> PutAutoScalingPolicyRequest: Probability = 1.00, Count = 1
Invoke<PutAutoScalingPolicyResponse> -> executePutAutoScalingPolicy: Probability = 1.00, Count = 1
CancelReservedInstancesListingResponse -> CancelReservedInstancesListingResult: Probability = 1.00, Count = 1
CancelReservedInstancesListing -> cancelReservedInstancesListing: Probability = 1.00, Count = 1
CancelReservedInstancesListingRequest -> CancelReservedInstancesListingRequest: Probability = 1.00, Count = 1
Invoke<CancelReservedInstancesListingResponse> -> executeCancelReservedInstancesListing: Probability = 1.00, Count = 1
"BearerTokenSigner" -> null: Probability = 1.00, Count = 1
ListTagsForDeliveryStreamResponse -> ListTagsForDeliveryStreamResult: Probability = 1.00, Count = 1
ListTagsForDeliveryStream -> listTagsForDeliveryStream: Probability = 1.00, Count = 1
ListTagsForDeliveryStreamRequest -> ListTagsForDeliveryStreamRequest: Probability = 1.00, Count = 1
Invoke<ListTagsForDeliveryStreamResponse> -> executeListTagsForDeliveryStream: Probability = 1.00, Count = 1
RegisterDomainResponse -> RegisterDomainResult: Probability = 1.00, Count = 1
ListEntityRecognizersResponse -> ListEntityRecognizersResult: Probability = 1.00, Count = 1
ListEntityRecognizers -> listEntityRecognizers: Probability = 1.00, Count = 1
ListEntityRecognizersRequest -> ListEntityRecognizersRequest: Probability = 1.00, Count = 1
Invoke<ListEntityRecognizersResponse> -> executeListEntityRecognizers: Probability = 1.00, Count = 1
SetTimeout -> setTimeout: Probability = 1.00, Count = 1
millis -> millis: Probability = 1.00, Count = 4
GetRepoSourceRepoRequest -> GetRepoSourceRepoRequest: Probability = 1.00, Count = 1
"GetRepoSourceRepo", -> "GetRepoSourceRepo",: Probability = 1.00, Count = 1
DescribeBatchInferenceJobResponse -> DescribeBatchInferenceJobResult: Probability = 1.00, Count = 1
DescribeBatchInferenceJob -> describeBatchInferenceJob: Probability = 1.00, Count = 1
DescribeBatchInferenceJobRequest -> DescribeBatchInferenceJobRequest: Probability = 1.00, Count = 1
Invoke<DescribeBatchInferenceJobResponse> -> executeDescribeBatchInferenceJob: Probability = 1.00, Count = 1
CreateSecurityGroupRequest -> CreateSecurityGroupRequest: Probability = 1.00, Count = 1
srv -> srv: Probability = 1.00, Count = 2
srv.CountBytesWritten -> srv.countBytesWritten: Probability = 1.00, Count = 1
BatchGetImageResponse -> BatchGetImageResult: Probability = 1.00, Count = 1
BatchGetImage -> batchGetImage: Probability = 1.00, Count = 1
BatchGetImageRequest -> BatchGetImageRequest: Probability = 1.00, Count = 1
Invoke<BatchGetImageResponse> -> executeBatchGetImage: Probability = 1.00, Count = 1
PollForActivityTaskResponse -> ActivityTask: Probability = 1.00, Count = 1
PollForActivityTask -> pollForActivityTask: Probability = 1.00, Count = 1
PollForActivityTaskRequest -> PollForActivityTaskRequest: Probability = 1.00, Count = 1
Invoke<PollForActivityTaskResponse> -> executePollForActivityTask: Probability = 1.00, Count = 1
analyer -> analyer: Probability = 1.00, Count = 2
ExpireSessionResponse -> ExpireSessionResult: Probability = 1.00, Count = 1
ExpireSession -> expireSession: Probability = 1.00, Count = 1
ExpireSessionRequest -> ExpireSessionRequest: Probability = 1.00, Count = 1
Invoke<ExpireSessionResponse> -> executeExpireSession: Probability = 1.00, Count = 1
GetSubscriptionAttributesRequest -> GetSubscriptionAttributesRequest: Probability = 1.00, Count = 1
GetMetricDataResponse -> GetMetricDataResult: Probability = 1.00, Count = 1
GetMetricData -> getMetricData: Probability = 1.00, Count = 1
GetMetricDataRequest -> GetMetricDataRequest: Probability = 1.00, Count = 1
Invoke<GetMetricDataResponse> -> executeGetMetricData: Probability = 1.00, Count = 1
Invoke<DescribeDhcpOptionsResponse> -> executeDescribeDhcpOptions: Probability = 1.00, Count = 1
startInclusive, -> startInclusive,: Probability = 1.00, Count = 2
SendEmailResponse -> SendEmailResult: Probability = 1.00, Count = 1
SendEmail -> sendEmail: Probability = 1.00, Count = 1
Invoke<SendEmailResponse> -> executeSendEmail: Probability = 1.00, Count = 1
ItalianStemmer -> ItalianStemmer: Probability = 1.00, Count = 1
AddIndexChangedListener -> addIndexChangedListener: Probability = 1.00, Count = 1
AddListener<IndexChangedListener> -> IndexChangedListener.class,: Probability = 1.00, Count = 1
SynthesizeSpeechResponse -> SynthesizeSpeechResult: Probability = 1.00, Count = 1
SynthesizeSpeech -> synthesizeSpeech: Probability = 1.00, Count = 1
SynthesizeSpeechRequest -> SynthesizeSpeechRequest: Probability = 1.00, Count = 1
Invoke<SynthesizeSpeechResponse> -> executeSynthesizeSpeech: Probability = 1.00, Count = 1
frag2 -> frag2: Probability = 1.00, Count = 1
frag2.TextEndPos -> frag2.textEndPos: Probability = 1.00, Count = 1
Score, -> score=Math.max: Probability = 1.00, Count = 1
frag2.Score -> score,frag2.score: Probability = 1.00, Count = 1
CreateLedgerResponse -> CreateLedgerResult: Probability = 1.00, Count = 1
CreateLedger -> createLedger: Probability = 1.00, Count = 1
CreateLedgerRequest -> CreateLedgerRequest: Probability = 1.00, Count = 1
Invoke<CreateLedgerResponse> -> executeCreateLedger: Probability = 1.00, Count = 1
DescribeFleetPortSettingsResponse -> DescribeFleetPortSettingsResult: Probability = 1.00, Count = 1
DescribeFleetPortSettings -> describeFleetPortSettings: Probability = 1.00, Count = 1
DescribeFleetPortSettingsRequest -> DescribeFleetPortSettingsRequest: Probability = 1.00, Count = 1
Invoke<DescribeFleetPortSettingsResponse> -> executeDescribeFleetPortSettings: Probability = 1.00, Count = 1
getHost -> getHost: Probability = 1.00, Count = 1
ByteSequencesWriter -> ByteSequencesWriter: Probability = 1.00, Count = 1
this.os -> this.out: Probability = 1.00, Count = 1
TermsEnumWithSlice[slices.Length] -> TermsEnumWithSlice[slices.length]: Probability = 1.00, Count = 3
slices[i] -> slices[i]: Probability = 0.33, Count = 2
slices[i] -> subDocs[i]: Probability = 0.17, Count = 1
slices[i] -> MultiPostingsEnum.EnumWithSlice: Probability = 0.17, Count = 1
slices[i] -> subDocs[i].slice: Probability = 0.17, Count = 1
slices[i] -> currentSubs: Probability = 0.17, Count = 1
this.attributes -> this.attributes: Probability = 1.00, Count = 1
JCG.LinkedDictionary<Type, -> LinkedHashMap<>: Probability = 0.67, Count = 2
JCG.LinkedDictionary<Type, -> this.currentState: Probability = 0.33, Count = 1
Util.Attribute> -> this.attributeImpls: Probability = 0.50, Count = 1
Util.Attribute> -> State[1]: Probability = 0.50, Count = 1
State[1] -> factory,: Probability = 0.50, Count = 1
State[1] -> "AttributeFactory: Probability = 0.50, Count = 1
GetConfigurationProfileResponse -> GetConfigurationProfileResult: Probability = 1.00, Count = 1
GetConfigurationProfile -> getConfigurationProfile: Probability = 1.00, Count = 1
GetConfigurationProfileRequest -> GetConfigurationProfileRequest: Probability = 1.00, Count = 1
Invoke<GetConfigurationProfileResponse> -> executeGetConfigurationProfile: Probability = 1.00, Count = 1
DescribeVpcPeeringConnectionsResponse -> DescribeVpcPeeringConnectionsResult: Probability = 1.00, Count = 1
DescribeVpcPeeringConnections -> describeVpcPeeringConnections: Probability = 1.00, Count = 1
DescribeVpcPeeringConnectionsRequest -> DescribeVpcPeeringConnectionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeVpcPeeringConnectionsResponse> -> executeDescribeVpcPeeringConnections: Probability = 1.00, Count = 1
sumTokenSizes -> sumTokenSizes: Probability = 1.00, Count = 1
fromIx, -> fromIx,: Probability = 1.00, Count = 1
ToIx -> toIx: Probability = 0.50, Count = 1
ToIx -> i<toIx: Probability = 0.50, Count = 1
fromIx -> i=fromIx: Probability = 1.00, Count = 1
DirectBytesStartArray -> DirectBytesStartArray: Probability = 1.00, Count = 1
initSize, -> initSize,: Probability = 1.00, Count = 1
counter -> counter: Probability = 1.00, Count = 2
this.m_initSize -> this.initSize: Probability = 1.00, Count = 1
initSize -> initSize: Probability = 1.00, Count = 1
UploadMultipartPartResponse -> UploadMultipartPartResult: Probability = 1.00, Count = 1
UploadMultipartPart -> uploadMultipartPart: Probability = 1.00, Count = 1
UploadMultipartPartRequest -> UploadMultipartPartRequest: Probability = 1.00, Count = 1
Invoke<UploadMultipartPartResponse> -> executeUploadMultipartPart: Probability = 1.00, Count = 1
CreateDBClusterEndpointResponse -> CreateDBClusterEndpointResult: Probability = 1.00, Count = 1
CreateDBClusterEndpoint -> createDBClusterEndpoint: Probability = 1.00, Count = 1
CreateDBClusterEndpointRequest -> CreateDBClusterEndpointRequest: Probability = 1.00, Count = 1
Invoke<CreateDBClusterEndpointResponse> -> executeCreateDBClusterEndpoint: Probability = 1.00, Count = 1
promptText, -> promptText,: Probability = 1.00, Count = 1
maskValue -> maskValue: Probability = 1.00, Count = 2
this.promptText -> this.promptText: Probability = 1.00, Count = 1
this.valueSecure -> this.valueSecure: Probability = 1.00, Count = 1
DescribeCustomAvailabilityZonesResponse -> DescribeCustomAvailabilityZonesResult: Probability = 1.00, Count = 1
DescribeCustomAvailabilityZones -> describeCustomAvailabilityZones: Probability = 1.00, Count = 1
DescribeCustomAvailabilityZonesRequest -> DescribeCustomAvailabilityZonesRequest: Probability = 1.00, Count = 1
Invoke<DescribeCustomAvailabilityZonesResponse> -> executeDescribeCustomAvailabilityZones: Probability = 1.00, Count = 1
tmpFreqs -> tmpFreqs: Probability = 1.00, Count = 2
int[tmpDocs.Length] -> int[tmpDocs.length]: Probability = 1.00, Count = 1
this.processors.Contains -> this.processors.contains: Probability = 1.00, Count = 1
ModifyVolumeAttributeResponse -> ModifyVolumeAttributeResult: Probability = 1.00, Count = 1
ModifyVolumeAttribute -> modifyVolumeAttribute: Probability = 1.00, Count = 1
ModifyVolumeAttributeRequest -> ModifyVolumeAttributeRequest: Probability = 1.00, Count = 1
Invoke<ModifyVolumeAttributeResponse> -> executeModifyVolumeAttribute: Probability = 1.00, Count = 1
DeleteVolumeResponse -> DeleteVolumeResult: Probability = 1.00, Count = 1
DeleteVolume -> deleteVolume: Probability = 1.00, Count = 1
Invoke<DeleteVolumeResponse> -> executeDeleteVolume: Probability = 1.00, Count = 1
HasMetaDataChanges -> hasMetaDataChanges: Probability = 1.00, Count = 1
DiffEntry.ChangeType.MODIFY -> ChangeType.MODIFY: Probability = 1.00, Count = 1
oldMode -> oldMode: Probability = 1.00, Count = 1
NewField -> newField: Probability = 1.00, Count = 1
JapaneseReadingFormFilter -> JapaneseReadingFormFilter: Probability = 1.00, Count = 2
sep -> sep: Probability = 0.50, Count = 4
sep -> ref.indexOf: Probability = 0.12, Count = 1
sep -> ref.substring: Probability = 0.25, Count = 2
sep -> a.getRow: Probability = 0.12, Count = 1
ModifySelfservicePermissionsResponse -> ModifySelfservicePermissionsResult: Probability = 1.00, Count = 1
ModifySelfservicePermissions -> modifySelfservicePermissions: Probability = 1.00, Count = 1
ModifySelfservicePermissionsRequest -> ModifySelfservicePermissionsRequest: Probability = 1.00, Count = 1
Invoke<ModifySelfservicePermissionsResponse> -> executeModifySelfservicePermissions: Probability = 1.00, Count = 1
GetTokenType -> getTokenType: Probability = 1.00, Count = 1
thisLong -> thisLong,: Probability = 0.25, Count = 1
thisLong -> thisLong: Probability = 0.75, Count = 3
otherLong -> otherLong: Probability = 1.00, Count = 4
ApproveSkillResponse -> ApproveSkillResult: Probability = 1.00, Count = 1
ApproveSkill -> approveSkill: Probability = 1.00, Count = 1
ApproveSkillRequest -> ApproveSkillRequest: Probability = 1.00, Count = 1
Invoke<ApproveSkillResponse> -> executeApproveSkill: Probability = 1.00, Count = 1
requiredContinuousSize -> requiredContinuousSize: Probability = 1.00, Count = 2
GetApiKeysResponse -> GetApiKeysResult: Probability = 1.00, Count = 1
GetApiKeys -> getApiKeys: Probability = 1.00, Count = 1
GetApiKeysRequest -> GetApiKeysRequest: Probability = 1.00, Count = 1
Invoke<GetApiKeysResponse> -> executeGetApiKeys: Probability = 1.00, Count = 1
o._rowIndex -> o._rowIndex: Probability = 1.00, Count = 1
o._columnIndex -> o._columnIndex: Probability = 1.00, Count = 1
c.alt -> c.alt: Probability = 1.00, Count = 1
c.reachesIntoOuterContext -> c.reachesIntoOuterContext: Probability = 1.00, Count = 1
UpdateNamesAfterCellShift -> updateNamesAfterCellShift: Probability = 1.00, Count = 1
shifter -> shifter: Probability = 1.00, Count = 1
nr.NameDefinition -> nr.getNameDefinition: Probability = 0.50, Count = 1
nr.NameDefinition -> nr.setNameDefinition: Probability = 0.50, Count = 1
ListReviewPolicyResultsForHITResponse -> ListReviewPolicyResultsForHITResult: Probability = 1.00, Count = 1
ListReviewPolicyResultsForHIT -> listReviewPolicyResultsForHIT: Probability = 1.00, Count = 1
ListReviewPolicyResultsForHITRequest -> ListReviewPolicyResultsForHITRequest: Probability = 1.00, Count = 1
Invoke<ListReviewPolicyResultsForHITResponse> -> executeListReviewPolicyResultsForHIT: Probability = 1.00, Count = 1
GetExportResponse -> GetExportResult: Probability = 1.00, Count = 1
GetExport -> getExport: Probability = 1.00, Count = 1
GetExportRequest -> GetExportRequest: Probability = 1.00, Count = 1
Invoke<GetExportResponse> -> executeGetExport: Probability = 1.00, Count = 1
SetHyperbolicTfFactors -> setHyperbolicTfFactors: Probability = 1.00, Count = 1
deadEndConfigs -> deadEndConfigs: Probability = 1.00, Count = 2
this.startIndex -> this.startIndex: Probability = 1.00, Count = 1
this.deadEndConfigs -> this.deadEndConfigs: Probability = 1.00, Count = 1
CreateCompilationJobResponse -> CreateCompilationJobResult: Probability = 1.00, Count = 1
CreateCompilationJob -> createCompilationJob: Probability = 1.00, Count = 1
CreateCompilationJobRequest -> CreateCompilationJobRequest: Probability = 1.00, Count = 1
Invoke<CreateCompilationJobResponse> -> executeCreateCompilationJob: Probability = 1.00, Count = 1
cb -> cb: Probability = 1.00, Count = 4
StopMonitoringScheduleResponse -> StopMonitoringScheduleResult: Probability = 1.00, Count = 1
StopMonitoringSchedule -> stopMonitoringSchedule: Probability = 1.00, Count = 1
StopMonitoringScheduleRequest -> StopMonitoringScheduleRequest: Probability = 1.00, Count = 1
Invoke<StopMonitoringScheduleResponse> -> executeStopMonitoringSchedule: Probability = 1.00, Count = 1
field_5_dbcells.Get -> field_5_dbcells.get: Probability = 1.00, Count = 1
probs -> probs: Probability = 0.75, Count = 3
probs -> chunker.probs: Probability = 0.25, Count = 1
chunks -> chunks: Probability = 0.67, Count = 2
chunks -> chunker.chunk: Probability = 0.33, Count = 1
navigableKeySet -> navigableKeySet: Probability = 1.00, Count = 1
V>.BoundedMap.BoundedKeySet -> BoundedKeySet: Probability = 1.00, Count = 2
this._keySet -> keySet: Probability = 1.00, Count = 2
RemoteRefUpdate -> RemoteRefUpdate: Probability = 1.00, Count = 1
GetRemoteUpdate -> getRemoteUpdate: Probability = 1.00, Count = 1
refName -> refName: Probability = 1.00, Count = 2
remoteUpdates.Get -> remoteUpdates.get: Probability = 1.00, Count = 1
TerminateInstancesRequest -> TerminateInstancesRequest: Probability = 1.00, Count = 1
CreateDataRepositoryTaskResponse -> CreateDataRepositoryTaskResult: Probability = 1.00, Count = 1
CreateDataRepositoryTask -> createDataRepositoryTask: Probability = 1.00, Count = 1
CreateDataRepositoryTaskRequest -> CreateDataRepositoryTaskRequest: Probability = 1.00, Count = 1
Invoke<CreateDataRepositoryTaskResponse> -> executeCreateDataRepositoryTask: Probability = 1.00, Count = 1
UndeprecateActivityType -> undeprecateActivityType: Probability = 1.00, Count = 1
UndeprecateActivityTypeRequest -> UndeprecateActivityTypeRequest: Probability = 1.00, Count = 1
UndeprecateActivityTypeResponseUnmarshaller.Instance -> executeUndeprecateActivityType: Probability = 1.00, Count = 1
EndRecord -> copy: Probability = 1.00, Count = 1
ListLabelingJobsResponse -> ListLabelingJobsResult: Probability = 1.00, Count = 1
ListLabelingJobs -> listLabelingJobs: Probability = 1.00, Count = 1
ListLabelingJobsRequest -> ListLabelingJobsRequest: Probability = 1.00, Count = 1
Invoke<ListLabelingJobsResponse> -> executeListLabelingJobs: Probability = 1.00, Count = 1
SetTag -> setTag: Probability = 1.00, Count = 1
shortName -> shortName: Probability = 1.00, Count = 2
GetNameText -> getNameText: Probability = 1.00, Count = 2
.NameText -> .getNameText: Probability = 1.00, Count = 1
CreateDBProxyResponse -> CreateDBProxyResult: Probability = 1.00, Count = 1
CreateDBProxy -> createDBProxy: Probability = 1.00, Count = 1
CreateDBProxyRequest -> CreateDBProxyRequest: Probability = 1.00, Count = 1
Invoke<CreateDBProxyResponse> -> executeCreateDBProxy: Probability = 1.00, Count = 1
LovinsStemmer -> LovinsStemmer: Probability = 1.00, Count = 1
ModifyReplicationGroupShardConfigurationResponse -> ReplicationGroup: Probability = 1.00, Count = 1
ModifyReplicationGroupShardConfiguration -> modifyReplicationGroupShardConfiguration: Probability = 1.00, Count = 1
ModifyReplicationGroupShardConfigurationRequest -> ModifyReplicationGroupShardConfigurationRequest: Probability = 1.00, Count = 1
Invoke<ModifyReplicationGroupShardConfigurationResponse> -> executeModifyReplicationGroupShardConfiguration: Probability = 1.00, Count = 1
DeleteFacesResponse -> DeleteFacesResult: Probability = 1.00, Count = 1
DeleteFaces -> deleteFaces: Probability = 1.00, Count = 1
DeleteFacesRequest -> DeleteFacesRequest: Probability = 1.00, Count = 1
Invoke<DeleteFacesResponse> -> executeDeleteFaces: Probability = 1.00, Count = 1
SSTSerializer -> SSTSerializer: Probability = 1.00, Count = 1
strings, -> IntMapper<UnicodeString>: Probability = 0.50, Count = 1
strings, -> strings,: Probability = 0.50, Count = 1
numStrings, -> numStrings,: Probability = 1.00, Count = 1
numUniqueStrings -> numUniqueStrings: Probability = 0.33, Count = 2
numUniqueStrings -> this.strings: Probability = 0.17, Count = 1
numUniqueStrings -> strings: Probability = 0.17, Count = 1
numUniqueStrings -> numStrings: Probability = 0.17, Count = 1
numUniqueStrings -> infoRecs: Probability = 0.17, Count = 1
int[infoRecs] -> this.bucketAbsoluteOffsets: Probability = 0.25, Count = 1
int[infoRecs] -> int[infoRecs]: Probability = 0.50, Count = 2
int[infoRecs] -> this.bucketRelativeOffsets: Probability = 0.25, Count = 1
reason, -> reason,: Probability = 1.00, Count = 1
"AssociationFacetField -> "AssociationFacetField: Probability = 1.00, Count = 1
bytes=" -> bytes=": Probability = 1.00, Count = 1
Assoc -> assoc: Probability = 1.00, Count = 1
GetSumSingle -> getSumSingle: Probability = 1.00, Count = 1
optiSum.Set -> optiSum.set: Probability = 1.00, Count = 1
GetModelsResponse -> GetModelsResult: Probability = 1.00, Count = 1
GetModels -> getModels: Probability = 1.00, Count = 1
GetModelsRequest -> GetModelsRequest: Probability = 1.00, Count = 1
Invoke<GetModelsResponse> -> executeGetModels: Probability = 1.00, Count = 1
RefStorage.LOOSE -> Storage.LOOSE: Probability = 1.00, Count = 1
ForwardBytesReader -> ForwardBytesReader: Probability = 1.00, Count = 1
java.nio.ReadOnlyShortArrayBuffer.copy -> ReadOnlyShortArrayBuffer.copy: Probability = 1.00, Count = 1
ListFiltersResponse -> ListFiltersResult: Probability = 1.00, Count = 1
ListFilters -> listFilters: Probability = 1.00, Count = 1
ListFiltersRequest -> ListFiltersRequest: Probability = 1.00, Count = 1
Invoke<ListFiltersResponse> -> executeListFilters: Probability = 1.00, Count = 1
this._string -> _string: Probability = 1.00, Count = 1
UpdateDomainNameserversResponse -> UpdateDomainNameserversResult: Probability = 1.00, Count = 1
UpdateDomainNameservers -> updateDomainNameservers: Probability = 1.00, Count = 1
UpdateDomainNameserversRequest -> UpdateDomainNameserversRequest: Probability = 1.00, Count = 1
Invoke<UpdateDomainNameserversResponse> -> executeUpdateDomainNameservers: Probability = 1.00, Count = 1
ListWorkersWithQualificationTypeResponse -> ListWorkersWithQualificationTypeResult: Probability = 1.00, Count = 1
ListWorkersWithQualificationType -> listWorkersWithQualificationType: Probability = 1.00, Count = 1
ListWorkersWithQualificationTypeRequest -> ListWorkersWithQualificationTypeRequest: Probability = 1.00, Count = 1
Invoke<ListWorkersWithQualificationTypeResponse> -> executeListWorkersWithQualificationType: Probability = 1.00, Count = 1
List<ParameterNameValue> -> java.util.List<ParameterNameValue>: Probability = 1.00, Count = 2
parameterNameValues -> parameterNameValues: Probability = 1.00, Count = 4
_parameterNameValues -> setParameterNameValues: Probability = 1.00, Count = 2
defaultField, -> defaultField,: Probability = 1.00, Count = 1
UpdateFileSystemResponse -> UpdateFileSystemResult: Probability = 1.00, Count = 1
UpdateFileSystem -> updateFileSystem: Probability = 1.00, Count = 1
UpdateFileSystemRequest -> UpdateFileSystemRequest: Probability = 1.00, Count = 1
Invoke<UpdateFileSystemResponse> -> executeUpdateFileSystem: Probability = 1.00, Count = 1
PutGatewayResponseResponse -> PutGatewayResponseResult: Probability = 1.00, Count = 1
PutGatewayResponse -> putGatewayResponse: Probability = 1.00, Count = 1
PutGatewayResponseRequest -> PutGatewayResponseRequest: Probability = 1.00, Count = 1
Invoke<PutGatewayResponseResponse> -> executePutGatewayResponse: Probability = 1.00, Count = 1
Term[] -> Term[]: Probability = 1.00, Count = 1
IList<Term> -> List<Term>: Probability = 0.50, Count = 1
IList<Term> -> allStopWords: Probability = 0.50, Count = 1
allStopWords.ToArray -> Term[allStopWords.size: Probability = 1.00, Count = 1
IsUpdate -> isUpdate: Probability = 1.00, Count = 1
InternalSheet -> InternalSheet: Probability = 1.00, Count = 2
CreateSheet -> createSheet: Probability = 1.00, Count = 1
DisassociateVpcCidrBlockResponse -> DisassociateVpcCidrBlockResult: Probability = 1.00, Count = 1
DisassociateVpcCidrBlock -> disassociateVpcCidrBlock: Probability = 1.00, Count = 1
DisassociateVpcCidrBlockRequest -> DisassociateVpcCidrBlockRequest: Probability = 1.00, Count = 1
Invoke<DisassociateVpcCidrBlockResponse> -> executeDisassociateVpcCidrBlock: Probability = 1.00, Count = 1
msec -> "different: Probability = 0.33, Count = 2
msec -> by-time: Probability = 0.33, Count = 2
msec -> msec: Probability = 0.33, Count = 2
StartStreamProcessorResponse -> StartStreamProcessorResult: Probability = 1.00, Count = 1
StartStreamProcessor -> startStreamProcessor: Probability = 1.00, Count = 1
StartStreamProcessorRequest -> StartStreamProcessorRequest: Probability = 1.00, Count = 1
Invoke<StartStreamProcessorResponse> -> executeStartStreamProcessor: Probability = 1.00, Count = 1
hadoopJarStep -> hadoopJarStep: Probability = 1.00, Count = 2
_hadoopJarStep -> setHadoopJarStep: Probability = 1.00, Count = 1
GetIdentityPoliciesResponse -> GetIdentityPoliciesResult: Probability = 1.00, Count = 1
GetIdentityPolicies -> getIdentityPolicies: Probability = 1.00, Count = 1
GetIdentityPoliciesRequest -> GetIdentityPoliciesRequest: Probability = 1.00, Count = 1
Invoke<GetIdentityPoliciesResponse> -> executeGetIdentityPolicies: Probability = 1.00, Count = 1
ListAccountsResponse -> ListAccountsResult: Probability = 1.00, Count = 1
ListAccounts -> listAccounts: Probability = 1.00, Count = 1
ListAccountsRequest -> ListAccountsRequest: Probability = 1.00, Count = 1
Invoke<ListAccountsResponse> -> executeListAccounts: Probability = 1.00, Count = 1
GetCompressionLevel -> getCompressionLevel: Probability = 1.00, Count = 1
read_1 -> read: Probability = 0.86, Count = 6
read_1 -> fillBuf: Probability = 0.14, Count = 1
formulaShifter, -> formulaShifter,: Probability = 1.00, Count = 2
_valuesAgg.UpdateFormulasAfterRowShift -> _valuesAgg.updateFormulasAfterRowShift: Probability = 1.00, Count = 1
needsExclamation -> needsExclamation: Probability = 1.00, Count = 4
isFinished -> isFinished: Probability = 1.00, Count = 1
local, -> local,: Probability = 0.57, Count = 4
local, -> remoteName: Probability = 0.14, Count = 1
local, -> tn: Probability = 0.29, Count = 2
DeleteAliasResponse -> DeleteAliasResult: Probability = 1.00, Count = 1
DeleteAlias -> deleteAlias: Probability = 1.00, Count = 1
DeleteAliasRequest -> DeleteAliasRequest: Probability = 1.00, Count = 1
Invoke<DeleteAliasResponse> -> executeDeleteAlias: Probability = 1.00, Count = 1
CreateApplicationVersionRequest -> CreateApplicationVersionRequest: Probability = 1.00, Count = 1
DescribeSecurityConfigurationResponse -> DescribeSecurityConfigurationResult: Probability = 1.00, Count = 1
DescribeSecurityConfiguration -> describeSecurityConfiguration: Probability = 1.00, Count = 1
DescribeSecurityConfigurationRequest -> DescribeSecurityConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DescribeSecurityConfigurationResponse> -> executeDescribeSecurityConfiguration: Probability = 1.00, Count = 1
insertElementAt -> insertElementAt: Probability = 1.00, Count = 1
GetDownloadUrlForLayerResponse -> GetDownloadUrlForLayerResult: Probability = 1.00, Count = 1
GetDownloadUrlForLayer -> getDownloadUrlForLayer: Probability = 1.00, Count = 1
GetDownloadUrlForLayerRequest -> GetDownloadUrlForLayerRequest: Probability = 1.00, Count = 1
Invoke<GetDownloadUrlForLayerResponse> -> executeGetDownloadUrlForLayer: Probability = 1.00, Count = 1
HorizontalAlignment -> setHorizontalAlignment: Probability = 1.00, Count = 1
HorizontalTextAlignment.Left -> HORIZONTAL_ALIGNMENT_LEFT: Probability = 1.00, Count = 1
VerticalAlignment -> setVerticalAlignment: Probability = 1.00, Count = 1
VerticalTextAlignment.Top -> VERTICAL_ALIGNMENT_TOP: Probability = 1.00, Count = 1
this.String -> setString: Probability = 1.00, Count = 1
GetRegionRequest -> GetRegionRequest: Probability = 1.00, Count = 1
"GetRegion", -> "GetRegion",: Probability = 1.00, Count = 1
"/regions" -> "/regions": Probability = 1.00, Count = 1
ListObjectChildrenResponse -> ListObjectChildrenResult: Probability = 1.00, Count = 1
ListObjectChildren -> listObjectChildren: Probability = 1.00, Count = 1
ListObjectChildrenRequest -> ListObjectChildrenRequest: Probability = 1.00, Count = 1
Invoke<ListObjectChildrenResponse> -> executeListObjectChildren: Probability = 1.00, Count = 1
GetIdResponse -> GetIdResult: Probability = 1.00, Count = 1
GetIdRequest -> GetIdRequest: Probability = 1.00, Count = 1
Invoke<GetIdResponse> -> executeGetId: Probability = 1.00, Count = 1
GetPassphrase -> getPassphrase: Probability = 1.00, Count = 1
GetAllRefs -> getAllRefs: Probability = 1.00, Count = 1
NGit.RefDatabase.ALL -> RefDatabase.ALL: Probability = 1.00, Count = 1
hasMoreElements -> hasMoreElements: Probability = 1.00, Count = 1
NumDataNodes -> numDataNodes: Probability = 1.00, Count = 2
GetRelationalDatabaseEventsResponse -> GetRelationalDatabaseEventsResult: Probability = 1.00, Count = 1
GetRelationalDatabaseEvents -> getRelationalDatabaseEvents: Probability = 1.00, Count = 1
GetRelationalDatabaseEventsRequest -> GetRelationalDatabaseEventsRequest: Probability = 1.00, Count = 1
Invoke<GetRelationalDatabaseEventsResponse> -> executeGetRelationalDatabaseEvents: Probability = 1.00, Count = 1
y2, -> x1,y1,x2,y2,0: Probability = 1.00, Count = 1
UpdateUserSecurityProfilesResponse -> UpdateUserSecurityProfilesResult: Probability = 1.00, Count = 1
UpdateUserSecurityProfiles -> updateUserSecurityProfiles: Probability = 1.00, Count = 1
UpdateUserSecurityProfilesRequest -> UpdateUserSecurityProfilesRequest: Probability = 1.00, Count = 1
Invoke<UpdateUserSecurityProfilesResponse> -> executeUpdateUserSecurityProfiles: Probability = 1.00, Count = 1
"Action: -> "Action:: Probability = 1.00, Count = 1
this.action -> this.action: Probability = 1.00, Count = 1
SetPrecedenceStartState -> setPrecedenceStartState: Probability = 1.00, Count = 1
startState -> startState: Probability = 1.00, Count = 2
EditPhotosRequest -> EditPhotosRequest: Probability = 1.00, Count = 1
"EditPhotos", -> "EditPhotos",: Probability = 1.00, Count = 1
DeleteFlowDefinitionResponse -> DeleteFlowDefinitionResult: Probability = 1.00, Count = 1
DeleteFlowDefinition -> deleteFlowDefinition: Probability = 1.00, Count = 1
DeleteFlowDefinitionRequest -> DeleteFlowDefinitionRequest: Probability = 1.00, Count = 1
Invoke<DeleteFlowDefinitionResponse> -> executeDeleteFlowDefinition: Probability = 1.00, Count = 1
SetLastFailedRefreshTime -> setLastFailedRefreshTime: Probability = 1.00, Count = 1
GetTemplateSummaryResponse -> GetTemplateSummaryResult: Probability = 1.00, Count = 1
GetTemplateSummary -> getTemplateSummary: Probability = 1.00, Count = 1
GetTemplateSummaryRequest -> GetTemplateSummaryRequest: Probability = 1.00, Count = 1
Invoke<GetTemplateSummaryResponse> -> executeGetTemplateSummary: Probability = 1.00, Count = 1
RevokeSnapshotAccessResponse -> Snapshot: Probability = 1.00, Count = 1
RevokeSnapshotAccess -> revokeSnapshotAccess: Probability = 1.00, Count = 1
RevokeSnapshotAccessRequest -> RevokeSnapshotAccessRequest: Probability = 1.00, Count = 1
Invoke<RevokeSnapshotAccessResponse> -> executeRevokeSnapshotAccess: Probability = 1.00, Count = 1
field_7_comment_text, -> field_7_comment_text,: Probability = 1.00, Count = 2
StartProjectVersionResponse -> StartProjectVersionResult: Probability = 1.00, Count = 1
StartProjectVersion -> startProjectVersion: Probability = 1.00, Count = 1
StartProjectVersionRequest -> StartProjectVersionRequest: Probability = 1.00, Count = 1
Invoke<StartProjectVersionResponse> -> executeStartProjectVersion: Probability = 1.00, Count = 1
MoPenDeleteGroupMemberRequest -> MoPenDeleteGroupMemberRequest: Probability = 1.00, Count = 1
"MoPenDeleteGroupMember", -> "MoPenDeleteGroupMember",: Probability = 1.00, Count = 1
SetSourcePrefix -> setSourcePrefix: Probability = 1.00, Count = 1
sourcePrefix -> sourcePrefix: Probability = 1.00, Count = 2
this.sourcePrefix -> this.sourcePrefix: Probability = 1.00, Count = 1
CreateFlowLogsResponse -> CreateFlowLogsResult: Probability = 1.00, Count = 1
CreateFlowLogs -> createFlowLogs: Probability = 1.00, Count = 1
CreateFlowLogsRequest -> CreateFlowLogsRequest: Probability = 1.00, Count = 1
Invoke<CreateFlowLogsResponse> -> executeCreateFlowLogs: Probability = 1.00, Count = 1
extendedDataSize -> extendedDataSize: Probability = 1.00, Count = 4
numberOfRichTextRuns -> numberOfRichTextRuns: Probability = 1.00, Count = 3
AppendArgs -> appendArgs: Probability = 1.00, Count = 2
DetectStackDriftResponse -> DetectStackDriftResult: Probability = 1.00, Count = 1
DetectStackDrift -> detectStackDrift: Probability = 1.00, Count = 1
DetectStackDriftRequest -> DetectStackDriftRequest: Probability = 1.00, Count = 1
Invoke<DetectStackDriftResponse> -> executeDetectStackDrift: Probability = 1.00, Count = 1
RenderUiTemplateResponse -> RenderUiTemplateResult: Probability = 1.00, Count = 1
RenderUiTemplate -> renderUiTemplate: Probability = 1.00, Count = 1
RenderUiTemplateRequest -> RenderUiTemplateRequest: Probability = 1.00, Count = 1
Invoke<RenderUiTemplateResponse> -> executeRenderUiTemplate: Probability = 1.00, Count = 1
asLongBuffer -> asLongBuffer: Probability = 1.00, Count = 1
java.nio.LongToByteBufferAdapter.asLongBuffer -> LongToByteBufferAdapter.asLongBuffer: Probability = 1.00, Count = 1
DescribeLimitsResponse -> DescribeLimitsResult: Probability = 1.00, Count = 1
DescribeLimits -> describeLimits: Probability = 1.00, Count = 1
DescribeLimitsRequest -> DescribeLimitsRequest: Probability = 1.00, Count = 1
Invoke<DescribeLimitsResponse> -> executeDescribeLimits: Probability = 1.00, Count = 1
DescribeAssessmentTargetsResponse -> DescribeAssessmentTargetsResult: Probability = 1.00, Count = 1
DescribeAssessmentTargets -> describeAssessmentTargets: Probability = 1.00, Count = 1
DescribeAssessmentTargetsRequest -> DescribeAssessmentTargetsRequest: Probability = 1.00, Count = 1
Invoke<DescribeAssessmentTargetsResponse> -> executeDescribeAssessmentTargets: Probability = 1.00, Count = 1
DeleteClientVpnRouteResponse -> DeleteClientVpnRouteResult: Probability = 1.00, Count = 1
DeleteClientVpnRoute -> deleteClientVpnRoute: Probability = 1.00, Count = 1
DeleteClientVpnRouteRequest -> DeleteClientVpnRouteRequest: Probability = 1.00, Count = 1
Invoke<DeleteClientVpnRouteResponse> -> executeDeleteClientVpnRoute: Probability = 1.00, Count = 1
upstream.Name -> .couldNotReadObjectWhileParsingCommit,upstream.name: Probability = 1.00, Count = 1
new[] -> Collections.singleton: Probability = 1.00, Count = 1
scorer, -> in,: Probability = 1.00, Count = 1
"CACHED" -> "CACHED": Probability = 1.00, Count = 1
BlankRecord[] -> BlankRecord[]: Probability = 0.40, Count = 2
BlankRecord[] -> convertBlankRecords: Probability = 0.20, Count = 1
BlankRecord[] -> mbk: Probability = 0.20, Count = 1
BlankRecord[] -> BlankRecord[mbk.getNumColumns: Probability = 0.20, Count = 1
mulRecs -> mulRecs: Probability = 1.00, Count = 4
BlankRecord -> BlankRecord: Probability = 0.67, Count = 2
BlankRecord -> br.setColumn: Probability = 0.33, Count = 1
mulRecs[k] -> mulRecs[k]: Probability = 1.00, Count = 2
DeregisterDBProxyTargetsResponse -> DeregisterDBProxyTargetsResult: Probability = 1.00, Count = 1
DeregisterDBProxyTargets -> deregisterDBProxyTargets: Probability = 1.00, Count = 1
DeregisterDBProxyTargetsRequest -> DeregisterDBProxyTargetsRequest: Probability = 1.00, Count = 1
Invoke<DeregisterDBProxyTargetsResponse> -> executeDeregisterDBProxyTargets: Probability = 1.00, Count = 1
SummaryInformation -> SummaryInformation: Probability = 1.00, Count = 1
!IsSummaryInformation -> !isSummaryInformation: Probability = 1.00, Count = 1
SetCredentialsProvider -> setCredentialsProvider: Probability = 1.00, Count = 1
GetProperty -> getProperty: Probability = 1.00, Count = 1
wasNull -> wasNull: Probability = 1.00, Count = 1
properties.Length -> wasNull: Probability = 1.00, Count = 1
BufferedOutputStream -> BufferedOutputStream: Probability = 1.00, Count = 1
AuthorizeDBSecurityGroupIngressRequest -> AuthorizeDBSecurityGroupIngressRequest: Probability = 1.00, Count = 2
ArrayDataSource -> ArrayDataSource: Probability = 1.00, Count = 1
this.elements -> this.elements: Probability = 0.50, Count = 1
this.elements -> elements.clone: Probability = 0.50, Count = 1
CreateDeploymentResponse -> CreateDeploymentResult: Probability = 1.00, Count = 1
CreateDeployment -> createDeployment: Probability = 1.00, Count = 1
CreateDeploymentRequest -> CreateDeploymentRequest: Probability = 1.00, Count = 1
Invoke<CreateDeploymentResponse> -> executeCreateDeployment: Probability = 1.00, Count = 1
libcore.io.Memory.peekInt -> Memory.peekInt: Probability = 1.00, Count = 1
DeleteTransitGatewayRouteResponse -> DeleteTransitGatewayRouteResult: Probability = 1.00, Count = 1
DeleteTransitGatewayRoute -> deleteTransitGatewayRoute: Probability = 1.00, Count = 1
DeleteTransitGatewayRouteRequest -> DeleteTransitGatewayRouteRequest: Probability = 1.00, Count = 1
Invoke<DeleteTransitGatewayRouteResponse> -> executeDeleteTransitGatewayRoute: Probability = 1.00, Count = 1
@string[++offset] -> ++offset: Probability = 1.00, Count = 1
CherryPickResult -> CherryPickResult: Probability = 1.00, Count = 1
newHead, -> newHead,: Probability = 1.00, Count = 1
this.status -> this.status: Probability = 1.00, Count = 1
CherryPickResult.CherryPickStatus.OK -> CherryPickStatus.OK: Probability = 1.00, Count = 1
this.newHead -> this.newHead: Probability = 1.00, Count = 1
this.cherryPickedRefs -> this.cherryPickedRefs: Probability = 1.00, Count = 1
this.failingPaths -> this.failingPaths: Probability = 1.00, Count = 1
scale, -> scale,: Probability = 1.00, Count = 1
UpdateInstanceRequest -> UpdateInstanceRequest: Probability = 1.00, Count = 1
"UpdateInstance", -> "UpdateInstance",: Probability = 1.00, Count = 1
baos -> baos: Probability = 1.00, Count = 2
baos.ToArray -> baos.toByteArray: Probability = 1.00, Count = 1
GetFieldLevelEncryptionProfileResponse -> GetFieldLevelEncryptionProfileResult: Probability = 1.00, Count = 1
GetFieldLevelEncryptionProfile -> getFieldLevelEncryptionProfile: Probability = 1.00, Count = 1
GetFieldLevelEncryptionProfileRequest -> GetFieldLevelEncryptionProfileRequest: Probability = 1.00, Count = 1
Invoke<GetFieldLevelEncryptionProfileResponse> -> executeGetFieldLevelEncryptionProfile: Probability = 1.00, Count = 1
field2val -> field2val: Probability = 0.50, Count = 2
field2val -> TAG_ADD_IN_FUNCTIONS: Probability = 0.25, Count = 1
field2val -> TAG_INTERNAL_REFERENCES: Probability = 0.25, Count = 1
BitsSlice -> BitsSlice: Probability = 1.00, Count = 1
slice.Start -> slice.start: Probability = 1.00, Count = 1
names.RemoveAt -> getNameIndex: Probability = 1.00, Count = 1
ListConfigurationRevisionsResponse -> ListConfigurationRevisionsResult: Probability = 1.00, Count = 1
ListConfigurationRevisions -> listConfigurationRevisions: Probability = 1.00, Count = 1
ListConfigurationRevisionsRequest -> ListConfigurationRevisionsRequest: Probability = 1.00, Count = 1
Invoke<ListConfigurationRevisionsResponse> -> executeListConfigurationRevisions: Probability = 1.00, Count = 1
ObjectStream.SmallStream -> ObjectStream.SmallStream: Probability = 1.00, Count = 1
directory.Delete -> directory.delete: Probability = 1.00, Count = 1
SetMaxObjectSizeLimit -> setMaxObjectSizeLimit: Probability = 1.00, Count = 1
maxObjectSizeLimit -> maxObjectSizeLimit: Probability = 1.00, Count = 1
Invoke<DescribeEventSubscriptionsResponse> -> executeDescribeEventSubscriptions: Probability = 1.00, Count = 1
formulaSize -> formulaSize: Probability = 1.00, Count = 3
ArrayList<int> -> IntegerList: Probability = 1.00, Count = 3
ToIntegerList -> toIntegerList: Probability = 1.00, Count = 2
PullNext -> pullNext: Probability = 1.00, Count = 1
lastEndOffset -> endOffsets[upto]: Probability = 1.00, Count = 1
ListAccountSettingsResponse -> ListAccountSettingsResult: Probability = 1.00, Count = 1
ListAccountSettings -> listAccountSettings: Probability = 1.00, Count = 1
ListAccountSettingsRequest -> ListAccountSettingsRequest: Probability = 1.00, Count = 1
Invoke<ListAccountSettingsResponse> -> executeListAccountSettings: Probability = 1.00, Count = 1
findNextImpl -> findNextImpl: Probability = 1.00, Count = 1
DescribeLocalGatewaysResponse -> DescribeLocalGatewaysResult: Probability = 1.00, Count = 1
DescribeLocalGateways -> describeLocalGateways: Probability = 1.00, Count = 1
DescribeLocalGatewaysRequest -> DescribeLocalGatewaysRequest: Probability = 1.00, Count = 1
Invoke<DescribeLocalGatewaysResponse> -> executeDescribeLocalGateways: Probability = 1.00, Count = 1
RegisterCrossAccountAccessRoleResponse -> RegisterCrossAccountAccessRoleResult: Probability = 1.00, Count = 1
RegisterCrossAccountAccessRole -> registerCrossAccountAccessRole: Probability = 1.00, Count = 1
RegisterCrossAccountAccessRoleRequest -> RegisterCrossAccountAccessRoleRequest: Probability = 1.00, Count = 1
Invoke<RegisterCrossAccountAccessRoleResponse> -> executeRegisterCrossAccountAccessRole: Probability = 1.00, Count = 1
DescribeFileSystemsResponse -> DescribeFileSystemsResult: Probability = 1.00, Count = 1
DescribeFileSystems -> describeFileSystems: Probability = 1.00, Count = 1
DescribeFileSystemsRequest -> DescribeFileSystemsRequest: Probability = 1.00, Count = 1
Invoke<DescribeFileSystemsResponse> -> executeDescribeFileSystems: Probability = 1.00, Count = 1
ReverseStringFilterFactory -> ReverseStringFilterFactory: Probability = 1.00, Count = 1
GetQualificationTypeResponse -> GetQualificationTypeResult: Probability = 1.00, Count = 1
GetQualificationType -> getQualificationType: Probability = 1.00, Count = 1
GetQualificationTypeRequest -> GetQualificationTypeRequest: Probability = 1.00, Count = 1
Invoke<GetQualificationTypeResponse> -> executeGetQualificationType: Probability = 1.00, Count = 1
_externalNameRecords[definedNameIndex].Text -> _externalNameRecords[definedNameIndex].getText: Probability = 1.00, Count = 1
PlotWalk -> PlotWalk: Probability = 1.00, Count = 1
RevSort.TOPO, -> additionalRefMap: Probability = 1.00, Count = 1
repo.GetAllRefsByPeeledObjectId -> repository: Probability = 1.00, Count = 1
SubscribeToDatasetResponse -> SubscribeToDatasetResult: Probability = 1.00, Count = 1
SubscribeToDataset -> subscribeToDataset: Probability = 1.00, Count = 1
SubscribeToDatasetRequest -> SubscribeToDatasetRequest: Probability = 1.00, Count = 1
Invoke<SubscribeToDatasetResponse> -> executeSubscribeToDataset: Probability = 1.00, Count = 1
subString, -> subString,: Probability = 1.00, Count = 2
base.indexOf -> super.indexOf: Probability = 1.00, Count = 1
FormatError.Severity -> Severity: Probability = 1.00, Count = 1
GetSeverity -> getSeverity: Probability = 1.00, Count = 2
severity -> severity: Probability = 1.00, Count = 1
RomanianStemmer -> RomanianStemmer: Probability = 1.00, Count = 1
AbortMultipartUploadResponse -> AbortMultipartUploadResult: Probability = 1.00, Count = 1
AbortMultipartUpload -> abortMultipartUpload: Probability = 1.00, Count = 1
Invoke<AbortMultipartUploadResponse> -> executeAbortMultipartUpload: Probability = 1.00, Count = 1
ReportMatch -> reportMatch: Probability = 1.00, Count = 1
ModifyVpnConnectionResponse -> ModifyVpnConnectionResult: Probability = 1.00, Count = 1
ModifyVpnConnection -> modifyVpnConnection: Probability = 1.00, Count = 1
ModifyVpnConnectionRequest -> ModifyVpnConnectionRequest: Probability = 1.00, Count = 1
Invoke<ModifyVpnConnectionResponse> -> executeModifyVpnConnection: Probability = 1.00, Count = 1
CreateVoiceConnectorGroupResponse -> CreateVoiceConnectorGroupResult: Probability = 1.00, Count = 1
CreateVoiceConnectorGroup -> createVoiceConnectorGroup: Probability = 1.00, Count = 1
CreateVoiceConnectorGroupRequest -> CreateVoiceConnectorGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateVoiceConnectorGroupResponse> -> executeCreateVoiceConnectorGroup: Probability = 1.00, Count = 1
jobParameters -> jobParameters: Probability = 1.00, Count = 2
_jobParameters -> setJobParameters: Probability = 1.00, Count = 1
java.util.regex.MatchResult -> MatchResult: Probability = 1.00, Count = 1
toMatchResult -> toMatchResult: Probability = 1.00, Count = 1
java.util.regex.MatchResultImpl -> MatchResultImpl: Probability = 1.00, Count = 1
GetInflectedFormTranslation -> getInflectedFormTranslation: Probability = 1.00, Count = 1
GetBasePathMappingResponse -> GetBasePathMappingResult: Probability = 1.00, Count = 1
GetBasePathMapping -> getBasePathMapping: Probability = 1.00, Count = 1
GetBasePathMappingRequest -> GetBasePathMappingRequest: Probability = 1.00, Count = 1
Invoke<GetBasePathMappingResponse> -> executeGetBasePathMapping: Probability = 1.00, Count = 1
this.w1 -> this.w1: Probability = 1.00, Count = 1
src.w1 -> src.w1: Probability = 1.00, Count = 1
this.w2 -> this.w2: Probability = 1.00, Count = 1
src.w2 -> src.w2: Probability = 1.00, Count = 1
this.w3 -> this.w3: Probability = 1.00, Count = 1
src.w3 -> src.w3: Probability = 1.00, Count = 1
this.w4 -> this.w4: Probability = 1.00, Count = 1
src.w4 -> src.w4: Probability = 1.00, Count = 1
this.w5 -> this.w5: Probability = 1.00, Count = 1
src.w5 -> src.w5: Probability = 1.00, Count = 1
IList<ITree> -> Tree>: Probability = 0.33, Count = 1
IList<ITree> -> getAncestors: Probability = 0.33, Count = 1
IList<ITree> -> List<Tree>: Probability = 0.33, Count = 1
t.Parent -> t.getParent: Probability = 1.00, Count = 3
ancestors -> ancestors: Probability = 1.00, Count = 2
GetUsagePlanResponse -> GetUsagePlanResult: Probability = 1.00, Count = 1
GetUsagePlan -> getUsagePlan: Probability = 1.00, Count = 1
GetUsagePlanRequest -> GetUsagePlanRequest: Probability = 1.00, Count = 1
Invoke<GetUsagePlanResponse> -> executeGetUsagePlan: Probability = 1.00, Count = 1
UpdateLoadBalancerAttributeResponse -> UpdateLoadBalancerAttributeResult: Probability = 1.00, Count = 1
UpdateLoadBalancerAttribute -> updateLoadBalancerAttribute: Probability = 1.00, Count = 1
UpdateLoadBalancerAttributeRequest -> UpdateLoadBalancerAttributeRequest: Probability = 1.00, Count = 1
Invoke<UpdateLoadBalancerAttributeResponse> -> executeUpdateLoadBalancerAttribute: Probability = 1.00, Count = 1
numGoodPoints -> isRelevant: Probability = 1.00, Count = 2
UpdateExperimentResponse -> UpdateExperimentResult: Probability = 1.00, Count = 1
UpdateExperiment -> updateExperiment: Probability = 1.00, Count = 1
UpdateExperimentRequest -> UpdateExperimentRequest: Probability = 1.00, Count = 1
Invoke<UpdateExperimentResponse> -> executeUpdateExperiment: Probability = 1.00, Count = 1
GetBulkPublishDetailsResponse -> GetBulkPublishDetailsResult: Probability = 1.00, Count = 1
GetBulkPublishDetails -> getBulkPublishDetails: Probability = 1.00, Count = 1
GetBulkPublishDetailsRequest -> GetBulkPublishDetailsRequest: Probability = 1.00, Count = 1
Invoke<GetBulkPublishDetailsResponse> -> executeGetBulkPublishDetails: Probability = 1.00, Count = 1
EvalArg -> evalArg: Probability = 1.00, Count = 3
0x9747b28c -> MurmurHash2.hash: Probability = 0.50, Count = 1
0x9747b28c -> 0x9747b28c,: Probability = 0.50, Count = 1
encodedData, -> encodedData,: Probability = 1.00, Count = 2
encodedTokenLen -> encodedTokenLen: Probability = 0.67, Count = 2
encodedTokenLen -> Ptg.getEncodedSizeWithoutArrayData: Probability = 0.33, Count = 1
ThreadSafeProgressMonitor -> ThreadSafeProgressMonitor: Probability = 1.00, Count = 1
ReentrantLock -> ReentrantLock: Probability = 1.00, Count = 1
AtomicInteger -> this.workers: Probability = 0.20, Count = 1
AtomicInteger -> AtomicInteger: Probability = 0.40, Count = 2
AtomicInteger -> this.pendingUpdates: Probability = 0.20, Count = 1
AtomicInteger -> this.process: Probability = 0.20, Count = 1
Sharpen.Extensions.CreateSemaphore -> Semaphore: Probability = 1.00, Count = 1
SendMessageBatchRequestEntry -> SendMessageBatchRequestEntry: Probability = 1.00, Count = 1
DescribeAddressResponse -> DescribeAddressResult: Probability = 1.00, Count = 1
DescribeAddress -> describeAddress: Probability = 1.00, Count = 1
DescribeAddressRequest -> DescribeAddressRequest: Probability = 1.00, Count = 1
Invoke<DescribeAddressResponse> -> executeDescribeAddress: Probability = 1.00, Count = 1
GetEventRequest -> GetEventRequest: Probability = 1.00, Count = 1
"GetEvent", -> "GetEvent",: Probability = 1.00, Count = 1
DescribeRuleResponse -> DescribeRuleResult: Probability = 1.00, Count = 1
DescribeRule -> describeRule: Probability = 1.00, Count = 1
DescribeRuleRequest -> DescribeRuleRequest: Probability = 1.00, Count = 1
Invoke<DescribeRuleResponse> -> executeDescribeRule: Probability = 1.00, Count = 1
JapaneseIterationMarkCharFilterFactory -> JapaneseIterationMarkCharFilterFactory: Probability = 1.00, Count = 1
normalizeKanji -> normalizeKanji: Probability = 1.00, Count = 1
NORMALIZE_KANA_PARAM, -> NORMALIZE_KANA_PARAM,: Probability = 1.00, Count = 1
JapaneseIterationMarkCharFilter.NORMALIZE_KANA_DEFAULT -> JapaneseIterationMarkCharFilter.NORMALIZE_KANA_DEFAULT: Probability = 1.00, Count = 1
--index -> --index: Probability = 1.00, Count = 1
LoggingConfig -> LoggingConfig: Probability = 1.00, Count = 1
bucket, -> bucket,: Probability = 1.00, Count = 1
_prefix -> setPrefix: Probability = 1.00, Count = 1
PutMetricAlarmResponse -> PutMetricAlarmResult: Probability = 1.00, Count = 1
PutMetricAlarm -> putMetricAlarm: Probability = 1.00, Count = 1
PutMetricAlarmRequest -> PutMetricAlarmRequest: Probability = 1.00, Count = 1
Invoke<PutMetricAlarmResponse> -> executePutMetricAlarm: Probability = 1.00, Count = 1
CreateExclusionsPreviewResponse -> CreateExclusionsPreviewResult: Probability = 1.00, Count = 1
CreateExclusionsPreview -> createExclusionsPreview: Probability = 1.00, Count = 1
CreateExclusionsPreviewRequest -> CreateExclusionsPreviewRequest: Probability = 1.00, Count = 1
Invoke<CreateExclusionsPreviewResponse> -> executeCreateExclusionsPreview: Probability = 1.00, Count = 1
GetRawStream -> getRawStream: Probability = 1.00, Count = 1
GetThreads -> getThreads: Probability = 1.00, Count = 1
NumberRecord[] -> NumberRecord[]: Probability = 0.50, Count = 2
NumberRecord[] -> mrk: Probability = 0.25, Count = 1
NumberRecord[] -> NumberRecord[mrk.getNumColumns: Probability = 0.25, Count = 1
IList<ReceiveCommand> -> List<ReceiveCommand>: Probability = 1.00, Count = 1
GetCommands -> getCommands: Probability = 1.00, Count = 1
UpdateVoiceConnectorResponse -> UpdateVoiceConnectorResult: Probability = 1.00, Count = 1
UpdateVoiceConnector -> updateVoiceConnector: Probability = 1.00, Count = 1
UpdateVoiceConnectorRequest -> UpdateVoiceConnectorRequest: Probability = 1.00, Count = 1
Invoke<UpdateVoiceConnectorResponse> -> executeUpdateVoiceConnector: Probability = 1.00, Count = 1
~" -> ~": Probability = 1.00, Count = 1
NextOrd -> nextOrd: Probability = 1.00, Count = 1
NO_MORE_ORDS -> ord: Probability = 1.00, Count = 2
@in.GetOrd -> NO_MORE_ORDS: Probability = 1.00, Count = 1
bookEvaluator -> bookEvaluator: Probability = 1.00, Count = 1
AuthorizeDBSecurityGroupIngressResponse -> DBSecurityGroup: Probability = 1.00, Count = 1
AuthorizeDBSecurityGroupIngress -> authorizeDBSecurityGroupIngress: Probability = 1.00, Count = 1
Invoke<AuthorizeDBSecurityGroupIngressResponse> -> executeAuthorizeDBSecurityGroupIngress: Probability = 1.00, Count = 1
GetTrafficPolicyInstanceResponse -> GetTrafficPolicyInstanceResult: Probability = 1.00, Count = 1
GetTrafficPolicyInstance -> getTrafficPolicyInstance: Probability = 1.00, Count = 1
GetTrafficPolicyInstanceRequest -> GetTrafficPolicyInstanceRequest: Probability = 1.00, Count = 1
Invoke<GetTrafficPolicyInstanceResponse> -> executeGetTrafficPolicyInstance: Probability = 1.00, Count = 1
subject, -> subject,: Probability = 1.00, Count = 1
_body -> setBody: Probability = 1.00, Count = 1
"simple-two-way-in-core" -> "simple-two-way-in-core": Probability = 1.00, Count = 1
DisableFastSnapshotRestoresResponse -> DisableFastSnapshotRestoresResult: Probability = 1.00, Count = 1
DisableFastSnapshotRestores -> disableFastSnapshotRestores: Probability = 1.00, Count = 1
DisableFastSnapshotRestoresRequest -> DisableFastSnapshotRestoresRequest: Probability = 1.00, Count = 1
Invoke<DisableFastSnapshotRestoresResponse> -> executeDisableFastSnapshotRestores: Probability = 1.00, Count = 1
CreateStreamResponse -> CreateStreamResult: Probability = 1.00, Count = 1
CreateStream -> createStream: Probability = 1.00, Count = 1
CreateStreamRequest -> CreateStreamRequest: Probability = 1.00, Count = 1
Invoke<CreateStreamResponse> -> executeCreateStream: Probability = 1.00, Count = 1
DeregisterInstanceEventNotificationAttributesResponse -> DeregisterInstanceEventNotificationAttributesResult: Probability = 1.00, Count = 1
DeregisterInstanceEventNotificationAttributes -> deregisterInstanceEventNotificationAttributes: Probability = 1.00, Count = 1
DeregisterInstanceEventNotificationAttributesRequest -> DeregisterInstanceEventNotificationAttributesRequest: Probability = 1.00, Count = 1
Invoke<DeregisterInstanceEventNotificationAttributesResponse> -> executeDeregisterInstanceEventNotificationAttributes: Probability = 1.00, Count = 1
sorting.Remove -> elsesorting.remove: Probability = 1.00, Count = 1
RevSort.NONE -> sorting.remove: Probability = 0.33, Count = 1
RevSort.NONE -> RevSort.NONE: Probability = 0.67, Count = 2
sorting.Count -> sorting.isEmpty: Probability = 1.00, Count = 1
"D" -> "D": Probability = 1.00, Count = 1
DisassociateSkillGroupFromRoomResponse -> DisassociateSkillGroupFromRoomResult: Probability = 1.00, Count = 1
DisassociateSkillGroupFromRoom -> disassociateSkillGroupFromRoom: Probability = 1.00, Count = 1
DisassociateSkillGroupFromRoomRequest -> DisassociateSkillGroupFromRoomRequest: Probability = 1.00, Count = 1
Invoke<DisassociateSkillGroupFromRoomResponse> -> executeDisassociateSkillGroupFromRoom: Probability = 1.00, Count = 1
RemoveLinksDirty -> removeLinksDirty: Probability = 1.00, Count = 1
PropertyIDMap.PID_LINKSDIRTY -> PropertyIDMap.PID_LINKSDIRTY: Probability = 1.00, Count = 1
weight.Image -> weight.image: Probability = 0.60, Count = 3
weight.Image -> BOOST_ERROR_MESSAGE: Probability = 0.40, Count = 2
q.Weight -> q.getWeight: Probability = 1.00, Count = 1
ListLogPatternSetsResponse -> ListLogPatternSetsResult: Probability = 1.00, Count = 1
ListLogPatternSets -> listLogPatternSets: Probability = 1.00, Count = 1
ListLogPatternSetsRequest -> ListLogPatternSetsRequest: Probability = 1.00, Count = 1
Invoke<ListLogPatternSetsResponse> -> executeListLogPatternSets: Probability = 1.00, Count = 1
"<field -> "<field: Probability = 1.00, Count = 1
text='" -> text='": Probability = 1.00, Count = 1
ListAssessmentTargetsResponse -> ListAssessmentTargetsResult: Probability = 1.00, Count = 1
ListAssessmentTargets -> listAssessmentTargets: Probability = 1.00, Count = 1
ListAssessmentTargetsRequest -> ListAssessmentTargetsRequest: Probability = 1.00, Count = 1
Invoke<ListAssessmentTargetsResponse> -> executeListAssessmentTargets: Probability = 1.00, Count = 1
UpdateRoomResponse -> UpdateRoomResult: Probability = 1.00, Count = 1
UpdateRoom -> updateRoom: Probability = 1.00, Count = 1
UpdateRoomRequest -> UpdateRoomRequest: Probability = 1.00, Count = 1
Invoke<UpdateRoomResponse> -> executeUpdateRoom: Probability = 1.00, Count = 1
ListLexiconsResponse -> ListLexiconsResult: Probability = 1.00, Count = 1
ListLexicons -> listLexicons: Probability = 1.00, Count = 1
ListLexiconsRequest -> ListLexiconsRequest: Probability = 1.00, Count = 1
Invoke<ListLexiconsResponse> -> executeListLexicons: Probability = 1.00, Count = 1
KpStemmer -> KpStemmer: Probability = 1.00, Count = 1
sub -> sub: Probability = 1.00, Count = 2
PackLock -> PackLock: Probability = 1.00, Count = 1
packFile, -> packFile,: Probability = 1.00, Count = 1
n.Length -> n.length: Probability = 1.00, Count = 1
CreatePublicKeyResponse -> CreatePublicKeyResult: Probability = 1.00, Count = 1
CreatePublicKey -> createPublicKey: Probability = 1.00, Count = 1
CreatePublicKeyRequest -> CreatePublicKeyRequest: Probability = 1.00, Count = 1
Invoke<CreatePublicKeyResponse> -> executeCreatePublicKey: Probability = 1.00, Count = 1
GetRefLogIdent -> getRefLogIdent: Probability = 1.00, Count = 1
GetSegmentImportJobsResponse -> GetSegmentImportJobsResult: Probability = 1.00, Count = 1
GetSegmentImportJobs -> getSegmentImportJobs: Probability = 1.00, Count = 1
GetSegmentImportJobsRequest -> GetSegmentImportJobsRequest: Probability = 1.00, Count = 1
Invoke<GetSegmentImportJobsResponse> -> executeGetSegmentImportJobs: Probability = 1.00, Count = 1
VerifyEmailAddressResponse -> VerifyEmailAddressResult: Probability = 1.00, Count = 1
VerifyEmailAddress -> verifyEmailAddress: Probability = 1.00, Count = 1
VerifyEmailAddressRequest -> VerifyEmailAddressRequest: Probability = 1.00, Count = 1
Invoke<VerifyEmailAddressResponse> -> executeVerifyEmailAddress: Probability = 1.00, Count = 1
GetTagsResponse -> GetTagsResult: Probability = 1.00, Count = 1
GetTagsRequest -> GetTagsRequest: Probability = 1.00, Count = 1
Invoke<GetTagsResponse> -> executeGetTags: Probability = 1.00, Count = 1
StandardTokenizerImpl -> StandardTokenizerImpl: Probability = 1.00, Count = 1
this.zzReader -> this.zzReader: Probability = 1.00, Count = 2
MoPenFindGroupRequest -> MoPenFindGroupRequest: Probability = 1.00, Count = 1
"MoPenFindGroup", -> "MoPenFindGroup",: Probability = 1.00, Count = 1
getLineInstance -> getLineInstance: Probability = 1.00, Count = 2
outerInstance.upto -> upto: Probability = 1.00, Count = 5
outerInstance.currentBlock -> currentBlock: Probability = 1.00, Count = 5
getArgumentClass -> getArgumentClass: Probability = 1.00, Count = 1
GetVaultAccessPolicyResponse -> GetVaultAccessPolicyResult: Probability = 1.00, Count = 1
GetVaultAccessPolicy -> getVaultAccessPolicy: Probability = 1.00, Count = 1
GetVaultAccessPolicyRequest -> GetVaultAccessPolicyRequest: Probability = 1.00, Count = 1
Invoke<GetVaultAccessPolicyResponse> -> executeGetVaultAccessPolicy: Probability = 1.00, Count = 1
GetReusableDelegationSetLimitResponse -> GetReusableDelegationSetLimitResult: Probability = 1.00, Count = 1
GetReusableDelegationSetLimit -> getReusableDelegationSetLimit: Probability = 1.00, Count = 1
GetReusableDelegationSetLimitRequest -> GetReusableDelegationSetLimitRequest: Probability = 1.00, Count = 1
Invoke<GetReusableDelegationSetLimitResponse> -> executeGetReusableDelegationSetLimit: Probability = 1.00, Count = 1
StopRelationalDatabaseResponse -> StopRelationalDatabaseResult: Probability = 1.00, Count = 1
StopRelationalDatabase -> stopRelationalDatabase: Probability = 1.00, Count = 1
StopRelationalDatabaseRequest -> StopRelationalDatabaseRequest: Probability = 1.00, Count = 1
Invoke<StopRelationalDatabaseResponse> -> executeStopRelationalDatabase: Probability = 1.00, Count = 1
UpdateScriptResponse -> UpdateScriptResult: Probability = 1.00, Count = 1
UpdateScript -> updateScript: Probability = 1.00, Count = 1
UpdateScriptRequest -> UpdateScriptRequest: Probability = 1.00, Count = 1
Invoke<UpdateScriptResponse> -> executeUpdateScript: Probability = 1.00, Count = 1
InterpreterRuleContext -> InterpreterRuleContext: Probability = 1.00, Count = 1
invokingStateNumber, -> parent,int: Probability = 0.50, Count = 1
invokingStateNumber, -> invokingStateNumber,int: Probability = 0.50, Count = 1
invokingStateNumber -> invokingStateNumber: Probability = 1.00, Count = 1
CreateFileSystemFromBackupResponse -> CreateFileSystemFromBackupResult: Probability = 1.00, Count = 1
CreateFileSystemFromBackup -> createFileSystemFromBackup: Probability = 1.00, Count = 1
CreateFileSystemFromBackupRequest -> CreateFileSystemFromBackupRequest: Probability = 1.00, Count = 1
Invoke<CreateFileSystemFromBackupResponse> -> executeCreateFileSystemFromBackup: Probability = 1.00, Count = 1
ve0 -> ve0: Probability = 1.00, Count = 3
IChartDataSource<double> -> ChartDataSource<Number>: Probability = 1.00, Count = 1
FromNumericCellRange -> fromNumericCellRange: Probability = 1.00, Count = 1
cellRangeAddress -> cellRangeAddress: Probability = 1.00, Count = 2
DoubleCellRangeDataSource -> AbstractCellRangeDataSource<Number>: Probability = 1.00, Count = 1
InitiateVaultLockResponse -> InitiateVaultLockResult: Probability = 1.00, Count = 1
InitiateVaultLock -> initiateVaultLock: Probability = 1.00, Count = 1
InitiateVaultLockRequest -> InitiateVaultLockRequest: Probability = 1.00, Count = 1
Invoke<InitiateVaultLockResponse> -> executeInitiateVaultLock: Probability = 1.00, Count = 1
IsSet -> isSet: Probability = 1.00, Count = 1
DoubleMetaphoneFilter -> DoubleMetaphoneFilter: Probability = 1.00, Count = 1
this.posAtt -> this.inject: Probability = 1.00, Count = 1
workbook.ChangeExternalReference -> workbook.changeExternalReference: Probability = 1.00, Count = 1
ExtendB -> extendB: Probability = 1.00, Count = 1
endB++ -> endB++: Probability = 1.00, Count = 1
this.readingAttr -> this.useRomaji: Probability = 1.00, Count = 1
DeleteContactResponse -> DeleteContactResult: Probability = 1.00, Count = 1
DeleteContact -> deleteContact: Probability = 1.00, Count = 1
DeleteContactRequest -> DeleteContactRequest: Probability = 1.00, Count = 1
Invoke<DeleteContactResponse> -> executeDeleteContact: Probability = 1.00, Count = 1
InvokeEndpointResponse -> InvokeEndpointResult: Probability = 1.00, Count = 1
InvokeEndpoint -> invokeEndpoint: Probability = 1.00, Count = 1
InvokeEndpointRequest -> InvokeEndpointRequest: Probability = 1.00, Count = 1
Invoke<InvokeEndpointResponse> -> executeInvokeEndpoint: Probability = 1.00, Count = 1
PutAccountSettingDefaultResponse -> PutAccountSettingDefaultResult: Probability = 1.00, Count = 1
PutAccountSettingDefault -> putAccountSettingDefault: Probability = 1.00, Count = 1
PutAccountSettingDefaultRequest -> PutAccountSettingDefaultRequest: Probability = 1.00, Count = 1
Invoke<PutAccountSettingDefaultResponse> -> executePutAccountSettingDefault: Probability = 1.00, Count = 1
categoriesName -> f.toAbsolutePath: Probability = 0.17, Count = 1
categoriesName -> .getParent: Probability = 0.17, Count = 1
categoriesName -> categoriesName: Probability = 0.33, Count = 2
categoriesName -> "categories-"+f.getFileName: Probability = 0.17, Count = 1
categoriesName -> dir.resolve: Probability = 0.17, Count = 1
ToJson -> toJson: Probability = 0.33, Count = 1
ToJson -> JsonPolicyWriter: Probability = 0.33, Count = 1
ToJson -> .writePolicyToString: Probability = 0.33, Count = 1
GetFunctionName -> getFunctionName: Probability = 1.00, Count = 1
_funcMap[idx] -> _funcMap.get: Probability = 0.50, Count = 1
_funcMap[idx] -> idx: Probability = 0.50, Count = 1
RecordHandlerProgressResponse -> RecordHandlerProgressResult: Probability = 1.00, Count = 1
RecordHandlerProgress -> recordHandlerProgress: Probability = 1.00, Count = 1
RecordHandlerProgressRequest -> RecordHandlerProgressRequest: Probability = 1.00, Count = 1
Invoke<RecordHandlerProgressResponse> -> executeRecordHandlerProgress: Probability = 1.00, Count = 1
WrappedPositionArray -> WrappedPositionArray: Probability = 1.00, Count = 1
positions[i] -> positions[i]: Probability = 1.00, Count = 1
PasswordRev4Record -> PasswordRev4Record: Probability = 1.00, Count = 1
IntToHex -> intToHex: Probability = 1.00, Count = 1
UpdateOrganizationConfigurationResponse -> UpdateOrganizationConfigurationResult: Probability = 1.00, Count = 1
UpdateOrganizationConfiguration -> updateOrganizationConfiguration: Probability = 1.00, Count = 1
UpdateOrganizationConfigurationRequest -> UpdateOrganizationConfigurationRequest: Probability = 1.00, Count = 1
Invoke<UpdateOrganizationConfigurationResponse> -> executeUpdateOrganizationConfiguration: Probability = 1.00, Count = 1
!target.Equals -> otherState: Probability = 1.00, Count = 1
"NRTCachingDirectory -> "NRTCachingDirectory: Probability = 1.00, Count = 1
1024.0 -> maxCachedBytes/1024/1024.: Probability = 1.00, Count = 1
DescribeWorkforceResponse -> DescribeWorkforceResult: Probability = 1.00, Count = 1
DescribeWorkforce -> describeWorkforce: Probability = 1.00, Count = 1
DescribeWorkforceRequest -> DescribeWorkforceRequest: Probability = 1.00, Count = 1
Invoke<DescribeWorkforceResponse> -> executeDescribeWorkforce: Probability = 1.00, Count = 1
ToggleFeaturesRequest -> ToggleFeaturesRequest: Probability = 1.00, Count = 1
"ToggleFeatures", -> "ToggleFeatures",: Probability = 1.00, Count = 1
byteBuffer.putShort -> byteBuffer.putShort: Probability = 1.00, Count = 2
libcore.io.SizeOf.SHORT, -> SizeOf.SHORT,: Probability = 1.00, Count = 2
WeightedSpanTermExtractor -> WeightedSpanTermExtractor: Probability = 1.00, Count = 1
this.str -> this.str: Probability = 1.00, Count = 1
GetThumbnailsRequest -> GetThumbnailsRequest: Probability = 1.00, Count = 1
"GetThumbnails", -> "GetThumbnails",: Probability = 1.00, Count = 1
"DirectoryReader.ReaderCommit -> "StandardDirectoryReader.ReaderCommit: Probability = 1.00, Count = 1
bytesAfterHeader -> bytesAfterHeader: Probability = 0.75, Count = 3
bytesAfterHeader -> bytesAfterHeader,: Probability = 0.25, Count = 1
oFirstRow -> oFirstRow: Probability = 1.00, Count = 2
oLastRow -> oLastRow: Probability = 1.00, Count = 3
oFirstCol -> oFirstCol: Probability = 1.00, Count = 3
oLastCol -> oLastCol: Probability = 1.00, Count = 3
crA.LastRow -> ): Probability = 1.00, Count = 1
cvr -> cvr: Probability = 0.83, Count = 5
cvr -> agg.visitContainedRecords: Probability = 0.17, Count = 1
nBlank -> nBlank: Probability = 0.38, Count = 3
nBlank -> countBlanks: Probability = 0.12, Count = 1
nBlank -> rowCells,: Probability = 0.25, Count = 2
nBlank -> createMBR: Probability = 0.12, Count = 1
nBlank -> i+=nBlank-1: Probability = 0.12, Count = 1
DeleteVpnConnectionResponse -> DeleteVpnConnectionResult: Probability = 1.00, Count = 1
DeleteVpnConnection -> deleteVpnConnection: Probability = 1.00, Count = 1
Invoke<DeleteVpnConnectionResponse> -> executeDeleteVpnConnection: Probability = 1.00, Count = 1
reading, -> %.2f: Probability = 1.00, Count = 1
2:0.00 -> %.2f: Probability = 1.00, Count = 2
1000.0d, -> 1000.0d,: Probability = 0.43, Count = 3
1000.0d, -> mergeTimeMS.get: Probability = 0.14, Count = 1
1000.0d, -> 1000.0d,lineCount,: Probability = 0.14, Count = 1
1000.0d, -> tempMergeFiles,: Probability = 0.14, Count = 1
1000.0d, -> mergeRounds,: Probability = 0.14, Count = 1
DetachLoadBalancersResponse -> DetachLoadBalancersResult: Probability = 1.00, Count = 1
DetachLoadBalancers -> detachLoadBalancers: Probability = 1.00, Count = 1
DetachLoadBalancersRequest -> DetachLoadBalancersRequest: Probability = 1.00, Count = 1
Invoke<DetachLoadBalancersResponse> -> executeDetachLoadBalancers: Probability = 1.00, Count = 1
SplitSentences -> splitSentences: Probability = 1.00, Count = 1
shorty -> shorty: Probability = 0.67, Count = 2
shorty -> shorty[0]: Probability = 0.33, Count = 1
IsRemote -> isRemote: Probability = 1.00, Count = 1
SetBuiltinStyle -> setBuiltinStyle: Probability = 1.00, Count = 1
builtinStyleId -> builtinStyleId: Probability = 1.00, Count = 2
GetObjectReader -> getObjectReader: Probability = 1.00, Count = 1
AddEscherProperty -> addEscherProperty: Probability = 1.00, Count = 1
properties.Add -> properties.add: Probability = 1.00, Count = 1
matchOffsets[group_1 -> matchOffsets[group: Probability = 1.00, Count = 1
RemoveCompany -> removeCompany: Probability = 1.00, Count = 1
PropertyIDMap.PID_COMPANY -> PropertyIDMap.PID_COMPANY: Probability = 1.00, Count = 1
defaultCharset -> defaultCharset: Probability = 1.00, Count = 1
DEFAULT_CHARSET -> DEFAULT_CHARSET: Probability = 1.00, Count = 1
AttributeValueUpdate -> AttributeValueUpdate: Probability = 1.00, Count = 1
AttributeAction -> AttributeAction: Probability = 0.50, Count = 1
AttributeAction -> action: Probability = 0.50, Count = 1
_action -> setAction: Probability = 0.50, Count = 1
_action -> action.toString: Probability = 0.50, Count = 1
"[/FOOTER]\n" -> "[/FOOTER]\n": Probability = 1.00, Count = 1
DisassociateSkillFromSkillGroupResponse -> DisassociateSkillFromSkillGroupResult: Probability = 1.00, Count = 1
DisassociateSkillFromSkillGroup -> disassociateSkillFromSkillGroup: Probability = 1.00, Count = 1
DisassociateSkillFromSkillGroupRequest -> DisassociateSkillFromSkillGroupRequest: Probability = 1.00, Count = 1
Invoke<DisassociateSkillFromSkillGroupResponse> -> executeDisassociateSkillFromSkillGroup: Probability = 1.00, Count = 1
2.0 -> double[maxLevels: Probability = 0.11, Count = 2
2.0 -> xmin: Probability = 0.11, Count = 2
2.0 -> gridH: Probability = 0.06, Count = 1
2.0 -> ymax: Probability = 0.06, Count = 1
2.0 -> ymin: Probability = 0.11, Count = 2
2.0 -> this.xmid: Probability = 0.06, Count = 1
2.0 -> gridW/2.0: Probability = 0.11, Count = 2
2.0 -> this.ymid: Probability = 0.06, Count = 1
2.0 -> gridH/2.0: Probability = 0.11, Count = 2
2.0 -> levelW.length: Probability = 0.06, Count = 1
2.0 -> levelW[i: Probability = 0.06, Count = 1
2.0 -> 2.0: Probability = 0.11, Count = 2
CreateAnchorFromEscher -> createAnchorFromEscher: Probability = 1.00, Count = 1
container.GetChildById -> container.getChildById: Probability = 1.00, Count = 4
EscherChildAnchorRecord.RECORD_ID -> EscherChildAnchorRecord.RECORD_ID: Probability = 1.00, Count = 2
EscherClientAnchorRecord.RECORD_ID -> EscherClientAnchorRecord.RECORD_ID: Probability = 1.00, Count = 2
IsPackedGitMMAP -> isPackedGitMMAP: Probability = 1.00, Count = 1
PurchaseReservedInstancesOfferingResponse -> PurchaseReservedInstancesOfferingResult: Probability = 1.00, Count = 1
PurchaseReservedInstancesOffering -> purchaseReservedInstancesOffering: Probability = 1.00, Count = 1
Invoke<PurchaseReservedInstancesOfferingResponse> -> executePurchaseReservedInstancesOffering: Probability = 1.00, Count = 1
AssociateRepositoryResponse -> AssociateRepositoryResult: Probability = 1.00, Count = 1
AssociateRepository -> associateRepository: Probability = 1.00, Count = 1
AssociateRepositoryRequest -> AssociateRepositoryRequest: Probability = 1.00, Count = 1
Invoke<AssociateRepositoryResponse> -> executeAssociateRepository: Probability = 1.00, Count = 1
ImportApiKeysResponse -> ImportApiKeysResult: Probability = 1.00, Count = 1
ImportApiKeys -> importApiKeys: Probability = 1.00, Count = 1
ImportApiKeysRequest -> ImportApiKeysRequest: Probability = 1.00, Count = 1
Invoke<ImportApiKeysResponse> -> executeImportApiKeys: Probability = 1.00, Count = 1
BinaryHunk.Type -> Type: Probability = 0.50, Count = 1
BinaryHunk.Type -> getType: Probability = 0.50, Count = 1
DeleteSnapshotScheduleResponse -> DeleteSnapshotScheduleResult: Probability = 1.00, Count = 1
DeleteSnapshotSchedule -> deleteSnapshotSchedule: Probability = 1.00, Count = 1
DeleteSnapshotScheduleRequest -> DeleteSnapshotScheduleRequest: Probability = 1.00, Count = 1
Invoke<DeleteSnapshotScheduleResponse> -> executeDeleteSnapshotSchedule: Probability = 1.00, Count = 1
this.workbook.WriteProtectWorkbook -> this.workbook.writeProtectWorkbook: Probability = 1.00, Count = 1
CreateCloudFormationStackResponse -> CreateCloudFormationStackResult: Probability = 1.00, Count = 1
CreateCloudFormationStack -> createCloudFormationStack: Probability = 1.00, Count = 1
CreateCloudFormationStackRequest -> CreateCloudFormationStackRequest: Probability = 1.00, Count = 1
Invoke<CreateCloudFormationStackResponse> -> executeCreateCloudFormationStack: Probability = 1.00, Count = 1
dump -> dump: Probability = 1.00, Count = 1
_iBook.GetExternalSheetIndex -> _iBook.getExternalSheetIndex: Probability = 1.00, Count = 1
HSSFObjectData -> HSSFObjectData: Probability = 1.00, Count = 1
_root -> _root: Probability = 1.00, Count = 2
this._root -> this._root: Probability = 1.00, Count = 1
UpdateApnsVoipChannelResponse -> UpdateApnsVoipChannelResult: Probability = 1.00, Count = 1
UpdateApnsVoipChannel -> updateApnsVoipChannel: Probability = 1.00, Count = 1
UpdateApnsVoipChannelRequest -> UpdateApnsVoipChannelRequest: Probability = 1.00, Count = 1
Invoke<UpdateApnsVoipChannelResponse> -> executeUpdateApnsVoipChannel: Probability = 1.00, Count = 1
nameValPairs.Keys.ToArray -> .toArray: Probability = 0.50, Count = 1
nameValPairs.Keys.ToArray -> String[0]: Probability = 0.50, Count = 1
DeleteAutoSnapshotResponse -> DeleteAutoSnapshotResult: Probability = 1.00, Count = 1
DeleteAutoSnapshot -> deleteAutoSnapshot: Probability = 1.00, Count = 1
DeleteAutoSnapshotRequest -> DeleteAutoSnapshotRequest: Probability = 1.00, Count = 1
Invoke<DeleteAutoSnapshotResponse> -> executeDeleteAutoSnapshot: Probability = 1.00, Count = 1
GetLowIx -> getLowIx: Probability = 1.00, Count = 1
DescribeSubscribedWorkteamResponse -> DescribeSubscribedWorkteamResult: Probability = 1.00, Count = 1
DescribeSubscribedWorkteam -> describeSubscribedWorkteam: Probability = 1.00, Count = 1
DescribeSubscribedWorkteamRequest -> DescribeSubscribedWorkteamRequest: Probability = 1.00, Count = 1
Invoke<DescribeSubscribedWorkteamResponse> -> executeDescribeSubscribedWorkteam: Probability = 1.00, Count = 1
DeleteVpnGatewayResponse -> DeleteVpnGatewayResult: Probability = 1.00, Count = 1
DeleteVpnGateway -> deleteVpnGateway: Probability = 1.00, Count = 1
Invoke<DeleteVpnGatewayResponse> -> executeDeleteVpnGateway: Probability = 1.00, Count = 1
intSet.Exists -> intSet.exists: Probability = 1.00, Count = 1
constantName -> constantName: Probability = 1.00, Count = 1
_constantName -> constantName: Probability = 1.00, Count = 1
DescribeCacheParametersResponse -> DescribeCacheParametersResult: Probability = 1.00, Count = 1
DescribeCacheParameters -> describeCacheParameters: Probability = 1.00, Count = 1
Invoke<DescribeCacheParametersResponse> -> executeDescribeCacheParameters: Probability = 1.00, Count = 1
numerator, -> numerator,: Probability = 1.00, Count = 1
this.numerator -> this.numerator: Probability = 1.00, Count = 1
numerator -> numerator: Probability = 1.00, Count = 1
this.denominator -> this.denominator: Probability = 1.00, Count = 1
idealBooleanArraySize -> idealBooleanArraySize: Probability = 1.00, Count = 1
PutRecordBatchResponse -> PutRecordBatchResult: Probability = 1.00, Count = 1
PutRecordBatch -> putRecordBatch: Probability = 1.00, Count = 1
PutRecordBatchRequest -> PutRecordBatchRequest: Probability = 1.00, Count = 1
Invoke<PutRecordBatchResponse> -> executePutRecordBatch: Probability = 1.00, Count = 1
QueryTermScorer -> QueryTermScorer: Probability = 1.00, Count = 1
weightedTerms -> weightedTerms: Probability = 1.00, Count = 1
termsToFind -> termsToFind: Probability = 1.00, Count = 1
existingTerm -> existingTerm: Probability = 0.67, Count = 2
existingTerm -> existingTerm.weight: Probability = 0.33, Count = 1
weightedTerms[i].Weight -> termsToFind.put: Probability = 0.17, Count = 1
weightedTerms[i].Weight -> weightedTerms[i].term,: Probability = 0.17, Count = 1
weightedTerms[i].Weight -> weightedTerms[i]: Probability = 0.17, Count = 1
weightedTerms[i].Weight -> maxTermWeight: Probability = 0.17, Count = 1
weightedTerms[i].Weight -> maxTermWeight,: Probability = 0.17, Count = 1
weightedTerms[i].Weight -> weightedTerms[i].getWeight: Probability = 0.17, Count = 1
AllSubsetsConflict -> allSubsetsConflict: Probability = 1.00, Count = 1
!HasNonConflictingAltSet -> !hasNonConflictingAltSet: Probability = 1.00, Count = 1
DescribeRuntimeConfigurationResponse -> DescribeRuntimeConfigurationResult: Probability = 1.00, Count = 1
DescribeRuntimeConfiguration -> describeRuntimeConfiguration: Probability = 1.00, Count = 1
DescribeRuntimeConfigurationRequest -> DescribeRuntimeConfigurationRequest: Probability = 1.00, Count = 1
Invoke<DescribeRuntimeConfigurationResponse> -> executeDescribeRuntimeConfiguration: Probability = 1.00, Count = 1
ParseCommit -> parseCommit: Probability = 1.00, Count = 1
heap[i] -> heap[i]: Probability = 1.00, Count = 1
CreateVPCAssociationAuthorizationResponse -> CreateVPCAssociationAuthorizationResult: Probability = 1.00, Count = 1
CreateVPCAssociationAuthorization -> createVPCAssociationAuthorization: Probability = 1.00, Count = 1
CreateVPCAssociationAuthorizationRequest -> CreateVPCAssociationAuthorizationRequest: Probability = 1.00, Count = 1
Invoke<CreateVPCAssociationAuthorizationResponse> -> executeCreateVPCAssociationAuthorization: Probability = 1.00, Count = 1
CatalanStemmer -> CatalanStemmer: Probability = 1.00, Count = 1
AutomatonQuery -> AutomatonQuery: Probability = 1.00, Count = 1
thisInt -> thisInt,: Probability = 0.25, Count = 1
thisInt -> thisInt: Probability = 0.75, Count = 3
otherInt -> otherInt: Probability = 1.00, Count = 4
this._enclosing.header -> header: Probability = 1.00, Count = 1
SetDetectRenames -> setDetectRenames: Probability = 1.00, Count = 1
SetOutputUnigrams -> setOutputUnigrams: Probability = 1.00, Count = 1
TypeAsPayloadTokenFilter -> TypeAsPayloadTokenFilter: Probability = 1.00, Count = 2
CreateIndexResponse -> CreateIndexResult: Probability = 1.00, Count = 1
CreateIndexRequest -> CreateIndexRequest: Probability = 1.00, Count = 1
Invoke<CreateIndexResponse> -> executeCreateIndex: Probability = 1.00, Count = 1
nameValPairs -> nameValPairs: Probability = 1.00, Count = 2
this.queryID -> this.queryID: Probability = 1.00, Count = 1
queryID -> queryID: Probability = 1.00, Count = 1
this.nameValPairs -> this.nameValPairs: Probability = 1.00, Count = 1
addFirst -> addFirst: Probability = 1.00, Count = 1
ValidateConfigurationSettingsRequest -> ValidateConfigurationSettingsRequest: Probability = 1.00, Count = 1
List<ConfigurationOptionSetting> -> java.util.List<ConfigurationOptionSetting>: Probability = 1.00, Count = 1
optionSettings -> optionSettings: Probability = 1.00, Count = 2
_optionSettings -> setOptionSettings: Probability = 1.00, Count = 1
Exact -> exact: Probability = 1.00, Count = 1
RemoveScale -> removeScale: Probability = 1.00, Count = 1
PropertyIDMap.PID_SCALE -> PropertyIDMap.PID_SCALE: Probability = 1.00, Count = 1
DocumentDictionary -> DocumentDictionary: Probability = 1.00, Count = 1
weightField, -> weightField,: Probability = 1.00, Count = 1
payloadField, -> payloadField,: Probability = 1.00, Count = 1
contextsField -> contextsField: Probability = 1.00, Count = 2
this.weightField -> this.weightField: Probability = 1.00, Count = 1
weightField -> weightField: Probability = 1.00, Count = 1
this.m_payloadField -> this.payloadField: Probability = 1.00, Count = 1
payloadField -> payloadField: Probability = 1.00, Count = 1
this.m_contextsField -> this.contextsField: Probability = 1.00, Count = 1
_nextIndex -> _nextIndex: Probability = 1.00, Count = 1
_endIx -> _endIx: Probability = 1.00, Count = 1
AssociateVirtualInterfaceResponse -> AssociateVirtualInterfaceResult: Probability = 1.00, Count = 1
AssociateVirtualInterface -> associateVirtualInterface: Probability = 1.00, Count = 1
AssociateVirtualInterfaceRequest -> AssociateVirtualInterfaceRequest: Probability = 1.00, Count = 1
Invoke<AssociateVirtualInterfaceResponse> -> executeAssociateVirtualInterface: Probability = 1.00, Count = 1
queryPoint -> queryPoint: Probability = 1.00, Count = 1
weightedSpanTerm -> weightedSpanTerm: Probability = 0.67, Count = 2
weightedSpanTerm -> fieldWeightedSpanTerms.get: Probability = 0.33, Count = 1
pollFirst -> pollFirst: Probability = 1.00, Count = 1
java.util.MapClass.Entry<E, -> Map.Entry<E,: Probability = 0.50, Count = 1
java.util.MapClass.Entry<E, -> Object>: Probability = 0.50, Count = 1
backingMap.pollFirstEntry -> backingMap.pollFirstEntry: Probability = 1.00, Count = 1
EnterEveryRule -> enterEveryRule: Probability = 1.00, Count = 1
"enter -> getRuleNames: Probability = 1.00, Count = 1
newColumn -> moveCell: Probability = 0.17, Count = 1
newColumn -> newColumn: Probability = 0.67, Count = 4
newColumn -> cells[newColumn]: Probability = 0.17, Count = 1
ModifyWorkspaceCreationPropertiesResponse -> ModifyWorkspaceCreationPropertiesResult: Probability = 1.00, Count = 1
ModifyWorkspaceCreationProperties -> modifyWorkspaceCreationProperties: Probability = 1.00, Count = 1
ModifyWorkspaceCreationPropertiesRequest -> ModifyWorkspaceCreationPropertiesRequest: Probability = 1.00, Count = 1
Invoke<ModifyWorkspaceCreationPropertiesResponse> -> executeModifyWorkspaceCreationProperties: Probability = 1.00, Count = 1
BoolDocValues -> BoolDocValues: Probability = 1.00, Count = 1
nextWrite-- -> nextWrite--: Probability = 1.00, Count = 1
UpdateDirectConnectGatewayAssociationResponse -> UpdateDirectConnectGatewayAssociationResult: Probability = 1.00, Count = 1
UpdateDirectConnectGatewayAssociation -> updateDirectConnectGatewayAssociation: Probability = 1.00, Count = 1
UpdateDirectConnectGatewayAssociationRequest -> UpdateDirectConnectGatewayAssociationRequest: Probability = 1.00, Count = 1
Invoke<UpdateDirectConnectGatewayAssociationResponse> -> executeUpdateDirectConnectGatewayAssociation: Probability = 1.00, Count = 1
EditPhotoStoreRequest -> EditPhotoStoreRequest: Probability = 1.00, Count = 1
"EditPhotoStore", -> "EditPhotoStore",: Probability = 1.00, Count = 1
"<matchNoDocsQueryNode/>" -> "<matchNoDocsQueryNode/>": Probability = 1.00, Count = 1
"HEADERFOOTER" -> +: Probability = 1.00, Count = 6
UpdateBrokerResponse -> UpdateBrokerResult: Probability = 1.00, Count = 1
UpdateBroker -> updateBroker: Probability = 1.00, Count = 1
UpdateBrokerRequest -> UpdateBrokerRequest: Probability = 1.00, Count = 1
Invoke<UpdateBrokerResponse> -> executeUpdateBroker: Probability = 1.00, Count = 1
AssociateS3ResourcesResponse -> AssociateS3ResourcesResult: Probability = 1.00, Count = 1
AssociateS3Resources -> associateS3Resources: Probability = 1.00, Count = 1
AssociateS3ResourcesRequest -> AssociateS3ResourcesRequest: Probability = 1.00, Count = 1
Invoke<AssociateS3ResourcesResponse> -> executeAssociateS3Resources: Probability = 1.00, Count = 1
GetRawValue -> getRawValue: Probability = 1.00, Count = 1
CancelResizeResponse -> CancelResizeResult: Probability = 1.00, Count = 1
CancelResize -> cancelResize: Probability = 1.00, Count = 1
CancelResizeRequest -> CancelResizeRequest: Probability = 1.00, Count = 1
Invoke<CancelResizeResponse> -> executeCancelResize: Probability = 1.00, Count = 1
CreateTransitGatewayRouteResponse -> CreateTransitGatewayRouteResult: Probability = 1.00, Count = 1
CreateTransitGatewayRoute -> createTransitGatewayRoute: Probability = 1.00, Count = 1
CreateTransitGatewayRouteRequest -> CreateTransitGatewayRouteRequest: Probability = 1.00, Count = 1
Invoke<CreateTransitGatewayRouteResponse> -> executeCreateTransitGatewayRoute: Probability = 1.00, Count = 1
FastVectorHighlighter -> FastVectorHighlighter: Probability = 1.00, Count = 1
phraseHighlight, -> phraseHighlight,: Probability = 1.00, Count = 1
fieldMatch,IFragListBuilder -> fieldMatch,FragListBuilder: Probability = 1.00, Count = 1
fragListBuilder, -> fragListBuilder,: Probability = 1.00, Count = 1
IFragmentsBuilder -> FragmentsBuilder: Probability = 1.00, Count = 1
fragmentsBuilder -> fragmentsBuilder: Probability = 1.00, Count = 2
this.phraseHighlight -> this.phraseHighlight: Probability = 1.00, Count = 1
phraseHighlight -> phraseHighlight: Probability = 1.00, Count = 1
this.fieldMatch -> this.fieldMatch: Probability = 1.00, Count = 1
fieldMatch -> fieldMatch: Probability = 1.00, Count = 1
this.fragListBuilder -> this.fragListBuilder: Probability = 1.00, Count = 1
fragListBuilder -> fragListBuilder: Probability = 1.00, Count = 1
this.fragmentsBuilder -> this.fragmentsBuilder: Probability = 1.00, Count = 1
SetTypeDefaultVersionResponse -> SetTypeDefaultVersionResult: Probability = 1.00, Count = 1
SetTypeDefaultVersion -> setTypeDefaultVersion: Probability = 1.00, Count = 1
SetTypeDefaultVersionRequest -> SetTypeDefaultVersionRequest: Probability = 1.00, Count = 1
Invoke<SetTypeDefaultVersionResponse> -> executeSetTypeDefaultVersion: Probability = 1.00, Count = 1
state.Name -> state.getName: Probability = 1.00, Count = 1
.ComputeNorm -> .computeNorm: Probability = 1.00, Count = 1
CreateCustomVerificationEmailTemplateResponse -> CreateCustomVerificationEmailTemplateResult: Probability = 1.00, Count = 1
CreateCustomVerificationEmailTemplate -> createCustomVerificationEmailTemplate: Probability = 1.00, Count = 1
CreateCustomVerificationEmailTemplateRequest -> CreateCustomVerificationEmailTemplateRequest: Probability = 1.00, Count = 1
Invoke<CreateCustomVerificationEmailTemplateResponse> -> executeCreateCustomVerificationEmailTemplate: Probability = 1.00, Count = 1
median -> median: Probability = 1.00, Count = 1
v[n -> v[n: Probability = 0.75, Count = 3
v[n -> 2:: Probability = 0.25, Count = 1
IRuleNode -> RuleNode: Probability = 1.00, Count = 2
SCLRecord -> SCLRecord: Probability = 1.00, Count = 1
RawParseUtils.LineMap -> input,: Probability = 1.00, Count = 2
lines -> RawParseUtils.lineMap: Probability = 1.00, Count = 1
GetRepoBatchRequest -> GetRepoBatchRequest: Probability = 1.00, Count = 1
"GetRepoBatch", -> "GetRepoBatch",: Probability = 1.00, Count = 1
"/batchsearch" -> "/batchsearch": Probability = 1.00, Count = 1
MoPenDoRecognizeRequest -> MoPenDoRecognizeRequest: Probability = 1.00, Count = 1
"MoPenDoRecognize", -> "MoPenDoRecognize",: Probability = 1.00, Count = 1
DeleteApnsSandboxChannelResponse -> DeleteApnsSandboxChannelResult: Probability = 1.00, Count = 1
DeleteApnsSandboxChannel -> deleteApnsSandboxChannel: Probability = 1.00, Count = 1
DeleteApnsSandboxChannelRequest -> DeleteApnsSandboxChannelRequest: Probability = 1.00, Count = 1
Invoke<DeleteApnsSandboxChannelResponse> -> executeDeleteApnsSandboxChannel: Probability = 1.00, Count = 1
DeleteEndpointResponse -> DeleteEndpointResult: Probability = 1.00, Count = 1
DeleteEndpoint -> deleteEndpoint: Probability = 1.00, Count = 1
DeleteEndpointRequest -> DeleteEndpointRequest: Probability = 1.00, Count = 1
Invoke<DeleteEndpointResponse> -> executeDeleteEndpoint: Probability = 1.00, Count = 1
list.lastIndexOf -> list.lastIndexOf: Probability = 1.00, Count = 1
GetIndustryInfoChildrenListRequest -> GetIndustryInfoChildrenListRequest: Probability = 1.00, Count = 1
"GetIndustryInfoChildrenList" -> "GetIndustryInfoChildrenList": Probability = 1.00, Count = 1
KeywordMarkerFilterFactory -> KeywordMarkerFilterFactory: Probability = 1.00, Count = 1
GetAreaAt -> getAreaAt: Probability = 1.00, Count = 1
PutEmailIdentityDkimSigningAttributesResponse -> PutEmailIdentityDkimSigningAttributesResult: Probability = 1.00, Count = 1
PutEmailIdentityDkimSigningAttributes -> putEmailIdentityDkimSigningAttributes: Probability = 1.00, Count = 1
PutEmailIdentityDkimSigningAttributesRequest -> PutEmailIdentityDkimSigningAttributesRequest: Probability = 1.00, Count = 1
Invoke<PutEmailIdentityDkimSigningAttributesResponse> -> executePutEmailIdentityDkimSigningAttributes: Probability = 1.00, Count = 1
SMART -> SMART: Probability = 1.00, Count = 2
TAGS]\n" -> TAGS]\n": Probability = 1.00, Count = 2
"OrdTermState -> "OrdTermState: Probability = 1.00, Count = 1
ord=" -> ord=": Probability = 1.00, Count = 1
Ord -> ord: Probability = 1.00, Count = 1
noteOn, -> noteOn,: Probability = 1.00, Count = 1
noteData -> noteData: Probability = 1.00, Count = 2
noteOn -> noteOn: Probability = 1.00, Count = 1
GetModelVersionResponse -> GetModelVersionResult: Probability = 1.00, Count = 1
GetModelVersion -> getModelVersion: Probability = 1.00, Count = 1
GetModelVersionRequest -> GetModelVersionRequest: Probability = 1.00, Count = 1
Invoke<GetModelVersionResponse> -> executeGetModelVersion: Probability = 1.00, Count = 1
DescribeUsageReportSubscriptionsResponse -> DescribeUsageReportSubscriptionsResult: Probability = 1.00, Count = 1
DescribeUsageReportSubscriptions -> describeUsageReportSubscriptions: Probability = 1.00, Count = 1
DescribeUsageReportSubscriptionsRequest -> DescribeUsageReportSubscriptionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeUsageReportSubscriptionsResponse> -> executeDescribeUsageReportSubscriptions: Probability = 1.00, Count = 1
offerLast -> offerLast: Probability = 1.00, Count = 1
DisassociateTransitGatewayMulticastDomainResponse -> DisassociateTransitGatewayMulticastDomainResult: Probability = 1.00, Count = 1
DisassociateTransitGatewayMulticastDomain -> disassociateTransitGatewayMulticastDomain: Probability = 1.00, Count = 1
DisassociateTransitGatewayMulticastDomainRequest -> DisassociateTransitGatewayMulticastDomainRequest: Probability = 1.00, Count = 1
Invoke<DisassociateTransitGatewayMulticastDomainResponse> -> executeDisassociateTransitGatewayMulticastDomain: Probability = 1.00, Count = 1
detectedCharset -> detectedCharset: Probability = 1.00, Count = 1
ListTrafficPoliciesResponse -> ListTrafficPoliciesResult: Probability = 1.00, Count = 1
ListTrafficPolicies -> listTrafficPolicies: Probability = 1.00, Count = 1
ListTrafficPoliciesRequest -> ListTrafficPoliciesRequest: Probability = 1.00, Count = 1
Invoke<ListTrafficPoliciesResponse> -> executeListTrafficPolicies: Probability = 1.00, Count = 1
SetElement -> setElement: Probability = 1.00, Count = 1
GetResultContents -> getResultContents: Probability = 1.00, Count = 1
resultContents -> resultContents: Probability = 1.00, Count = 1
SetMaxShingleSize -> setMaxShingleSize: Probability = 1.00, Count = 1
"Max -> "Max: Probability = 1.00, Count = 2
this.maxShingleSize -> this.maxShingleSize: Probability = 1.00, Count = 2
DescribeDBEngineVersionsResponse -> DescribeDBEngineVersionsResult: Probability = 1.00, Count = 1
DescribeDBEngineVersions -> describeDBEngineVersions: Probability = 1.00, Count = 1
DescribeDBEngineVersionsRequest -> DescribeDBEngineVersionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeDBEngineVersionsResponse> -> executeDescribeDBEngineVersions: Probability = 1.00, Count = 1
CopyDBSnapshotResponse -> DBSnapshot: Probability = 1.00, Count = 1
CopyDBSnapshot -> copyDBSnapshot: Probability = 1.00, Count = 1
CopyDBSnapshotRequest -> CopyDBSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CopyDBSnapshotResponse> -> executeCopyDBSnapshot: Probability = 1.00, Count = 1
atnStartState -> this.atnStartState: Probability = 0.20, Count = 1
atnStartState -> atnStartState: Probability = 0.60, Count = 3
atnStartState -> .isPrecedenceDecision: Probability = 0.20, Count = 1
this.precedenceDfa -> precedenceDfa: Probability = 1.00, Count = 2
StarLoopEntryState -> StarLoopEntryState: Probability = 1.00, Count = 2
precedenceState -> precedenceState: Probability = 0.67, Count = 2
precedenceState -> precedenceDfa: Probability = 0.33, Count = 1
"<group>" -> "<group>": Probability = 1.00, Count = 1
"\n</group>" -> "\n</group>": Probability = 1.00, Count = 1
UpdateResolverRuleResponse -> UpdateResolverRuleResult: Probability = 1.00, Count = 1
UpdateResolverRule -> updateResolverRule: Probability = 1.00, Count = 1
UpdateResolverRuleRequest -> UpdateResolverRuleRequest: Probability = 1.00, Count = 1
Invoke<UpdateResolverRuleResponse> -> executeUpdateResolverRule: Probability = 1.00, Count = 1
utf8SortedAsUnicodeSortOrder.Compare -> this.bytes,: Probability = 0.20, Count = 1
utf8SortedAsUnicodeSortOrder.Compare -> this.offset,: Probability = 0.20, Count = 1
utf8SortedAsUnicodeSortOrder.Compare -> this.offset: Probability = 0.20, Count = 1
utf8SortedAsUnicodeSortOrder.Compare -> this.length,other.bytes,: Probability = 0.20, Count = 1
utf8SortedAsUnicodeSortOrder.Compare -> other.offset,: Probability = 0.20, Count = 1
ns.Clear -> ns.removeAllElements: Probability = 1.00, Count = 1
ks.Length -> ks.setLength: Probability = 1.00, Count = 1
outerInstance.m_root -> root: Probability = 1.00, Count = 1
ModifyWorkspaceAccessPropertiesResponse -> ModifyWorkspaceAccessPropertiesResult: Probability = 1.00, Count = 1
ModifyWorkspaceAccessProperties -> modifyWorkspaceAccessProperties: Probability = 1.00, Count = 1
ModifyWorkspaceAccessPropertiesRequest -> ModifyWorkspaceAccessPropertiesRequest: Probability = 1.00, Count = 1
Invoke<ModifyWorkspaceAccessPropertiesResponse> -> executeModifyWorkspaceAccessProperties: Probability = 1.00, Count = 1
DescribeFleetAttributesResponse -> DescribeFleetAttributesResult: Probability = 1.00, Count = 1
DescribeFleetAttributes -> describeFleetAttributes: Probability = 1.00, Count = 1
DescribeFleetAttributesRequest -> DescribeFleetAttributesRequest: Probability = 1.00, Count = 1
Invoke<DescribeFleetAttributesResponse> -> executeDescribeFleetAttributes: Probability = 1.00, Count = 1
CreateBuildResponse -> CreateBuildResult: Probability = 1.00, Count = 1
CreateBuild -> createBuild: Probability = 1.00, Count = 1
CreateBuildRequest -> CreateBuildRequest: Probability = 1.00, Count = 1
Invoke<CreateBuildResponse> -> executeCreateBuild: Probability = 1.00, Count = 1
data[pos++] -> data[pos++]: Probability = 1.00, Count = 1
CreateDatasetResponse -> CreateDatasetResult: Probability = 1.00, Count = 1
CreateDataset -> createDataset: Probability = 1.00, Count = 1
CreateDatasetRequest -> CreateDatasetRequest: Probability = 1.00, Count = 1
Invoke<CreateDatasetResponse> -> executeCreateDataset: Probability = 1.00, Count = 1
termOrd++ -> termOrd++: Probability = 1.00, Count = 1
outerInstance.terms.Length -> terms.length: Probability = 1.00, Count = 1
FontCharset -> FontCharset: Probability = 1.00, Count = 1
value>=0&&value<=255 -> value: Probability = 1.00, Count = 2
RejectVpcEndpointConnectionsResponse -> RejectVpcEndpointConnectionsResult: Probability = 1.00, Count = 1
RejectVpcEndpointConnections -> rejectVpcEndpointConnections: Probability = 1.00, Count = 1
RejectVpcEndpointConnectionsRequest -> RejectVpcEndpointConnectionsRequest: Probability = 1.00, Count = 1
Invoke<RejectVpcEndpointConnectionsResponse> -> executeRejectVpcEndpointConnections: Probability = 1.00, Count = 1
CreateInterconnectResponse -> CreateInterconnectResult: Probability = 1.00, Count = 1
CreateInterconnect -> createInterconnect: Probability = 1.00, Count = 1
CreateInterconnectRequest -> CreateInterconnectRequest: Probability = 1.00, Count = 1
Invoke<CreateInterconnectResponse> -> executeCreateInterconnect: Probability = 1.00, Count = 1
DeleteTrafficMirrorTargetResponse -> DeleteTrafficMirrorTargetResult: Probability = 1.00, Count = 1
DeleteTrafficMirrorTarget -> deleteTrafficMirrorTarget: Probability = 1.00, Count = 1
DeleteTrafficMirrorTargetRequest -> DeleteTrafficMirrorTargetRequest: Probability = 1.00, Count = 1
Invoke<DeleteTrafficMirrorTargetResponse> -> executeDeleteTrafficMirrorTarget: Probability = 1.00, Count = 1
UpdateMonitoringScheduleResponse -> UpdateMonitoringScheduleResult: Probability = 1.00, Count = 1
UpdateMonitoringSchedule -> updateMonitoringSchedule: Probability = 1.00, Count = 1
UpdateMonitoringScheduleRequest -> UpdateMonitoringScheduleRequest: Probability = 1.00, Count = 1
Invoke<UpdateMonitoringScheduleResponse> -> executeUpdateMonitoringSchedule: Probability = 1.00, Count = 1
DeleteGatewayGroupResponse -> DeleteGatewayGroupResult: Probability = 1.00, Count = 1
DeleteGatewayGroup -> deleteGatewayGroup: Probability = 1.00, Count = 1
DeleteGatewayGroupRequest -> DeleteGatewayGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteGatewayGroupResponse> -> executeDeleteGatewayGroup: Probability = 1.00, Count = 1
ListStackSetOperationsResponse -> ListStackSetOperationsResult: Probability = 1.00, Count = 1
ListStackSetOperations -> listStackSetOperations: Probability = 1.00, Count = 1
ListStackSetOperationsRequest -> ListStackSetOperationsRequest: Probability = 1.00, Count = 1
Invoke<ListStackSetOperationsResponse> -> executeListStackSetOperations: Probability = 1.00, Count = 1
ListOfOutputs -> ListOfOutputs: Probability = 1.00, Count = 1
Outputs<T> -> Outputs<T>: Probability = 1.00, Count = 1
this.outputs -> this.outputs: Probability = 1.00, Count = 1
ExceedsLimit -> ExceedsLimit: Probability = 1.00, Count = 1
GetIndustryInfoRequest -> GetIndustryInfoRequest: Probability = 1.00, Count = 1
"GetIndustryInfo" -> "GetIndustryInfo": Probability = 1.00, Count = 1
other.point -> other.point: Probability = 1.00, Count = 1
DeleteQueuedReservedInstancesResponse -> DeleteQueuedReservedInstancesResult: Probability = 1.00, Count = 1
DeleteQueuedReservedInstances -> deleteQueuedReservedInstances: Probability = 1.00, Count = 1
DeleteQueuedReservedInstancesRequest -> DeleteQueuedReservedInstancesRequest: Probability = 1.00, Count = 1
Invoke<DeleteQueuedReservedInstancesResponse> -> executeDeleteQueuedReservedInstances: Probability = 1.00, Count = 1
SpanFirstBuilder -> SpanFirstBuilder: Probability = 1.00, Count = 1
Invoke<DescribeInstancesResponse> -> executeDescribeInstances: Probability = 1.00, Count = 1
DescribeProjectsResponse -> DescribeProjectsResult: Probability = 1.00, Count = 1
DescribeProjects -> describeProjects: Probability = 1.00, Count = 1
DescribeProjectsRequest -> DescribeProjectsRequest: Probability = 1.00, Count = 1
Invoke<DescribeProjectsResponse> -> executeDescribeProjects: Probability = 1.00, Count = 1
Int64Count -> 8L: Probability = 1.00, Count = 1
IList<Statement> -> Collection<Statement>: Probability = 1.00, Count = 1
statements -> statements: Probability = 1.00, Count = 2
this.statements -> setStatements: Probability = 1.00, Count = 1
this.func -> this.func=func: Probability = 1.00, Count = 1
UpdateGameServerResponse -> UpdateGameServerResult: Probability = 1.00, Count = 1
UpdateGameServer -> updateGameServer: Probability = 1.00, Count = 1
UpdateGameServerRequest -> UpdateGameServerRequest: Probability = 1.00, Count = 1
Invoke<UpdateGameServerResponse> -> executeUpdateGameServer: Probability = 1.00, Count = 1
GetDetectorVersionResponse -> GetDetectorVersionResult: Probability = 1.00, Count = 1
GetDetectorVersion -> getDetectorVersion: Probability = 1.00, Count = 1
GetDetectorVersionRequest -> GetDetectorVersionRequest: Probability = 1.00, Count = 1
Invoke<GetDetectorVersionResponse> -> executeGetDetectorVersion: Probability = 1.00, Count = 1
IsEnabled -> isEnabled: Probability = 1.00, Count = 2
DisassociateMemberFromGroupResponse -> DisassociateMemberFromGroupResult: Probability = 1.00, Count = 1
DisassociateMemberFromGroup -> disassociateMemberFromGroup: Probability = 1.00, Count = 1
DisassociateMemberFromGroupRequest -> DisassociateMemberFromGroupRequest: Probability = 1.00, Count = 1
Invoke<DisassociateMemberFromGroupResponse> -> executeDisassociateMemberFromGroup: Probability = 1.00, Count = 1
UnmergedPathException -> UnmergedPathException: Probability = 1.00, Count = 1
dce -> dce: Probability = 1.00, Count = 2
.unmergedPath, -> .unmergedPath,: Probability = 0.50, Count = 1
.unmergedPath, -> dce.getPathString: Probability = 0.50, Count = 1
nameRecord, -> nameRecord,: Probability = 1.00, Count = 1
_nameRecord -> _nameRecord: Probability = 1.00, Count = 1
java.util.LinkedList.Link<ET> -> Link<ET>: Probability = 1.00, Count = 3
newLink -> newLink: Probability = 0.67, Count = 4
newLink -> link,: Probability = 0.17, Count = 1
newLink -> next.previous: Probability = 0.17, Count = 1
NGit.Api.SubmoduleInitCommand -> SubmoduleInitCommand: Probability = 1.00, Count = 1
DeleteInterconnectResponse -> DeleteInterconnectResult: Probability = 1.00, Count = 1
DeleteInterconnect -> deleteInterconnect: Probability = 1.00, Count = 1
DeleteInterconnectRequest -> DeleteInterconnectRequest: Probability = 1.00, Count = 1
Invoke<DeleteInterconnectResponse> -> executeDeleteInterconnect: Probability = 1.00, Count = 1
DeleteRepoWebhookRequest -> DeleteRepoWebhookRequest: Probability = 1.00, Count = 1
"DeleteRepoWebhook", -> "DeleteRepoWebhook",: Probability = 1.00, Count = 1
"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]" -> "/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]": Probability = 1.00, Count = 1
DeleteDeviceResponse -> DeleteDeviceResult: Probability = 1.00, Count = 1
DeleteDevice -> deleteDevice: Probability = 1.00, Count = 1
DeleteDeviceRequest -> DeleteDeviceRequest: Probability = 1.00, Count = 1
Invoke<DeleteDeviceResponse> -> executeDeleteDevice: Probability = 1.00, Count = 1
CreateEventBusResponse -> CreateEventBusResult: Probability = 1.00, Count = 1
CreateEventBus -> createEventBus: Probability = 1.00, Count = 1
CreateEventBusRequest -> CreateEventBusRequest: Probability = 1.00, Count = 1
Invoke<CreateEventBusResponse> -> executeCreateEventBus: Probability = 1.00, Count = 1
IsSigned -> isSigned: Probability = 1.00, Count = 1
DeleteRuleVersionResponse -> DeleteRuleVersionResult: Probability = 1.00, Count = 1
DeleteRuleVersion -> deleteRuleVersion: Probability = 1.00, Count = 1
DeleteRuleVersionRequest -> DeleteRuleVersionRequest: Probability = 1.00, Count = 1
Invoke<DeleteRuleVersionResponse> -> executeDeleteRuleVersion: Probability = 1.00, Count = 1
this.diffAlgorithm -> this.diffAlgorithm: Probability = 1.00, Count = 1
DisassociateSkillFromUsersResponse -> DisassociateSkillFromUsersResult: Probability = 1.00, Count = 1
DisassociateSkillFromUsers -> disassociateSkillFromUsers: Probability = 1.00, Count = 1
DisassociateSkillFromUsersRequest -> DisassociateSkillFromUsersRequest: Probability = 1.00, Count = 1
Invoke<DisassociateSkillFromUsersResponse> -> executeDisassociateSkillFromUsers: Probability = 1.00, Count = 1
PatchIdDiffFormatter -> PatchIdDiffFormatter: Probability = 1.00, Count = 1
DigestOutputStream -> DigestOutputStream: Probability = 1.00, Count = 2
NullOutputStream.INSTANCE, -> NullOutputStream.INSTANCE,Constants.newMessageDigest: Probability = 1.00, Count = 1
digest -> digest: Probability = 1.00, Count = 1
.GetMessageDigest -> .getMessageDigest: Probability = 1.00, Count = 1
Invoke<SendMessageResponse> -> executeSendMessage: Probability = 1.00, Count = 1
ppt -> ParsePathType: Probability = 0.15, Count = 2
ppt -> pathType: Probability = 0.08, Count = 1
ppt -> pathLength: Probability = 0.08, Count = 1
ppt -> f.getFileName: Probability = 0.15, Count = 2
ppt -> ++pathLength: Probability = 0.08, Count = 1
ppt -> MAX_PATH_LENGTH: Probability = 0.08, Count = 1
ppt -> ppt: Probability = 0.15, Count = 2
ppt -> ppt!=null: Probability = 0.08, Count = 1
ppt -> f: Probability = 0.08, Count = 1
ppt -> f.getParent: Probability = 0.08, Count = 1
EstimateIndexSize -> estimateIndexSize: Probability = 1.00, Count = 1
sourceLength -> sourceLength: Probability = 1.00, Count = 3
UpdateDashboardPermissionsResponse -> UpdateDashboardPermissionsResult: Probability = 1.00, Count = 1
UpdateDashboardPermissions -> updateDashboardPermissions: Probability = 1.00, Count = 1
UpdateDashboardPermissionsRequest -> UpdateDashboardPermissionsRequest: Probability = 1.00, Count = 1
Invoke<UpdateDashboardPermissionsResponse> -> executeUpdateDashboardPermissions: Probability = 1.00, Count = 1
"<error -> unexpected: Probability = 1.00, Count = 1
SetHost -> setHost: Probability = 1.00, Count = 1
r.host -> r.host: Probability = 1.00, Count = 1
usedCells -> usedCells: Probability = 1.00, Count = 2
ClearValue -> clearValue: Probability = 1.00, Count = 1
GetDiskSnapshotResponse -> GetDiskSnapshotResult: Probability = 1.00, Count = 1
GetDiskSnapshot -> getDiskSnapshot: Probability = 1.00, Count = 1
GetDiskSnapshotRequest -> GetDiskSnapshotRequest: Probability = 1.00, Count = 1
Invoke<GetDiskSnapshotResponse> -> executeGetDiskSnapshot: Probability = 1.00, Count = 1
DescribeIpv6PoolsResponse -> DescribeIpv6PoolsResult: Probability = 1.00, Count = 1
DescribeIpv6Pools -> describeIpv6Pools: Probability = 1.00, Count = 1
DescribeIpv6PoolsRequest -> DescribeIpv6PoolsRequest: Probability = 1.00, Count = 1
Invoke<DescribeIpv6PoolsResponse> -> executeDescribeIpv6Pools: Probability = 1.00, Count = 1
UpdateDetectorResponse -> UpdateDetectorResult: Probability = 1.00, Count = 1
UpdateDetector -> updateDetector: Probability = 1.00, Count = 1
UpdateDetectorRequest -> UpdateDetectorRequest: Probability = 1.00, Count = 1
Invoke<UpdateDetectorResponse> -> executeUpdateDetector: Probability = 1.00, Count = 1
DeleteInstanceResponse -> DeleteInstanceResult: Probability = 1.00, Count = 1
DeleteInstance -> deleteInstance: Probability = 1.00, Count = 1
DeleteInstanceRequest -> DeleteInstanceRequest: Probability = 1.00, Count = 1
Invoke<DeleteInstanceResponse> -> executeDeleteInstance: Probability = 1.00, Count = 1
ListThreatIntelSetsResponse -> ListThreatIntelSetsResult: Probability = 1.00, Count = 1
ListThreatIntelSets -> listThreatIntelSets: Probability = 1.00, Count = 1
ListThreatIntelSetsRequest -> ListThreatIntelSetsRequest: Probability = 1.00, Count = 1
Invoke<ListThreatIntelSetsResponse> -> executeListThreatIntelSets: Probability = 1.00, Count = 1
ExportClientVpnClientConfigurationResponse -> ExportClientVpnClientConfigurationResult: Probability = 1.00, Count = 1
ExportClientVpnClientConfiguration -> exportClientVpnClientConfiguration: Probability = 1.00, Count = 1
ExportClientVpnClientConfigurationRequest -> ExportClientVpnClientConfigurationRequest: Probability = 1.00, Count = 1
Invoke<ExportClientVpnClientConfigurationResponse> -> executeExportClientVpnClientConfiguration: Probability = 1.00, Count = 1
currentPayloadScore, -> currentPayloadScore,: Probability = 1.00, Count = 1
dbParameterGroupName, -> dBParameterGroupName,: Probability = 1.00, Count = 1
dbParameterGroupFamily, -> dBParameterGroupFamily,: Probability = 1.00, Count = 1
this.costs[backwardId][forwardId] -> *: Probability = 0.67, Count = 2
this.costs[backwardId][forwardId] -> forwardId: Probability = 0.33, Count = 1
CreateTransitVirtualInterfaceResponse -> CreateTransitVirtualInterfaceResult: Probability = 1.00, Count = 1
CreateTransitVirtualInterface -> createTransitVirtualInterface: Probability = 1.00, Count = 1
CreateTransitVirtualInterfaceRequest -> CreateTransitVirtualInterfaceRequest: Probability = 1.00, Count = 1
Invoke<CreateTransitVirtualInterfaceResponse> -> executeCreateTransitVirtualInterface: Probability = 1.00, Count = 1
BatchDetectSentimentResponse -> BatchDetectSentimentResult: Probability = 1.00, Count = 1
BatchDetectSentiment -> batchDetectSentiment: Probability = 1.00, Count = 1
BatchDetectSentimentRequest -> BatchDetectSentimentRequest: Probability = 1.00, Count = 1
Invoke<BatchDetectSentimentResponse> -> executeBatchDetectSentiment: Probability = 1.00, Count = 1
Antlr4.Runtime.Misc.Interval -> o==null: Probability = 0.25, Count = 1
Antlr4.Runtime.Misc.Interval -> Interval: Probability = 0.75, Count = 3
other.a -> this.a==other.a: Probability = 1.00, Count = 1
other.b -> this.b==other.b: Probability = 1.00, Count = 1
smaller -> smaller: Probability = 1.00, Count = 3
e.endB -> e.endB: Probability = 1.00, Count = 1
GetBigFileThreshold -> getBigFileThreshold: Probability = 1.00, Count = 1
DeleteApplicationResponse -> DeleteApplicationResult: Probability = 1.00, Count = 1
DeleteApplication -> deleteApplication: Probability = 1.00, Count = 1
Invoke<DeleteApplicationResponse> -> executeDeleteApplication: Probability = 1.00, Count = 1
TokenOffsetPayloadTokenFilterFactory -> TokenOffsetPayloadTokenFilterFactory: Probability = 1.00, Count = 1
MultiFunction -> MultiFunction: Probability = 1.00, Count = 2
JCG.ListEqualityComparer<ValueSource>.Default.Equals -> this.sources.equals: Probability = 1.00, Count = 1
other.m_sources -> other.sources: Probability = 1.00, Count = 1
SpanQueryObjectBuilder -> SpanQueryObjectBuilder: Probability = 1.00, Count = 1
builder.GetSpanQuery -> builder.getSpanQuery: Probability = 1.00, Count = 1
RemoveTop -> removeTop: Probability = 1.00, Count = 3
currentTop -> currentTop: Probability = 1.00, Count = 2
DefaultPassageFormatter -> DefaultPassageFormatter: Probability = 1.00, Count = 1
ellipsis, -> ellipsis,: Probability = 1.00, Count = 1
escape -> escape: Probability = 1.00, Count = 2
ellipsis -> ellipsis: Probability = 1.00, Count = 2
this.m_ellipsis -> this.ellipsis: Probability = 1.00, Count = 1
UpdateImagePermissionsResponse -> UpdateImagePermissionsResult: Probability = 1.00, Count = 1
UpdateImagePermissions -> updateImagePermissions: Probability = 1.00, Count = 1
UpdateImagePermissionsRequest -> UpdateImagePermissionsRequest: Probability = 1.00, Count = 1
Invoke<UpdateImagePermissionsResponse> -> executeUpdateImagePermissions: Probability = 1.00, Count = 1
ListCustomVerificationEmailTemplatesResponse -> ListCustomVerificationEmailTemplatesResult: Probability = 1.00, Count = 1
ListCustomVerificationEmailTemplates -> listCustomVerificationEmailTemplates: Probability = 1.00, Count = 1
ListCustomVerificationEmailTemplatesRequest -> ListCustomVerificationEmailTemplatesRequest: Probability = 1.00, Count = 1
Invoke<ListCustomVerificationEmailTemplatesResponse> -> executeListCustomVerificationEmailTemplates: Probability = 1.00, Count = 1
DeleteQueryLoggingConfigResponse -> DeleteQueryLoggingConfigResult: Probability = 1.00, Count = 1
DeleteQueryLoggingConfig -> deleteQueryLoggingConfig: Probability = 1.00, Count = 1
DeleteQueryLoggingConfigRequest -> DeleteQueryLoggingConfigRequest: Probability = 1.00, Count = 1
Invoke<DeleteQueryLoggingConfigResponse> -> executeDeleteQueryLoggingConfig: Probability = 1.00, Count = 1
InvalidPatternException -> InvalidPatternException: Probability = 1.00, Count = 1
ResolveNameXIx -> resolveNameXIx: Probability = 1.00, Count = 1
_externalBookBlocks[extBookIndex].GetNameIx -> _externalBookBlocks[extBookIndex].getNameIx: Probability = 1.00, Count = 1
GetLuceneTerm -> getLuceneTerm: Probability = 1.00, Count = 1
HyphenationTree -> HyphenationTree: Probability = 1.00, Count = 1
m_stoplist -> stoplist: Probability = 1.00, Count = 1
23 -> 23: Probability = 1.00, Count = 1
m_classmap -> classmap: Probability = 1.00, Count = 1
m_vspace -> vspace: Probability = 1.00, Count = 1
m_vspace.Alloc -> vspace.alloc: Probability = 1.00, Count = 1
DescribeCollectionResponse -> DescribeCollectionResult: Probability = 1.00, Count = 1
DescribeCollection -> describeCollection: Probability = 1.00, Count = 1
DescribeCollectionRequest -> DescribeCollectionRequest: Probability = 1.00, Count = 1
Invoke<DescribeCollectionResponse> -> executeDescribeCollection: Probability = 1.00, Count = 1
GetSearchRequest -> GetSearchRequest: Probability = 1.00, Count = 1
"GetSearch", -> "GetSearch",: Probability = 1.00, Count = 1
"/search-delete" -> "/search-delete": Probability = 1.00, Count = 1
skipEofCheck -> skipEofCheck: Probability = 1.00, Count = 4
ConfigureHealthCheckResponse -> ConfigureHealthCheckResult: Probability = 1.00, Count = 1
ConfigureHealthCheck -> configureHealthCheck: Probability = 1.00, Count = 1
Invoke<ConfigureHealthCheckResponse> -> executeConfigureHealthCheck: Probability = 1.00, Count = 1
SetReaderValue -> setReaderValue: Probability = 1.00, Count = 1
TextReader" -> Reader": Probability = 1.00, Count = 1
DeleteUsagePlanResponse -> DeleteUsagePlanResult: Probability = 1.00, Count = 1
DeleteUsagePlan -> deleteUsagePlan: Probability = 1.00, Count = 1
DeleteUsagePlanRequest -> DeleteUsagePlanRequest: Probability = 1.00, Count = 1
Invoke<DeleteUsagePlanResponse> -> executeDeleteUsagePlan: Probability = 1.00, Count = 1
DeleteThreatIntelSetResponse -> DeleteThreatIntelSetResult: Probability = 1.00, Count = 1
DeleteThreatIntelSet -> deleteThreatIntelSet: Probability = 1.00, Count = 1
DeleteThreatIntelSetRequest -> DeleteThreatIntelSetRequest: Probability = 1.00, Count = 1
Invoke<DeleteThreatIntelSetResponse> -> executeDeleteThreatIntelSet: Probability = 1.00, Count = 1
Invoke<DescribePlacementGroupsResponse> -> executeDescribePlacementGroups: Probability = 1.00, Count = 1
EnableAddOnResponse -> EnableAddOnResult: Probability = 1.00, Count = 1
EnableAddOn -> enableAddOn: Probability = 1.00, Count = 1
EnableAddOnRequest -> EnableAddOnRequest: Probability = 1.00, Count = 1
Invoke<EnableAddOnResponse> -> executeEnableAddOn: Probability = 1.00, Count = 1
GetWeightedSpanTerm -> getWeightedSpanTerm: Probability = 1.00, Count = 1
Slope -> Slope: Probability = 1.00, Count = 1
LinearRegressionFunction.FUNCTION.SLOPE -> FUNCTION.SLOPE: Probability = 1.00, Count = 1
Truncated -> getTruncated: Probability = 1.00, Count = 1
UpdateSubnetGroupResponse -> UpdateSubnetGroupResult: Probability = 1.00, Count = 1
UpdateSubnetGroup -> updateSubnetGroup: Probability = 1.00, Count = 1
UpdateSubnetGroupRequest -> UpdateSubnetGroupRequest: Probability = 1.00, Count = 1
Invoke<UpdateSubnetGroupResponse> -> executeUpdateSubnetGroup: Probability = 1.00, Count = 1
Pop_Intersect -> pop_intersect: Probability = 1.00, Count = 1
JapaneseBaseFormFilterFactory -> JapaneseBaseFormFilterFactory: Probability = 1.00, Count = 1
fat -> fat: Probability = 1.00, Count = 2
GetLinesDeleted -> getLinesDeleted: Probability = 1.00, Count = 1
nDeleted -> nDeleted: Probability = 1.00, Count = 1
ids[i] -> ids[i]: Probability = 0.60, Count = 3
ids[i] -> ids[upto]: Probability = 0.20, Count = 1
ids[i] -> upto++: Probability = 0.20, Count = 1
AccessKey -> AccessKey: Probability = 1.00, Count = 1
GetDomainResponse -> GetDomainResult: Probability = 1.00, Count = 1
GetDomain -> getDomain: Probability = 1.00, Count = 1
GetDomainRequest -> GetDomainRequest: Probability = 1.00, Count = 1
Invoke<GetDomainResponse> -> executeGetDomain: Probability = 1.00, Count = 1
ListTypeRegistrationsResponse -> ListTypeRegistrationsResult: Probability = 1.00, Count = 1
ListTypeRegistrations -> listTypeRegistrations: Probability = 1.00, Count = 1
ListTypeRegistrationsRequest -> ListTypeRegistrationsRequest: Probability = 1.00, Count = 1
Invoke<ListTypeRegistrationsResponse> -> executeListTypeRegistrations: Probability = 1.00, Count = 1
DeleteTableRequest -> DeleteTableRequest: Probability = 1.00, Count = 1
UpdateAccountSettingsResponse -> UpdateAccountSettingsResult: Probability = 1.00, Count = 1
UpdateAccountSettings -> updateAccountSettings: Probability = 1.00, Count = 1
UpdateAccountSettingsRequest -> UpdateAccountSettingsRequest: Probability = 1.00, Count = 1
Invoke<UpdateAccountSettingsResponse> -> executeUpdateAccountSettings: Probability = 1.00, Count = 1
RecordTimeSec -> .incRef: Probability = 0.50, Count = 1
RecordTimeSec -> recordTimeSec: Probability = 0.50, Count = 1
NANOS_PER_SEC -> NANOS_PER_SEC: Probability = 1.00, Count = 1
"accountId" -> AWS: Probability = 0.25, Count = 1
"accountId" -> account: Probability = 0.25, Count = 1
"accountId" -> ID: Probability = 0.25, Count = 1
"accountId" -> specified": Probability = 0.25, Count = 1
ListMomentPhotosRequest -> ListMomentPhotosRequest: Probability = 1.00, Count = 1
"ListMomentPhotos", -> "ListMomentPhotos",: Probability = 1.00, Count = 1
DisassociateFromMasterAccountResponse -> DisassociateFromMasterAccountResult: Probability = 1.00, Count = 1
DisassociateFromMasterAccount -> disassociateFromMasterAccount: Probability = 1.00, Count = 1
DisassociateFromMasterAccountRequest -> DisassociateFromMasterAccountRequest: Probability = 1.00, Count = 1
Invoke<DisassociateFromMasterAccountResponse> -> executeDisassociateFromMasterAccount: Probability = 1.00, Count = 1
GetVoiceTemplateResponse -> GetVoiceTemplateResult: Probability = 1.00, Count = 1
GetVoiceTemplate -> getVoiceTemplate: Probability = 1.00, Count = 1
GetVoiceTemplateRequest -> GetVoiceTemplateRequest: Probability = 1.00, Count = 1
Invoke<GetVoiceTemplateResponse> -> executeGetVoiceTemplate: Probability = 1.00, Count = 1
_filter.GetBits -> filter.getBits: Probability = 1.00, Count = 1
RejectInvitationResponse -> RejectInvitationResult: Probability = 1.00, Count = 1
RejectInvitation -> rejectInvitation: Probability = 1.00, Count = 1
RejectInvitationRequest -> RejectInvitationRequest: Probability = 1.00, Count = 1
Invoke<RejectInvitationResponse> -> executeRejectInvitation: Probability = 1.00, Count = 1
RejectQualificationRequestResponse -> RejectQualificationRequestResult: Probability = 1.00, Count = 1
RejectQualificationRequest -> rejectQualificationRequest: Probability = 1.00, Count = 1
RejectQualificationRequestRequest -> RejectQualificationRequestRequest: Probability = 1.00, Count = 1
Invoke<RejectQualificationRequestResponse> -> executeRejectQualificationRequest: Probability = 1.00, Count = 1
JaroWinklerDistance -> JaroWinklerDistance: Probability = 1.00, Count = 2
DeregisterGameServerResponse -> DeregisterGameServerResult: Probability = 1.00, Count = 1
DeregisterGameServer -> deregisterGameServer: Probability = 1.00, Count = 1
DeregisterGameServerRequest -> DeregisterGameServerRequest: Probability = 1.00, Count = 1
Invoke<DeregisterGameServerResponse> -> executeDeregisterGameServer: Probability = 1.00, Count = 1
bufferedDocs.Length -> bufferedDocs.size: Probability = 1.00, Count = 2
Sharpen.Iterator<string> -> Iterator<String>: Probability = 1.00, Count = 3
names.Values.Iterator -> names.values: Probability = 1.00, Count = 1
DeleteRoomMembershipResponse -> DeleteRoomMembershipResult: Probability = 1.00, Count = 1
DeleteRoomMembership -> deleteRoomMembership: Probability = 1.00, Count = 1
DeleteRoomMembershipRequest -> DeleteRoomMembershipRequest: Probability = 1.00, Count = 1
Invoke<DeleteRoomMembershipResponse> -> executeDeleteRoomMembership: Probability = 1.00, Count = 1
CreateAutoScalingGroupResponse -> CreateAutoScalingGroupResult: Probability = 1.00, Count = 1
CreateAutoScalingGroup -> createAutoScalingGroup: Probability = 1.00, Count = 1
CreateAutoScalingGroupRequest -> CreateAutoScalingGroupRequest: Probability = 1.00, Count = 1
Invoke<CreateAutoScalingGroupResponse> -> executeCreateAutoScalingGroup: Probability = 1.00, Count = 1
floorKey -> floorKey: Probability = 1.00, Count = 1
isValidating -> isValidating: Probability = 1.00, Count = 1
getFeature -> getFeature: Probability = 1.00, Count = 1
org.xmlpull.v1.XmlPullParserClass.FEATURE_VALIDATION -> XmlPullParser.FEATURE_VALIDATION: Probability = 1.00, Count = 1
UpdateScalingParametersResponse -> UpdateScalingParametersResult: Probability = 1.00, Count = 1
UpdateScalingParameters -> updateScalingParameters: Probability = 1.00, Count = 1
UpdateScalingParametersRequest -> UpdateScalingParametersRequest: Probability = 1.00, Count = 1
Invoke<UpdateScalingParametersResponse> -> executeUpdateScalingParameters: Probability = 1.00, Count = 1
ModifyDBClusterParameterGroupResponse -> ModifyDBClusterParameterGroupResult: Probability = 1.00, Count = 1
ModifyDBClusterParameterGroup -> modifyDBClusterParameterGroup: Probability = 1.00, Count = 1
ModifyDBClusterParameterGroupRequest -> ModifyDBClusterParameterGroupRequest: Probability = 1.00, Count = 1
Invoke<ModifyDBClusterParameterGroupResponse> -> executeModifyDBClusterParameterGroup: Probability = 1.00, Count = 1
GetOperationsForResourceResponse -> GetOperationsForResourceResult: Probability = 1.00, Count = 1
GetOperationsForResource -> getOperationsForResource: Probability = 1.00, Count = 1
GetOperationsForResourceRequest -> GetOperationsForResourceRequest: Probability = 1.00, Count = 1
Invoke<GetOperationsForResourceResponse> -> executeGetOperationsForResource: Probability = 1.00, Count = 1
TokenizerModel -> TokenizerModel: Probability = 1.00, Count = 1
TokenizerME -> TokenizerME: Probability = 1.00, Count = 1
"StartImageScan", -> "StartImageScan",: Probability = 1.00, Count = 1
UpdateFleetResponse -> UpdateFleetResult: Probability = 1.00, Count = 1
UpdateFleet -> updateFleet: Probability = 1.00, Count = 1
UpdateFleetRequest -> UpdateFleetRequest: Probability = 1.00, Count = 1
Invoke<UpdateFleetResponse> -> executeUpdateFleet: Probability = 1.00, Count = 1
android.text.Editable -> Editable: Probability = 0.50, Count = 1
android.text.Editable -> newEditable: Probability = 0.50, Count = 1
android.text.SpannableStringBuilder -> CalculatorEditable: Probability = 0.50, Count = 1
android.text.SpannableStringBuilder -> source,: Probability = 0.50, Count = 1
paths.Length -> paths.length: Probability = 1.00, Count = 2
DescribeHostedConnectionsResponse -> DescribeHostedConnectionsResult: Probability = 1.00, Count = 1
DescribeHostedConnections -> describeHostedConnections: Probability = 1.00, Count = 1
DescribeHostedConnectionsRequest -> DescribeHostedConnectionsRequest: Probability = 1.00, Count = 1
Invoke<DescribeHostedConnectionsResponse> -> executeDescribeHostedConnections: Probability = 1.00, Count = 1
RejectTransitGatewayPeeringAttachmentResponse -> RejectTransitGatewayPeeringAttachmentResult: Probability = 1.00, Count = 1
RejectTransitGatewayPeeringAttachment -> rejectTransitGatewayPeeringAttachment: Probability = 1.00, Count = 1
RejectTransitGatewayPeeringAttachmentRequest -> RejectTransitGatewayPeeringAttachmentRequest: Probability = 1.00, Count = 1
Invoke<RejectTransitGatewayPeeringAttachmentResponse> -> executeRejectTransitGatewayPeeringAttachment: Probability = 1.00, Count = 1
ToPoints -> toPoints: Probability = 1.00, Count = 1
emu -> emu: Probability = 1.00, Count = 1
GetBinaryValue -> getBinaryValue: Probability = 1.00, Count = 1
_countRecord -> _countRecord: Probability = 1.00, Count = 1
crns -> crns: Probability = 1.00, Count = 2
_crns -> _crns: Probability = 1.00, Count = 1
UpdateModelVersionResponse -> UpdateModelVersionResult: Probability = 1.00, Count = 1
UpdateModelVersion -> updateModelVersion: Probability = 1.00, Count = 1
UpdateModelVersionRequest -> UpdateModelVersionRequest: Probability = 1.00, Count = 1
Invoke<UpdateModelVersionResponse> -> executeUpdateModelVersion: Probability = 1.00, Count = 1
describeContents -> describeContents: Probability = 1.00, Count = 1
FetchConnection -> FetchConnection: Probability = 0.50, Count = 1
FetchConnection -> openFetch: Probability = 0.50, Count = 1
.onlyOneFetchSupported -> .onlyOneFetchSupported: Probability = 1.00, Count = 1
BundleFetchConnection -> BundleFetchConnection: Probability = 1.00, Count = 1
DeleteWorkGroupResponse -> DeleteWorkGroupResult: Probability = 1.00, Count = 1
DeleteWorkGroup -> deleteWorkGroup: Probability = 1.00, Count = 1
DeleteWorkGroupRequest -> DeleteWorkGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteWorkGroupResponse> -> executeDeleteWorkGroup: Probability = 1.00, Count = 1
GetApiResponse -> GetApiResult: Probability = 1.00, Count = 1
GetApi -> getApi: Probability = 1.00, Count = 1
GetApiRequest -> GetApiRequest: Probability = 1.00, Count = 1
Invoke<GetApiResponse> -> executeGetApi: Probability = 1.00, Count = 1
java.nio.ReadOnlyLongArrayBuffer -> ReadOnlyLongArrayBuffer: Probability = 1.00, Count = 1
"Action[" -> "Action[": Probability = 1.00, Count = 1
InvalidRef -> invalidRef: Probability = 1.00, Count = 1
IEnumerator<Entry> -> Iterator<Entry>: Probability = 1.00, Count = 1
GetEntries -> getEntries: Probability = 1.00, Count = 1
FilteringIterator -> FilteringIterator: Probability = 1.00, Count = 1
HEADER]\n" -> HEADER]\n": Probability = 1.00, Count = 2
Value.CopyBytes -> value.copyBytes: Probability = 1.00, Count = 1
readerIndex -> readerIndex: Probability = 1.00, Count = 2
this.ReaderIndex -> this.readerIndex: Probability = 1.00, Count = 1
AddTagsResponse -> AddTagsResult: Probability = 1.00, Count = 1
AddTags -> addTags: Probability = 1.00, Count = 1
Invoke<AddTagsResponse> -> executeAddTags: Probability = 1.00, Count = 1
UpdateConfigurationSetTrackingOptionsResponse -> UpdateConfigurationSetTrackingOptionsResult: Probability = 1.00, Count = 1
UpdateConfigurationSetTrackingOptions -> updateConfigurationSetTrackingOptions: Probability = 1.00, Count = 1
UpdateConfigurationSetTrackingOptionsRequest -> UpdateConfigurationSetTrackingOptionsRequest: Probability = 1.00, Count = 1
Invoke<UpdateConfigurationSetTrackingOptionsResponse> -> executeUpdateConfigurationSetTrackingOptions: Probability = 1.00, Count = 1
GetVoiceConnectorStreamingConfigurationResponse -> GetVoiceConnectorStreamingConfigurationResult: Probability = 1.00, Count = 1
GetVoiceConnectorStreamingConfiguration -> getVoiceConnectorStreamingConfiguration: Probability = 1.00, Count = 1
GetVoiceConnectorStreamingConfigurationRequest -> GetVoiceConnectorStreamingConfigurationRequest: Probability = 1.00, Count = 1
Invoke<GetVoiceConnectorStreamingConfigurationResponse> -> executeGetVoiceConnectorStreamingConfiguration: Probability = 1.00, Count = 1
GetRKNumberAt -> getRKNumberAt: Probability = 1.00, Count = 1
RKUtil.DecodeNumber -> RKUtil.decodeNumber: Probability = 1.00, Count = 1
field_3_rks[coffset].rk -> field_3_rks[coffset].rk: Probability = 1.00, Count = 1
ReimportApiResponse -> ReimportApiResult: Probability = 1.00, Count = 1
ReimportApi -> reimportApi: Probability = 1.00, Count = 1
ReimportApiRequest -> ReimportApiRequest: Probability = 1.00, Count = 1
Invoke<ReimportApiResponse> -> executeReimportApi: Probability = 1.00, Count = 1
this.list.voidLink -> list.voidLink: Probability = 1.00, Count = 1
block[offset] -> block[offset]: Probability = 0.75, Count = 3
block[offset] -> offset+1: Probability = 0.25, Count = 1
byte[n] -> byte[n]: Probability = 1.00, Count = 1
SubmoduleUpdate -> submoduleUpdate: Probability = 1.00, Count = 1
GetVpcLinksResponse -> GetVpcLinksResult: Probability = 1.00, Count = 1
GetVpcLinks -> getVpcLinks: Probability = 1.00, Count = 1
GetVpcLinksRequest -> GetVpcLinksRequest: Probability = 1.00, Count = 1
Invoke<GetVpcLinksResponse> -> executeGetVpcLinks: Probability = 1.00, Count = 1
RemoveResourcePermissionResponse -> RemoveResourcePermissionResult: Probability = 1.00, Count = 1
RemoveResourcePermission -> removeResourcePermission: Probability = 1.00, Count = 1
RemoveResourcePermissionRequest -> RemoveResourcePermissionRequest: Probability = 1.00, Count = 1
Invoke<RemoveResourcePermissionResponse> -> executeRemoveResourcePermission: Probability = 1.00, Count = 1
ListIndexResponse -> ListIndexResult: Probability = 1.00, Count = 1
ListIndex -> listIndex: Probability = 1.00, Count = 1
ListIndexRequest -> ListIndexRequest: Probability = 1.00, Count = 1
Invoke<ListIndexResponse> -> executeListIndex: Probability = 1.00, Count = 1
IList<int> -> List<Integer>: Probability = 0.67, Count = 2
IList<int> -> toList: Probability = 0.33, Count = 1
publicIp, -> publicIp,: Probability = 1.00, Count = 1
bgpAsn -> bgpAsn: Probability = 1.00, Count = 2
_bgpAsn -> setBgpAsn: Probability = 1.00, Count = 1
getWeekNo -> getWeekNo: Probability = 1.00, Count = 1
GregorianCalendar -> cal,: Probability = 0.33, Count = 1
GregorianCalendar -> weekStartOn: Probability = 0.67, Count = 2
weekOfYear -> cal.setFirstDayOfWeek: Probability = 0.40, Count = 2
weekOfYear -> Calendar.MONDAY: Probability = 0.20, Count = 1
weekOfYear -> cal.get: Probability = 0.20, Count = 1
weekOfYear -> Calendar.WEEK_OF_YEAR: Probability = 0.20, Count = 1
rptGroup -> rpt:"+rptGroup+",i"+rptInd: Probability = 1.00, Count = 1
GetUserEndpointsResponse -> GetUserEndpointsResult: Probability = 1.00, Count = 1
GetUserEndpoints -> getUserEndpoints: Probability = 1.00, Count = 1
GetUserEndpointsRequest -> GetUserEndpointsRequest: Probability = 1.00, Count = 1
Invoke<GetUserEndpointsResponse> -> executeGetUserEndpoints: Probability = 1.00, Count = 1
UAX29URLEmailTokenizerImpl -> UAX29URLEmailTokenizerImpl: Probability = 1.00, Count = 1
.illegalCombinationOfArguments, -> .illegalCombinationOfArguments,: Probability = 1.00, Count = 1
"<paths>...", -> "<paths>...",: Probability = 1.00, Count = 1
--hard]" -> --hard]": Probability = 1.00, Count = 1
filepaths.AddItem -> filepaths.add: Probability = 1.00, Count = 1
FindNextRecordBySid -> findNextRecordBySid: Probability = 1.00, Count = 1
sid, -> sid,: Probability = 1.00, Count = 1
.ToArray -> .toArray: Probability = 1.00, Count = 1
GetDomainNamesResponse -> GetDomainNamesResult: Probability = 1.00, Count = 1
GetDomainNames -> getDomainNames: Probability = 1.00, Count = 1
GetDomainNamesRequest -> GetDomainNamesRequest: Probability = 1.00, Count = 1
Invoke<GetDomainNamesResponse> -> executeGetDomainNames: Probability = 1.00, Count = 1
UpdateTemplateAliasResponse -> UpdateTemplateAliasResult: Probability = 1.00, Count = 1
UpdateTemplateAlias -> updateTemplateAlias: Probability = 1.00, Count = 1
UpdateTemplateAliasRequest -> UpdateTemplateAliasRequest: Probability = 1.00, Count = 1
Invoke<UpdateTemplateAliasResponse> -> executeUpdateTemplateAlias: Probability = 1.00, Count = 1
GetReceivePack -> getReceivePack: Probability = 1.00, Count = 1
chseq -> chseq: Probability = 1.00, Count = 2
k, -> n-k,: Probability = 1.00, Count = 2
GetAccessSecret -> getAccessSecret: Probability = 1.00, Count = 1
.GetAccessKeySecret -> .getAccessKeySecret: Probability = 1.00, Count = 1
bsrs -> bsrs: Probability = 0.60, Count = 3
bsrs -> BoundSheetRecord[boundSheetRecords.size: Probability = 0.20, Count = 1
bsrs -> BoundSheetRecord::compareRecords: Probability = 0.20, Count = 1
BOFComparator -> bsrs,: Probability = 1.00, Count = 1
DeleteNotebookInstanceResponse -> DeleteNotebookInstanceResult: Probability = 1.00, Count = 1
DeleteNotebookInstance -> deleteNotebookInstance: Probability = 1.00, Count = 1
DeleteNotebookInstanceRequest -> DeleteNotebookInstanceRequest: Probability = 1.00, Count = 1
Invoke<DeleteNotebookInstanceResponse> -> executeDeleteNotebookInstance: Probability = 1.00, Count = 1
Constants.DOT_GIT_EXT -> Constants.DOT_GIT_EXT: Probability = 1.00, Count = 2
ListWorkflowTypesResponse -> WorkflowTypeInfos: Probability = 1.00, Count = 1
ListWorkflowTypes -> listWorkflowTypes: Probability = 1.00, Count = 1
ListWorkflowTypesRequest -> ListWorkflowTypesRequest: Probability = 1.00, Count = 1
Invoke<ListWorkflowTypesResponse> -> executeListWorkflowTypes: Probability = 1.00, Count = 1
CopyClusterSnapshotResponse -> Snapshot: Probability = 1.00, Count = 1
CopyClusterSnapshot -> copyClusterSnapshot: Probability = 1.00, Count = 1
CopyClusterSnapshotRequest -> CopyClusterSnapshotRequest: Probability = 1.00, Count = 1
Invoke<CopyClusterSnapshotResponse> -> executeCopyClusterSnapshot: Probability = 1.00, Count = 1
evalCell -> evalCell: Probability = 1.00, Count = 2
.HSSFCell -> .getHSSFCell: Probability = 1.00, Count = 1
DisassociateVPCFromHostedZoneResponse -> DisassociateVPCFromHostedZoneResult: Probability = 1.00, Count = 1
DisassociateVPCFromHostedZone -> disassociateVPCFromHostedZone: Probability = 1.00, Count = 1
DisassociateVPCFromHostedZoneRequest -> DisassociateVPCFromHostedZoneRequest: Probability = 1.00, Count = 1
Invoke<DisassociateVPCFromHostedZoneResponse> -> executeDisassociateVPCFromHostedZone: Probability = 1.00, Count = 1
SetBytesValue -> setBytesValue: Probability = 1.00, Count = 1
GermanStemmer -> GermanStemmer: Probability = 1.00, Count = 1
UntagMeetingResponse -> UntagMeetingResult: Probability = 1.00, Count = 1
UntagMeeting -> untagMeeting: Probability = 1.00, Count = 1
UntagMeetingRequest -> UntagMeetingRequest: Probability = 1.00, Count = 1
Invoke<UntagMeetingResponse> -> executeUntagMeeting: Probability = 1.00, Count = 1
android.graphics.Rect -> Rect: Probability = 0.60, Count = 3
android.graphics.Rect -> rhs: Probability = 0.20, Count = 1
android.graphics.Rect -> rhs.isValid: Probability = 0.20, Count = 1
r.bottom -> rhs.w: Probability = 1.00, Count = 1
_lastColumn -> _lastColumn: Probability = 1.00, Count = 1
JobFlowInstancesConfig -> JobFlowInstancesConfig: Probability = 1.00, Count = 1
ListPublishedSchemaArnsResponse -> ListPublishedSchemaArnsResult: Probability = 1.00, Count = 1
ListPublishedSchemaArns -> listPublishedSchemaArns: Probability = 1.00, Count = 1
ListPublishedSchemaArnsRequest -> ListPublishedSchemaArnsRequest: Probability = 1.00, Count = 1
Invoke<ListPublishedSchemaArnsResponse> -> executeListPublishedSchemaArns: Probability = 1.00, Count = 1
@ref.GetLeaf -> ref.getLeaf: Probability = 1.00, Count = 1
DeleteVoiceConnectorGroupResponse -> DeleteVoiceConnectorGroupResult: Probability = 1.00, Count = 1
DeleteVoiceConnectorGroup -> deleteVoiceConnectorGroup: Probability = 1.00, Count = 1
DeleteVoiceConnectorGroupRequest -> DeleteVoiceConnectorGroupRequest: Probability = 1.00, Count = 1
Invoke<DeleteVoiceConnectorGroupResponse> -> executeDeleteVoiceConnectorGroup: Probability = 1.00, Count = 1
this.intervals -> this.intervals: Probability = 1.00, Count = 1
IteratorQueue -> IteratorQueue: Probability = 1.00, Count = 1
IEnumerator<T> -> Iterator<T>: Probability = 1.00, Count = 1
this.iter -> this.iter: Probability = 1.00, Count = 1
removeTop -> removeTop: Probability = 1.00, Count = 1
StemmerOverrideMap -> StemmerOverrideMap: Probability = 1.00, Count = 1
DeleteAdmChannelResponse -> DeleteAdmChannelResult: Probability = 1.00, Count = 1
DeleteAdmChannel -> deleteAdmChannel: Probability = 1.00, Count = 1
DeleteAdmChannelRequest -> DeleteAdmChannelRequest: Probability = 1.00, Count = 1
Invoke<DeleteAdmChannelResponse> -> executeDeleteAdmChannel: Probability = 1.00, Count = 1
SetSubscriptionAttributesRequest -> SetSubscriptionAttributesRequest: Probability = 1.00, Count = 1
subscriptionArn, -> subscriptionArn,: Probability = 1.00, Count = 1
m_buf[m_len++] -> buf[len++]: Probability = 1.00, Count = 1
