public virtual ListSpeechSynthesisTasksResponse ListSpeechSynthesisTasks ( ListSpeechSynthesisTasksRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = ListSpeechSynthesisTasksRequestMarshaller . Instance ; options . ResponseUnmarshaller = ListSpeechSynthesisTasksResponseUnmarshaller . Instance ; return Invoke < ListSpeechSynthesisTasksResponse > ( request , options ) ; }
public virtual UpdateJourneyStateResponse UpdateJourneyState ( UpdateJourneyStateRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = UpdateJourneyStateRequestMarshaller . Instance ; options . ResponseUnmarshaller = UpdateJourneyStateResponseUnmarshaller . Instance ; return Invoke < UpdateJourneyStateResponse > ( request , options ) ; }
public void RemovePresentationFormat ( ) { MutableSection s = ( MutableSection ) FirstSection ; s . RemoveProperty ( PropertyIDMap . PID_PRESFORMAT ) ; }
public CellRangeAddressList  ( int firstRow , int lastRow , int firstCol , int lastCol ) : this ( ) { AddCellRangeAddress ( firstRow , firstCol , lastRow , lastCol ) ; }
public virtual void delete ( int key ) { int i = binarySearch ( mKeys , 0 , mSize , key ) ; if ( i >= 0 ) { if ( mValues [ i ] != DELETED ) { mValues [ i ] = DELETED ; mGarbage = true ; } } }
public virtual NGit . Api . CreateBranchCommand SetStartPoint ( RevCommit startPoint ) { CheckCallable ( ) ; this . startCommit = startPoint ; this . startPoint = null ; return this ; }
public int centerX ( ) { return ( left + right ) >> 1 ; }
public virtual ListPresetsResponse ListPresets ( ) { return ListPresets ( new ListPresetsRequest ( ) ) ; }
public virtual DeleteFolderContentsResponse DeleteFolderContents ( DeleteFolderContentsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DeleteFolderContentsRequestMarshaller . Instance ; options . ResponseUnmarshaller = DeleteFolderContentsResponseUnmarshaller . Instance ; return Invoke < DeleteFolderContentsResponse > ( request , options ) ; }
public virtual GetConsoleOutputResponse GetConsoleOutput ( GetConsoleOutputRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = GetConsoleOutputRequestMarshaller . Instance ; options . ResponseUnmarshaller = GetConsoleOutputResponseUnmarshaller . Instance ; return Invoke < GetConsoleOutputResponse > ( request , options ) ; }
public virtual PutMailboxPermissionsResponse PutMailboxPermissions ( PutMailboxPermissionsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = PutMailboxPermissionsRequestMarshaller . Instance ; options . ResponseUnmarshaller = PutMailboxPermissionsResponseUnmarshaller . Instance ; return Invoke < PutMailboxPermissionsResponse > ( request , options ) ; }
public virtual DisableSnapshotCopyResponse DisableSnapshotCopy ( DisableSnapshotCopyRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DisableSnapshotCopyRequestMarshaller . Instance ; options . ResponseUnmarshaller = DisableSnapshotCopyResponseUnmarshaller . Instance ; return Invoke < DisableSnapshotCopyResponse > ( request , options ) ; }
public static string StripExtension ( string filename ) { int idx = filename . IndexOf ( '.' ) ; if ( idx != - 1 ) { filename = filename . Substring ( 0 , idx ) ; } return filename ; }
public override java . nio . ByteBuffer putInt ( int value ) { throw new System . NotImplementedException ( ) ; }
public int LastIndexOf ( int o ) { int rval = _limit - 1 ; for ( ; rval >= 0 ; rval -- ) { if ( o == _array [ rval ] ) { break ; } } return rval ; }
public virtual void SetCountsByTime ( int [ ] counts , long msecStep ) { countsByTime = counts ; countsByTimeStepMSec = msecStep ; }
public FeatHdrRecord  ( RecordInputStream in1 ) { futureHeader = new FtrHeader ( in1 ) ; isf_sharedFeatureType = in1 . ReadShort ( ) ; reserved = ( byte ) in1 . ReadByte ( ) ; cbHdrData = in1 . ReadInt ( ) ; rgbHdrData = in1 . ReadRemainder ( ) ; }
public CopyOnWriteArrayList  ( ) { elements = libcore . util . EmptyArray . OBJECT ; }
public WriteRequest  ( DeleteRequest deleteRequest ) { _deleteRequest = deleteRequest ; }
public void ReadFully ( byte [ ] buf ) { _in . ReadFully ( buf ) ; }
public static ICell GetCell ( IRow row , int column ) { ICell cell = row . GetCell ( column ) ; if ( cell == null ) { cell = row . CreateCell ( column ) ; } return cell ; }
public virtual void SetPackConfig ( PackConfig pc ) { this . packConfig = pc ; }
public override string GetSignerName ( ) { return " HMAC-SHA1 " ; }
public virtual Antlr4 . Runtime . Misc . IntervalSet Or ( IIntSet a ) { Antlr4 . Runtime . Misc . IntervalSet o = new Antlr4 . Runtime . Misc . IntervalSet ( ) ; o . AddAll ( this ) ; o . AddAll ( a ) ; return o ; }
public override String ToString ( ) { StringBuilder sb = new StringBuilder ( 64 ) ; sb . Append ( GetType ( ) . Name ) . Append ( "  [ " ) ; sb . Append ( value ) ; sb . Append ( " ] " ) ; return sb . ToString ( ) ; }
public virtual DescribeVpcEndpointServicePermissionsResponse DescribeVpcEndpointServicePermissions ( DescribeVpcEndpointServicePermissionsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribeVpcEndpointServicePermissionsRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribeVpcEndpointServicePermissionsResponseUnmarshaller . Instance ; return Invoke < DescribeVpcEndpointServicePermissionsResponse > ( request , options ) ; }
public static byte [ ] copyOfRange ( byte [ ] original , int start , int end ) { if ( start > end ) { throw new System . ArgumentException ( ) ; } int originalLength = original . Length ; if ( start < 0 || start > originalLength ) { throw new System . IndexOutOfRangeException ( ) ; } int resultLength = end - start ; int copyLength = System . Math . Min ( resultLength , originalLength - start ) ; byte [ ] result = new byte [ resultLength ] ; System . Array . Copy ( original , start , result , 0 , copyLength ) ; return result ; }
public ListTopicsRequest  ( string nextToken ) { _nextToken = nextToken ; }
public override void Finish ( FieldInfos fis , int numDocs ) { if ( ! ( pendingDocs . Count == 0 ) ) { Flush ( ) ; } if ( numDocs != this . numDocs ) { throw new Exception ( " Wrote  " + this . numDocs + "  docs, finish called with numDocs= " + numDocs ) ; } indexWriter . Finish ( numDocs , vectorsStream . GetFilePointer ( ) ) ; CodecUtil . WriteFooter ( vectorsStream ) ; }
public override bool IsIndexTerm ( BytesRef term , TermStats stats ) { if ( count >= interval ) { count = 1 ; return true ; } else { count ++ ; return false ; } }
public virtual AssociateDhcpOptionsResponse AssociateDhcpOptions ( AssociateDhcpOptionsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = AssociateDhcpOptionsRequestMarshaller . Instance ; options . ResponseUnmarshaller = AssociateDhcpOptionsResponseUnmarshaller . Instance ; return Invoke < AssociateDhcpOptionsResponse > ( request , options ) ; }
public override ValueEval Evaluate ( int srcRowIndex , int srcColumnIndex , ValueEval arg0 , ValueEval arg1 , ValueEval arg2 ) { return Evaluate ( srcRowIndex , srcColumnIndex , arg0 , arg1 , arg2 , DEFAULT_ARG3 ) ; }
public virtual void Disconnect ( ) { if ( sock . IsConnected ( ) ) { sock . Disconnect ( ) ; } }
public PredictionContext Add ( PredictionContext ctx ) { if ( ctx == PredictionContext . EMPTY ) return PredictionContext . EMPTY ; PredictionContext existing = cache . Get ( ctx ) ; if ( existing != null ) { return existing ; } cache . Put ( ctx , ctx ) ; return ctx ; }
public virtual UploadLayerPartResponse UploadLayerPart ( UploadLayerPartRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = UploadLayerPartRequestMarshaller . Instance ; options . ResponseUnmarshaller = UploadLayerPartResponseUnmarshaller . Instance ; return Invoke < UploadLayerPartResponse > ( request , options ) ; }
public virtual string GetScriptText ( ) { return GetScriptText ( null , null ) ; }
public virtual DescribeClusterSubnetGroupsResponse DescribeClusterSubnetGroups ( ) { return DescribeClusterSubnetGroups ( new DescribeClusterSubnetGroupsRequest ( ) ) ; }
public override char SetIndex ( int position ) { if ( position < BeginIndex || position > EndIndex ) throw new ArgumentException ( " Illegal Position:  " + position ) ; index = start + position ; return Current ; }
public virtual GetPhoneNumberOrderResponse GetPhoneNumberOrder ( GetPhoneNumberOrderRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = GetPhoneNumberOrderRequestMarshaller . Instance ; options . ResponseUnmarshaller = GetPhoneNumberOrderResponseUnmarshaller . Instance ; return Invoke < GetPhoneNumberOrderResponse > ( request , options ) ; }
public EpsilonTransition  ( ATNState target , int outermostPrecedenceReturn ) : base ( target ) { this . outermostPrecedenceReturn = outermostPrecedenceReturn ; }
public virtual NGit . Api . DiffCommand SetContextLines ( int contextLines ) { this . contextLines = contextLines ; return this ; }
public virtual RejectVpcPeeringConnectionResponse RejectVpcPeeringConnection ( RejectVpcPeeringConnectionRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = RejectVpcPeeringConnectionRequestMarshaller . Instance ; options . ResponseUnmarshaller = RejectVpcPeeringConnectionResponseUnmarshaller . Instance ; return Invoke < RejectVpcPeeringConnectionResponse > ( request , options ) ; }
public static bool equals ( int [ ] array1 , int [ ] array2 ) { if ( array1 == array2 ) { return true ; } if ( array1 == null || array2 == null || array1 . Length != array2 . Length ) { return false ; } { for ( int i = 0 ; i < array1 . Length ; i ++ ) { if ( array1 [ i ] != array2 [ i ] ) { return false ; } } } return true ; }
public static void Main ( string [ ] args ) { if ( args . Length < 1 ) { throw new ArgumentException ( ) ; } QualityQueriesFinder qqf = new QualityQueriesFinder ( FSDirectory . Open ( new DirectoryInfo ( args [ 0 ] ) ) ) ; string [ ] q = qqf . BestQueries ( " body " , 20 ) ; for ( int i = 0 ; i < q . Length ; i ++ ) { Console . WriteLine ( newline + FormatQueryAsTrecTopic ( i , q [ i ] , null , null ) ) ; } }
public CharsRef  ( char [ ] chars , int offset , int length ) { this . chars = chars ; this . Offset = offset ; this . Length = length ; Debug . Assert ( IsValid ( ) ) ; }
public virtual UpdateIPSetResponse UpdateIPSet ( UpdateIPSetRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = UpdateIPSetRequestMarshaller . Instance ; options . ResponseUnmarshaller = UpdateIPSetResponseUnmarshaller . Instance ; return Invoke < UpdateIPSetResponse > ( request , options ) ; }
public virtual void print ( object obj ) { print ( Sharpen . StringHelper . GetValueOf ( obj ) ) ; }
public override string ToString ( ) { return " IndexFileDeleter.CommitPoint( " + segmentsFileName + " ) " ; }
public virtual bool WaitForGeneration ( long targetGen , int maxMS ) { long curGen = writer . Generation ; if ( targetGen > curGen ) { throw new System . ArgumentException ( " targetGen= " + targetGen + "  was never returned by the ReferenceManager instance (current gen= " + curGen + " ) " ) ; } lock ( this )  if ( targetGen <= searchingGen ) return true ; else { waitingGen = Math . Max ( waitingGen , targetGen ) ; reopenCond . Set ( ) ; available . Reset ( ) ; } long startMS = Time . NanoTime ( ) / 1000000 ; while ( targetGen > Interlocked . Read ( ref searchingGen ) ) { if ( maxMS < 0 ) { available . WaitOne ( ) ; } else { long msLeft = ( startMS + maxMS ) - ( Time . NanoTime ( ) ) / 1000000 ; if ( msLeft <= 0 ) { return false ; } else { available . WaitOne ( TimeSpan . FromMilliseconds ( msLeft ) ) ; } } } return true ; }
public java . lang . StringBuffer append ( bool b ) { return append ( b ? " true " : " false " ) ; }
public override java . nio . ByteBuffer put ( int index , byte b ) { throw new java . nio . ReadOnlyBufferException ( ) ; }
public virtual int GetLineCount ( ) { return lineCount ; }
public override bool Equals ( object o ) { return o is DutchStemmer ; }
public virtual CreateNotificationSubscriptionResponse CreateNotificationSubscription ( CreateNotificationSubscriptionRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = CreateNotificationSubscriptionRequestMarshaller . Instance ; options . ResponseUnmarshaller = CreateNotificationSubscriptionResponseUnmarshaller . Instance ; return Invoke < CreateNotificationSubscriptionResponse > ( request , options ) ; }
public virtual bool IsOutdated ( ) { return snapshot . IsModified ( GetFile ( ) ) ; }
public virtual DescribeVirtualInterfacesResponse DescribeVirtualInterfaces ( ) { return DescribeVirtualInterfaces ( new DescribeVirtualInterfacesRequest ( ) ) ; }
public override void onChanged ( ) { this . _enclosing . refreshExpGroupMetadataList ( true , true ) ; this . _enclosing . notifyDataSetChanged ( ) ; }
public virtual DeleteEventTrackerResponse DeleteEventTracker ( DeleteEventTrackerRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DeleteEventTrackerRequestMarshaller . Instance ; options . ResponseUnmarshaller = DeleteEventTrackerResponseUnmarshaller . Instance ; return Invoke < DeleteEventTrackerResponse > ( request , options ) ; }
public override bool Matches ( ValueEval x ) { if ( x is BlankEval ) { switch ( _operator . Code ) { case CmpOp . NONE : case CmpOp . EQ : return _value . Length == 0 ; case CmpOp . NE : return _value . Length != 0 ; } return false ; } if ( ! ( x is StringEval ) ) { return false ; } String testedValue = ( ( StringEval ) x ) . StringValue ; if ( ( testedValue . Length < 1 && _value . Length < 1 ) ) { switch ( _operator . Code ) { case CmpOp . NONE : return true ; case CmpOp . EQ : return false ; case CmpOp . NE : return true ; } return false ; } if ( _pattern != null ) { return Evaluate ( _pattern . IsMatch ( testedValue ) ) ; } return Evaluate ( string . Compare ( testedValue , _value , StringComparison . CurrentCultureIgnoreCase ) ) ; }
public virtual ListWebsiteAuthorizationProvidersResponse ListWebsiteAuthorizationProviders ( ListWebsiteAuthorizationProvidersRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = ListWebsiteAuthorizationProvidersRequestMarshaller . Instance ; options . ResponseUnmarshaller = ListWebsiteAuthorizationProvidersResponseUnmarshaller . Instance ; return Invoke < ListWebsiteAuthorizationProvidersResponse > ( request , options ) ; }
public override void write ( char [ ] buf , int offset , int count ) { doWrite ( buf , offset , count ) ; }
public String FormatAsString ( ) { if ( IsWholeColumnReference ( ) ) { returnCellReference . ConvertNumToColString ( _firstCell . Col ) + " : " + CellReference . ConvertNumToColString ( _lastCell . Col ) ; } StringBuilder sb = new StringBuilder ( 32 ) ; sb . Append ( _firstCell . FormatAsString ( ) ) ; if ( ! _isSingleCell ) { sb . Append ( CELL_DELIMITER ) ; if ( _lastCell . SheetName == null ) { sb . Append ( _lastCell . FormatAsString ( ) ) ; } else { _lastCell . AppendCellReference ( sb ) ; } } return sb . ToString ( ) ; }
public EscherGraphics Create ( ) { EscherGraphics g = new EscherGraphics ( escherGroup , workbook , foreground , font , verticalPointsPerPixel ) ; return g ; }
public DoubleDocValues  ( ValueSource vs ) { this . m_vs = vs ; }
public static CharArraySet GetDefaultStopSet ( ) { return DefaultSetHolder . DEFAULT_STOP_SET ; }
public virtual DeleteLoadBalancerPolicyResponse DeleteLoadBalancerPolicy ( DeleteLoadBalancerPolicyRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DeleteLoadBalancerPolicyRequestMarshaller . Instance ; options . ResponseUnmarshaller = DeleteLoadBalancerPolicyResponseUnmarshaller . Instance ; return Invoke < DeleteLoadBalancerPolicyResponse > ( request , options ) ; }
public virtual DecreaseReplicaCountResponse DecreaseReplicaCount ( DecreaseReplicaCountRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DecreaseReplicaCountRequestMarshaller . Instance ; options . ResponseUnmarshaller = DecreaseReplicaCountResponseUnmarshaller . Instance ; return Invoke < DecreaseReplicaCountResponse > ( request , options ) ; }
public virtual RefUpdate . Result Update ( RevWalk walk ) { RequireCanDoUpdate ( ) ; try { return result = UpdateImpl ( walk , new _Store_484 ( this ) ) ; } catch ( IOException x ) { result = RefUpdate . Result . IO_FAILURE ; throw ; } }
public virtual ICollection  < string > GetChanged  ( ) { return Sharpen . Collections . UnmodifiableSet ( diff . GetChanged ( ) ) ; }
public static string ToHex ( long value ) { return ToHex ( value , 16 ) ; }
public int CreatePlaceholder ( ) { return _offset ++ ; }
public override bool Equals ( object o ) { if ( o is java . util . MapClass . Entry < K , V > ) { java . util . MapClass . Entry < K , V > other = ( java . util . MapClass . Entry < K , V > ) o  ; return ( ( object ) key == null ? other . getKey ( ) == null : key . Equals ( other . getKey ( ) ) ) && ( ( object ) value == null ? other . getValue ( ) == null : value . Equals ( other . getValue ( ) ) ) ; } return false ; }
public override ValueEval Evaluate ( int srcRowIndex , int srcColumnIndex , ValueEval arg0 , ValueEval arg1 ) { double result ; try { double d0 = NumericFunction . SingleOperandEvaluate ( arg0 , srcRowIndex , srcColumnIndex ) ; double d1 = NumericFunction . SingleOperandEvaluate ( arg1 , srcRowIndex , srcColumnIndex ) ; double logE = Math . Log ( d0 ) ; double base1 = d1 ; if ( base1 == Math . E ) { result = logE ; } else { result = logE / Math . Log ( base1 ) ; } NumericFunction . CheckValue ( result ) ; } catch ( EvaluationException e ) { return e . GetErrorEval ( ) ; } return new NumberEval ( result ) ; }
public virtual DeleteFilterResponse DeleteFilter ( DeleteFilterRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DeleteFilterRequestMarshaller . Instance ; options . ResponseUnmarshaller = DeleteFilterResponseUnmarshaller . Instance ; return Invoke < DeleteFilterResponse > ( request , options ) ; }
public virtual CreateInstanceSnapshotResponse CreateInstanceSnapshot ( CreateInstanceSnapshotRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = CreateInstanceSnapshotRequestMarshaller . Instance ; options . ResponseUnmarshaller = CreateInstanceSnapshotResponseUnmarshaller . Instance ; return Invoke < CreateInstanceSnapshotResponse > ( request , options ) ; }
public virtual IList  < IToken > GetTokens  ( int start , int stop ) { return GetTokens ( start , stop , null ) ; }
public static TermGroupFacetCollector CreateTermGroupFacetCollector ( string groupField , string facetField , bool facetFieldMultivalued , BytesRef facetPrefix , int initialSize ) { if ( facetFieldMultivalued ) { return new MV ( groupField , facetField , facetPrefix , initialSize ) ; } else { return new SV ( groupField , facetField , facetPrefix , initialSize ) ; } }
public RenameAlbumRequest  ( ) : base ( " CloudPhoto " , " 2017-07-11 " , " RenameAlbum " , " cloudphoto " , " openAPI " ) { Protocol = ProtocolType . HTTPS ; }
public virtual bool contains ( object @ object ) { lock ( mutex )  { return c . contains ( @ object ) ; } }
public override java . nio . CharBuffer put ( char [ ] src , int srcOffset , int charCount ) { if ( charCount > remaining ( ) ) { throw new java . nio . BufferOverflowException ( ) ; } System . Array . Copy ( src , srcOffset , backingArray , offset + _position , charCount ) ; _position += charCount ; return this ; }
public LegendRecord  ( RecordInputStream in1 ) { field_1_xAxisUpperLeft = in1 . ReadInt ( ) ; field_2_yAxisUpperLeft = in1 . ReadInt ( ) ; field_3_xSize = in1 . ReadInt ( ) ; field_4_ySize = in1 . ReadInt ( ) ; field_5_type = ( byte ) in1 . ReadByte ( ) ; field_6_spacing = ( byte ) in1 . ReadByte ( ) ; field_7_options = in1 . ReadShort ( ) ; }
public static byte [ ] EncodedTypeString ( int typeCode ) { switch ( typeCode ) { case OBJ_COMMIT : { return ENCODED_TYPE_COMMIT ; } case OBJ_TREE : { return ENCODED_TYPE_TREE ; } case OBJ_BLOB : { return ENCODED_TYPE_BLOB ; } case OBJ_TAG : { return ENCODED_TYPE_TAG ; } default : { throw new ArgumentException ( MessageFormat . Format ( JGitText . Get ( ) . badObjectType , Sharpen . Extensions . ValueOf ( typeCode ) ) ) ; } } }
public virtual ObjectId GetCalulatedPatchId ( ) { return ObjectId . FromRaw ( digest . Digest ( ) ) ; }
public DefaultRowHeightRecord  ( ) { field_1_option_flags = 0x0000 ; field_2_row_height = DEFAULT_ROW_HEIGHT ; }
public java . nio . ByteBuffer encode ( java . nio . CharBuffer buffer ) { try { return newEncoder ( ) . onMalformedInput ( java . nio . charset . CodingErrorAction . REPLACE ) . onUnmappableCharacter ( java . nio . charset . CodingErrorAction . REPLACE ) . encode ( buffer ) ; } catch ( java . nio . charset . CharacterCodingException ex ) { throw new System . Exception ( ex . Message , ex ) ; } }
public sealed override java . nio . FloatBuffer get ( float [ ] dst , int dstOffset , int floatCount ) { if ( floatCount > remaining ( ) ) { throw new java . nio . BufferUnderflowException ( ) ; } System . Array . Copy ( backingArray , offset + _position , dst , dstOffset , floatCount ) ; _position += floatCount ; return this ; }
public virtual bool hasNext ( ) { return this . _nextEntry != null ; }
public virtual DeleteNatGatewayResponse DeleteNatGateway ( DeleteNatGatewayRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DeleteNatGatewayRequestMarshaller . Instance ; options . ResponseUnmarshaller = DeleteNatGatewayResponseUnmarshaller . Instance ; return Invoke < DeleteNatGatewayResponse > ( request , options ) ; }
public String ResolveNameXText ( int reFindex , int definedNameIndex ) { return linkTable . ResolveNameXText ( reFindex , definedNameIndex , this ) ; }
public virtual void SetMultiFields ( string [ ] fields ) { if ( fields == null ) { fields = new string [ 0 ] ; } QueryConfigHandler . Set ( ConfigurationKeys . MULTI_FIELDS , fields ) ; }
public override bool IsCancelled ( ) { Lock . Lock ( ) ; try { return pm . IsCancelled ( ) ; } finally { Lock . Unlock ( ) ; } }
public virtual RemoveTargetsResponse RemoveTargets ( RemoveTargetsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = RemoveTargetsRequestMarshaller . Instance ; options . ResponseUnmarshaller = RemoveTargetsResponseUnmarshaller . Instance ; return Invoke < RemoveTargetsResponse > ( request , options ) ; }
public FuzzyQuery  ( Term term , int maxEdits , int prefixLength , int maxExpansions , bool transpositions ) : base ( term . Field  ) { if ( maxEdits < 0 || maxEdits > LevenshteinAutomata . MAXIMUM_SUPPORTED_DISTANCE ) { throw new System . ArgumentException ( " maxEdits must be between 0 and  " + LevenshteinAutomata . MAXIMUM_SUPPORTED_DISTANCE ) ; } if ( prefixLength < 0 ) { throw new System . ArgumentException ( " prefixLength cannot be negative. " ) ; } if ( maxExpansions < 0 ) { throw new System . ArgumentException ( " maxExpansions cannot be negative. " ) ; } this . term = term ; this . maxEdits = maxEdits ; this . prefixLength = prefixLength ; this . transpositions = transpositions ; this . maxExpansions = maxExpansions ; MultiTermRewriteMethod = new MultiTermQuery . TopTermsScoringBooleanQueryRewrite ( maxExpansions ) ; }
public virtual CheckoutCommand Checkout ( ) { return new CheckoutCommand ( repo ) ; }
public ValueEval Evaluate ( String sheetName , int rowIndex , int columnIndex ) { IEvaluationCell cell = _sewb . GetEvaluationCell ( sheetName , rowIndex , columnIndex ) ; switch ( cell . CellType ) { case CellType . Boolean : return BoolEval . ValueOf ( cell . BooleanCellValue ) ; case CellType . Error : return ErrorEval . ValueOf ( cell . ErrorCellValue ) ; case CellType . Formula : return _evaluator . Evaluate ( cell ) ; case CellType . Numeric : return new NumberEval ( cell . NumericCellValue ) ; case CellType . String : return new StringEval ( cell . StringCellValue ) ; case CellType . Blank : return null ; } throw new InvalidOperationException ( " Bad cell type ( " + cell . CellType + " ) " ) ; }
public virtual PutFileSystemPolicyResponse PutFileSystemPolicy ( PutFileSystemPolicyRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = PutFileSystemPolicyRequestMarshaller . Instance ; options . ResponseUnmarshaller = PutFileSystemPolicyResponseUnmarshaller . Instance ; return Invoke < PutFileSystemPolicyResponse > ( request , options ) ; }
public override long FileLength ( string name ) { EnsureOpen ( ) ; if ( this . writer != null ) { return writer . FileLength ( name ) ; } FileEntry e = entries [ IndexFileNames . StripSegmentName ( name ) ] ; if ( e == null ) { throw new FileNotFoundException ( name ) ; } return e . Length ; }
public virtual DescribeCacheClustersResponse DescribeCacheClusters ( ) { return DescribeCacheClusters ( new DescribeCacheClustersRequest ( ) ) ; }
public virtual void SetObjectId ( RevObject obj ) { SetObjectId ( obj , obj . Type ) ; }
public bool RowHasCells ( int row ) { if ( row > records . Length - 1 ) return false ; CellValueRecordInterface [ ] rowCells = records [ row ] ; if ( rowCells == null ) return false ; for ( int col = 0 ; col < rowCells . Length ; col ++ ) { if ( rowCells [ col ] != null ) return true ; } return false ; }
public override TokenStream Create ( TokenStream input ) { return new SpanishLightStemFilter ( input ) ; }
public StoredField  ( string name , int value ) : base ( name , TYPE ) { FieldsData = new Int32 ( value ) ; }
public virtual DescribePublicIpv4PoolsResponse DescribePublicIpv4Pools ( DescribePublicIpv4PoolsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribePublicIpv4PoolsRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribePublicIpv4PoolsResponseUnmarshaller . Instance ; return Invoke < DescribePublicIpv4PoolsResponse > ( request , options ) ; }
public IndexRevision  ( IndexWriter writer ) { sdp = writer . Config . IndexDeletionPolicy as SnapshotDeletionPolicy ; if ( sdp == null ) throw new ArgumentException ( " IndexWriter must be created with SnapshotDeletionPolicy " , " writer " ) ; this . writer = writer ; this . commit = sdp . Snapshot ( ) ; this . version = RevisionVersion ( commit ) ; this . sourceFiles = RevisionFiles ( commit ) ; }
public void SetTabIdArray ( short [ ] array ) { _tabids = array ; }
public virtual UpdateObjectAttributesResponse UpdateObjectAttributes ( UpdateObjectAttributesRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = UpdateObjectAttributesRequestMarshaller . Instance ; options . ResponseUnmarshaller = UpdateObjectAttributesResponseUnmarshaller . Instance ; return Invoke < UpdateObjectAttributesResponse > ( request , options ) ; }
public virtual GetGameSessionLogUrlResponse GetGameSessionLogUrl ( GetGameSessionLogUrlRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = GetGameSessionLogUrlRequestMarshaller . Instance ; options . ResponseUnmarshaller = GetGameSessionLogUrlResponseUnmarshaller . Instance ; return Invoke < GetGameSessionLogUrlResponse > ( request , options ) ; }
public RefCount ( T @ object ) { this . m_object = @ object ; }
public override java . nio . ByteBuffer put ( int index , byte b ) { checkIndex ( index ) ; backingArray [ offset + index ] = b ; return this ; }
public virtual IntervalSet Look ( ATNState s , ATNState stopState , RuleContext ctx ) { IntervalSet r = new IntervalSet ( ) ; bool seeThruPreds = true ; PredictionContext lookContext = ctx != null ? PredictionContext . FromRuleContext ( s . atn , ctx ) : null ; Look ( s , stopState , lookContext , r , new HashSet < ATNConfig > ( ) , new BitSet ( ) , seeThruPreds , true ) ; return r ; }
public int GetValidationType ( ) { return _validationType ; }
public virtual DeleteTagCommand TagDelete ( ) { return new DeleteTagCommand ( repo ) ; }
public SortRescorer  ( Sort sort ) { this . sort = sort ; }
public void VerifyBelongsToWorkbook ( HSSFWorkbook wb ) { if ( wb . Workbook != _workbook ) { throw new ArgumentException ( " This Style does not belong to the supplied Workbook. Are you trying to assign a style from one workbook to the cell of a differnt workbook? " ) ; } }
public java . lang . StringBuffer insert ( int index , object obj ) { return insert ( index , obj == null ? " null " : obj . ToString ( ) ) ; }
public override bool ContainsKey ( ICharSequence text ) { if ( text == null ) { throw new ArgumentNullException ( " text " ) ; } return false ; }
public int CompareTo ( HSSFRichTextString other ) { return _string . CompareTo ( other . _string ) ; }
public RequestSpotInstancesRequest  ( string spotPrice ) { _spotPrice = spotPrice ; }
public virtual ObjectId GetNewObjectId ( ) { return newObjectId ; }
public virtual void SetDeltaBaseAsOffset ( bool deltaBaseAsOffset ) { this . deltaBaseAsOffset = deltaBaseAsOffset ; }
public LengthFilterFactory  ( IDictionary < string , string > args ) : base ( args ) { min = RequireInt32 ( args , MIN_KEY ) ; max = RequireInt32 ( args , MAX_KEY ) ; enablePositionIncrements = GetBoolean ( args , " enablePositionIncrements " , true ) ; if ( args . Count > 0 ) { throw new System . ArgumentException ( " Unknown parameters:  " + args ) ; } }
public TruncateTokenFilter  ( TokenStream input , int length ) : base ( input ) { if ( length < 1 ) { throw new System . ArgumentOutOfRangeException ( " length parameter must be a positive number:  " + length ) ; } this . length = length ; this . termAttribute = AddAttribute < ICharTermAttribute > ( ) ; this . keywordAttr = AddAttribute < IKeywordAttribute > ( ) ; }
public virtual ListDomainsResponse ListDomains ( ) { return ListDomains ( new ListDomainsRequest ( ) ) ; }
public override TokenStream Create ( TokenStream input ) { return new ArabicStemFilter ( input ) ; }
public virtual NGit . Api . PushCommand SetRefSpecs ( IList < RefSpec > specs ) { CheckCallable ( ) ; this . refSpecs . Clear ( ) ; Sharpen . Collections . AddAll ( this . refSpecs , specs ) ; return this ; }
public virtual NGit . Blame . BlameGenerator SetDiffAlgorithm ( DiffAlgorithm algorithm ) { diffAlgorithm = algorithm ; return this ; }
public virtual GroupingSearch SetIncludeMaxScore ( bool includeMaxScore ) { this . includeMaxScore = includeMaxScore ; return this ; }
public override Field [ ] CreateIndexableFields ( IShape shape ) { double distErr = SpatialArgs . CalcDistanceFromErrPct ( shape , m_distErrPct , m_ctx ) ; return CreateIndexableFields ( shape , distErr ) ; }
public virtual PutMethodResponseResponse PutMethodResponse ( PutMethodResponseRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = PutMethodResponseRequestMarshaller . Instance ; options . ResponseUnmarshaller = PutMethodResponseResponseUnmarshaller . Instance ; return Invoke < PutMethodResponseResponse > ( request , options ) ; }
public LegacyCredentials  ( Credential legacyCredential ) { this . legacyCredential = legacyCredential ; }
public virtual DescribeFeatureTransformationResponse DescribeFeatureTransformation ( DescribeFeatureTransformationRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribeFeatureTransformationRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribeFeatureTransformationResponseUnmarshaller . Instance ; return Invoke < DescribeFeatureTransformationResponse > ( request , options ) ; }
public virtual DeleteRouteResponse DeleteRoute ( DeleteRouteRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DeleteRouteRequestMarshaller . Instance ; options . ResponseUnmarshaller = DeleteRouteResponseUnmarshaller . Instance ; return Invoke < DeleteRouteResponse > ( request , options ) ; }
public virtual AssociatePhoneNumbersWithVoiceConnectorResponse AssociatePhoneNumbersWithVoiceConnector ( AssociatePhoneNumbersWithVoiceConnectorRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = AssociatePhoneNumbersWithVoiceConnectorRequestMarshaller . Instance ; options . ResponseUnmarshaller = AssociatePhoneNumbersWithVoiceConnectorResponseUnmarshaller . Instance ; return Invoke < AssociatePhoneNumbersWithVoiceConnectorResponse > ( request , options ) ; }
public long RamBytesUsed ( ) { return ( ( blocks != null ) ? ( blockSize * blocks . Length ) : 0 ) ; }
public short ReadShort ( ) { return _in . ReadShort ( ) ; }
public virtual UpdatePipelineNotificationsResponse UpdatePipelineNotifications ( UpdatePipelineNotificationsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = UpdatePipelineNotificationsRequestMarshaller . Instance ; options . ResponseUnmarshaller = UpdatePipelineNotificationsResponseUnmarshaller . Instance ; return Invoke < UpdatePipelineNotificationsResponse > ( request , options ) ; }
public override java . io . Writer append ( char c ) { write ( c ) ; return this ; }
public override java . util . Iterator  < V > iterator  ( ) { return new java . util . Hashtable < K , V > . ValueIterator ( this . _enclosing ) ; }
public UnitsRecord  ( RecordInputStream in1 ) { field_1_units = in1 . ReadShort ( ) ; }
public virtual bool IsEmpty ( ) { return first ; }
public override string ToString ( ) { return " ANY_DIFF " ; }
public virtual UpdateDomainNameResponse UpdateDomainName ( UpdateDomainNameRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = UpdateDomainNameRequestMarshaller . Instance ; options . ResponseUnmarshaller = UpdateDomainNameResponseUnmarshaller . Instance ; return Invoke < UpdateDomainNameResponse > ( request , options ) ; }
public DeleteSnapshotRequest  ( string snapshotId ) { _snapshotId = snapshotId ; }
public void ReadFully ( byte [ ] buf ) { ReadFully ( buf , 0 , buf . Length ) ; }
public SliceReader  ( Int32BlockPool pool ) { this . pool = pool ; }
public virtual void SetDeltaSearchMemoryLimit ( long memoryLimit ) { deltaSearchMemoryLimit = memoryLimit ; }
public override String ToString ( ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . Append ( " [BOOKBOOL] \n " ) ; buffer . Append ( "     .savelinkvalues  =  " ) . Append ( StringUtil . ToHexString ( SaveLinkValues ) ) . Append ( " \n " ) ; buffer . Append ( " [/BOOKBOOL] \n " ) ; return buffer . ToString ( ) ; }
public virtual DescribeTransitGatewayAttachmentsResponse DescribeTransitGatewayAttachments ( DescribeTransitGatewayAttachmentsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribeTransitGatewayAttachmentsRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribeTransitGatewayAttachmentsResponseUnmarshaller . Instance ; return Invoke < DescribeTransitGatewayAttachmentsResponse > ( request , options ) ; }
public virtual CreateVpcResponse CreateVpc ( CreateVpcRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = CreateVpcRequestMarshaller . Instance ; options . ResponseUnmarshaller = CreateVpcResponseUnmarshaller . Instance ; return Invoke < CreateVpcResponse > ( request , options ) ; }
public virtual DescribeElasticGpusResponse DescribeElasticGpus ( DescribeElasticGpusRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribeElasticGpusRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribeElasticGpusResponseUnmarshaller . Instance ; return Invoke < DescribeElasticGpusResponse > ( request , options ) ; }
public override java . nio . IntBuffer put ( int c ) { if ( _position == _limit ) { throw new java . nio . BufferOverflowException ( ) ; } byteBuffer . putInt ( _position ++ * libcore . io . SizeOf . INT , c ) ; return this ; }
public virtual UpdateEndpointsBatchResponse UpdateEndpointsBatch ( UpdateEndpointsBatchRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = UpdateEndpointsBatchRequestMarshaller . Instance ; options . ResponseUnmarshaller = UpdateEndpointsBatchResponseUnmarshaller . Instance ; return Invoke < UpdateEndpointsBatchResponse > ( request , options ) ; }
public virtual void FromRaw ( byte [ ] bs , int p ) { w1 = NB . DecodeInt32 ( bs , p ) ; w2 = NB . DecodeInt32 ( bs , p + 4 ) ; w3 = NB . DecodeInt32 ( bs , p + 8 ) ; w4 = NB . DecodeInt32 ( bs , p + 12 ) ; w5 = NB . DecodeInt32 ( bs , p + 16 ) ; }
public static NGit . Transport . OpenSshConfig Get ( FS fs ) { FilePath home = fs . UserHome ( ) ; if ( home == null ) { home = new FilePath ( " . " ) . GetAbsoluteFile ( ) ; } FilePath config = new FilePath ( new FilePath ( home , " .ssh " ) , Constants . CONFIG ) ; NGit . Transport . OpenSshConfig osc = new NGit . Transport . OpenSshConfig ( home , config ) ; osc . Refresh ( ) ; return osc ; }
public VCenterRecord  ( RecordInputStream in1 ) { field_1_vcenter = in1 . ReadShort ( ) ; }
public virtual Stream ObtainFile ( string sessionId , string source , string fileName ) { lock ( padlock )  { EnsureOpen ( ) ; ReplicationSession session ; if ( sessions . TryGetValue ( sessionId , out session ) && session != null && session . IsExpired ( ExpirationThreshold ) ) { ReleaseSession ( sessionId ) ; session = null ; } if ( session == null ) { throw new SessionExpiredException ( string . Format ( " session ({0}) expired while obtaining file: source={1} file={2} " , sessionId , source , fileName ) ) ; } sessions [ sessionId ] . MarkAccessed ( ) ; return session . Revision . Revision . Open ( source , fileName ) ; } }
public virtual DownloadDefaultKeyPairResponse DownloadDefaultKeyPair ( DownloadDefaultKeyPairRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DownloadDefaultKeyPairRequestMarshaller . Instance ; options . ResponseUnmarshaller = DownloadDefaultKeyPairResponseUnmarshaller . Instance ; return Invoke < DownloadDefaultKeyPairResponse > ( request , options ) ; }
public virtual DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations ( DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseUnmarshaller . Instance ; return Invoke < DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse > ( request , options ) ; }
public virtual ResetEbsDefaultKmsKeyIdResponse ResetEbsDefaultKmsKeyId ( ResetEbsDefaultKmsKeyIdRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = ResetEbsDefaultKmsKeyIdRequestMarshaller . Instance ; options . ResponseUnmarshaller = ResetEbsDefaultKmsKeyIdResponseUnmarshaller . Instance ; return Invoke < ResetEbsDefaultKmsKeyIdResponse > ( request , options ) ; }
public int GetPropertiesPerBlock ( ) { return bigBlockSize / POIFSConstants . PROPERTY_SIZE ; }
public override ValueEval Evaluate ( int srcRowIndex , int srcColumnIndex , ValueEval numberVE ) { return this . Evaluate ( srcRowIndex , srcColumnIndex , numberVE , null ) ; }
public virtual GetFindingsStatisticsResponse GetFindingsStatistics ( GetFindingsStatisticsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = GetFindingsStatisticsRequestMarshaller . Instance ; options . ResponseUnmarshaller = GetFindingsStatisticsResponseUnmarshaller . Instance ; return Invoke < GetFindingsStatisticsResponse > ( request , options ) ; }
public virtual ModifyDBClusterResponse ModifyDBCluster ( ModifyDBClusterRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = ModifyDBClusterRequestMarshaller . Instance ; options . ResponseUnmarshaller = ModifyDBClusterResponseUnmarshaller . Instance ; return Invoke < ModifyDBClusterResponse > ( request , options ) ; }
public LimitTokenCountFilterFactory  ( IDictionary < string , string > args ) : base ( args ) { maxTokenCount = RequireInt32 ( args , MAX_TOKEN_COUNT_KEY ) ; consumeAllTokens = GetBoolean ( args , CONSUME_ALL_TOKENS_KEY , false ) ; if ( args . Count > 0 ) { throw new System . ArgumentException ( " Unknown parameters:  " + args ) ; } }
public virtual Query Build ( IQueryNode queryNode ) { if ( ! ( queryNode is MatchNoDocsQueryNode ) ) { throw new QueryNodeException ( new Message ( QueryParserMessages . LUCENE_QUERY_CONVERSION_ERROR , queryNode . ToQueryString ( new EscapeQuerySyntax ( ) ) , queryNode . GetType ( ) . Name ) )  ; } return new BooleanQuery ( ) ; }
public GetUserPolicyRequest  ( string userName , string policyName ) { _userName = userName ; _policyName = policyName ; }
public virtual RotateEncryptionKeyResponse RotateEncryptionKey ( RotateEncryptionKeyRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = RotateEncryptionKeyRequestMarshaller . Instance ; options . ResponseUnmarshaller = RotateEncryptionKeyResponseUnmarshaller . Instance ; return Invoke < RotateEncryptionKeyResponse > ( request , options ) ; }
public virtual int GetLinesAdded ( ) { return nAdded ; }
public virtual IList  < IToken > GetHiddenTokensToLeft  ( int tokenIndex , int channel ) { LazyInit ( ) ; if ( tokenIndex < 0 || tokenIndex >= tokens . Count ) { throw new ArgumentOutOfRangeException ( tokenIndex + "  not in 0.. " + ( tokens . Count - 1 ) ) ; } if ( tokenIndex == 0 ) { return null ; } int prevOnChannel = PreviousTokenOnChannel ( tokenIndex - 1 , Lexer . DefaultTokenChannel ) ; if ( prevOnChannel == tokenIndex - 1 ) { return null ; } int from = prevOnChannel + 1 ; int to = tokenIndex - 1 ; return FilterForChannel ( from , to , channel ) ; }
public virtual DescribeValidDBInstanceModificationsResponse DescribeValidDBInstanceModifications ( DescribeValidDBInstanceModificationsRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribeValidDBInstanceModificationsRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribeValidDBInstanceModificationsResponseUnmarshaller . Instance ; return Invoke < DescribeValidDBInstanceModificationsResponse > ( request , options ) ; }
public void Add ( RevFlag flag ) { flags |= flag . mask ; }
public virtual void clear ( ) { java . util . Iterator < E > it = iterator ( ) ; while ( it . hasNext ( ) ) { it . next ( ) ; it . remove ( ) ; } }
public virtual RegisterImageResponse RegisterImage ( RegisterImageRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = RegisterImageRequestMarshaller . Instance ; options . ResponseUnmarshaller = RegisterImageResponseUnmarshaller . Instance ; return Invoke < RegisterImageResponse > ( request , options ) ; }
public override bool Equals ( object o ) { if ( ! ( o is TermQuery ) ) { return false ; } TermQuery other = ( TermQuery ) o ; return ( this . Boost == other . Boost ) && this . term . Equals ( other . term ) ; }
public URI  ( string scheme , string authority , string path , string query , string fragment ) { if ( scheme != null && path != null && ! string . IsNullOrEmpty ( path ) && path [ 0 ] != '/' ) { throw new java . net . URISyntaxException ( path , " Relative path " ) ; } java . lang . StringBuilder uri = new java . lang . StringBuilder ( ) ; if ( scheme != null ) { uri . append ( scheme ) ; uri . append ( ':' ) ; } if ( authority != null ) { uri . append ( " " ) ; AUTHORITY_ENCODER . appendEncoded ( uri , authority ) ; } if ( path != null ) { PATH_ENCODER . appendEncoded ( uri , path ) ; } if ( query != null ) { uri . append ( '?' ) ; ALL_LEGAL_ENCODER . appendEncoded ( uri , query ) ; } if ( fragment != null ) { uri . append ( '#' ) ; ALL_LEGAL_ENCODER . appendEncoded ( uri , fragment ) ; } parseURI ( uri . ToString ( ) , false ) ; }
public BlameGenerator  ( Repository repository , string path ) { this . repository = repository ; this . resultPath = PathFilter . Create ( path ) ; idBuf = new MutableObjectId ( ) ; SetFollowFileRenames ( true ) ; InitRevPool ( false ) ; remaining = - 1 ; }
public virtual void writeTo ( java . io . OutputStream @ out ) { throw new System . NotImplementedException ( ) ; }
public DeletableItem  ( string name , List < Attribute > attributes ) { _name = name ; _attributes = attributes ; }
public virtual DescribeGroupResponse DescribeGroup ( DescribeGroupRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribeGroupRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribeGroupResponseUnmarshaller . Instance ; return Invoke < DescribeGroupResponse > ( request , options ) ; }
public virtual EnableVpcClassicLinkResponse EnableVpcClassicLink ( EnableVpcClassicLinkRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = EnableVpcClassicLinkRequestMarshaller . Instance ; options . ResponseUnmarshaller = EnableVpcClassicLinkResponseUnmarshaller . Instance ; return Invoke < EnableVpcClassicLinkResponse > ( request , options ) ; }
public virtual DescribeStacksResponse DescribeStacks ( ) { return DescribeStacks ( new DescribeStacksRequest ( ) ) ; }
public override java . nio . CharBuffer duplicate ( ) { return copy ( this ) ; }
public static double Mod ( double n , double d ) { double result = 0 ; if ( d == 0 ) { result = double . NaN ; } else if ( Sign ( n ) == Sign ( d ) ) { result = n % d ; } else { result = ( ( n % d ) + d ) % d ; } return result ; }
public static string GetLocalizedMessage ( string key , CultureInfo locale ) { string message = GetResourceBundleObject ( key , locale ) ; if ( message == null ) { return " Message with key: " + key + "  and locale:  " + locale + "  not found. " ; } return message ; }
public override string ToQueryString ( IEscapeQuerySyntax escapeSyntaxParser ) { if ( Child == null ) return " " ; return Child . ToQueryString ( escapeSyntaxParser ) + " ^ " + GetValueString ( ) ; }
public override string ToQueryString ( IEscapeQuerySyntax escapeSyntaxParser ) { if ( GetChild ( ) == null ) return " " ; return " (  " + GetChild ( ) . ToQueryString ( escapeSyntaxParser ) + "  ) " ; }
public virtual GetInvalidationResponse GetInvalidation ( GetInvalidationRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = GetInvalidationRequestMarshaller . Instance ; options . ResponseUnmarshaller = GetInvalidationResponseUnmarshaller . Instance ; return Invoke < GetInvalidationResponse > ( request , options ) ; }
public String FormatAsString ( ) { return FormatAsString ( null , false ) ; }
public int PrefixCompare ( byte [ ] bs , int p ) { int cmp ; cmp = NB . CompareUInt32 ( w1 , Mask ( 1 , NB . DecodeInt32 ( bs , p ) ) ) ; if ( cmp != 0 ) { return cmp ; } cmp = NB . CompareUInt32 ( w2 , Mask ( 2 , NB . DecodeInt32 ( bs , p + 4 ) ) ) ; if ( cmp != 0 ) { return cmp ; } cmp = NB . CompareUInt32 ( w3 , Mask ( 3 , NB . DecodeInt32 ( bs , p + 8 ) ) ) ; if ( cmp != 0 ) { return cmp ; } cmp = NB . CompareUInt32 ( w4 , Mask ( 4 , NB . DecodeInt32 ( bs , p + 12 ) ) ) ; if ( cmp != 0 ) { return cmp ; } return NB . CompareUInt32 ( w5 , Mask ( 5 , NB . DecodeInt32 ( bs , p + 16 ) ) ) ; }
public virtual AddApplicationInputProcessingConfigurationResponse AddApplicationInputProcessingConfiguration ( AddApplicationInputProcessingConfigurationRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = AddApplicationInputProcessingConfigurationRequestMarshaller . Instance ; options . ResponseUnmarshaller = AddApplicationInputProcessingConfigurationResponseUnmarshaller . Instance ; return Invoke < AddApplicationInputProcessingConfigurationResponse > ( request , options ) ; }
public static TermRangeQuery NewStringRange ( string field , string lowerTerm , string upperTerm , bool includeLower , bool includeUpper ) { BytesRef lower = lowerTerm == null ? null : new BytesRef ( lowerTerm ) ; BytesRef upper = upperTerm == null ? null : new BytesRef ( upperTerm ) ; return new TermRangeQuery ( field , lower , upper , includeLower , includeUpper ) ; }
static public double FV ( double r , int nper , double pmt , double pv , int type ) { double fv = - ( pv * Math . Pow ( 1 + r , nper ) + pmt * ( 1 + r * type ) * ( Math . Pow ( 1 + r , nper ) - 1 ) / r ) ; return fv ; }
public int CheckExternSheet ( int firstSheetIndex , int lastSheetIndex ) { int thisWbIndex = - 1 ; for ( int i = 0 ; i < _externalBookBlocks . Length ; i ++ ) { SupBookRecord ebr = _externalBookBlocks [ i ] . GetExternalBookRecord ( ) ; if ( ebr . IsInternalReferences ) { thisWbIndex = i ; break ; } } if ( thisWbIndex < 0 ) { throw new InvalidOperationException ( " Could not find 'internal references' EXTERNALBOOK " ) ; } int j = _externSheetRecord . GetRefIxForSheet ( thisWbIndex , firstSheetIndex , lastSheetIndex ) ; if ( j >= 0 ) { return j ; } return _externSheetRecord . AddRef ( thisWbIndex , firstSheetIndex , lastSheetIndex ) ; }
public virtual DescribeSentimentDetectionJobResponse DescribeSentimentDetectionJob ( DescribeSentimentDetectionJobRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribeSentimentDetectionJobRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribeSentimentDetectionJobResponseUnmarshaller . Instance ; return Invoke < DescribeSentimentDetectionJobResponse > ( request , options ) ; }
public override String ToString ( ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . Append ( " [UNITS] \n " ) ; buffer . Append ( "     .units                =  " ) . Append ( " 0x " ) . Append ( HexDump . ToHex ( Units ) ) . Append ( "  ( " ) . Append ( Units ) . Append ( "  ) " ) ; buffer . Append ( Environment . NewLine ) ; buffer . Append ( " [/UNITS] \n " ) ; return buffer . ToString ( ) ; }
public java . util . NavigableMap < K , V > tailMap ( K from , bool inclusive ) { java . util . TreeMap . Bound fromBound = inclusive ? java . util . TreeMap . Bound . INCLUSIVE : java . util . TreeMap . Bound . EXCLUSIVE ; return this . subMap ( from , fromBound , default ( K ) , java . util . TreeMap . Bound . NO_BOUND ) ; }
public static int CompareTo ( Ref o1 , Ref o2 ) { return Sharpen . Runtime . CompareOrdinal ( o1 . GetName ( ) , o2 . GetName ( ) ) ; }
public virtual PutEventsConfigurationResponse PutEventsConfiguration ( PutEventsConfigurationRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = PutEventsConfigurationRequestMarshaller . Instance ; options . ResponseUnmarshaller = PutEventsConfigurationResponseUnmarshaller . Instance ; return Invoke < PutEventsConfigurationResponse > ( request , options ) ; }
public virtual DetachFromIndexResponse DetachFromIndex ( DetachFromIndexRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DetachFromIndexRequestMarshaller . Instance ; options . ResponseUnmarshaller = DetachFromIndexResponseUnmarshaller . Instance ; return Invoke < DetachFromIndexResponse > ( request , options ) ; }
public virtual RebaseCommand Rebase ( ) { return new RebaseCommand ( repo ) ; }
public ISearchGroup < T > Next ( ) { ISearchGroup < T > group = iter . Current ; if ( group . SortValues == null ) { throw new ArgumentException ( " group.sortValues is null; you must pass fillFields=true to the first pass collector " ) ; } return group ; }
public virtual UpdateMLModelResponse UpdateMLModel ( UpdateMLModelRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = UpdateMLModelRequestMarshaller . Instance ; options . ResponseUnmarshaller = UpdateMLModelResponseUnmarshaller . Instance ; return Invoke < UpdateMLModelResponse > ( request , options ) ; }
public virtual CreateIPSetResponse CreateIPSet ( CreateIPSetRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = CreateIPSetRequestMarshaller . Instance ; options . ResponseUnmarshaller = CreateIPSetResponseUnmarshaller . Instance ; return Invoke < CreateIPSetResponse > ( request , options ) ; }
public FieldDateResolutionFCListener  ( QueryConfigHandler config ) { this . config = config ; }
public override bool containsValue ( object value ) { java . util . HashMap . HashMapEntry < K , V > [ ] tab = table ; int len = tab . Length ; if ( value == null ) { { for ( int i = 0 ; i < len ; i ++ ) { { for ( java . util . HashMap . HashMapEntry < K , V > e = tab [ i ] ; e != null ; e = e . next ) { if ( e . value == null ) { return true ; } } } } } return entryForNullKey != null && ( object ) entryForNullKey . value == null ; } { for ( int i_1 = 0 ; i_1 < len ; i_1 ++ ) { { for ( java . util . HashMap . HashMapEntry < K , V > e = tab [ i_1 ] ; e != null ; e = e . next ) { if ( value . Equals ( e . value ) ) { return true ; } } } } } return entryForNullKey != null && value . Equals ( entryForNullKey . value ) ; }
public virtual DescribeWorkspaceBundlesResponse DescribeWorkspaceBundles ( DescribeWorkspaceBundlesRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribeWorkspaceBundlesRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribeWorkspaceBundlesResponseUnmarshaller . Instance ; return Invoke < DescribeWorkspaceBundlesResponse > ( request , options ) ; }
public DocsEnum Reset ( int [ ] postings ) { this . postings = postings ; upto = - 1 ; return this ; }
public override void Serialize ( ILittleEndianOutput out1 ) { out1 . WriteShort ( sid ) ; out1 . WriteShort ( _reserved0 ) ; out1 . WriteInt ( _engineId ) ; }
public static java . nio . CharBuffer allocate ( int capacity_1 ) { if ( capacity_1 < 0 ) { throw new System . ArgumentException ( ) ; } return new java . nio . ReadWriteCharArrayBuffer ( capacity_1 ) ; }
public override String ToFormulaString ( String [ ] operands ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . Append ( operands [ 0 ] ) ; buffer . Append ( " >= " ) ; buffer . Append ( operands [ 1 ] ) ; return buffer . ToString ( ) ; }
public virtual DeletePipelineResponse DeletePipeline ( DeletePipelineRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DeletePipelineRequestMarshaller . Instance ; options . ResponseUnmarshaller = DeletePipelineResponseUnmarshaller . Instance ; return Invoke < DeletePipelineResponse > ( request , options ) ; }
public InterfaceHdrRecord  ( int codePage ) { _codepage = codePage ; }
public virtual DescribeScalingParametersResponse DescribeScalingParameters ( DescribeScalingParametersRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = DescribeScalingParametersRequestMarshaller . Instance ; options . ResponseUnmarshaller = DescribeScalingParametersResponseUnmarshaller . Instance ; return Invoke < DescribeScalingParametersResponse > ( request , options ) ; }
public java . util . MapClass . Entry < K , V > higherEntry ( K key ) { return this . _enclosing . immutableCopy ( this . findBounded ( key , java . util . TreeMap . Relation . HIGHER ) ) ; }
public CreateSpotDatafeedSubscriptionRequest  ( string bucket ) { _bucket = bucket ; }
public virtual string GetLocalizedMessage ( ) { return GetLocalizedMessage ( CultureInfo . InvariantCulture ) ; }
public UDFFinder GetUDFFinder ( ) { return _uBook . GetUDFFinder ( ) ; }
public ExternalName GetExternalName ( String nameName , String sheetName , int externalWorkbookNumber ) { throw new InvalidOperationException ( " XSSF-style external names are not supported for HSSF " ) ; }
public OldFormulaRecord  ( RecordInputStream ris ) : base ( ris , ris . Sid == biff2_sid ) { ; if ( IsBiff2 ) { field_4_value = ris . ReadDouble ( ) ; } else { long valueLongBits = ris . ReadLong ( ) ; specialCachedValue = SpecialCachedValue . Create ( valueLongBits ) ; if ( specialCachedValue == null ) { field_4_value = BitConverter . Int64BitsToDouble ( valueLongBits ) ; } } if ( IsBiff2 ) { field_5_options = ( short ) ris . ReadUByte ( ) ; } else { field_5_options = ris . ReadShort ( ) ; } int expression_len = ris . ReadShort ( ) ; int nBytesAvailable = ris . Available ( ) ; field_6_Parsed_expr = Formula . Read ( expression_len , ris , nBytesAvailable ) ; }
public virtual int Stem ( char [ ] s , int len ) { Debug . Assert ( s . Length >= len + 1 , " this stemmer requires an oversized array of at least 1 " ) ; len = plural . Apply ( s , len ) ; len = unification . Apply ( s , len ) ; len = adverb . Apply ( s , len ) ; int oldlen ; do { oldlen = len ; len = augmentative . Apply ( s , len ) ; } while ( len != oldlen ) ; oldlen = len ; len = noun . Apply ( s , len ) ; if ( len == oldlen ) { len = verb . Apply ( s , len ) ; } len = vowel . Apply ( s , len ) ; for ( int i = 0 ; i < len ; i ++ ) { switch ( s [ i ] ) { case 'á' : s [ i ] = 'a' ; break ; case 'é' : case 'ê' : s [ i ] = 'e' ; break ; case 'í' : s [ i ] = 'i' ; break ; case 'ó' : s [ i ] = 'o' ; break ; case 'ú' : s [ i ] = 'u' ; break ; } } return len ; }
public bool SameProperties ( FontRecord other ) { returnfield_1_font_height == other . field_1_font_height && field_2_attributes == other . field_2_attributes && field_3_color_palette_index == other . field_3_color_palette_index && field_4_bold_weight == other . field_4_bold_weight && field_5_base_sub_script == other . field_5_base_sub_script && field_6_underline == other . field_6_underline && field_7_family == other . field_7_family && field_8_charset == other . field_8_charset && field_9_zero == other . field_9_zero && field_11_font_name . Equals ( other . field_11_font_name ) ; }
public override String ToFormulaString ( ) { return HSSFErrorConstants . GetText ( HSSFErrorConstants . ERROR_REF ) ; }
public virtual StartTextDetectionResponse StartTextDetection ( StartTextDetectionRequest request ) { var options = new InvokeOptions ( ) ; options . RequestMarshaller = StartTextDetectionRequestMarshaller . Instance ; options . ResponseUnmarshaller = StartTextDetectionResponseUnmarshaller . Instance ; return Invoke < StartTextDetectionResponse > ( request , options ) ; }
public DeleteMessageBatchRequestEntry  ( string id , string receiptHandle ) { _id = id ; _receiptHandle = receiptHandle ; }
public override TokenStream Create ( TokenStream input ) { return new PatternCaptureGroupTokenFilter ( input , preserveOriginal , pattern ) ; }
public SigningCertificate  ( string userName , string certificateId , string certificateBody , StatusType status ) { _userName = userName ; _certificateId = certificateId ; _certificateBody = certificateBody ; _status = status ; }
public DistributionConfig  ( string callerReference , bool enabled ) { _callerReference = callerReference ; _enabled = enabled ; }
public FastCharStream  ( TextReader r ) { input = r ; }
public int end ( int group_1 ) { ensureMatch ( ) ; return matchOffsets [ ( group_1 * 2 ) + 1 ] ; }
public override java . util . MapClass . Entry < K , V > next  ( ) { return this . nextEntry ( ) ; }
public virtual NGit . Api . BlameCommand SetTextComparator ( RawTextComparator textComparator ) { this . textComparator = textComparator ; return this ; }
public T Pop ( ) { if ( size > 0 ) { T result = heap [ 1 ] ; heap [ 1 ] = heap [ size ] ; heap [ size ] = default ( T ) ; size -- ; DownHeap ( ) ; return result ; } else { return default ( T ) ; } }
public ListSpeechSynthesisTasksResult listSpeechSynthesisTasks ( ListSpeechSynthesisTasksRequest request ) { request = beforeClientExecution ( request ) ; return executeListSpeechSynthesisTasks ( request ) ; }
public UpdateJourneyStateResult updateJourneyState ( UpdateJourneyStateRequest request ) { request = beforeClientExecution ( request ) ; return executeUpdateJourneyState ( request ) ; }
public void removePresentationFormat ( ) { remove1stProperty ( PropertyIDMap . PID_PRESFORMAT ) ; }
public CellRangeAddressList ( int firstRow , int lastRow , int firstCol , int lastCol )  { this ( ) ; addCellRangeAddress ( firstRow , firstCol , lastRow , lastCol ) ; }
public void delete ( int key ) { int i = binarySearch ( mKeys , 0 , mSize , key ) ; if ( i >= 0 ) { if ( mValues [ i ] != DELETED ) { mValues [ i ] = DELETED ; mGarbage = true ; } } }
public CreateBranchCommand setStartPoint ( RevCommit startPoint ) { checkCallable ( ) ; this . startCommit = startPoint ; this . startPoint = null ; return this ; }
public int centerX ( ) { return x + w / 2 ; }
public ListPresetsResult listPresets ( ) { return listPresets ( new ListPresetsRequest ( ) ) ; }
public DeleteFolderContentsResult deleteFolderContents ( DeleteFolderContentsRequest request ) { request = beforeClientExecution ( request ) ; return executeDeleteFolderContents ( request ) ; }
public GetConsoleOutputResult getConsoleOutput ( GetConsoleOutputRequest request ) { request = beforeClientExecution ( request ) ; return executeGetConsoleOutput ( request ) ; }
public PutMailboxPermissionsResult putMailboxPermissions ( PutMailboxPermissionsRequest request ) { request = beforeClientExecution ( request ) ; return executePutMailboxPermissions ( request ) ; }
public Cluster disableSnapshotCopy ( DisableSnapshotCopyRequest request ) { request = beforeClientExecution ( request ) ; return executeDisableSnapshotCopy ( request ) ; }
public static String stripExtension ( String filename ) { int idx = filename . indexOf ( ' . ' ) ; if ( idx != - 1 ) { filename = filename . substring ( 0 , idx ) ; } return filename ; }
public ByteBuffer putInt ( int value ) { throw new ReadOnlyBufferException ( ) ; }
public int lastIndexOf ( final int o ) { int rval = _limit - 1 ; for ( ; rval >= 0 ; rval -- ) { if ( o == _array [ rval ] ) { break ; } } return rval ; }
public void setCountsByTime ( int [ ] counts , long msecStep ) { countsByTime = counts ; countsByTimeStepMSec = msecStep ; }
public FeatHdrRecord ( RecordInputStream in )  { futureHeader = new FtrHeader ( in ) ; isf_sharedFeatureType = in . readShort ( ) ; reserved = in . readByte ( ) ; cbHdrData = in . readInt ( ) ; rgbHdrData = in . readRemainder ( ) ; }
public CopyOnWriteArrayList ( ) { elements = EmptyArray . OBJECT ; }
public WriteRequest ( DeleteRequest deleteRequest )  { setDeleteRequest ( deleteRequest ) ; }
public void readFully ( byte [ ] buf ) { _in . readFully ( buf ) ; }
public static Cell getCell ( Row row , int columnIndex ) { Cell cell = row . getCell ( columnIndex ) ; if ( cell == null ) { cell = row . createCell ( columnIndex ) ; } return cell ; }
public void setPackConfig ( PackConfig pc ) { this . packConfig = pc ; }
public String getSignerName ( ) { return " HMAC-SHA1 " ; }
public IntervalSet or ( IntSet a ) { IntervalSet o = new IntervalSet ( ) ; o . addAll ( this ) ; o . addAll ( a ) ; return o ; }
public String toString ( ) { return getClass ( ) . getName ( ) + "  [ " + _value + " ] " ; }
public DescribeVpcEndpointServicePermissionsResult describeVpcEndpointServicePermissions ( DescribeVpcEndpointServicePermissionsRequest request ) { request = beforeClientExecution ( request ) ; return executeDescribeVpcEndpointServicePermissions ( request ) ; }
public static byte [ ] copyOfRange ( byte [ ] original , int start , int end ) { if ( start > end ) { throw new IllegalArgumentException ( ) ; } int originalLength = original . length ; if ( start < 0 || start > originalLength ) { throw new ArrayIndexOutOfBoundsException ( ) ; } int resultLength = end - start ; int copyLength = Math . min ( resultLength , originalLength - start ) ; byte [ ] result = new byte [ resultLength ] ; System . arraycopy ( original , start , result , 0 , copyLength ) ; return result ; }
public ListTopicsRequest ( String nextToken )  { setNextToken ( nextToken ) ; }
public void finish ( FieldInfos fis , int numDocs ) throws IOException { if ( ! pendingDocs . isEmpty ( ) ) { flush ( ) ; numDirtyChunks ++ ; } if ( numDocs != this . numDocs ) { throw new RuntimeException ( " Wrote  " + this . numDocs + "  docs, finish called with numDocs= " + numDocs ) ; } indexWriter . finish ( numDocs , vectorsStream . getFilePointer ( ) ) ; vectorsStream . writeVLong ( numChunks ) ; vectorsStream . writeVLong ( numDirtyChunks ) ; CodecUtil . writeFooter ( vectorsStream ) ; }
public boolean isIndexTerm ( BytesRef term , TermStats stats ) { if ( count >= interval ) { count = 1 ; return true ; } else { count ++ ; return false ; } }
public AssociateDhcpOptionsResult associateDhcpOptions ( AssociateDhcpOptionsRequest request ) { request = beforeClientExecution ( request ) ; return executeAssociateDhcpOptions ( request ) ; }
public ValueEval evaluate ( int srcRowIndex , int srcColumnIndex , ValueEval arg0 , ValueEval arg1 , ValueEval arg2 ) { return evaluate ( srcRowIndex , srcColumnIndex , arg0 , arg1 , arg2 , DEFAULT_ARG3 ) ; }
public void disconnect ( ) { if ( sock . isConnected ( ) ) sock . disconnect ( ) ; }
public PredictionContext add ( PredictionContext ctx ) { if ( ctx == PredictionContext . EMPTY ) return PredictionContext . EMPTY ; PredictionContext existing = cache . get ( ctx ) ; if ( existing != null ) { return existing ; } cache . put ( ctx , ctx ) ; return ctx ; }
public UploadLayerPartResult uploadLayerPart ( UploadLayerPartRequest request ) { request = beforeClientExecution ( request ) ; return executeUploadLayerPart ( request ) ; }
public String getScriptText ( ) { return getScriptText ( null , null ) ; }
public DescribeClusterSubnetGroupsResult describeClusterSubnetGroups ( ) { return describeClusterSubnetGroups ( new DescribeClusterSubnetGroupsRequest ( ) ) ; }
public char setIndex ( int position ) { if ( position < getBeginIndex ( ) || position > getEndIndex ( ) ) throw new IllegalArgumentException ( " Illegal Position:  " + position ) ; index = start + position ; return current ( ) ; }
public GetPhoneNumberOrderResult getPhoneNumberOrder ( GetPhoneNumberOrderRequest request ) { request = beforeClientExecution ( request ) ; return executeGetPhoneNumberOrder ( request ) ; }
public EpsilonTransition ( ATNState target , int outermostPrecedenceReturn )  { super ( target ) ; this . outermostPrecedenceReturn = outermostPrecedenceReturn ; }
public DiffCommand setContextLines ( int contextLines ) { this . contextLines = contextLines ; return this ; }
public RejectVpcPeeringConnectionResult rejectVpcPeeringConnection ( RejectVpcPeeringConnectionRequest request ) { request = beforeClientExecution ( request ) ; return executeRejectVpcPeeringConnection ( request ) ; }
public static boolean equals ( int [ ] array1 , int [ ] array2 ) { if ( array1 == array2 ) { return true ; } if ( array1 == null || array2 == null || array1 . length != array2 . length ) { return false ; } for ( int i = 0 ; i < array1 . length ; i ++ ) { if ( array1 [ i ] != array2 [ i ] ) { return false ; } } return true ; }
public static void main ( String [ ] args ) throws IOException { if ( args . length < 1 ) { System . err . println ( " Usage: java QualityQueriesFinder <index-dir> " ) ; System . exit ( 1 ) ; } QualityQueriesFinder qqf = new QualityQueriesFinder ( FSDirectory . open ( Paths . get ( args [ 0 ] ) ) ) ; String q [  ] = qqf . bestQueries ( " body " , 20 ) ; for ( int i = 0 ; i < q . length ; i ++ ) { System . out . println ( newline + formatQueryAsTrecTopic ( i , q [ i ] , null , null ) ) ; } }
public CharsRef ( char [ ] , int offset , int length )  { this . chars = chars ; this . offset = offset ; this . length = length ; assert isValid ( ) ; }
public UpdateIPSetResult updateIPSet ( UpdateIPSetRequest request ) { request = beforeClientExecution ( request ) ; return executeUpdateIPSet ( request ) ; }
public void print ( Object obj ) { print ( String . valueOf ( obj ) ) ; }
public String toString ( ) { return " IndexFileDeleter.CommitPoint( " + segmentsFileName + " ) " ; }
public synchronized boolean waitForGeneration ( long targetGen , int maxMS ) throws InterruptedException { if ( targetGen > searchingGen ) { reopenLock . lock ( ) ; waitingGen = Math . max ( waitingGen , targetGen ) ; try { reopenCond . signal ( ) ; } finally { reopenLock . unlock ( ) ; } long startMS = System . nanoTime ( ) / 1000000 ; while ( targetGen > searchingGen ) { if ( maxMS < 0 ) { wait ( ) ; } else { long msLeft = ( startMS + maxMS ) - System . nanoTime ( ) / 1000000 ; if ( msLeft <= 0 ) { return false ; } else { wait ( msLeft ) ; } } } } return true ; }
public StringBuffer append ( boolean b ) { return append ( b ? " true " : " false " ) ; }
public ByteBuffer put ( int index , byte b ) { throw new ReadOnlyBufferException ( ) ; }
public int getLineCount ( ) { return lineCount ; }
public boolean equals ( Object o ) { return o instanceof ; }
public CreateNotificationSubscriptionResult createNotificationSubscription ( CreateNotificationSubscriptionRequest request ) { request = beforeClientExecution ( request ) ; return executeCreateNotificationSubscription ( request ) ; }
public boolean isOutdated ( ) { return snapshot . isModified ( getFile ( ) ) ; }
public DescribeVirtualInterfacesResult describeVirtualInterfaces ( ) { return describeVirtualInterfaces ( new DescribeVirtualInterfacesRequest ( ) ) ; }
public void onChanged ( ) { buildMap ( ) ; for ( DataSetObserver o : ) { o . onChanged ( ) ; } }
public DeleteEventTrackerResult deleteEventTracker ( DeleteEventTrackerRequest request ) { request = beforeClientExecution ( request ) ; return executeDeleteEventTracker ( request ) ; }
public boolean matches ( ValueEval x ) { if ( x instanceof ) { switch ( getCode ( ) ) { case CmpOp . : case . : return . ( ) == 0 ; case CmpOp . NE : return _value . length ( ) != 0 ; } return false ; } if ( ! ( x instanceof ) ) { return false ; } = ( ( StringEval ) ) . getStringValue ( ) ; if ( testedValue . length ( ) < 1 && _value . length ( ) < 1 ) { switch ( getCode ( ) ) { case CmpOp . NONE : return true ; case CmpOp . EQ : return false ; case CmpOp . NE : return true ; } return false ; } if ( _pattern ! = null ) { return evaluate ( _pattern . matcher ( testedValue ) . matches ( ) ) ; } return ( testedValue . compareToIgnoreCase ( _value ) ) ; }
public ListWebsiteAuthorizationProvidersResult listWebsiteAuthorizationProviders ( ListWebsiteAuthorizationProvidersRequest request ) { request = beforeClientExecution ( request ) ; return executeListWebsiteAuthorizationProviders ( request ) ; }
public void write ( char [ ] buf , int offset , int count ) { doWrite ( buf , offset , count ) ; }
public String formatAsString ( ) { if ( isWholeColumnReference ( ) ) { returnCellReference . convertNumToColString ( _firstCell . getCol ( ) ) + " : " + CellReference . convertNumToColString ( _lastCell . getCol ( ) )  ; } StringBuilder sb = new StringBuilder ( 32 ) ; sb . append ( _firstCell . formatAsString ( ) ) ; if ( ! _isSingleCell ) { sb . append ( CELL_DELIMITER ) ; if ( _lastCell . getSheetName ( ) == null ) { sb . append ( _lastCell . formatAsString ( ) ) ; } else { _lastCell . appendCellReference ( sb ) ; } } return sb . toString ( ) ; }
public Graphics create ( ) { return new EscherGraphics ( escherGroup , workbook , foreground , font , verticalPointsPerPixel ) ; }
public DoubleDocValues ( ValueSource vs )  { this . vs = vs ; }
public static CharArraySet getDefaultStopSet ( ) { return DefaultSetHolder . DEFAULT_STOP_SET ; }
public DeleteLoadBalancerPolicyResult deleteLoadBalancerPolicy ( DeleteLoadBalancerPolicyRequest request ) { request = beforeClientExecution ( request ) ; return executeDeleteLoadBalancerPolicy ( request ) ; }
public ReplicationGroup decreaseReplicaCount ( DecreaseReplicaCountRequest request ) { request = beforeClientExecution ( request ) ; return executeDecreaseReplicaCount ( request ) ; }
public Result update ( RevWalk walk ) throws IOException { requireCanDoUpdate ( ) ; try { return result = updateImpl ( walk , new Store ( ) { @OverrideResult execute ( Result status ) IOException { if ( status = = Result . NO_CHANGE ) status ; return doUpdate ( status ) ; } } ) ; } catch ( IOException x ) { result = Result . IO_FAILURE ; throw x ; } }
public Set < String > getChanged ( ) { return Collections . unmodifiableSet ( diff . getChanged ( ) ) ; }
public static String toHex ( long value ) { StringBuilder sb = new StringBuilder ( 16 ) ; writeHex ( sb , value , 16 , " " ) ; return sb . toString ( ) ; }
public int createPlaceholder ( ) { return _offset ++ ; }
@Override public  boolean equals ( Object o ) { if ( o instanceof . ) { Map . Entry other = ( Map . Entry ) o ; return ( key == null ? other . getKey ( ) == null : key . equals ( other . getKey ( ) )  ) & & ( value == null ? other . getValue ( ) == null : value . equals ( other . getValue ( ) ) ) ; } return false ; }
public ValueEval evaluate ( int srcRowIndex , int srcColumnIndex , ValueEval arg0 , ValueEval arg1 ) { double result ; try { double d0 = NumericFunction . singleOperandEvaluate ( arg0 , srcRowIndex , srcColumnIndex ) ; double d1 = NumericFunction . singleOperandEvaluate ( arg1 , srcRowIndex , srcColumnIndex ) ; double logE = Math . log ( d0 ) ; if ( Double . compare ( d1 , Math . E ) == 0 ) { result = logE ; } else { result = logE / Math . log ( d1 ) ; } NumericFunction . checkValue ( result ) ; } catch ( EvaluationException e ) { return e . getErrorEval ( ) ; } return new NumberEval ( result ) ; }
public DeleteFilterResult deleteFilter ( DeleteFilterRequest request ) { request = beforeClientExecution ( request ) ; return executeDeleteFilter ( request ) ; }
public CreateInstanceSnapshotResult createInstanceSnapshot ( CreateInstanceSnapshotRequest request ) { request = beforeClientExecution ( request ) ; return executeCreateInstanceSnapshot ( request ) ; }
public List < Token > getTokens ( int start , int stop ) { return getTokens ( start , stop , null ) ; }
public static TermGroupFacetCollector createTermGroupFacetCollector ( String groupField , String facetField , boolean facetFieldMultivalued , BytesRef facetPrefix , int initialSize ) { if ( facetFieldMultivalued ) { return new MV ( groupField , facetField , facetPrefix , initialSize ) ; } else { return new SV ( groupField , facetField , facetPrefix , initialSize ) ; } }
public RenameAlbumRequest ( ) { super ( " CloudPhoto " , " 2017-07-11 " , " RenameAlbum " , " cloudphoto " ) ; setProtocol ( ProtocolType . HTTPS ) ; }
@Override public boolean contains ( Object object ) { synchronized ( mutex ) { return c . contains ( object ) ; } }
public CharBuffer put ( char [ ] src , int srcOffset , int charCount ) { if ( charCount > remaining ( ) ) { throw new BufferOverflowException ( ) ; } System . arraycopy ( src , srcOffset , backingArray , offset + position , charCount ) ; position += charCount ; return this ; }
public LegendRecord ( RecordInputStream in )  { field_1_xAxisUpperLeft = in . readInt ( ) ; field_2_yAxisUpperLeft = in . readInt ( ) ; field_3_xSize = in . readInt ( ) ; field_4_ySize = in . readInt ( ) ; field_5_type = in . readByte ( ) ; field_6_spacing = in . readByte ( ) ; field_7_options = in . readShort ( ) ; }
public static byte [ ] encodedTypeString ( int typeCode ) { switch ( typeCode ) { case OBJ_COMMIT : return ENCODED_TYPE_COMMIT ; case OBJ_TREE : return ENCODED_TYPE_TREE ; case OBJ_BLOB : return ENCODED_TYPE_BLOB ; case OBJ_TAG : return ENCODED_TYPE_TAG ; default : throw new IllegalArgumentException ( MessageFormat . format ( JGitText . get ( ) . badObjectType , Integer . valueOf ( typeCode ) ) ) ; } }
public ObjectId getCalulatedPatchId ( ) { return ObjectId . fromRaw ( digest . digest ( ) ) ; }
public DefaultRowHeightRecord ( ) { field_1_option_flags = 0x0000 ; field_2_row_height = DEFAULT_ROW_HEIGHT ; }
public final ByteBuffer encode ( CharBuffer buffer ) { try { return newEncoder ( ) . onMalformedInput ( CodingErrorAction . REPLACE ) . onUnmappableCharacter ( CodingErrorAction . REPLACE ) . encode ( buffer ) ; } catch ( CharacterCodingException ex ) { throw new Error ( ex . getMessage ( ) , ex ) ; } }
public final FloatBuffer get ( float [ ] dst , int dstOffset , int floatCount ) { if ( floatCount > remaining ( ) ) { throw new BufferUnderflowException ( ) ; } System . arraycopy ( backingArray , offset + position , dst , dstOffset , floatCount ) ; position += floatCount ; return this ; }
public boolean hasNext ( ) { return nextEntry != null ; }
public DeleteNatGatewayResult deleteNatGateway ( DeleteNatGatewayRequest request ) { request = beforeClientExecution ( request ) ; return executeDeleteNatGateway ( request ) ; }
public String resolveNameXText ( int refIndex , int definedNameIndex ) { return linkTable . resolveNameXText ( refIndex , definedNameIndex , this ) ; }
public void setMultiFields ( CharSequence [ ] fields ) { if ( fields == null ) { fields = new CharSequence [ 0 ] ; } getQueryConfigHandler ( ) . set ( ConfigurationKeys . MULTI_FIELDS , fields ) ; }
public boolean isCancelled ( ) { lock . lock ( ) ; try { return pm . isCancelled ( ) ; } finally { lock . unlock ( ) ; } }
public RemoveTargetsResult removeTargets ( RemoveTargetsRequest request ) { request = beforeClientExecution ( request ) ; return executeRemoveTargets ( request ) ; }
public FuzzyQuery ( Term term , int maxEdits , int prefixLength , int maxExpansions , boolean transpositions )  { super ( term . field ( ) ) ; if ( maxEdits < 0 || maxEdits > LevenshteinAutomata . MAXIMUM_SUPPORTED_DISTANCE ) { throw new IllegalArgumentException ( " maxEdits must be between 0 and  " + LevenshteinAutomata . MAXIMUM_SUPPORTED_DISTANCE ) ; } if ( prefixLength < 0 ) { throw new IllegalArgumentException ( " prefixLength cannot be negative. " ) ; } if ( maxExpansions <= 0 ) { throw new IllegalArgumentException ( " maxExpansions must be positive. " ) ; } this . term = term ; this . maxEdits = maxEdits ; this . prefixLength = prefixLength ; this . transpositions = transpositions ; this . maxExpansions = maxExpansions ; int [ ] codePoints = FuzzyTermsEnum . stringToUTF32 ( term . text ( ) ) ; this . termLength = codePoints . length ; this . automata = FuzzyTermsEnum . buildAutomata ( term . text ( ) , codePoints , prefixLength , transpositions , maxEdits ) ; setRewriteMethod ( new MultiTermQuery . TopTermsBlendedFreqScoringRewrite ( maxExpansions ) ) ; this . ramBytesUsed = calculateRamBytesUsed ( term , this . automata ) ; }
public CheckoutCommand checkout ( ) { return new CheckoutCommand ( repo ) ; }
public ValueEval evaluate ( String sheetName , int rowIndex , int columnIndex ) { EvaluationCell cell = _sewb . getEvaluationCell ( sheetName , rowIndex , columnIndex ) ; switch ( cell . getCellType ( ) ) { case BOOLEAN : return BoolEval . valueOf ( cell . getBooleanCellValue ( ) ) ; case ERROR : return ErrorEval . valueOf ( cell . getErrorCellValue ( ) ) ; case FORMULA : return _evaluator . evaluate ( cell ) ; case NUMERIC : return new NumberEval ( cell . getNumericCellValue ( ) ) ; case STRING : return new StringEval ( cell . getStringCellValue ( ) ) ; case BLANK : return null ; default : throw new IllegalStateException ( " Bad cell type ( " + cell . getCellType ( ) + " ) " ) ; } }
public PutFileSystemPolicyResult putFileSystemPolicy ( PutFileSystemPolicyRequest request ) { request = beforeClientExecution ( request ) ; return executePutFileSystemPolicy ( request ) ; }
public long fileLength ( String name ) throws IOException { ensureOpen ( ) ; FileEntry e = entries . get ( IndexFileNames . stripSegmentName ( name ) ) ; if ( e == null ) throw new FileNotFoundException ( name ) ; return e . length ; }
public DescribeCacheClustersResult describeCacheClusters ( ) { return describeCacheClusters ( new DescribeCacheClustersRequest ( ) ) ; }
public void setObjectId ( RevObject obj ) { setObjectId ( obj , obj . getType ( ) ) ; }
public boolean rowHasCells ( int row ) { if ( row >= records . length ) { return false ; } CellValueRecordInterface [ ] rowCells = records [ row ] ; if ( rowCells == null ) return false ; for ( int col = 0 ; col < rowCells . length ; col ++ ) { if ( rowCells [ col ] != null ) return true ; } return false ; }
public TokenStream create ( TokenStream input ) { return new SpanishLightStemFilter ( input ) ; }
public StoredField ( String name , double value )  { super ( name , TYPE ) ; fieldsData = value ; }
public DescribePublicIpv4PoolsResult describePublicIpv4Pools ( DescribePublicIpv4PoolsRequest request ) { request = beforeClientExecution ( request ) ; return executeDescribePublicIpv4Pools ( request ) ; }
public IndexRevision ( IndexWriter writer ) { = writer . getConfig ( ) . getIndexDeletionPolicy ( ) ; if ( ! ( delPolicy instanceof ) ) { throw new IllegalArgumentException ( " IndexWriter must be created with SnapshotDeletionPolicy " ) ; } this . writer = writer ; this . sdp = ( SnapshotDeletionPolicy ) delPolicy ; this . commit = sdp . snapshot ( ) ; this . version = revisionVersion ( commit ) ; this . sourceFiles = revisionFiles ( commit ) ; }
public void setTabIdArray ( short [ ] array ) { _tabids = array . clone ( ) ; }
public UpdateObjectAttributesResult updateObjectAttributes ( UpdateObjectAttributesRequest request ) { request = beforeClientExecution ( request ) ; return executeUpdateObjectAttributes ( request ) ; }
public GetGameSessionLogUrlResult getGameSessionLogUrl ( GetGameSessionLogUrlRequest request ) { request = beforeClientExecution ( request ) ; return executeGetGameSessionLogUrl ( request ) ; }
public RefCount ( T object )  { this . object = object ; }
public ByteBuffer put ( int index , byte b ) { checkIndex ( index ) ; backingArray [ offset + index ] = b ; return this ; }
public IntervalSet LOOK ( ATNState s , ATNState stopState , RuleContext ctx ) { IntervalSet r = new IntervalSet ( ) ; boolean seeThruPreds = true ; PredictionContext lookContext = ctx != null ? PredictionContext . fromRuleContext ( s . atn , ctx ) : null ; _LOOK ( s , stopState , lookContext , r , new HashSet < ATNConfig > ( ) , new BitSet ( ) , seeT